OVERALL NOTES 

- The coding pass is for determining locations where we may be over or under tagging
- typos are idiosyncratic tags (e.g. $integer:intger$) that should be added
- for the problem convert, if referenced as the problem, should not be $typecast:convert$
- If the grammatical structure doesn't fit, untag as much as tag
- spell check your additional tags, Molly
- The tag needs to be meaningful in the prompt to be tagged (when combine could be any other), we are looking for specific meanings
- Read submitted text first and then compare 

PROBLEM SPECIFIC FEEDBACK 
- for the problem convert, if referenced as the problem, should not be $typecast:convert$
- for the problem combine, if it references the problem or a generic "blend" operation, don't tag $concatenate:combine$ 
- Also do not tag any parameter or function names that are also 
categories/terms 

CATEGORY/TERM SPECIFIC NOTES

string	word
string	phrase
string	string
string	set of characters
string	characters
NOTE: do not tag when a "letter" Refers to the concept of a letter in English. 
NOTE: take a "C style" mindset here, in that a single character is not a string 

list	brackets
list	set of brackets
list	set
list	list
list	array
list	sequence array

return	output
return	return
return	print
return	produce
return	display
return	provides
return	gives
NOTE: do not tag return as a noun or adjective, only a verb 

input   input
NOTE: should NEVER remain $input:input$, should always be 
recategorized as parameter or takes (or provides)

parameter	parameter
parameter	argument
parameter	value provided
NOTE: this is the  "thing" take is the "action" 
NOTE: $inputted value$ and $value inputted$, ONLY do this when it is value/expression/term/item/variable (value is a placeholder for a generic expression)

takes	takes
takes	gets
takes	receives
takes	brings in
takes	accept
NOTE: $takes:takes$ should be $takes:takes in$ if followed by an "in" (ditto for similar constructs)

provides	enter
NOTE: only HUMAN at the command line level enter

insert	add
insert	insert
insert	append
insert	attach
NOTE: applies when the types are NOT the same (e.g. adding a number to a list)
NOTE: common add is issue is a tag of add that is the mathematical operation and not the list/string operation 

concatenate	combine
concatenate	splice
concatenate	concatenate
concatenate	put together
NOTE: the rule is that these tags only apply if the types that are being concatenated are the same 

loop	go through
loop	run through
loop	iterate through
loop	loop through
loop	move through
loop	run a for loop through
loop	looks through
loop	executes a for loop with
loop	loops over
NOTE: Weird captialization in these tags was NOT autocaptured, so make sure to add in review

skip	avoid
skip	neglect
skip	ignore
skip	remove
skip	skip

dictionary	map
dictionary	dictionary
dictionary	array
dictionary	list of keys and values
NOTE: For add_word ONLY, instances of map should not be substituted/tagged as it's a variable name.

key	key
key	item
key	entry
key	attribute
key	part
key	element
key	parameter
key	variable
NOTE: $key$ should only be used for dictionary.
NOTE: variable and item are very common oversubstitutes 
NOTE: there is a totally correct tag of $key: key value$

typecast	convert
NOTE: this is coded specifically only if the mention is unique to a type change, e.g. '1' to 1 or 1.2 to 1

typecast	cast
typecast	change
typecast	turn into
typecast	type cast
typecast	typecast
typecast	treat as

integer	integer
integer	whole number
integer	int
integer	number without decimal
integer	non-decimal
