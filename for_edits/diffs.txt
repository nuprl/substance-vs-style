
Value of root[1]['prompt'] changed from "def subtract_add(lst):
    """
    The $parameters:input$ will be a $list:list$ of $integers:integers$. $Return:Return$ 0 if the $list:list$ is empty. Otherwise, subtract the sum of all the $integers:integers$ with odd positions from the sum of all the $integers:integers$ with even positions.
    """
    " to "def subtract_add(lst):
    """
    The $parameter:input$ will be a $list:list$ of $integers:integers$. $Return:Return$ 0 if the $list:list$ is empty. Otherwise, subtract the sum of all the $integers:integers$ with odd positions from the sum of all the $integers:integers$ with even positions.
    """
    ".
    DECISION: keep parameter


Value of root[2]['prompt'] changed from "def subtract_add(lst):
    """
    The $parameters:input$ will be a $list:list$ of $integers:integers$. $Return:Return$ 0 if the $list:list$ is empty. Otherwise, subtract the sum of all the $integers:integers$ with odd positions from the sum of all the $integers:integers$ with even positions.
    """
    " to "def subtract_add(lst):
    """
    The $parameter:input$ will be a $list:list$ of $integers:integers$. $Return:Return$ 0 if the $list:list$ is empty. Otherwise, subtract the sum of all the $integers:integers$ with odd positions from the sum of all the $integers:integers$ with even positions.
    """
    ".
    DECISION: keep parameter 

Value of root[7]['prompt'] changed from "def add_int(lst, num):
    """
    For each element in the $list:list$ lst, if the element is a $string:string$, $concatenate:append$ the number num to the end of the $string:string$. If the element is an $integer:integer$, add num to it. If it is any other type, do not do anything to it.

    """
    " to "def add_int(lst, num):
    """
    For each element in the $list:list$ lst, if the element is a $string:string$, $insert:append$ the number num to the end of the $string:string$. If the element is an $integer:integer$, add num to it. If it is any other type, do not do anything to it.

    """
    ".
    DECISION: $concatenate:append$ because this is a "string style" operation, and $insert$ 
    does not apply. 

Value of root[8]['prompt'] changed from "def add_int(lst, num):
    """
    For each element in the $list:list$ lst, if the element is a $string:string$, $concatenate:append$ the number num to the end of the $string:string$. If the element is an $integer:integer$, add num to it. If it is any other type, do not do anything to it.

    """
    " to "def add_int(lst, num):
    """
    For each element in the $list:list$ lst, if the element is a $string:string$, $insert:append$ the number num to the end of the $string:string$. If the element is an $integer:integer$, add num to it. If it is any other type, do not do anything to it.

    """
    ".
    DECISION: $concatenate:append$ because this is a "string style" operation, and $insert$ 
    does not apply. 

Value of root[11]['prompt'] changed from "def remove_odd(lst):
    """
    $takes:takes$ in a $list:list$ of numbers. $returns:returns$ the $list:list$ of numbers without odd $integer:integer$ numbers.
    """
    " to "def remove_odd(lst):
    """
    $takes:takes in$ a $list:list$ of numbers. $returns:returns$ the $list:list$ of numbers without odd $integer:integer numbers$.
    """
    ".
    DECISION: $takes: takes in$ 
    DECISION: $integers:integer numbers$ we are GOOD with the adjective. 

Value of root[12]['prompt'] changed from "def remove_odd(lst):
    """
    $takes:takes$ in a $list:list$ of numbers. $returns:returns$ the $list:list$ of numbers without odd $integer:integer$ numbers.
    """
    " to "def remove_odd(lst):
    """
    $takes:takes in$ a $list:list$ of numbers. $returns:returns$ the $list:list$ of numbers without odd $integer:integer numbers$.
    """
    ".
    DECISION: $takes: takes in$ 
    DECISION: $integers:integer numbers$ we are GOOD with the adjective. 

Value of root[13]['prompt'] changed from "def create_list(dt, lst):
    """
    Using the $dictionary:dictionary$ provided, replace each letter (which is the $key:key$ in the dictionary)in the $list:list$ with the value. If the letter is not found in the $dictionary:dictionary$'s $keys:keys$, replace that letter with None. $Return:Return$ the resulting $list:list$.
    """
    " to "def create_list(dt, lst):
    """
    Using the $dictionary:dictionary$ provided, replace each letter (which is the $key:key$ in the $dictionary:dictionary$)in the $list:list$ with the value. If the letter is not found in the $dictionary:dictionary$'s $keys:keys$, replace that letter with None. $Return:Return$ the resulting $list:list$.
    """
    ".
    DECISION: $dictionary:dictionary$)

Value of root[14]['prompt'] changed from "def create_list(dt, lst):
    """
    Using the $dictionary:dictionary$ provided, replace each letter (which is the $key:key$ in the dictionary)in the $list:list$ with the value. If the letter is not found in the $dictionary:dictionary$'s $keys:keys$, replace that letter with None. $Return:Return$ the resulting $list:list$.
    """
    " to "def create_list(dt, lst):
    """
    Using the $dictionary:dictionary$ provided, replace each letter (which is the $key:key$ in the $dictionary:dictionary$)in the $list:list$ with the value. If the letter is not found in the $dictionary:dictionary$'s $keys:keys$, replace that letter with None. $Return:Return$ the resulting $list:list$.
    """
    ".
    DECISION: $dictionary:dictionary$)

Value of root[19]['prompt'] changed from "def student_grades(students, grades):
    """
    This function $returns:prints$ a new $dictionary:dictionary$ containing the $strings:strings$ that appear in the first $dictionary:dictionary$ the $lists:lists$ of $strings:stings$ that appear in the second $dictionary:dictionary$
    """
    " to "def student_grades(students, grades):
    """
    This function $returns:prints$ a new $dictionary:dictionary$ containing the $strings:strings$ that appear in the first $dictionary:dictionary$ the $lists:lists$ of $string:stings$ that appear in the second $dictionary:dictionary$
    """
    ".
    DECISION: pluralize appropriately $strings:stings$

Value of root[20]['prompt'] changed from "def student_grades(students, grades):
    """
    This function $returns:prints$ a new $dictionary:dictionary$ containing the $strings:strings$ that appear in the first $dictionary:dictionary$ the $lists:lists$ of $strings:stings$ that appear in the second $dictionary:dictionary$
    """
    " to "def student_grades(students, grades):
    """
    This function $returns:prints$ a new $dictionary:dictionary$ containing the $strings:strings$ that appear in the first $dictionary:dictionary$ the $lists:lists$ of $string:stings$ that appear in the second $dictionary:dictionary$
    """
    ".
    DECISION: pluralize appropriately $strings:stings$

Value of root[21]['prompt'] changed from "def times_with(meetings):
    """
    This function $takes:takes in$ a $list:list$ within a $list:list$, consisting of the age as an $integer:integer$, and names as a $string:string$. The output creates a $dictionary:dictionary$ where the age given is the 
Value for the names given 
    """
    " to "def times_with(meetings):
    """
    This function $takes:takes in$ a $list:list$ within a $list:list$, consisting of the age as an $integer:integer$, and names as a $string:string$. The $return:output$ creates a $dictionary:dictionary$ where the age given is the 
Value for the names given 
    """
    ".
    DECISION: output as a noun, remove tag for $return:output$

Value of root[22]['prompt'] changed from "def times_with(meetings):
    """
    This function $takes:takes in$ a $list:list$ within a $list:list$, consisting of the age as an $integer:integer$, and names as a $string:string$. The output creates a $dictionary:dictionary$ where the age given is the 
Value for the names given 
    """
    " to "def times_with(meetings):
    """
    This function $takes:takes in$ a $list:list$ within a $list:list$, consisting of the age as an $integer:integer$, and names as a $string:string$. The $return:output$ creates a $dictionary:dictionary$ where the age given is the 
Value for the names given 
    """
    ".
    DECISION: output as a noun, remove tag for $return:output$

Value of root[33]['prompt'] changed from "def assessVowels(s):
    """
    This function $returns:pints$ a $list:list$ containing $strings:strings$ of every 
Value from the $input:input$
    """
    " to "def assessVowels(s):
    """
    This function $returns:pints$ a $list:list$ containing $strings:strings$ of every 
Value from the $parameter:input$
    """
    ".
    DECISION: keep $parameter:input$

Value of root[34]['prompt'] changed from "def assessVowels(s):
    """
    This function $returns:pints$ a $list:list$ containing $strings:strings$ of every 
Value from the $input:input$
    """
    " to "def assessVowels(s):
    """
    This function $returns:pints$ a $list:list$ containing $strings:strings$ of every 
Value from the $parameter:input$
    """
    ".
    DECISION: $parameter:input$

Value of root[39]['prompt'] changed from "def findHorizontals(puzzle,wordList):
    """
    The $parameters:input$ will be a "puzzle" $list:list$ and a "wordList" $list:list$. They consist of $strings:strings$ and have equal length. Check if the $string:string$ in the puzzle $list:list$ contains all the characters of the $string:string$ in the wordList $list:list$. $Return:Return$ a $dictionary:dictionary$ with the $string:string$ as the $key:key$ and the position of the $string:string$ as the value.
    """
    " to "def findHorizontals(puzzle,wordList):
    """
    The $parameter:input$ will be a "puzzle" $list:list$ and a "wordList" $list:list$. They consist of $strings:strings$ and have equal length. Check if the $string:string$ in the puzzle $list:list$ contains all the characters of the $string:string$ in the wordList $list:list$. $Return:Return$ a $dictionary:dictionary$ with the $string:string$ as the $key:key$ and the position of the $string:string$ as the value.
    """
    ".
    DECISION: $parameters:input$ (plural)

Value of root[40]['prompt'] changed from "def findHorizontals(puzzle,wordList):
    """
    The $parameters:input$ will be a "puzzle" $list:list$ and a "wordList" $list:list$. They consist of $strings:strings$ and have equal length. Check if the $string:string$ in the puzzle $list:list$ contains all the characters of the $string:string$ in the wordList $list:list$. $Return:Return$ a $dictionary:dictionary$ with the $string:string$ as the $key:key$ and the position of the $string:string$ as the value.
    """
    " to "def findHorizontals(puzzle,wordList):
    """
    The $parameter:input$ will be a "puzzle" $list:list$ and a "wordList" $list:list$. They consist of $strings:strings$ and have equal length. Check if the $string:string$ in the puzzle $list:list$ contains all the characters of the $string:string$ in the wordList $list:list$. $Return:Return$ a $dictionary:dictionary$ with the $string:string$ as the $key:key$ and the position of the $string:string$ as the value.
    """
    ".
    DECISION: $parameters:input$ (plural)

Value of root[41]['prompt'] changed from "def partialWordle(guessList,hiddenWord):
    """
    Iterates through a guess $list:list$

0 
1
2
3...1  letter in the right place
4... 2 letters in the right place 
6 ... 3 letters in the right place
    """
    " to "def partialWordle(guessList,hiddenWord):
    """
    $Loop:Iterates through$ a guess $list:list$

0 
1
2
3...1  letter in the right place
4... 2 letters in the right place 
6 ... 3 letters in the right place
    """
    ".
    DECISION: Keep loop tag, make it $Loops:Iterates through$

Value of root[42]['prompt'] changed from "def partialWordle(guessList,hiddenWord):
    """
    Iterates through a guess $list:list$

0 
1
2
3...1  letter in the right place
4... 2 letters in the right place 
6 ... 3 letters in the right place
    """
    " to "def partialWordle(guessList,hiddenWord):
    """
    $Loop:Iterates through$ a guess $list:list$

0 
1
2
3...1  letter in the right place
4... 2 letters in the right place 
6 ... 3 letters in the right place
    """
    ".
    DECISION: Keep loop tag, make it $Loops:Iterates through$

Value of root[45]['prompt'] changed from "def set_chars(s,c,l):
    """
    For each letter in $string:sentence$ s, replace the letter with the $string:character$ c if the index of the letter is in $list:list$ l
    """
    " to "def set_chars(s,c,l):
    """
    For each letter in sentence s, replace the letter with the character c if the index of the letter is in $list:list$ l
    """
    ".
    DECISION: no tag for $string:sentence$, no tag for $string:character$

Value of root[46]['prompt'] changed from "def set_chars(s,c,l):
    """
    For each letter in $string:sentence$ s, replace the letter with the $string:character$ c if the index of the letter is in $list:list$ l
    """
    " to "def set_chars(s,c,l):
    """
    For each letter in sentence s, replace the letter with the character c if the index of the letter is in $list:list$ l
    """
    ".
    DECISION: no tag for $string:sentence$, no tag for $string:character$

Value of root[47]['prompt'] changed from "def altText(s):
    """
    This function $takes:takes$ in a $string:word or sentence$ and $returns:outputs$ every other letter as upper case. If it is just a one letter $string:word$ it is turned into an upper case letter.
    """
    " to "def altText(s):
    """
    This function $takes:takes in$ a $string:word$ or sentence and $returns:outputs$ every other letter as upper case. If it is just a one letter $string:word$ it is turned into an upper case letter.
    """
    ".
    DECISION: $string:word or sentence$ as a tag 
    DECISION: $takes:takes in$ is the correct tag

Value of root[48]['prompt'] changed from "def altText(s):
    """
    This function $takes:takes$ in a $string:word or sentence$ and $returns:outputs$ every other letter as upper case. If it is just a one letter $string:word$ it is turned into an upper case letter.
    """
    " to "def altText(s):
    """
    This function $takes:takes in$ a $string:word$ or sentence and $returns:outputs$ every other letter as upper case. If it is just a one letter $string:word$ it is turned into an upper case letter.
    """
    ".
    DECISION: $string:word or sentence$ as a tag 
    DECISION: $takes:takes in$ is the correct tag 

Value of root[49]['prompt'] changed from "def changeSection(s,i):
    """
    $takes:takes$ in a $string:string$ and a number. reverse the $string:string$ from index 0 to the number. $return:return$ the $string:string$.
    """
    " to "def changeSection(s,i):
    """
    $takes:takes in$ a $string:string$ and a number. reverse the $string:string$ from index 0 to the number. $return:return$ the $string:string$.
    """
    ".
    DECISION: $takes:takes in$ is the correct tag

Value of root[50]['prompt'] changed from "def changeSection(s,i):
    """
    $takes:takes$ in a $string:string$ and a number. reverse the $string:string$ from index 0 to the number. $return:return$ the $string:string$.
    """
    " to "def changeSection(s,i):
    """
    $takes:takes in$ a $string:string$ and a number. reverse the $string:string$ from index 0 to the number. $return:return$ the $string:string$.
    """
    ".
    DECISION: $takes:takes in$ is the correct tag

Value of root[51]['prompt'] changed from "def edit_col(mat,i,n):
    """
    The $parameters:input$ will be a $list:list$ of $lists:lists$, call it "mat" and two $integers:integers$, call them "i" and "n". For each $list:list$ in mat, replace the $integer:integer$ at position i with the $integer:integer$ n.
    """
    " to "def edit_col(mat,i,n):
    """
    The $parameter:input$ will be a $list:list$ of $lists:lists$, call it "mat" and two $integers:integers$, call them "i" and "n". For each $list:list$ in mat, replace the $integer:integer$ at position i with the $integer:integer$ n.
    """
    ".
    DECISION: $parameters:input$ is the right tag 

Value of root[52]['prompt'] changed from "def edit_col(mat,i,n):
    """
    The $parameters:input$ will be a $list:list$ of $lists:lists$, call it "mat" and two $integers:integers$, call them "i" and "n". For each $list:list$ in mat, replace the $integer:integer$ at position i with the $integer:integer$ n.
    """
    " to "def edit_col(mat,i,n):
    """
    The $parameter:input$ will be a $list:list$ of $lists:lists$, call it "mat" and two $integers:integers$, call them "i" and "n". For each $list:list$ in mat, replace the $integer:integer$ at position i with the $integer:integer$ n.
    """
    ".
    DECISION: $takes:takes in$ is the correct tag

Value of root[53]['prompt'] changed from "def combine(l1,l2):
    """
    $Concatenate:Combine$ each of the respective $lists:lists$ inside each $list:list$ provided
    """
    " to "def combine(l1,l2):
    """
    Combine each of the respective $lists:lists$ inside each $list:list$ provided
    """
    ".
    DECISION: remove combine tag 

Value of root[54]['prompt'] changed from "def combine(l1,l2):
    """
    $Concatenate:Combine$ each of the respective $lists:lists$ inside each $list:list$ provided
    """
    " to "def combine(l1,l2):
    """
    Combine each of the respective $lists:lists$ inside each $list:list$ provided
    """
    ".
    DECISION: remove combine tag 

Value of root[57]['prompt'] changed from "def reduce(val):
    """
    $takes:takes$ in a $string:string$ and $returns:returns$ a $string:string$ with '^' changed to '_'
    """
    " to "def reduce(val):
    """
    $takes:takes in$ a $string:string$ and $returns:returns$ a $string:string$ with '^' changed to '_'
    """
    ".
    DECISION: $takes: takes in$ tag is correct 

Value of root[58]['prompt'] changed from "def reduce(val):
    """
    $takes:takes$ in a $string:string$ and $returns:returns$ a $string:string$ with '^' changed to '_'
    """
    " to "def reduce(val):
    """
    $takes:takes in$ a $string:string$ and $returns:returns$ a $string:string$ with '^' changed to '_'
    """
    ".
    DECISION: $takes: takes in$ tag is correct

Value of root[59]['prompt'] changed from "def fib(n):
    """
    this function $returns:returns$ false if the $parameter:value$ contains a 9
    """
    " to "def fib(n):
    """
    this function $returns:returns$ false if the 
Value contains a 9
    """
    ".
    DECISION: correct tag is $Parameter:Value$ 

Value of root[60]['prompt'] changed from "def fib(n):
    """
    this function $returns:returns$ false if the $parameter:value$ contains a 9
    """
    " to "def fib(n):
    """
    this function $returns:returns$ false if the 
Value contains a 9
    """
    ".
     DECISION: correct tag is $Parameter:Value$ (lowercase in prompts)

Value of root[61]['prompt'] changed from "def add_word(word, line_number, $dictionary:map$):
    """
    $takes:takes in$ a $string:string$, an $integer:integer$, and a $dictionary:dictionary$.
$returns:returns$ the $dictionary:dictionary$ that $inserts:adds$ the $string:string$ as a $key:key$ and $integer:integer$ as the value
    """
    " to "def add_word(word, line_number, map):
    """
    $takes:takes in$ a $string:string$, an $integer:integer$, and a $dictionary:dictionary$.
$returns:returns$ the $dictionary:dictionary$ that adds the $string:string$ as a $key:key$ and $integer:integer$ as the value
    """
    ".
    DECISION: $inserts:adds$ is correct b/c dictionary

Value of root[62]['prompt'] changed from "def add_word(word, line_number, $dictionary:map$):
    """
    $takes:takes in$ a $string:string$, an $integer:integer$, and a $dictionary:dictionary$.
$returns:returns$ the $dictionary:dictionary$ that $inserts:adds$ the $string:string$ as a $key:key$ and $integer:integer$ as the value
    """
    " to "def add_word(word, line_number, map):
    """
    $takes:takes in$ a $string:string$, an $integer:integer$, and a $dictionary:dictionary$.
$returns:returns$ the $dictionary:dictionary$ that adds the $string:string$ as a $key:key$ and $integer:integer$ as the value
    """
    ".
    DECISION: $inserts:adds$ is correct b/c dictionary

Value of root[63]['prompt'] changed from "def check_for_aspen(trees):
    """
    Check if "aspen" is one of the $keys:keys$ in a dict. $Return:Return$ "Yup" if it is a $key:key$, "Nope" if it is not a $key:key$.
    """
    " to "def check_for_aspen(trees):
    """
    Check if "aspen" is one of the $keys:keys$ in a $dictionary:dict$. $Return:Return$ "Yup" if it is a $key:key$, "Nope" if it is not a $key:key$.
    """
    ".
    DECISION: $dictionary:dict$ is the right tag 

Value of root[64]['prompt'] changed from "def check_for_aspen(trees):
    """
    Check if "aspen" is one of the $keys:keys$ in a dict. $Return:Return$ "Yup" if it is a $key:key$, "Nope" if it is not a $key:key$.
    """
    " to "def check_for_aspen(trees):
    """
    Check if "aspen" is one of the $keys:keys$ in a $dictionary:dict$. $Return:Return$ "Yup" if it is a $key:key$, "Nope" if it is not a $key:key$.
    """
    ".
    DECISION: $dictionary:dict$ is the right tag

Value of root[67]['prompt'] changed from "def sortedBooks(books, writer):
    """
    The $input:input$ will be a $list:list$ of $dictionaries:dictionaries$ and a $string:string$. $Skip:Remove$ all $dictionaries:dictionaries$ where the $key:key$ "author" does not match the $string:string$. $Return:Return$ the updated $list:list$.
    """
    " to "def sortedBooks(books, writer):
    """
    The $parameter:input$ will be a $list:list$ of $dictionaries:dictionaries$ and a $string:string$. $Skip:Remove$ all $dictionaries:dictionaries$ where the $key:key$ "author" does not match the $string:string$. $Return:Return$ the updated $list:list$.
    """
    ".
    DECISIONS: $parameters:inputs$ is the right tag 

Value of root[68]['prompt'] changed from "def sortedBooks(books, writer):
    """
    The $input:input$ will be a $list:list$ of $dictionaries:dictionaries$ and a $string:string$. $Skip:Remove$ all $dictionaries:dictionaries$ where the $key:key$ "author" does not match the $string:string$. $Return:Return$ the updated $list:list$.
    """
    " to "def sortedBooks(books, writer):
    """
    The $parameter:input$ will be a $list:list$ of $dictionaries:dictionaries$ and a $string:string$. $Skip:Remove$ all $dictionaries:dictionaries$ where the $key:key$ "author" does not match the $string:string$. $Return:Return$ the updated $list:list$.
    """
    ".
    DECISIONS: $parameters:inputs$ is the right tag

Value of root[77]['prompt'] changed from "def total_bill(grocery_list, sales_tax):
    """
    This function $takes:takes in$ a $list:list$ of the $key:item$ purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the $lists:lists$ are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then $returned:returned$ as the output.
    """
    " to "def total_bill(grocery_list, sales_tax):
    """
    This function $takes:takes in$ a $list:list$ of the item purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the $lists:lists$ are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then $returned:returned$ as the output.
    """
    ".
    DECISION: remove the $key:item$ tag 

Value of root[78]['prompt'] changed from "def total_bill(grocery_list, sales_tax):
    """
    This function $takes:takes in$ a $list:list$ of the $key:item$ purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the $lists:lists$ are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then $returned:returned$ as the output.
    """
    " to "def total_bill(grocery_list, sales_tax):
    """
    This function $takes:takes in$ a $list:list$ of the item purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the $lists:lists$ are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then $returned:returned$ as the output.
    """
    ".
    DECISION: remove the $key:item$ tag

Value of root[79]['prompt'] changed from "def translate(lexicon,sentence):
    """
    This function $takes:takes in$ a $dictionary:dictionary$ of $strings:words$, translating the English words into. a different language. THe function then $takes:takes in$ a sentence and uses the $dictionary:dictionary$ to replace the English words with the translated word from a different language. 
    """
    " to "def translate(lexicon,sentence):
    """
    This function $takes:takes in$ a $dictionary:dictionary$ of $strings:words$, translating the English $strings:words$ into. a different language. THe function then $takes:takes in$ a sentence and uses the $dictionary:dictionary$ to replace the English $strings:words$ with the translated $string:word$ from a different language. 
    """
    ".
    DECISION: "English words" are now a subset of strings ("Proper Strings"), remove $strings:words$

Value of root[80]['prompt'] changed from "def translate(lexicon,sentence):
    """
    This function $takes:takes in$ a $dictionary:dictionary$ of $strings:words$, translating the English words into. a different language. THe function then $takes:takes in$ a sentence and uses the $dictionary:dictionary$ to replace the English words with the translated word from a different language. 
    """
    " to "def translate(lexicon,sentence):
    """
    This function $takes:takes in$ a $dictionary:dictionary$ of $strings:words$, translating the English $strings:words$ into. a different language. THe function then $takes:takes in$ a sentence and uses the $dictionary:dictionary$ to replace the English $strings:words$ with the translated $string:word$ from a different language. 
    """
    ".
    DECISION: "English words" are now a subset of strings ("Proper Strings"), remove $strings:words$

Value of root[83]['prompt'] changed from "def generateCardDeck(suits, vals):
    """
    This function $takes:inputs$ two $lists:lists$. The letter at the end of the first $dictionary:dictionary$ $concatenates:adds$ on the lowest number of the second $dictionary:dictionary$. This keeps going and forms a new $list:list$ with all the $concatenated:combined$ letters and numbers. 
    """
    " to "def generateCardDeck(suits, vals):
    """
    This function $takes:inputs$ two $lists:lists$. The letter at the end of the first $dictionary:dictionary$ $concatenate:adds$ on the lowest number of the second $dictionary:dictionary$. This keeps going and forms a new $list:list$ with all the $concatenated:combined$ letters and numbers. 
    """
    ".
    DECISION: $concatenates:adds$ (plural)

Value of root[84]['prompt'] changed from "def generateCardDeck(suits, vals):
    """
    This function $takes:inputs$ two $lists:lists$. The letter at the end of the first $dictionary:dictionary$ $concatenates:adds$ on the lowest number of the second $dictionary:dictionary$. This keeps going and forms a new $list:list$ with all the $concatenated:combined$ letters and numbers. 
    """
    " to "def generateCardDeck(suits, vals):
    """
    This function $takes:inputs$ two $lists:lists$. The letter at the end of the first $dictionary:dictionary$ $concatenate:adds$ on the lowest number of the second $dictionary:dictionary$. This keeps going and forms a new $list:list$ with all the $concatenated:combined$ letters and numbers. 
    """
    ".
    DECISION: $concatenates:adds$ (plural)

Value of root[93]['prompt'] changed from "def laugh(size):
    """
    This function $returns:prints$ "ha" for any $parameter:value$
    """
    " to "def laugh(size):
    """
    This function $returns:prints$ "ha" for any value
    """
    ".
    DECISION: $parameter:value$ 

Value of root[94]['prompt'] changed from "def laugh(size):
    """
    This function $returns:prints$ "ha" for any $parameter:value$
    """
    " to "def laugh(size):
    """
    This function $returns:prints$ "ha" for any value
    """
    ".
    DECISION: $parameter:value$

Value of root[95]['prompt'] changed from "def laugh(size):
    """
    the $parameter:input$ generates a $string:string$ where the number corresponds to how many items are in the $string:string$. each item in the $string:string$ also starts with the letter 'h' and the letter 'a' is $concatenated:added$ to the letter 'h' based on the number of the $parameter:input$. However, only the first item in the $string:string$ has the number of 'a' equal to the $parameter:input$, the following 'a' are $concatenated:added$ to 'h' by subtracting 1 from the $parameter:input$.
    """
    " to "def laugh(size):
    """
    the $parameter:input$ generates a $string:string$ where the number corresponds to how many items are in the $string:string$. each item in the $string:string$ also starts with the letter 'h' and the letter 'a' is $concatenated:added$ to the letter 'h' based on the number of the $parameter:input$. However, only the first item in the $string:string$ has the number of 'a' equal to the $parameter:input$, the following 'a' are $concentated:added$ to 'h' by subtracting 1 from the $parameter:input$.
    """
    ".
    DECISION: molly had a typo in her tag 

***********************


Value of root[0]['prompt'] changed from "def add_up(arr):
    """
    For each $list:list$ in an $list:array$, this function takes each entry in the $list:list$ and adds them to the total if the entry is a number. Otherwise, it adds 0.
    """
    " to "def add_up(arr):
    """
    For each $list:list$ in an $list:array$, this function $takes:takes$ each entry in the $list:list$ and adds them to the total if the entry is a number. Otherwise, it adds 0.
    """
    ".
    DECISION: remove $takes:takes$ tag 

Value of root[2]['prompt'] changed from "def convert(lst):
    """
    If there is "0" in lst, then $insert:put$ "A" into new $list:list$; If there is "1" in lst, then $insert:put$ "B" into new $list:list$; If there is "2" in lst, then $insert:put$ "C" into new $list:list$; If there is "4" in lst, then $insert:put$ "D" into new $list:list$. $Return:Return$ new $list:list$.
    """
    " to "def convert(lst):
    """
    If there is "0" in lst, then put "A" into new $list:list$; If there is "1" in lst, then put "B" into new $list:list$; If there is "2" in lst, then put "C" into new $list:list$; If there is "4" in lst, then put "D" into new $list:list$. $Return:Return$ new $list:list$.
    """
    ".
    DECISION: $insert:put$ tag is idiosyncratic, keep

Value of root[4]['prompt'] changed from "def add_int(lst, num):
    """
    Given a $list:list$ of numbers, $lists:lists$, and $strings:strings$ as well as a number, $concatenate:append$ the number to the $strings:strings$ in the $list:list$, add the number to the numbers in the $list:list$, and do nothing to the $lists:lists$ in the $list:list$.
    """
    " to "def add_int(lst, num):
    """
    Given a $list:list$ of numbers, $lists:lists$, and $strings:strings$ as well as a number, $insert:append$ the number to the $strings:strings$ in the $list:list$, add the number to the numbers in the $list:list$, and do nothing to the $lists:lists$ in the $list:list$.
    """
    ".
    DECISION: $concatenate:append$ according to strings rule 

Value of root[18]['prompt'] changed from "def hasHorizontalWin(board, letter):
    """
    you will have a $list:list$ of $lists:lists$ consisting of X and O as $strings:strings$. if in a single $list:list$ all the elements are X you $return:return$ true, else you $return:return$ false.
    """
    " to "def hasHorizontalWin(board, letter):
    """
    you will have a $list:list$ of $lists:lists$ consisting of X and O as strings. if in a single $list:list$ all the elements are X you $return:return$ true, else you $return:return$ false.
    """
    ".
    DECISION: this is a TYPE tag for X and O, not like length related. So tag $strings:strings$

Value of root[20]['prompt'] changed from "def findHorizontals(puzzle,wordList):
    """
    given that puzzle is a $list:list$ of $strings:strings$, check if the letters of each $string:string$ in wordList is contained in any of the $strings:strings$ in puzzle. if the $string:string$ in wordList is in any of the $strings:strings$ in puzzle, $insert:add$ it to a $dictionary:dictionary$ with the $key:key$ as the $string:sting$ in wordList and the output as the position of the $string:string$ in puzzle
    """
    " to "def findHorizontals(puzzle,wordList):
    """
    given that puzzle is a $list:list$ of $strings:strings$, check if the letters of each $string:string$ in wordList is contained in any of the $strings:strings$ in puzzle. if the $string:string$ in wordList is in any of the $strings:strings$ in puzzle, add it to a $dictionary:dictionary$ with the $key:key$ as the $string:sting$ in wordList and the output as the position of the $string:string$ in puzzle
    """
    ".
    DECISION: $insert:add$ because dictionary rule 

Value of root[22]['prompt'] changed from "def andCount(andGrid):
    """
    given a $list:list$ of $strings:strings$, $concatenate:concatenate$ the $strings:strings$ into one long $string:string$. read through the long $string:string$ and count the number of '&' found. $return:output$ that number.
    """
    " to "def andCount(andGrid):
    """
    given a $list:list$ of $strings:strings$, $concatenate:concatenate$ the $strings:strings$ into one long $string:string$. $loop:read through$ the long $string:string$ and count the number of '&' found. $return:output$ that number.
    """
    ".
    DECISION: $loop:read through$ as idiosyncratic

Value of root[27]['prompt'] changed from "def combine(l1,l2):
    """
    Given two $lists:sets$ of $lists:lists$, $concatenate:combine$ the respective places of each $list:list$ into one larger $list:list$, then $concatenate:combine$ those $concatenated:combined$ $lists:lists$ into another $list:set$. For example, the first $list:list$ of the first $list:set$ should be $concatenated:combined$ with the first of the second, etc.
    """
    " to "def combine(l1,l2):
    """
    Given two sets of $lists:lists$, $concatenate:combine$ the respective places of each $list:list$ into one larger $list:list$, then $concatenate:combine$ those combined $lists:lists$ into another set. For example, the first $list:list$ of the first set should be $concatenated:combined$ with the first of the second, etc.
    """
    ".
    DECISION: remove combined tag (it's an adjective)

Value of root[31]['prompt'] changed from "def add_word(word, line_number, $dictionary:map$):
    """
    $Insert:Add$ word as one of the $key:key$ of $dictionary:map$, $insert:add$ line_number as the 
Value of $key:key$ into $dictionary:map$. $Return:Return$ $dictionary:map$.
    """
    " to "def add_word(word, line_number, map):
    """
    Add $string:word$ as one of the $key:key$ of map, add line_number as the 
Value of $key:key$ into map. $Return:Return$ map.
    """
    ".
    DECISION: $Insert:Add$ correct with the dictionary rule 
    DECISION: untag map because the parameter name 

Value of root[35]['prompt'] changed from "def sortBySuccessRate(nominations):
    """
    you are going to have a $list:list$ of $dictionaries:dictionaries$ as an $parameter:input$. as an output you are going to $insert:add$ another $key:variable$ called success to each $dictionary:dictionary$ which is the wins divided by the 
Value of noms. you are then going to sort the $dictionary:dictionary$ according to decreasing success. use two decimal places for the success and put each $dictionary:dictionary$ on a separate line.
    """
    " to "def sortBySuccessRate(nominations):
    """
    you are going to have a $list:list$ of $dictionaries:dictionaries$ as an $parameter:input$. as an output you are going to add another $key:variable$ called success to each $dictionary:dictionary$ which is the wins divided by the 
Value of noms. you are then going to sort the $dictionary:dictionary$ according to decreasing success. use two decimal places for the success and put each $dictionary:dictionary$ on a separate line.
    """
    ".
    DECISION: $insert:add$ per dictionary rule 

Value of root[36]['prompt'] changed from "def layoverTrips(flights, start):
    """
    Write a function which $takes:takes$ a $list:list$ of $dictionaries:dictionaries$ and a $string:string$ and finds the $dictionaries:dictionaries$ in the $parameter:input$ $list:list$ which have the $string:string$ mapped to 'origin', and then finds the $dictionaries:dictionaries$ where 'origin' is mapped to 
    """
    " to "def layoverTrips(flights, start):
    """
    Write a function which $takes:takes$ a $list:list$ of $dictionaries:dictionaries$ and a $string:string$ and finds the $dictionaries:dictionaries$ in the input $list:list$ which have the $string:string$ mapped to 'origin', and then finds the $dictionaries:dictionaries$ where 'origin' is mapped to 
    """
    ".
    DECISION: untag, because value provided sub is bad (input $list:list$)

Value of root[40]['prompt'] changed from "def translate(lexicon,sentence):
    """
    for the function above, you use a $dictionary:dictionary$ and a sentence. for each word in the sentence you get the corresponding 
Value from the $dictionary:dictionary$ and $concatenate:concatenate$. if the word is not in the $dictionary:dictionary$ you $concatenate:concatenate$ the $string:word$ UNK.
    """
    " to "def translate(lexicon,sentence):
    """
    for the function above, you use a $dictionary:dictionary$ and a sentence. for each $string:word$ in the sentence you get the corresponding 
Value from the $dictionary:dictionary$ and $concatenate:concatenate$. if the $string:word$ is not in the $dictionary:dictionary$ you $concatenate:concatenate$ the $string:word$ UNK.
    """
    ".
    DECISION: remove $string:word$ because the substitution with "string" is confusing 

Value of root[41]['prompt'] changed from "def topScores(lst):
    """
    This function has a $list:list$ of $lists:lists$ of length 2 as $inputs:inputs$. First, sort the $lists:lists$ by the first entry in descending order. If the first entry in the $list:list$ (the score) is greater than or equal to 80, $insert:add$ the second entry in the $list:list$ (the name) to a $list:list$ to be $returned:output$ at the end. 
    """
    " to "def topScores(lst):
    """
    This function has a $list:list$ of $lists:lists$ of length 2 as $parameters:inputs$. First, sort the $lists:lists$ by the first entry in descending order. If the first entry in the $list:list$ (the score) is greater than or equal to 80, $insert:add$ the second entry in the $list:list$ (the name) to a $list:list$ to be $return:output$ at the end. 
    """
    ".
    DECISION: $parameters:inputs$ keep 
    DECISION: $returned:output$ is the correct tag, part of speech 

Value of root[43]['prompt'] changed from "def reverseWords(words):
    """
    This function reverses the order of every $string:string$ in words, then alphabetizes the resulting $list:list$. 
    """
    " to "def reverseWords(words):
    """
    This function reverses the order of every $string:string$ in $strings:words$, then alphabetizes the resulting $list:list$. 
    """
    ".
    DECISION: words is the parameter name, do not tag 

***********************

