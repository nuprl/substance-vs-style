- __index_level_0__: 2
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student1
  submitted_text: |-
    takes a list of strings, integers, and floats and returns the sum of all the ints and floats.
  prompt: |-
    def add_up(arr):
        """
        $takes:takes$ a $list:list$ of $strings:strings$, $integers:integers$, and floats and $returns:returns$ the sum of all the $integers:ints$ and floats.
        """
        
  subset: last_failure
- __index_level_0__: 3
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student6
  submitted_text: |-
    Input: list of items, that may be a combination of strings and integers. Function takes the sum of the integers and outputs it
  prompt: |-
    def add_up(arr):
        """
        $Parameter:Input$: $list:list$ of items, that may be a combination of $strings:strings$ and $integers:integers$. Function takes the sum of the $integers:integers$ and $returns:outputs$ it
        """
        
  subset: first_failure
- __index_level_0__: 5
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student6
  submitted_text: |-
    Input: list of strings. Function checks each item in the list to check if it is a number character. If it is a number, convert it to an integer and it adds it to a new list. If it is not a number integer it ignores it. Outputs the sum of each ingter in the new list. If the original list contains no integers, return 0
  prompt: |-
    def add_up(arr):
        """
        $Parameter:Input$: $list:list$ of $strings:strings$. Function checks each item in the $list:list$ to check if it is a number character. If it is a number, $typecast:convert$ it to an $integer:integer$ and it $inserts:adds$ it to a new $list:list$. If it is not a number integer it $skips:ignores$ it. $Returns:Outputs$ the sum of each $integer:ingter$ in the new $list:list$. If the original $list:list$ contains no $integers:integers$, $return:return$ 0
        """
        
  subset: last_failure
- __index_level_0__: 6
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student7
  submitted_text: |-
    sums the total of integers and floats in an array. strings are ignored, empty spots count as 0
  prompt: |-
    def add_up(arr):
        """
        sums the total of $integers:integers$ and floats in an $list:array$. $strings:strings$ are $skipped:ignored$, empty spots count as 0
        """
        
  subset: first_failure
- __index_level_0__: 11
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student7
  submitted_text: |-
    iterates through the column and rows and sums the total of integers and floats. strings are ignored, empty spots count as 0
  prompt: |-
    def add_up(arr):
        """
        $loops through:iterates through$ the column and rows and sums the total of $integers:integers$ and floats. $strings:strings$ are $skipped:ignored$, empty spots count as 0
        """
        
  subset: last_success
- __index_level_0__: 22
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student14
  submitted_text: add up all number characters in the brackets and output the result
  prompt: |-
    def add_up(arr):
        """
        add up all number characters in the $lists:brackets$ and $return:output$ the result
        """
        
  subset: first_failure
- __index_level_0__: 26
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student14
  submitted_text: add up all number characters in each arrangement. output total
  prompt: |-
    def add_up(arr):
        """
        add up all number characters in each $list:arrangement$. $return:output$ total
        """
        
  subset: last_failure
- __index_level_0__: 27
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student15
  submitted_text: |-
    Adds the numbers in the list and returns the number. If there are no numbers, returns 0.
  prompt: |-
    def add_up(arr):
        """
        Adds the numbers in the $list:list$ and $returns:returns$ the number. If there are no numbers, $returns:returns$ 0.
        """
        
  subset: first_failure
- __index_level_0__: 31
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student15
  submitted_text: |-
    For each variable in the list, if the variable can be casted to a float, adds the variable to a separate list. Adds the number in this list together and returns the number. If there are no numbers, returns 0.
  prompt: |-
    def add_up(arr):
        """
        For each variable in the $list:list$, if the variable can be $typecasted:casted$ to a float, adds the variable to a separate $list:list$. Adds the number in this $list:list$ together and $returns:returns$ the number. If there are no numbers, $returns:returns$ 0.
        """
        
  subset: last_failure
- __index_level_0__: 32
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student24
  submitted_text: |-
    For items in the list, if the item is an integer add them together. Return the sum of those integers.
  prompt: |-
    def add_up(arr):
        """
        For items in the $list:list$, if the item is an $integer:integer$ add them together. $Return:Return$ the sum of those $integers:integers$.
        """
        
  subset: first_failure
- __index_level_0__: 33
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student24
  submitted_text: |-
    For items in the list inside the list add each item together. If the item is not an integer, ignore any errors. Return the sum of the integers in the list.
  prompt: |-
    def add_up(arr):
        """
        For items in the $list:list$ inside the $list:list$ add each item together. If the item is not an $integer:integer$, $skip:ignore$ any errors. $Return:Return$ the sum of the $integers:integers$ in the $list:list$.
        """
        
  subset: last_success
- __index_level_0__: 34
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student28
  submitted_text: |-
    This function takes one paramater, arr. arr can consist of a string and integers or it can be empty. The code adds up all the integers in arr. And it only returns the sum of all the integers in arr.
  prompt: |-
    def add_up(arr):
        """
        This function $takes:takes$ one $paramater:parameter$, arr. arr can consist of a $string:string$ and $integers:integers$ or it can be empty. The code adds up all the $integers:integers$ in arr. And it only $returns:returns$ the sum of all the $integers:integers$ in arr.
        """
        
  subset: first_failure
- __index_level_0__: 35
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student31
  submitted_text: |-
    Takes a list with another internal list. Creates a new float variable and sets it to zero, and then converts each item in the internal list to a float in any way possible and adds them to the float variable. Then, returns that float variable.
  prompt: |-
    def add_up(arr):
        """
        $Takes:Takes$ a $list:list$ with another internal $list:list$. Creates a new float variable and sets it to zero, and then $typecasts:converts$ each item in the internal $list:list$ to a float in any way possible and adds them to the float variable. Then, $returns:returns$ that float variable.
        """
        
  subset: first_failure
- __index_level_0__: 37
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student31
  submitted_text: |-
    Takes a list with a list inside. Then, creates a new list and for every item in the input list, takes each element inside that item and adds it to a new list called trueList. Creates a new float variable and sets it to zero, and then converts each item in trueList to a float in any way possible and adds them to the float variable. Then, returns that float variable.
  prompt: |-
    def add_up(arr):
        """
        $Takes:Takes$ a $list:list$ with a $list:list$ inside. Then, creates a new $list:list$ and for every item in the input $list:list$, takes each element inside that item and $inserts:adds$ it to a new $list:list$ called trueList. Creates a new float variable and sets it to zero, and then $typecasts:converts$ each item in trueList to a float in any way possible and adds them to the float variable. Then, $returns:returns$ that float variable.
        """
        
  subset: last_failure
- __index_level_0__: 38
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student39
  submitted_text: 'For this function your goal is to add up the numbers given to in
    the input list. Only add up the integers and not numbers represented as a string. '
  prompt: |-
    def add_up(arr):
        """
        For this function your goal is to add up the numbers given to in the input $list:list$. Only add up the $integers:integers$ and not numbers represented as a $string:string$. 
        """
        
  subset: first_failure
- __index_level_0__: 39
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student45
  submitted_text: Takes an array. Adds up each number in the array. Outputs the total.
  prompt: |-
    def add_up(arr):
        """
        $Takes:Takes$ an $list:array$. Adds up each number in the $list:array$. $Returns:Outputs$ the total.
        """
        
  subset: first_failure
- __index_level_0__: 42
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student45
  submitted_text: |-
    Takes an array. Reads each value in the array. If it is a number, adds it to the sum. If it is not a number, skips to the next value in the array. Output is the sum of all the numbers in the array.
  prompt: |-
    def add_up(arr):
        """
        $Takes:Takes$ an $list:array$. Reads each value in the $list:array$. If it is a number, adds it to the sum. If it is not a number, skips to the next value in the $list:array$. $Return:Output$ is the sum of all the numbers in the $list:array$.
        """
        
  subset: last_failure
- __index_level_0__: 43
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student46
  submitted_text: |-
    Takes in an array, outputs all integers added together that are in the array.
  prompt: |-
    def add_up(arr):
        """
        $Takes:Takes in$ an $list:array$, $returns:outputs$ all $integers:integers$ added together that are in the $list:array$.
        """
        
  subset: first_failure
- __index_level_0__: 48
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student46
  submitted_text: |-
    Takes in a array and withing that array list, from the list removes all strings, outputs all numbers added together that are in the array.
  prompt: |-
    def add_up(arr):
        """
        $Takes:Takes in$ a $list:array$ and withing that $list:array$ $list:list$, from the $list:list$ removes all $strings:strings$, $returns:outputs$ all numbers added together that are in the $list:array$.
        """
        
  subset: last_failure
- __index_level_0__: 49
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student47
  submitted_text: '"add up all the floats in arr"'
  prompt: |-
    def add_up(arr):
        """
        "add up all the floats in arr"
        """
        
  subset: first_failure
- __index_level_0__: 55
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student47
  submitted_text: |-
    "add all the doubles in arr into a double named sum, neglect the item if the item in arr is not a double, return sum"
  prompt: |-
    def add_up(arr):
        """
        "add all the doubles in arr into a double named sum, $skip:neglect$ the item if the item in arr is not a double, $return:return$ sum"
        """
        
  subset: last_failure
- __index_level_0__: 56
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student53
  submitted_text: 'loop through each list in arr and then loop again for each element
    and if the element is an integer or float add them to a new list and return the
    sum of that new list.  '
  prompt: |-
    def add_up(arr):
        """
        $loop through:loop through$ each $list:list$ in arr and then $loop:loop$ again for each element and if the element is an $integer:integer$ or float add them to a new $list:list$ and $return:return$ the sum of that new $list:list$.  
        """
        
  subset: first_success
- __index_level_0__: 58
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student53
  submitted_text: 'loop through each list in arr and then loop again for each elemtn
    and if the element is an integer or float add them and return the sum. '
  prompt: |-
    def add_up(arr):
        """
        $loop through:loop through$ each $list:list$ in arr and then $loop:loop$ again for each elemtn and if the element is an $integer:integer$ or float add them and $return:return$ the sum. 
        """
        
  subset: last_failure
- __index_level_0__: 59
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student55
  submitted_text: 'Write a function that runs through an array of lists. The function
    should get all numbers from the list and returns the sum of all numbers. The function
    should avoid strings if they are elements in the list. '
  prompt: |-
    def add_up(arr):
        """
        Write a function that $loops through:runs through$ an $list:array$ of $lists:lists$. The function should get all numbers from the $list:list$ and $returns:returns$ the sum of all numbers. The function should $skip:avoid$ $strings:strings$ if they are elements in the $list:list$. 
        """
        
  subset: first_failure
- __index_level_0__: 65
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student55
  submitted_text: |-
    Write a function that gets a list. The function runs through a list of lists. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should avoid strings if they are elements in the list.
  prompt: |-
    def add_up(arr):
        """
        Write a function that $takes:gets$ a $list:list$. The function $loops through:runs through$ a $list:list$ of $lists:lists$. If the element is an $integer:integer$ or float, sum all the elements up. The function $returns:returns$ the sum. The function should $skip:avoid$ $strings:strings$ if they are elements in the $list:list$.
        """
        
  subset: last_failure
- __index_level_0__: 66
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student58
  submitted_text: 'add the numbers in the list '
  prompt: |-
    def add_up(arr):
        """
        add the numbers in the $list:list$ 
        """
        
  subset: first_failure
- __index_level_0__: 69
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student58
  submitted_text: Return the sum of the integers in the list. Ignore the string.
  prompt: |-
    def add_up(arr):
        """
        $Return:Return$ the sum of the $integers:integers$ in the $list:list$. $Skip:Ignore$ the $string:string$.
        """
        
  subset: last_failure
- __index_level_0__: 70
  problem: add_up
  entrypoint: add_up
  assertions: |-
    assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9
    assert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4
    assert add_up([ [ ] ]) == 0
  username: student65
  submitted_text: |-
    This function takes entries in the first entry of an array, and adds them to the total if the entry is a number. Otherwise, it adds 0.
  prompt: |-
    def add_up(arr):
        """
        This function $takes:takes$ entries in the first entry of an $list:array$, and adds them to the total if the entry is a number. Otherwise, it adds 0.
        """
        
  subset: first_failure
- __index_level_0__: 77
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student27
  submitted_text: |-
    The input will be a list of strings. Return 0 if the list is empty. Otherwise, convert the strings into integers, then subtract the sum of all the integers with odd positions from the sum of all the integers with even positions. 
  prompt: |-
    def subtract_add(lst):
        """
        The $parameter:input$ will be a $list:list$ of $strings:strings$. $Return:Return$ 0 if the $list:list$ is empty. Otherwise, $typecast:convert$ the $strings:strings$ into $integers:integers$, then subtract the sum of all the $integers:integers$ with odd positions from the sum of all the $integers:integers$ with even positions. 
        """
        
  subset: last_success
- __index_level_0__: 78
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student29
  submitted_text: |-
    For each list entry, convert the input to an integer. Multiply list entries that correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.
  prompt: |-
    def subtract_add(lst):
        """
        For each $list:list$ entry, $typecast:convert$ the input to an $integer:integer$. Multiply $list:list$ entries that correspond to an even index by -1. Then add all of the $list:list$ entries together and $return:return$ their sum. If the $list:list$ is empty, $return:return$ 0.
        """
        
  subset: first_failure
- __index_level_0__: 80
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student29
  submitted_text: |-
    For each list entry, convert the input to an integer. Multiply list entries that don't correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.
  prompt: |-
    def subtract_add(lst):
        """
        For each $list:list$ entry, $typecast:convert$ the input to an $integer:integer$. Multiply $list:list$ entries that don't correspond to an even index by -1. Then add all of the $list:list$ entries together and $return:return$ their sum. If the $list:list$ is empty, $return:return$ 0.
        """
        
  subset: last_success
- __index_level_0__: 81
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student32
  submitted_text: subtracts the last element in the list from the sum of all the other
    elements in the list.
  prompt: |-
    def subtract_add(lst):
        """
        subtracts the last element in the $list:list$ from the sum of all the other elements in the $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 84
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student32
  submitted_text: |-
    Turns all the elements in lst into integers, then finds the sum of all the elements in the list excluding the last one. Then it subtracts the last element from the sum.

    If the list is empty, it returns 0
  prompt: |-
    def subtract_add(lst):
        """
        $Typecasts:Turns$ all the elements in lst into $integers:integers$, then finds the sum of all the elements in the $list:list$ excluding the last one. Then it subtracts the last element from the sum.

    If the $list:list$ is empty, it $returns:returns$ 0
        """
        
  subset: last_failure
- __index_level_0__: 85
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student34
  submitted_text: |-
    Find the sum of the items in the list with positions that produce an integer when divided by two, then find the sum of the items in the list with positions that do not produce an integer when divided by two. Then take the first sum and subtract the second sum from it. If there are no items in the list output 0
  prompt: |-
    def subtract_add(lst):
        """
        Find the sum of the items in the $list:list$ with positions that produce an $integer:integer$ when divided by two, then find the sum of the items in the $list:list$ with positions that do not produce an $integer:integer$ when divided by two. Then take the first sum and subtract the second sum from it. If there are no items in the $list:list$ $return:output$ 0
        """
        
  subset: first_failure
- __index_level_0__: 86
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student49
  submitted_text: |-
    Given a list of integers, take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output
  prompt: |-
    def subtract_add(lst):
        """
        Given a $list:list$ of $integers:integers$, take the first number in the $list:list$ and alternate between subtracting and adding the next numbers in the $list:list$. If the $list:list$ is empty $return:return$ 0. Otherwise $return:return$ the expected output
        """
        
  subset: first_failure
- __index_level_0__: 87
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student49
  submitted_text: |-
    Given a list of strings, type cast to integers and then take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output
  prompt: |-
    def subtract_add(lst):
        """
        Given a $list:list$ of $strings:strings$, $typecast:type cast$ to $integers:integers$ and then take the first number in the $list:list$ and alternate between subtracting and adding the next numbers in the $list:list$. If the $list:list$ is empty $return:return$ 0. Otherwise $return:return$ the expected output
        """
        
  subset: last_success
- __index_level_0__: 89
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student62
  submitted_text: |-
    alternate between subtracting and adding each element in list, return total
  prompt: |-
    def subtract_add(lst):
        """
        alternate between subtracting and adding each element in $list:list$, $return:return$ total
        """
        
  subset: first_failure
- __index_level_0__: 94
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student62
  submitted_text: |-
    turn each element into int, add first element to count. if index of element is odd when int, subtract from count. if index of element is even when int, add to count.
  prompt: |-
    def subtract_add(lst):
        """
        $typecast:turn$ each element into $integer:int$, add first element to count. if index of element is odd when $integer:int$, subtract from count. if index of element is even when $integer:int$, add to count.
        """
        
  subset: last_failure
- __index_level_0__: 100
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student66
  submitted_text: Change the first two items into integers Subtract the second item
    in the array list from the first item. change the third and forth items into integers
    then subtract the forth item from the third item then add the two sums. if there
    are just two items in list change those two items into integers subtract the second
    one from the first one and return the product. if there are no items then return
    zero
  prompt: |-
    def subtract_add(lst):
        """
        $Typecast:Change$ the first two items into $integers:integers$ Subtract the second items in the $list:array list$ from the first items. $typecast:change$ the third and forth items into $integers:integers$ then subtract the forth items from the third items then add the two sums. if there are just two items in $list:list$ $typecast:change$ those two items into $integers:integers$ subtract the second one from the first one and $return:return$ the product. if there are no items then $return:return$ zero
        """
        
  subset: last_success
- __index_level_0__: 101
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student67
  submitted_text: |-
    Subtracts the second number from the first one, stores that value. Then adds that value to the next number, etc.
  prompt: |-
    def subtract_add(lst):
        """
        Subtracts the second number from the first one, stores that value. Then adds that value to the next number, etc.
        """
        
  subset: first_failure
- __index_level_0__: 103
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student67
  submitted_text: |-
    Converts all items to integer. Subtracts the second number from the first one, stores that value. Then adds that value to the next number, etc. Returns the final value.
  prompt: |-
    def subtract_add(lst):
        """
        $Typecasts:Converts$ all items to $integer:integer$. Subtracts the second number from the first one, stores that value. Then adds that value to the next number, etc. $Returns:Returns$ the final value.
        """
        
  subset: last_failure
- __index_level_0__: 104
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student68
  submitted_text: |
    given an array of characters containing integers, convert the characters into integers. Starting from the front of the array, subtract the first two numbers and store that in a count variable. then add the next number to the count. alternate between subtracting and adding until you get to the end of the array. return the count
  prompt: |-
    def subtract_add(lst):
        """
        given an $list:array$ of characters containing $integers:integers$, $typecast:convert$ the characters into $integers:integers$. Starting from the front of the $list:array$, subtract the first two numbers and store that in a count variable. then add the next number to the count. alternate between subtracting and adding until you get to the end of the $list:array$. $return:return$ the count

        """
        
  subset: first_failure
- __index_level_0__: 107
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student68
  submitted_text: |
    Given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count. If the given array is empty, return 0. 
  prompt: |-
    def subtract_add(lst):
        """
        Given an $list:array$ of characters containing $integers:integers$, $typecast:convert$ the characters into $integers:integers$. Store the first number in the $list:array$ in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the $list:array$. $return:return$ the count. If the given $list:array$ is empty, $return:return$ 0. 

        """
        
  subset: last_success
- __index_level_0__: 108
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student70
  submitted_text: |-
    Iterates through the inputted list. For the first two elements, subtract the second from the first and save that result. For the next element, add it to the result. Continue to alternate adding and subtracting until the end of the list is reached.
  prompt: |-
    def subtract_add(lst):
        """
        $Loop:Iterates through$ the inputted $list:list$. For the first two elements, subtract the second from the first and save that result. For the next element, add it to the result. Continue to alternate adding and subtracting until the end of the $list:list$ is reached.
        """
        
  subset: first_failure
- __index_level_0__: 112
  problem: subtract_add
  entrypoint: subtract_add
  assertions: |-
    assert subtract_add(['1', '2', '3', '4']) == -2
    assert subtract_add(['0', '2']) == -2
    assert subtract_add(['0', '0']) == 0
    assert subtract_add([ ]) == 0
  username: student70
  submitted_text: |-
    Create a variable for the result. Treat all elements as integers. If the list contains 0 elements, return 0. If the list contains 1 element, return that element. If the list contains 2 or more elements: subtract the second element from the first and save the result, then add the third element to that result, and continue on alternating subtraction and addition until the end of the list.
  prompt: |-
    def subtract_add(lst):
        """
        Create a variable for the result. $Typecast:Treat$ all elements as $integers:integers$. If the $list:list$ contains 0 elements, $return:return$ 0. If the $list:list$ contains 1 element, $return:return$ that element. If the $list:list$ contains 2 or more elements: subtract the second element from the first and save the result, then add the third element to that result, and continue on alternating subtraction and addition until the end of the $list:list$.
        """
        
  subset: last_failure
- __index_level_0__: 122
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student0
  submitted_text: |-
    takes a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer string. Iterate through the input list, if there is "-1" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.
  prompt: |-
    def convert(lst):
        """
        $takes:takes$ a $list:list$ of numbers. Create a ABC $list:list$ with the capital letters in the alphabet and create an answer $string:string$. $Loop:Iterate through$ the input $list:list$, if there is "-1" then $concatenate:add$ ' ' to the answer $string:string$, or otherwise, $concatenate:add$ the letter with the corresponding index of the answer $string:string$. Split the answer $string:string$ at ' '. $return:return$ the answer $string:string$.
        """
        
  subset: last_success
- __index_level_0__: 123
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student3
  submitted_text: |
    convert the list of index number into list of letters of corresponding index 
    numbers of alphabetical table
  prompt: |-
    def convert(lst):
        """
        convert the $list:list$ of index number into $list:list$ of letters of corresponding index 
    numbers of alphabetical table

        """
        
  subset: first_failure
- __index_level_0__: 135
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student3
  submitted_text: 'convert the list of index number into string of capital letters
    of corresponding index numbers of alphabetical table and then insert into a list '
  prompt: |-
    def convert(lst):
        """
        convert the $list:list$ of index number into $string:string$ of capital letters of corresponding index numbers of alphabetical table and then $insert:insert$ into a $list:list$ 
        """
        
  subset: last_failure
- __index_level_0__: 136
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student4
  submitted_text: |-
    converts a list of numbers into a list of letters, letter values are assigned consecutively beginning at the index 0, creating a new item in new list when -1 is in the inputted list
  prompt: |-
    def convert(lst):
        """
        converts a $list:list$ of numbers into a $list:list$ of letters, letter values are assigned consecutively beginning at the index 0, creating a new item in new $list:list$ when -1 is in the inputted $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 138
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student4
  submitted_text: |-
    create a new list with stings of letters, inputted numbers correspond to the index in the alphabet beginning at zero, begins a new item in the new list when '-1' is passed
  prompt: |-
    def convert(lst):
        """
        create a new $list:list$ with $strings:stings$ of letters, inputted numbers correspond to the index in the alphabet beginning at zero, begins a new item in the new $list:list$ when '-1' is passed
        """
        
  subset: last_failure
- __index_level_0__: 139
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student10
  submitted_text: |-
    User inputs a list of integers from 0-25. Function converts integers into letters by matching the number with the corresponding letter of the alphabet. Function would return a list of letters. When the user inputs -1, function should end current string in list and start a new string. 
  prompt: |-
    def convert(lst):
        """
        User $provides:inputs$ a $list:list$ of $integers:integers$ from 0-25. Function converts $integers:integers$ into letters by matching the number with the corresponding letter of the alphabet. Function would $return:return$ a $list:list$ of letters. When the user $provides:inputs$ -1, function should end current $string:string$ in $list:list$ and start a new $string:string$. 
        """
        
  subset: first_failure
- __index_level_0__: 141
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student10
  submitted_text: |-
    User inputs a list of numbers ranging from -1 to 25, and function outputs a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current string in list and start a new string. Function should return a list of the letters.
  prompt: |-
    def convert(lst):
        """
        User $provides:inputs$ a $list:list$ of numbers ranging from -1 to 25, and function $returns:outputs$ a $list:list$ of the corresponding letters and line breaks. Function converts the $integers:integers$ from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user $provides:inputs$ -1, function should end current $string:string$ in $list:list$ and start a new $string:string$. Function should $return:return$ a $list:list$ of the letters.
        """
        
  subset: last_failure
- __index_level_0__: 142
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student17
  submitted_text: change numbers to letters matching the order of the alphabet starting
    at 0 as A
  prompt: |-
    def convert(lst):
        """
        changes numbers to letters matching the order of the alphabet starting at 0 as A
        """
        
  subset: first_failure
- __index_level_0__: 173
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student17
  submitted_text: |-
    change numbers to letters matching the order of the alphabet starting at 0 as A, and grouping the output as one string in a list, using -1 as places to slice. 
  prompt: |-
    def convert(lst):
        """
        change numbers to letters matching the order of the alphabet starting at 0 as A, and grouping the $return:output$ as one $string:string$ in a $list:list$, using -1 as places to slice. 
        """
        
  subset: last_success
- __index_level_0__: 174
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student18
  submitted_text: |-
    Assign a number from 0~25 to each alphabet, and create a list of string of alphabetical letters based on their assigned numbers in the lst. When there is -1 in the lst, create a new string and add it to the list. Return a list of created strings.
  prompt: |-
    def convert(lst):
        """
        Assign a number from 0~25 to each alphabet, and create a $list:list$ of $string:string$ of alphabetical letters based on their assigned numbers in the lst. When there is -1 in the lst, create a new $string:string$ and $insert:add$ it to the $list:list$. $Return:Return$ a $list:list$ of created $strings:strings$.
        """
        
  subset: first_failure
- __index_level_0__: 177
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student18
  submitted_text: |-
    Assign a number from 0~25 to each alphabet, and create a list. Based on their assigned numbers in the lst, create string of capitalized alphabetical letters and add to the list. When there is -1 in the lst, create a new string from the next index and add it to the list. Return a list of created strings.
  prompt: |-
    def convert(lst):
        """
        Assign a number from 0~25 to each alphabet, and create a $list:list$. Based on their assigned numbers in the lst, create $string:string$ of capitalized alphabetical letters and $insert:add$ to the $list:list$. When there is -1 in the lst, create a new $string:string$ from the next index and $insert:add$ it to the $list:list$. $Return:Return$ a $list:list$ of created $strings:strings$.
        """
        
  subset: last_failure
- __index_level_0__: 178
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student21
  submitted_text: |-
    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string only when there is a -1 in the input.
  prompt: |-
    def convert(lst):
        """
        each number in the input $list:set$ corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will $return:produce$ a $list:list$ of $strings:strings$ that correspond to the given numbers in the input $list:set$, creating a new $string:string$ only when there is a -1 in the $parameter:input$.
        """
        
  subset: first_failure
- __index_level_0__: 187
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student21
  submitted_text: |-
    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will return a list of Strings parsed from the given numbers, with each -1 in the input signifying a separate string. 
  prompt: |-
    def convert(lst):
        """
        each number in the input $list:set$ corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will $return:return$ a $list:list$ of $Strings:Strings$ parsed from the given numbers, with each -1 in the $parameter:input$ signifying a separate $string:string$. 
        """
        
  subset: last_failure
- __index_level_0__: 188
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student25
  submitted_text: This function converts integers to its corresponding letter in the
    alphabet.
  prompt: |-
    def convert(lst):
        """
        This function converts $integers:integers$ to its corresponding letter in the alphabet.
        """
        
  subset: first_failure
- __index_level_0__: 191
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student25
  submitted_text: Letters A-Z correspond with numbers 0-25. This function creates
    a string by replacing the given number with its corresponding number. Input "-1"
    starts a new output.
  prompt: |-
    def convert(lst):
        """
        Letters A-Z correspond with numbers 0-25. This function creates a $string:string$ by replacing the given number with its corresponding number. Input "-1" starts a new output.
        """
        
  subset: last_failure
- __index_level_0__: 192
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student26
  submitted_text: The absolute values from 0 to 25 correspond to the letters of the
    alphabet. Take the numbers in a given string and replace them with the letters
    of the alphabet.
  prompt: |-
    def convert(lst):
        """
        The absolute values from 0 to 25 correspond to the letters of the alphabet. Take the numbers in a given $string:string$ and replace them with the letters of the alphabet.
        """
        
  subset: first_failure
- __index_level_0__: 193
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student26
  submitted_text: Create a dictionary where the absolute values of numbers from 0-25
    equal capital letters of the alphabet. Replace the numbers in a given string according
    to the dictionary
  prompt: |-
    def convert(lst):
        """
        Create a $dictionary:dictionary$ where the absolute values of numbers from 0-25 equal capital letters of the alphabet. Replace the numbers in a given $string:string$ according to the $dictionary:dictionary$
        """
        
  subset: last_failure
- __index_level_0__: 194
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student30
  submitted_text: |-
    Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. -1 = a space.
  prompt: |-
    def convert(lst):
        """
        Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. -1 = a space.
        """
        
  subset: first_failure
- __index_level_0__: 197
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student30
  submitted_text: |-
    Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. 

    Return strings of letters with no spaces. A -1 in lst indicates the start of a new string. Separate strings with commas. Enclose the new list with brackets.
  prompt: |-
    def convert(lst):
        """
        $Typecast:Convert$ numbers to letters. 0 = A, 1 = B, 2 = C, and so on. 

    $Return:Return$ $strings:strings$ of letters with no spaces. A -1 in lst indicates the start of a new $string:string$. Separate $strings:strings$ with commas. Enclose the new $list:list$ with brackets.
        """
        
  subset: last_failure
- __index_level_0__: 198
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student41
  submitted_text: |-
    Given a list, returns a list with the letter corresponding to each number in the inputted list. If there is a negative one, the corresponding letters should be printed as a separate item in the list. Otherwise, the corresponding letters should be combined as one string in the list.
  prompt: |-
    def convert(lst):
        """
        Given a $list:list$, $returns:returns$ a $list:list$ with the letter corresponding to each number in the inputted $list:list$. If there is a negative one, the corresponding letters should be $returned:printed$ as a separate item in the $list:list$. Otherwise, the corresponding letters should be $concatenated:combined$ as one $string:string$ in the $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 201
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student41
  submitted_text: |-
    Given a list, returns a list with letters from the alphabet that correspond to the index in the inputted list, starting from zero. Letters in the returned list should be capitalized. Until a negative one is in the list, letters should be combined as one string. When a negative one is reached this combination of letters can be inserted into the list. A negative one indicates a new item in the list.
  prompt: |-
    def convert(lst):
        """
        Given a $list:list$, $returns:returns$ a $list:list$ with letters from the alphabet that correspond to the index in the inputted $list:list$, starting from zero. Letters in the returned $list:list$ should be capitalized. Until a negative one is in the $list:list$, letters should be $concatenated:combined$ as one $string:string$. When a negative one is reached this combination of letters can be $inserted:inserted$ into the $list:list$. A negative one indicates a new item in the $list:list$.
        """
        
  subset: last_failure
- __index_level_0__: 202
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student48
  submitted_text: |-
    assign each letter in the alphabet a number 0 through 25 in order. Let -1 indicate the start of a new string. print the letters corresponding to the numbers in a list, creating new strings at -1.
  prompt: |-
    def convert(lst):
        """
        assign each letter in the alphabet a number 0 through 25 in order. Let -1 indicate the start of a new $string:string$. $return:print$ the letters corresponding to the numbers in a $list:list$, creating new $strings:strings$ at -1.
        """
        
  subset: first_failure
- __index_level_0__: 203
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student51
  submitted_text: |-
    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. If -1, start the next character with a new string.
  prompt: |-
    def convert(lst):
        """
        Each character in the alphabet is assigned an index value starting with A =0. Take each item in the $list:list$ and $concatenate:add$ the corresponding character to a $string:string$. If -1, start the next character with a new $string:string$.
        """
        
  subset: first_failure
- __index_level_0__: 205
  problem: convert
  entrypoint: convert
  assertions: |-
    assert convert([0, 1, 2, 3]) == ['ABCD']
    assert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']
    assert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']
  username: student51
  submitted_text: Each character in the alphabet is assigned an index value starting
    with A =0. Take each item in the list and add the corresponding character to a
    string. When -1 appears make a new string and add the following characters to
    it. return a list of strings.
  prompt: |-
    def convert(lst):
        """
        Each character in the alphabet is assigned an index value starting with A =0. Take each item in the $list:list$ and $concatenate:add$ the corresponding character to a $string:string$. When -1 appears make a new $string:string$ and $concatenate:add$ the following characters to it. $return:return$ a $list:list$ of $strings:strings$.
        """
        
  subset: last_success
- __index_level_0__: 210
  problem: order_strings
  entrypoint: order_strings
  assertions: |-
    assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']
    assert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]
    assert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']
  username: student4
  submitted_text: 'orders a list by moving the first element to the end of the list
    and moving the rest up in index '
  prompt: |-
    def order_strings(lst):
        """
        orders a $list:list$ by moving the first element to the end of the $list:list$ and moving the rest up in index 
        """
        
  subset: first_failure
- __index_level_0__: 212
  problem: order_strings
  entrypoint: order_strings
  assertions: |-
    assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']
    assert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]
    assert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']
  username: student17
  submitted_text: reversing the order of the first of the list and revering the order
    of the second half of the list
  prompt: |-
    def order_strings(lst):
        """
        reversing the order of the first of the $list:list$ and revering the order of the second half of the $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 219
  problem: order_strings
  entrypoint: order_strings
  assertions: |-
    assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']
    assert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]
    assert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']
  username: student17
  submitted_text: |
    reverse the order of the first half of the list and reverse the order of the second half of the list.
  prompt: |-
    def order_strings(lst):
        """
        reverse the order of the first half of the $list:list$ and reverse the order of the second half of the $list:list$.

        """
        
  subset: last_failure
- __index_level_0__: 222
  problem: order_strings
  entrypoint: order_strings
  assertions: |-
    assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']
    assert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]
    assert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']
  username: student25
  submitted_text: This function randomly changes the order of the given list.
  prompt: |-
    def order_strings(lst):
        """
        This function randomly changes the order of the given $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 225
  problem: order_strings
  entrypoint: order_strings
  assertions: |-
    assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']
    assert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]
    assert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']
  username: student26
  submitted_text: Reverse the order of every other item in a string
  prompt: |-
    def order_strings(lst):
        """
        Reverse the order of every other item in a $string:string$
        """
        
  subset: first_failure
- __index_level_0__: 229
  problem: order_strings
  entrypoint: order_strings
  assertions: |-
    assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']
    assert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]
    assert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']
  username: student30
  submitted_text: |
    Use Python random module to return elements of lst in randomized order.
  prompt: |-
    def order_strings(lst):
        """
        Use Python random module to $return:return$ elements of lst in randomized order.

        """
        
  subset: last_failure
- __index_level_0__: 230
  problem: order_strings
  entrypoint: order_strings
  assertions: |-
    assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']
    assert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]
    assert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']
  username: student41
  submitted_text: Takes a list. Randomly rearranges the values in the list. Returns
    the list
  prompt: |-
    def order_strings(lst):
        """
        $Takes:Takes$ a $list:list$. Randomly rearranges the values in the $list:list$. $Returns:Returns$ the $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 236
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student19
  submitted_text: 'Takes an input list (which can have both strings and integers)
    and an integer. Adds the input integer to each item in the input list. '
  prompt: |-
    def add_int(lst, num):
        """
        $Takes:Takes$ an input $list:list$ (which can have both $strings:strings$ and $integers:integers$) and an $integer:integer$. $Inserts:Adds$ the input $integer:integer$ to each item in the input $list:list$. 
        """
        
  subset: first_failure
- __index_level_0__: 237
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student19
  submitted_text: |-
    Takes an input list and an input integer. For all strings in the list, the input integer is concatenated after the end of the string. For all numbers in the list, the input integer is added to that number.
  prompt: |-
    def add_int(lst, num):
        """
        $Takes:Takes$ an input $list:list$ and an input $integer:integer$. For all $strings:strings$ in the $list:list$, the input $integer:integer$ is $concatenated:concatenated$ after the end of the $string:string$. For all numbers in the $list:list$, the input $integer:integer$ is added to that number.
        """
        
  subset: last_success
- __index_level_0__: 238
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student20
  submitted_text: |-
    Append the input num to the end of any strings, and add the input num to any numbers in a list. If there is a list within a list, ignore it.
  prompt: |-
    def add_int(lst, num):
        """
        $Concatenate:Append$ the $parameter:input$ num to the end of any $strings:strings$, and add the $parameter:input$ num to any numbers in a $list:list$. If there is a $list:list$ within a $list:list$, $skip:ignore$ it.
        """
        
  subset: first_success
- __index_level_0__: 239
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student36
  submitted_text: |-
    Go through the list, if the input is a string concatenate the number outside of the list, if the input is a number add the number outside of the list
  prompt: |-
    def add_int(lst, num):
        """
        $Loop through:Go through$ the $list:list$, if the input is a $string:string$ $concatenate:concatenate$ the number outside of the $list:list$, if the input is a number add the number outside of the $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 240
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student36
  submitted_text: |-
    Go through the list, if the input is a string concatenate the number outside of the list to the string, if the input is a number add the number outside of the list to the number
  prompt: |-
    def add_int(lst, num):
        """
        $Loop through:Go through$ the $list:list$, if the input is a $string:string$ $concatenate:concatenate$ the number outside of the $list:list$ to the $string:string$, if the iniput is a number add the number outside of the $list:list$ to the number
        """
        
  subset: last_success
- __index_level_0__: 241
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student38
  submitted_text: |-
    If position in lst is string, append num to string. If position in lst is integer, add num to integer. Return the new lst. 
  prompt: |-
    def add_int(lst, num):
        """
        If position in lst is $string:string$, $concatenate:append$ num to $string:string$. If position in lst is $integer:integer$, add num to $integer:integer$. $Return:Return$ the new lst. 
        """
        
  subset: first_failure
- __index_level_0__: 244
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student38
  submitted_text: |-
    If position in lst is string, append num to string. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Return the new lst. 
  prompt: |-
    def add_int(lst, num):
        """
        If position in lst is $string:string$, $concatenate:append$ num to $string:string$. If position in lst is $integer:integer$, add num to $integer:integer$. If position in lst is $list:list$, $insert:add$ $list:list$ to lst. $Return:Return$ the new lst. 
        """
        
  subset: last_failure
- __index_level_0__: 245
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student42
  submitted_text: |-
    given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally
  prompt: |-
    def add_int(lst, num):
        """
        given an inputed $list:list$, $return:return$ a new $list:list$ where each element of the new $list:list$ is an element of the initial $list:list$ but with the number added to it. if the initial $list:list$ element is a $string:string$, they should $concatenate:concatenate$ with a $string:string$ of the number inputted. if the initial $list:list$ element is a number, they should add normally
        """
        
  subset: first_failure
- __index_level_0__: 246
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student42
  submitted_text: |-
    given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally. if an element of the initial list is neither, leave it alone and add it to the outputted list regardless
  prompt: |-
    def add_int(lst, num):
        """
        given an inputed $list:list$, $return:return$ a new $list:list$ where each element of the new $list:list$ is an element of the initial $list:list$ but with the number added to it. if the initial $list:list$ element is a $string:string$, they should $concatenate:concatenate$ with a $string:string$ of the number inputted. if the initial $list:list$ element is a number, they should add normally. if an element of the initial $list:list$ is neither, leave it alone and $insert:add$ it to the outputted $list:list$ regardless
        """
        
  subset: last_success
- __index_level_0__: 247
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student43
  submitted_text: |-
    Create a list A. If an element in lst is a string, then append num to the end of the element, add it to A. If an element in lst is a number, then add num to then end of the element, add it to A. If an element in lst is a list, then return the element, add it to A.
  prompt: |-
    def add_int(lst, num):
        """
        Create a $list:list$ A. If an element in lst is a $string:string$, then $concatenate:append$ num to the end of the element, $insert:add$ it to A. If an element in lst is a number, then add num to then end of the element, $insert:add$ it to A. If an element in lst is a $list:list$, then $return:return$ the element, $insert:add$ it to A.
        """
        
  subset: first_success
- __index_level_0__: 248
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student54
  submitted_text: Return a new list with the integer added at each index of the old
    list.
  prompt: |-
    def add_int(lst, num):
        """
        $Return:Return$ a new $list:list$ with the $integer:integer$ $inserted:added$ at each index of the old $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 252
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student54
  submitted_text: |-
    Return a new list with the integer added at each index of the old list. If it is a string, append the integer on to the end of the string to create a new string. If it is an integer, concatenate.
  prompt: |-
    def add_int(lst, num):
        """
        $Return:Return$ a new $list:list$ with the $integer:integer$ $inserted:added$ at each index of the old $list:list$. If it is a $string:string$, $concatenate:append$ the $integer:integer$ on to the end of the $string:string$ to create a new $string:string$. If it is an $integer:integer$, $concatenate:concatenate$.
        """
        
  subset: last_success
- __index_level_0__: 253
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student57
  submitted_text: |-
    given a list and an integer, within each element in the list, if it is a string, concatenate integer to end of the string, if element is an integer, add the given integer, if element is a list, do nothing
  prompt: |-
    def add_int(lst, num):
        """
        given a $list:list$ and an $integer:integer$, within each element in the $list:list$, if it is a $string:string$, $concatenate:concatenate$ $integer:integer$ to end of the $string:string$, if element is an $integer:integer$, add the given $integer:integer$, if element is a $list:list$, do nothing
        """
        
  subset: first_success
- __index_level_0__: 254
  problem: add_int
  entrypoint: add_int
  assertions: |-
    assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]
    assert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']
    assert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]
  username: student77
  submitted_text: |-
    Given a list of numbers and strings as well as a number, append the number to the strings in the list, and add the number to the numbers in the list.
  prompt: |-
    def add_int(lst, num):
        """
        Given a $list:list$ of numbers and $strings:strings$ as well as a number, $concenate:append$ the number to the $strings:strings$ in the $list:list$, and add the number to the numbers in the $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 257
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student29
  submitted_text: |-
    If the input number is prime return "True". Else, return "False"
  prompt: |-
    def check_prime(num):
        """
        If the input number is prime $return:return$ "True". Else, $return:return$ "False"
        """
        
  subset: first_failure
- __index_level_0__: 259
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student29
  submitted_text: Convert the input to an integer. Then check if the integer is a
    prime number and return "True" if it is prime and "False" if it's not
  prompt: |-
    def check_prime(num):
        """
        $Typecast:Convert$ the $parameter:input$ to an $integer:integer$. Then check if the $integer:integer$ is a prime number and $return:return$ "True" if it is prime and "False" if it's not
        """
        
  subset: last_success
- __index_level_0__: 260
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student32
  submitted_text: |-
    if num is a prime number, return "True". if not, return "False"
  prompt: |-
    def check_prime(num):
        """
        if num is a prime number, $return:return$ "True". if not, $return:return$ "False"
        """
        
  subset: first_failure
- __index_level_0__: 262
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student32
  submitted_text: Turns num into int. Return a bool indicating if num is a prime number.
  prompt: |-
    def check_prime(num):
        """
        $Typecasts:Turns$ num into $integer:int$. $Return:Return$ a bool indicating if num is a prime number.
        """
        
  subset: last_success
- __index_level_0__: 263
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student34
  submitted_text: |-
    if num is divisible by an integer other than 1 or itself it is false, otherwise it is true
  prompt: |-
    def check_prime(num):
        """
        if num is divisible by an $integer:integer$ other than 1 or itself it is false, otherwise it is true
        """
        
  subset: first_failure
- __index_level_0__: 264
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student34
  submitted_text: |-
    if num cannot produce an integer when divided by integers other than 1 or itself, return true. If otherwise return false.
  prompt: |-
    def check_prime(num):
        """
        if num cannot produce an $integer:integer$ when divided by $integers:integers$ other than 1 or itself, $return:return$ true. If otherwise $return:return$ false.
        """
        
  subset: last_failure
- __index_level_0__: 265
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student49
  submitted_text: |-
    given an integer, if the integer is only divisible by itself and 1, return True otherwise return False
  prompt: |-
    def check_prime(num):
        """
        given an $integer:integer$, if the $integer:integer$ is only divisible by itself and 1, $return:return$ True otherwise $return:return$ False
        """
        
  subset: first_failure
- __index_level_0__: 267
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student49
  submitted_text: |-
    typecast num as an integer, if num is only divisible by itself and 1, return True otherwise return False
  prompt: |-
    def check_prime(num):
        """
        $typecast:typecast$ num as an $integer:integer$, if num is only divisible by itself and 1, $return:return$ True otherwise $return:return$ False
        """
        
  subset: last_success
- __index_level_0__: 268
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student56
  submitted_text: |-
    changes the string into an integer and checks if the integers are a prime number, if they are then 'True' is returned, if they are not then 'False' is returned
  prompt: |-
    def check_prime(num):
        """
        $typecasts:changes$ the $string:string$ into an $integer:integer$ and checks if the $integers:integers$ are a prime number, if they are then 'True' is $returned:returned$, if they are not then 'False' is $returned:returned$
        """
        
  subset: first_success
- __index_level_0__: 269
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student62
  submitted_text: |-
    change input to integer. if prime number, return True, if not a prime number, return False
  prompt: |-
    def check_prime(num):
        """
        $typecast:change$ $parameter:input$ to $integer:integer$. if prime number, $return:return$ True, if not a prime number, $return:return$ False
        """
        
  subset: first_success
- __index_level_0__: 270
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student66
  submitted_text: if the number is prime return true
  prompt: |-
    def check_prime(num):
        """
        if the number is prime $return:return$ true
        """
        
  subset: first_failure
- __index_level_0__: 275
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student66
  submitted_text: change the input into an integer if the number is not divisible
    buy 4 or 3 return true else return false
  prompt: |-
    def check_prime(num):
        """
        $typecast:change$ the $parameter:input$ into an $integer:integer$ if the number is not divisible buy 4 or 3 $return:return$ true else $return:return$ false
        """
        
  subset: last_success
- __index_level_0__: 276
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student67
  submitted_text: Returns 'True' if input is a prime number.
  prompt: |-
    def check_prime(num):
        """
        $Returns:Returns$ 'True' if $parameter:input$ is a prime number.
        """
        
  subset: first_failure
- __index_level_0__: 277
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student67
  submitted_text: Converts input into an integer. Returns 'True' if input is a prime
    number.
  prompt: |-
    def check_prime(num):
        """
        $Typecasts:Converts$ $parameter:input$ into an $integer:integer$. $Returns:Returns$ 'True' if $parameter:input$ is a prime number.
        """
        
  subset: last_success
- __index_level_0__: 278
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student68
  submitted_text: |-
    given a string, convert into an integer and return true if it's a prime number. if not, return false
  prompt: |-
    def check_prime(num):
        """
        given a $string:string$, $typecast:convert$ into an $integer:integer$ and $return:return$ true if it's a prime number. if not, $return:return$ false
        """
        
  subset: first_failure
- __index_level_0__: 283
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student68
  submitted_text: |-
    given a character, convert the character into a number. return true if that number is a prime number. if not, return false. 
  prompt: |-
    def check_prime(num):
        """
        given a $string:character$, $typecast:convert$ the $string:character$ into a number. $return:return$ true if that number is a prime number. if not, $return:return$ false. 
        """
        
  subset: last_failure
- __index_level_0__: 284
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student70
  submitted_text: return whether the input num is prime.
  prompt: |-
    def check_prime(num):
        """
        $return:return$ whether the $parameter:input$ num is prime.
        """
        
  subset: first_failure
- __index_level_0__: 288
  problem: check_prime
  entrypoint: check_prime
  assertions: |-
    assert check_prime('2') == True
    assert check_prime('8') == False
    assert check_prime('9') == False
    assert check_prime('11') == True
  username: student70
  submitted_text: create a new variable that saves the input num as an integer using
    int(). return whether this integer is prime.
  prompt: |-
    def check_prime(num):
        """
        create a new variable that saves the $parameter:input$ num as an $integer:integer$ using int(). $return:return$ whether this $integer:integer$ is prime.
        """
        
  subset: last_success
- __index_level_0__: 295
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student0
  submitted_text: takes in a list of numbers. create a ODD list of odd numbers 1 through
    10. returns the list of numbers with numbers in ODD removed.
  prompt: |-
    def remove_odd(lst):
        """
        $takes:takes in$ a $list:list$ of numbers. create a ODD $list:list$ of odd numbers 1 through 10. $returns:returns$ the $list:list$ of numbers with numbers in ODD removed.
        """
        
  subset: last_success
- __index_level_0__: 296
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student3
  submitted_text: |
    remove odd interger number
  prompt: |-
    def remove_odd(lst):
        """
        remove odd $integer:interger$ number

        """
        
  subset: first_failure
- __index_level_0__: 300
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student3
  submitted_text: remove int element which are odd
  prompt: |-
    def remove_odd(lst):
        """
        remove $integer:int$ element which are odd
        """
        
  subset: last_failure
- __index_level_0__: 301
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student4
  submitted_text: deletes odd whole numbers from the list
  prompt: |-
    def remove_odd(lst):
        """
        deletes odd $integers:whole numbers$ from the $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 307
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student4
  submitted_text: |-
    for values with the int type in the given list, deletes ints that are odd from the list, returns the appended list
  prompt: |-
    def remove_odd(lst):
        """
        for values with the $integer:int$ type in the given $list:list$, deletes $integers:ints$ that are odd from the $list:list$, $returns:returns$ the appended $list:list$
        """
        
  subset: last_failure
- __index_level_0__: 308
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student10
  submitted_text: Function removes all odd integers from list. Function would keep
    all values if they have decimal points. Returns list.
  prompt: |-
    def remove_odd(lst):
        """
        Function removes all odd $integers:integers$ from $list:list$. Function would keep all values if they have decimal points. $Returns:Returns$ $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 310
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student10
  submitted_text: Function removes all odd integers from list . Returns list.
  prompt: |-
    def remove_odd(lst):
        """
        Function removes all odd $integers:integers$ from $list:list$ . $Returns:Returns$ $list:list$.
        """
        
  subset: last_failure
- __index_level_0__: 311
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student17
  submitted_text: |-
    if given 4.3, 4, 5, 2, 7 output 4.3, 4, 2 in a list.
    if given 1.1, 2.2, 3.3 output 1.1, 2.2, 3.3 a list.
    if given 4.3, 4, 5, 2, 7 output a empty list.
  prompt: |-
    def remove_odd(lst):
        """
        if given 4.3, 4, 5, 2, 7 $return:output$ 4.3, 4, 2 in a $list:list$.
    if given 1.1, 2.2, 3.3 $return:output$ 1.1, 2.2, 3.3 a $list:list$.
    if given 4.3, 4, 5, 2, 7 $return:output$ a empty $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 320
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student17
  submitted_text: remove the odd numbers in the list of numbers
  prompt: |-
    def remove_odd(lst):
        """
        remove the odd numbers in the $list:list$ of numbers
        """
        
  subset: last_failure
- __index_level_0__: 321
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student18
  submitted_text: 'Remove numbers that are not an even number or a float from the
    lst. '
  prompt: |-
    def remove_odd(lst):
        """
        Remove numbers that are not an even number or a float from the lst. 
        """
        
  subset: first_failure
- __index_level_0__: 323
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student18
  submitted_text: |-
    Create a list. Only add either a even number or a decimal to the list from the lst. Then, return the list.
  prompt: |-
    def remove_odd(lst):
        """
        Create a $list:list$. Only $insert:add$ either a even number or a decimal to the $list:list$ from the lst. Then, $return:return$ the $list:list$.
        """
        
  subset: last_failure
- __index_level_0__: 324
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student21
  submitted_text: 'remove only the odd integers from given list '
  prompt: |-
    def remove_odd(lst):
        """
        remove only the odd $integers:integers$ from given $list:list$ 
        """
        
  subset: first_failure
- __index_level_0__: 329
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student21
  submitted_text: |-
    if the value in the list is an integer, evaluate if it is odd and remove from the list if it is odd.
  prompt: |-
    def remove_odd(lst):
        """
        if the value in the $list:list$ is an $integer:integer$, evaluate if it is odd and remove from the $list:list$ if it is odd.
        """
        
  subset: last_failure
- __index_level_0__: 330
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student25
  submitted_text: This function removes odd integers from the given list.
  prompt: |-
    def remove_odd(lst):
        """
        This function removes odd $integers:integers$ from the given $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 334
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student25
  submitted_text: This function removes odd integers from the input "lst" and returns
    a list including all of the original numbers except for the odd integers. All
    floats in the given list remain in the list.
  prompt: |-
    def remove_odd(lst):
        """
        This function removes odd $integers:integers$ from the $parameter:input$ "lst" and $returns:returns$ a $list:list$ including all of the original numbers except for the odd $integers:integers$. All floats in the given $list:list$ remain in the $list:list$.
        """
        
  subset: last_failure
- __index_level_0__: 335
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student26
  submitted_text: Remove odd numbers in a list and print the new list
  prompt: |-
    def remove_odd(lst):
        """
        Remove odd numbers in a $list:list$ and $return:print$ the new $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 337
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student26
  submitted_text: Remove odd numbers in a list ignoring decimals and print the list
  prompt: |-
    def remove_odd(lst):
        """
        Remove odd numbers in a $list:list$ $skipping:ignoring$ decimals and $return:print$ the $list:list$
        """
        
  subset: last_failure
- __index_level_0__: 338
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student30
  submitted_text: Removes numbers from lst if the number % 1 = 0 and the number %
    2 = 1.
  prompt: |-
    def remove_odd(lst):
        """
        Removes numbers from lst if the number % 1 = 0 and the number % 2 = 1.
        """
        
  subset: first_success
- __index_level_0__: 339
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student30
  submitted_text: Removes odd integers from lst.
  prompt: |-
    def remove_odd(lst):
        """
        Removes odd $integers:integers$ from lst.
        """
        
  subset: last_failure
- __index_level_0__: 340
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student41
  submitted_text: |-
    For every whole number in the inputted list, if that item is not divisible by two it is removed from the list. It returns the list with the remaining values.
  prompt: |-
    def remove_odd(lst):
        """
        For every $integer:whole number$ in the inputted $list:list$, if that item is not divisible by two it is removed from the $list:list$. It $returns:returns$ the $list:list$ with the remaining values.
        """
        
  subset: first_failure
- __index_level_0__: 343
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student41
  submitted_text: |-
    For every item in the inputted list, if that item is a float it is kept in the list. Otherwise, if that item is then not divisible by two, it is removed from the list. It returns the list with the remaining values.
  prompt: |-
    def remove_odd(lst):
        """
        For every item in the inputted $list:list$, if that item is a float it is kept in the $list:list$. Otherwise, if that item is then not divisible by two, it is removed from the $list:list$. It $returns:returns$ the $list:list$ with the remaining values.
        """
        
  subset: last_failure
- __index_level_0__: 344
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student48
  submitted_text: remove odd numbers from the list
  prompt: |-
    def remove_odd(lst):
        """
        remove odd numbers from the $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 345
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student48
  submitted_text: remove odd whole numbers from the list
  prompt: |-
    def remove_odd(lst):
        """
        remove odd $integers:whole numbers$ from the $list:list$
        """
        
  subset: last_failure
- __index_level_0__: 346
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student51
  submitted_text: |-
    For each object in the list, remove it if it is an odd integer. Return the list.
  prompt: |-
    def remove_odd(lst):
        """
        For each object in the $list:list$, remove it if it is an odd $integer:integer$. $Return:Return$ the $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 349
  problem: remove_odd
  entrypoint: remove_odd
  assertions: |-
    assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]
    assert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]
    assert remove_odd([3, 5, 7]) == []
  username: student51
  submitted_text: |-
    For each object in the list, if it is and integer then check if it is odd and if it is odd then remove it. Return the list.
  prompt: |-
    def remove_odd(lst):
        """
        For each object in the $list:list$, if it is and $integer:integer$ then check if it is odd and if it is odd then remove it. $Return:Return$ the $list:list$.
        """
        
  subset: last_failure
- __index_level_0__: 352
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student19
  submitted_text: |-
    Takes an input dictionary and an input list. Checks each item in the input list. If an item is a key in the input dictionary and has a value, a that value is appended to an output list. Otherwise, if the item is not a valid key in the input dictionary, the value None is instead appended.
  prompt: |-
    def create_list(dt, lst):
        """
        $Takes:Takes$ an inpute $dictionary:dictionary$ and an input $list:list$. Checks each item in the input $list:list$. If an item is a $key:key$ in the input $dictionary:dictionary$ and has a value, a that value is $inserted:appended$ to an output $list:list$. Otherwise, if the item is not a valid $key:key$ in the input $dictionary:dictionary$, the value None is instead $inserted:appended$.
        """
        
  subset: first_success
- __index_level_0__: 353
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student20
  submitted_text: Create a list using the values of the keys
  prompt: |-
    def create_list(dt, lst):
        """
        Create a $list:list$ using the values of the $keys:keys$
        """
        
  subset: first_failure
- __index_level_0__: 354
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student20
  submitted_text: |-
    Take the values that can be accessed in dt using the keys in the lst, and create a new list with the values. If the key in lst does not exist in dt, add None to the list.
  prompt: |-
    def create_list(dt, lst):
        """
        $Take:Take$ the values that can be accessed in dt using the $keys:keys$ in the lst, and create a new $list:list$ with the values. If the $key:key$ in lst does not exist in dt, $insert:add$ None to the $list:list$.
        """
        
  subset: last_success
- __index_level_0__: 355
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student36
  submitted_text: |-
    Using the objects in dt, return their associated keys in dt
  prompt: |-
    def create_list(dt, lst):
        """
        Using the objects in dt, $return:return$ their associated $keys:keys$ in dt
        """
        
  subset: first_failure
- __index_level_0__: 357
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student36
  submitted_text: |-
    using dt as a reference, return the associated objects of the objects in lst. If the object does not appear in dt return none
  prompt: |-
    def create_list(dt, lst):
        """
        using dt as a reference, $return:return$ the associated objects of the objects in lst. If the object does not appear in dt $return:return$ none
        """
        
  subset: last_success
- __index_level_0__: 358
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student38
  submitted_text: |-
    If position in lst is a key in the dictionary, add the value to new list. If not, add None to new list. Return the new list. 
  prompt: |-
    def create_list(dt, lst):
        """
        If position in lst is a $key:key$ in the $dictionary:dictionary$, $insert:add$ the value to new $list:list$. If not, $insert:add$ None to new $list:list$. $Return:Return$ the new $list:list$. 
        """
        
  subset: first_success
- __index_level_0__: 359
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student42
  submitted_text: |-
    given a dictionary and a list, return a new list where each element in the new list is what the elements of the original list map to in the dictionary. 
  prompt: |-
    def create_list(dt, lst):
        """
        given a $dictionary:dictionary$ and a $list:list$, $return:return$ a new $list:list$ where each element in the new $list:list$ is what the elements of the original $list:list$ map to in the $dictionary:dictionary$. 
        """
        
  subset: first_failure
- __index_level_0__: 360
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student42
  submitted_text: |-
    given a dictionary and a list, return a new list where each element in the new list is what the elements of the original list map to in the dictionary. if an element of the list doesnt appear as a key in the dictionary, it should show up in the output list as None
  prompt: |-
    def create_list(dt, lst):
        """
        given a $dictionary:dictionary$ and a $list:list$, $return:return$ a new $list:list$ where each element in the new $list:list$ is what the elements of the original $list:list$ map to in the $dictionary:dictionary$. if an element of the $list:list$ doesnt appear as a $key:key$ in the $dictionary:dictionary$, it should show up in the output $list:list$ as None
        """
        
  subset: last_success
- __index_level_0__: 361
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student43
  submitted_text: |
    Return the value stored in the key in dt corresponding to the keys in lst. If you can find it, then return the value, if not, then return None.
  prompt: |-
    def create_list(dt, lst):
        """
        $Return:Return$ the value stored in the $key:key$ in dt corresponding to the $keys:keys$ in lst. If you can find it, then $return:return$ the value, if not, then $return:return$ None.

        """
        
  subset: first_failure
- __index_level_0__: 362
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student43
  submitted_text: |
    Loop through each element in lst and return the value stored in it in dt. If you can't find the value, return None. 
  prompt: |-
    def create_list(dt, lst):
        """
        $Loop through:Loop through$ each element in lst and $return:return$ the value stored in it in dt. If you can't find the value, $return:return$ None. 

        """
        
  subset: last_success
- __index_level_0__: 363
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student54
  submitted_text: |-
    Find the key in the list. If found, return the value of that key. If not found, return None.
  prompt: |-
    def create_list(dt, lst):
        """
        Find the $key:key$ in the $list:list$. If found, $return:return$ the value of that $key:key$. If not found, $return:return$ None.
        """
        
  subset: first_failure
- __index_level_0__: 365
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student54
  submitted_text: |-
    Find the keys in the list. If found, return the value of that key in a new list. If not found, return None in the new list.
  prompt: |-
    def create_list(dt, lst):
        """
        Find the $keys:keys$ in the $list:list$. If found, $return:return$ the value of that $key:key$ in a new $list:list$. If not found, $return:return$ None in the new $list:list$.
        """
        
  subset: last_success
- __index_level_0__: 366
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student57
  submitted_text: |-
    given a dictionary and a list, if key exists in dictionary, return all values in key value pair in a list. if key does not exist, return None
  prompt: |-
    def create_list(dt, lst):
        """
        given a $dictionary:dictionary$ and a $list:list$, if $key:key$ exists in $dictionary:dictionary$, $return:return$ all values in $key:key$ value pair in a $list:list$. if $key:key$ does not exist, $return:return$ None
        """
        
  subset: first_failure
- __index_level_0__: 367
  problem: create_list
  entrypoint: create_list
  assertions: |-
    assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]
    assert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']
    assert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]
  username: student57
  submitted_text: |-
    given a dictionary and a list, if key exists in dictionary, return values as well as None (if key does not exist) in a list. 
  prompt: |-
    def create_list(dt, lst):
        """
        given a $dictionary:dictionary$ and a $list:list$, if $key:key$ exists in $dictionary:dictionary$, $return:return$ values as well as None (if $key:key$ does not exist) in a $list:list$. 
        """
        
  subset: last_success
- __index_level_0__: 370
  problem: has_qu
  entrypoint: has_qu
  assertions: |-
    assert has_qu(["A", "B", "C"]) == False
    assert has_qu(["A", "Q", "C"]) == True
    assert has_qu(["A", "U", "C"]) == True
    assert has_qu(["Q", "U"]) == True
  username: student12
  submitted_text: |-
    Return true if the list contains the uppercase letters Q or U, else return false
  prompt: |-
    def has_qu(lst):
        """
        $Return:Return$ true if the $list:list$ contains the uppercase letters Q or U, else $return:return$ false
        """
        
  subset: last_success
- __index_level_0__: 371
  problem: has_qu
  entrypoint: has_qu
  assertions: |-
    assert has_qu(["A", "B", "C"]) == False
    assert has_qu(["A", "Q", "C"]) == True
    assert has_qu(["A", "U", "C"]) == True
    assert has_qu(["Q", "U"]) == True
  username: student19
  submitted_text: |-
    Takes an input list of single, capitalized letters. If any item in the list is either Q or U, it returns True. Otherwise, it returns False. 
  prompt: |-
    def has_qu(lst):
        """
        $Takes:Takes$ an input $list:list$ of single, capitalized letters. If any item in the $list:list$ is either Q or U, it $returns:returns$ True. Otherwise, it $returns:returns$ False. 
        """
        
  subset: first_success
- __index_level_0__: 372
  problem: has_qu
  entrypoint: has_qu
  assertions: |-
    assert has_qu(["A", "B", "C"]) == False
    assert has_qu(["A", "Q", "C"]) == True
    assert has_qu(["A", "U", "C"]) == True
    assert has_qu(["Q", "U"]) == True
  username: student20
  submitted_text: Check list if it contains Q or U
  prompt: |-
    def has_qu(lst):
        """
        Check $list:list$ if it contains Q or U
        """
        
  subset: first_success
- __index_level_0__: 373
  problem: has_qu
  entrypoint: has_qu
  assertions: |-
    assert has_qu(["A", "B", "C"]) == False
    assert has_qu(["A", "Q", "C"]) == True
    assert has_qu(["A", "U", "C"]) == True
    assert has_qu(["Q", "U"]) == True
  username: student36
  submitted_text: |-
    Return true if the list contains 'Q' or 'U', otherwise return false
  prompt: |-
    def has_qu(lst):
        """
        $Return:Return$ true if the $list:list$ contains 'Q' or 'U', otherwise $return:return$ false
        """
        
  subset: first_success
- __index_level_0__: 374
  problem: has_qu
  entrypoint: has_qu
  assertions: |-
    assert has_qu(["A", "B", "C"]) == False
    assert has_qu(["A", "Q", "C"]) == True
    assert has_qu(["A", "U", "C"]) == True
    assert has_qu(["Q", "U"]) == True
  username: student38
  submitted_text: |-
    If a string in lst has "Q", return True. If not, return False. 
  prompt: |-
    def has_qu(lst):
        """
        If a $string:string$ in lst has "Q", $return:return$ True. If not, $return:return$ False. 
        """
        
  subset: first_failure
- __index_level_0__: 375
  problem: has_qu
  entrypoint: has_qu
  assertions: |-
    assert has_qu(["A", "B", "C"]) == False
    assert has_qu(["A", "Q", "C"]) == True
    assert has_qu(["A", "U", "C"]) == True
    assert has_qu(["Q", "U"]) == True
  username: student38
  submitted_text: |-
    If a string in lst has "Q" or "U", return True. If not, return False. 
  prompt: |-
    def has_qu(lst):
        """
        If a $string:string$ in lst has "Q" or "U", $return:return$ True. If not, $return:return$ False. 
        """
        
  subset: last_success
- __index_level_0__: 376
  problem: has_qu
  entrypoint: has_qu
  assertions: |-
    assert has_qu(["A", "B", "C"]) == False
    assert has_qu(["A", "Q", "C"]) == True
    assert has_qu(["A", "U", "C"]) == True
    assert has_qu(["Q", "U"]) == True
  username: student42
  submitted_text: |-
    Check if a list of single letters contains the letters "Q" or "U". if it does, return true. if not, return false
  prompt: |-
    def has_qu(lst):
        """
        Check if a $list:list$ of single letters contains the letters "Q" or "U". if it does, $return:return$ true. if not, $return:return$ false
        """
        
  subset: first_success
- __index_level_0__: 377
  problem: has_qu
  entrypoint: has_qu
  assertions: |-
    assert has_qu(["A", "B", "C"]) == False
    assert has_qu(["A", "Q", "C"]) == True
    assert has_qu(["A", "U", "C"]) == True
    assert has_qu(["Q", "U"]) == True
  username: student43
  submitted_text: |-
    Check if lst contains Q or U, return True if this is true. If not, return False.
  prompt: |-
    def has_qu(lst):
        """
        Check if lst contains Q or U, $return:return$ True if this is true. If not, $return:return$ False.
        """
        
  subset: first_success
- __index_level_0__: 378
  problem: has_qu
  entrypoint: has_qu
  assertions: |-
    assert has_qu(["A", "B", "C"]) == False
    assert has_qu(["A", "Q", "C"]) == True
    assert has_qu(["A", "U", "C"]) == True
    assert has_qu(["Q", "U"]) == True
  username: student54
  submitted_text: |-
    If the list has Q or U, return True.
  prompt: |-
    def has_qu(lst):
        """
        If the $list:list$ has Q or U, $return:return$ True.
        """
        
  subset: first_success
- __index_level_0__: 379
  problem: has_qu
  entrypoint: has_qu
  assertions: |-
    assert has_qu(["A", "B", "C"]) == False
    assert has_qu(["A", "Q", "C"]) == True
    assert has_qu(["A", "U", "C"]) == True
    assert has_qu(["Q", "U"]) == True
  username: student57
  submitted_text: 'return true if list contains either character "Q" or "U". otherwise
    return false '
  prompt: |-
    def has_qu(lst):
        """
        $return:return$ true if $list:list$ contains either character "Q" or "U". otherwise $return:return$ false 
        """
        
  subset: first_success
- __index_level_0__: 380
  problem: has_qu
  entrypoint: has_qu
  assertions: |-
    assert has_qu(["A", "B", "C"]) == False
    assert has_qu(["A", "Q", "C"]) == True
    assert has_qu(["A", "U", "C"]) == True
    assert has_qu(["Q", "U"]) == True
  username: student77
  submitted_text: |-
    Given a list of letters, return True if the list has a Q or U, and False if the list does not.
  prompt: |-
    def has_qu(lst):
        """
        Given a $list:list$ of letters, $return:return$ True if the $list:list$ has a Q or U, and False if the $list:list$ does not.
        """
        
  subset: first_failure
- __index_level_0__: 384
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student6
  submitted_text: |-
    Input: dictionary with names of planets a corresponding numerical key. Output adds the keys of "Venus" and Mercury" together. If Venus and/or Mercury are not in the dictionary, return 0 as the output 
  prompt: |-
    def planets_mass(planets):
        """
        $Parameter:Input$: $dictionary:dictionary$ with names of planets a corresponding numerical $key:key$. Output adds the $keys:keys$ of "Venus" and Mercury" together. If Venus and/or Mercury are not in the $dictionary:dictionary$, $return:return$ 0 as the output 
        """
        
  subset: first_success
- __index_level_0__: 385
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student7
  submitted_text: |-
    Sums the total mass of planets for each key-value pair, with the key being the planet and the value being the mass. The Sun and Pluto are not considered planets.
  prompt: |-
    def planets_mass(planets):
        """
        Sums the total mass of planets for each $key:key$-value pair, with the $key:key$ being the planet and the value being the mass. The Sun and Pluto are not considered planets.
        """
        
  subset: first_success
- __index_level_0__: 386
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student9
  submitted_text: The function add together each number that corresponds with a string
    that is a planet. 'Sun' and 'Pluto' are not planets.
  prompt: |-
    def planets_mass(planets):
        """
        The function adds together each number that corresponds with a $string:string$ that is a planet. 'Sun' and 'Pluto' are not planets.
        """
        
  subset: first_success
- __index_level_0__: 387
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student9
  submitted_text: The function add together each number that corresponds with a string
    that is a planet.
  prompt: |-
    def planets_mass(planets):
        """
        The function add together each number that corresponds with a $string:string$ that is a planet.
        """
        
  subset: last_failure
- __index_level_0__: 388
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student14
  submitted_text: |-
    if the number attached to each planet name is greater than 16, get rid of it. Add up the remaining numbers attached to each planet that are less than 16
  prompt: |-
    def planets_mass(planets):
        """
        if the number attached to each planet name is greater than 16, get rid of it. Add up the remaining numbers attached to each planet that are less than 16
        """
        
  subset: first_failure
- __index_level_0__: 392
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student14
  submitted_text: |-
    if 'Sun' is in planets, output is 15. else, output 0
  prompt: |-
    def planets_mass(planets):
        """
        if 'Sun' is in planets, output is 15. else, $return:output$ 0
        """
        
  subset: last_success
- __index_level_0__: 393
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student15
  submitted_text: |-
    Add the values matched to 'Venus' and 'Mercury' if 'Venus' and 'Mercury' are in the dictionary. If not, return 0.
  prompt: |-
    def planets_mass(planets):
        """
        Add the values matched to 'Venus' and 'Mercury' if 'Venus' and 'Mercury' are in the $dictionary:dictionary$. If not, $return:return$ 0.
        """
        
  subset: first_success
- __index_level_0__: 394
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student24
  submitted_text: |-
    For each item in dictionary, add the values from that name if the name is in the dictionary for planets. Return the sum of those values.
  prompt: |-
    def planets_mass(planets):
        """
        For each $key:item$ in $dictionary:dictionary$, add the values from that name if the name is in the $dictionary:dictionary$ for planets. $Return:Return$ the sum of those values.
        """
        
  subset: first_failure
- __index_level_0__: 396
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student24
  submitted_text: |-
    For each item in the dictionary, add the values from that name in planets if the name is in a different dictionary and and in planets. Return the sum of those values.
  prompt: |-
    def planets_mass(planets):
        """
        For each $key:item$ in the $dictionary:dictionary$, add the values from that name in planets if the name is in a different $dictionary:dictionary$ and and in planets. $Return:Return$ the sum of those values.
        """
        
  subset: last_failure
- __index_level_0__: 397
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student28
  submitted_text: |-
    Write a code that takes one parameter, planets. Planets consists of planets and their mass. The code should only return the sum of planets less than or equal to 15.
  prompt: |-
    def planets_mass(planets):
        """
        Write a code that $takes:takes$ one $parameter:parameter$, planets. Planets consists of planets and their mass. The code should only $return:return$ the sum of planets less than or equal to 15.
        """
        
  subset: first_failure
- __index_level_0__: 398
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student31
  submitted_text: |-
    Takes a dictionary where the keys are strings, and the entries are integers. then, sums all of the entries whose strings are names of planets, and returns this sum. 
  prompt: |-
    def planets_mass(planets):
        """
        $Takes:Takes$ a $dictionary:dictionary$ where the $keys:keys$ are $strings:strings$, and the entries are $integers:integers$. then, sums all of the entries whose $strings:strings$ are names of planets, and $returns:returns$ this sum. 
        """
        
  subset: first_success
- __index_level_0__: 400
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student45
  submitted_text: |-
    Takes a dictionary which we will call planets. If the dictionary key is 'Venus' or 'Mercury', add the value at that key to the sum. Return the sum.
  prompt: |-
    def planets_mass(planets):
        """
        $Takes:Takes$ a $dictionary:dictionary$ which we will call planets. If the $dictionary:dictionary$ $key:key$ is 'Venus' or 'Mercury', add the value at that $key:key$ to the sum. $Return:Return$ the sum.
        """
        
  subset: first_success
- __index_level_0__: 401
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student46
  submitted_text: |-
    The function will take in a dictionary where the keys are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.
  prompt: |-
    def planets_mass(planets):
        """
        The function will $take:take in$ a $dictionary:dictionary$ where the $keys:keys$ are $strings:strings$, with the first letter capitalized, and $integers:integers$ are stored inside them. It will remove any $strings:strings$ that are not associated with planets, then it will $take:take$ all the $integers:integers$ stored inside and add them together and $return:output$ that.
        """
        
  subset: first_failure
- __index_level_0__: 403
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student46
  submitted_text: |-
    The function will take in a dictionary where the keys are strings and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.
  prompt: |-
    def planets_mass(planets):
        """
        The function will $take:take in$ a $dictionary:dictionary$ where the $keys:keys$ are $strings:strings$ and $integers:integers$ are stored inside them. It will remove any $strings:strings$ that are not associated with planets, then it will take all the $integers:integers$ stored inside and add them together and $return:output$ that.
        """
        
  subset: last_success
- __index_level_0__: 404
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student47
  submitted_text: "\"add up all the numbers associated with 'Venus' and 'Mercury'\""
  prompt: |-
    def planets_mass(planets):
        """
        "add up all the numbers associated with 'Venus' and 'Mercury'"
        """
        
  subset: first_failure
- __index_level_0__: 408
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student47
  submitted_text: |-
    "go through the 0 index of the planets if they are 'Venus' and 'Mercury', add up the integers that are associated with them"
  prompt: |-
    def planets_mass(planets):
        """
        "$loop through:go through$ the 0 index of the planets if they are 'Venus' and 'Mercury', add up the $integers:integers$ that are associated with them"
        """
        
  subset: last_failure
- __index_level_0__: 409
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student53
  submitted_text: "loop through planets and if the element is == 'Venus' or 'Mercury'\
    \ add value to a new list and return the sum of the new list. "
  prompt: |-
    def planets_mass(planets):
        """
        $loop through:loop through$ planets and if the $key:element$ is == 'Venus' or 'Mercury' add value to a new $list:list$ and $return:return$ the sum of the new $list:list$. 
        """
        
  subset: first_failure
- __index_level_0__: 410
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student53
  submitted_text: loop through planets and if the key == 'Venus' or 'Mercury' add
    the values together and return this value
  prompt: |-
    def planets_mass(planets):
        """
        $loop through:loop through$ planets and if the $key:key$ == 'Venus' or 'Mercury' add the values together and $return:return$ this value
        """
        
  subset: last_success
- __index_level_0__: 411
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student55
  submitted_text: Write a function that gets a dictionary of planets and their masses.
    All the planets masses in a dictionary using the name of the planet as the key.
    The function should return the sum of all the planets' masses.
  prompt: |-
    def planets_mass(planets):
        """
        Write a function that $takes:gets$ a $dictionary:dictionary$ of planets and their masses. All the planets masses in a $dictionary:dictionary$ using the name of the planet as the $key:key$. The function should $return:return$ the sum of all the planets' masses.
        """
        
  subset: first_failure
- __index_level_0__: 415
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student55
  submitted_text: Write a function that gets a dictionary. The key of the dictionary
    is the name of the planet and the value is the mass. The function should sum up
    the masses of only the planets and returns the total. The sun and pluto are not
    planets.
  prompt: |-
    def planets_mass(planets):
        """
        Write a function that $takes:gets$ a $dictionary:dictionary$. The $key:key$ of the $dictionary:dictionary$ is the name of the planet and the value is the mass. The function should sum up the masses of only the planets and $returns:returns$ the total. The sun and pluto are not planets.
        """
        
  subset: last_success
- __index_level_0__: 416
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student58
  submitted_text: |-
    return the sum of the integers. If the integer corresponds to strings 'Pluto' or 'Sun', ignore the integer
  prompt: |-
    def planets_mass(planets):
        """
        $return:return$ the sum of the $integers:integers$. If the $integer:integer$ corresponds to $strings:strings$ 'Pluto' or 'Sun', $skip:ignore$ the $integer:integer$
        """
        
  subset: first_failure
- __index_level_0__: 420
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student58
  submitted_text: |-
    If planets = 'Sun' or 'Pluto', return 0. Else add the integer to x. Return x
  prompt: |-
    def planets_mass(planets):
        """
        If planets = 'Sun' or 'Pluto', $return:return$ 0. Else add the $integer:integer$ to x. $Return:Return$ x
        """
        
  subset: last_failure
- __index_level_0__: 421
  problem: planets_mass
  entrypoint: planets_mass
  assertions: |-
    assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15
    assert planets_mass({'Pluto': 100}) == 0
  username: student65
  submitted_text: |-
    This function takes a dictionary. If an entry is a planet, then it adds the key to the total mass. The output is the total mass of all planets in the dictionary.
  prompt: |-
    def planets_mass(planets):
        """
        This function $takes:takes$ a $dictionary:dictionary$. If an $key:entry$ is a planet, then it adds the $key:key$ to the total mass. The output is the total mass of all planets in the $dictionary:dictionary$.
        """
        
  subset: first_failure
- __index_level_0__: 426
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student2
  submitted_text: This function prints an output containing all the strings that appear
  prompt: |-
    def student_grades(students, grades):
        """
        This function $returns:prints$ an output containing all the $strings:strings$ that appear
        """
        
  subset: last_failure
- __index_level_0__: 427
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student5
  submitted_text: 'the function student_grades will take the input of students and
    grades. Students will have a name and then a score. Grades will have a number
    and a range of letter grades. The function should return the name of a student
    with the range of letter grade they got based on their score. '
  prompt: |-
    def student_grades(students, grades):
        """
        the function student_grades will $take:take$ the $parameters:input$ of students and grades. Students will have a name and then a score. Grades will have a number and a range of letter grades. The function should $return:return$ the name of a student with the range of letter grade they got based on their score. 
        """
        
  subset: first_failure
- __index_level_0__: 429
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student5
  submitted_text: |-
    the function student_grades will take two inputs: students and grades. Students will have a name and then a score. Grades will have a number corresponding to the students scores and a range of letter grades tied to the number. The function should return the name of a student with the range of letter grade they got based on their score. 
  prompt: |-
    def student_grades(students, grades):
        """
        the function student_grades will $take:take$ two $parameters:inputs$: students and grades. Students will have a name and then a score. Grades will have a number corresponding to the students scores and a range of letter grades tied to the number. The function should $return:return$ the name of a student with the range of letter grade they got based on their score. 
        """
        
  subset: last_failure
- __index_level_0__: 430
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student8
  submitted_text: |
    The function returns a dictionary whose keys are keys from the first given dictionary and whose corresponding values are obtained by taking the values from the first given dictionary, matching it to a key in the second given dictionary, and taking the value at that corresponding key.
  prompt: |-
    def student_grades(students, grades):
        """
        The function $returns:returns$ a $dictionary:dictionary$ whose $keys:keys$ are $keys:keys$ from the first given $dictionary:dictionary$ and whose corresponding values are obtained by taking the values from the first given $dictionary:dictionary$, matching it to a $key:key$ in the second given $dictionary:dictionary$, and taking the value at that corresponding $key:key$.

        """
        
  subset: first_failure
- __index_level_0__: 431
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student11
  submitted_text: |-
    by comparing two dictionaries: students and grades. If the values from students equals to the keys from grades, then sign the values from grades to students.
  prompt: |-
    def student_grades(students, grades):
        """
        by comparing two $dictionaries:dictionaries$: students and grades. If the values from students equals to the $keys:keys$ from grades, then sign the values from grades to students.
        """
        
  subset: first_failure
- __index_level_0__: 433
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student11
  submitted_text: |-
    by comparing two dictionaries: students and grades. If the values from students equals to the keys from grades, then sign the values from grades to update the values in students.
  prompt: |-
    def student_grades(students, grades):
        """
        by comparing two $dictionaries:dictionaries$: students and grades. If the values from students equals to the $keys:keys$ from grades, then sign the values from grades to update the values in students.
        """
        
  subset: last_failure
- __index_level_0__: 434
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student13
  submitted_text: |-
    The function will connect each student to their list of grades by taking the number corresponding to the student's name in the students dictionary, find the number in the grades dictionary, and connect the student's name to the list of grades/the corresponding value in the grades dictionary.
  prompt: |-
    def student_grades(students, grades):
        """
        The function will connect each student to their $list:list$ of grades by taking the number corresponding to the student's name in the students $dictionary:dictionary$, find the number in the grades $dictionary:dictionary$, and connect the student's name to the $list:list$ of grades/the corresponding value in the grades $dictionary:dictionary$.
        """
        
  subset: first_success
- __index_level_0__: 435
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student16
  submitted_text: |-
    return the grades a student receives in form of a dictionary based on the dictionary of scores they each received, and the letter grades the scores correspond to.
  prompt: |-
    def student_grades(students, grades):
        """
        $return:return$ the grades a student receives in form of a $dictionary:dictionary$ based on the $dictionary:dictionary$ of scores they each received, and the letter grades the scores correspond to.
        """
        
  subset: first_failure
- __index_level_0__: 436
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student16
  submitted_text: |-
    return the grades a student receives in form of a dictionary based on the dictionary of scores they each received, and the letter grades the scores correspond to. If the score they received exists in the second dictionary, use the letter grade list from the second dictionary for the student in the output
  prompt: |-
    def student_grades(students, grades):
        """
        $return:return$ the grades a student receives in form of a $dictionary:dictionary$ based on the $dictionary:dictionary$ of scores they each received, and the letter grades the scores correspond to. If the score they received exists in the second $dictionary:dictionary$, use the letter grade $list:list$ from the second $dictionary:dictionary$ for the student in the $return:output$
        """
        
  subset: last_failure
- __index_level_0__: 437
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student22
  submitted_text: |-
    takes in 2 dictionaries and uses the first one's values for the second one's key, and outputs a dictionary matching those up
  prompt: |-
    def student_grades(students, grades):
        """
        $takes:takes in$ 2 $dictionaries:dictionaries$ and uses the first one's values for the second one's $key:key$, and $returns:outputs$ a $dictionary:dictionary$ matching those up
        """
        
  subset: first_success
- __index_level_0__: 438
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student37
  submitted_text: Write a function which takes a dictionary of integers mapped to
    strings and a second dictionary of integers mapped to lists (size 2) of strings
    and maps takes the integers from the first list and constructs a new dictionary
    where the string mapped to each integer in the first list is mapped to the list
    the integer is mapped to in the second dictionary
  prompt: |-
    def student_grades(students, grades):
        """
        Write a function which $takes:takes$ a $dictionary:dictionary$ of $integers:integers$ mapped to $strings:strings$ and a second $dictionary:dictionary$ of $integers:integers$ mapped to $lists:lists$ (size 2) of $strings:strings$ and maps takes the $integers:integers$ from the first $list:list$ and constructs a new $dictionary:dictionary$ where the $string:string$ mapped to each $integer:integer$ in the first $list:list$ is mapped to the $list:list$ the $integer:integer$ is mapped to in the second $dictionary:dictionary$
        """
        
  subset: first_failure
- __index_level_0__: 439
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student61
  submitted_text: |-
    Function takes in names of students with a number and based on that number, the grades are returned in a letter format
  prompt: |-
    def student_grades(students, grades):
        """
        Function $takes:takes in$ names of students with a number and based on that number, the grades are $returned:returned$ in a letter format
        """
        
  subset: first_failure
- __index_level_0__: 440
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student61
  submitted_text: Function takes in names of students with a number and based on that
    number the grades are returned from the brackets
  prompt: |-
    def student_grades(students, grades):
        """
        Function $takes:takes in$ names of students with a number and based on that number the grades are $returned:returned$ from the $lists:brackets$
        """
        
  subset: last_failure
- __index_level_0__: 441
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student72
  submitted_text: Return a dictionary with the key being the string from the first
    dictionary in the input. Go through the next dictionary in the input and find
    what the integer in the first dictionary in the input corresopnds to. Return that
    as what corresponds to the string in the ouput.
  prompt: |-
    def student_grades(students, grades):
        """
        $Return:Return$ a $dictionary:dictionary$ with the $key:key$ being the $string:string$ from the first $dictionary:dictionary$ in the $parameters:input$. $Loop through:Go through$ the next $dictionary:dictionary$ in the $parameters:input$ and find what the $integer:integer$ in the first $dictionary:dictionary$ in the $parameters:input$ corresopnds to. $Return:Return$ that as what corresponds to the $string:string$ in the ouput.
        """
        
  subset: first_failure
- __index_level_0__: 442
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student73
  submitted_text: |-
    The values of the first dictionary become the keys of the second dictionary. the output is a dictionary that adds the key of the first dictionary with the corresponding value of the second dictionary. if the second dictionary has key value pairs that don't correspond with the first dictionary, do not add them to the output dictionary. 
  prompt: |-
    def student_grades(students, grades):
        """
        The values of the first $dictionary:dictionary$ become the $keys:keys$ of the second $dictionary:dictionary$. the output is a $dictionary:dictionary$ that $inserts:adds$ the $key:key$ of the first $dictionary:dictionary$ with the corresponding value of the second $dictionary:dictionary$. if the second $dictionary:dictionary$ has $key:key$ value pairs that don't correspond with the first $dictionary:dictionary$, do not $insert:add$ them to the output $dictionary:dictionary$. 
        """
        
  subset: first_failure
- __index_level_0__: 443
  problem: student_grades
  entrypoint: student_grades
  assertions: |-
    assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}
    assert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}
    assert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }
  username: student74
  submitted_text: |-
    Assigns students to a number. Then, the numbers are assigned a letter grade. The code should keep track of the letter grade for each student. Any unassigned students should be ignored 
  prompt: |-
    def student_grades(students, grades):
        """
        Assigns students to a number. Then, the numbers are assigned a letter grade. The code should keep track of the letter grade for each student. Any unassigned students should be $skipped:ignored$ 
        """
        
  subset: first_failure
- __index_level_0__: 451
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student23
  submitted_text: |-
    This function takes in a list within a list, consisting of an integer in the outer list, and names as a string in the inner list. The output creates a dictionary where the key is the string and updates the dictionary with the value which is the integer that is given. 
  prompt: |-
    def times_with(meetings):
        """
        This function $takes:takes in$ a $list:list$ within a $list:list$, consisting of an $integer:integer$ in the outer $list:list$, and names as a $string:string$ in the inner $list:list$. The output creates a $dictionary:dictionary$ where the $key:key$ is the $string:string$ and updates the $dictionary:dictionary$ with the value which is the $integer:integer$ that is given. 
        """
        
  subset: last_failure
- __index_level_0__: 453
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student33
  submitted_text: |-
    The function takes in some number of lists that each consist of an integer and another list of strings "names". For each list, the function creates a dictionary entry with each string in "names" and the integer in that list. The function returns the dictionary. 
  prompt: |-
    def times_with(meetings):
        """
        The function $takes:takes in$ some number of $lists:lists$ that each consist of an $integer:integer$ and another $list:list$ of $strings:strings$ "names". For each $list:list$, the function creates a $dictionary:dictionary$ entry with each $string:string$ in "names" and the $integer:integer$ in that $list:list$. The function $returns:returns$ the $dictionary:dictionary$. 
        """
        
  subset: last_success
- __index_level_0__: 454
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student35
  submitted_text: |-
    The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. The output is a dictionary where the keys are string names and the values are their corresponding numbers.
  prompt: |-
    def times_with(meetings):
        """
        The function is supposed to calculate the number of meetings of each $string:string$. It $loops through:iterates through$ each $list:list$ of the $list:list$ of $lists:lists$. The number provided in each $list:list$ is assigned to all the $strings:strings$ in the $list:list$ next to it. If a $string:string$ name is repeated in some other $list:list$, the corresponding number is not assigned rather added to the number which was initially assigned. The output is a $dictionary:dictionary$ where the $keys:keys$ are $string:string$ names and the values are their corresponding numbers.
        """
        
  subset: first_failure
- __index_level_0__: 455
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student35
  submitted_text: |-
    The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. A dictionary is made where the keys are string names and the values are their corresponding numbers.The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. 
  prompt: |-
    def times_with(meetings):
        """
        The function is supposed to calculate the number of meetings of each $string:string$. It $loops through:iterates through$ each $list:list$ of the $list:list$ of $lists:lists$. A $dictionary:dictionary$ is made where the $keys:keys$ are $string:string$ names and the values are their corresponding numbers.The number provided in each $list:list$ is assigned to all the $strings:strings$ in the $list:list$ next to it. If a $string:string$ name is repeated in some other $list:list$, the corresponding number is not assigned rather added to the number which was initially assigned. 
        """
        
  subset: last_failure
- __index_level_0__: 456
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student40
  submitted_text: |-
    the input will consist of a list of lists. an empty dictionary will be made. the strings will be keys in the dictionary and the numbers will be the values that correspond to each key. if a key appears twice, then the values will be added and will correspond to only one key.
  prompt: |-
    def times_with(meetings):
        """
        the $parameter:input$ will consist of a $list:list$ of $lists:lists$. an empty $dictionary:dictionary$ will be made. the $strings:strings$ will be $keys:keys$ in the $dictionary:dictionary$ and the numbers will be the values that correspond to each $key:key$. if a $key:key$ appears twice, then the values will be added and will correspond to only one $key:key$.
        """
        
  subset: first_failure
- __index_level_0__: 459
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student40
  submitted_text: |-
    the input will consist of a list of lists. an empty dictionary will be made. each string within the list will be a  key. the numbers outside of each list will be the value for each key. if a key appears twice, then the values will be added and will correspond to only one key.
  prompt: |-
    def times_with(meetings):
        """
        the $parameter:input$ will consist of a $list:list$ of $lists:lists$. an empty $dictionary:dictionary$ will be made. each $string:string$ within the $list:list$ will be a  $key:key$. the numbers outside of each $list:list$ will be the value for each $key:key$. if a $key:key$ appears twice, then the values will be added and will correspond to only one $key:key$.
        """
        
  subset: last_failure
- __index_level_0__: 460
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student44
  submitted_text: |-
    Make a dictionary with keys: Alice, Bob, and Carol. 
    For every array in the array, add the value stored in index 0 to the keys that are stored in index 1. 
  prompt: |-
    def times_with(meetings):
        """
        Make a $dictionary:dictionary$ with $keys:keys$: Alice, Bob, and Carol. 
    For every $list:array$ in the $list:array$, add the value stored in index 0 to the $keys:keys$ that are stored in index 1. 
        """
        
  subset: first_success
- __index_level_0__: 461
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student50
  submitted_text: |-
    Input is an array containing a number and names. Return a dictionary with a name corresponding to the number. If a name in the list of names appears next to more than one number, add the two numbers together when returning a number.
  prompt: |-
    def times_with(meetings):
        """
        $Parameter:Input$ is an $list:array$ containing a number and names. $Return:Return$ a $dictionary:dictionary$ with a name corresponding to the number. If a name in the $list:list$ of names appears next to more than one number, add the two numbers together when $returning:returning$ a number.
        """
        
  subset: first_failure
- __index_level_0__: 464
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student50
  submitted_text: |-
    Input contains lists of names with numbers besides them. Return each name in the list of names with the number as a dictionary. If a name appears in more than one list of names, add the number besides the list together and return that number in the dictionary.
  prompt: |-
    def times_with(meetings):
        """
        $Parameter:Input$ contains $lists:lists$ of names with numbers besides them. $Return:Return$ each name in the $list:list$ of names with the number as a $dictionary:dictionary$. If a name appears in more than one $list:list$ of names, add the number besides the $list:list$ together and $return:return$ that number in the $dictionary:dictionary$.
        """
        
  subset: last_failure
- __index_level_0__: 465
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student59
  submitted_text: |-
    takes a list of lists as an input. creates an empty dictionary. for each list in the inputted list, takes each value in the [1] place and make it a key and add it to the created dictionary, then make the value of that key the value in the [0] place from the list
  prompt: |-
    def times_with(meetings):
        """
        $takes:takes$ a $list:list$ of $lists:lists$ as an $parameter:input$. creates an empty $dictionary:dictionary$. for each $list:list$ in the inputted $list:list$, takes each value in the [1] place and make it a $key:key$ and add it to the created $dictionary:dictionary$, then make the value of that $key:key$ the value in the [0] place from the $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 467
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student59
  submitted_text: |-
    takes a list of lists as an input. for each list inside the inputted list, there is a value and a list of names. returns a dictionary of the names with the value of the value in the list they came from
  prompt: |-
    def times_with(meetings):
        """
        $takes:takes$ a $list:list$ of $lists:lists$ as an $parameter:input$. for each $list:list$ inside the inputted $list:list$, there is a value and a $list:list$ of names. $returns:returns$ a $dictionary:dictionary$ of the names with the value of the value in the $list:list$ they came from
        """
        
  subset: last_failure
- __index_level_0__: 468
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student60
  submitted_text: |-
    This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. 
  prompt: |-
    def times_with(meetings):
        """
        This function $takes:takes in$ a $integer:int$ and a 2d $list:list$ as $parameters:parameters$. The 2d $list:list$ is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the $integer:int$ to every $string:string$ in the $list:list$. If the $string:string$ appears multiple times, the number is added to that. 
        """
        
  subset: first_failure
- __index_level_0__: 469
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student60
  submitted_text: |
    This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. The function then would return a dictionary containing the total value assigned to every string. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would return { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
  prompt: |-
    def times_with(meetings):
        """
        This function $takes:takes in$ a $integer:int$ and a 2d $list:list$ as $parameters:parameters$. The 2d $list:list$ is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the $integer:int$ to every $string:string$ in the $list:list$. If the $string:string$ appears multiple times, the number is added to that. The function then would $return:return$ a $dictionary:dictionary$ containing the total value assigned to every $string:string$. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would $return:return$ { 'Alice': 30, 'Bob': 30, 'Carol': 30 }

        """
        
  subset: last_success
- __index_level_0__: 470
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student63
  submitted_text: |-
    The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has one of the names as the key, and the value is the sum of the numbers that are the first entry of each list that the name is found in. 
  prompt: |-
    def times_with(meetings):
        """
        The function $takes:takes in$ a $list:list$ of $lists:lists$ and $returns:outputs$ a $dictionary:dictionary$. Each $list:list$ in the $list:list$ has a number as the first entry, then a $list:list$ of names. Each item in the $dictionary:dictionary$ has one of the names as the $key:key$, and the value is the sum of the numbers that are the first entry of each $list:list$ that the name is found in. 
        """
        
  subset: first_failure
- __index_level_0__: 471
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student63
  submitted_text: |-
    The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has a name from the name lists as the key, and the value is the sum of the numbers that are the first entry of each list that the list of names that has the name is found in. 
  prompt: |-
    def times_with(meetings):
        """
        The function $takes:takes in$ a $list:list$ of $lists:lists$ and $returns:outputs$ a $dictionary:dictionary$. Each $list:list$ in the $list:list$ has a number as the first entry, then a $list:list$ of names. Each item in the $dictionary:dictionary$ has a name from the name $lists:lists$ as the $key:key$, and the value is the sum of the numbers that are the first entry of each $list:list$ that the $list:list$ of names that has the name is found in. 
        """
        
  subset: last_failure
- __index_level_0__: 472
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student64
  submitted_text: |-
    In list inside of meetings, create a new dictionary with the key as name and the value as number outside of lists. For next list of lists, add number to keys in dictionary. If keys do not already exist, create new key.
  prompt: |-
    def times_with(meetings):
        """
        In $list:list$ inside of meetings, create a new $dictionary:dictionary$ with the $key:key$ as name and the value as number outside of $lists:lists$. For next $list:list$ of $lists:lists$, add number to $keys:keys$ in $dictionary:dictionary$. If $keys:keys$ do not already exist, create new $key:key$.
        """
        
  subset: first_failure
- __index_level_0__: 473
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student64
  submitted_text: |-
    For each meeting in meetings, look at index 1 for list of persons. Create a new dictionary with the key as name and the value as index 0 of list of persons. For next list of lists, add number to keys in dictionary. If keys do not already exist, create new key.
  prompt: |-
    def times_with(meetings):
        """
        For each meeting in meetings, look at index 1 for $list:list$ of persons. Create a new $dictionary:dictionary$ with the $key:key$ as name and the value as index 0 of $list:list$ of persons. For next $list:list$ of $lists:lists$, add number to $keys:keys$ in $dictionary:dictionary$. If $keys:keys$ do not already exist, create new $key:key$.
        """
        
  subset: last_failure
- __index_level_0__: 474
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student69
  submitted_text: |-
    Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. 
  prompt: |-
    def times_with(meetings):
        """
        $Provide:Enter$ a $list:list$ of $lists:lists$. Each element in the $lists:lists$ is a $list:list$ where index 0 is a number and index 1 is a $list:list$ of names. for each element in the $list:list$ of $lists:lists$, create a $dictionary:dictionary$ where the name is a $key:key$ and the number is a value. 
        """
        
  subset: first_failure
- __index_level_0__: 475
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student69
  submitted_text: |-
    Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. if the name appears more than once, add the new number to the previous number
  prompt: |-
    def times_with(meetings):
        """
        $Provide:Enter$ a $list:list$ of $lists:lists$. Each element in the $lists:lists$ is a $list:list$ where index 0 is a number and index 1 is a $list:list$ of names. for each element in the $list:list$ of $lists:lists$, create a $dictionary:dictionary$ where the name is a $key:key$ and the number is a value. if the name appears more than once, add the new number to the previous number
        """
        
  subset: last_success
- __index_level_0__: 476
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student71
  submitted_text: |2-

    Turns list of names into dictionary keys. Takes in meeting number as a dictionary value, and iterates through list of names and adds any additional meeting output numbers to each dictionary keys
  prompt: |-
    def times_with(meetings):
        """
        
    Turns $list:list$ of names into $dictionary:dictionary$ $keys:keys$. Takes in meeting number as a $dictionary:dictionary$ value, and $loops through:iterates through$ $list:list$ of names and adds any additional meeting output numbers to each $dictionary:dictionary$ $keys:keys$
        """
        
  subset: first_failure
- __index_level_0__: 483
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student75
  submitted_text: |-
    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1:val0, increase val1 + 1
  prompt: |-
    def times_with(meetings):
        """
        def times_with(meetings): $takes:takes$ the $parameter:input$ [ [30, ['Alice', 'Bob', 'Carol']] ] and $returns:produces$ and output of val1:val0, increase val1 + 1
        """
        
  subset: last_success
- __index_level_0__: 484
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student76
  submitted_text: takes the number before the bracket of strings and adds that value
    to a dictionary. if the name is mentioned more than once with multiple numbers
    it sums them and adds them to the dictionary output
  prompt: |-
    def times_with(meetings):
        """
        takes the number before the bracket of $strings:strings$ and $inserts:adds$ that value to a $dictionary:dictionary$. if the name is mentioned more than once with multiple numbers it sums them and adds them to the $dictionary:dictionary$ output
        """
        
  subset: first_failure
- __index_level_0__: 485
  problem: times_with
  entrypoint: times_with
  assertions: |-
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }
    assert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }
    assert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}
  username: student79
  submitted_text: you are going to have a nested list as an input. the inner most
    lists are going to have strings. next to them they will have an integer. your
    goal is to create a dictionary with the names in the inner most lists and add
    to the list if the same name already has a value in the dictionary.
  prompt: |-
    def times_with(meetings):
        """
        you are going to have a nested $list:list$ as an $parameter:input$. the inner most $lists:lists$ are going to have $strings:strings$. next to them they will have an $integer:integer$. your goal is to create a $dictionary:dictionary$ with the names in the inner most $lists:lists$ and $insert:add$ to the $list:list$ if the same name already has a value in the $dictionary:dictionary$.
        """
        
  subset: first_failure
- __index_level_0__: 492
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student5
  submitted_text: The function meeps_morps will take a list as an input and return
    the number of times "Meep" appears and the number that "Morp" appears in a list
  prompt: |-
    def meeps_morps(items):
        """
        The function meeps_morps will $take:take$ a $list:list$ as an $parameter:input$ and $return:return$ the number of times "Meep" appears and the number that "Morp" appears in a $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 493
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student5
  submitted_text: The function meeps_morps will take a list as an input and return
    a list with the number of times "Meep" appears and the number that "Morp" appears.
  prompt: |-
    def meeps_morps(items):
        """
        The function meeps_morps will $take:take$ a $list:list$ as an $parameter:input$ and $return:return$ a $list:list$ with the number of times "Meep" appears and the number that "Morp" appears.
        """
        
  subset: last_success
- __index_level_0__: 494
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student8
  submitted_text: Returns a list where the first entry contains the number of times
    "Meep" appears in the given array and the second entry contains the number of
    times "Morp" appears in the given array.
  prompt: |-
    def meeps_morps(items):
        """
        $Returns:Returns$ a $list:list$ where the first entry contains the number of times "Meep" appears in the given $list:array$ and the second entry contains the number of times "Morp" appears in the given $list:array$.
        """
        
  subset: first_success
- __index_level_0__: 495
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student11
  submitted_text: |-
    A function that can count how many 'Meep' and 'Morp' there are in a list and show it by creating a list to show[count(Meep),count(Morp)]
  prompt: |-
    def meeps_morps(items):
        """
        A function that can count how many 'Meep' and 'Morp' there are in a $list:list$ and show it by creating a $list:list$ to show[count(Meep),count(Morp)]
        """
        
  subset: first_success
- __index_level_0__: 496
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student13
  submitted_text: |-
    Based on the list of strings inputted, the function will identify the number of strings that say 'Meep' and 'Morp' and return a list of the number of 'Meep' and the number of 'Morp' strings.
  prompt: |-
    def meeps_morps(items):
        """
        Based on the $list:list$ of $strings:strings$ inputted, the function will identify the number of $strings:strings$ that say 'Meep' and 'Morp' and $return:return$ a $list:list$ of the number of 'Meep' and the number of 'Morp' $strings:strings$.
        """
        
  subset: first_success
- __index_level_0__: 497
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student16
  submitted_text: count the number of 'meep' and 'morp' in a list
  prompt: |-
    def meeps_morps(items):
        """
        count the number of 'meep' and 'morp' in a $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 499
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student16
  submitted_text: count the number of 'Meep' and 'Morp' in a list as a list
  prompt: |-
    def meeps_morps(items):
        """
        count the number of 'Meep' and 'Morp' in a $list:list$ as a $list:list$
        """
        
  subset: last_success
- __index_level_0__: 500
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student22
  submitted_text: take in a list of strings and output a count of how many times the
    word 'Meep' and 'Morp' occur
  prompt: |-
    def meeps_morps(items):
        """
        $take:take in$ a $list:list$ of $strings:strings$ and $return:output$ a count of how many times the $string:word$ 'Meep' and 'Morp' occur
        """
        
  subset: first_failure
- __index_level_0__: 502
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student22
  submitted_text: take in a list of strings and output a list count of how many times
    the word 'Meep' and 'Morp' occur
  prompt: |-
    def meeps_morps(items):
        """
        $take:take in$ a $list:list$ of $strings:strings$ and $return:output$ a $list:list$ count of how many times the $string:word$ 'Meep' and 'Morp' occur
        """
        
  subset: last_success
- __index_level_0__: 503
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student37
  submitted_text: |-
    Write a function which takes a list of strings as an input, creates a list of 0's of length 2 called counter, then iterates through the input list and for each instance of 'Meep' in the input list, adds +1 to counter[0], and for each instance of 'Morp', adds +1 to counter[1].
  prompt: |-
    def meeps_morps(items):
        """
        Write a function which $takes:takes$ a $list:list$ of $strings:strings$ as an $parameter:input$, creates a $list:list$ of 0's of length 2 called counter, then $loops through:iterates through$ the input $list:list$ and for each instance of 'Meep' in the input $list:list$, adds +1 to counter[0], and for each instance of 'Morp', adds +1 to counter[1].
        """
        
  subset: first_success
- __index_level_0__: 504
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student61
  submitted_text: function counts amount of times that 'meeps' and 'morps' appear
    in input
  prompt: |-
    def meeps_morps(items):
        """
        function counts amount of times that 'meeps' and 'morps' appear in $parameter:input$
        """
        
  subset: first_failure
- __index_level_0__: 508
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student61
  submitted_text: function counts amount of times that 'Meep' and 'Morp' appear in
    list
  prompt: |-
    def meeps_morps(items):
        """
        function counts amount of times that 'Meep' and 'Morp' appear in $list:list$
        """
        
  subset: last_failure
- __index_level_0__: 509
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student72
  submitted_text: Count the number of times 'Meep' is displayed in the list. Then
    count the number of times 'Morp' is displayed.
  prompt: |-
    def meeps_morps(items):
        """
        Count the number of times 'Meep' is displayed in the $list:list$. Then count the number of times 'Morp' is displayed.
        """
        
  subset: first_failure
- __index_level_0__: 510
  problem: meeps_morps
  entrypoint: meeps_morps
  assertions: |-
    assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]
    assert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]
    assert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]
  username: student73
  submitted_text: |-
    read through the list and count all items that are the same. put the total amount of each item in a 2 item list. The list should be sorted from most to least. If there is only one item that repeats, the output should count that and also have a zero in as a placeholder for the second item in the output list. If there are no items that are the same, then the output should have zeros as placeholders for both items in the output list. 
  prompt: |-
    def meeps_morps(items):
        """
        $loop:read through$ the $list:list$ and count all items that are the same. put the total amount of each item in a 2 item $list:list$. The $list:list$ should be sorted from most to least. If there is only one item that repeats, the output should count that and also have a zero in as a placeholder for the second item in the output $list:list$. If there are no items that are the same, then the output should have zeros as placeholders for both items in the output $list:list$. 
        """
        
  subset: first_failure
- __index_level_0__: 517
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student19
  submitted_text: |-
    Takes an input string which is the first three letters of any day of the week, and an input number 0-23. If the input string is 'Sat' or 'Sun', it returns 'weekend'. Otherwise, if the hour is between 0 and 8, it returns 'sleeping'. If the hour is 9-23 and the string is not 'Sat' or 'Sun', it returns 'weekday'.
  prompt: |-
    def print_time(day,hour):
        """
        $Takes:Takes$ an input $string:string$ which is the first three letters of any day of the week, and an input number 0-23. If the input $string:string$ is 'Sat' or 'Sun', it $returns:returns$ 'weekend'. Otherwise, if the hour is between 0 and 8, it $returns:returns$ 'sleeping'. If the hour is 9-23 and the $string:string$ is not 'Sat' or 'Sun', it $returns:returns$ 'weekday'.
        """
        
  subset: first_success
- __index_level_0__: 518
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student20
  submitted_text: |-
    If hour is between 0 and 8 inclusive, return sleeping. If day is 'Sat' or 'Sun' return 'weekend'. Otherwise return 'weekday'.
  prompt: |-
    def print_time(day,hour):
        """
        If hour is between 0 and 8 inclusive, $return:return$ sleeping. If day is 'Sat' or 'Sun' $return:return$ 'weekend'. Otherwise $return:return$ 'weekday'.
        """
        
  subset: first_success
- __index_level_0__: 519
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student36
  submitted_text: |-
    Accept the day of the week, and the time of day and if the time is between 9-23 return weekend for Sat and Sun and weekday for any other. If the time is between 0-8 return sleeping
  prompt: |-
    def print_time(day,hour):
        """
        $Take:Accept$ the day of the week, and the time of day and if the time is between 9-23 $return:return$ weekend for Sat and Sun and weekday for any other. If the time is between 0-8 $return:return$ sleeping
        """
        
  subset: first_failure
- __index_level_0__: 521
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student36
  submitted_text: Return weekend for Sat and Sun or weekday for any other.  If the
    time is between 0-9 return sleeping
  prompt: |-
    def print_time(day,hour):
        """
        $Return:Return$ weekend for Sat and Sun or weekday for any other.  If the time is between 0-9 $return:return$ sleeping
        """
        
  subset: last_success
- __index_level_0__: 522
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student38
  submitted_text: |-
    Return 'weekend' if day is 'Sat' or 'Sun' and 'weekday' if not. If hour is from 0 to 8, return 'sleeping'. 
  prompt: |-
    def print_time(day,hour):
        """
        $Return:Return$ 'weekend' if day is 'Sat' or 'Sun' and 'weekday' if not. If hour is from 0 to 8, $return:return$ 'sleeping'. 
        """
        
  subset: first_failure
- __index_level_0__: 523
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student38
  submitted_text: |-
    If hour is from 0 to 8, return 'sleeping'. Return 'weekend' if day is 'Sat' or 'Sun' and 'weekday' if not. 
  prompt: |-
    def print_time(day,hour):
        """
        If hour is from 0 to 8, $return:return$ 'sleeping'. $Return:Return$ 'weekend' if day is 'Sat' or 'Sun' and 'weekday' if not. 
        """
        
  subset: last_success
- __index_level_0__: 524
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student42
  submitted_text: |-
    take in a day and an hour. if the hour is between 0 and 8, output the string "sleeping". if not, check if the day is either "Sat" or "Sun", and if so, output the string "weekend". else, output "weekday". 
  prompt: |-
    def print_time(day,hour):
        """
        $take:take in$ a day and an hour. if the hour is between 0 and 8, $return:output$ the $string:string$ "sleeping". if not, check if the day is either "Sat" or "Sun", and if so, $return:output$ the $string:string$ "weekend". else, $return:output$ "weekday". 
        """
        
  subset: first_failure
- __index_level_0__: 526
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student42
  submitted_text: |-
    take in a day and an hour. if the hour is less than or equal to 8, return the string "sleeping". if not, check if the day is either "Sat" or "Sun", and if so, return the string "weekend". else, return the string "weekday". 
  prompt: |-
    def print_time(day,hour):
        """
        $take:take in$ a day and an hour. if the hour is less than or equal to 8, $return:return$ the $string:string$ "sleeping". if not, check if the day is either "Sat" or "Sun", and if so, $return:return$ the $string:string$ "weekend". else, $return:return$ the $string:string$ "weekday". 
        """
        
  subset: last_success
- __index_level_0__: 527
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student43
  submitted_text: |-
    First check the first component of the input, if it is Sat or if it is Sun, then return weekend. If not true, then check the second component of the input, if the it is in the range from 0 to 8, including 0 and 8, then return sleeping. If not true, then return weekday. 
  prompt: |-
    def print_time(day,hour):
        """
        First check the first component of the $parameter:input$, if it is Sat or if it is Sun, then $return:return$ weekend. If not true, then check the second component of the $parameter:input$, if the it is in the range from 0 to 8, including 0 and 8, then $return:return$ sleeping. If not true, then $return:return$ weekday. 
        """
        
  subset: first_failure
- __index_level_0__: 528
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student43
  submitted_text: |-
    First check the first component of the input, if it is Sat or if it is Sun, then return weekend. If not true, then check the second component of the input, if the it is in the range from 0 to 8, including 0 and 8, then return sleeping. If not true, then return weekday. 
  prompt: |-
    def print_time(day,hour):
        """
        First check the first component of the $parameter:input$, if it is Sat or if it is Sun, then $return:return$ weekend. If not true, then check the second component of the $parameter:input$, if the it is in the range from 0 to 8, including 0 and 8, then $return:return$ sleeping. If not true, then $return:return$ weekday. 
        """
        
  subset: last_success
- __index_level_0__: 529
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student54
  submitted_text: |-
    If sat or sun, print weekend. If Mon-Fri, print weekday. If hours 0-8, print sleeping.
  prompt: |-
    def print_time(day,hour):
        """
        If sat or sun, $return:print$ weekend. If Mon-Fri, $return:print$ weekday. If hours 0-8, $return:print$ sleeping.
        """
        
  subset: first_failure
- __index_level_0__: 533
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student54
  submitted_text: |-
    If hours 0-8, or equal to 8, return sleeping. If Sat or Sun, return weekend. If Mon-Fri, return weekday. 
  prompt: |-
    def print_time(day,hour):
        """
        If hours 0-8, or equal to 8, $return:return$ sleeping. If Sat or Sun, $return:return$ weekend. If Mon-Fri, $return:return$ weekday. 
        """
        
  subset: last_success
- __index_level_0__: 534
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student57
  submitted_text: |-
    given a string and an integer, if given string is either "Sat" or "Sun", return "weekend". if string is a weekday (i.e. "Mon" or "Tue"), take into account the integer. if integer is from 9-23, return "weekday". if integer is from 0-8, return "sleeping". if integer is more than 24, return an error statement stating there are only 24 hours in a day where midnight starts at 0.
  prompt: |-
    def print_time(day,hour):
        """
        given a $string:string$ and an $integer:integer$, if given $string:string$ is either "Sat" or "Sun", $return:return$ "weekend". if $string:string$ is a weekday (i.e. "Mon" or "Tue"), take into account the $integer:integer$. if $integer:integer$ is from 9-23, $return:return$ "weekday". if $integer:integer$ is from 0-8, $return:return$ "sleeping". if $integer:integer$ is more than 24, $return:return$ an error statement stating there are only 24 hours in a day where midnight starts at 0.
        """
        
  subset: first_failure
- __index_level_0__: 535
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student57
  submitted_text: |-
    given a string and an integer, if given string is either "Sat" or "Sun", return "weekend". if string is "Mon", "Tue", "Wed", "Thu" or "Fri", take into account the integer. if integer is from 9-23, return "weekday". if integer is from 0-8, return "sleeping". if integer is more than 24, return an error statement stating there are only 24 hours in a day where midnight starts at 0.
  prompt: |-
    def print_time(day,hour):
        """
        given a $string:string$ and an $integer:integer$, if given $string:string$ is either "Sat" or "Sun", $return:return$ "weekend". if $string:string$ is "Mon", "Tue", "Wed", "Thu" or "Fri", take into account the $integer:integer$. if $integer:integer$ is from 9-23, $return:return$ "weekday". if $integer:integer$ is from 0-8, $return:return$ "sleeping". if $integer:integer$ is more than 24, $return:return$ an error statement stating there are only 24 hours in a day where midnight starts at 0.
        """
        
  subset: last_failure
- __index_level_0__: 536
  problem: print_time
  entrypoint: print_time
  assertions: |-
    assert print_time('Sat', 12) == 'weekend'
    assert print_time('Sun', 12) == 'weekend'
    assert print_time('Mon', 9) == 'weekday'
    assert print_time('Tue', 23) == 'weekday'
    assert print_time('Wed', 0) == 'sleeping'
    assert print_time('Thu', 8) == 'sleeping'
  username: student77
  submitted_text: |-
    Given two parameters,  the first being the day and the second being a measurement of time, return "weekend" if the day is 'Sat' or 'Sun', and return weekday if the day is neither. Return "sleeping" if the measurement of time is between '0' and '8', inclusive.
  prompt: |-
    def print_time(day,hour):
        """
        Given two $parameters:parameters$,  the first being the day and the second being a measurement of time, $return:return$ "weekend" if the day is 'Sat' or 'Sun', and $return:return$ weekday if the day is neither. $Return:Return$ "sleeping" if the measurement of time is between '0' and '8', inclusive.
        """
        
  subset: first_failure
- __index_level_0__: 540
  problem: mod_end
  entrypoint: mod_end
  assertions: |-
    assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']
    assert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']
    assert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']
  username: student19
  submitted_text: |-
    Takes a list of strings words and a string ending, removes any instance of ending from each item in words, and replaces it with an 's'.
  prompt: |-
    def mod_end(words, ending):
        """
        $Takes:Takes$ a $list:list$ of $strings:strings$ words and a $string:string$ ending, removes any instance of ending from each item in words, and replaces it with an 's'.
        """
        
  subset: first_success
- __index_level_0__: 541
  problem: mod_end
  entrypoint: mod_end
  assertions: |-
    assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']
    assert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']
    assert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']
  username: student20
  submitted_text: |-
    Take a list of words sharing the same ending, and a string as an input.
    Search the last letters of the word for the string, and replace it with 's'.
  prompt: |-
    def mod_end(words, ending):
        """
        $Take:Take$ a $list:list$ of words sharing the same ending, and a $string:string$ as an $parameters:input$.
    Search the last letters of the word for the $string:string$, and replace it with 's'.
        """
        
  subset: first_failure
- __index_level_0__: 544
  problem: mod_end
  entrypoint: mod_end
  assertions: |-
    assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']
    assert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']
    assert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']
  username: student20
  submitted_text: |-
    For each word in the list, remove the last instance of ending that can be found in the word and add a s to the word
  prompt: |-
    def mod_end(words, ending):
        """
        For each $string:word$ in the $list:list$, remove the last instance of ending that can be found in the $string:word$ and $concatenate:add$ a s to the $string:word$
        """
        
  subset: last_success
- __index_level_0__: 545
  problem: mod_end
  entrypoint: mod_end
  assertions: |-
    assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']
    assert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']
    assert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']
  username: student36
  submitted_text: |-
    With the words in the list, replace the part of the word modifying tense with the string contained outside the list
  prompt: |-
    def mod_end(words, ending):
        """
        With the words in the $list:list$, replace the part of the word modifying tense with the $string:string$ contained outside the $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 548
  problem: mod_end
  entrypoint: mod_end
  assertions: |-
    assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']
    assert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']
    assert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']
  username: student36
  submitted_text: replace the characters contained within the string outside of the
    list when it appears in the words in the list with "s"
  prompt: |-
    def mod_end(words, ending):
        """
        replace the characters contained within the $string:string$ outside of the $list:list$ when it appears in the words in the $list:list$ with "s"
        """
        
  subset: last_success
- __index_level_0__: 549
  problem: mod_end
  entrypoint: mod_end
  assertions: |-
    assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']
    assert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']
    assert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']
  username: student38
  submitted_text: Take out ending from words
  prompt: |-
    def mod_end(words, ending):
        """
        Take out ending from words
        """
        
  subset: first_failure
- __index_level_0__: 551
  problem: mod_end
  entrypoint: mod_end
  assertions: |-
    assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']
    assert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']
    assert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']
  username: student38
  submitted_text: Take out ending from each string in words and add 's'
  prompt: |-
    def mod_end(words, ending):
        """
        Take out ending from each $string:string$ in words and $concatenate:add$ 's'
        """
        
  subset: last_success
- __index_level_0__: 552
  problem: mod_end
  entrypoint: mod_end
  assertions: |-
    assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']
    assert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']
    assert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']
  username: student42
  submitted_text: |-
    given a list of strings, and an ending, return a list of strings where each element of the new list is one of the strings from the initial list, but with the designated ending removed and replaces with an "s"
  prompt: |-
    def mod_end(words, ending):
        """
        given a $list:list$ of $strings:strings$, and an ending, $return:return$ a $list:list$ of $strings:strings$ where each element of the new $list:list$ is one of the $strings:strings$ from the initial $list:list$, but with the designated ending removed and replaces with an "s"
        """
        
  subset: first_success
- __index_level_0__: 553
  problem: mod_end
  entrypoint: mod_end
  assertions: |-
    assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']
    assert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']
    assert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']
  username: student43
  submitted_text: |-
    Replaces all part in the inputted first component, which is a list's strings that is specified as the inputted second component with s.
  prompt: |-
    def mod_end(words, ending):
        """
        Replaces all part in the inputted first $parameter:component$, which is a $list:list$'s $strings:strings$ that is specified as the inputted second $parameter:component$ with s.
        """
        
  subset: first_success
- __index_level_0__: 554
  problem: mod_end
  entrypoint: mod_end
  assertions: |-
    assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']
    assert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']
    assert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']
  username: student54
  submitted_text: Find the string stated after the list within each string at each
    index in the list and replace with 's'.
  prompt: |-
    def mod_end(words, ending):
        """
        Find the $string:string$ stated after the $list:list$ within each $string:string$ at each index in the $list:list$ and replace with 's'.
        """
        
  subset: first_failure
- __index_level_0__: 558
  problem: mod_end
  entrypoint: mod_end
  assertions: |-
    assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']
    assert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']
    assert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']
  username: student54
  submitted_text: |-
    Find the string stated after the list within each string at each index in the list and replace with 's'. If the string stated after the list occurs more than one time within a string in the list, replace it with 's' the last time, maintaining the rest of the string. 
  prompt: |-
    def mod_end(words, ending):
        """
        Find the $string:string$ stated after the $list:list$ within each $string:string$ at each index in the $list:list$ and replace with 's'. If the $string:string$ stated after the $list:list$ occurs more than one time within a $string:string$ in the $list:list$, replace it with 's' the last time, maintaining the rest of the $string:string$. 
        """
        
  subset: last_success
- __index_level_0__: 559
  problem: mod_end
  entrypoint: mod_end
  assertions: |-
    assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']
    assert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']
    assert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']
  username: student57
  submitted_text: |-
    when given a list of strings and a string, delete the end of each string in list by the given string and then add character "s" to each string in list
  prompt: |-
    def mod_end(words, ending):
        """
        when given a $list:list$ of $strings:strings$ and a $string:string$, delete the end of each $string:string$ in $list:list$ by the given $string:string$ and then $concatenate:add$ character "s" to each $string:string$ in $list:list$
        """
        
  subset: first_success
- __index_level_0__: 565
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student23
  submitted_text: This function takes in a number and adds one if the number is greater
    than 9. If the number is negative it turns into a positive number. If it is a
    single-digit number it adds the integer zero to the end of the number and returns
    an integer. Then the output is returned with the updated number.
  prompt: |-
    def increaseScore(score):
        """
        This function $takes:takes in$ a number and adds one if the number is greater than 9. If the number is negative it turns into a positive number. If it is a single-digit number it adds the $integer:integer$ zero to the end of the number and $returns:returns$ an $integer:integer$. Then the output is $returned:returned$ with the updated number.
        """
        
  subset: last_success
- __index_level_0__: 566
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student33
  submitted_text: |-
    The function takes an integer as input. If the integer is negative, the function returns it as positive. If the integer only has one digit, the function returns a value of 10. If the integer is positive and two or more digits, the function returns the integer plus one. 
  prompt: |-
    def increaseScore(score):
        """
        The function $takes:takes$ an $integer:integer$ as $parameter:input$. If the $integer:integer$ is negative, the function $returns:returns$ it as positive. If the $integer:integer$ only has one digit, the function $returns:returns$ a value of 10. If the $integer:integer$ is positive and two or more digits, the function $returns:returns$ the $integer:integer$ plus one. 
        """
        
  subset: first_failure
- __index_level_0__: 567
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student33
  submitted_text: |-
    The function takes an integer as input. If the integer is negative, the function returns the absolute value of the integer. If the integer only has one digit, the function returns a value of 10. If the integer is positive and two or more digits, the function returns the integer plus one. 
  prompt: |-
    def increaseScore(score):
        """
        The function $takes:takes$ an $integer:integer$ as $parameter:input$. If the $integer:integer$ is negative, the function $returns:returns$ the absolute value of the $integer:integer$. If the $integer:integer$ only has one digit, the function $returns:returns$ a value of 10. If the $integer:integer$ is positive and two or more digits, the function $returns:returns$ the $integer:integer$ plus one. 
        """
        
  subset: last_success
- __index_level_0__: 568
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student35
  submitted_text: |-
    The purpose of the function is to convert the input score into a number that is greater than or equal to 10. If a negative number is provided, it is to be converted into a positive number and if its value is less than 10, it should become 10. If a positive single digit is provided, it should be converted into 10. If a positive double-digit number is provided, its value is to be increased by 1.
  prompt: |-
    def increaseScore(score):
        """
        The purpose of the function is to convert the $parameter:input$ score into a number that is greater than or equal to 10. If a negative number is provided, it is to be converted into a positive number and if its value is less than 10, it should become 10. If a positive single digit is provided, it should be converted into 10. If a positive double-digit number is provided, its value is to be increased by 1.
        """
        
  subset: first_failure
- __index_level_0__: 570
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student35
  submitted_text: |-
    The purpose of the function is to convert the input score into a number that is greater than or equal to 10. If a negative number is provided, it is to be converted into a positive number and if its value is less than 10, it should become 10. If a positive single digit is provided, it should be converted into 10. If a positive double-digit number (including 10) is given as initial input, its value is to be increased by 1.
  prompt: |-
    def increaseScore(score):
        """
        The purpose of the function is to convert the $parameter:input$ score into a number that is greater than or equal to 10. If a negative number is provided, it is to be converted into a positive number and if its value is less than 10, it should become 10. If a positive single digit is provided, it should be converted into 10. If a positive double-digit number (including 10) is given as initial $parameter:input$, its value is to be increased by 1.
        """
        
  subset: last_failure
- __index_level_0__: 571
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student40
  submitted_text: |-
    if the input is less than 10, the function will return 10. if the input is greater than or equal to 10, the function will add 1 to the input.
  prompt: |-
    def increaseScore(score):
        """
        if the $parameter:input$ is less than 10, the function will $return:return$ 10. if the $parameter:input$ is greater than or equal to 10, the function will add 1 to the $parameter:input$.
        """
        
  subset: first_success
- __index_level_0__: 572
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student44
  submitted_text: |-
    If the input is a negative number, return the absolute value. 
    If the input is less than 10, return 10. 
    If the input is greater than or equal to 10, increase the value by 1. 
  prompt: |-
    def increaseScore(score):
        """
        If the $parameter:input$ is a negative number, $return:return$ the absolute value. 
    If the $parameter:input$ is less than 10, $return:return$ 10. 
    If the $parameter:input$ is greater than or equal to 10, increase the value by 1. 
        """
        
  subset: first_success
- __index_level_0__: 573
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student50
  submitted_text: |-
    The input is an integer. If the number is negative, make it positive. Otherwise, add one.
  prompt: |-
    def increaseScore(score):
        """
        The $parameter:input$ is an $integer:integer$. If the number is negative, make it positive. Otherwise, add one.
        """
        
  subset: first_failure
- __index_level_0__: 574
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student50
  submitted_text: |-
    The input is an integer. If the number is below 10, make it 10. Else, add one to it.
  prompt: |-
    def increaseScore(score):
        """
        The $parameter:input$ is an $integer:integer$. If the number is below 10, make it 10. Else, add one to it.
        """
        
  subset: last_success
- __index_level_0__: 575
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student59
  submitted_text: |-
    takes an integer and returns an integer whose one's place digit is one more than before. if the inputted integer is negative, returns the absolute value of the integer
  prompt: |-
    def increaseScore(score):
        """
        $takes:takes$ an $integer:integer$ and $returns:returns$ an $integer:integer$ whose one's place digit is one more than before. if the inputted $integer:integer$ is negative, $returns:returns$ the absolute value of the $integer:integer$
        """
        
  subset: first_failure
- __index_level_0__: 576
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student59
  submitted_text: |-
    takes an integer as the input. if the inputted integer is negative, returns the absolute value of the integer. if the inputted integer is positive and is greater than 9, returns an integer whose one's place digit is one more than before. for all other case, returns an integer that adds a zero in the one's place
  prompt: |-
    def increaseScore(score):
        """
        $takes:takes$ an $integer:integer$ as the $parameter:input$. if the inputted $integer:integer$ is negative, $returns:returns$ the absolute value of the $integer:integer$. if the inputted $integer:integer$ is positive and is greater than 9, $returns:returns$ an $integer:integer$ whose one's place digit is one more than before. for all other case, $returns:returns$ an $integer:integer$ that adds a zero in the one's place
        """
        
  subset: last_success
- __index_level_0__: 577
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student60
  submitted_text: |-
    The function takes in an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number and returns it. Otherwise, the function just returns score + 1. 
  prompt: |-
    def increaseScore(score):
        """
        The function $takes:takes in$ an $integer:int$ score as $parameter:parameter$. If the score is negative, it $returns:returns$ a positive number. If the score is a single digit, it adds a 0 at the end of the number and $returns:returns$ it. Otherwise, the function just $returns:returns$ score + 1. 
        """
        
  subset: first_failure
- __index_level_0__: 579
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student60
  submitted_text: |-
    The function takes in an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number, casts it back into an int and returns it. Otherwise, the function just returns score + 1. 
  prompt: |-
    def increaseScore(score):
        """
        The function $takes:takes in$ an $integer:int$ score as $parameter:parameter$. If the score is negative, it $returns:returns$ a positive number. If the score is a single digit, it $concatenates:adds$ a 0 at the end of the number, $typecasts:casts$ it back into an $integer:int$ and $returns:returns$ it. Otherwise, the function just $returns:returns$ score + 1. 
        """
        
  subset: last_success
- __index_level_0__: 580
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student63
  submitted_text: |-
    This function takes in a number and outputs a new one, if the number is less than 10, the new number will simply be 10, and if it is 10 or greater, the new number will be the original number plus 1. The new number is outputted. 
  prompt: |-
    def increaseScore(score):
        """
        This function $takes:takes in$ a number and $returns:outputs$ a new one, if the number is less than 10, the new number will simply be 10, and if it is 10 or greater, the new number will be the original number plus 1. The new number is $returned:outputted$. 
        """
        
  subset: first_success
- __index_level_0__: 581
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student64
  submitted_text: |-
    Returns score plus one. If score is less than 10 but greater than zero, returns score multiplied by 10. If score is negative, returns absolute value of score.
  prompt: |-
    def increaseScore(score):
        """
        $Returns:Returns$ score plus one. If score is less than 10 but greater than zero, $returns:returns$ score multiplied by 10. If score is negative, $returns:returns$ absolute value of score.
        """
        
  subset: first_success
- __index_level_0__: 582
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student64
  submitted_text: |-
    Returns score plus one. If score is less than 10 but greater than zero, returns score multiplied by 1. If score is negative, returns absolute value of score.
  prompt: |-
    def increaseScore(score):
        """
        $Returns:Returns$ score plus one. If score is less than 10 but greater than zero, $returns:returns$ score multiplied by 1. If score is negative, $returns:returns$ absolute value of score.
        """
        
  subset: last_failure
- __index_level_0__: 583
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student69
  submitted_text: |
    Enter an integer. if the integer is negative, multiply the integer by -1. if the integer is greater than 9, add 1. if the integer is less than 10, multiply bny 10.
  prompt: |-
    def increaseScore(score):
        """
        $Provide:Enter$ an $integer:integer$. if the $integer:integer$ is negative, multiply the $integer:integer$ by -1. if the $integer:integer$ is greater than 9, add 1. if the $integer:integer$ is less than 10, multiply bny 10.

        """
        
  subset: first_success
- __index_level_0__: 584
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student71
  submitted_text: |-
    Adds one to positive numbers, turns negative numbers into its absolute value
  prompt: |-
    def increaseScore(score):
        """
        Adds one to positive numbers, turns negative numbers into its absolute value
        """
        
  subset: first_failure
- __index_level_0__: 585
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student75
  submitted_text: |-
    def increaseScore(score): takes input '-10' and outputs its positive integer
  prompt: |-
    def increaseScore(score):
        """
        def increaseScore(score): $takes:takes$ $parameter:input$ '-10' and $returns:outputs$ its positive $integer:integer$
        """
        
  subset: first_failure
- __index_level_0__: 586
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student75
  submitted_text: |-
    def increaseScore(score): takes input '-10' and outputs its positive integer
    def increaseScore(score): inputs '1' and adds 9
    def increaseScore(score): adds 1 to each input '10', '15', '20'
  prompt: |-
    def increaseScore(score):
        """
        def increaseScore(score): $takes:takes$ $parameter:input$ '-10' and $returns:outputs$ its positive $integer:integer$
    def increaseScore(score): $takes:inputs$ '1' and adds 9
    def increaseScore(score): adds 1 to each $parameter:input$ '10', '15', '20'
        """
        
  subset: last_success
- __index_level_0__: 587
  problem: increaseScore
  entrypoint: increaseScore
  assertions: |-
    assert increaseScore(-10) == 10
    assert increaseScore(1) == 10
    assert increaseScore(10) == 11
    assert increaseScore(15) == 16
    assert increaseScore(20) == 21
  username: student76
  submitted_text: |-
    Takes the absolute value of an integer if it is negative, multiplies an integer by 10 if it is positive and less than 10 and adds 1 to an integer if it is equal to 10 or greater than 10
  prompt: |-
    def increaseScore(score):
        """
        $Takes:Takes$ the absolute value of an $integer:integer$ if it is negative, multiplies an $integer:integer$ by 10 if it is positive and less than 10 and adds 1 to an $integer:integer$ if it is equal to 10 or greater than 10
        """
        
  subset: first_success
- __index_level_0__: 590
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student1
  submitted_text: Takes the name of a month and returns the season that the month
    falls into.
  prompt: |-
    def getSeason(month):
        """
        $Takes:Takes$ the name of a month and $returns:returns$ the season that the month falls into.
        """
        
  subset: last_failure
- __index_level_0__: 591
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student6
  submitted_text: 'Function takes in an inputted month of the year and outputs the
    season that the month is in '
  prompt: |-
    def getSeason(month):
        """
        Function $takes:takes in$ an inputted month of the year and $returns:outputs$ the season that the month is in 
        """
        
  subset: first_failure
- __index_level_0__: 594
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student6
  submitted_text: |-
    Function takes in the name of an inputted month of the year and outputs the season that the month is in. It returns and prints the correct outputted season, with a return statement after each if, else or elif statement
  prompt: |-
    def getSeason(month):
        """
        Function $takes:takes in$ the name of an inputted month of the year and $returns:outputs$ the season that the month is in. It $returns:returns and prints$ the correct outputted season, with a return statement after each if, else or elif statement
        """
        
  subset: last_failure
- __index_level_0__: 595
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student7
  submitted_text: |
    Takes an inputted month and returns the season for which the month is found in. The first three months of the year are considered to be winter, the next three months are considered to be spring, the next three months are considered summer, and the last three months are considered fall.
  prompt: |-
    def getSeason(month):
        """
        $Takes:Takes$ an $inputted:inputted$ month and $returns:returns$ the season for which the month is found in. The first three months of the year are considered to be winter, the next three months are considered to be spring, the next three months are considered summer, and the last three months are considered fall.

        """
        
  subset: first_failure
- __index_level_0__: 598
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student7
  submitted_text: |
    Takes an inputted month and returns the season for which the month is found in. January, February, and March will return "winter"; April, May, and June will return "spring"; July, August, and September will return "summer"; and the rest will return "fall".
  prompt: |-
    def getSeason(month):
        """
        $Takes:Takes$ an inputted month and $returns:returns$ the season for which the month is found in. January, February, and March will $return:return$ "winter"; April, May, and June will $return:return$ "spring"; July, August, and September will $return:return$ "summer"; and the rest will $return:return$ "fall".

        """
        
  subset: last_success
- __index_level_0__: 599
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student9
  submitted_text: The function determines which season the string belongs to.
  prompt: |-
    def getSeason(month):
        """
        The function determines which season the $string:string$ belongs to.
        """
        
  subset: first_failure
- __index_level_0__: 604
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student9
  submitted_text: |-
    The function determines which season the string belongs to. It makes the first letter of the output lowercase. Instead of returning 'autumn', return 'fall'.
  prompt: |-
    def getSeason(month):
        """
        The function determines which season the $string:string$ belongs to. It makes the first letter of the output lowercase. Instead of $returning:returning$ 'autumn', $return:return$ 'fall'.
        """
        
  subset: last_success
- __index_level_0__: 605
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student14
  submitted_text: |-
    if input is December, January, or February, output is winter. If input is March, April, or May, output is spring. If input is June, July, or August, output is summer. If input is September, October, or November, output is fall.
  prompt: |-
    def getSeason(month):
        """
        if $parameter:input$ is December, January, or February, output is winter. If $parameter:input$ is March, April, or May, output is spring. If $parameter:input$ is June, July, or August, output is summer. If $parameter:input$ is September, October, or November, output is fall.
        """
        
  subset: first_failure
- __index_level_0__: 608
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student14
  submitted_text: |-
    if month == 12, 1, or 2, output is winter. If month == 3, 4, or 5, output is spring. If month == 6, 7, or 8, output is summer. If month == 9, 10, or 11, output is fall. No else statement. 12 == December, 1 == January
  prompt: |-
    def getSeason(month):
        """
        if month == 12, 1, or 2, output is winter. If month == 3, 4, or 5, output is spring. If month == 6, 7, or 8, output is summer. If month == 9, 10, or 11, output is fall. No else statement. 12 == December, 1 == January
        """
        
  subset: last_failure
- __index_level_0__: 609
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student15
  submitted_text: |-
    Has a dictionary matching a season to a month. If the inputted month is in the season, returns that season.
  prompt: |-
    def getSeason(month):
        """
        Has a $dictionary:dictionary$ matching a season to a month. If the inputted month is in the season, $returns:returns$ that season.
        """
        
  subset: first_failure
- __index_level_0__: 613
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student15
  submitted_text: |-
    Has a list of all months in order. Index 0 of the list is '0', and the rest of the indexes corresponding to the correct month. Has a dictionary matching a season to a month. 
    for each key, value in the dictionary, if the inputted month is in the list of values, returns the key that is matched with that value.
  prompt: |-
    def getSeason(month):
        """
        Has a $list:list$ of all months in order. Index 0 of the $list:list$ is '0', and the rest of the indexes corresponding to the correct month. Has a $dictionary:dictionary$ matching a season to a month. 
    for each $key:key$, value in the $dictionary:dictionary$, if the inputted month is in the $list:list$ of values, $returns:returns$ the $key:key$ that is matched with that value.
        """
        
  subset: last_failure
- __index_level_0__: 614
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student24
  submitted_text: |-
    For the given month, return the season that occurs during that month
  prompt: |-
    def getSeason(month):
        """
        For the given month, $return:return$ the season that occurs during that month
        """
        
  subset: first_failure
- __index_level_0__: 616
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student24
  submitted_text: |-
    If the number of a month is in the list, return the season for that month
  prompt: |-
    def getSeason(month):
        """
        If the number of a month is in the $list:list$, $return:return$ the season for that month
        """
        
  subset: last_failure
- __index_level_0__: 617
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student28
  submitted_text: |-
    This function takes one parameter, month. Month represents the months in a year. The code should take seasons associated with that month and print the associated season of that month. 
  prompt: |-
    def getSeason(month):
        """
        This function $takes:takes$ one $parameter:parameter$, month. Month represents the months in a year. The code should take seasons associated with that month and $return:print$ the associated season of that month. 
        """
        
  subset: first_failure
- __index_level_0__: 620
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student28
  submitted_text: |-
    This function takes one parameter, month. Month is a string and Month represents the months in a year. There are seasons associated with each month. Winter, spring, summer, and fall. The code should take seasons associated with that month and print the associated season of that month. The months of December, January, and February should be winter, and so on. 
  prompt: |-
    def getSeason(month):
        """
        This function $takes:takes$ one $parameter:parameter$, month. Month is a $string:string$ and Month represents the months in a year. There are seasons associated with each month. Winter, spring, summer, and fall. The code should $take:take$ seasons associated with that month and $return:print$ the associated season of that month. The months of December, January, and February should be winter, and so on. 
        """
        
  subset: last_failure
- __index_level_0__: 621
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student31
  submitted_text: |-
    Takes a string corresponding to one month of the year, and returns a string indicating what season that month is in.
  prompt: |-
    def getSeason(month):
        """
        $Takes:Takes$ a $string:string$ corresponding to one month of the year, and $returns:returns$ a $string:string$ indicating what season that month is in.
        """
        
  subset: first_failure
- __index_level_0__: 624
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student31
  submitted_text: |-
    Takes a string corresponding to one month of the year, and returns a string indicating what season that month is in: December, January, and February are all in winter, March, April, and May are all in spring, June, July, and August are all in summer, and October, September, and November are all in the season "fall".
  prompt: |-
    def getSeason(month):
        """
        $Takes:Takes$ a $string:string$ corresponding to one month of the year, and $returns:returns$ a $string:string$ indicating what season that month is in: December, January, and February are all in winter, March, April, and May are all in spring, June, July, and August are all in summer, and October, September, and November are all in the season "fall".
        """
        
  subset: last_failure
- __index_level_0__: 625
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student39
  submitted_text: |-
    The goal for this function, getSeason is when provided with a month of the year to return what season that belongs to. 
  prompt: |-
    def getSeason(month):
        """
        The goal for this function, getSeason is when provided with a month of the year to $return:return$ what season that belongs to. 
        """
        
  subset: first_failure
- __index_level_0__: 628
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student39
  submitted_text: |-
    The goal for this function, getSeason is when provided a month of the year to return what season that month belongs to. The month of the year will correspond with a numerical value based on the order of the month during the year. The input should be converted to a numerical value before giving returning the season.
  prompt: |-
    def getSeason(month):
        """
        The goal for this function, getSeason is when provided a month of the year to $return:return$ what season that month belongs to. The month of the year will correspond with a numerical value based on the order of the month during the year. The $parameter:input$ should be converted to a numerical value before giving $returning:returning$ the season.
        """
        
  subset: last_failure
- __index_level_0__: 629
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student45
  submitted_text: |-
    Takes one parameter, a string, which we will call month. Outputs a string which we will call season. If month is "December", "January", or "February", season is 'winter'. If month is "March", "April", or "May", season is 'spring'. If month is "June", "July", or "August", season is 'summer'. If month is "September", "October", or "November", season is "fall".
  prompt: |-
    def getSeason(month):
        """
        $Takes:Takes$ one $parameter:parameter$, a $string:string$, which we will call month. $Returns:Outputs$ a $string:string$ which we will call season. If month is "December", "January", or "February", season is 'winter'. If month is "March", "April", or "May", season is 'spring'. If month is "June", "July", or "August", season is 'summer'. If month is "September", "October", or "November", season is "fall".
        """
        
  subset: first_failure
- __index_level_0__: 632
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student45
  submitted_text: |-
    Takes one parameter, a string, which we will call month. Outputs a string which we will call season. If month is "January", season is 'winter'. If month is "April", season is 'spring'. If month is "August", season is 'summer'. If month is "October", season is 'fall'.
  prompt: |-
    def getSeason(month):
        """
        $Takes:Takes$ one $parameter:parameter$, a $string:string$, which we will call month. $Returns:Outputs$ a $string:string$ which we will call season. If month is "January", season is 'winter'. If month is "April", season is 'spring'. If month is "August", season is 'summer'. If month is "October", season is 'fall'.
        """
        
  subset: last_success
- __index_level_0__: 633
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student46
  submitted_text: |-
    The functions take in a string, representing a month, then outputs the season commonly associated with that month.
  prompt: |-
    def getSeason(month):
        """
        The functions $take:take in$ a $string:string$, representing a month, then $returns:outputs$ the season commonly associated with that month.
        """
        
  subset: first_failure
- __index_level_0__: 636
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student46
  submitted_text: |-
    The functions take in a string, representing a month in with the first letter being upper case, then outputs the season commonly associated with that month, in lower case.
  prompt: |-
    def getSeason(month):
        """
        The functions $take:take in$ a $string:string$, representing a month in with the first letter being upper case, then $returns:outputs$ the season commonly associated with that month, in lower case.
        """
        
  subset: last_success
- __index_level_0__: 637
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student47
  submitted_text: |-
    "January, February, March is winter, April, May, June is spring, July, August, September is summer, October, November, December is fall, determine the class of the input"
  prompt: |-
    def getSeason(month):
        """
        "January, February, March is winter, April, May, June is spring, July, August, September is summer, October, November, December is fall, determine the class of the $parameter:input$"
        """
        
  subset: first_failure
- __index_level_0__: 638
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student47
  submitted_text: |-
    "January, February, March is winter, April, May, June is spring, July, August, September is summer, October, November, December is fall, determine the class of the input, produce an all lower case string"
  prompt: |-
    def getSeason(month):
        """
        "January, February, March is winter, April, May, June is spring, July, August, September is summer, October, November, December is fall, determine the class of the $parameter:input$, $return:produce$ an all lower case $string:string$"
        """
        
  subset: last_success
- __index_level_0__: 639
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student53
  submitted_text: |-
    if month == 'January' return 'winter', or == 'April' return 'spring' or 'August' return 'summer' or 'October' return 'fall'
  prompt: |-
    def getSeason(month):
        """
        if month == 'January' $return:return$ 'winter', or == 'April' $return:return$ 'spring' or 'August' $return:return$ 'summer' or 'October' $return:return$ 'fall'
        """
        
  subset: first_success
- __index_level_0__: 640
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student55
  submitted_text: Write a function that gets the name of the month and returns the
    season that the majority of the month is represented by in the north hemisphere.
  prompt: |-
    def getSeason(month):
        """
        Write a function that $takes:gets$ the name of the month and $returns:returns$ the season that the majority of the month is represented by in the north hemisphere.
        """
        
  subset: first_failure
- __index_level_0__: 644
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student55
  submitted_text: |-
    Write a function that gets the name of the month and returns the season that the majority of the month is represented by in the north hemisphere. The first letter of the season should be in lowercase. For the case of autumn, provide the return statement as 'fall'.
  prompt: |-
    def getSeason(month):
        """
        Write a function that $takes:gets$ the name of the month and $returns:returns$ the season that the majority of the month is represented by in the north hemisphere. The first letter of the season should be in lowercase. For the case of autumn, $return:provide$ the return statement as 'fall'.
        """
        
  subset: last_success
- __index_level_0__: 645
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student58
  submitted_text: |-
    If string is 'June' 'July' or 'August', return 'summer'. If string is 'September' 'October' or 'November', return 'fall'. If string is 'December' 'January' or 'February' return 'winter'. If string is 'March' 'April' or 'May', return 'spring'.
  prompt: |-
    def getSeason(month):
        """
        If $string:string$ is 'June' 'July' or 'August', $return:return$ 'summer'. If $string:string$ is 'September' 'October' or 'November', $return:return$ 'fall'. If $string:string$ is 'December' 'January' or 'February' $return:return$ 'winter'. If $string:string$ is 'March' 'April' or 'May', $return:return$ 'spring'.
        """
        
  subset: first_success
- __index_level_0__: 646
  problem: getSeason
  entrypoint: getSeason
  assertions: |-
    assert getSeason('January') == 'winter'
    assert getSeason('April') == 'spring'
    assert getSeason('August') == 'summer'
    assert getSeason('October') == 'fall'
  username: student65
  submitted_text: This function inputs the string of a month and returns the name
    of the season it is in (in the northern hemisphere)
  prompt: |-
    def getSeason(month):
        """
        This function $takes:inputs$ the $string:string$ of a month and $returns:returns$ the name of the season it is in (in the northern hemisphere)
        """
        
  subset: first_failure
- __index_level_0__: 654
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student2
  submitted_text: 'This function prints a list of vowels '
  prompt: |-
    def assessVowels(s):
        """
        This function $returns:prints$ a $list:list$ of vowels 
        """
        
  subset: last_failure
- __index_level_0__: 655
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student5
  submitted_text: 'the function assessVowels will take input of a string and return
    a list of all the vowels in that string in the case they were originally written. '
  prompt: |-
    def assessVowels(s):
        """
        the function assessVowels will $take:take input of$ a $string:string$ and $return:return$ a $list:list$ of all the vowels in that $string:string$ in the case they were originally written. 
        """
        
  subset: first_failure
- __index_level_0__: 657
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student5
  submitted_text: 'the function assessVowels will take input of a string and return
    a list of all the vowels in that string. include both capital and lower case letters. '
  prompt: |-
    def assessVowels(s):
        """
        the function assessVowels will $take:take input of$ a $string:string$ and $return:return$ a $list:list$ of all the vowels in that $string:string$. include both capital and lower case letters. 
        """
        
  subset: last_failure
- __index_level_0__: 658
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student8
  submitted_text: Returns a list of all vowels (capitalized or non-capitalized) from
    the given string.
  prompt: |-
    def assessVowels(s):
        """
        $Returns:Returns$ a $list:list$ of all vowels (capitalized or non-capitalized) from the given $string:string$.
        """
        
  subset: first_success
- __index_level_0__: 659
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student11
  submitted_text: |-
    A function that can help find out all 'a', 'e','i','o','u','A','E','I','O','U' a string has, and form a list with all those letters it has.
  prompt: |-
    def assessVowels(s):
        """
        A function that can help find out all 'a', 'e','i','o','u','A','E','I','O','U' a $string:string$ has, and form a $list:list$ with all those letters it has.
        """
        
  subset: first_success
- __index_level_0__: 660
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student13
  submitted_text: |-
    Given a string of characters, the function extracts the vowels in the string and returns them in a list.
  prompt: |-
    def assessVowels(s):
        """
        Given a $string:string of characters$, the function extracts the vowels in the $string:string$ and $returns:returns$ them in a $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 662
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student13
  submitted_text: |-
    Given a string of characters, the functions should then extract the vowels in the string and returns them in a list, making sure to account for both uppercase and lowercase versions of the vowels. 
  prompt: |-
    def assessVowels(s):
        """
        Given a $string:string of characters$, the functions should then extract the vowels in the $string:string$ and $returns:returns$ them in a $list:list$, making sure to account for both uppercase and lowercase versions of the vowels. 
        """
        
  subset: last_success
- __index_level_0__: 663
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student16
  submitted_text: return a list of strings with all vowels used in the input
  prompt: |-
    def assessVowels(s):
        """
        $return:return$ a $list:list$ of $strings:strings$ with all vowels used in the $parameter:input$
        """
        
  subset: first_failure
- __index_level_0__: 665
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student16
  submitted_text: return a list of strings with all vowels used in the input in the
    same order including capitalizations (repetitions ok)
  prompt: |-
    def assessVowels(s):
        """
        $return:return$ a $list:list$ of $strings:strings$ with all vowels used in the $parameter:input$ in the same order including capitalizations (repetitions ok)
        """
        
  subset: last_success
- __index_level_0__: 666
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student22
  submitted_text: 'takes in a string and returns a list of vowels '
  prompt: |-
    def assessVowels(s):
        """
        $takes:takes in$ a $string:string$ and $returns:returns$ a $list:list$ of vowels 
        """
        
  subset: first_failure
- __index_level_0__: 667
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student22
  submitted_text: |-
    takes in a string and checks for uppercase and lowercase vowels and returns a list of those uppercase and lowercase vowels, if any
  prompt: |-
    def assessVowels(s):
        """
        $takes:takes in$ a $string:string$ and checks for uppercase and lowercase vowels and $returns:returns$ a $list:list$ of those uppercase and lowercase vowels, if any
        """
        
  subset: last_success
- __index_level_0__: 668
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student37
  submitted_text: |-
    Write a function which takes a string as an input and returns a list of each vowel present in the string, case sensitive
  prompt: |-
    def assessVowels(s):
        """
        Write a function which $takes:takes$ a $string:string$ as an $parameter:input$ and $returns:returns$ a $list:list$ of each vowel present in the $string:string$, case sensitive
        """
        
  subset: first_failure
- __index_level_0__: 669
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student37
  submitted_text: |-
    Write a function which takes a string as an input and returns a list of each vowel present in the string, where capitalized vowels are present in the return list as capitalized and lower case vowels as lower case
  prompt: |-
    def assessVowels(s):
        """
        Write a function which $takes:takes$ a $string:string$ as an $parameter:input$ and $returns:returns$ a $list:list$ of each vowel present in the $string:string$, where capitalized vowels are present in the return $list:list$ as capitalized and lower case vowels as lower case
        """
        
  subset: last_success
- __index_level_0__: 670
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student61
  submitted_text: function returns all vowels in strings regardless of capitalization
  prompt: |-
    def assessVowels(s):
        """
        function $returns:returns$ all vowels in $strings:strings$ regardless of capitalization
        """
        
  subset: first_failure
- __index_level_0__: 671
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student72
  submitted_text: Return a list of the vowels in the input.
  prompt: |-
    def assessVowels(s):
        """
        $Return:Return$ a $list:list$ of the vowels in the $input:input$.
        """
        
  subset: first_failure
- __index_level_0__: 672
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student72
  submitted_text: Return a list of both the uppercase and lowercase vowels in the
    input.
  prompt: |-
    def assessVowels(s):
        """
        $Return:Return$ a $list:list$ of both the uppercase and lowercase vowels in the $parameter:input$.
        """
        
  subset: last_success
- __index_level_0__: 673
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student73
  submitted_text: |-
    if the input string has any of these letters [a, A, e, E, i, I, o, O, u, U], extract them from the string and make a list. if the input doesn't consist of these letters, make an empty list
  prompt: |-
    def assessVowels(s):
        """
        if the input $string:string$ has any of these letters [a, A, e, E, i, I, o, O, u, U], extract them from the $string:string$ and make a $list:list$. if the $parameter:input$ doesn't consist of these letters, make an empty $list:list$
        """
        
  subset: first_success
- __index_level_0__: 674
  problem: assessVowels
  entrypoint: assessVowels
  assertions: |-
    assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']
    assert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']
    assert assessVowels('cAbbAge') == ['A', 'A', 'e']
    assert assessVowels('') == []
  username: student74
  submitted_text: puts all the vowels of a string in a list
  prompt: |-
    def assessVowels(s):
        """
        puts all the vowels of a $string:string$ in a $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 677
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student33
  submitted_text: |-
    The function takes in 5 lists consisting of 5 strings and one additional string "target". If any of the lists consists of all 5 strings with the same content as "target," the function returns True. Otherwise, the function returns False. 
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        The function $takes:takes in$ 5 $lists:lists$ consisting of 5 $strings:strings$ and one additional $string:string$ "target". If any of the $lists:lists$ consists of all 5 $strings:strings$ with the same content as "target," the function $returns:returns$ True. Otherwise, the function $returns:returns$ False. 
        """
        
  subset: first_success
- __index_level_0__: 678
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student35
  submitted_text: |-
    'board' is a list of lists with string values. 'letter' is a string value. The function checks if there is any list inside the list of lists in which all the values are the exact same as that of 'letter'. If so, it returns True otherwise False.
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        'board' is a $list:list$ of $lists:lists$ with $string:string$ values. 'letter' is a $string:string$ value. The function checks if there is any $list:list$ inside the $list:list$ of $lists:lists$ in which all the values are the exact same as that of 'letter'. If so, it $returns:returns$ True otherwise False.
        """
        
  subset: first_success
- __index_level_0__: 679
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student35
  submitted_text: |-
    'board' is a list of lists with string values. 'letter' is a string value. The function checks if there is any list inside the list of lists in which all the values match with letter. If so, it returns True otherwise False.
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        'board' is a $list:list$ of $lists:lists$ with $string:string$ values. 'letter' is a $string:string$ value. The function checks if there is any $list:list$ inside the $list:list$ of $lists:lists$ in which all the values match with letter. If so, it $returns:returns$ True otherwise False.
        """
        
  subset: last_success
- __index_level_0__: 680
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student40
  submitted_text: |-
    if one of the lists within the list contains strings that all contain the same value, the function will return 'True'. otherwise, the function will return 'False'. 
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        if one of the $lists:lists$ within the $list:list$ contains $strings:strings$ that all contain the same value, the function will $return:return$ 'True'. otherwise, the function will $return:return$ 'False'. 
        """
        
  subset: first_success
- __index_level_0__: 681
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student44
  submitted_text: Return true if there is an index that has the same value for all
    the arrays in the array or there is an array with all the same values.
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        $Return:Return$ true if there is an index that has the same value for all the $lists:arrays$ in the $list:array$ or there is an $list:array$ with all the same values.
        """
        
  subset: first_failure
- __index_level_0__: 683
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student44
  submitted_text: Return true if there is an index that contains the same value in
    all the arrays in the array or there is an array with all the same values.
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        $Return:Return$ true if there is an index that contains the same value in all the $lists:arrays$ in the $list:array$ or there is an $list:array$ with all the same values.
        """
        
  subset: last_failure
- __index_level_0__: 684
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student50
  submitted_text: |-
    If all elements of a row or all elements of a column in a 2D array are the same, return true. Else, return false.
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        If all elements of a row or all elements of a column in a 2D $list:array$ are the same, $return:return$ true. Else, $return:return$ false.
        """
        
  subset: first_failure
- __index_level_0__: 689
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student50
  submitted_text: |-
    Iterate through a 2D array. If a row or column of an array contain all the same element, return true. For example, if the row length is 5, check all 5 elements in the list. Else, return false.
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        $Loop:Iterate through$ a 2D $list:array$. If a row or column of an $list:array$ contain all the same element, $return:return$ true. For example, if the row length is 5, check all 5 elements in the $list:list$. Else, $return:return$ false.
        """
        
  subset: last_failure
- __index_level_0__: 690
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student59
  submitted_text: |-
    takes a list of lists and a string as inputs. if the string appears in the same index in each list or appears for every value in a list, returns True. for all other cases, returns False
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        $takes:takes$ a $list:list$ of $lists:lists$ and a $string:string$ as $parameter:inputs$. if the $string:string$ appears in the same index in each $list:list$ or appears for every value in a $list:list$, $returns:returns$ True. for all other cases, $returns:returns$ False
        """
        
  subset: first_success
- __index_level_0__: 691
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student60
  submitted_text: |-
    This function takes in a 2d list as its parameter. Each list in the 2d list contains either '', 'X', 'O'. If the 'X' or the 'O' next to each other 5 times, True is returned. Otherwise False is returned. It's similar to game of 4 in a row. 
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        This function $takes:takes in$ a 2d $list:list$ as its $parameter:parameter$. Each $list:list$ in the 2d $list:list$ contains either '', 'X', 'O'. If the 'X' or the 'O' next to each other 5 times, True is $returned:returned$. Otherwise False is $returned:returned$. It's similar to game of 4 in a row. 
        """
        
  subset: first_success
- __index_level_0__: 692
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student63
  submitted_text: |-
    The function will take in a list of lists and a character and will output a True or False. If the list has any lists in it for which all of the entries are the inputted letter, the function return True, if there are no lists in the list for which every entry is the inputted letter, the function returns False.
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        The function will $take:take in$ a $list:list$ of $lists:lists$ and a character and will $return:output$ a True or False. If the $list:list$ has any $lists:lists$ in it for which all of the entries are the inputted letter, the function $return:return$ True, if there are no $lists:lists$ in the $list:list$ for which every entry is the inputted letter, the function $returns:returns$ False.
        """
        
  subset: first_success
- __index_level_0__: 693
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student64
  submitted_text: |-
    In list of lists, if every character in list is equal to letter, return true. Otherwise, return false.
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        In $list:list$ of $lists:lists$, if every $string:character$ in $list:list$ is equal to letter, $return:return$ true. Otherwise, $return:return$ false.
        """
        
  subset: first_failure
- __index_level_0__: 697
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student64
  submitted_text: |-
    In list of lists, if each character in list is equal to letter, return true. Otherwise, return false.
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        In $list:list$ of $lists:lists$, if each $string:character$ in $list:list$ is equal to letter, $return:return$ true. Otherwise, $return:return$ false.
        """
        
  subset: last_failure
- __index_level_0__: 698
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student69
  submitted_text: |-
    Enter a list of lists of strings. if any list has five consecutive 'X' values, return true. else return false
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        $Provide:Enter$ a $list:list$ of $lists:lists$ of $strings:strings$. if any $list:list$ has five consecutive 'X' values, $return:return$ true. else $return:return$ false
        """
        
  subset: first_success
- __index_level_0__: 699
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student69
  submitted_text: |-
    Enter a list where the 0th index is a list of lists of strings, and the 1st index is a character. if any list in the 0th index has five consecutive values of the character entered in the 1st index, return true. else return false
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        $Provide:Enter$ a $list:list$ where the 0th index is a $list:list$ of $lists:lists$ of $strings:strings$, and the 1st index is a $string:character$. if any $list:list$ in the 0th index has five consecutive values of the $string:character$ $provided:entered$ in the 1st index, $return:return$ true. else $return:return$ false
        """
        
  subset: last_success
- __index_level_0__: 700
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student71
  submitted_text: |-
    Iterate through each row and check if all spaces have been filled by 1 same letter. If all spaces have been filled by 1 same letter, then output is true.
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        $Loop:Iterate through$ each row and check if all spaces have been filled by 1 same letter. If all spaces have been filled by 1 same letter, then output is true.
        """
        
  subset: first_failure
- __index_level_0__: 701
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student75
  submitted_text: |+
    def hasHorizontalWin(board, letter): takes inputs
    [['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X',
    [['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X',
    [['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X'
    if a row is all x across horizontally print true, if not print false

  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        def hasHorizontalWin(board, letter): $takes:takes$ $parameters:inputs$
    [['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X',
    [['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X',
    [['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X'
    if a row is all x across horizontally $return:print$ true, if not $return:print$ false


        """
        
  subset: first_success
- __index_level_0__: 702
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student76
  submitted_text: Looks through a list of lists and if one list contains only 'X'
    it returns True if not it returns False
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        $Loops through:Looks through$ a $list:list$ of $lists:lists$ and if one $list:list$ contains only 'X' it $returns:returns$ True if not it $returns:returns$ False
        """
        
  subset: first_failure
- __index_level_0__: 703
  problem: hasHorizontalWin
  entrypoint: hasHorizontalWin
  assertions: |-
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'X'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == True
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'X', 'X', 'O'],
    ['X', 'X', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
    assert hasHorizontalWin([['', '',  'X', 'O', 'X'],
    ['X', 'X', 'O', 'X', 'O'],
    ['X', 'O', 'X', 'O', 'O'],
    ['',  '',  '',  'X', 'O'],
    ['',  '',  '',  '',  'O']],
    'X') == False
  username: student76
  submitted_text: Looks through a dictionary and if one list inside the dictionary
    contains only 'X' it returns True if not it returns False
  prompt: |-
    def hasHorizontalWin(board, letter):
        """
        $Loops through:Looks through$ a $dictionary:dictionary$ and if one $list:list$ inside the $dictionary:dictionary$ contains only 'X' it $returns:returns$ True if not it $returns:returns$ False
        """
        
  subset: last_failure
- __index_level_0__: 706
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student27
  submitted_text: |-
    Calculate the total value of a list of ice cream. The input will be a list of strings, and each string contains three parts separated by "\t". Calculate the sum of the values of each ice cream by summing up the last part of each string. The value can be integers or floats.
  prompt: |-
    def readingIceCream(lines):
        """
        Calculate the total value of a $list:list$ of ice cream. The $parameter:input$ will be a $list:list$ of $strings:strings$, and each $string:string$ contains three parts separated by "\t". Calculate the sum of the values of each ice cream by summing up the last part of each $string:string$. The value can be $integers:integers$ or floats.
        """
        
  subset: last_success
- __index_level_0__: 707
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student29
  submitted_text: |
    For each list entry, parse through the string until after the 2nd "\" character. Then return the integer following the "t" character. Keep track of the integer for each entry and add them all together, returning the sum for each list
  prompt: |-
    def readingIceCream(lines):
        """
        For each $list:list$ entry, parse through the $string:string$ until after the 2nd "\" character. Then $return:return$ the $integer:integer$ following the "t" character. Keep track of the $integer:integer$ for each entry and add them all together, $returning:returning$ the sum for each $list:list$

        """
        
  subset: first_failure
- __index_level_0__: 714
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student29
  submitted_text: |
    For each list entry, start at the end of the corresponding string, parse backwards until you reach the first "t" character. Isolate the string from the "t" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.
  prompt: |-
    def readingIceCream(lines):
        """
        For each $list:list$ entry, start at the end of the corresponding $string:string$, parse backwards until you reach the first "t" character. Isolate the $string:string$ from the "t" character until the end of the entry. $Typecast:Convert$ that $string:string$ to a float, then add all of the floats for each entry together and $return:return$ the total.

        """
        
  subset: last_failure
- __index_level_0__: 715
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student32
  submitted_text: "Returns the sum of the numbers in each element in the array following\
    \ the last instance of '/t' in the element. "
  prompt: |-
    def readingIceCream(lines):
        """
        $Returns:Returns$ the sum of the numbers in each element in the $list:array$ following the last instance of '/t' in the element. 
        """
        
  subset: first_failure
- __index_level_0__: 717
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student32
  submitted_text: |
    Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. the sum should include numbers with decimals
  prompt: |-
    def readingIceCream(lines):
        """
        $Returns:Returns$ the sum of the numbers in each element in the $list:array$ following the last instance of '/t' in the element. the sum should include numbers with decimals

        """
        
  subset: last_success
- __index_level_0__: 718
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student34
  submitted_text: |-
    Convert all that appears after the last t of each object in the list into a float, and then find the sum of the floats
  prompt: |-
    def readingIceCream(lines):
        """
        $Typecast:Convert$ all that appears after the last t of each object in the $list:list$ into a float, and then find the sum of the floats
        """
        
  subset: first_failure
- __index_level_0__: 722
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student34
  submitted_text: |-
    Convert all that appears after the final "t" of each object in the list into a float, make a new list of those floats, and find the sum of that list
  prompt: |-
    def readingIceCream(lines):
        """
        $Typecast:Convert$ all that appears after the final "t" of each object in the $list:list$ into a float, make a new $list:list$ of those floats, and find the sum of that $list:list$
        """
        
  subset: last_failure
- __index_level_0__: 723
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student49
  submitted_text: |-
    Given a list of strings remove anything past the last t in the string, type cast to an integer and then add them together. 
  prompt: |-
    def readingIceCream(lines):
        """
        Given a $list:list$ of $strings:strings$ remove anything past the last t in the $string:string$, $typecast:type cast$ to an $integer:integer$ and then add them together. 
        """
        
  subset: first_failure
- __index_level_0__: 727
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student49
  submitted_text: |-
    Given a list of strings remove anything past the last t in the string, type cast the value to float. Move to the next string in the list, if exists and repeat. Once the end at the end of the list and add all values that were cast to float together.
  prompt: |-
    def readingIceCream(lines):
        """
        Given a $list:list$ of $strings:strings$ remove anything past the last t in the $string:string$, $typecast:type cast$ the value to float. Move to the next $string:string$ in the $list:list$, if exists and repeat. Once the end at the end of the $list:list$ and add all values that were $typecast:cast$ to float together.
        """
        
  subset: last_failure
- __index_level_0__: 729
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student62
  submitted_text: |-
    for each element in list, adds number directly after '\t' to count, returns sum
  prompt: |-
    def readingIceCream(lines):
        """
        for each element in $list:list$, adds number directly after '\t' to count, $returns:returns$ sum
        """
        
  subset: first_failure
- __index_level_0__: 732
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student62
  submitted_text: |-
    for each element in list, adds float directly after the second '\t' to count, returns sum
  prompt: |-
    def readingIceCream(lines):
        """
        for each element in $list:list$, adds float directly after the second '\t' to count, $returns:returns$ sum
        """
        
  subset: last_success
- __index_level_0__: 733
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student66
  submitted_text: return the sum of the float in each item in the array list
  prompt: |-
    def readingIceCream(lines):
        """
        $return:return$ the sum of the float in each item in the $list:array list$
        """
        
  subset: first_failure
- __index_level_0__: 735
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student66
  submitted_text: take the float at the end of each item in the array list and sum
    all of the values return the sum
  prompt: |-
    def readingIceCream(lines):
        """
        $take:take$ the float at the end of each item in the $list:array list$ and sum all of the values $return:return$ the sum
        """
        
  subset: last_success
- __index_level_0__: 736
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student67
  submitted_text: Returns the number after t.
  prompt: |-
    def readingIceCream(lines):
        """
        $Returns:Returns$ the number after t.
        """
        
  subset: first_failure
- __index_level_0__: 740
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student68
  submitted_text: |-
    given an array of strings, parse each string by '\t' and grab the last value that should be a number and add it to a count value. return the count value
  prompt: |-
    def readingIceCream(lines):
        """
        given an $list:array$ of $strings:strings$, parse each $string:string$ by '\t' and grab the last value that should be a number and add it to a count value. $return:return$ the count value
        """
        
  subset: first_failure
- __index_level_0__: 741
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student68
  submitted_text: |-
    given an array of strings, parse each string by '\t' and grab the last value that should be a double and add it to a count value. return the count value
  prompt: |-
    def readingIceCream(lines):
        """
        given an $list:array$ of $strings:strings$, parse each $string:string$ by '\t' and grab the last value that should be a double and add it to a count value. $return:return$ the count value
        """
        
  subset: last_success
- __index_level_0__: 742
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student70
  submitted_text: |-
    Create a variable for the sum. Go through each string in the input list. After the second time "\t" appears in the string, save the rest of the string and convert it into an integer, then add that integer to the sum. Return the sum at the end of the list.
  prompt: |-
    def readingIceCream(lines):
        """
        Create a variable for the sum. Go through each $string:string$ in the input $list:list$. After the second time "\t" appears in the $string:string$, save the rest of the $string:string$ and $typecast:convert$ it into an $integer:integer$, then add that $integer:integer$ to the sum. $Return:Return$ the sum at the end of the $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 744
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student70
  submitted_text: |-
    Create a variable for the sum. Go through each string in the input list. After the second time "\t" appears in the string, save the rest of the string. If this remaining portion of the string contains ".", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Return the sum at the end of the list.
  prompt: |-
    def readingIceCream(lines):
        """
        Create a variable for the sum. Go through each $string:string$ in the input $list:list$. After the second time "\t" appears in the $string:string$, save the rest of the $string:string$. If this remaining portion of the $string:string$ contains ".", $typecast:convert$ it into a float. Otherwise, $typecast:convert$ it into an $integer:integer$. Add this float or $integer:integer$ to the sum. $Return:Return$ the sum at the end of the $list:list$.
        """
        
  subset: last_success
- __index_level_0__: 745
  problem: readingIceCream
  entrypoint: readingIceCream
  assertions: |-
    assert readingIceCream(["peppermint\tice cream\t3",
    "lemon\tfrozen yogurt\t10",
    "pumpkin\tice cream\t2.5",
    "monster\tice cream\t21"]) == 36.5
    assert readingIceCream(["salty\tfrozen yogurt\t10"]) == 10
    assert readingIceCream(["salty\tfrozen yogurt\t0"]) == 0
  username: student78
  submitted_text: |-
    given a list of strings, split each string on the '\' character. in the new list of 3 strings, take the string in the 3rd position, eliminate the 't' in it, convert it to a float, and add it to running total. output this total
  prompt: |-
    def readingIceCream(lines):
        """
        given a $list:list$ of $strings:strings$, split each $string:string$ on the '\' character. in the new $list:list$ of 3 $strings:strings$, take the $string:string$ in the 3rd position, eliminate the 't' in it, $typecast:convert$ it to a float, and add it to running total. $return:output$ this total
        """
        
  subset: first_failure
- __index_level_0__: 752
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student27
  submitted_text: The input will be a "puzzle" list and a "wordList" list. They consist
    of strings and have equal length. Check if the string in the puzzle list contains
    all the characters of the string in the wordList list. They don't have to be in
    the same order or same length. Return a dictionary with the string as the key
    and the position of the string as the value.
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        The $parameters:input$ will be a "puzzle" $list:list$ and a "wordList" $list:list$. They consist of $strings:strings$ and have equal length. Check if the $string:string$ in the puzzle $list:list$ contains all the $strings:characters$ of the $string:string$ in the wordList $list:list$. They don't have to be in the same order or same length. $Return:Return$ a $dictionary:dictionary$ with the $string:string$ as the $key:key$ and the position of the $string:string$ as the value.
        """
        
  subset: last_failure
- __index_level_0__: 754
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student29
  submitted_text: |-
    For each string within the list, parse the string until the previous letters make up a complete word. Return that word as the key and its index as its value in a dictionary. Else, return an empty dictionary
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        For each $string:string$ within the $list:list$, parse the $string:string$ until the previous letters make up a complete word. $Return:Return$ that word as the $key:key$ and its index as its value in a $dictionary:dictionary$. Else, $return:return$ an empty $dictionary:dictionary$
        """
        
  subset: last_failure
- __index_level_0__: 755
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student32
  submitted_text: |-
    Return a dictionary of each element in wordList that appears in puzzle, paired with its index in puzzle. Only include elements of wordlist that appear in puzzle
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        $Return:Return$ a $dictionary:dictionary$ of each element in wordList that appears in puzzle, paired with its index in puzzle. Only include elements of wordlist that appear in puzzle
        """
        
  subset: first_failure
- __index_level_0__: 758
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student32
  submitted_text: |-
    Return a dictionary of each element in wordList that that can be found with the letters in puzzle (even if the letters in an element of puzzle need to be retordered), paired with its index in puzzle. Only include elements of wordlist that appear in puzzle
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        $Return:Return$ a $dictionary:dictionary$ of each element in wordList that that can be found with the letters in puzzle (even if the letters in an element of puzzle need to be retordered), paired with its index in puzzle. Only include elements of wordlist that appear in puzzle
        """
        
  subset: last_failure
- __index_level_0__: 759
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student34
  submitted_text: |-
    if all characters of an item in wordList are present in an item in puzzle, add items from wordList to a dictionary and assign them to the position value of the item in puzzle in which the characters were found
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        if all characters of an item in wordList are present in an item in puzzle, $insert:add$ items from wordList to a $dictionary:dictionary$ and assign them to the position value of the item in puzzle in which the characters were found
        """
        
  subset: first_success
- __index_level_0__: 760
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student49
  submitted_text: |-
    Given a two lists labeled puzzle and wordList, for each word in the wordList, if the same letters appear in puzzle, create a dictionary with the corresponding word in WordList as the key and the position of where the letters show up in puzzle as the value. 
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        Given a two $lists:lists$ labeled puzzle and wordList, for each $string:word$ in the wordList, if the same letters appear in puzzle, create a $dictionary:dictionary$ with the corresponding $string:word$ in WordList as the $key:key$ and the position of where the letters show up in puzzle as the value. 
        """
        
  subset: first_failure
- __index_level_0__: 763
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student56
  submitted_text: |-
    compares first list to second list and counts if the first list's values' letters match a value in the second list. If they match perfectly, returns 3 as a count
    returns dictionary with keys as the second list, and values as the counts
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        compares first $list:list$ to second $list:list$ and counts if the first $list:list$'s values' letters match a value in the second $list:list$. If they match perfectly, returns 3 as a count
    $returns:returns$ $dictionary:dictionary$ with $keys:keys$ as the second $list:list$, and values as the counts
        """
        
  subset: first_failure
- __index_level_0__: 764
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student62
  submitted_text: |-
    check if any elements in first list include characters from each element in second list. If they do, add to dictionary
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        check if any elements in first $list:list$ include characters from each element in second $list:list$. If they do, $insert:add$ to $dictionary:dictionary$
        """
        
  subset: first_failure
- __index_level_0__: 767
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student66
  submitted_text: 'if the letters of the strings in the first array list are in the
    array list above then create a dictionary where the second array list string is
    the key and the index is the definition. '
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        if the letters of the $strings:strings$ in the first $list:array list$ are in the $list:array list$ above then create a $dictionary:dictionary$ where the second $list:array list$ $string:string$ is the $key:key$ and the index is the definition. 
        """
        
  subset: first_failure
- __index_level_0__: 768
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student66
  submitted_text: if the letters contained in the first string are entirely contained
    in a string in the second array list. then create a dictionary where the that
    string is the key and the index is within that key
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        if the letters contained in the first $string:string$ are entirely contained in a $string:string$ in the second $list:array list$. then create a $dictionary:dictionary$ where the that $string:string$ is the $key:key$ and the index is within that $key:key$
        """
        
  subset: last_failure
- __index_level_0__: 773
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student68
  submitted_text: |-
    given two arrays of strings, for each word in the second array, count how many strings in the first array contain all the characters in the word in the second array. 
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        given two $lists:arrays$ of $strings:strings$, for each $string:word$ in the second $list:array$, count how many $strings:strings$ in the first $list:array$ contain all the characters in the $string:word$ in the second $list:array$. 
        """
        
  subset: first_failure
- __index_level_0__: 774
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student70
  submitted_text: |-
    create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        create an empty $dictionary:dictionary$. $loop through:iterate through$ each $string:string$ of the input $list:list$ puzzle. if any of the $strings:strings$ in puzzle contain a $string:string$ from wordList, $insert:add$ that $string:string$ from wordList as a $key:key$ to the $dictionary:dictionary$ with the index of the $string:string$ from puzzle where it appeared as the value. $return:return$ the $dictionary:dictionary$.
        """
        
  subset: first_failure
- __index_level_0__: 777
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student70
  submitted_text: |-
    create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain the same letters in any order as a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        create an empty $dictionary:dictionary$. $loop through:iterate through$ each $string:string$ of the input $list:list$ puzzle. if any of the $strings:strings$ in puzzle contain the same letters in any order as a $string:string$ from wordList, $insert:add$ that $string:string$ from wordList as a $key:key$ to the $dictionary:dictionary$ with the index of the $string:string$ from puzzle where it appeared as the value. $return:return$ the $dictionary:dictionary$.
        """
        
  subset: last_failure
- __index_level_0__: 778
  problem: findHorizontals
  entrypoint: findHorizontals
  assertions: |-
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["cat","dog","tea","party"]) == {"cat":0, "tea":2}
    assert findHorizontals(["ztac","zzzz","teaz","part","zzzz"],
    ["to","apple","ape","party"]) == {}
    assert findHorizontals(["as", "be", "sa", "it"],
    ["it"]) == {'it': 3}
  username: student78
  submitted_text: |-
    given that puzzle is a list of strings, check if the letters of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle
  prompt: |-
    def findHorizontals(puzzle,wordList):
        """
        given that puzzle is a $list:list$ of $strings:strings$, check if the letters of each $string:string$ in wordList is contained in any of the $strings:strings$ in puzzle. if the $string:string$ in wordList is in any of the $strings:strings$ in puzzle, $insert:add$ it to a $dictionary:dictionary$ with the $key:key$ as the $string:sting$ in wordList and the output as the position of the $string:string$ in puzzle
        """
        
  subset: first_failure
- __index_level_0__: 790
  problem: partialWordle
  entrypoint: partialWordle
  assertions: |-
    assert partialWordle(["zzzz","bbbb","lyre","part","apes"],
    'pare') == [0,0,4,6,3]
    assert partialWordle(["aaaa","wall","woah","deal","howl"],
    "word") == [0,2,4,1,3]
    assert partialWordle(["real","hill","ream","meal","curl"],
    "roll") == [4,4,2,2,3]
  username: student9
  submitted_text: |-
    The function shows how many characters, including ''', each string within the list has in common with the characters in the string outside the list.
  prompt: |-
    def partialWordle(guessList,hiddenWord):
        """
        The function shows how many characters, including ''', each $string:string$ within the $list:list$ has in common with the characters in the $string:string$ outside the $list:list$.
        """
        
  subset: last_failure
- __index_level_0__: 791
  problem: partialWordle
  entrypoint: partialWordle
  assertions: |-
    assert partialWordle(["zzzz","bbbb","lyre","part","apes"],
    'pare') == [0,0,4,6,3]
    assert partialWordle(["aaaa","wall","woah","deal","howl"],
    "word") == [0,2,4,1,3]
    assert partialWordle(["real","hill","ream","meal","curl"],
    "roll") == [4,4,2,2,3]
  username: student14
  submitted_text: |-
    if input has any part of hidden word, output how many characters they have in similar
  prompt: |-
    def partialWordle(guessList,hiddenWord):
        """
        if $parameter:input$ has any part of hidden word, $return:output$ how many characters they have in similar
        """
        
  subset: first_failure
- __index_level_0__: 793
  problem: partialWordle
  entrypoint: partialWordle
  assertions: |-
    assert partialWordle(["zzzz","bbbb","lyre","part","apes"],
    'pare') == [0,0,4,6,3]
    assert partialWordle(["aaaa","wall","woah","deal","howl"],
    "word") == [0,2,4,1,3]
    assert partialWordle(["real","hill","ream","meal","curl"],
    "roll") == [4,4,2,2,3]
  username: student15
  submitted_text: |-
    For each word in the guessList, if it has a letter in the hiddenWord and the letter is in the correct spot, add 2. If it has a letter in the hiddenWord and the letter is not in the correct spot, add 1. Return a list of the total point scores for each word in guessList.
  prompt: |-
    def partialWordle(guessList,hiddenWord):
        """
        For each $string:word$ in the guessList, if it has a letter in the hiddenWord and the letter is in the correct spot, add 2. If it has a letter in the hiddenWord and the letter is not in the correct spot, add 1. $Return:Return$ a $list:list$ of the total point scores for each $string:word$ in guessList.
        """
        
  subset: first_failure
- __index_level_0__: 794
  problem: partialWordle
  entrypoint: partialWordle
  assertions: |-
    assert partialWordle(["zzzz","bbbb","lyre","part","apes"],
    'pare') == [0,0,4,6,3]
    assert partialWordle(["aaaa","wall","woah","deal","howl"],
    "word") == [0,2,4,1,3]
    assert partialWordle(["real","hill","ream","meal","curl"],
    "roll") == [4,4,2,2,3]
  username: student24
  submitted_text: |-
    For each word in guessList, if the character of the hiddenWord[i] matches the same position and are the same word, add 2. If the word in guessList and the hiddenWord have the same characters but not in the same position, add 1. Return a list with the score for each word in a list. 
  prompt: |-
    def partialWordle(guessList,hiddenWord):
        """
        For each $string:word$ in guessList, if the $string:character$ of the hiddenWord[i] matches the same position and are the same $string:word$, add 2. If the $string:word$ in guessList and the hiddenWord have the same characters but not in the same position, add 1. $Return:Return$ a $list:list$ with the score for each $string:word$ in a $list:list$. 
        """
        
  subset: first_success
- __index_level_0__: 796
  problem: partialWordle
  entrypoint: partialWordle
  assertions: |-
    assert partialWordle(["zzzz","bbbb","lyre","part","apes"],
    'pare') == [0,0,4,6,3]
    assert partialWordle(["aaaa","wall","woah","deal","howl"],
    "word") == [0,2,4,1,3]
    assert partialWordle(["real","hill","ream","meal","curl"],
    "roll") == [4,4,2,2,3]
  username: student31
  submitted_text: |-
    Takes a list of strings and a single string called the answer. Then, for each string in the list of strings, compares it to the answer and creates an integer score for that string. For every time the string in the list of strings has the same letter in the same place as the answer, adds two to the score. For every time the string in the list of strings has the same letter in a different place as the answer, adds one to the score. Then, adds that score to a list and starts a new score at 0 for the next string in the list of strings. Continue until all the strings in the list of strings have been compared with the answer, and then return the list of scores. 
  prompt: |-
    def partialWordle(guessList,hiddenWord):
        """
        $Takes:Takes$ a $list:list$ of $strings:strings$ and a single $string:string$ called the answer. Then, for each $string:string$ in the $list:list$ of $strings:strings$, compares it to the answer and creates an $integer:integer$ score for that $string:string$. For every time the $string:string$ in the $list:list$ of $strings:strings$ has the same letter in the same place as the answer, adds two to the score. For every time the $string:string$ in the $list:list$ of $strings:strings$ has the same letter in a different place as the answer, adds one to the score. Then, $inserts:adds$ that score to a $list:list$ and starts a new score at 0 for the next $string:string$ in the $list:list$ of $strings:strings$. Continue until all the $strings:strings$ in the $list:list$ of $strings:strings$ have been compared with the answer, and then $return:return$ the $list:list$ of scores. 
        """
        
  subset: first_success
- __index_level_0__: 798
  problem: partialWordle
  entrypoint: partialWordle
  assertions: |-
    assert partialWordle(["zzzz","bbbb","lyre","part","apes"],
    'pare') == [0,0,4,6,3]
    assert partialWordle(["aaaa","wall","woah","deal","howl"],
    "word") == [0,2,4,1,3]
    assert partialWordle(["real","hill","ream","meal","curl"],
    "roll") == [4,4,2,2,3]
  username: student45
  submitted_text: |-
    Takes two parameters: a list of strings which we will call guessList and a string which we will call hiddenWord. Makes a new list called scores. For each string in guessList, we will compare each character to the characters in hiddenWord. Make a variable called score. If the letter at each index in the string is the same as the letter at that index in hiddenWord, add 2 to score. If the letter is the same as a letter at a different index in hiddenWord, add 1 to score. Add score to scores. Return scores. 
  prompt: |-
    def partialWordle(guessList,hiddenWord):
        """
        $Takes:Takes$ two $parameters:parameters$: a $list:list$ of $strings:strings$ which we will call guessList and a $string:string$ which we will call hiddenWord. Makes a new $list:list$ called scores. For each $string:string$ in guessList, we will compare each character to the characters in hiddenWord. Make a variable called score. If the letter at each index in the $string:string$ is the same as the letter at that index in hiddenWord, add 2 to score. If the letter is the same as a letter at a different index in hiddenWord, add 1 to score. Add score to scores. $Return:Return$ scores. 
        """
        
  subset: first_success
- __index_level_0__: 802
  problem: partialWordle
  entrypoint: partialWordle
  assertions: |-
    assert partialWordle(["zzzz","bbbb","lyre","part","apes"],
    'pare') == [0,0,4,6,3]
    assert partialWordle(["aaaa","wall","woah","deal","howl"],
    "word") == [0,2,4,1,3]
    assert partialWordle(["real","hill","ream","meal","curl"],
    "roll") == [4,4,2,2,3]
  username: student53
  submitted_text: |-
    nested loop through the guessList and if the string exists in hiddenWord in the the same index add 2, elseif it exists and not in the same index add 1. 
  prompt: |-
    def partialWordle(guessList,hiddenWord):
        """
        $loop through:nested loop through$ the guessList and if the $string:string$ exists in hiddenWord in the the same index add 2, elseif it exists and not in the same index add 1. 
        """
        
  subset: first_failure
- __index_level_0__: 807
  problem: partialWordle
  entrypoint: partialWordle
  assertions: |-
    assert partialWordle(["zzzz","bbbb","lyre","part","apes"],
    'pare') == [0,0,4,6,3]
    assert partialWordle(["aaaa","wall","woah","deal","howl"],
    "word") == [0,2,4,1,3]
    assert partialWordle(["real","hill","ream","meal","curl"],
    "roll") == [4,4,2,2,3]
  username: student55
  submitted_text: |-
    Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function returns a list of the total points from each word in the list.
  prompt: |-
    def partialWordle(guessList,hiddenWord):
        """
        Write a function that $takes:gets$ a $list:list$ of $strings:strings$ and the hidden word (a $string:string$ separated by a comma). From the $list:list$ of $strings:strings$, compare each letter from the $strings:strings$ in the $list:list$ with the hidden word. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function $returns:returns$ a $list:list$ of the total points from each $string:word$ in the $list:list$.
        """
        
  subset: last_success
- __index_level_0__: 808
  problem: partialWordle
  entrypoint: partialWordle
  assertions: |-
    assert partialWordle(["zzzz","bbbb","lyre","part","apes"],
    'pare') == [0,0,4,6,3]
    assert partialWordle(["aaaa","wall","woah","deal","howl"],
    "word") == [0,2,4,1,3]
    assert partialWordle(["real","hill","ream","meal","curl"],
    "roll") == [4,4,2,2,3]
  username: student58
  submitted_text: Cross reference the string with the list to return a list of integers
    representing identical characters
  prompt: |-
    def partialWordle(guessList,hiddenWord):
        """
        Cross reference the $string:string$ with the $list:list$ to $return:return$ a $list:list$ of $integers:integers$ representing identical characters
        """
        
  subset: first_failure
- __index_level_0__: 812
  problem: andCount
  entrypoint: andCount
  assertions: |-
    assert andCount(['--&-','----','-&--','---&',]) == 3
    assert andCount(['&&&-','-----','--&&&','-----',]) == 6
    assert andCount(['----', '----', '----', '----']) == 0
  username: student29
  submitted_text: |-
    For each entry in the list, loop through each character in the string and count how many "&" are in each entry. Then add up the number of "&" in each entry and return the total number of "&" in the list
  prompt: |-
    def andCount(andGrid):
        """
        For each entry in the $list:list$, $loop through:loop through$ each character in the $string:string$ and count how many "&" are in each entry. Then add up the number of "&" in each entry and $return:return$ the total number of "&" in the $list:list$
        """
        
  subset: first_success
- __index_level_0__: 813
  problem: andCount
  entrypoint: andCount
  assertions: |-
    assert andCount(['--&-','----','-&--','---&',]) == 3
    assert andCount(['&&&-','-----','--&&&','-----',]) == 6
    assert andCount(['----', '----', '----', '----']) == 0
  username: student32
  submitted_text: |-
    Returns the sum of the number of times '&' is found within each string of each element of the array
  prompt: |-
    def andCount(andGrid):
        """
        $Returns:Returns$ the sum of the number of times '&' is found within each $string:string$ of each element of the $list:array$
        """
        
  subset: first_success
- __index_level_0__: 814
  problem: andCount
  entrypoint: andCount
  assertions: |-
    assert andCount(['--&-','----','-&--','---&',]) == 3
    assert andCount(['&&&-','-----','--&&&','-----',]) == 6
    assert andCount(['----', '----', '----', '----']) == 0
  username: student34
  submitted_text: |-
    Count how many times "&" appears in each item and make a new list where you the items correspond with each integer. Then find the sum of the new list. 
  prompt: |-
    def andCount(andGrid):
        """
        Count how many times "&" appears in each item and make a new $list:list$ where you the items correspond with each $integer:integer$. Then find the sum of the new $list:list$. 
        """
        
  subset: first_success
- __index_level_0__: 815
  problem: andCount
  entrypoint: andCount
  assertions: |-
    assert andCount(['--&-','----','-&--','---&',]) == 3
    assert andCount(['&&&-','-----','--&&&','-----',]) == 6
    assert andCount(['----', '----', '----', '----']) == 0
  username: student49
  submitted_text: |-
    Given a list of strings, count how many times the & operator appears in the list.
  prompt: |-
    def andCount(andGrid):
        """
        Given a $list:list$ of $strings:strings$, count how many times the & operator appears in the $list:list$.
        """
        
  subset: first_success
- __index_level_0__: 816
  problem: andCount
  entrypoint: andCount
  assertions: |-
    assert andCount(['--&-','----','-&--','---&',]) == 3
    assert andCount(['&&&-','-----','--&&&','-----',]) == 6
    assert andCount(['----', '----', '----', '----']) == 0
  username: student56
  submitted_text: |-
    iterates through values in list, checking if they are equal to -, if the values are not, the count goes up by 1 and the count is returned
  prompt: |-
    def andCount(andGrid):
        """
        $loops through:iterates through$ values in $list:list$, checking if they are equal to -, if the values are not, the count goes up by 1 and the count is $returned:returned$
        """
        
  subset: first_success
- __index_level_0__: 817
  problem: andCount
  entrypoint: andCount
  assertions: |-
    assert andCount(['--&-','----','-&--','---&',]) == 3
    assert andCount(['&&&-','-----','--&&&','-----',]) == 6
    assert andCount(['----', '----', '----', '----']) == 0
  username: student62
  submitted_text: |-
    for each element in list, counts number of '&', returns sum.
  prompt: |-
    def andCount(andGrid):
        """
        for each element in $list:list$, counts number of '&', $returns:returns$ sum.
        """
        
  subset: first_success
- __index_level_0__: 818
  problem: andCount
  entrypoint: andCount
  assertions: |-
    assert andCount(['--&-','----','-&--','---&',]) == 3
    assert andCount(['&&&-','-----','--&&&','-----',]) == 6
    assert andCount(['----', '----', '----', '----']) == 0
  username: student66
  submitted_text: |
    count the number of and symbols in the array lists return the total
  prompt: |-
    def andCount(andGrid):
        """
        count the number of and symbols in the $list:array lists$ $return:return$ the total

        """
        
  subset: first_success
- __index_level_0__: 819
  problem: andCount
  entrypoint: andCount
  assertions: |-
    assert andCount(['--&-','----','-&--','---&',]) == 3
    assert andCount(['&&&-','-----','--&&&','-----',]) == 6
    assert andCount(['----', '----', '----', '----']) == 0
  username: student67
  submitted_text: |-
    Reads list, and if list has '&' and majority '-', returns the lowest number of dashes in an item times 3. If the majority of the input in an item is '&', returns the highest number of & times 2. Returns 0 if there aren't both & and -.
  prompt: |-
    def andCount(andGrid):
        """
        Reads $list:list$, and if $list:list$ has '&' and majority '-', $returns:returns$ the lowest number of dashes in an item times 3. If the majority of the input in an item is '&', $returns:returns$ the highest number of & times 2. $Returns:Returns$ 0 if there aren't both & and -.
        """
        
  subset: first_failure
- __index_level_0__: 826
  problem: andCount
  entrypoint: andCount
  assertions: |-
    assert andCount(['--&-','----','-&--','---&',]) == 3
    assert andCount(['&&&-','-----','--&&&','-----',]) == 6
    assert andCount(['----', '----', '----', '----']) == 0
  username: student67
  submitted_text: |-
    If '&' and '-' is in an item of the list, and if there are more '-' than '&', returns number of '-' times 3. Otherwise returns the number of '&' times 2. 
  prompt: |-
    def andCount(andGrid):
        """
        If '&' and '-' is in an item of the $list:list$, and if there are more '-' than '&', $returns:returns$ number of '-' times 3. Otherwise $returns:returns$ the number of '&' times 2. 
        """
        
  subset: last_failure
- __index_level_0__: 827
  problem: andCount
  entrypoint: andCount
  assertions: |-
    assert andCount(['--&-','----','-&--','---&',]) == 3
    assert andCount(['&&&-','-----','--&&&','-----',]) == 6
    assert andCount(['----', '----', '----', '----']) == 0
  username: student68
  submitted_text: |-
    given an array of strings, the function will return the number of times the character '&' appears in the array of strings
  prompt: |-
    def andCount(andGrid):
        """
        given an $list:array$ of $strings:strings$, the function will $return:return$ the number of times the character '&' appears in the $list:array$ of $strings:strings$
        """
        
  subset: first_success
- __index_level_0__: 828
  problem: andCount
  entrypoint: andCount
  assertions: |-
    assert andCount(['--&-','----','-&--','---&',]) == 3
    assert andCount(['&&&-','-----','--&&&','-----',]) == 6
    assert andCount(['----', '----', '----', '----']) == 0
  username: student70
  submitted_text: |-
    Iterate through each string in the input list. If a character in the current string is "&", add 1 to the count. Return the count at the end of the list.
  prompt: |-
    def andCount(andGrid):
        """
        $Loop through:Iterate through$ each $string:string$ in the input $list:list$. If a $string:character$ in the current $string:string$ is "&", add 1 to the count. $Return:Return$ the count at the end of the $list:list$.
        """
        
  subset: first_success
- __index_level_0__: 831
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student19
  submitted_text: |-
    Takes an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character.
  prompt: |-
    def set_chars(s,c,l):
        """
        $Takes:Takes$ an input $string:string$, single character, and $list:list$ of index numbers. Every character in the input $string:string$ at one of these input indexes is replaced with the input character.
        """
        
  subset: first_failure
- __index_level_0__: 832
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student19
  submitted_text: |-
    Takes an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character. If an index is greater than the length of the string - 1, it is ignored.
  prompt: |-
    def set_chars(s,c,l):
        """
        $Takes:Takes$ an input $string:string$, single character, and $list:list$ of index numbers. Every character in the input $string:string$ at one of these input indexes is replaced with the input character. If an index is greater than the length of the $string:string$ - 1, it is $skipped:ignored$.
        """
        
  subset: last_success
- __index_level_0__: 833
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student20
  submitted_text: Replace letters in s that are located in l to c
  prompt: |-
    def set_chars(s,c,l):
        """
        Replace letters in s that are located in l to c
        """
        
  subset: first_failure
- __index_level_0__: 837
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student20
  submitted_text: |-
    Replace letters in input s that are located in index l to the input c.
    If index l is out of range ignore the index.
  prompt: |-
    def set_chars(s,c,l):
        """
        Replace letters in $parameter:input$ s that are located in index l to the $parameter:input$ c.
    If index l is out of range $skip:ignore$ the index.
        """
        
  subset: last_success
- __index_level_0__: 838
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student36
  submitted_text: Insert the character contained in the second string into the character
    indexes of the first string contained in the list
  prompt: |-
    def set_chars(s,c,l):
        """
        $Insert:Insert$ the character contained in the second $string:string$ into the character indexes of the first $string:string$ contained in the $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 841
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student36
  submitted_text: Replace the character contained in c into the character indexes
    of s using the numbers in l as indexes. If the index is greater than the string
    length replace the last character in s with c instead
  prompt: |-
    def set_chars(s,c,l):
        """
        Replace the character contained in c into the character indexes of s using the numbers in l as indexes. If the index is greater than the $string:string$ length replace the last character in s with c instead
        """
        
  subset: last_failure
- __index_level_0__: 842
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student38
  submitted_text: Replace character l in s with c
  prompt: |-
    def set_chars(s,c,l):
        """
        Replace character l in s with c
        """
        
  subset: first_failure
- __index_level_0__: 844
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student38
  submitted_text: 'Find the l character in s and replace with c '
  prompt: |-
    def set_chars(s,c,l):
        """
        Find the l character in s and replace with c 
        """
        
  subset: last_failure
- __index_level_0__: 845
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student42
  submitted_text: |-
    given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and return the new string 
  prompt: |-
    def set_chars(s,c,l):
        """
        given a $string:string$, a character, and a $list:list$ of indexes, replace the listed indexes in the $string:string$ with the given character and $return:return$ the new $string:string$ 
        """
        
  subset: first_failure
- __index_level_0__: 846
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student42
  submitted_text: |-
    given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and return the new string. if an index is outside the range of the list, ignore it.  
  prompt: |-
    def set_chars(s,c,l):
        """
        given a $string:string$, a character, and a $list:list$ of indexes, replace the listed indexes in the $string:string$ with the given character and $return:return$ the new $string:string$. if an index is outside the range of the $list:list$, $skip:ignore$ it.  
        """
        
  subset: last_success
- __index_level_0__: 847
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student43
  submitted_text: |-
    Loop through each number N in l, replace the element in s that has the index order  N with the element in c. Return the changed s.
  prompt: |-
    def set_chars(s,c,l):
        """
        $Loop through:Loop through$ each number N in l, replace the element in s that has the index order  N with the element in c. $Return:Return$ the changed s.
        """
        
  subset: first_failure
- __index_level_0__: 849
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student43
  submitted_text: |-
    First convert each element in l from string to number. If the length of s is equal or greater than the largest N in l, then loop through each number N in l and replace the element in s that has the index order N with the element in c. Otherwise, do nothing. Return the changed s.
  prompt: |-
    def set_chars(s,c,l):
        """
        First $typecast:convert$ each element in l from $string:string$ to number. If the length of s is equal or greater than the largest N in l, then $loop through:loop through$ each number N in l and replace the element in s that has the index order N with the element in c. Otherwise, do nothing. $Return:Return$ the changed s.
        """
        
  subset: last_failure
- __index_level_0__: 850
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student54
  submitted_text: Replace the initial string with the character at the given indices.
  prompt: |-
    def set_chars(s,c,l):
        """
        Replace the initial $string:string$ with the character at the given indices.
        """
        
  subset: first_success
- __index_level_0__: 851
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student57
  submitted_text: |-
    given a string and a character and a list, replace string at specified index in list with given character
  prompt: |-
    def set_chars(s,c,l):
        """
        given a $string:string$ and a character and a $list:list$, replace $string:string$ at specified index in $list:list$ with given character
        """
        
  subset: first_failure
- __index_level_0__: 855
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student57
  submitted_text: |-
    given a string and a character and a list, replace string at specified index in list with given character if given index is not in the length of the string, ignore index
  prompt: |-
    def set_chars(s,c,l):
        """
        given a $string:string$ and a character and a $list:list$, replace $string:string$ at specified index in $list:list$ with given character if given index is not in the length of the $string:string$, $skip:ignore$ index
        """
        
  subset: last_success
- __index_level_0__: 856
  problem: set_chars
  entrypoint: set_chars
  assertions: |-
    assert set_chars('Everybody loves apples.', "u", [0,2,6,16]) == 'uvurybudy loves upples.'
    assert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'
    assert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'
  username: student77
  submitted_text: |-
    Given a string, a letter, and locations specified in a list, remove the letters in the string in the locations specified in the list, and replace them with the letter.
  prompt: |-
    def set_chars(s,c,l):
        """
        Given a $string:string$, a letter, and locations specified in a $list:list$, remove the letters in the $string:string$ in the locations specified in the $list:list$, and replace them with the letter.
        """
        
  subset: first_failure
- __index_level_0__: 865
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student23
  submitted_text: |-
    This function takes in a word or sentence and replaces every other letter with the upper case letter. If it is just a one-letter word it is turned into an upper-case letter. It then returns the whole updated phrase, including all characters upper and lower case. 
  prompt: |-
    def altText(s):
        """
        This function $takes:takes in$ a $string:word or sentence$ and replaces every other letter with the upper case letter. If it is just a one-letter $string:word$ it is turned into an upper-case letter. It then $returns:returns$ the whole updated $string:phrase$, including all characters upper and lower case. 
        """
        
  subset: last_success
- __index_level_0__: 866
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student33
  submitted_text: |-
    The function takes a string of text as an input. For words in the string with an odd number of letters, every other letter is capitalized starting with the first letter. For words in the string with an even number of letters, every other letter is capitalized starting with the second letter. 
  prompt: |-
    def altText(s):
        """
        The function $takes:takes$ a $string:string$ of text as an $parameter:input$. For words in the $string:string$ with an odd number of letters, every other letter is capitalized starting with the first letter. For words in the $string:string$ with an even number of letters, every other letter is capitalized starting with the second letter. 
        """
        
  subset: first_success
- __index_level_0__: 867
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student35
  submitted_text: |-
    's' is a string value provided. Starting from the first character of the string, the function is supposed to convert every alternative character of the string into uppercase and then return the string.
  prompt: |-
    def altText(s):
        """
        's' is a $string:string$ $parameter:value provided$. Starting from the first character of the $string:string$, the function is supposed to convert every alternative character of the $string:string$ into uppercase and then $return:return$ the $string:string$.
        """
        
  subset: first_failure
- __index_level_0__: 869
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student35
  submitted_text: |-
    's' is a string value provided. Starting from the first character of the string, the function is supposed to convert the characters of the string in even index positions into uppercase. The characters of the string should be in the same order as below, only the characters in even index positions are to be turned uppercase.
  prompt: |-
    def altText(s):
        """
        's' is a $string:string$ $parameter:value provided$. Starting from the first character of the $string:string$, the function is supposed to convert the character of the $string:string$ in even index positions into uppercase. The characters of the $string:string$ should be in the same order as below, only the characters in even index positions are to be turned uppercase.
        """
        
  subset: last_success
- __index_level_0__: 870
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student40
  submitted_text: |-
    if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, returns the same input with alternating uppercase and lowercase letters
  prompt: |-
    def altText(s):
        """
        if the $string:string$ has one character, $returns:returns$ a capital letter when given a lowercase letter. if the $string:string$ has multiple characters, $returns:returns$ the same $parameter:input$ with alternating uppercase and lowercase letters
        """
        
  subset: first_failure
- __index_level_0__: 875
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student40
  submitted_text: |-
    if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, the function will make every other character uppercase. 
  prompt: |-
    def altText(s):
        """
        if the $string:string$ has one character, $returns:returns$ a capital letter when given a lowercase letter. if the $string:string$ has multiple characters, the function will make every other character uppercase. 
        """
        
  subset: last_success
- __index_level_0__: 876
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student44
  submitted_text: 'Print the string that is input with every other character that
    is not a space capitalized starting with a capital letter. '
  prompt: |-
    def altText(s):
        """
        $Return:Print$ the $string:string$ that is input with every other character that is not a space capitalized starting with a capital letter. 
        """
        
  subset: first_failure
- __index_level_0__: 879
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student44
  submitted_text: |-
    Go through every character in the string. 
    If the character is a letter and that character is the first character of the input, print it capitalized. 
    If the character is a letter that is not the first one in the input and the previous letter that was printed was in uppercase, print in lowercase. 
    If the previous letter was printed in uppercase, print it in lowercase. 
  prompt: |-
    def altText(s):
        """
        $Loop through:Go through$ every character in the $string:string$. 
    If the character is a letter and that character is the first character of the $parameter:input$, $return:print$ it capitalized. 
    If the character is a letter that is not the first one in the $parameter:input$ and the previous letter that was $returned:printed$ was in uppercase, $return:print$ in lowercase. 
    If the previous letter was $returned:printed$ in uppercase, $return:print$ it in lowercase. 
        """
        
  subset: last_failure
- __index_level_0__: 880
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student50
  submitted_text: |-
    The input is a string. Capitalize every other letter, starting with the first letter.
  prompt: |-
    def altText(s):
        """
        The $parameter:input$ is a $string:string$. Capitalize every other letter, starting with the first letter.
        """
        
  subset: first_success
- __index_level_0__: 881
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student59
  submitted_text: takes a string and capitalizes random letters in it
  prompt: |-
    def altText(s):
        """
        $takes:takes$ a $string:string$ and capitalizes random letters in it
        """
        
  subset: first_failure
- __index_level_0__: 883
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student59
  submitted_text: takes a string. capitalizes random letters in each word of that
    string and adds the new words to a list. returns this new list of words
  prompt: |-
    def altText(s):
        """
        $takes:takes$ a $string:string$. capitalizes random letters in each word of that $string:string$ and $inserts:adds$ the new $strings:words$ to a $list:list$. $returns:returns$ this new $list:list$ of $strings:words$
        """
        
  subset: last_failure
- __index_level_0__: 884
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student60
  submitted_text: 'This function inputs a string as a parameter. This function returns
    that string except every other letter is capitalized. This functions starts by
    capitalizing the first letter. This function ignores spaces. '
  prompt: |-
    def altText(s):
        """
        This function $takes:inputs$ a $string:string$ as a $parameter:parameter$. This function $returns:returns$ that $string:string$ except every other letter is capitalized. This functions starts by capitalizing the first letter. This function $skips:ignores$ spaces. 
        """
        
  subset: first_success
- __index_level_0__: 886
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student60
  submitted_text: 'This function inputs a string as a parameter. This function returns
    that string except every other letter is capitalized. This functions starts by
    capitalizing the first letter. '
  prompt: |-
    def altText(s):
        """
        This function $takes:inputs$ a $string:string$ as a $parameter:parameter$. This function $returns:returns$ that $string:string$ except every other letter is capitalized. This functions starts by capitalizing the first letter. 
        """
        
  subset: last_failure
- __index_level_0__: 887
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student63
  submitted_text: |-
    The function takes in a string and capitalizes every other letter in the string, starting with the first letter being a capital.
  prompt: |-
    def altText(s):
        """
        The function $takes:takes in$ a $string:string$ and capitalizes every other letter in the $string:string$, starting with the first letter being a capital.
        """
        
  subset: first_failure
- __index_level_0__: 889
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student63
  submitted_text: |-
    The function takes in a string and outputs the same string but with every other letter being capitalized, starting with the first letter being a capital.  
  prompt: |-
    def altText(s):
        """
        The function $takes:takes in$ a $string:string$ and $returns:outputs$ the same $string:string$ but with every other letter being capitalized, starting with the first letter being a capital.  
        """
        
  subset: last_failure
- __index_level_0__: 890
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student64
  submitted_text: Returns string with alternate uppercase and lowercase letters. String
    must start with uppercase letter.
  prompt: |-
    def altText(s):
        """
        $Returns:Returns$ $string:string$ with alternate uppercase and lowercase letters. $String:String$ must start with uppercase letter.
        """
        
  subset: first_success
- __index_level_0__: 891
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student69
  submitted_text: |-
    Enter a string. for every character in the string, if the index is an even even number, capitalize the character and print
  prompt: |-
    def altText(s):
        """
        $Provide:Enter$ a $string:string$. for every character in the $string:string$, if the index is an even even number, capitalize the character and $return:print$
        """
        
  subset: first_failure
- __index_level_0__: 892
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student71
  submitted_text: Turns the odd numbers of a string into capital letters
  prompt: |-
    def altText(s):
        """
        Turns the odd numbers of a $string:string$ into capital letters
        """
        
  subset: first_failure
- __index_level_0__: 893
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student75
  submitted_text: |-
    def altText(s): brings in input 'T' and outputs the capitalized version
  prompt: |-
    def altText(s):
        """
        def altText(s): $takes:brings in$ $parameter:input$ 'T' and $returns:outputs$ the capitalized version
        """
        
  subset: first_failure
- __index_level_0__: 895
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student75
  submitted_text: |2-

    def altText(s): brings in input 'computers' and capitalizes every other letter starting at 'C' and ending at 'S' and prints the lowercase letters in their original spelling 
    def altText(s): brings in input 'T' and outputs the capitalized version
  prompt: |-
    def altText(s):
        """
        
    def altText(s): $takes:brings in$ $parameter:input$ 'computers' and capitalizes every other letter starting at 'C' and ending at 'S' and $returns:prints$ the lowercase letters in their original spelling 
    def altText(s): $takes:brings in$ $parameter:input$ 'T' and $returns:outputs$ the capitalized version
        """
        
  subset: last_success
- __index_level_0__: 896
  problem: altText
  entrypoint: altText
  assertions: |-
    assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'
    assert altText('computers') == 'CoMpUtErS'
    assert altText('t') == 'T'
  username: student76
  submitted_text: Takes every odd character in a string and capitalizes
  prompt: |-
    def altText(s):
        """
        $Takes:Takes$ every odd character in a $string:string$ and capitalizes
        """
        
  subset: first_success
- __index_level_0__: 899
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student3
  submitted_text: |
    create a function which reverse the order of i first letters of the string
  prompt: |-
    def changeSection(s,i):
        """
        create a function which reverse the order of i first letters of the $string:string$

        """
        
  subset: first_failure
- __index_level_0__: 902
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student3
  submitted_text: create a function with 2 inputs string (s) and index number (i).
    Take i first letters of the string and then reverse the order of those letters
  prompt: |-
    def changeSection(s,i):
        """
        create a function with 2 $parameters:inputs$ $string:string$ (s) and index number (i). Take i first letters of the $string:string$ and then reverse the order of those letters
        """
        
  subset: last_failure
- __index_level_0__: 903
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student4
  submitted_text: creates the inverse of the inputted string
  prompt: |-
    def changeSection(s,i):
        """
        creates the inverse of the inputted $string:string$
        """
        
  subset: first_failure
- __index_level_0__: 905
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student4
  submitted_text: takes the inputted string (s) and takes the number of characters
    (i) and flips them around in the outputted string
  prompt: |-
    def changeSection(s,i):
        """
        $takes:takes$ the inputted $string:string$ (s) and $takes:takes$ the number of $strings:characters$ (i) and flips them around in the outputted $string:string$
        """
        
  subset: last_failure
- __index_level_0__: 906
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student10
  submitted_text: |-
    User inputs a string s and integer i. Function would flip the first i letters of string s backwards, and then concatenate the rest of the string to the end of the backwards letters.
  prompt: |-
    def changeSection(s,i):
        """
        User $provides:inputs$ a $string:string$ s and $integer:integer$ i. Function would flip the first i letters of $string:string$ s backwards, and then $concatenate:concatenate$ the rest of the $string:string$ to the end of the backwards letters.
        """
        
  subset: first_failure
- __index_level_0__: 907
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student10
  submitted_text: |-
    User inputs a string s and integer i. Function would write the first i letters of string s backwards and save that as string A. All the letters which were not flipped backwards would be saved as string B. Function would add string A and B, and then return that as the output
  prompt: |-
    def changeSection(s,i):
        """
        User $provides:inputs$ a $string:string$ s and $integer:integer$ i. Function would write the first i letters of $string:string$ s backwards and save that as $string:string$ A. All the letters which were not flipped backwards would be saved as $string:string$ B. Function would $concatenate:add$ $string:string$ A and B, and then $return:return$ that as the output
        """
        
  subset: last_success
- __index_level_0__: 908
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student17
  submitted_text: |-
    When there are spaces in the string, reverse the order of it by the index of the given number.
  prompt: |-
    def changeSection(s,i):
        """
        When there are spaces in the $string:string$, reverse the order of it by the index of the given number.
        """
        
  subset: first_failure
- __index_level_0__: 920
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student18
  submitted_text: 'Flip the order of the letters from index 0 to i-1 in the string
    s. '
  prompt: |-
    def changeSection(s,i):
        """
        Flip the order of the letters from index 0 to i-1 in the $string:string$ s. 
        """
        
  subset: first_failure
- __index_level_0__: 923
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student18
  submitted_text: |-
    Go through each letter in the s from index 0 to i-1. Append the letter to the index of i-1-index. Then, put the rest of the letters in the s from index i to the ((length of the s)-1) at the end. 
  prompt: |-
    def changeSection(s,i):
        """
        $Loop through:Go through$ each letter in the s from index 0 to i-1. $Concatenate:Append$ the letter to the index of i-1-index. Then, put the rest of the letters in the s from index i to the ((length of the s)-1) at the end. 
        """
        
  subset: last_failure
- __index_level_0__: 924
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student21
  submitted_text: |-
    given a string and a number within string length, produce a string that reverses the order of the characters up to the given number index concatenated with the rest of the original string
  prompt: |-
    def changeSection(s,i):
        """
        given a $string:string$ and a number within $string:string$ length, $return:produce$ a $string:string$ that reverses the order of the $strings:characters$ up to the given number index $concatenated:concatenated$ with the rest of the original $string:string$
        """
        
  subset: first_failure
- __index_level_0__: 929
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student21
  submitted_text: create a new string up to the given index and after. reverse the
    new String up to this index and add the string after the index.
  prompt: |-
    def changeSection(s,i):
        """
        create a new $string:string$ up to the given index and after. reverse the new $String:String$ up to this index and $concatenate:add$ the $string:string$ after the index.
        """
        
  subset: last_failure
- __index_level_0__: 930
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student25
  submitted_text: |-
    "s" is a given string and "i" is the letter index of the given string. At the given index in the string, this function flips all letters before and at that position. If the given number is longer than the length of the string, the whole string will be reversed.
  prompt: |-
    def changeSection(s,i):
        """
        "s" is a given $string:string$ and "i" is the letter index of the given $string:string$. At the given index in the $string:string$, this function flips all letters before and at that position. If the given number is longer than the length of the $string:string$, the whole $string:string$ will be reversed.
        """
        
  subset: first_failure
- __index_level_0__: 931
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student25
  submitted_text: |-
    "s" is a given string and "i" is the letter index of the given string. In this case, indexing starts with "1" instead of "0". At the given index in the string, this function flips all letters before and at that position. If the given number is longer than the length of the string, the whole string will be reversed.
  prompt: |-
    def changeSection(s,i):
        """
        "s" is a given $string:string$ and "i" is the letter index of the given $string:string$. In this case, indexing starts with "1" instead of "0". At the given index in the $string:string$, this function flips all letters before and at that position. If the given number is longer than the length of the $string:string$, the whole $string:string$ will be reversed.
        """
        
  subset: last_success
- __index_level_0__: 932
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student26
  submitted_text: Slice a string starting at 1 and ending at the given number. Reverse
    the slice and display the new string
  prompt: |-
    def changeSection(s,i):
        """
        Slice a $string:string$ starting at 1 and ending at the given number. Reverse the slice and $return:display$ the new $string:string$
        """
        
  subset: first_failure
- __index_level_0__: 934
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student26
  submitted_text: Slice a string starting at 1 and ending at the given number. Reverse
    the slice and replace it in the string; return the string
  prompt: |-
    def changeSection(s,i):
        """
        Slice a $string:string$ starting at 1 and ending at the given number. Reverse the slice and replace it in the $string:string$; $return:return$ the $string:string$
        """
        
  subset: last_success
- __index_level_0__: 935
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student30
  submitted_text: |-
    Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them before the remaining characters.
  prompt: |-
    def changeSection(s,i):
        """
        $Takes:Takes in$ $parameters:parameters$ (s, i), where s is a $string:string$ and i is an $integer:integer$. Removes the first i elements in the $string:string$, reverses their order, and $concatenates:inserts$ them before the remaining $string:characters$.
        """
        
  subset: first_failure
- __index_level_0__: 939
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student30
  submitted_text: |-
    Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them at the front of the string.
  prompt: |-
    def changeSection(s,i):
        """
        $Takes:Takes in$ $parameters:parameters$ (s, i), where s is a $string:string$ and i is an $integer:integer$. Removes the first i elements in the $string:string$, reverses their order, and $concatenates:inserts$ them at the front of the $string:string$.
        """
        
  subset: last_failure
- __index_level_0__: 940
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student41
  submitted_text: Segments the inputted string up to the given integer. Then prints
    the letters in the segmented string in reverse order. Then prints the segment
    of the string after the given integer.
  prompt: |-
    def changeSection(s,i):
        """
        Segments the inputted $string:string$ up to the given $integer:integer$. Then $returns:prints$ the letters in the segmented $string:string$ in reverse order. Then $returns:prints$ the segment of the $string:string$ after the given $integer:integer$.
        """
        
  subset: first_failure
- __index_level_0__: 942
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student41
  submitted_text: Prints each letter in the section of the string up to the given
    integer in reverse order. Then prints the rest of the string.
  prompt: |-
    def changeSection(s,i):
        """
        $Returns:Prints$ each letter in the section of the $string:string$ up to the given $integer:integer$ in reverse order. Then $returns:prints$ the rest of the $string:string$.
        """
        
  subset: last_failure
- __index_level_0__: 943
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student48
  submitted_text: Scramble the letters at the start of the string. The number of letters
    scrambled should be up to the number given.
  prompt: |-
    def changeSection(s,i):
        """
        Scramble the letters at the start of the $string:string$. The number of letters scrambled should be up to the number given.
        """
        
  subset: first_failure
- __index_level_0__: 944
  problem: changeSection
  entrypoint: changeSection
  assertions: |-
    assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'
    assert changeSection('the tall sail', 13) == 'lias llat eht'
    assert changeSection('establishing', 1) == 'establishing'
  username: student51
  submitted_text: flip the position of the characters in the string up to the specified
    index -1
  prompt: |-
    def changeSection(s,i):
        """
        flip the position of the $strings:characters$ in the $string:string$ up to the specified index -1
        """
        
  subset: first_success
- __index_level_0__: 948
  problem: edit_col
  entrypoint: edit_col
  assertions: |-
    assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]
    assert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]
    assert edit_col([[2,3]], 1, 1) == [[2,1]]
  username: student29
  submitted_text: |-
    For each entry, replace the integer corresponding to the 2nd parameter index with the third parameter integer. return a list with all the altered entries
  prompt: |-
    def edit_col(mat,i,n):
        """
        For each entry, replace the $integer:integer$ corresponding to the 2nd $parameter:parameter$ index with the third $parameter:parameter$ $integer:integer$. $return:return$ a $list:list$ with all the altered entries
        """
        
  subset: first_failure
- __index_level_0__: 949
  problem: edit_col
  entrypoint: edit_col
  assertions: |-
    assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]
    assert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]
    assert edit_col([[2,3]], 1, 1) == [[2,1]]
  username: student29
  submitted_text: For each entry take in the second parameter as an index. Then go
    through each entry of the first parameter and replace the value corresponding
    to that index with the third input parameter
  prompt: |-
    def edit_col(mat,i,n):
        """
        For each entry take in the second $parameter:parameter$ as an index. Then $loop through:go through$ each entry of the first $parameter:parameter$ and replace the value corresponding to that index with the third input $parameter:parameter$
        """
        
  subset: last_success
- __index_level_0__: 950
  problem: edit_col
  entrypoint: edit_col
  assertions: |-
    assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]
    assert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]
    assert edit_col([[2,3]], 1, 1) == [[2,1]]
  username: student32
  submitted_text: |-
    If the input i is 0, then I is set 
    First, it multiplies the first element of each array in mat with the the input i. Then it replaces the second element of each array in mat with the input n.
  prompt: |-
    def edit_col(mat,i,n):
        """
        If the $parameter:input$ i is 0, then I is set 
    First, it multiplies the first element of each $list:array$ in mat with the the $parameter:input$ i. Then it replaces the second element of each $list:array$ in mat with the $parameter:input$ n.
        """
        
  subset: first_failure
- __index_level_0__: 951
  problem: edit_col
  entrypoint: edit_col
  assertions: |-
    assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]
    assert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]
    assert edit_col([[2,3]], 1, 1) == [[2,1]]
  username: student34
  submitted_text: replace the value with position i in each list with n
  prompt: |-
    def edit_col(mat,i,n):
        """
        replace the value with position i in each $list:list$ with n
        """
        
  subset: first_success
- __index_level_0__: 952
  problem: edit_col
  entrypoint: edit_col
  assertions: |-
    assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]
    assert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]
    assert edit_col([[2,3]], 1, 1) == [[2,1]]
  username: student49
  submitted_text: |-
    Given a list of lists and 2 integers, go through each list and replace the number in the spot of the first integer with the number of the second integer
  prompt: |-
    def edit_col(mat,i,n):
        """
        Given a $list:list$ of $lists:lists$ and 2 $integers:integers$, $loop through:go through$ each $list:list$ and replace the number in the spot of the first $integer:integer$ with the number of the second $integer:integer$
        """
        
  subset: first_success
- __index_level_0__: 953
  problem: edit_col
  entrypoint: edit_col
  assertions: |-
    assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]
    assert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]
    assert edit_col([[2,3]], 1, 1) == [[2,1]]
  username: student56
  submitted_text: |2-

    iterates through a list of lists and at the position inputed as i, an integer is replaced with the inputed value of n
  prompt: |-
    def edit_col(mat,i,n):
        """
        
    $loops through:iterates through$ a $list:list$ of $lists:lists$ and at the position inputed as i, an $integer:integer$ is replaced with the $inputted:inputed value$ of n
        """
        
  subset: first_success
- __index_level_0__: 954
  problem: edit_col
  entrypoint: edit_col
  assertions: |-
    assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]
    assert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]
    assert edit_col([[2,3]], 1, 1) == [[2,1]]
  username: student62
  submitted_text: |-
    the first integer input corresponds to index. for each element in list, replace the inputted index of list with the second integer input
  prompt: |-
    def edit_col(mat,i,n):
        """
        the first $integer:integer$ $parameter:input$ corresponds to index. for each element in $list:list$, replace the inputted index of $list:list$ with the second $integer:integer$ $parameter:input$
        """
        
  subset: first_success
- __index_level_0__: 955
  problem: edit_col
  entrypoint: edit_col
  assertions: |-
    assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]
    assert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]
    assert edit_col([[2,3]], 1, 1) == [[2,1]]
  username: student66
  submitted_text: replace the index of the fist integer with the second integer within
    the array list
  prompt: |-
    def edit_col(mat,i,n):
        """
        replace the index of the fist $integer:integer$ with the second $integer:integer$ within the $list:array list$
        """
        
  subset: first_success
- __index_level_0__: 956
  problem: edit_col
  entrypoint: edit_col
  assertions: |-
    assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]
    assert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]
    assert edit_col([[2,3]], 1, 1) == [[2,1]]
  username: student67
  submitted_text: Adds 1 and subtracts 2.
  prompt: |-
    def edit_col(mat,i,n):
        """
        Adds 1 and subtracts 2.
        """
        
  subset: first_failure
- __index_level_0__: 959
  problem: edit_col
  entrypoint: edit_col
  assertions: |-
    assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]
    assert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]
    assert edit_col([[2,3]], 1, 1) == [[2,1]]
  username: student67
  submitted_text: 'Replaces the first item of the last list with the sum of i and
    n. '
  prompt: |-
    def edit_col(mat,i,n):
        """
        Replaces the first item of the last $list:list$ with the sum of i and n. 
        """
        
  subset: last_failure
- __index_level_0__: 960
  problem: edit_col
  entrypoint: edit_col
  assertions: |-
    assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]
    assert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]
    assert edit_col([[2,3]], 1, 1) == [[2,1]]
  username: student68
  submitted_text: |-
    given a list of integer lists and two integers (one represents an index and the other represents a value), in each integer list replace the number at the index correlating with the first input integer with the second input integer. 
  prompt: |-
    def edit_col(mat,i,n):
        """
        given a $list:list$ of $integer:integer$ $lists:lists$ and two $integers:integers$ (one represents an index and the other represents a value), in each $integer:integer$ $list:list$ replace the number at the index correlating with the first input $integer:integer$ with the second input $integer:integer$. 
        """
        
  subset: first_success
- __index_level_0__: 961
  problem: edit_col
  entrypoint: edit_col
  assertions: |-
    assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]
    assert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]
    assert edit_col([[2,3]], 1, 1) == [[2,1]]
  username: student70
  submitted_text: |-
    For each list in the input list mat, replace the integer at index i with input integer n and return the changed list of lists.
  prompt: |-
    def edit_col(mat,i,n):
        """
        For each $list:list$ in the input $list:list$ mat, replace the $integer:integer$ at index i with input $integer:integer$ n and $return:return$ the changed $list:list$ of $lists:lists$.
        """
        
  subset: first_success
- __index_level_0__: 964
  problem: combine
  entrypoint: combine
  assertions: |-
    assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]
    assert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]
    assert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]
  username: student19
  submitted_text: |-
    Takes an input of two lists, each with the same number of items. Combines the first item in each list into a new list, does this for every item in both lists, then compiles these lists into one last list, and outputs the last list.
  prompt: |-
    def combine(l1,l2):
        """
        $Takes:Takes$ an $parameters:input$ of two $lists:lists$, each with the same number of items. Combines the first item in each $list:list$ into a new $list:list$, does this for every item in both $lists:lists$, then compiles these $lists:lists$ into one last $list:list$, and $returns:outputs$ the last $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 965
  problem: combine
  entrypoint: combine
  assertions: |-
    assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]
    assert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]
    assert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]
  username: student19
  submitted_text: |-
    Takes an input of two lists, l1 and l2, each of which also contains lists. It combines the first list in l1 with the first one in l2, then continues for all items in l1 and l2. It outputs this final list which is a combination of l1 and l2.
  prompt: |-
    def combine(l1,l2):
        """
        $Takes:Takes$ an $parameters:input$ of two $lists:lists$, l1 and l2, each of which also contains $lists:lists$. It $concatenates:combines$ the first $list:list$ in l1 with the first one in l2, then continues for all items in l1 and l2. It $returns:outputs$ this final $list:list$ which is a combination of l1 and l2.
        """
        
  subset: last_success
- __index_level_0__: 966
  problem: combine
  entrypoint: combine
  assertions: |-
    assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]
    assert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]
    assert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]
  username: student20
  submitted_text: Combine all elements within two lists
  prompt: |-
    def combine(l1,l2):
        """
        Combine all elements within two $lists:lists$
        """
        
  subset: first_failure
- __index_level_0__: 971
  problem: combine
  entrypoint: combine
  assertions: |-
    assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]
    assert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]
    assert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]
  username: student20
  submitted_text: Combine elements sharing the same index in two lists
  prompt: |-
    def combine(l1,l2):
        """
        Combine elements sharing the same index in two $lists:lists$
        """
        
  subset: last_success
- __index_level_0__: 972
  problem: combine
  entrypoint: combine
  assertions: |-
    assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]
    assert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]
    assert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]
  username: student36
  submitted_text: combine the first half of the lists with the second half of the
    lists
  prompt: |-
    def combine(l1,l2):
        """
        combine the first half of the $lists:lists$ with the second half of the $lists:lists$
        """
        
  subset: first_success
- __index_level_0__: 973
  problem: combine
  entrypoint: combine
  assertions: |-
    assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]
    assert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]
    assert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]
  username: student38
  submitted_text: Combine lists from 11 to lists from 12
  prompt: |-
    def combine(l1,l2):
        """
        Combine $lists:lists$ from 11 to $lists:lists$ from 12
        """
        
  subset: first_success
- __index_level_0__: 974
  problem: combine
  entrypoint: combine
  assertions: |-
    assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]
    assert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]
    assert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]
  username: student42
  submitted_text: |-
    given two lists of lists, l1 and l2, return a list l3 where each element of l3 is a list that is the combination of the respective elements of l1 and l2, so the first element of l3 would be a list containing the elements of the first element of l1 and the first elements of l2, and so forth. 
  prompt: |-
    def combine(l1,l2):
        """
        given two $lists:lists$ of $lists:lists$, l1 and l2, $return:return$ a $list:list$ l3 where each element of l3 is a $list:list$ that is the $concatenation:combination$ of the respective elements of l1 and l2, so the first element of l3 would be a $list:list$ containing the elements of the first element of l1 and the first elements of l2, and so forth. 
        """
        
  subset: first_failure
- __index_level_0__: 975
  problem: combine
  entrypoint: combine
  assertions: |-
    assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]
    assert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]
    assert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]
  username: student42
  submitted_text: |-
    given two lists of lists, l1 and l2, return a list l3 where each element of l3 is a list that is the combination of the respective elements of l1 and l2, so the first element of l3 would be a list containing the elements of the first element of l1 and the first elements of l2, and so forth. since the elements of l1 and l2 are lists, assemble a new list from the elements of those lists, instead of simply trying to append one element onto the other
  prompt: |-
    def combine(l1,l2):
        """
        given two $lists:lists$ of $lists:lists$, l1 and l2, $return:return$ a $list:list$ l3 where each element of l3 is a $list:list$ that is the combination of the respective elements of l1 and l2, so the first element of l3 would be a $list:list$ containing the elements of the first element of l1 and the first elements of l2, and so forth. since the elements of l1 and l2 are $lists:lists$, assemble a new $list:list$ from the elements of those $lists:lists$, instead of simply trying to $insert:append$ one element onto the other
        """
        
  subset: last_success
- __index_level_0__: 976
  problem: combine
  entrypoint: combine
  assertions: |-
    assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]
    assert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]
    assert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]
  username: student43
  submitted_text: |-
    Split the n number of inputted lists into two parts, part a and part b, according to their position in the input. Combine the 1st list in part a with the first list in part b, combine the 2nd list in part a with the second list in part b. More generally, combine the ith list in part a with the ith list in part b. 
  prompt: |-
    def combine(l1,l2):
        """
        Split the n number of inputted $lists:lists$ into two parts, part a and part b, according to their position in the $parameter:input$. Combine the 1st $list:list$ in part a with the first $list:list$ in part b, combine the 2nd $list:list$ in part a with the second $list:list$ in part b. More generally, combine the ith $list:list$ in part a with the ith $list:list$ in part b. 
        """
        
  subset: first_failure
- __index_level_0__: 978
  problem: combine
  entrypoint: combine
  assertions: |-
    assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]
    assert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]
    assert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]
  username: student43
  submitted_text: |-
    Count the number of elements in the inputted list, store this number as n. Divide n by 2 store it as m, then combine the 1st element in the list with the 1+m th element in the list, return it as a single element. Then combine the 2nd element in the list with the 2+m th element in the list, return it as a single element. Loop through every  element in the list.
  prompt: |-
    def combine(l1,l2):
        """
        Count the number of elements in the inputted $list:list$, store this number as n. Divide n by 2 store it as m, then combine the 1st element in the $list:list$ with the 1+m th element in the $list:list$, $return:return$ it as a single element. Then combine the 2nd element in the $list:list$ with the 2+m th element in the $list:list$, $return:return$ it as a single element. $Loop through:Loop through$ every  element in the $list:list$.
        """
        
  subset: last_failure
- __index_level_0__: 979
  problem: combine
  entrypoint: combine
  assertions: |-
    assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]
    assert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]
    assert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]
  username: student54
  submitted_text: |-
    Combine the two lists, alternating the lists inside.
  prompt: |-
    def combine(l1,l2):
        """
        Combine the two $lists:lists$, alternating the $lists:lists$ inside.
        """
        
  subset: first_failure
- __index_level_0__: 983
  problem: combine
  entrypoint: combine
  assertions: |-
    assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]
    assert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]
    assert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]
  username: student54
  submitted_text: |-
    Combine l1 and l2, if l1 length is greater than 1, loop through each index to combine the two
  prompt: |-
    def combine(l1,l2):
        """
        Combine l1 and l2, if l1 length is greater than 1, $loop through:loop through$ each index to combine the two
        """
        
  subset: last_success
- __index_level_0__: 984
  problem: combine
  entrypoint: combine
  assertions: |-
    assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]
    assert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]
    assert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]
  username: student57
  submitted_text: |-
    when given two list of lists, combine lists in list by their index, creating one list of lists
  prompt: |-
    def combine(l1,l2):
        """
        when given two $list:list$ of $lists:lists$, combine $lists:lists$ in $list:list$ by their index, creating one $list:list$ of $lists:lists$
        """
        
  subset: first_success
- __index_level_0__: 987
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student3
  submitted_text: create function which take 1 input (value). Produce list of list
    that have value number of list contain value number ascending from 1 to value
  prompt: |-
    def pattern(value):
        """
        create function which $take:take$ 1 $parameter:input$ (value). $Return:Produce$ $list:list$ of $list:list$ that have value number of $list:list$ contain value number ascending from 1 to value
        """
        
  subset: first_failure
- __index_level_0__: 992
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student3
  submitted_text: 'create function which take 1 input (value). create list of ascending
    numbers of value start from 1. insert '
  prompt: |-
    def pattern(value):
        """
        create function which $take:take$ 1 $parameter:input$ (value). create $list:list$ of ascending numbers of value start from 1. insert
        """
        
  subset: last_failure
- __index_level_0__: 993
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student4
  submitted_text: |-
    uses the given number to produce a given number of lists, each containing elements counting up to the given number from one
  prompt: |-
    def pattern(value):
        """
        uses the given number to $return:produce$ a given number of $lists:lists$, each containing elements counting up to the given number from one
        """
        
  subset: first_failure
- __index_level_0__: 994
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student4
  submitted_text: |-
    creates a list containing elements counting up to the given number from 1, duplicates this list by the given number into a list of lists
  prompt: |-
    def pattern(value):
        """
        creates a $list:list$ containing elements counting up to the given number from 1, duplicates this $list:list$ by the given number into a $list:list$ of $lists:lists$
        """
        
  subset: last_success
- __index_level_0__: 995
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student10
  submitted_text: |-
    User inputs an int. Function returns a list length value, with each item of the list being another list, containing all numbers from 1 to value.
  prompt: |-
    def pattern(value):
        """
        User $provides:inputs$ an $integer:int$. Function $returns:returns$ a $list:list$ length value, with each item of the $list:list$ being another $list:list$, containing all numbers from 1 to value.
        """
        
  subset: first_success
- __index_level_0__: 996
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student17
  submitted_text: count to the letter of the input
  prompt: |-
    def pattern(value):
        """
        count to the letter of the $parameter:input$
        """
        
  subset: first_failure
- __index_level_0__: 999
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student17
  submitted_text: |-
    if given 2 output two lists 1,2 and 1,2
    if given 3 out put 3 lists 1,2,3 and 1,2,3 and 1,2,3
  prompt: |-
    def pattern(value):
        """
        if given 2 $return:output$ two $lists:lists$ 1,2 and 1,2
    if given 3 $return:out put$ 3 $lists:lists$ 1,2,3 and 1,2,3 and 1,2,3
        """
        
  subset: last_success
- __index_level_0__: 1000
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student18
  submitted_text: Create a list that has a list of an integer from 1 to value for
    value amount of times.
  prompt: |-
    def pattern(value):
        """
        Create a $list:list$ that has a $list:list$ of an $integer:integer$ from 1 to value for value amount of times.
        """
        
  subset: first_success
- __index_level_0__: 1001
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student21
  submitted_text: product a list of numbers counting up from 1 to the given value.
    add this list to a list value number of times.
  prompt: |-
    def pattern(value):
        """
        product a $list:list$ of numbers counting up from 1 to the given value. $insert:add$ this $list:list$ to a $list:list$ value number of times.
        """
        
  subset: first_success
- __index_level_0__: 1002
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student25
  submitted_text: |-
    This function takes a given integer and creates a list with numbers 1 to that given value. It creates this list repeated for the given value and returns, appending each list to one list. It returns the list of lists.
  prompt: |-
    def pattern(value):
        """
        This function $takes:takes$ a given $integer:integer$ and creates a $list:list$ with numbers 1 to that given value. It creates this $list:list$ repeated for the given value and returns, $inserting:appending$ each $list:list$ to one $list:list$. It $returns:returns$ the $list:list$ of $lists:lists$.
        """
        
  subset: first_failure
- __index_level_0__: 1003
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student25
  submitted_text: |-
    This function takes a given integer and creates one list including the numbers 1 to that given value. It creates this list repeated for the given value, appending each list to one list. It returns the list of lists.
  prompt: |-
    def pattern(value):
        """
        This function $takes:takes$ a given $integer:integer$ and creates one $list:list$ including the numbers 1 to that given value. It creates this $list:list$ repeated for the given value, $inserting:appending$ each $list:list$ to one $list:list$. It $returns:returns$ the $list:list$ of $lists:lists$.
        """
        
  subset: last_success
- __index_level_0__: 1004
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student26
  submitted_text: Generate a sequence of numbers ranging from 1 to the given number
    and repeat the sequence the given number of times
  prompt: |-
    def pattern(value):
        """
        Generate a $list:sequence$ of numbers ranging from 1 to the given number and repeat the $list:sequence$ the given number of times
        """
        
  subset: first_failure
- __index_level_0__: 1005
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student26
  submitted_text: Generate a set of numbers counting up from 1 to the given number
    and print each set the given number of times
  prompt: |-
    def pattern(value):
        """
        Generate a $list:set$ of numbers counting up from 1 to the given number and $return:print$ each $list:set$ the given number of times
        """
        
  subset: last_failure
- __index_level_0__: 1006
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student30
  submitted_text: |-
    Create an array containing value number of smaller arrays. Each smaller array contains value number of integers, ranging from 1 to value in order.
  prompt: |-
    def pattern(value):
        """
        Create an $list:array$ containing value number of smaller $lists:arrays$. Each smaller $list:array$ contains value number of $integers:integers$, ranging from 1 to value in order.
        """
        
  subset: first_success
- __index_level_0__: 1007
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student41
  submitted_text: |-
    Returns a list of lists. The number of lists in the output list should be equal to the value. Each list within the output list should have each integer greater than zero up to, and including, the value inputted.
  prompt: |-
    def pattern(value):
        """
        $Returns:Returns$ a $list:list$ of $lists:lists$. The number of $lists:lists$ in the output $list:list$ should be equal to the value. Each $list:list$ within the output $list:list$ should have each $integer:integer$ greater than zero up to, and including, the $parameter:value inputted$.
        """
  subset: first_failure
- __index_level_0__: 1010
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student41
  submitted_text: Returns a list of lists. The number of lists in the output list
    should be equal to the value. All of the lists within the output list should have
    every integer between one and one more than the inputted value.
  prompt: |-
    def pattern(value):
        """
        $Returns:Returns$ a $list:list$ of $lists:lists$. The number of $lists:lists$ in the output $list:list$ should be equal to the value. All of the $lists:lists$ within the output $list:list$ should have every $integer:integer$ between one and one more than the $parameter:inputted value$.
        """
        
  subset: last_success
- __index_level_0__: 1011
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student48
  submitted_text: Make a list of lists. The numbers in the inner lists should be counting
    up to the number in value. The number of inner lists should be the same amount
    as value.
  prompt: |-
    def pattern(value):
        """
        Make a $list:list$ of $lists:lists$. The numbers in the inner $lists:lists$ should be counting up to the number in value. The number of inner $lists:lists$ should be the same amount as value.
        """
        
  subset: first_failure
- __index_level_0__: 1012
  problem: pattern
  entrypoint: pattern
  assertions: |-
    assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]
    assert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
    assert pattern(2) == [[1,2],[1,2]]
  username: student51
  submitted_text: return a list of size value where each object is a list containing
    all integer values starting at one and up to value
  prompt: |-
    def pattern(value):
        """
        $return:return$ a $list:list$ of size value where each object is a $list:list$ containing all $integer:integer$ values starting at one and up to value
        """
        
  subset: first_success
- __index_level_0__: 1015
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student3
  submitted_text: create function that reduce "^" to "_"
  prompt: |-
    def reduce(val):
        """
        create function that reduce "^" to "_"
        """
        
  subset: first_success
- __index_level_0__: 1016
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student4
  submitted_text: |-
    if inputter string contains "^", replaces "^" in the string with "_"
  prompt: |-
    def reduce(val):
        """
        if inputter $string:string$ contains "^", replaces "^" in the $string:string$ with "_"
        """
        
  subset: first_success
- __index_level_0__: 1017
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student10
  submitted_text: Changes all ^ into _
  prompt: |-
    def reduce(val):
        """
        Changes all ^ into _
        """
        
  subset: first_success
- __index_level_0__: 1018
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student17
  submitted_text: changing the "^" to "_" and "^" to "_" in strings
  prompt: |-
    def reduce(val):
        """
        changing the "^" to "_" and "^" to "_" in $strings:strings$
        """
        
  subset: first_success
- __index_level_0__: 1019
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student17
  submitted_text: changing the "^" to "-" and "^" to "-" in strings
  prompt: |-
    def reduce(val):
        """
        changing the "^" to "-" and "^" to "-" in $strings:strings$
        """
        
  subset: last_failure
- __index_level_0__: 1020
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student18
  submitted_text: Replace '^' with '_'
  prompt: |-
    def reduce(val):
        """
        Replace '^' with '_'
        """
        
  subset: first_success
- __index_level_0__: 1021
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student21
  submitted_text: |-
    for each index of the input string, if the index is "^" then change that index to an underscore, and return the new string with the change
  prompt: |-
    def reduce(val):
        """
        for each index of the input $string:string$, if the index is "^" then change that index to an underscore, and $return:return$ the new $string:string$ with the change
        """
        
  subset: first_success
- __index_level_0__: 1022
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student25
  submitted_text: This function replaces "^" with "_"
  prompt: |-
    def reduce(val):
        """
        This function replaces "^" with "_"
        """
        
  subset: first_success
- __index_level_0__: 1023
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student26
  submitted_text: |-
    Count the characters in a string and replace all '^' as '_', then print the string
  prompt: |-
    def reduce(val):
        """
        Count the characters in a $string:string$ and replace all '^' as '_', then $return:print$ the $string:string$
        """
        
  subset: first_failure
- __index_level_0__: 1026
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student26
  submitted_text: |-
    Count the characters in a string and replace all '^' as '_', then return a copy of the new string. Do not display the count
  prompt: |-
    def reduce(val):
        """
        Count the characters in a $string:string$ and replace all '^' as '_', then $return:return$ a copy of the new $string:string$. Do not $return:display$ the count
        """
        
  subset: last_success
- __index_level_0__: 1027
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student30
  submitted_text: Replace all '^' characters in val with '_' characters.
  prompt: |-
    def reduce(val):
        """
        Replace all '^' characters in val with '_' characters.
        """
        
  subset: first_success
- __index_level_0__: 1028
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student41
  submitted_text: Replaces each upwards arrow in the input string with an underscore
    and prints the modified input.
  prompt: |-
    def reduce(val):
        """
        Replaces each upwards arrow in the input $string:string$ with an underscore and $returns:prints$ the modified $parameter:input$.
        """
        
  subset: first_success
- __index_level_0__: 1029
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student48
  submitted_text: Change every "^" in val to "_"
  prompt: |-
    def reduce(val):
        """
        Change every "^" in val to "_"
        """
        
  subset: first_success
- __index_level_0__: 1030
  problem: reduce
  entrypoint: reduce
  assertions: |-
    assert reduce('^^1-1^^') == '__1-1__'
    assert reduce('~^--^~') == '~_--_~'
    assert reduce('|O.0|') == '|O.0|'
  username: student51
  submitted_text: check each character in the string and add it to a new string. If
    the character is ^ then add _ instead. Return the new string.
  prompt: |-
    def reduce(val):
        """
        check each character in the $string:string$ and $concatenate:add$ it to a new $string:string$. If the character is ^ then $concatenate:add$ _ instead. $Return:Return$ the new $string:string$.
        """
        
  subset: first_success
- __index_level_0__: 1035
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student2
  submitted_text: this function returns only true or false. It returns false if the
    value is 19 but returns true if the value is not 19
  prompt: |-
    def fib(n):
        """
        this function $returns:returns$ only true or false. It $returns:returns$ false if the value is 19 but $returns:returns$ true if the value is not 19
        """
        
  subset: last_success
- __index_level_0__: 1036
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student5
  submitted_text: |-
    the function fib(n) should take an int as a input and return a Boolean expression declaring wither the input only contains 1, 2, or 3
  prompt: |-
    def fib(n):
        """
        the function fib(n) should $take:take$ an $integer:int$ as a $parameter:input$ and $return:return$ a Boolean expression declaring wither the $parameter:input$ only contains 1, 2, or 3
        """
        
  subset: first_failure
- __index_level_0__: 1038
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student5
  submitted_text: |-
    the function fib(n) should take an input and return true if the input only contains 1, 2, or 3 and false if the input contains other numbers
  prompt: |-
    def fib(n):
        """
        the function fib(n) should $take:take$ an $parameter:input$ and $return:return$ true if the $parameter:input$ only contains 1, 2, or 3 and false if the $parameter:input$ contains other numbers
        """
        
  subset: last_failure
- __index_level_0__: 1039
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student8
  submitted_text: Returns whether or not a number is a Fibonacci number
  prompt: |-
    def fib(n):
        """
        $Returns:Returns$ whether or not a number is a Fibonacci number
        """
        
  subset: first_failure
- __index_level_0__: 1041
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student8
  submitted_text: Checks if the input value is the sum of any two consecutive Fibonacci
    numbers
  prompt: |-
    def fib(n):
        """
        Checks if the $parameter:input$ value is the sum of any two consecutive Fibonacci numbers
        """
        
  subset: last_success
- __index_level_0__: 1042
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student11
  submitted_text: a function check if n==1 or 13 or 21
  prompt: |-
    def fib(n):
        """
        a function check if n==1 or 13 or 21
        """
        
  subset: first_failure
- __index_level_0__: 1043
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student11
  submitted_text: a function check if n==1 or n==13 or n==21
  prompt: |-
    def fib(n):
        """
        a function check if n==1 or n==13 or n==21
        """
        
  subset: last_success
- __index_level_0__: 1044
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student13
  submitted_text: |-
    If inputted number is a Fibonacci number, return true, otherwise return false.
  prompt: |-
    def fib(n):
        """
        If inputted number is a Fibonacci number, $return:return$ true, otherwise $return:return$ false.
        """
        
  subset: first_failure
- __index_level_0__: 1054
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student13
  submitted_text: |-
    The function checks if the inputted number is a Fibonacci number and if it is, returns True. Else, it returns False.
  prompt: |-
    def fib(n):
        """
        The function checks if the inputted number is a Fibonacci number and if it is, $returns:returns$ True. Else, it $returns:returns$ False.
        """
        
  subset: last_success
- __index_level_0__: 1055
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student16
  submitted_text: check if a number doesn't have 9
  prompt: |-
    def fib(n):
        """
        check if a number doesn't have 9
        """
        
  subset: first_failure
- __index_level_0__: 1056
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student16
  submitted_text: |-
    check if a number doesn't have 9, return true or false
  prompt: |-
    def fib(n):
        """
        check if a number doesn't have 9, $return:return$ true or false
        """
        
  subset: last_failure
- __index_level_0__: 1057
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student22
  submitted_text: 'write a function that checks to see if a number is part of the
    fibonacci sequence '
  prompt: |-
    def fib(n):
        """
        write a function that checks to see if a number is part of the fibonacci sequence
        """
        
  subset: first_failure
- __index_level_0__: 1059
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student22
  submitted_text: |-
    check to see if the number is part of the list [1,13,21] and return a boolean value 
  prompt: |-
    def fib(n):
        """
        check to see if the number is part of the $list:list$ [1,13,21] and $return:return$ a boolean value 
        """
        
  subset: last_success
- __index_level_0__: 1060
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student37
  submitted_text: Write a function which takes an integer and returns True if the
    integer is contained on the list of numbers in the fibonacci sequence and False
    if it is not
  prompt: |-
    def fib(n):
        """
        Write a function which $takes:takes$ an $integer:integer$ and $returns:returns$ True if the $integer:integer$ is contained on the $list:list$ of numbers in the fibonacci sequence and False if it is not
        """
        
  subset: first_failure
- __index_level_0__: 1061
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student37
  submitted_text: |-
    Write a function which takes an integer and then uses a for loop to produce numbers in the fibonacci sequence stored in the variable x. At the end of each loop, if x equals the input integer, return True, if x is greater than the input integer, return False
  prompt: |-
    def fib(n):
        """
        Write a function which $takes:takes$ an $integer:integer$ and then uses a for loop to produce numbers in the fibonacci sequence stored in the variable x. At the end of each loop, if x equals the input $integer:integer$, $return:return$ True, if x is greater than the input $integer:integer$, $return:return$ False
        """
        
  subset: last_success
- __index_level_0__: 1062
  problem: fib
  entrypoint: fib
  assertions: |-
    assert fib(1) == True
    assert fib(13) == True
    assert fib(21) == True
    assert fib(19) == False
  username: student72
  submitted_text: |-
    Return True if the number is an integer in the Fibonnaci sequence. Else, return False.
  prompt: |-
    def fib(n):
        """
        $Return:Return$ True if the number is an $integer:integer$ in the Fibonnaci sequence. Else, $return:return$ False.
        """
        
  subset: first_failure
- __index_level_0__: 1066
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student3
  submitted_text: |-
    create a function with 3 input word(string), line_number (int) and map (dict). In map dictionary add new element of dictionary with key are word which given the corresponding list of line number
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        create a function with 3 $input:input$ word(string), line_number ($integer:int$) and $dictionary:map$ (dict). In $dictionary:map$ $dictionary:dictionary$ $insert:add$ new $key:element$ of $dictionary:dictionary$ with $key:key$ are $string:word$ which given the corresponding $list:list$ of line number
        """
        
  subset: first_failure
- __index_level_0__: 1068
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student3
  submitted_text: |-
    create a function with 3 input word(string), line_number (int) and map (dict). In map dictionary create new key word
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        create a function with 3 $input:input$ word(string), line_number ($integer:int$) and $dictionary:map$ (dict). In $dictionary:map$ $dictionary:dictionary$ create new $key:key$ $string:word$
        """
        
  subset: last_failure
- __index_level_0__: 1069
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student4
  submitted_text: |-
    adds the word and line number to a dictionary, with the word as the key and line_number as the value 
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        $inserts:adds$ the $string:word$ and line number to a $dictionary:dictionary$, with the $string:word$ as the $key:key$ and line_number as the value 
        """
        
  subset: first_failure
- __index_level_0__: 1070
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student4
  submitted_text: |-
    adds the word and line number to a dictionary, with the word as the key and line_number as the value, returns the appended dictionary
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        $inserts:adds$ the $string:word$ and line number to a $dictionary:dictionary$, with the $string:word$ as the $key:key$ and line_number as the value, $returns:returns$ the $inserted:appended$ $dictionary:dictionary$
        """
        
  subset: last_success
- __index_level_0__: 1071
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student10
  submitted_text: |-
    Function would check if the string word is a key in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new list as a value.
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        Function would check if the $string:string$ $string:word$ is a $key:key$ in the $dictionary:dictionary$ $dictionary:map$. If $string:word$ is in $dictionary:map$, $insert:add$ line_number to the $list:list$ in the value side of the $dictionary:dictionary$. If the $string:word$ is not in the $dictionary:dictionary$, $insert:add$ it as a new $key:key$, and $insert:add$ the line_number as the first $key:item$ of a new $list:list$ as a value.
        """
        
  subset: first_failure
- __index_level_0__: 1072
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student10
  submitted_text: |-
    Function would check if the string word is a key in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new list as a value. Returns an updated map.
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        Function would check if the $string:string$ $string:word$ is a $key:key$ in the $dictionary:dictionary$ $dictionary:map$. If $string:word$ is in $dictionary:map$, $insert:add$ line_number to the $list:list$ in the value side of the $dictionary:dictionary$. If the $string:word$ is not in the $dictionary:dictionary$, $insert:add$ it as a new $key:key$, and $insert:add$ the line_number as the first $key:item$ of a new $list:list$ as a value. $Returns:Returns$ an updated $dictionary:map$.
        """
        
  subset: last_success
- __index_level_0__: 1073
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student17
  submitted_text: |-
    input: 'bright', 1, {'twas': [1]} output: {'twas': [1], 'bright': [1]}
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        $input:input$: 'bright', 1, {'twas': [1]} $return:output$: {'twas': [1], 'bright': [1]}
        """
        
  subset: first_failure
- __index_level_0__: 1074
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student17
  submitted_text: |-
    input: 'bright', 1, {'twas': [1]} output: {'twas': [1], 'bright': [1]}
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        $input:input$: 'bright', 1, {'twas': [1]} $return:output$: {'twas': [1], 'bright': [1]}
        """
        
  subset: last_failure
- __index_level_0__: 1075
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student18
  submitted_text: |-
    If the word already exist in the map, add the line_number at the very end of the list for the word in the map. If word does not exist in the map, create the word as a category at the end of the map and add line_number in the list for the word. 
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        If the $string:word$ already exist in the $dictionary:map$, $insert:add$ the line_number at the very end of the $list:list$ for the $string:word$ in the $dictionary:map$. If $string:word$ does not exist in the $dictionary:map$, create the $string:word$ as a category at the end of the $dictionary:map$ and $insert:add$ line_number in the $list:list$ for the $string:word$. 
        """
        
  subset: first_failure
- __index_level_0__: 1076
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student21
  submitted_text: |-
    if word isn't in map, add the word and number to map, following the format in map. if the word is in map already, add the number to the word 
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        if $string:word$ isn't in $dictionary:map$, $insert:add$ the $string:word$ and number to $dictionary:map$, following the format in $dictionary:map$. if the $string:word$ is in $dictionary:map$ already, $insert:add$ the number to the $string:word$ 
        """
        
  subset: first_failure
- __index_level_0__: 1078
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student21
  submitted_text: |-
    if word isn't in map, add the word and number to map, following the format in map. if the word is in map already, add the number to the word. return map
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        if $string:word$ isn't in $dictionary:map$, $insert:add$ the $string:word$ and number to $dictionary:map$, following the format in $dictionary:map$. if the $string:word$ is in $dictionary:map$ already, $insert:add$ the number to the $string:word$. $return:return$ $dictionary:map$
        """
        
  subset: last_success
- __index_level_0__: 1079
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student25
  submitted_text: This function adds the input "word" and "line_number to the dictionary
    "map". "word" is the key and "line_number" is the value. "line_number" will be
    a list in the dictionary.
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        This function $inserts:adds$ the $input:input$ "$string:word$" and "line_number to the $dictionary:dictionary$ "$dictionary:map$". "$string:word$" is the $key:key$ and "line_number" is the value. "line_number" will be a $list:list$ in the $dictionary:dictionary$.
        """
        
  subset: first_failure
- __index_level_0__: 1080
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student25
  submitted_text: This function adds the input "word" and "line_number to the dictionary
    "map". "word" is the key and "line_number" is the value. "line_number" will be
    a list in the dictionary. The function returns the dictionary.
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        This function $inserts:adds$ the $input:input$ "$string:word$" and "line_number to the $dictionary:dictionary$ "$dictionary:map$". "$string:word$" is the $key:key$ and "line_number" is the value. "line_number" will be a $list:list$ in the $dictionary:dictionary$. The function $returns:returns$ the $dictionary:dictionary$.
        """
        
  subset: last_success
- __index_level_0__: 1082
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student26
  submitted_text: Count the number of unique strings in a set and return the set
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        Count the number of unique $strings:strings$ in a $list:set$ and $return:return$ the $list:set$
        """
        
  subset: last_failure
- __index_level_0__: 1083
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student30
  submitted_text: Add word and line number to map.
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        $Insert:Add$ $string:word$ and line number to $dictionary:map$.
        """
        
  subset: first_failure
- __index_level_0__: 1084
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student30
  submitted_text: |-
    If word is already present in map, add line_number to the array corresponding to the "word" key in map. 

    Otherwise, add line_number as a new value to map, with word as its corresponding key.
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        If $string:word$ is already present in $dictionary:map$, $insert:add$ line_number to the $list:array$ corresponding to the "$string:word$" $key:key$ in $dictionary:map$. 

    Otherwise, $insert:add$ line_number as a new value to $dictionary:map$, with $string:word$ as its corresponding $key:key$.
        """
        
  subset: last_failure
- __index_level_0__: 1085
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student41
  submitted_text: Adds the given word as a key with the given line number as a value
    to the inputted dictionary.
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        $Inserts:Adds$ the given $string:word$ as a $key:key$ with the given line number as a value to the $inputted:inputted$ $dictionary:dictionary$.
        """
        
  subset: first_failure
- __index_level_0__: 1086
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student41
  submitted_text: Adds the given word as a key with the given number as a value to
    the inputted dictionary. Returns the new dictionary.
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        $Inserts:Adds$ the given $string:word$ as a $key:key$ with the given number as a value to the $inputted:inputted$ $dictionary:dictionary$. $Returns:Returns$ the new $dictionary:dictionary$.
        """
        
  subset: last_success
- __index_level_0__: 1087
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student48
  submitted_text: add the word and line number to the map with the word corresponding
    to the line number.
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        $insert:add$ the $string:word$ and line number to the $dictionary:map$ with the $string:word$ corresponding to the line number.
        """
        
  subset: first_failure
- __index_level_0__: 1088
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student51
  submitted_text: Add to the dictionary with word as the key and line number as the
    value
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        $Insert:Add$ to the $dictionary:dictionary$ with $string:word$ as the $key:key$ and line number as the value
        """
        
  subset: first_failure
- __index_level_0__: 1089
  problem: add_word
  entrypoint: add_word
  assertions: |-
    assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}
    assert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}
    assert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}
  username: student51
  submitted_text: Add to the dictionary with word as the key and line number as the
    value. Return map.
  prompt: |-
    def add_word(word, line_number, $dictionary:map$):
        """
        $Insert:Add$ to the $dictionary:dictionary$ with $string:word$ as the $key:key$ and line number as the value. $Return:Return$ $dictionary:map$.
        """
        
  subset: last_success
- __index_level_0__: 1094
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student27
  submitted_text: |-
    A dict object contains keys and values. Check if "Aspen" is one of the keys in a dict. Return "Yup" if it is a key, "Nope" if it is not a key.
  prompt: |-
    def check_for_aspen(trees):
        """
        A $dictionary:dict$ object contains $keys:keys$ and values. Check if "Aspen" is one of the $keys:keys$ in a $dictionary:dict$. $Return:Return$ "Yup" if it is a $key:key$, "Nope" if it is not a $key:key$.
        """
        
  subset: last_success
- __index_level_0__: 1095
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student29
  submitted_text: |-
    Return "Yup" if any of the dictionary keys are "Aspen", return "Nope" otherwise
  prompt: |-
    def check_for_aspen(trees):
        """
        $Return:Return$ "Yup" if any of the $dictionary:dictionary$ $keys:keys$ are "Aspen", $return:return$ "Nope" otherwise
        """
        
  subset: first_success
- __index_level_0__: 1096
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student32
  submitted_text: |-
    Returns "Yup" if there is an "Aspen" in the dictionary, and "Nope" if there isn't
  prompt: |-
    def check_for_aspen(trees):
        """
        $Returns:Returns$ "Yup" if there is an "Aspen" in the $dictionary:dictionary$, and "Nope" if there isn't
        """
        
  subset: first_success
- __index_level_0__: 1097
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student34
  submitted_text: |-
    If "Aspen" appears as an item in the dictionary, output the string "Yup", and if it does not appear output the string "Nope"
  prompt: |-
    def check_for_aspen(trees):
        """
        If "Aspen" appears as an $key:item$ in the $dictionary:dictionary$, $return:output$ the $string:string$ "Yup", and if it does not appear $return:output$ the $string:string$ "Nope"
        """
        
  subset: first_failure
- __index_level_0__: 1103
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student34
  submitted_text: |-
    If it is true that 'Aspen' appears in the dictionary, output "Yup" and if it is false output "Nope"
  prompt: |-
    def check_for_aspen(trees):
        """
        If it is true that 'Aspen' appears in the $dictionary:dictionary$, $return:output$ "Yup" and if it is false $return:output$ "Nope"
        """
        
  subset: last_failure
- __index_level_0__: 1105
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student49
  submitted_text: |-
    Given a dictionary with values, if the total of the values when added together is greater than 10 return Yup, otherwise return Nope
  prompt: |-
    def check_for_aspen(trees):
        """
        Given a $dictionary:dictionary$ with values, if the total of the values when added together is greater than 10 $return:return$ Yup, otherwise $return:return$ Nope
        """
        
  subset: last_success
- __index_level_0__: 1106
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student56
  submitted_text: checks if all the keys in the dictionary are aspen trees
  prompt: |-
    def check_for_aspen(trees):
        """
        checks if all the $keys:keys$ in the $dictionary:dictionary$ are aspen trees
        """
        
  subset: first_failure
- __index_level_0__: 1107
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student62
  submitted_text: |-
    if "Aspen" is a key in the dictionary, return "Yup". If "Aspen is not a key in the dictionary, return "Nope"
  prompt: |-
    def check_for_aspen(trees):
        """
        if "Aspen" is a $key:key$ in the $dictionary:dictionary$, $return:return$ "Yup". If "Aspen is not a $key:key$ in the $dictionary:dictionary$, $return:return$ "Nope"
        """
        
  subset: first_success
- __index_level_0__: 1108
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student66
  submitted_text: if the sting Aspen or Beech appears as a key in the dictionary then
    return Yup as a string if they do not appear then return Nope as a string
  prompt: |-
    def check_for_aspen(trees):
        """
        if the $string:sting$ Aspen or Beech appears as a $key:key$ in the $dictionary:dictionary$ then $return:return$ Yup as a $string:string$ if they do not appear then $return:return$ Nope as a $string:string$
        """
        
  subset: first_success
- __index_level_0__: 1109
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student67
  submitted_text: |-
    If the name is 'Aspen', returns 'Yup'. Otherwise returns 'Nope'.
  prompt: |-
    def check_for_aspen(trees):
        """
        If the name is 'Aspen', $returns:returns$ 'Yup'. Otherwise $returns:returns$ 'Nope'.
        """
        
  subset: first_failure
- __index_level_0__: 1113
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student67
  submitted_text: |-
    If 'Aspen' is in the dictionary, returns 'Yup'. Otherwise returns 'Nope'.
  prompt: |-
    def check_for_aspen(trees):
        """
        If 'Aspen' is in the $dictionary:dictionary$, $returns:returns$ 'Yup'. Otherwise $returns:returns$ 'Nope'.
        """
        
  subset: last_success
- __index_level_0__: 1114
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student68
  submitted_text: |-
    given an array formatted so that there is a String treename key and a number associated with that key, check if there is value that has a treename "Aspen" whose number is greater than 0. return "Yup" if it passes the check and "Nope" if it doesn't 
  prompt: |-
    def check_for_aspen(trees):
        """
        given an $list:array$ formatted so that there is a $String:String$ treename key and a number associated with that key, check if there is value that has a treename "Aspen" whose number is greater than 0. $return:return$ "Yup" if it passes the check and "Nope" if it doesn't 
        """
        
  subset: first_failure
- __index_level_0__: 1117
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student68
  submitted_text: |-
    given a dictionary check if there is a key, "Aspen". return "Yup" if it passes the check and "Nope" if it doesn't 
  prompt: |-
    def check_for_aspen(trees):
        """
        given a $dictionary:dictionary$ check if there is a $key:key$, "Aspen". $return:return$ "Yup" if it passes the check and "Nope" if it doesn't 
        """
        
  subset: last_success
- __index_level_0__: 1118
  problem: check_for_aspen
  entrypoint: check_for_aspen
  assertions: |-
    assert check_for_aspen({"Oak": 3, "Birch": 5, "Elm": 2}) == "Nope"
    assert check_for_aspen({"Aspen": 7, "Beech": 15}) == "Yup"
    assert check_for_aspen({"Beech": 8, "Maple": 2, "Aspen": 3}) == "Yup"
  username: student70
  submitted_text: |-
    if the input contains "Aspen" return "Yup", otherwise return "Nope"
  prompt: |-
    def check_for_aspen(trees):
        """
        if the $parameter:input$ contains "Aspen" $return:return$ "Yup", otherwise $return:return$ "Nope"
        """
        
  subset: first_success
- __index_level_0__: 1121
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student6
  submitted_text: |-
    Three total inputs: a string, a list of punctuation characters, and another punctuation character that was not in the first list. Function checks if each of the characters in the list is contained in the string. Creates a new string where any characters that were in the list are replaces with the character in the third input
  prompt: |-
    def multisplit(s,chars,sep):
        """
        Three total $inputs:inputs$: a $string:string$, a $list:list$ of punctuation $strings:characters$, and another punctuation $string:character$ that was not in the first $list:list$. Function checks if each of the $strings:characters$ in the $list:list$ is contained in the $string:string$. Creates a new $string:string$ where any $strings:characters$ that were in the $list:list$ are replaces with the $string:character$ in the third $input:input$
        """
        
  subset: first_success
- __index_level_0__: 1122
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student7
  submitted_text: 'Takes a string and a list of characters within that string. Characters
    found within the string are replaced with the wanted separating character '
  prompt: |-
    def multisplit(s,chars,sep):
        """
        $Takes:Takes$ a $string:string$ and a $list:list$ of $strings:characters$ within that $string:string$. $Strings:Characters$ found within the $string:string$ are replaced with the wanted separating $string:character$ 
        """
        
  subset: first_success
- __index_level_0__: 1123
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student9
  submitted_text: The function replaces every item in the list that appears in the
    first string with the second string.
  prompt: |-
    def multisplit(s,chars,sep):
        """
        The function replaces every $key:item$ in the $list:list$ that appears in the first $string:string$ with the second $string:string$.
        """
        
  subset: first_success
- __index_level_0__: 1124
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student14
  submitted_text: |-
    for each character in a space between words, replace it with a !
  prompt: |-
    def multisplit(s,chars,sep):
        """
        for each $string:character$ in a space between $strings:words$, replace it with a !
        """
        
  subset: first_success
- __index_level_0__: 1125
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student15
  submitted_text: removes everything in the list and replaces it with what is after
    the list.
  prompt: |-
    def multisplit(s,chars,sep):
        """
        $skips:removes$ everything in the $list:list$ and replaces it with what is after the $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 1126
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student15
  submitted_text: |-
    for every character in the list, looks through the string and if the character is in the string, replaces it with sep.
  prompt: |-
    def multisplit(s,chars,sep):
        """
        for every $string:character$ in the $list:list$, $loops through:looks through$ the $string:string$ and if the $string:character$ is in the $string:string$, replaces it with sep.
        """
        
  subset: last_success
- __index_level_0__: 1127
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student24
  submitted_text: |-
    if the chars are in the string, replace those characters with sep
  prompt: |-
    def multisplit(s,chars,sep):
        """
        if the chars are in the $string:string$, replace those $strings:characters$ with sep
        """
        
  subset: first_success
- __index_level_0__: 1128
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student28
  submitted_text: Write a code that takes three parameters. The first parameter is
    a string s. The second parameter are a list of characters included in the string.
    And the third parameter is a single character. The code should replace the characters
    in the string with the last parameter of the single character.
  prompt: |-
    def multisplit(s,chars,sep):
        """
        Write a code that $takes:takes$ three $parameters:parameters$. The first $parameter:parameter$ is a $string:string$ s. The second $parameter:parameter$ are a $list:list$ of $strings:characters$ included in the $string:string$. And the third $parameter:parameter$ is a single $string:character$. The code should replace the $strings:characters$ in the $string:string$ with the last $parameter:parameter$ of the single $string:character$.
        """
        
  subset: first_success
- __index_level_0__: 1129
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student31
  submitted_text: |-
    Takes a string, a list of strings with length 1, and a separate string with length one called the replacement. Then, for each string in the list of strings, replaces any instance of them in the first string with the replacement string. Then returns this modified string. 
  prompt: |-
    def multisplit(s,chars,sep):
        """
        $Takes:Takes$ a $string:string$, a $list:list$ of $strings:strings$ with length 1, and a separate $string:string$ with length one called the replacement. Then, for each $string:string$ in the $list:list$ of $strings:strings$, replaces any instance of them in the first $string:string$ with the replacement $string:string$. Then $returns:returns$ this modified $string:string$. 
        """
        
  subset: first_success
- __index_level_0__: 1130
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student39
  submitted_text: |-
    The goal for function multisplit(s,chars,sep) is to substitute the grammatical markers or items given to you in a list (chars) and substitute the items in this given list with the string given to you in sep.
  prompt: |-
    def multisplit(s,chars,sep):
        """
        The goal for function multisplit(s,chars,sep) is to substitute the grammatical markers or $keys:items$ given to you in a $list:list$ (chars) and substitute the $keys:items$ in this given $list:list$ with the $string:string$ given to you in sep.
        """
        
  subset: first_success
- __index_level_0__: 1131
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student45
  submitted_text: |-
    Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and insert sep.
  prompt: |-
    def multisplit(s,chars,sep):
        """
        $Takes:Takes$ three $inputs:inputs$: a $string:string$ which we will call s, a $list:list$ of $strings:strings$ which we will call chars, and another $string:string$ which we will call sep. At each point in s where a $string:string$ from chars is present, we split s and $insert:insert$ sep.
        """
        
  subset: first_failure
- __index_level_0__: 1133
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student45
  submitted_text: |-
    Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and replace the character from s at the index where we split with sep.
  prompt: |-
    def multisplit(s,chars,sep):
        """
        $Takes:Takes$ three $inputs:inputs$: a $string:string$ which we will call s, a $list:list$ of $strings:strings$ which we will call chars, and another $string:string$ which we will call sep. At each point in s where a $string:string$ from chars is present, we split s and replace the $string:character$ from s at the index where we split with sep.
        """
        
  subset: last_success
- __index_level_0__: 1134
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student46
  submitted_text: |-
    The function takes in first a string, second a list of characters and third a single character. It then replaces all instances of the characters within list of characters, with the single character in the string.
  prompt: |-
    def multisplit(s,chars,sep):
        """
        The function $takes:takes$ in first a $string:string$, second a $list:list$ of $strings:characters$ and third a single $string:character$. It then replaces all instances of the $strings:characters$ within $list:list$ of $strings:characters$, with the single $string:character$ in the $string:string$.
        """
        
  subset: first_success
- __index_level_0__: 1135
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student47
  submitted_text: '"replace the characters in the second item that appears in the
    first item with the characters from the third item"'
  prompt: |-
    def multisplit(s,chars,sep):
        """
        "replace the $strings:characters$ in the second $key:item$ that appears in the first $key:item$ with the $strings:characters$ from the third $key:item$"
        """
        
  subset: first_success
- __index_level_0__: 1136
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student53
  submitted_text: |-
    loop through s and if s is == to any element in chars, replace the s with sep
  prompt: |-
    def multisplit(s,chars,sep):
        """
        $loop through:loop through$ s and if s is == to any $key:element$ in chars, replace the s with sep
        """
        
  subset: first_success
- __index_level_0__: 1137
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student55
  submitted_text: |-
    Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a comma and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.
  prompt: |-
    def multisplit(s,chars,sep):
        """
        Write a function that $takes:gets$ a $string:string$, a collection of characthers, and a separator $key:element$. The function should $take:get$ only the first $string:string$ separated by a comma and $skip:remove$ the rest of the $input:input$. After that, the $string:string$'s quotes should be replaced by a simple quote. Moreover, the function should $loop through:run through$ the $string:string$ and replace every $string:character$ from the second $parameter:parameter$ of the function and replace by the third $parameter:parameter$ from the function (separator $key:element$). If the second $parameter:parameter$ is empty, just $return:return$ the $string:string$.
        """
        
  subset: first_failure
- __index_level_0__: 1138
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student55
  submitted_text: |-
    Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a double quotes or simple quotes and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.
  prompt: |-
    def multisplit(s,chars,sep):
        """
        Write a function that $takes:gets$ a $string:string$, a collection of characthers, and a separator $key:element$. The function should $take:get$ only the first $string:string$ separated by a double quotes or simple quotes and $skip:remove$ the rest of the $input:input$. After that, the $string:string$'s quotes should be replaced by a simple quote. Moreover, the function should $loop through:run through$ the $string:string$ and replace every $string:character$ from the second $parameter:parameter$ of the function and replace by the third $parameter:parameter$ from the function (separator $key:element$). If the second $parameter:parameter$ is empty, just $return:return$ the $string:string$.
        """
        
  subset: last_success
- __index_level_0__: 1139
  problem: multisplit
  entrypoint: multisplit
  assertions: |-
    assert multisplit("a man! wow- the dog, much hat! much hair!",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'
    assert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'
    assert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'
  username: student58
  submitted_text: use the string and the list to return a string
  prompt: |-
    def multisplit(s,chars,sep):
        """
        use the $string:string$ and the $list:list$ to $return:return$ a $string:string$
        """
        
  subset: first_success
- __index_level_0__: 1142
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student27
  submitted_text: The input will be a list of dictionaries and a string. Remove all
    dictionaries where the key "author" does not match the string. Sort the dictionaries
    by "year" in an ascending order. Return the updated list.
  prompt: |-
    def sortedBooks(books, writer):
        """
        The $parameters:input$ will be a $list:list$ of $dictionaries:dictionaries$ and a $string:string$. Remove all $dictionaries:dictionaries$ where the $key:key$ "author" does not match the $string:string$. Sort the $dictionaries:dictionaries$ by "year" in an ascending order. $Return:Return$ the updated $list:list$.
        """
        
  subset: last_success
- __index_level_0__: 1143
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student29
  submitted_text: Check the second parameter of the input for the string of author
    name. Then return all input entries where the author value corresponds to that
    parameter
  prompt: |-
    def sortedBooks(books, writer):
        """
        Check the second $parameter:parameter$ of the input for the $string:string$ of author name. Then $return:return$ all input entries where the author value corresponds to that $parameter:parameter$
        """
        
  subset: first_failure
- __index_level_0__: 1148
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student29
  submitted_text: |-
    Check the second parameter of the input for the string of author name. Then return a list with all input entries where the author value corresponds to that parameter, sorted in order according to the year value
  prompt: |-
    def sortedBooks(books, writer):
        """
        Check the second $parameter:parameter$ of the input for the $string:string$ of author name. Then $return:return$ a $list:list$ with all input entries where the author value corresponds to that $parameter:parameter$, sorted in order according to the year value
        """
        
  subset: last_success
- __index_level_0__: 1149
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student32
  submitted_text: |-
    Sort the elements of the array by the year value in its dictionary, from highest to lowest. Then removes the last element in the array and returns the rest
  prompt: |-
    def sortedBooks(books, writer):
        """
        Sort the elements of the $list:array$ by the year value in its $dictionary:dictionary$, from highest to lowest. Then removes the last element in the $list:array$ and $returns:returns$ the rest
        """
        
  subset: first_failure
- __index_level_0__: 1151
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student32
  submitted_text: |-
    Returns the list with the a

    Sort the elements of the array by the year value in its dictionary, from lowest to highest. Then removes the last element in the array and returns the rest
  prompt: |-
    def sortedBooks(books, writer):
        """
        $Returns:Returns$ the $list:list$ with the a

    Sort the elements of the $list:array$ by the year value in its $dictionary:dictionary$, from lowest to highest. Then removes the last element in the $list:array$ and $returns:returns$ the rest
        """
        
  subset: last_failure
- __index_level_0__: 1152
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student34
  submitted_text: |-
    if writer is the same as the value for 'author' for an object in books, add the definition to a new list. Order the new list in ascending order based on the value of 'year'
  prompt: |-
    def sortedBooks(books, writer):
        """
        if writer is the same as the value for 'author' for an object in books, $insert:add$ the definition to a new $list:list$. Order the new $list:list$ in ascending order based on the value of 'year'
        """
        
  subset: first_success
- __index_level_0__: 1153
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student49
  submitted_text: |-
    Given a list of dictionaries and a string, return a list of the dictionaries where the string is the value of the author key.
  prompt: |-
    def sortedBooks(books, writer):
        """
        Given a $list:list$ of $dictionaries:dictionaries$ and a $string:string$, $return:return$ a $list:list$ of the $dictionaries:dictionaries$ where the $string:string$ is the value of the author $key:key$.
        """
        
  subset: first_failure
- __index_level_0__: 1155
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student49
  submitted_text: |-
    Given a list of dictionaries and a string, return a list of the dictionaries where the string is the value of the author key and each dictionary in the list is sorted by ascending the values in the year key.
  prompt: |-
    def sortedBooks(books, writer):
        """
        Given a $list:list$ of $dictionaries:dictionaries$ and a $string:string$, $return:return$ a $list:list$ of the $dictionaries:dictionaries$ where the $string:string$ is the value of the author $key:key$ and each $dictionary:dictionary$ in the $list:list$ is sorted by ascending the values in the year $key:key$.
        """
        
  subset: last_success
- __index_level_0__: 1156
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student56
  submitted_text: |-
    iterates through a list of dictionaries and adds the dictionaries with a given writer to a new list, returns the new list
  prompt: |-
    def sortedBooks(books, writer):
        """
        $loops through:iterates through$ a $list:list$ of $dictionaries:dictionaries$ and $inserts:adds$ the $dictionaries:dictionaries$ with a given writer to a new $list:list$, $returns:returns$ the new $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 1157
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student62
  submitted_text: |-
    If the author is equal to the second element, dictionary
  prompt: |-
    def sortedBooks(books, writer):
        """
        If the author is equal to the second element, $dictionary:dictionary$
        """
        
  subset: first_failure
- __index_level_0__: 1159
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student62
  submitted_text: |-
    iterate through each element in list, remove element from list if it does not have the same 'author' as the string provided by user
  prompt: |-
    def sortedBooks(books, writer):
        """
        $loop through:iterate through$ each element in $list:list$, remove element from $list:list$ if it does not have the same 'author' as the $string:string$ $provided:provided$ by user
        """
        
  subset: last_failure
- __index_level_0__: 1160
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student66
  submitted_text: Sort the array list by year with the oldest book first remove the
    book 'The Voyage Out' unless there are two dictionaries within the array list
    then remove the other dictionary
  prompt: |-
    def sortedBooks(books, writer):
        """
        Sort the $list:array list$ by year with the oldest book first remove the book 'The Voyage Out' unless there are two $dictionaries:dictionaries$ within the $list:array list$ then remove the other $dictionary:dictionary$
        """
        
  subset: first_failure
- __index_level_0__: 1161
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student66
  submitted_text: Sort the array list by the key year with smallest number first in
    the array list first remove the book 'The Voyage Out' unless there are two dictionaries
    within the array list then remove the other dictionary.
  prompt: |-
    def sortedBooks(books, writer):
        """
        Sort the $list:array list$ by the $key:key$ year with smallest number first in the $list:array list$ first remove the book 'The Voyage Out' unless there are two $dictionaries:dictionaries$ within the $list:array list$ then remove the other $dictionary:dictionary$.
        """
        
  subset: last_failure
- __index_level_0__: 1162
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student67
  submitted_text: Returns a list of dictionaries of the specified author.
  prompt: |-
    def sortedBooks(books, writer):
        """
        $Returns:Returns$ a $list:list$ of $dictionaries:dictionaries$ of the specified author.
        """
        
  subset: first_failure
- __index_level_0__: 1167
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student68
  submitted_text: |-
    given a dictionary list and a string, return all the dictionaries whose 'author' key value equals the input string 
  prompt: |-
    def sortedBooks(books, writer):
        """
        given a $dictionary:dictionary$ $list:list$ and a $string:string$, $return:return$ all the $dictionaries:dictionaries$ whose 'author' $key:key$ value equals the input $string:string$ 
        """
        
  subset: first_failure
- __index_level_0__: 1169
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student68
  submitted_text: |-
    given a dictionary list and a string, return all the dictionaries whose 'author' key value equals the input string in the order from lowest to highest value of their 'year' key value 
  prompt: |-
    def sortedBooks(books, writer):
        """
        given a $dictionary:dictionary$ $list:list$ and a $string:string$, $return:return$ all the $dictionaries:dictionaries$ whose 'author' $key:key$ value equals the input $string:string$ in the order from lowest to highest value of their 'year' $key:key$ value 
        """
        
  subset: last_success
- __index_level_0__: 1170
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student70
  submitted_text: return all the entries in the dictionary where the value for the
    'author' key is equal to the input writer.
  prompt: |-
    def sortedBooks(books, writer):
        """
        $return:return$ all the $keys:entries$ in the $dictionary:dictionary$ where the value for the 'author' $key:key$ is equal to the $parameter:input$ writer.
        """
        
  subset: first_failure
- __index_level_0__: 1174
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student70
  submitted_text: return all the entries in the input list where the value for the
    'author' key is equal to the input writer. Sort the entries in order of increasing
    year.
  prompt: |-
    def sortedBooks(books, writer):
        """
        $return:return$ all the entries in the input $list:list$ where the value for the 'author' $key:key$ is equal to the $parameter:input$ writer. Sort the entries in order of increasing year.
        """
        
  subset: last_success
- __index_level_0__: 1175
  problem: sortedBooks
  entrypoint: sortedBooks
  assertions: |-
    assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, 
    {'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, 
    {'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], 
    'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},
    {'author': 'Austen', 'book': 'Emma', 'year': 1815}, 
    {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},
      {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], 
      'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]
    assert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],
      'Austen') == []
  username: student78
  submitted_text: |-
    if books is a list of dictionaries, output a list of dictionaries where the input writer matches the key author
  prompt: |-
    def sortedBooks(books, writer):
        """
        if books is a $list:list$ of $dictionaries:dictionaries$, $return:output$ a $list:list$ of $dictionaries:dictionaries$ where the $parameter:input$ writer matches the $key:key$ author
        """
        
  subset: first_failure
- __index_level_0__: 1180
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student23
  submitted_text: |-
    This function takes in a list of dictionaries that have the keys:  nominee, the wins, and noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success within each dictionary.
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        This function $takes:takes$ in a $list:list$ of $dictionaries:dictionaries$ that have the $keys:keys$:  nominee, the wins, and noms. A new $key:attribute$ is given to each $dictionary:dictionary$ which is the success $key:attribute$. It is calculated by dividing wins by noms and creates a float. The $lists:lists$ are then sorted by the highest success within each $dictionary:dictionary$.
        """
        
  subset: last_failure
- __index_level_0__: 1181
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student33
  submitted_text: |-
    The function takes in a list of dictionaries. The function divides the integer in the third place in the dictionary by the integer in the fourth place in the dictionary, adding a new entry to that dictionary called "success" with the output value. It then sorts the dictionary entries by the value in "success," highest to lowest. 
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        The function $takes:takes$ in a $list:list$ of $dictionaries:dictionaries$. The function divides the $integer:integer$ in the third place in the $dictionary:dictionary$ by the $integer:integer$ in the fourth place in the $dictionary:dictionary$, $inserting:adding$ a new $key:entry$ to that $dictionary:dictionary$ called "success" with the $return:output$ value. It then sorts the $dictionary:dictionary$ $keys:entries$ by the value in "success," highest to lowest. 
        """
        
  subset: first_failure
- __index_level_0__: 1183
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student33
  submitted_text: |-
    The function takes in a list of dictionaries. The function divides the value for "wins" in the dictionary by the value for "noms" in the dictionary, adding a new entry to that dictionary called "success" with the output value truncated to two decimal places. It then sorts the dictionary entries by the value in "success," highest to lowest, returning the dictionaries each on a separate line. 
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        The function $takes:takes$ in a $list:list$ of $dictionaries:dictionaries$. The function divides the value for "wins" in the $dictionary:dictionary$ by the value for "noms" in the $dictionary:dictionary$, $inserting:adding$ a new $key:entry$ to that $dictionary:dictionary$ called "success" with the $return:output$ value truncated to two decimal places. It then sorts the $dictionary:dictionary$ $keys:entries$ by the value in "success," highest to lowest, $returning:returning$ the $dictionaries:dictionaries$ each on a separate line. 
        """
        
  subset: last_failure
- __index_level_0__: 1184
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student35
  submitted_text: |-
    The nominations is a list of dictionaries. The function iterates through the dictioanries backwards. A new variable 'success' is created which computes (wins/noms). A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        The nominations is a $list:list$ of $dictionaries:dictionaries$. The function $loops through:iterates through$ the dictioanries backwards. A new $key:variable$ 'success' is created which computes (wins/noms). A new $list:list$ is made. As the $input:input$ $list:list$ is iterated through, the new $list:list$ is $inserted:appended$ with the contents of the $dictionary:dictionary$ along with the corresponding success rate.
        """
        
  subset: first_failure
- __index_level_0__: 1187
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student35
  submitted_text: |-
    The nominations is a list of dictionaries. The function iterates through the dictioanries backwards using a for loop. A new variable 'success' is created which computes (wins/noms) (noms is the key in the dictionary) during each loop run for every dictionary. A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        The nominations is a $list:list$ of $dictionaries:dictionaries$. The function $loops through:iterates through$ the dictioanries backwards using a for loop. A new $key:variable$ 'success' is created which computes (wins/noms) (noms is the $key:key$ in the $dictionary:dictionary$) during each loop run for every $dictionary:dictionary$. A new $list:list$ is made. As the $input:input$ $list:list$ is iterated through, the new $list:list$ is $inserted:appended$ with the contents of the $dictionary:dictionary$ along with the corresponding success rate.
        """
        
  subset: last_failure
- __index_level_0__: 1188
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student40
  submitted_text: the function will divide the number of wins by the number of noms.
    this will be defined by the new variable 'success'. the function will then return
    a list that orders the input in increasing order of success values
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        the function will divide the number of wins by the number of noms. this will be defined by the new $key:variable$ 'success'. the function will then $return:return$ a $list:list$ that orders the $input:input$ in increasing order of success values
        """
        
  subset: first_failure
- __index_level_0__: 1190
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student40
  submitted_text: |-
    the input is a list of dictionaries. the function will divide the value within key 'wins' by the value within key 'noms'. this number will be rounded to two decimal values. the new number will be stores as a new key, 'success'. the function will then return a list that reorders the dictionaries within the original list, in order of highest success value to lowest success value.
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        the $input:input$ is a $list:list$ of $dictionaries:dictionaries$. the function will divide the value within $key:key$ 'wins' by the value within $key:key$ 'noms'. this number will be rounded to two decimal values. the new number will be stores as a new $key:key$, 'success'. the function will then $return:return$ a $list:list$ that reorders the $dictionaries:dictionaries$ within the original $list:list$, in order of highest success value to lowest success value.
        """
        
  subset: last_success
- __index_level_0__: 1191
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student44
  submitted_text: |-
    For every dictionary in the array,
    calculate the 'success' by dividing the value of wins by noms and add it into the dictionary. 
    Sort the array in descending order of the value of 'sucess' and print the array. 
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        For every $dictionary:dictionary$ in the $list:array$,
    calculate the 'success' by dividing the value of wins by noms and $insert:add$ it into the $dictionary:dictionary$. 
    Sort the $list:array$ in descending order of the value of 'sucess' and $return:print$ the $list:array$. 
        """
        
  subset: first_failure
- __index_level_0__: 1192
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student44
  submitted_text: |-
    For every dictionary in the array,
    calculate the 'success' by dividing the value of wins by noms and add it into the dictionary. 
    Sort the array in descending order of the value of 'success' and print the array. 
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        For every $dictionary:dictionary$ in the $list:array$,
    calculate the 'success' by dividing the value of wins by noms and $insert:add$ it into the $dictionary:dictionary$. 
    Sort the $list:array$ in descending order of the value of 'success' and $return:print$ the $list:array$. 
        """
        
  subset: last_failure
- __index_level_0__: 1193
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student50
  submitted_text: Add a new part to each element in the list of dictionaries called
    "success". Calculate success by dividing wins by noms. Return in reverse alphabetical
    order.
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        $Insert:Add$ a new $key:part$ to each $key:element$ in the $list:list$ of $dictionaries:dictionaries$ called "success". Calculate success by dividing wins by noms. $Return:Return$ in reverse alphabetical order.
        """
        
  subset: first_failure
- __index_level_0__: 1195
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student50
  submitted_text: Add a new element to each nominee's dictionary called "success".
    Calculate success by dividing the number of wins by the number of losses. Return
    in reverse order.
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        $Insert:Add$ a new $key:element$ to each nominee's $dictionary:dictionary$ called "success". Calculate success by dividing the number of wins by the number of losses. $Return:Return$ in reverse order.
        """
        
  subset: last_failure
- __index_level_0__: 1196
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student59
  submitted_text: takes a list of dictionaries as an input. returns an ordered list
    of the dictionaries in the input
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        $takes:takes$ a $list:list$ of $dictionaries:dictionaries$ as an $input:input$. $returns:returns$ an ordered $list:list$ of the $dictionaries:dictionaries$ in the $input:input$
        """
        
  subset: first_failure
- __index_level_0__: 1199
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student60
  submitted_text: |-
    This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. 
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        This function $takes:takes$ in a 2d $list:list$ containing $dictionaries:dictionaries$ at its $parameter:parameter$. In each $dictionary:dictionary$ is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then $returns:returns$ this $dictionary:dictionary$ with an $inserted:added$ $parameter:parameter$ of an average of wins to nominations. 
        """
        
  subset: first_failure
- __index_level_0__: 1201
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student60
  submitted_text: |-
    This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions output is a single 2d list.

    As an example. Given  [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}] as a parameter this function outputs [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        This function $takes:takes$ in a 2d $list:list$ containing $dictionaries:dictionaries$ at its $parameter:parameter$. In each $dictionary:dictionary$ is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then $returns:returns$ this $dictionary:dictionary$ with an $inserted:added$ $parameter:parameter$ of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions $return:output$ is a single 2d $list:list$.

    As an example. Given  [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}] as a $parameter:parameter$ this function $returns:outputs$ [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
        """
        
  subset: last_failure
- __index_level_0__: 1202
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student63
  submitted_text: |-
    The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms'. The outputted list will also be arranged in descending order based on the value of 'success'.
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        The function $takes:takes$ in a $list:list$ of $dictionaries:dictionaries$ and $returns:outputs$ the same $list:list$ of $dictionaries:dictionaries$ with an additional $key:key$ for each $dictionary:dictionary$ called 'success', for which the value is the result of dividing the value of the $key:key$ 'wins' and the value of the $key:key$ 'noms'. The $returned:outputted$ $list:list$ will also be arranged in descending order based on the value of 'success'.
        """
        
  subset: first_failure
- __index_level_0__: 1203
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student63
  submitted_text: |-
    The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms', rounded to the second decimal place. The outputted list will also be arranged in descending order based on the value of 'success'.  
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        The function $takes:takes$ in a $list:list$ of $dictionaries:dictionaries$ and $returns:outputs$ the same $list:list$ of $dictionaries:dictionaries$ with an additional $key:key$ for each $dictionary:dictionary$ called 'success', for which the value is the result of dividing the value of the $key:key$ 'wins' and the value of the $key:key$ 'noms', rounded to the second decimal place. The $returned:outputted$ $list:list$ will also be arranged in descending order based on the value of 'success'.  
        """
        
  subset: last_success
- __index_level_0__: 1204
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student64
  submitted_text: |-
    Create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Sort by success in descending order.
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        Create a new $dictionary:dictionary$ and create a new $key:key$ value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Sort by success in descending order.
        """
        
  subset: first_failure
- __index_level_0__: 1206
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student64
  submitted_text: |-
    For each dictionary in list, create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Round success to nearest 2 decimal places. Sort by success in descending order. 
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        For each $dictionary:dictionary$ in $list:list$, create a new $dictionary:dictionary$ and create a new $key:key$ value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Round success to nearest 2 decimal places. Sort by success in descending order. 
        """
        
  subset: last_success
- __index_level_0__: 1207
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student69
  submitted_text: |-
    Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list.
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        $Provide:Enter$ a $list:list$ of $dictionaries:dictionaries$. for every $dictionary:dictionary$ in the $list:list$ of $dictionaries:dictionaries$, divide the values of 'wins' by the value of 'noms'. The result is the value of the new $key:key$ 'success'. $Insert:Add$ the 'success' $key:key$ to each $dictionary:dictionary$ in the $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 1209
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student69
  submitted_text: |-
    Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list, rounded to 2 decimal places. Sort each dictionary in the list alphabetically based on the 'nominee' key. then reverse the order.
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        $Provide:Enter$ a $list:list$ of $dictionaries:dictionaries$. for every $dictionary:dictionary$ in the $list:list$ of $dictionaries:dictionaries$, divide the values of 'wins' by the value of 'noms'. The result is the value of the new $key:key$ 'success'. $Insert:Add$ the 'success' $key:key$ to each $dictionary:dictionary$ in the $list:list$, rounded to 2 decimal places. Sort each $dictionary:dictionary$ in the $list:list$ alphabetically based on the 'nominee' $key:key$. then reverse the order.
        """
        
  subset: last_success
- __index_level_0__: 1210
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student71
  submitted_text: |-
    Access each list from a list of list, and their respective 'wins' and 'noms'. Divide 'wins' with 'noms' to create a new key 'success'. Arrange the list of list from the highest 'success' key. 
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        Access each $list:list$ from a $list:list$ of $list:list$, and their respective 'wins' and 'noms'. Divide 'wins' with 'noms' to create a new $key:key$ 'success'. Arrange the $list:list$ of $list:list$ from the highest 'success' $key:key$. 
        """
        
  subset: first_failure
- __index_level_0__: 1211
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student75
  submitted_text: |-
    def sortBySuccessRate(nominations): takes input 
    [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]
    and prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', indent after each {}
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        def sortBySuccessRate(nominations): $takes:takes$ $input:input$ 
    [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]
    and $returns:prints$ $return:output$ in order of least amount of 'wins', if the same $returns:prints$ based on least amount of 'noms', indent after each {}
        """
        
  subset: first_failure
- __index_level_0__: 1217
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student75
  submitted_text: |-
    def sortBySuccessRate(nominations): takes input 
    [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]
    and prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', 
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        def sortBySuccessRate(nominations): $takes:takes$ $input:input$ 
    [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]
    and $returns:prints$ $return:output$ in order of least amount of 'wins', if the same $returns:prints$ based on least amount of 'noms', 
        """
        
  subset: last_failure
- __index_level_0__: 1218
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student76
  submitted_text: takes the information in the dictionary and positions the different
    lists based on a new variable called 'success' which is inputted at the end and
    is the number of 'wins' divided by the number of 'noms'
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        $takes:takes$ the information in the $dictionary:dictionary$ and positions the different $lists:lists$ based on a new $key:variable$ called 'success' which is $inputted:inputted$ at the end and is the number of 'wins' divided by the number of 'noms'
        """
        
  subset: first_failure
- __index_level_0__: 1219
  problem: sortBySuccessRate
  entrypoint: sortBySuccessRate
  assertions: |-
    assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, 
    {'nominee': 'Beyoncé',  'wins': 28, 'noms': 79}, 
    {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, 
    {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, 
    {'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}]
    assert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41}, 
    {'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},
    {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
    assert sortBySuccessRate([{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79},
     {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyoncé', 'wins': 28, 'noms': 79, 'success': 0.35}, 
    {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]
  username: student79
  submitted_text: you are going to have a list of dictionaries as an input. as an
    output you are going to add another variable called success to each dictionary
    which is the wins divided by noms. you are then going to sort the dictionary according
    to decreasing success.
  prompt: |-
    def sortBySuccessRate(nominations):
        """
        you are going to have a $list:list$ of $dictionaries:dictionaries$ as an $input:input$. as an $return:output$ you are going to $insert:add$ another $key:variable$ called success to each $dictionary:dictionary$ which is the wins divided by noms. you are then going to sort the $dictionary:dictionary$ according to decreasing success.
        """
        
  subset: first_failure
- __index_level_0__: 1227
  problem: layoverTrips
  entrypoint: layoverTrips
  assertions: |-
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'JFK', 'dest':'LAX', 'hrs':1.0},
    {'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
    {'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []
    assert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
     {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},
     {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']
  username: student5
  submitted_text: 'this function will take a list of flights and the origin city and
    return the possible layovers with the staring city. Each item in the list of flights
    will first state the origin city and then state the destination city. If there
    is a flight with a destination city the same as the same as a flight with the
    origin city then add it the the output list. '
  prompt: |-
    def layoverTrips(flights, start):
        """
        this function will $take:take$ a $list:list$ of flights and the origin city and $return:return$ the possible layovers with the staring city. Each $key:item$ in the $list:list$ of flights will first state the origin city and then state the destination city. If there is a flight with a destination city the same as the same as a flight with the origin city then $insert:add$ it the the $return:output$ $list:list$. 
        """
        
  subset: last_failure
- __index_level_0__: 1228
  problem: layoverTrips
  entrypoint: layoverTrips
  assertions: |-
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'JFK', 'dest':'LAX', 'hrs':1.0},
    {'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
    {'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []
    assert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
     {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},
     {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']
  username: student8
  submitted_text: |-
    Finds a dictionary in the given list with a key of "origin" that has the same given string as its value, then takes that dictionary and saves the value stored in 

    Returns a list that 
  prompt: |-
    def layoverTrips(flights, start):
        """
        Finds a $dictionary:dictionary$ in the given $list:list$ with a $key:key$ of "origin" that has the same given $string:string$ as its value, then $takes:takes$ that $dictionary:dictionary$ and saves the value stored in 

    $Returns:Returns$ a $list:list$ that 
        """
        
  subset: first_failure
- __index_level_0__: 1229
  problem: layoverTrips
  entrypoint: layoverTrips
  assertions: |-
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'JFK', 'dest':'LAX', 'hrs':1.0},
    {'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
    {'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []
    assert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
     {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},
     {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']
  username: student11
  submitted_text: |-
    this function will find the start from a key called 'origin' from input list of dictionary named flights. After find this it will find the value from key named 'dest' from same dictionary, and save this by create an output call x. Then find x in flight to see if it's in one of the dictionary's key 'origin'
  prompt: |-
    def layoverTrips(flights, start):
        """
        this function will find the start from a $key:key$ called 'origin' from $input:input$ $list:list$ of $dictionary:dictionary$ named flights. After find this it will find the value from $key:key$ named 'dest' from same $dictionary:dictionary$, and save this by create an $return:output$ call x. Then find x in flight to see if it's in one of the $dictionary:dictionary$'s $key:key$ 'origin'
        """
        
  subset: first_failure
- __index_level_0__: 1230
  problem: layoverTrips
  entrypoint: layoverTrips
  assertions: |-
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'JFK', 'dest':'LAX', 'hrs':1.0},
    {'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
    {'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []
    assert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
     {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},
     {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']
  username: student13
  submitted_text: |-
    Based on the inputted origin, the function will return the possible destinations with one layover location. 
  prompt: |-
    def layoverTrips(flights, start):
        """
        Based on the $inputted:inputted$ origin, the function will $return:return$ the possible destinations with one layover location. 
        """
        
  subset: first_failure
- __index_level_0__: 1232
  problem: layoverTrips
  entrypoint: layoverTrips
  assertions: |-
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'JFK', 'dest':'LAX', 'hrs':1.0},
    {'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
    {'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []
    assert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
     {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},
     {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']
  username: student13
  submitted_text: |-
    Based on the inputted origin, the function will check the given flights and find possible destinations within one layover.
  prompt: |-
    def layoverTrips(flights, start):
        """
        Based on the $inputted:inputted$ origin, the function will check the given flights and find possible destinations within one layover.
        """
        
  subset: last_failure
- __index_level_0__: 1233
  problem: layoverTrips
  entrypoint: layoverTrips
  assertions: |-
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'JFK', 'dest':'LAX', 'hrs':1.0},
    {'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
    {'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []
    assert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
     {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},
     {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']
  username: student16
  submitted_text: |-
    give the location of layover based on the origin, destination, and length of the flight
  prompt: |-
    def layoverTrips(flights, start):
        """
        give the location of layover based on the origin, destination, and length of the flight
        """
        
  subset: first_failure
- __index_level_0__: 1234
  problem: layoverTrips
  entrypoint: layoverTrips
  assertions: |-
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'JFK', 'dest':'LAX', 'hrs':1.0},
    {'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
    {'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []
    assert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
     {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},
     {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']
  username: student16
  submitted_text: |-
    give the location of layover based on the origin, destination, and length of the flight and the start
  prompt: |-
    def layoverTrips(flights, start):
        """
        give the location of layover based on the origin, destination, and length of the flight and the start
        """
        
  subset: last_failure
- __index_level_0__: 1235
  problem: layoverTrips
  entrypoint: layoverTrips
  assertions: |-
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'JFK', 'dest':'LAX', 'hrs':1.0},
    {'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
    {'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []
    assert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
     {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},
     {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']
  username: student22
  submitted_text: takes in a list of dictionaries and outputs a list of values that
    can be made with two key value pair matches
  prompt: |-
    def layoverTrips(flights, start):
        """
        $takes:takes$ in a $list:list$ of $dictionaries:dictionaries$ and $returns:outputs$ a $list:list$ of values that can be made with two $key:key$ value pair matches
        """
        
  subset: first_failure
- __index_level_0__: 1236
  problem: layoverTrips
  entrypoint: layoverTrips
  assertions: |-
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'JFK', 'dest':'LAX', 'hrs':1.0},
    {'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
    {'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']
    assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, 
    {'origin':'BOS', 'dest':'JFK', 'hrs':1.0},
    {'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []
    assert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},
     {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},
     {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']
  username: student22
  submitted_text: |
    takes in a list of dictionaries and a string, uses that string as the value for 'origin', finds a corresponding 'dest' and does that twice. if it can do it twice, output the corresponding 'dest', if not output an empty string
  prompt: |-
    def layoverTrips(flights, start):
        """
        $takes:takes$ in a $list:list$ of $dictionaries:dictionaries$ and a $string:string$, uses that $string:string$ as the value for 'origin', finds a corresponding 'dest' and does that twice. if it can do it twice, $return:output$ the corresponding 'dest', if not $return:output$ an empty $string:string$

        """
        
  subset: last_failure
- __index_level_0__: 1244
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student12
  submitted_text: Return a list of the 0th element each list of scientists if the
    2nd element says "Physics". Sort this list from least to greatest by looking at
    the 1st value in each list within the scientists list. Return this sorted list.
  prompt: |-
    def sort_physicists(scientists):
        """
        $Return:Return$ a $list:list$ of the 0th element each $list:list$ of scientists if the 2nd element says "Physics". Sort this $list:list$ from least to greatest by looking at the 1st value in each $list:list$ within the scientists $list:list$. $Return:Return$ this sorted $list:list$.
        """
        
  subset: last_success
- __index_level_0__: 1245
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student19
  submitted_text: |-
    Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is appended to an output list. After all small lists have been checked, it outputs the output list.
  prompt: |-
    def sort_physicists(scientists):
        """
        $Takes:Takes$ an input $list:list$, which is comprised of smaller $lists:lists$. Each of these smaller $lists:lists$ has three values: the first is a $string:string$, the second one is a number, and the third is a $string:string$. If the third item in any smaller $list:list$ is equal to 'Physics', the first item in that smaller $list:list$ is $inserted:appended$ to an output $list:list$. After all small $lists:lists$ have been checked, it $returns:outputs$ the output $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 1246
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student19
  submitted_text: |-
    Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is added to an output list. The corresponding number is also recorded. If the number for an item which is being added is less than the corresponding number for the first item in the output list, it is added to the beginning of the output list. Otherwise, it is added to the end. After all small lists have been checked, it outputs the output list.
  prompt: |-
    def sort_physicists(scientists):
        """
        $Takes:Takes$ an input $list:list$, which is comprised of smaller $lists:lists$. Each of these smaller $lists:lists$ has three values: the first is a $string:string$, the second one is a number, and the third is a $string:string$. If the third item in any smaller $list:list$ is equal to 'Physics', the first item in that smaller $list:list$ is $inserted:added$ to an output $list:list$. The corresponding number is also recorded. If the number for an item which is being $inserted:added$ is less than the corresponding number for the first item in the output $list:list$, it is $inserted:added$ to the beginning of the output $list:list$. Otherwise, it is $inserted:added$ to the end. After all small $lists:lists$ have been checked, it $returns:outputs$ the output $list:list$.
        """
        
  subset: last_failure
- __index_level_0__: 1247
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student20
  submitted_text: Return a list of the first string in the list of lists that contain
    'Physics'
  prompt: |-
    def sort_physicists(scientists):
        """
        $Return:Return$ a $list:list$ of the first $string:string$ in the $list:list$ of $lists:lists$ that contain 'Physics'
        """
        
  subset: first_failure
- __index_level_0__: 1253
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student36
  submitted_text: If the list contains "Physics" return the first string in order
    of the numbers from lowest to highest
  prompt: |-
    def sort_physicists(scientists):
        """
        If the $list:list$ contains "Physics" $return:return$ the first $string:string$ in order of the numbers from lowest to highest
        """
        
  subset: first_failure
- __index_level_0__: 1256
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student36
  submitted_text: |-
    The internal lists contain name, year graduated and subject. If the subject is "Physics" return just the names, in order of what year they graduated from lowest to highest
  prompt: |-
    def sort_physicists(scientists):
        """
        The internal $lists:lists$ contain name, year graduated and subject. If the subject is "Physics" $return:return$ just the names, in order of what year they graduated from lowest to highest
        """
        
  subset: last_success
- __index_level_0__: 1259
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student38
  submitted_text: |-
    If position in list in scientists has "Peiris", add 'Peiris' to new list. If position in list in scientists has "Ghez", add 'Ghez' to new list. If position in list in scientists has "Strickland", add 'Strickland' to new list. 
  prompt: |-
    def sort_physicists(scientists):
        """
        If position in $list:list$ in scientists has "Peiris", $insert:add$ 'Peiris' to new $list:list$. If position in $list:list$ in scientists has "Ghez", $insert:add$ 'Ghez' to new $list:list$. If position in $list:list$ in scientists has "Strickland", $insert:add$ 'Strickland' to new $list:list$. 
        """
        
  subset: last_failure
- __index_level_0__: 1260
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student42
  submitted_text: |-
    given a list of lists, where each sublist is the name of a scientist, their age, and their field indexed in that order, return a list that contains only the names of scientists whose field is "Physics", such that the scientist's name who has the smallest age appears first in the output list. 
  prompt: |-
    def sort_physicists(scientists):
        """
        given a $list:list$ of $lists:lists$, where each sublist is the name of a scientist, their age, and their field indexed in that order, $return:return$ a $list:list$ that contains only the names of scientists whose field is "Physics", such that the scientist's name who has the smallest age appears first in the output $list:list$. 
        """
        
  subset: first_success
- __index_level_0__: 1261
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student43
  submitted_text: |-
    Loop through each list in scientists: check if the third element in the list is Physics. If true, return the 1st element in the list. If false, do nothing.
  prompt: |-
    def sort_physicists(scientists):
        """
        $Loop through: Loop through$ each $list:list$ in scientists: check if the third element in the $list:list$ is Physics. If true, $return:return$ the 1st element in the $list:list$. If false, do nothing.
        """
        
  subset: first_failure
- __index_level_0__: 1263
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student43
  submitted_text: |-
    Create an empty list A. Loop through each list in scientists: check if the third element in the list is Physics. If true, append the 1st element to list A. If false, do nothing. Now reorder each element in A, according to each element's corresponding list in scientists's second entry value, the order should be from smallest numerical value to the largest numerical value.  Return list A.
  prompt: |-
    def sort_physicists(scientists):
        """
        Create an empty $list:list$ A. $Loop through: Loop through$ each $list:list$ in scientists: check if the third element in the $list:list$ is Physics. If true, $insert:append$ the 1st element to $list:list$ A. If false, do nothing. Now reorder each element in A, according to each element's corresponding $list:list$ in scientists's second entry value, the order should be from smallest numerical value to the largest numerical value.  $Return:Return$ $list:list$ A.
        """
        
  subset: last_failure
- __index_level_0__: 1264
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student54
  submitted_text: |-
    If the list contains "Physics", return the string at index 0. Sort these into a new list based off the integer at index 1.
  prompt: |-
    def sort_physicists(scientists):
        """
        If the $list:list$ contains "Physics", $return:return$ the $string:string$ at index 0. Sort these into a new $list:list$ based off the $integer:integer$ at index 1.
        """
        
  subset: first_failure
- __index_level_0__: 1266
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student54
  submitted_text: |-
    Check that the inner list contains the string "Physics" at index 2. If so, append the string at index 0 to a new list. Sort these into a new list based on the integer at index 1.
  prompt: |-
    def sort_physicists(scientists):
        """
        Check that the inner $list:list$ contains the $string:string$ "Physics" at index 2. If so, $insert:append$ the $string:string$ at index 0 to a new $list:list$. Sort these into a new $list:list$ based on the $integer:integer$ at index 1.
        """
        
  subset: last_success
- __index_level_0__: 1267
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student57
  submitted_text: |-
    when given a list of lists, if last index of list in lists is equal to "Physics", return the first value in list of lists in a new list
  prompt: |-
    def sort_physicists(scientists):
        """
        when given a $list:list$ of $lists:lists$, if last index of $list:list$ in $lists:lists$ is equal to "Physics", $return:return$ the first value in $list:list$ of $lists:lists$ in a new $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 1269
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student57
  submitted_text: |-
    when given a list of lists, if last index of list in lists is equal to "Physics", return the first value in list of lists in a new list. however, if multiple values are to be added to the new list, list in order of ascending order of the second value in list of lists.
  prompt: |-
    def sort_physicists(scientists):
        """
        when given a $list:list$ of $lists:lists$, if last index of $list:list$ in $lists:lists$ is equal to "Physics", $return:return$ the first value in $list:list$ of $lists:lists$ in a new $list:list$. however, if multiple values are to be $inserted:added$ to the new $list:list$, list in order of ascending order of the second value in $list:list$ of $lists:lists$.
        """
        
  subset: last_success
- __index_level_0__: 1270
  problem: sort_physicists
  entrypoint: sort_physicists
  assertions: |-
    assert sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]) == ['Peiris', 'Ghez', 'Strickland']
    assert sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]) == ['Ghez']
  username: student77
  submitted_text: |-
    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is "Physics" in a list.
  prompt: |-
    def sort_physicists(scientists):
        """
        Given a $list:set$ of $lists:lists$ with a scientist, number, and a subject, respectively, only $return:return$ the scientist if the subject is "Physics" in a $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 1279
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student2
  submitted_text: This function prints the start value and adds the value factor until
    it reaches the stop value
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        This function $returns:prints$ the start value and adds the value factor until it reaches the stop value
        """
        
  subset: last_failure
- __index_level_0__: 1280
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student5
  submitted_text: |-
    the function find_multiples will take the input of a starting number, a stopping number, and a factor. The function will start counting at the starting number and count up by the factor, stopping at the stopping number. 
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        the function find_multiples will $take:take$ the $parameters:input$ of a starting number, a stopping number, and a factor. The function will start counting at the starting number and count up by the factor, stopping at the stopping number. 
        """
        
  subset: first_failure
- __index_level_0__: 1281
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student5
  submitted_text: |-
    the function find_multiples will take the input of a starting number, a stopping number, and a factor. The function will start counting at the starting number and count up by the factor, stopping at the stopping number but including it in the list. 
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        the function find_multiples will $take:take$ the $parameters:input$ of a starting number, a stopping number, and a factor. The function will start counting at the starting number and count up by the factor, stopping at the stopping number but including it in the $list:list$. 
        """
        
  subset: last_success
- __index_level_0__: 1282
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student8
  submitted_text: |-
    Finds multiples of the last number in the given list between the first number in the given list and the second number in the given list, inclusive.
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        Finds multiples of the last number in the given $list:list$ between the first number in the given $list:list$ and the second number in the given $list:list$, inclusive.
        """
        
  subset: first_success
- __index_level_0__: 1283
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student11
  submitted_text: |-
    a function ask for start, stop, factor and by adding up start*factor and getting sum of those all the way until we get the stop. Then create a list to hold those values
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        a function ask for start, stop, factor and by adding up start*factor and getting sum of those all the way until we get the stop. Then create a $list:list$ to hold those values
        """
        
  subset: first_failure
- __index_level_0__: 1287
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student11
  submitted_text: |-
    a function ask for three inputs:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we get the sum==stop. Then create a list to hold those values.
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        a function ask for three $parameters:inputs$:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we $take:get$ the sum==stop. Then create a $list:list$ to hold those values.
        """
        
  subset: last_failure
- __index_level_0__: 1288
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student13
  submitted_text: The function will find the multiples of the factor between the range
    of the start and stop numbers.
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        The function will find the multiples of the factor between the range of the start and stop numbers.
        """
        
  subset: first_failure
- __index_level_0__: 1290
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student13
  submitted_text: |-
    The function will find the multiples of the factor between the range of the start and stop numbers, including the start and stop numbers.
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        The function will find the multiples of the factor between the range of the start and stop numbers, including the start and stop numbers.
        """
        
  subset: last_success
- __index_level_0__: 1291
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student16
  submitted_text: |-
    from the start number inputted, count by the factor until the stop number
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        from the start number inputted, count by the factor until the stop number
        """
        
  subset: first_failure
- __index_level_0__: 1294
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student16
  submitted_text: |-
    from the start number inputted, count by the factor until the stop number, including the stop number and return as list
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        from the start number inputted, count by the factor until the stop number, including the stop number and $return:return$ as $list:list$
        """
        
  subset: last_failure
- __index_level_0__: 1295
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student22
  submitted_text: |-
    take in a list of integers [start number, final number, step size] and output a list based on those parameters
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        $take:take in$ a $list:list$ of $integers:integers$ [start number, final number, step size] and $return:output$ a $list:list$ based on those $parameters:parameters$
        """
        
  subset: first_failure
- __index_level_0__: 1298
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student22
  submitted_text: |-
    take in a list of integers [start, stop, factor] and output a list starting at the closest even number to the start, and including the stop number
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        $take:take in$ a $list:list$ of $integers:integers$ [start, stop, factor] and $return:output$ a $list:list$ starting at the closest even number to the start, and including the stop number
        """
        
  subset: last_success
- __index_level_0__: 1299
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student37
  submitted_text: |-
    Write a function which takes three integers, start, stop, and factor, and checks each integer between start and stop inclusively and adds the number to the list Nums if the number is evenly divisible by factor
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        Write a function which $takes:takes$ three $integers:integers$, start, stop, and factor, and checks each $integer:integer$ between start and stop inclusively and $inserts:adds$ the number to the $list:list$ Nums if the number is evenly divisible by factor
        """
        
  subset: first_success
- __index_level_0__: 1300
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student61
  submitted_text: Function returns multiples between first two items in the input
    in multiples of the third item
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        Function $returns:returns$ multiples between first two items in the $parameters:input$ in multiples of the third item
        """
        
  subset: first_failure
- __index_level_0__: 1302
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student61
  submitted_text: Function returns multiples from the first item to the second item
    (including the second item) in the input in multiples of the third item
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        Function $returns:returns$ multiples from the first item to the second item (including the second item) in the $parameters:input$ in multiples of the third item
        """
        
  subset: last_success
- __index_level_0__: 1303
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student72
  submitted_text: Produce a list of multiples with the given input. The first and
    second number of the input are the bounds and the last number is the multiple.
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        $Return:Produce$ a $list:list$ of multiples with the given $parameters:input$. The first and second number of the $parameters:input$ are the bounds and the last number is the multiple.
        """
        
  subset: first_failure
- __index_level_0__: 1304
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student72
  submitted_text: |-
    Produce a list of multiples with the given input. The first number of the input is the starting bound and the second number is the the ending bound, but is included in the list of multiples if applicable. The last number is the multiple.
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        $Return:Produce$ a $list:list$ of multiples with the given $parameters:input$. The first number of the $parameters:input$ is the starting bound and the second number is the the ending bound, but is included in the $list:list$ of multiples if applicable. The last number is the multiple.
        """
        
  subset: last_success
- __index_level_0__: 1305
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student73
  submitted_text: |-
    The start integer is the first given input, the stop integer is the second input, and the factor is the number that is continuously added to the start integer until the integer either equals the stop integer or is close to the stop integer without going over. Each time the factor is added give the item in a list. 
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        The start $integer:integer$ is the first given $parameter:input$, the stop $integer:integer$ is the second $parameter:input$, and the factor is the number that is continuously added to the start $integer:integer$ until the $integer:integer$ either equals the stop $integer:integer$ or is close to the stop $integer:integer$ without going over. Each time the factor is added $insert:give$ the item in a $list:list$. 
        """
        
  subset: first_failure
- __index_level_0__: 1306
  problem: find_multiples
  entrypoint: find_multiples
  assertions: |-
    assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]
    assert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]
    assert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]
  username: student74
  submitted_text: the code should increase the amount of a number by the factor given.
    Where to start and end are also given as inputs
  prompt: |-
    def find_multiples(start,stop,factor):
        """
        the code should increase the amount of a number by the factor given. Where to start and end are also given as $parameters:inputs$
        """
        
  subset: first_failure
- __index_level_0__: 1311
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student23
  submitted_text: |-
    This function takes in a list of the item purchased, the amount of the item purchased, the price for each item, and the overall sales tax. The amount purchased is multiplied with the price for each item, creating a total amount. The sales tax is then multiplied by the outcome of the total amount, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        This function $takes:takes$ in a $list:list$ of the $key:item$ purchased, the amount of the $key:item$ purchased, the price for each $key:item$, and the overall sales tax. The amount purchased is multiplied with the price for each $key:item$, creating a total amount. The sales tax is then multiplied by the outcome of the total amount, and then the result of the multiplication is $inserted:added$ onto the total price. The total price is then $returned:returned$ as the $return:output$.
        """
        
  subset: last_failure
- __index_level_0__: 1312
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student33
  submitted_text: |-
    The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number "sales tax". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a "total". Then the function multiplies the "total" by the "sales tax" and outputs that value added to the "total"
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        The function $takes:takes$ in some number of $lists:lists$ consisting of a $string:string$, an $integer:integer$, and a number, as well as one additional number "sales tax". The function multiplies the $integer:integer$ and the number in each $list:list$ and $inserts:adds$ them together for all the $lists:lists$, giving a "total". Then the function multiplies the "total" by the "sales tax" and $returns:outputs$ that value $inserted:added$ to the "total"
        """
        
  subset: first_failure
- __index_level_0__: 1313
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student33
  submitted_text: |-
    The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number "sales tax". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a "total". Then the function multiplies the "total" by the "sales tax" and outputs that value added to the "total", truncated to two decimal places.
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        The function $takes:takes$ in some number of $lists:lists$ consisting of a $string:string$, an $integer:integer$, and a number, as well as one additional number "sales tax". The function multiplies the $integer:integer$ and the number in each $list:list$ and $inserts:adds$ them together for all the $lists:lists$, giving a "total". Then the function multiplies the "total" by the "sales tax" and $returns:outputs$ that value $inserted:added$ to the "total", truncated to two decimal places.
        """
        
  subset: last_success
- __index_level_0__: 1314
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student35
  submitted_text: |-
    The function is supposed to calculate the total billing amount. From the grocery_list (list of lists), it looks into each individual list and multiplies the numbers provided in each list. Then, it adds all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the output
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        The function is supposed to calculate the total billing amount. From the grocery_list ($list:list$ of $lists:lists$), it looks into each individual $list:list$ and multiplies the numbers $provided:provided$ in each $list:list$. Then, it $inserts:adds$ all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the $return:output$
        """
        
  subset: first_failure
- __index_level_0__: 1315
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student35
  submitted_text: |-
    The function is supposed to calculate the total billing amount. From the grocery_list (list of lists), it looks into each individual list and multiplies the numbers provided in each list. Then, it adds all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the output. The output is rounded to two decimal points.
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        The function is supposed to calculate the total billing amount. From the grocery_list ($list:list$ of $lists:lists$), it looks into each individual $list:list$ and multiplies the numbers $provided:provided$ in each $list:list$. Then, it $inserts:adds$ all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the $return:output$. The $return:output$ is rounded to two decimal points.
        """
        
  subset: last_success
- __index_level_0__: 1316
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student40
  submitted_text: the function will multiply the last two values in each list within
    the list. this value will then be multiplied by the value outside of the list.
    these two numbers will be added to each other and returned
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        the function will multiply the last two values in each $list:list$ within the $list:list$. this value will then be multiplied by the value outside of the $list:list$. these two numbers will be $inserted:added$ to each other and $returned:returned$
        """
        
  subset: first_failure
- __index_level_0__: 1318
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student40
  submitted_text: |-
    the function will multiply the last two values in each list within the list. these numbers will all be added together and stored in variable 'cost'. the variable 'cost' will then be multiplied by the value outside of the list. the product will be stored in a new variable, 'tax'. a new variable, 'total_cost', will contain the sum of the values of 'cost' and 'tax'. the value of total_cost will be rounded to two decimal places. the function will return the value of the variable 'total_cost'.
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        the function will multiply the last two values in each $list:list$ within the $list:list$. these numbers will all be $inserted:added$ together and stored in $key:variable$ 'cost'. the $key:variable$ 'cost' will then be multiplied by the value outside of the $list:list$. the product will be stored in a new $key:variable$, 'tax'. a new $key:variable$, 'total_cost', will contain the sum of the values of 'cost' and 'tax'. the value of total_cost will be rounded to two decimal places. the function will $return:return$ the value of the $key:variable$ 'total_cost'.
        """
        
  subset: last_success
- __index_level_0__: 1319
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student44
  submitted_text: 'Add up the values of the product of the values stored in index
    1 and 2. '
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        $Insert:Add$ up the values of the product of the values stored in index 1 and 2. 
        """
        
  subset: first_failure
- __index_level_0__: 1320
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student44
  submitted_text: 'Add up the values of the product of the values stored in index
    1 and 2 and round to the nearest hundredths if there are more than 2 decimal places. '
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        $Insert:Add$ up the values of the product of the values stored in index 1 and 2 and round to the nearest hundredths if there are more than 2 decimal places. 
        """
        
  subset: last_success
- __index_level_0__: 1321
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student50
  submitted_text: |-
    Receive a list containing items in a grocery list. Each element in the list contains the name of the item, the quantity purchased, and the price of the item. Calculate the total price of each element in the list by multiplying the price by the quantity for each element. Add them up, and multiply the total by the sales tax.
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        $Take:Receive$ a $list:list$ containing $keys:items$ in a grocery $list:list$. Each $key:element$ in the $list:list$ contains the name of the $key:item$, the quantity purchased, and the price of the $key:item$. Calculate the total price of each $key:element$ in the $list:list$ by multiplying the price by the quantity for each $key:element$. $Insert:Add$ them up, and multiply the total by the sales tax.
        """
        
  subset: first_failure
- __index_level_0__: 1322
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student50
  submitted_text: |-
    Receive a list containing items in a grocery list. Each element in the list contains the name of the item, the quantity purchased, and the price of the item. Calculate the total price of each element in the list by multiplying the price by the quantity for each element. Add them up, and multiply the total by the sales tax. Round to the nearest hundredth
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        $Take:Receive$ a $list:list$ containing $keys:items$ in a grocery $list:list$. Each $key:element$ in the $list:list$ contains the name of the $key:item$, the quantity purchased, and the price of the $key:item$. Calculate the total price of each $key:element$ in the $list:list$ by multiplying the price by the quantity for each $key:element$. $Insert:Add$ them up, and multiply the total by the sales tax. Round to the nearest hundredth
        """
        
  subset: last_success
- __index_level_0__: 1323
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student59
  submitted_text: |-
    takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an integer that is the sales tax times the sum of all goods' quantity*price
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        $takes:takes$ a $list:list$ of groceries and a value for sales tax. the $list:list$ of groceries contains a $list:list$ for every $key:item$. each $key:item$'s $list:list$ contains its name, quantity, and price, in that order. $returns:returns$ an $integer:integer$ that is the sales tax times the sum of all goods' quantity*price
        """
        
  subset: first_failure
- __index_level_0__: 1326
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student59
  submitted_text: |-
    takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an float that is the sales tax times times the sum of all goods' quantity*price
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        $takes:takes$ a $list:list$ of groceries and a value for sales tax. the $list:list$ of groceries contains a $list:list$ for every $key:item$. each $key:item$'s $list:list$ contains its name, quantity, and price, in that order. $returns:returns$ an float that is the sales tax times times the sum of all goods' quantity*price
        """
        
  subset: last_failure
- __index_level_0__: 1327
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student60
  submitted_text: |-
    This function takes in a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. 
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        This function $takes:takes$ in a 2d $list:list$ and a double as its $parameters:parameters$. The 2d $list:list$ is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the $keys:items$ $returns:returns$ it. 
        """
        
  subset: first_failure
- __index_level_0__: 1328
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student60
  submitted_text: |-
    This function takes in a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. This function rounds to 2 decimal points
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        This function $takes:takes$ in a 2d $list:list$ and a double as its $parameters:parameters$. The 2d $list:list$ is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the $keys:items$ $returns:returns$ it. This function rounds to 2 decimal points
        """
        
  subset: last_success
- __index_level_0__: 1329
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student63
  submitted_text: |-
    The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by the inputted number. That result is outputted.
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        The function $takes:takes$ in a $list:list$ of $lists:lists$ and a number. For every $list:list$ in the $list:list$, the function multiplies the second value by the third value, sums all of the products of each $list:list$, and multiplies that value by the $inputted:inputted$ number. That result is $returned:outputted$.
        """
        
  subset: first_failure
- __index_level_0__: 1331
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student63
  submitted_text: |-
    The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by 1 plus the inputted number. That result, rounded to two decimal places, is outputted.
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        The function $takes:takes$ in a $list:list$ of $lists:lists$ and a number. For every $list:list$ in the $list:list$, the function multiplies the second value by the third value, sums all of the products of each $list:list$, and multiplies that value by 1 plus the $inputted:inputted$ number. That result, rounded to two decimal places, is $returned:outputted$.
        """
        
  subset: last_success
- __index_level_0__: 1332
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student64
  submitted_text: |-
    In grocery_list, multiple index 0 with index 1, repeat for all lists in grocery_list and add them together. Then, multiple 100% + sale_tax to result.
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        In grocery_list, multiple index 0 with index 1, repeat for all $lists:lists$ in grocery_list and $insert:add$ them together. Then, multiple 100% + sale_tax to result.
        """
        
  subset: first_failure
- __index_level_0__: 1335
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student64
  submitted_text: |-
    In grocery_list, multiple index 1 with index 2, repeat for all lists in grocery_list and add them together. Then, multiple 100% + sale_tax to result. Round to the nearest 2 decimal places.
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        In grocery_list, multiple index 1 with index 2, repeat for all $lists:lists$ in grocery_list and $insert:add$ them together. Then, multiple 100% + sale_tax to result. Round to the nearest 2 decimal places.
        """
        
  subset: last_success
- __index_level_0__: 1336
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student69
  submitted_text: |-
    Enter a list where the 0th index is a list of lists and the 1st index is an integer. every element in the list of lists is a list with a string in the 0th index, integer in the 1st index and integer in the second index. multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        $Provide:Enter$ a $list:list$ where the 0th index is a $list:list$ of $lists:lists$ and the 1st index is an $integer:integer$. every $key:element$ in the $list:list$ of $lists:lists$ is a $list:list$ with a $string:string$ in the 0th index, $integer:integer$ in the 1st index and $integer:integer$ in the second index. multiply the $integers:integers$ in the first and second indexes of each $list:list$ in the $list:list$ of $lists:lists$. $Insert:Add$ each product of each $list:list$. Then, multiply by 1 plus the $integer:integer$ in the first index of the $input:input$ $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 1338
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student69
  submitted_text: |-
    Enter a list where the 0th index is a list of lists and the 1st index is an integer. for every list in the 0th index, for every list multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        $Provide:Enter$ a $list:list$ where the 0th index is a $list:list$ of $lists:lists$ and the 1st index is an $integer:integer$. for every $list:list$ in the 0th index, for every $list:list$ multiply the $integers:integers$ in the first and second indexes of each $list:list$ in the $list:list$ of $lists:lists$. $Insert:Add$ each product of each $list:list$. Then, multiply by 1 plus the $integer:integer$ in the first index of the $input:input$ $list:list$
        """
        
  subset: last_failure
- __index_level_0__: 1339
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student71
  submitted_text: |-
    Go through each list and access last 2 values of each list. Multiply the last 2 values of every list. All resulting values must be added. This value should then be multiplied to 100* sales_tax
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        Go through each $list:list$ and access last 2 values of each $list:list$. Multiply the last 2 values of every $list:list$. All resulting values must be $inserted:added$. This value should then be multiplied to 100* sales_tax
        """
        
  subset: first_failure
- __index_level_0__: 1340
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student75
  submitted_text: |
    def total_bill(grocery_list, sales_tax): takes input 
    [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07
    and adds val 1 and 2 together, then 4 and 5, then 7 and 8, the three new vals are added to val 9 and it outputs the sum
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        def total_bill(grocery_list, sales_tax): $takes:takes$ $input:input$ 
    [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07
    and $inserts:adds$ val 1 and 2 together, then 4 and 5, then 7 and 8, the three new vals are $inserted:added$ to val 9 and it $returns:outputs$ the sum

        """
        
  subset: first_failure
- __index_level_0__: 1341
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student75
  submitted_text: |
    def total_bill(grocery_list, sales_tax): takes input 
    [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07
    and adds val 1 and 2 together, then 4 and 5, then 7 and 8, the three new vals are added to val 9 and it outputs the sum with four digits
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        def total_bill(grocery_list, sales_tax): $takes:takes$ $input:input$ 
    [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07
    and $inserts:adds$ val 1 and 2 together, then 4 and 5, then 7 and 8, the three new vals are $inserted:added$ to val 9 and it $returns:outputs$ the sum with four digits

        """
        
  subset: last_success
- __index_level_0__: 1342
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student76
  submitted_text: Looks through a list to extract the number of products purchased
    in position 1 and multiply it by the unit price in position 2. Then it sums each
    product and multiplies the sum by what ever number is outside the brackets plus
    1
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        Looks through a $list:list$ to extract the number of products purchased in position 1 and multiply it by the unit price in position 2. Then it sums each product and multiplies the sum by what ever number is outside the $lists:brackets$ plus 1
        """
        
  subset: first_failure
- __index_level_0__: 1343
  problem: total_bill
  entrypoint: total_bill
  assertions: |-
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44
    assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43
    assert total_bill([['bread', 2, 3.50]], 0.5) == 10.5
  username: student79
  submitted_text: you will have two inputs a list of lists and the tax rate. for every
    list in the list of lists multiply the second and third item and add all of them
    and then multiply that by the sales tax plus 1
  prompt: |-
    def total_bill(grocery_list, sales_tax):
        """
        you will have two $inputs:inputs$ a $list:list$ of $lists:lists$ and the tax rate. for every $list:list$ in the $list:list$ of $lists:lists$ multiply the second and third $key:item$ and $insert:add$ all of them and then multiply that by the sales tax plus 1
        """
        
  subset: first_failure
- __index_level_0__: 1346
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student23
  submitted_text: |-
    This function takes in a dictionary of words, translating the English words into a different language. THe function then takes in a sentence and uses the dictionary to replace the English words with the translated word from a different language. 
  prompt: |-
    def translate(lexicon,sentence):
        """
        This function $takes:takes$ in a $dictionary:dictionary$ of $strings:words$, translating the English $strings:words$ into a different language. THe function then $takes:takes$ in a sentence and uses the $dictionary:dictionary$ to replace the English $strings:words$ with the translated $string:word$ from a different language. 
        """
        
  subset: last_failure
- __index_level_0__: 1347
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student33
  submitted_text: |-
    The function takes an input of a dictionary and a string of text. For each word in the string, the function finds the word in the dictionary and replaces it with the corresponding dictionary entry. If the word is not found in the dictionary, it is replaced with "UNK."
  prompt: |-
    def translate(lexicon,sentence):
        """
        The function $takes:takes$ an $input:input$ of a $dictionary:dictionary$ and a $string:string$ of text. For each $string:word$ in the $string:string$, the function finds the $string:word$ in the $dictionary:dictionary$ and replaces it with the corresponding $dictionary:dictionary$ $key:entry$. If the $string:word$ is not found in the $dictionary:dictionary$, it is replaced with "UNK."
        """
        
  subset: first_success
- __index_level_0__: 1348
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student35
  submitted_text: |-
    lexicon is a dictionary in which keys are English words and their corresponding values are the translations to some other language. The function is supposed to convert the sentence provided to the other language. For this, the function is supposed to compare each word of the sentence with the dictionary keys and find the value of that key. If a word does not match with any key, the value 'UNK' is assigned. After all the values are derived, a new string is made with those values.
  prompt: |-
    def translate(lexicon,sentence):
        """
        lexicon is a $dictionary:dictionary$ in which $keys:keys$ are English $strings:words$ and their corresponding values are the translations to some other language. The function is supposed to $typecast:convert$ the sentence $provided:provided$ to the other language. For this, the function is supposed to compare each $string:word$ of the sentence with the $dictionary:dictionary$ $keys:keys$ and find the value of that $key:key$. If a $string:word$ does not match with any $key:key$, the value 'UNK' is assigned. After all the values are derived, a new $string:string$ is made with those values.
        """
        
  subset: first_success
- __index_level_0__: 1349
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student40
  submitted_text: |-
    the function will use the dictionary provided. the string provided will correspond to the keys of the dictionary. the function will return a new string that contains values that correspond to the keys. if a key is not in the string, then the return value will be 'UNK'
  prompt: |-
    def translate(lexicon,sentence):
        """
        the function will use the $dictionary:dictionary$ $provided:provided$. the $string:string$ $provided:provided$ will correspond to the $keys:keys$ of the $dictionary:dictionary$. the function will $return:return$ a new $string:string$ that contains values that correspond to the $keys:keys$. if a $key:key$ is not in the $string:string$, then the $return:return$ value will be 'UNK'
        """
        
  subset: first_success
- __index_level_0__: 1350
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student44
  submitted_text: |-
    Separate the string in the second argument between the white spaces and for each smaller string, search if there's a key that matches in the dictionary in the first argument. If there is a matching key, output its value. If there is no key found, output UNK. For each output, separate by a white space. 
  prompt: |-
    def translate(lexicon,sentence):
        """
        Separate the $string:string$ in the second $parameter:argument$ between the white spaces and for each smaller $string:string$, search if there's a $key:key$ that matches in the $dictionary:dictionary$ in the first $parameter:argument$. If there is a matching $key:key$, $return:output$ its value. If there is no $key:key$ found, $return:output$ UNK. For each $return:output$, separate by a white space. 
        """
        
  subset: first_success
- __index_level_0__: 1351
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student50
  submitted_text: A dictionary contains english words and words of another language
    will be inputted. Another input is a sentence that will be translated into the
    other language. Replace the english words with the words of the other language
    in the sentence.
  prompt: |-
    def translate(lexicon,sentence):
        """
        A $dictionary:dictionary$ contains english $strings:words$ and $strings:words$ of another language will be $inputted:inputted$. Another $input:input$ is a sentence that will be translated into the other language. Replace the english $strings:words$ with the $strings:words$ of the other language in the sentence.
        """
        
  subset: first_failure
- __index_level_0__: 1352
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student50
  submitted_text: |-
    A dictionary contains english words and words of another language will be inputted. Another input is a sentence that will be translated into the other language. Replace the english words with the words of the other language in the sentence. If the english word is not present in the dictionary, replace it with "UNK"
  prompt: |-
    def translate(lexicon,sentence):
        """
        A $dictionary:dictionary$ contains english $strings:words$ and $strings:words$ of another language will be $inputted:inputted$. Another $input:input$ is a sentence that will be translated into the other language. Replace the english $strings:words$ with the $strings:words$ of the other language in the sentence. If the english $string:word$ is not present in the $dictionary:dictionary$, replace it with "UNK"
        """
        
  subset: last_success
- __index_level_0__: 1353
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student59
  submitted_text: takes a dictionary and a string as inputs. returns a translated
    version of the inputted string
  prompt: |-
    def translate(lexicon,sentence):
        """
        $takes:takes$ a $dictionary:dictionary$ and a $string:string$ as $inputs:inputs$. $returns:returns$ a translated version of the $inputted:inputted$ $string:string$
        """
        
  subset: first_failure
- __index_level_0__: 1354
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student59
  submitted_text: |-
    takes a dictionary and a string as inputs. returns a translated version of the inputted string. if a word in the inputted string is not in the inputted dictionary, the translated version of that word is 'UNK'
  prompt: |-
    def translate(lexicon,sentence):
        """
        $takes:takes$ a $dictionary:dictionary$ and a $string:string$ as $inputs:inputs$. $returns:returns$ a translated version of the $inputted:inputted$ $string:string$. if a $string:word$ in the $inputted:inputted$ $string:string$ is not in the $inputted:inputted$ $dictionary:dictionary$, the translated version of that $string:word$ is 'UNK'
        """
        
  subset: last_success
- __index_level_0__: 1355
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student60
  submitted_text: |-
    This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then prints the string in french. If a word in the function is not in the dictionary, the function prints 'UNK' for that word. 
  prompt: |-
    def translate(lexicon,sentence):
        """
        This function $takes:takes$ in a $dictionary:dictionary$ and a $string:string$ as $parameters:parameters$. The $dictionary:dictionary$ contains the translation of given english $strings:words$. The function then $returns:prints$ the $string:string$ in french. If a $string:word$ in the function is not in the $dictionary:dictionary$, the function $returns:prints$ 'UNK' for that $string:word$. 
        """
        
  subset: first_failure
- __index_level_0__: 1358
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student60
  submitted_text: |-
    This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then returns the string in french. If a word in the function is not in the dictionary, the function returns 'UNK' for that word. 
  prompt: |-
    def translate(lexicon,sentence):
        """
        This function $takes:takes$ in a $dictionary:dictionary$ and a $string:string$ as $parameters:parameters$. The $dictionary:dictionary$ contains the translation of given english $strings:words$. The function then $returns:returns$ the $string:string$ in french. If a $string:word$ in the function is not in the $dictionary:dictionary$, the function $returns:returns$ 'UNK' for that $string:word$. 
        """
        
  subset: last_success
- __index_level_0__: 1359
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student63
  submitted_text: |-
    The function takes in a dictionary and a string for which each word in the string is a key in the dictionary. It outputs a string that substitutes the original word for the dictionary value associated with that key. If a word in the original string is not found in the dictionary, the substituted word will be 'UNK'.
  prompt: |-
    def translate(lexicon,sentence):
        """
        The function $takes:takes$ in a $dictionary:dictionary$ and a $string:string$ for which each $string:word$ in the $string:string$ is a $key:key$ in the $dictionary:dictionary$. It $returns:outputs$ a $string:string$ that substitutes the original $string:word$ for the $dictionary:dictionary$ value associated with that $key:key$. If a $string:word$ in the original $string:string$ is not found in the $dictionary:dictionary$, the substituted $string:word$ will be 'UNK'.
        """
        
  subset: first_failure
- __index_level_0__: 1360
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student64
  submitted_text: |-
    For each word in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.
  prompt: |-
    def translate(lexicon,sentence):
        """
        For each $string:word$ in sentence, find $key:key$ value in lexicon and create new $string:string$ with its value pair. If the $string:word$ is not in lexicon, $insert:append$ 'UNK' to new $string:string$.
        """
        
  subset: first_failure
- __index_level_0__: 1362
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student64
  submitted_text: |-
    For every word in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.
  prompt: |-
    def translate(lexicon,sentence):
        """
        For every $string:word$ in sentence, find $key:key$ value in lexicon and create new $string:string$ with its value pair. If the $string:word$ is not in lexicon, $insert:append$ 'UNK' to new $string:string$.
        """
        
  subset: last_failure
- __index_level_0__: 1363
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student69
  submitted_text: |-
    Enter a string. Separate the string on spaces and add each group of strings to a list. if the word in the list matches a key in the dictionary, print the value of that key.
  prompt: |-
    def translate(lexicon,sentence):
        """
        $Provide:Enter$ a $string:string$. Separate the $string:string$ on spaces and $insert:add$ each group of $strings:strings$ to a $list:list$. if the $string:word$ in the $list:list$ matches a $key:key$ in the $dictionary:dictionary$, $return:print$ the value of that $key:key$.
        """
        
  subset: first_failure
- __index_level_0__: 1364
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student69
  submitted_text: |-
    Enter a string. Separate the string on spaces and add each word to a list. For every word in the list, if the word matches a key in the dictionary, print the value of that key.
  prompt: |-
    def translate(lexicon,sentence):
        """
        $Provide:Enter$ a $string:string$. Separate the $string:string$ on spaces and $insert:add$ each $string:word$ to a $list:list$. For every $string:word$ in the $list:list$, if the $string:word$ matches a $key:key$ in the $dictionary:dictionary$, $return:print$ the value of that $key:key$.
        """
        
  subset: last_failure
- __index_level_0__: 1365
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student71
  submitted_text: 'Takes in a given dictionary in which keys are English words and
    values are French translations and English sentence. Output is the French translation
    of the English sentence. '
  prompt: |-
    def translate(lexicon,sentence):
        """
        $Takes:Takes$ in a given $dictionary:dictionary$ in which $keys:keys$ are English $strings:words$ and values are French translations and English sentence. $Return:Output$ is the French translation of the English sentence. 
        """
        
  subset: first_failure
- __index_level_0__: 1366
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student75
  submitted_text: |-
    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=output
    def translate(lexicon,sentence): defines {"one"="un", "two"="deux", "three"="trois", "four="quatre", "I"="je", "you"="tu", "and"="et", "cats"="chats", "love"="aime", "like"=aime", "my"="mes"}, this program will run the phrase input="I like my three cats" through def translate and output={} translation
  prompt: |-
    def translate(lexicon,sentence):
        """
        def translate(lexicon,sentence): pairs an english $string:word$ with its french translation to create the ability to $input:input$ english and $return:output$ french as $input:input$=$return:output$
    def translate(lexicon,sentence): defines {"one"="un", "two"="deux", "three"="trois", "four="quatre", "I"="je", "you"="tu", "and"="et", "cats"="chats", "love"="aime", "like"=aime", "my"="mes"}, this program will run the $string:phrase$ input="I like my three cats" through def translate and output={} translation
        """
        
  subset: first_failure
- __index_level_0__: 1369
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student75
  submitted_text: |-
    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=output
    def translate(lexicon,sentence): defines {"one"="un", "two"="deux", "three"="trois", "four="quatre", "I"="je", "you"="tu", "and"="et", "cats"="chats", "love"="aime", "like"=aime", "my"="mes"}, this program will run the phrase input="I like my three cats" through def translate and output={} translation
  prompt: |-
    def translate(lexicon,sentence):
        """
        def translate(lexicon,sentence): pairs an english $string:word$ with its french translation to create the ability to $input:input$ english and $return:output$ french as $input:input$=$return:output$
    def translate(lexicon,sentence): defines {"one"="un", "two"="deux", "three"="trois", "four="quatre", "I"="je", "you"="tu", "and"="et", "cats"="chats", "love"="aime", "like"=aime", "my"="mes"}, this program will run the $string:phrase$ input="I like my three cats" through def translate and output={} translation
        """
        
  subset: last_failure
- __index_level_0__: 1370
  problem: translate
  entrypoint: translate
  assertions: |-
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three cats") == 'je aime mes trois chats'
    assert translate({"one":"un", "two":"deux", "three":"trois", "four":"quatre",
      "I":"je", "you":"tu", "and":"et", "cats":"chats", "love":"aime",
      "like":"aime", "my":"mes"}, 
      "I like my three marmots") == 'je aime mes trois UNK'
    assert translate({"one":"ett", "two":"tva", "three":"tre", "four":"fyra"},
    "five six seven eight") == 'UNK UNK UNK UNK'
  username: student76
  submitted_text: looks through a dictionary for english words and their translations
    and returns the translations if they are present in the dictionary. If they are
    not present it returns 'UNK'
  prompt: |-
    def translate(lexicon,sentence):
        """
        $loops through:looks through$ a $dictionary:dictionary$ for english $strings:words$ and their translations and $returns:returns$ the translations if they are present in the $dictionary:dictionary$. If they are not present it $returns:returns$ 'UNK'
        """
        
  subset: first_success
- __index_level_0__: 1374
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student6
  submitted_text: Input of a nested list. Inner lists contain a string 'Name' and
    an integer. Outer is a list of all inner lists. Outputs a list containing each
    'Name' in an order based on the number associated with each name in the inner
    list
  prompt: |-
    def topScores(lst):
        """
        $Input:Input$ of a nested $list:list$. Inner $lists:lists$ contain a $string:string$ 'Name' and an $integer:integer$. Outer is a $list:list$ of all inner $lists:lists$. $Returns:Outputs$ a $list:list$ containing each 'Name' in an order based on the number associated with each name in the inner $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 1376
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student7
  submitted_text: |
    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people in from oldest to youngest, as long as there is less than a 10-year gap between the two. 
  prompt: |-
    def topScores(lst):
        """
        Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. $Returns:Returns$ a $list:list$ of the names of people in from oldest to youngest, as long as there is less than a 10-year gap between the two. 

        """
        
  subset: first_failure
- __index_level_0__: 1395
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student9
  submitted_text: |-
    The function finds the highest number in the list, and prints the string next to it in order from highest number to lowest number.
  prompt: |-
    def topScores(lst):
        """
        The function finds the highest number in the $list:list$, and $returns:prints$ the $string:string$ next to it in order from highest number to lowest number.
        """
        
  subset: first_failure
- __index_level_0__: 1403
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student9
  submitted_text: The function reads the numbers in the list. The numbers that are
    greater than 76 are ordered from highest to lowest. The strings are then printed
    in the order of their corresponding numbers.
  prompt: |-
    def topScores(lst):
        """
        The function reads the numbers in the $list:list$. The numbers that are greater than 76 are ordered from highest to lowest. The $strings:strings$ are then $returned:printed$ in the order of their corresponding numbers.
        """
        
  subset: last_failure
- __index_level_0__: 1404
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student14
  submitted_text: output the first four names with a number above 80
  prompt: |-
    def topScores(lst):
        """
        $return:output$ the first four names with a number above 80
        """
        
  subset: first_failure
- __index_level_0__: 1406
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student14
  submitted_text: |-
    if the first item in the string is equal to or greater than 80, print the second item in the string
  prompt: |-
    def topScores(lst):
        """
        if the first $key:item$ in the $string:string$ is equal to or greater than 80, $return:print$ the second $key:item$ in the $string:string$
        """
        
  subset: last_failure
- __index_level_0__: 1407
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student15
  submitted_text: |-
    For each list in lst, if the number is greater than 76, adds the name to a list. Returns the list.
  prompt: |-
    def topScores(lst):
        """
        For each $list:list$ in lst, if the number is greater than 76, $inserts:adds$ the name to a $list:list$. $Returns:Returns$ the $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 1419
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student15
  submitted_text: |+
    For each list in list, sorts the lists in reverse numerical order by the number in index 0. If the length of the list is 5, adds the top 3 names to a second list. If the length of the list is 8, adds the top 5 names to a second list. If the length of the list is 3, adds none of the names

  prompt: |-
    def topScores(lst):
        """
        For each $list:list$ in $list:list$, sorts the $lists:lists$ in reverse numerical order by the number in index 0. If the length of the $list:list$ is 5, $inserts:adds$ the top 3 names to a second $list:list$. If the length of the $list:list$ is 8, $inserts:adds$ the top 5 names to a second $list:list$. If the length of the $list:list$ is 3, $inserts:adds$ none of the names


        """
        
  subset: last_failure
- __index_level_0__: 1420
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student24
  submitted_text: Return the name of a person in the list who scored 80 or above.
  prompt: |-
    def topScores(lst):
        """
        $Return:Return$ the name of a person in the $list:list$ who scored 80 or above.
        """
        
  subset: first_failure
- __index_level_0__: 1421
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student24
  submitted_text: |-
    Check each list inside the list given, and if the list[0] is greater than or equal to 80, return a list of that list[1]
  prompt: |-
    def topScores(lst):
        """
        Check each $list:list$ inside the $list:list$ given, and if the list[0] is greater than or equal to 80, $return:return$ a $list:list$ of that list[1]
        """
        
  subset: last_failure
- __index_level_0__: 1422
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student28
  submitted_text: |-
    Write a code that has one parameter, 1st is a list. 1st consists of an integer representing a test score and it consists of a string that represents a name. The code should only list out the names of the people with the highest test scores.  
  prompt: |-
    def topScores(lst):
        """
        Write a code that has one $parameter:parameter$, 1st is a $list:list$. 1st consists of an $integer:integer$ representing a test score and it consists of a $string:string$ that represents a name. The code should only $list:list$ out the names of the people with the highest test scores.  
        """
        
  subset: first_failure
- __index_level_0__: 1423
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student31
  submitted_text: |-
    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Returns a list of the names whose corresponding scores were the highest, and were a minimum of 80.
  prompt: |-
    def topScores(lst):
        """
        $Takes:Takes$ a $list:list$ containing multiple internal $lists:lists$, with each internal $list:list$ containing two $keys:items$: an $integer:integer$ score and a $string:string$ name. $Returns:Returns$ a $list:list$ of the names whose corresponding scores were the highest, and were a minimum of 80.
        """
        
  subset: first_failure
- __index_level_0__: 1426
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student31
  submitted_text: |-
    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Sorts this list from highest integer score to lowest, and returns a list of the names whose corresponding scores were a minimum of 80, with a maximum list length of 5.
  prompt: |-
    def topScores(lst):
        """
        $Takes:Takes$ a $list:list$ containing multiple internal $lists:lists$, with each internal $list:list$ containing two $keys:items$: an $integer:integer$ score and a $string:string$ name. Sorts this $list:list$ from highest $integer:integer$ score to lowest, and $returns:returns$ a $list:list$ of the names whose corresponding scores were a minimum of 80, with a maximum $list:list$ length of 5.
        """
        
  subset: last_success
- __index_level_0__: 1427
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student39
  submitted_text: 'The goal for the function topScores is when provided a list including
    a numerical scores and names is to return the names of those who have the highest
    scores '
  prompt: |-
    def topScores(lst):
        """
        The goal for the function topScores is when $provided:provided$ a $list:list$ including a numerical scores and names is to $return:return$ the names of those who have the highest scores 
        """
        
  subset: first_failure
- __index_level_0__: 1428
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student39
  submitted_text: The goal for the function topScores is when provided a list including
    a numerical scores and names is to return the names of those who have the highest
    scores above 80
  prompt: |-
    def topScores(lst):
        """
        The goal for the function topScores is when $provided:provided$ a $list:list$ including a numerical scores and names is to $return:return$ the names of those who have the highest scores above 80
        """
        
  subset: last_failure
- __index_level_0__: 1429
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student45
  submitted_text: |-
    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list to a new list of lists called newLst. Then sort newLst and remove all but the three lists with the highest values at index 0.
  prompt: |-
    def topScores(lst):
        """
        $Takes:Takes$ a $list:list$ of $lists:lists$, which we will call lst. For each $list:list$ in lst, if the value at index 0 is greater than or equal to 80, $insert:add$ the $list:list$ to a new $list:list$ of $lists:lists$ called newLst. Then sort newLst and $skip:remove$ all but the three $lists:lists$ with the highest values at index 0.
        """
        
  subset: first_failure
- __index_level_0__: 1436
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student45
  submitted_text: |-
    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. Output finalLst.
  prompt: |-
    def topScores(lst):
        """
        $Takes:Takes$ a $list:list$ of $lists:lists$, which we will call lst. For each $list:list$ in lst, if the value at index 0 is greater than or equal to 80, $insert:add$ the $list:list$ at index 1 to a new $list:list$ of $lists:lists$ called newLst. Then sort newLst from highest to lowest. If there are more than five $lists:lists$ in newLst, $skip:remove$ any $lists:lists$ after the five $lists:lists$ with the highest values at index 0. Then make a new $list:list$ called finalLst. For each $list:list$ in newLst, $insert:add$ the value at index 1 to finalLst. $Return:Output$ finalLst.
        """
        
  subset: last_failure
- __index_level_0__: 1437
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student46
  submitted_text: |-
    The function takes in a list of two item lists, where the first item is an integer and the second is a string. Eliminate any lists that integers are below 80, then order up to the largest five integers and output the strings associated with them.
  prompt: |-
    def topScores(lst):
        """
        The function $takes:takes$ in a $list:list$ of two $key:item$ $lists:lists$, where the first $key:item$ is an $integer:integer$ and the second is a $string:string$. Eliminate any $lists:lists$ that $integers:integers$ are below 80, then order up to the largest five $integers:integers$ and $return:output$ the $strings:strings$ associated with them.
        """
        
  subset: first_success
- __index_level_0__: 1439
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student47
  submitted_text: |-
    "produce all the strings that are associated with 100, 99, 97, 95, 92 in order"
  prompt: |-
    def topScores(lst):
        """
        "$return:produce$ all the $strings:strings$ that are associated with 100, 99, 97, 95, 92 in order"
        """
        
  subset: last_failure
- __index_level_0__: 1440
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student53
  submitted_text: |-
    taken lst, return the list of strings whose integer is greater than 80
  prompt: |-
    def topScores(lst):
        """
        taken lst, $return:return$ the $list:list$ of $strings:strings$ whose $integer:integer$ is greater than 80
        """
        
  subset: first_failure
- __index_level_0__: 1450
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student53
  submitted_text: |-
    if 0th index of the nested list of lst is greater than or equal to 80, return a list of the 1st index in the order from the largest 0th index integer. Return up to a list of 5 items. 
  prompt: |-
    def topScores(lst):
        """
        if 0th index of the nested $list:list$ of lst is greater than or equal to 80, $return:return$ a $list:list$ of the 1st index in the order from the largest 0th index $integer:integer$. $Return:Return$ up to a $list:list$ of 5 $keys:items$. 
        """
        
  subset: last_success
- __index_level_0__: 1451
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student55
  submitted_text: |-
    Write a function that gets a list of lists of grades and names of students, and returns the name from the highest grade to the lowest, if only the grades are higher than 80.
  prompt: |-
    def topScores(lst):
        """
        Write a function that $takes:gets$ a $list:list$ of $lists:lists$ of grades and names of students, and $returns:returns$ the name from the highest grade to the lowest, if only the grades are higher than 80.
        """
        
  subset: first_failure
- __index_level_0__: 1455
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student55
  submitted_text: Write a function that runs through a list of lists with 2 elements.
    The first element is the grade and the second element is the name of the student.
    This function returns the names of 5 students with grades higher or equal to 80.
    The order of the return is from the highest grade to the lowest one.
  prompt: |-
    def topScores(lst):
        """
        Write a function that $loops through:runs through$ a $list:list$ of $lists:lists$ with 2 $keys:elements$. The first $key:element$ is the grade and the second $key:element$ is the name of the student. This function $returns:returns$ the names of 5 students with grades higher or equal to 80. The order of the $return:return$ is from the highest grade to the lowest one.
        """
        
  subset: last_success
- __index_level_0__: 1457
  problem: topScores
  entrypoint: topScores
  assertions: |-
    assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']
    assert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']
    assert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []
  username: student65
  submitted_text: |-
    This function has a list of lists of length 2 as inputs. If the first entry in the list (the score) is greater than 80, add the second entry in the list (the name) to a list to be output at the end.
  prompt: |-
    def topScores(lst):
        """
        This function has a $list:list$ of $lists:lists$ of length 2 as $inputs:inputs$. If the first $key:entry$ in the $list:list$ (the score) is greater than 80, $insert:add$ the second $key:entry$ in the $list:list$ (the name) to a $list:list$ to be $return:output$ at the end.
        """
        
  subset: first_failure
- __index_level_0__: 1467
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student23
  submitted_text: 'This function inputs two lists. The letter that comes first within
    the alphabet in the first list adds on the lowest number of the second list and
    then the letters in the alphabet. This keeps going and forms a new list with all
    the combined letters and numbers. '
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        This function $inputs:inputs$ two $lists:lists$. The letter that comes first within the alphabet in the first $list:list$ $inserts:adds$ on the lowest number of the second $list:list$ and then the letters in the alphabet. This keeps going and forms a new $list:list$ with all the $concatenated:combined$ letters and numbers. 
        """
        
  subset: last_failure
- __index_level_0__: 1468
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student33
  submitted_text: |-
    The function takes a series of input strings and another series of input strings, and then splices each string from the first series with each string from the second series
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        The function $takes:takes$ a series of $input:input$ $strings:strings$ and another series of $input:input$ $strings:strings$, and then $concatenates:splices$ each $string:string$ from the first series with each $string:string$ from the second series
        """
        
  subset: first_failure
- __index_level_0__: 1469
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student33
  submitted_text: The function takes a series of input strings "suits" and another
    series of input strings "vals". It sorts each series first into alphabetical order
    followed by in order of increasing numerical value. Then it splices each string
    from the first series with each string from the second series
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        The function $takes:takes$ a series of $input:input$ $strings:strings$ "suits" and another series of $input:input$ $strings:strings$ "vals". It sorts each series first into alphabetical order followed by in order of increasing numerical value. Then it $concatenates:splices$ each $string:string$ from the first series with each $string:string$ from the second series
        """
        
  subset: last_success
- __index_level_0__: 1470
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student35
  submitted_text: |-
    From the first list of parameters, the function takes the last element first and goes backwards towards the first element. It attaches these elements with the inputs given in the second list. A new list is made which is appended continuously with these new attachments. This goes on until the elements of the first list are exhausted.
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        From the first $list:list$ of $parameters:parameters$, the function $takes:takes$ the last $key:element$ first and goes backwards towards the first $key:element$. It $inserts:attaches$ these $keys:elements$ with the $inputs:inputs$ given in the second $list:list$. A new $list:list$ is made which is $inserted:appended$ continuously with these new attachments. This goes on until the $keys:elements$ of the first $list:list$ are exhausted.
        """
        
  subset: first_failure
- __index_level_0__: 1473
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student35
  submitted_text: |-
    From the first list of parameters, the function takes the last element first and goes backwards towards the first element. It attaches these elements with the inputs given in the second list. A new list is made which is appended continuously with these new attachments. No function is called for this but rather the two stings which are to be attached are concatenated. During concatenation, the element of the first list is put first and the element of the second list is put second. The suit comes first and then the val for every concatenation. And the suits list starts from backwards. This goes on until the elements of the first list are exhausted.
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        From the first $list:list$ of $parameters:parameters$, the function $takes:takes$ the last $key:element$ first and goes backwards towards the first $key:element$. It $inserts:attaches$ these $keys:elements$ with the $inputs:inputs$ given in the second $list:list$. A new $list:list$ is made which is $inserted:appended$ continuously with these new attachments. No function is called for this but rather the two stings which are to be $inserted:attached$ are $concatenated:concatenated$. During concatenation, the $key:element$ of the first $list:list$ is put first and the $key:element$ of the second $list:list$ is put second. The suit comes first and then the val for every concatenation. And the suits $list:list$ starts from backwards. This goes on until the $keys:elements$ of the first $list:list$ are exhausted.
        """
        
  subset: last_failure
- __index_level_0__: 1474
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student40
  submitted_text: |-
    when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list.
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        when given two $lists:lists$ containing $strings:strings$, the function will $return:return$ 1 $list:list$. Each individual $string:string$ within the first $list:list$ will be $concatenated:combined$ with each $string:string$ in the other $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 1478
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student40
  submitted_text: |-
    when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second. the new strings in the new list will appear in alphabetical order. if multiple strings have the same first letter, then they will appear in numerical order.
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        when given two $lists:lists$ containing $strings:strings$, the function will $return:return$ 1 $list:list$. Each individual $string:string$ within the first $list:list$ will be $concatenated:combined$ with each $string:string$ in the other $list:list$, with letters appearing first and numbers appearing second. the new $strings:strings$ in the new $list:list$ will appear in alphabetical order. if multiple $strings:strings$ have the same first letter, then they will appear in numerical order.
        """
        
  subset: last_success
- __index_level_0__: 1479
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student44
  submitted_text: |-
    For every value in the first array, starting from the last one, 
    concatenate with each value in the second array. 
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        For every value in the first $list:array$, starting from the last one, 
    $concatenate:concatenate$ with each value in the second $list:array$. 
        """
        
  subset: first_failure
- __index_level_0__: 1482
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student44
  submitted_text: |-
    Starting with the first value in the second array,
    concatenate it with each value of the first array starting with its last one. 
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        Starting with the first value in the second $list:array$,
    $concatenate:concatenate$ it with each value of the first $list:array$ starting with its last one. 
        """
        
  subset: last_failure
- __index_level_0__: 1483
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student50
  submitted_text: |-
    There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order.
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        There are two $lists:lists$ of $strings:strings$. $Concatenate:Combine$ the first $key:element$ with the first $list:list$ with the first $key:element$ in the second $list:list$ and $insert:add$ that to a new $list:list$, which will be $returned:returned$. Keep $inserting:adding$ the first $key:element$ of the first $list:list$ to each $key:element$ of the second $list:list$ and $insert:add$ each addition to the new $list:list$. $Return:Return$ the $list:list$ in alphabetical order.
        """
        
  subset: first_failure
- __index_level_0__: 1487
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student50
  submitted_text: |-
    There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Reorder the new list to make it in alphabetical and numerical order, then return
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        There are two $lists:lists$ of $strings:strings$. $Concatenate:Combine$ the first $key:element$ with the first $list:list$ with the first $key:element$ in the second $list:list$ and $insert:add$ that to a new $list:list$, which will be $returned:returned$ [ex, if the first $key:element$ of the first $list:list$ is F and an $key:element$ of the second $list:list$ is 7, $concatenate:combine$ them like F7]. Keep $inserting:adding$ the first $key:element$ of the first $list:list$ to each $key:element$ of the second $list:list$ and $insert:add$ each addition to the new $list:list$. Reorder the new $list:list$ to make it in alphabetical and numerical order, then $return:return$
        """
        
  subset: last_success
- __index_level_0__: 1488
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student59
  submitted_text: takes a list of suits and a list of values as inputs. returns a
    list of all possible combinations of suits and values.
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        $takes:takes$ a $list:list$ of suits and a $list:list$ of values as $inputs:inputs$. $returns:returns$ a $list:list$ of all possible combinations of suits and values.
        """
        
  subset: first_failure
- __index_level_0__: 1492
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student59
  submitted_text: takes a list of suits and a list of values as inputs. returns an
    ordered list of all possible combinations of suits and values
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        $takes:takes$ a $list:list$ of suits and a $list:list$ of values as $inputs:inputs$. $returns:returns$ an ordered $list:list$ of all possible combinations of suits and values
        """
        
  subset: last_failure
- __index_level_0__: 1493
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student60
  submitted_text: 'This function inputs suits and vals as a list as its parameters.
    This function prints out every combination of these parameters. '
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        This function $inputs:inputs$ suits and vals as a $list:list$ as its $parameters:parameters$. This function $returns:prints$ out every combination of these $parameters:parameters$. 
        """
        
  subset: first_failure
- __index_level_0__: 1498
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student60
  submitted_text: |-
    This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters sorted alphabetically. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints
    ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. 
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        This function $inputs:inputs$ suits and vals as a $list:list$ as its $parameters:parameters$. This function $returns:prints$ out every combination of these $parameters:parameters$ sorted alphabetically. As an example. If you $input:input$ ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function $returns:prints$
    ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. 
        """
        
  subset: last_success
- __index_level_0__: 1499
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student63
  submitted_text: 'The function takes in multiple lists made up of single characters
    and outputs one list in which all the entries are two characters strings made
    up of the combination of each character from each original list. '
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        The function $takes:takes$ in multiple $lists:lists$ made up of single $strings:characters$ and $returns:outputs$ one $list:list$ in which all the $keys:entries$ are two $strings:characters$ $strings:strings$ made up of the combination of each $string:character$ from each original $list:list$. 
        """
        
  subset: first_failure
- __index_level_0__: 1500
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student63
  submitted_text: The function takes in multiple lists made up of single characters
    and outputs one list in which all the entries are two characters strings made
    up of the combination of each character from each original list. The resulting
    list will be arranged in alphabetical order based on the letters of each string.
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        The function $takes:takes$ in multiple $lists:lists$ made up of single $strings:characters$ and $returns:outputs$ one $list:list$ in which all the $keys:entries$ are two $strings:characters$ $strings:strings$ made up of the combination of each $string:character$ from each original $list:list$. The resulting $list:list$ will be arranged in alphabetical order based on the letters of each $string:string$.
        """
        
  subset: last_success
- __index_level_0__: 1501
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student64
  submitted_text: |-
    For each character in suits, create a list that appends each of the suits with each of the values in vals.
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        For each $string:character$ in suits, create a $list:list$ that $inserts:appends$ each of the suits with each of the values in vals.
        """
        
  subset: first_failure
- __index_level_0__: 1508
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student64
  submitted_text: |-
    For each character in suits, create a list that appends each of the suits with each of the values in vals. Sort each card in deck by alphabetical order of suit character.
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        For each $string:character$ in suits, create a $list:list$ that $inserts:appends$ each of the suits with each of the values in vals. Sort each card in deck by alphabetical order of suit $string:character$.
        """
        
  subset: last_success
- __index_level_0__: 1509
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student69
  submitted_text: Enter two arrays of characters. Print an array with the first array
    multiplied by the second array.
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        $Provide:Enter$ two $lists:arrays$ of $strings:characters$. $Return:Print$ an $list:array$ with the first $list:array$ multiplied by the second $list:array$.
        """
        
  subset: first_failure
- __index_level_0__: 1511
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student69
  submitted_text: Enter two arrays of characters. Reverse the order of the first array.
    Print an array with the the first array multiplied by the second array.
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        $Provide:Enter$ two $lists:arrays$ of $strings:characters$. Reverse the order of the first $list:array$. $Return:Print$ an $list:array$ with the the first $list:array$ multiplied by the second $list:array$.
        """
        
  subset: last_failure
- __index_level_0__: 1512
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student71
  submitted_text: |-
    Sorts out each list by numerical or alphabetical order then combines each element of list A to list B, iterating through each list by numerical and alphabetical order. 
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        Sorts out each $list:list$ by numerical or alphabetical order then $concatenates:combines$ each $key:element$ of $list:list$ A to $list:list$ B, iterating through each $list:list$ by numerical and alphabetical order. 
        """
        
  subset: first_failure
- __index_level_0__: 1513
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student75
  submitted_text: The data on the left is put through the defined function generateCardDeck
    to output data on the right.
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        The data on the left is put through the defined function generateCardDeck to $return:output$ data on the right.
        """
        
  subset: first_failure
- __index_level_0__: 1534
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student75
  submitted_text: |-
    def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], Card then reverses the order of suit[] making the variables print in the opposite order starting with ['D'], this program then outputs and combination of the suit [] and val []
    def generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], Card then reverses the order of val[] making the variables print in the opposite order starting with ['2'], this program then outputs and combination of the opposite order of the suit [] and the val [].
    def generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        def generateCardDeck(suits, vals): $takes:brings in$ the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], Card then reverses the order of suit[] making the $keys:variables$ $return:print$ in the opposite order starting with ['D'], this program then $returns:outputs$ and combination of the suit [] and val []
    def generateCardDeck(suits, vals): $takes:brings in$ the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], Card then reverses the order of val[] making the $keys:variables$ $return:print$ in the opposite order starting with ['2'], this program then $returns:outputs$ and combination of the opposite order of the suit [] and the val [].
    def generateCardDeck(suits, vals): $takes:brings in$ the information:['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].
        """
        
  subset: last_failure
- __index_level_0__: 1535
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student76
  submitted_text: Going from last to first in the first set of brackets adds each
    of the inputs in the second brackets to the end of the input from the first bracket
    one time and does so for all inputs in the first brackets
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        Going from last to first in the first $list:set$ of $lists:brackets$ $inserts:adds$ each of the $inputs:inputs$ in the second $lists:brackets$ to the end of the $input:input$ from the first bracket one time and does so for all $inputs:inputs$ in the first $lists:brackets$
        """
        
  subset: first_failure
- __index_level_0__: 1536
  problem: generateCardDeck
  entrypoint: generateCardDeck
  assertions: |-
    assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']
    assert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']
    assert generateCardDeck(['H'], ['2']) == ['H2']
  username: student79
  submitted_text: |
    there are two lists, both with strings. you should use a nested for loop to concatenate the two strings and then add them to a list in increasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). suit takes precedence over rank.
  prompt: |-
    def generateCardDeck(suits, vals):
        """
        there are two $lists:lists$, both with $strings:strings$. you should use a nested for loop to $concatenate:concatenate$ the two $strings:strings$ and then $insert:add$ them to a $list:list$ in increasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). suit $takes:takes$ precedence over rank.

        """
        
  subset: first_failure
- __index_level_0__: 1542
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student1
  submitted_text: |-
    takes a list of words, reverses each word in the list, and alphabetically orders those new words.
  prompt: |-
    def reverseWords(words):
        """
        $takes:takes$ a $list:list$ of $strings:words$, reverses each $string:word$ in the $list:list$, and alphabetically orders those new $strings:words$.
        """
        
  subset: last_success
- __index_level_0__: 1543
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student6
  submitted_text: |-
    Input: list of strings. Output: list of strings, whose characters are in the reverse order of the original string
  prompt: |-
    def reverseWords(words):
        """
        $Input:Input$: $list:list$ of $strings:strings$. $Return:Output$: $list:list$ of $strings:strings$, whose $strings:characters$ are in the reverse order of the original $string:string$
        """
        
  subset: first_failure
- __index_level_0__: 1546
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student6
  submitted_text: |-
    Input: list of strings. Output: list of strings, whose characters are in the reverse order of the original string. In the output, arrange each item in the list in alphabetical order 
  prompt: |-
    def reverseWords(words):
        """
        $Input:Input$: $list:list$ of $strings:strings$. $Return:Output$: $list:list$ of $strings:strings$, whose $strings:characters$ are in the reverse order of the original $string:string$. In the $return:output$, arrange each $key:item$ in the $list:list$ in alphabetical order 
        """
        
  subset: last_success
- __index_level_0__: 1547
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student7
  submitted_text: Sorts each item in the list in reverse alphabetical order
  prompt: |-
    def reverseWords(words):
        """
        Sorts each $key:item$ in the $list:list$ in reverse alphabetical order
        """
        
  subset: first_failure
- __index_level_0__: 1548
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student7
  submitted_text: Sorts each item in the list in reverse alphabetical order. Returns
    the overall list in alphabetical order
  prompt: |-
    def reverseWords(words):
        """
        Sorts each $key:item$ in the $list:list$ in reverse alphabetical order. $Returns:Returns$ the overall $list:list$ in alphabetical order
        """
        
  subset: last_success
- __index_level_0__: 1549
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student9
  submitted_text: The function reverses the letters in each string. It then places
    the strings in the list in alphabetical order.
  prompt: |-
    def reverseWords(words):
        """
        The function reverses the letters in each $string:string$. It then places the $strings:strings$ in the $list:list$ in alphabetical order.
        """
        
  subset: first_success
- __index_level_0__: 1552
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student9
  submitted_text: The function reverses the letters in each string. It then places
    the strings in alphabetical order.
  prompt: |-
    def reverseWords(words):
        """
        The function reverses the letters in each $string:string$. It then places the $strings:strings$ in alphabetical order.
        """
        
  subset: last_failure
- __index_level_0__: 1553
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student14
  submitted_text: put each character in each word in reverse order. then put each
    word in alphabetical order
  prompt: |-
    def reverseWords(words):
        """
        put each $string:character$ in each $string:word$ in reverse order. then put each $string:word$ in alphabetical order
        """
        
  subset: first_success
- __index_level_0__: 1556
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student14
  submitted_text: put each character in each word in reverse order. then put each
    word in alphabetical order
  prompt: |-
    def reverseWords(words):
        """
        put each $string:character$ in each $string:word$ in reverse order. then put each $string:word$ in alphabetical order
        """
        
  subset: last_success
- __index_level_0__: 1558
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student15
  submitted_text: |-
    For each word in the list, reverses the order of the letters. Returns a list of the new words in alphabetical order.
  prompt: |-
    def reverseWords(words):
        """
        For each $string:word$ in the $list:list$, reverses the order of the letters. $Returns:Returns$ a $list:list$ of the new $strings:words$ in alphabetical order.
        """
        
  subset: last_success
- __index_level_0__: 1559
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student24
  submitted_text: |-
    for each word in the list, return a new list with the word from the previous list spelled backwards, starting from the end of the list
  prompt: |-
    def reverseWords(words):
        """
        for each $string:word$ in the $list:list$, $return:return$ a new $list:list$ with the $string:word$ from the previous $list:list$ spelled backwards, starting from the end of the $list:list$
        """
        
  subset: first_failure
- __index_level_0__: 1562
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student31
  submitted_text: |-
    Takes a list of strings, and then individually reverses the order of the characters in each string. Then, sorts the list alphabetically. Then, returns this modified list. 
  prompt: |-
    def reverseWords(words):
        """
        $Takes:Takes$ a $list:list$ of $strings:strings$, and then individually reverses the order of the $strings:characters$ in each $string:string$. Then, sorts the $list:list$ alphabetically. Then, $returns:returns$ this modified $list:list$. 
        """
        
  subset: first_success
- __index_level_0__: 1566
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student39
  submitted_text: In this function your goal is given a list of strings to reverse
    the strings and order the reversed strings in alphabetical order in their reversed
    forms.
  prompt: |-
    def reverseWords(words):
        """
        In this function your goal is given a $list:list$ of $strings:strings$ to reverse the $strings:strings$ and order the reversed $strings:strings$ in alphabetical order in their reversed forms.
        """
        
  subset: last_failure
- __index_level_0__: 1568
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student45
  submitted_text: |-
    Takes a list of strings, which we will call words. Make a new list of strings, which we will call reverse. For each string in words, add a string to reverse that contains the same characters in backwards order. Then sort reverse. Output is reverse.
  prompt: |-
    def reverseWords(words):
        """
        $Takes:Takes$ a $list:list$ of $strings:strings$, which we will call $strings:words$. Make a new $list:list$ of $strings:strings$, which we will call reverse. For each $string:string$ in $strings:words$, $insert:add$ a $string:string$ to reverse that contains the same $strings:characters$ in backwards order. Then sort reverse. $Return:Output$ is reverse.
        """
        
  subset: last_success
- __index_level_0__: 1571
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student46
  submitted_text: The function takes in a list of strings it will make all the character
    within the strings reverse. Then it will sort the list alphabetically by the last
    character in each string
  prompt: |-
    def reverseWords(words):
        """
        The function $takes:takes$ in a $list:list$ of $strings:strings$ it will make all the $string:character$ within the $strings:strings$ reverse. Then it will sort the $list:list$ alphabetically by the last $string:character$ in each $string:string$
        """
        
  subset: last_success
- __index_level_0__: 1575
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student55
  submitted_text: Write a function that gets strings from a list. Reverse all the
    strings and returns the reversed string in a list.
  prompt: |-
    def reverseWords(words):
        """
        Write a function that $takes:gets$ $strings:strings$ from a $list:list$. Reverse all the $strings:strings$ and $returns:returns$ the reversed $string:string$ in a $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 1576
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student55
  submitted_text: Write a function that gets strings from a list. Reverse all the
    strings and returns the reversed string in a list. The order of the strings in
    the return statement should be in alphabetical order from the input.
  prompt: |-
    def reverseWords(words):
        """
        Write a function that $takes:gets$ $strings:strings$ from a $list:list$. Reverse all the $strings:strings$ and $returns:returns$ the reversed $string:string$ in a $list:list$. The order of the $strings:strings$ in the $return:return$ statement should be in alphabetical order from the $input:input$.
        """
        
  subset: last_success
- __index_level_0__: 1577
  problem: reverseWords
  entrypoint: reverseWords
  assertions: |-
    assert reverseWords(['eat', 'tree']) == ['eert', 'tae']
    assert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']
    assert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']
  username: student58
  submitted_text: Return each string in the list in reverse
  prompt: |-
    def reverseWords(words):
        """
        $Return:Return$ each $string:string$ in the $list:list$ in reverse
        """
        
  subset: first_failure
- __index_level_0__: 1584
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student0
  submitted_text: |-
    takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of integer of num times 100 divided by the length of the first list and concatenate a percent sign.
  prompt: |-
    def percentWin(guess,answers):
        """
        $takes:takes$ in two $lists:lists$. If the $lists:lists$ have the same value at the same index, $insert:add$ one to a num $key:variable$. $return:return$ the $string:string$ of $integer:integer$ of num times 100 divided by the length of the first $list:list$ and $concatenate:concatenate$ a percent sign.
        """
        
  subset: last_success
- __index_level_0__: 1585
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student3
  submitted_text: |-
    create a function with 2 inputs: guess (list) and answers(list). find the number of the element match in guess and answers
  prompt: |-
    def percentWin(guess,answers):
        """
        create a function with 2 $inputs:inputs$: guess ($list:list$) and answers(list). find the number of the $key:element$ match in guess and answers
        """
        
  subset: first_failure
- __index_level_0__: 1587
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student3
  submitted_text: |-
    create a function with 2 inputs: guess (list) and answers(list). find the number of the element match in guess and answers then divide with the number of element of answers. then times the results 100 times and round up the to integer. add percentage sign after the results
  prompt: |-
    def percentWin(guess,answers):
        """
        create a function with 2 $inputs:inputs$: guess ($list:list$) and answers(list). find the number of the $key:element$ match in guess and answers then divide with the number of $key:element$ of answers. then times the results 100 times and round up the to $integer:integer$. $insert:add$ percentage sign after the results
        """
        
  subset: last_success
- __index_level_0__: 1588
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student4
  submitted_text: determines the percent of items in list 1 that are identical to
    the items in list 2
  prompt: |-
    def percentWin(guess,answers):
        """
        determines the percent of $keys:items$ in $list:list$ 1 that are identical to the $keys:items$ in $list:list$ 2
        """
        
  subset: first_failure
- __index_level_0__: 1591
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student4
  submitted_text: |-
    determines the percent of items in list 1 that are identical to the items in list 2, returns number rounded to the nearest whole numbers including percent sign
  prompt: |-
    def percentWin(guess,answers):
        """
        determines the percent of $keys:items$ in $list:list$ 1 that are identical to the $keys:items$ in $list:list$ 2, $returns:returns$ number rounded to the nearest $integers:whole numbers$ including percent sign
        """
        
  subset: last_success
- __index_level_0__: 1592
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student10
  submitted_text: |-
    User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match.
  prompt: |-
    def percentWin(guess,answers):
        """
        User $inputs:inputs$ two $lists:lists$ of equal length. Program would compare each $key:item$ against second $list:list$'s corresponding $key:item$, and would $return:return$ the percentage of times the two $keys:items$ match.
        """
        
  subset: first_failure
- __index_level_0__: 1595
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student10
  submitted_text: |-
    User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match, as an integer with no decimal spaces with a % sign at the end.
  prompt: |-
    def percentWin(guess,answers):
        """
        User $inputs:inputs$ two $lists:lists$ of equal length. Program would compare each $key:item$ against second $list:list$'s corresponding $key:item$, and would $return:return$ the percentage of times the two $keys:items$ match, as an $integer:integer$ with no decimal spaces with a % sign at the end.
        """
        
  subset: last_failure
- __index_level_0__: 1596
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student17
  submitted_text: matches the numbers and letters of the two given strings and calculates
    the similarity in percents
  prompt: |-
    def percentWin(guess,answers):
        """
        matches the numbers and letters of the two given $strings:strings$ and calculates the similarity in percents
        """
        
  subset: first_failure
- __index_level_0__: 1601
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student17
  submitted_text: |-
    matches the numbers and letters of the two given strings and calculates the similarity, lastly turn the answer into a percent number with the percent symbol, rounding to the nearest whole number
  prompt: |-
    def percentWin(guess,answers):
        """
        matches the numbers and letters of the two given $strings:strings$ and calculates the similarity, lastly $typecast:turn$ the answer into a percent number with the percent symbol, rounding to the nearest $integer:whole number$
        """
        
  subset: last_success
- __index_level_0__: 1602
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student18
  submitted_text: 'Compare the string in guess and answers by each index and calculate
    the percentage of the match between guess and answers. '
  prompt: |-
    def percentWin(guess,answers):
        """
        Compare the $string:string$ in guess and answers by each index and calculate the percentage of the match between guess and answers. 
        """
        
  subset: first_failure
- __index_level_0__: 1605
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student18
  submitted_text: |-
    Compare the string in guess and answers by each index and calculate the percentage of the match between guess and answers. Then, multiply 100 to the value while rounding up to the nearest integer and add '%' at the end. 
  prompt: |-
    def percentWin(guess,answers):
        """
        Compare the $string:string$ in guess and answers by each index and calculate the percentage of the match between guess and answers. Then, multiply 100 to the value while rounding up to the nearest $integer:integer$ and $insert:add$ '%' at the end. 
        """
        
  subset: last_success
- __index_level_0__: 1606
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student21
  submitted_text: |-
    given two lists, divide the number of 'X' in the first list by the length of the list and multiply by 100. Return the String of this obtained number plus the percentage sign.
  prompt: |-
    def percentWin(guess,answers):
        """
        given two $lists:lists$, divide the number of 'X' in the first $list:list$ by the length of the $list:list$ and multiply by 100. $Return:Return$ the $String:String$ of this obtained number plus the percentage sign.
        """
        
  subset: first_failure
- __index_level_0__: 1608
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student21
  submitted_text: |-
    given two lists, divide the number of 'X' in the first list by the length of the list, multiply by 100. Subtract this number from 100. Return the String of this obtained number as an integer plus the percentage sign.
  prompt: |-
    def percentWin(guess,answers):
        """
        given two $lists:lists$, divide the number of 'X' in the first $list:list$ by the length of the $list:list$, multiply by 100. Subtract this number from 100. $Return:Return$ the $String:String$ of this obtained number as an $integer:integer$ plus the percentage sign.
        """
        
  subset: last_success
- __index_level_0__: 1609
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student25
  submitted_text: This function compares how similar 2 lists are and returns the percent
    of the guess list that matches the answer list.
  prompt: |-
    def percentWin(guess,answers):
        """
        This function compares how similar 2 $lists:lists$ are and $returns:returns$ the percent of the guess $list:list$ that matches the answer $list:list$.
        """
        
  subset: first_failure
- __index_level_0__: 1612
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student25
  submitted_text: |-
    This function compares how similar 2 lists are and returns the percent of the guess list that matches the answer list. The percentage is multiplied by 100, rounded to have no decimal, and "%" is added to the final result.
  prompt: |-
    def percentWin(guess,answers):
        """
        This function compares how similar 2 $lists:lists$ are and $returns:returns$ the percent of the guess $list:list$ that matches the answer $list:list$. The percentage is multiplied by 100, rounded to have no decimal, and "%" is $inserted:added$ to the final result.
        """
        
  subset: last_success
- __index_level_0__: 1613
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student26
  submitted_text: Count how many characters in a range of numbers match those in another
    range of numbers and display the difference as a percentage
  prompt: |-
    def percentWin(guess,answers):
        """
        Count how many $strings:characters$ in a range of numbers match those in another range of numbers and $return:display$ the difference as a percentage
        """
        
  subset: first_failure
- __index_level_0__: 1617
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student26
  submitted_text: Count how many characters in a range of numbers match those in another
    range of numbers and display the difference rounded to the nearest whole number.
    Multiply the difference by 100 and display followed by '%'
  prompt: |-
    def percentWin(guess,answers):
        """
        Count how many $strings:characters$ in a range of numbers match those in another range of numbers and $return:display$ the difference rounded to the nearest $integer:whole number$. Multiply the difference by 100 and $return:display$ followed by '%'
        """
        
  subset: last_failure
- __index_level_0__: 1618
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student30
  submitted_text: |-
    Take in array A. Iterate through array A, and record the proportion of numbers in it versus letters.
  prompt: |-
    def percentWin(guess,answers):
        """
        $Take:Take$ in $list:array$ A. Iterate through $list:array$ A, and record the proportion of numbers in it versus letters.
        """
        
  subset: first_failure
- __index_level_0__: 1620
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student30
  submitted_text: |-
    Take in array A. Create variable X equal to 0. Iterate through array A. When a character is present in Array A, add 1 to Y. Return Y divided by the size of the array, rounded to the nearest percent.
  prompt: |-
    def percentWin(guess,answers):
        """
        $Take:Take$ in $list:array$ A. Create $key:variable$ X equal to 0. Iterate through $list:array$ A. When a $string:character$ is present in $List:Array$ A, $insert:add$ 1 to Y. $Return:Return$ Y divided by the size of the $list:array$, rounded to the nearest percent.
        """
        
  subset: last_failure
- __index_level_0__: 1621
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student41
  submitted_text: |-
    Given two lists, compares each item in the second list to each item in the first list. For each item in the second list that does not match the first list, it subtracts from one, one divided by the total length of the list. Then it prints the proportion of correct responses as a percentage.
  prompt: |-
    def percentWin(guess,answers):
        """
        Given two $lists:lists$, compares each $key:item$ in the second $list:list$ to each $key:item$ in the first $list:list$. For each $key:item$ in the second $list:list$ that does not match the first $list:list$, it subtracts from one, one divided by the total length of the $list:list$. Then it $returns:prints$ the proportion of correct responses as a percentage.
        """
        
  subset: first_failure
- __index_level_0__: 1623
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student41
  submitted_text: |-
    Given two lists, compares each item in the second list to each item in the first list. Every time an item in the second list does not match the first list, it subtracts from one, one divided by the total length of the list. Then it prints the proportion of correct responses multiplied by 100 and followed by a percent sign.
  prompt: |-
    def percentWin(guess,answers):
        """
        Given two $lists:lists$, compares each $key:item$ in the second $list:list$ to each $key:item$ in the first $list:list$. Every time an $key:item$ in the second $list:list$ does not match the first $list:list$, it subtracts from one, one divided by the total length of the $list:list$. Then it $returns:prints$ the proportion of correct responses multiplied by 100 and followed by a percent sign.
        """
        
  subset: last_failure
- __index_level_0__: 1624
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student48
  submitted_text: Calculate the percentage of numbers in the guess that aren't "X"
  prompt: |-
    def percentWin(guess,answers):
        """
        Calculate the percentage of numbers in the guess that aren't "X"
        """
        
  subset: first_failure
- __index_level_0__: 1625
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student51
  submitted_text: check both lists for equality and return the percent of matching
    items
  prompt: |-
    def percentWin(guess,answers):
        """
        check both $lists:lists$ for equality and $return:return$ the percent of matching $keys:items$
        """
        
  subset: first_failure
- __index_level_0__: 1628
  problem: percentWin
  entrypoint: percentWin
  assertions: |-
    assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'
    assert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'
    assert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'
  username: student51
  submitted_text: check both lists for equality and return the percent of matching
    items as a string rounded to the nearest whole number with a %
  prompt: |-
    def percentWin(guess,answers):
        """
        check both $lists:lists$ for equality and $return:return$ the percent of matching $keys:items$ as a $string:string$ rounded to the nearest $integer:whole number$ with a %
        """
        
  subset: last_success
- __index_level_0__: 1631
  problem: correctNumberofPlayers
  entrypoint: correctNumberofPlayers
  assertions: |-
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig", "Rolfo"]]) == True
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig"]]) == False
    assert correctNumberofPlayers([['Brian',"Ertz","Long", "Mewis","Press"], ['Falk','Glas',"Seger","Hurtig","Rolfo"], ["Bartoli","Linari","Gama","Galli","Caruso"]]) == True
  username: student5
  submitted_text: 'the function correctNumberofPlayers will take the input teams and
    return true if all teams listed have five players and false if they do not. teams
    is a list with names of players. '
  prompt: |-
    def correctNumberofPlayers(teams):
        """
        the function correctNumberofPlayers will $take:take$ the $input:input$ teams and $return:return$ true if all teams listed have five players and false if they do not. teams is a $list:list$ with names of players. 
        """
        
  subset: first_success
- __index_level_0__: 1632
  problem: correctNumberofPlayers
  entrypoint: correctNumberofPlayers
  assertions: |-
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig", "Rolfo"]]) == True
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig"]]) == False
    assert correctNumberofPlayers([['Brian',"Ertz","Long", "Mewis","Press"], ['Falk','Glas',"Seger","Hurtig","Rolfo"], ["Bartoli","Linari","Gama","Galli","Caruso"]]) == True
  username: student8
  submitted_text: Checks if all lists in the given list have the same length.
  prompt: |-
    def correctNumberofPlayers(teams):
        """
        Checks if all $lists:lists$ in the given $list:list$ have the same length.
        """
        
  subset: first_success
- __index_level_0__: 1633
  problem: correctNumberofPlayers
  entrypoint: correctNumberofPlayers
  assertions: |-
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig", "Rolfo"]]) == True
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig"]]) == False
    assert correctNumberofPlayers([['Brian',"Ertz","Long", "Mewis","Press"], ['Falk','Glas',"Seger","Hurtig","Rolfo"], ["Bartoli","Linari","Gama","Galli","Caruso"]]) == True
  username: student11
  submitted_text: |-
    this function will see if all the inside list from the input list of list have 5 values, if yes then True no then False
  prompt: |-
    def correctNumberofPlayers(teams):
        """
        this function will see if all the inside $list:list$ from the $input:input$ $list:list$ of $list:list$ have 5 values, if yes then True no then False
        """
        
  subset: first_success
- __index_level_0__: 1634
  problem: correctNumberofPlayers
  entrypoint: correctNumberofPlayers
  assertions: |-
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig", "Rolfo"]]) == True
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig"]]) == False
    assert correctNumberofPlayers([['Brian',"Ertz","Long", "Mewis","Press"], ['Falk','Glas',"Seger","Hurtig","Rolfo"], ["Bartoli","Linari","Gama","Galli","Caruso"]]) == True
  username: student13
  submitted_text: |-
    Based on the inputted 2D list of players on each team, the function will check if there are 5 players in each sublist. If there are the correct number of players in each sublist, it will return True. Otherwise, the function will return False.
  prompt: |-
    def correctNumberofPlayers(teams):
        """
        Based on the $inputted:inputted$ 2D $list:list$ of players on each team, the function will check if there are 5 players in each sublist. If there are the correct number of players in each sublist, it will $return:return$ True. Otherwise, the function will $return:return$ False.
        """
        
  subset: first_success
- __index_level_0__: 1635
  problem: correctNumberofPlayers
  entrypoint: correctNumberofPlayers
  assertions: |-
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig", "Rolfo"]]) == True
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig"]]) == False
    assert correctNumberofPlayers([['Brian',"Ertz","Long", "Mewis","Press"], ['Falk','Glas',"Seger","Hurtig","Rolfo"], ["Bartoli","Linari","Gama","Galli","Caruso"]]) == True
  username: student16
  submitted_text: if the lists inputted all have 5 players
  prompt: |-
    def correctNumberofPlayers(teams):
        """
        if the $lists:lists$ $inputted:inputted$ all have 5 players
        """
        
  subset: first_success
- __index_level_0__: 1636
  problem: correctNumberofPlayers
  entrypoint: correctNumberofPlayers
  assertions: |-
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig", "Rolfo"]]) == True
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig"]]) == False
    assert correctNumberofPlayers([['Brian',"Ertz","Long", "Mewis","Press"], ['Falk','Glas',"Seger","Hurtig","Rolfo"], ["Bartoli","Linari","Gama","Galli","Caruso"]]) == True
  username: student22
  submitted_text: 'takes in a list of lists and returns a boleean based on if the
    number of elements in the list are the same '
  prompt: |-
    def correctNumberofPlayers(teams):
        """
        $takes:takes$ in a $list:list$ of $lists:lists$ and $returns:returns$ a boleean based on if the number of $keys:elements$ in the $list:list$ are the same 
        """
        
  subset: first_failure
- __index_level_0__: 1637
  problem: correctNumberofPlayers
  entrypoint: correctNumberofPlayers
  assertions: |-
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig", "Rolfo"]]) == True
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig"]]) == False
    assert correctNumberofPlayers([['Brian',"Ertz","Long", "Mewis","Press"], ['Falk','Glas',"Seger","Hurtig","Rolfo"], ["Bartoli","Linari","Gama","Galli","Caruso"]]) == True
  username: student22
  submitted_text: takes in a list of lists and checks to see if each list is the same
    length
  prompt: |-
    def correctNumberofPlayers(teams):
        """
        $takes:takes$ in a $list:list$ of $lists:lists$ and checks to see if each $list:list$ is the same length
        """
        
  subset: last_success
- __index_level_0__: 1638
  problem: correctNumberofPlayers
  entrypoint: correctNumberofPlayers
  assertions: |-
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig", "Rolfo"]]) == True
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig"]]) == False
    assert correctNumberofPlayers([['Brian',"Ertz","Long", "Mewis","Press"], ['Falk','Glas',"Seger","Hurtig","Rolfo"], ["Bartoli","Linari","Gama","Galli","Caruso"]]) == True
  username: student37
  submitted_text: Write a function which takes a list of lists of strings and checks
    returns True if the length of each internal list is 5 and False if this is not
    true for each list
  prompt: |-
    def correctNumberofPlayers(teams):
        """
        Write a function which $takes:takes$ a $list:list$ of $lists:lists$ of $strings:strings$ and checks $returns:returns$ True if the length of each internal $list:list$ is 5 and False if this is not true for each $list:list$
        """
        
  subset: first_success
- __index_level_0__: 1639
  problem: correctNumberofPlayers
  entrypoint: correctNumberofPlayers
  assertions: |-
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig", "Rolfo"]]) == True
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig"]]) == False
    assert correctNumberofPlayers([['Brian',"Ertz","Long", "Mewis","Press"], ['Falk','Glas',"Seger","Hurtig","Rolfo"], ["Bartoli","Linari","Gama","Galli","Caruso"]]) == True
  username: student61
  submitted_text: function will return True if the lists have the same count of items
    and will return False if the lists do not have the same count of items
  prompt: |-
    def correctNumberofPlayers(teams):
        """
        function will $return:return$ True if the $lists:lists$ have the same count of $keys:items$ and will $return:return$ False if the $lists:lists$ do not have the same count of $keys:items$
        """
        
  subset: first_failure
- __index_level_0__: 1640
  problem: correctNumberofPlayers
  entrypoint: correctNumberofPlayers
  assertions: |-
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig", "Rolfo"]]) == True
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig"]]) == False
    assert correctNumberofPlayers([['Brian',"Ertz","Long", "Mewis","Press"], ['Falk','Glas',"Seger","Hurtig","Rolfo"], ["Bartoli","Linari","Gama","Galli","Caruso"]]) == True
  username: student61
  submitted_text: function will return True if the counts are the same and will return
    False if the counts are not the same
  prompt: |-
    def correctNumberofPlayers(teams):
        """
        function will $return:return$ True if the counts are the same and will $return:return$ False if the counts are not the same
        """
        
  subset: last_success
- __index_level_0__: 1641
  problem: correctNumberofPlayers
  entrypoint: correctNumberofPlayers
  assertions: |-
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig", "Rolfo"]]) == True
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig"]]) == False
    assert correctNumberofPlayers([['Brian',"Ertz","Long", "Mewis","Press"], ['Falk','Glas',"Seger","Hurtig","Rolfo"], ["Bartoli","Linari","Gama","Galli","Caruso"]]) == True
  username: student72
  submitted_text: |-
    If the count of each of the list of names in the list matches, return True. Else, return False.
  prompt: |-
    def correctNumberofPlayers(teams):
        """
        If the count of each of the $list:list$ of names in the $list:list$ matches, $return:return$ True. Else, $return:return$ False.
        """
        
  subset: first_success
- __index_level_0__: 1642
  problem: correctNumberofPlayers
  entrypoint: correctNumberofPlayers
  assertions: |-
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig", "Rolfo"]]) == True
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig"]]) == False
    assert correctNumberofPlayers([['Brian',"Ertz","Long", "Mewis","Press"], ['Falk','Glas',"Seger","Hurtig","Rolfo"], ["Bartoli","Linari","Gama","Galli","Caruso"]]) == True
  username: student73
  submitted_text: |-
    given the each list within the list of lists, there should be five items within each sub list. if the list doesn't have five items, then the output is false. if each list has five items, then the output is true.
  prompt: |-
    def correctNumberofPlayers(teams):
        """
        given the each $list:list$ within the $list:list$ of $lists:lists$, there should be five $keys:items$ within each sub $list:list$. if the $list:list$ doesn't have five $keys:items$, then the $return:output$ is false. if each $list:list$ has five $keys:items$, then the $return:output$ is true.
        """
        
  subset: first_success
- __index_level_0__: 1643
  problem: correctNumberofPlayers
  entrypoint: correctNumberofPlayers
  assertions: |-
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig", "Rolfo"]]) == True
    assert correctNumberofPlayers([['Brian', "Ertz", "Long", "Mewis", "Press"], ['Falk', 'Glas', "Seger", "Hurtig"]]) == False
    assert correctNumberofPlayers([['Brian',"Ertz","Long", "Mewis","Press"], ['Falk','Glas',"Seger","Hurtig","Rolfo"], ["Bartoli","Linari","Gama","Galli","Caruso"]]) == True
  username: student74
  submitted_text: 'the code should store up to five strings. Each list should equal
    five and output true. Any list less or more then five should output false '
  prompt: |-
    def correctNumberofPlayers(teams):
        """
        the code should store up to five $strings:strings$. Each $list:list$ should equal five and $return:output$ true. Any $list:list$ less or more then five should $return:output$ false 
        """
        
  subset: first_failure
- __index_level_0__: 1646
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student6
  submitted_text: |-
    Input of a list of integers, and another integer. Outputs the list of integers expatiated by the second inputted integer
  prompt: |-
    def exp(lst, val):
        """
        $Input:Input$ of a $list:list$ of $integers:integers$, and another $integer:integer$. $Returns:Outputs$ the $list:list$ of $integers:integers$ expatiated by the second $inputted:inputted$ $integer:integer$
        """
        
  subset: first_success
- __index_level_0__: 1647
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student7
  submitted_text: Takes the list and raises each item to the power of the given value
  prompt: |-
    def exp(lst, val):
        """
        $Takes:Takes$ the $list:list$ and raises each $key:item$ to the power of the given value
        """
        
  subset: first_success
- __index_level_0__: 1650
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student14
  submitted_text: check what number is outside each set of brackets. then raise numbers
    in brackets to the power of each number outside of the corresponding brackets.
    Return finished equation
  prompt: |-
    def exp(lst, val):
        """
        check what number is outside each $list:set$ of $lists:brackets$. then raise numbers in $lists:brackets$ to the power of each number outside of the corresponding $lists:brackets$. $Return:Return$ finished equation
        """
        
  subset: first_failure
- __index_level_0__: 1652
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student14
  submitted_text: raise numbers in brackets to the power of the number outside of
    brackets. Return finished equation
  prompt: |-
    def exp(lst, val):
        """
        raise numbers in $lists:brackets$ to the power of the number outside of $lists:brackets$. $Return:Return$ finished equation
        """
        
  subset: last_failure
- __index_level_0__: 1653
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student15
  submitted_text: |-
    raises each number in lst to the power of the val, returns a list of the new values
  prompt: |-
    def exp(lst, val):
        """
        raises each number in lst to the power of the val, $returns:returns$ a $list:list$ of the new values
        """
        
  subset: first_success
- __index_level_0__: 1654
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student15
  submitted_text: |-
    multiplies each number in lst by val, returns a list of the new values
  prompt: |-
    def exp(lst, val):
        """
        multiplies each number in lst by val, $returns:returns$ a $list:list$ of the new values
        """
        
  subset: last_failure
- __index_level_0__: 1655
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student24
  submitted_text: Multiply each number in the list by the exponent of the given value.
  prompt: |-
    def exp(lst, val):
        """
        Multiply each number in the $list:list$ by the exponent of the given value.
        """
        
  subset: first_success
- __index_level_0__: 1656
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student28
  submitted_text: |-
    Write a code that takes in two parameters, The first parameter is 1st is a list of integers. And the second parameter is val which is a value that represents a power. For each integer in 1st val will take the power of that value.
  prompt: |-
    def exp(lst, val):
        """
        Write a code that $takes:takes$ in two $parameters:parameters$, The first $parameter:parameter$ is 1st is a $list:list$ of $integers:integers$. And the second $parameter:parameter$ is val which is a value that represents a power. For each $integer:integer$ in 1st val will $take:take$ the power of that value.
        """
        
  subset: first_success
- __index_level_0__: 1657
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student31
  submitted_text: |-
    Takes a list of integers and a separate single integer, creates a new list and adds each integer from the original to it after raising them to the power of the separate, second integer argument. Then, returns this new list.
  prompt: |-
    def exp(lst, val):
        """
        $Takes:Takes$ a $list:list$ of $integers:integers$ and a separate single $integer:integer$, creates a new $list:list$ and $inserts:adds$ each $integer:integer$ from the original to it after raising them to the power of the separate, second $integer:integer$ $parameter:argument$. Then, $returns:returns$ this new $list:list$.
        """
        
  subset: first_success
- __index_level_0__: 1659
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student39
  submitted_text: |-
    For this function, exp(1st, val) the goal is to raise each number within the provided list (1st) to the number given in val and then return a list of the products of the original list.
  prompt: |-
    def exp(lst, val):
        """
        For this function, exp(1st, val) the goal is to raise each number within the $provided:provided$ $list:list$ (1st) to the number given in val and then $return:return$ a $list:list$ of the products of the original $list:list$.
        """
        
  subset: last_success
- __index_level_0__: 1660
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student45
  submitted_text: |-
    Takes a list of integers, which we will call lst, and an integer, which we will call val. Returns a new list containing each value of lst raised to the power of val.
  prompt: |-
    def exp(lst, val):
        """
        $Takes:Takes$ a $list:list$ of $integers:integers$, which we will call lst, and an $integer:integer$, which we will call val. $Returns:Returns$ a new $list:list$ containing each value of lst raised to the power of val.
        """
        
  subset: first_success
- __index_level_0__: 1661
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student46
  submitted_text: |-
    A function that takes in a list of multiple integers and one other integer on the outside, then has all the integers within the list be put to the power of whatever number was outside the list.
  prompt: |-
    def exp(lst, val):
        """
        A function that $takes:takes$ in a $list:list$ of multiple $integers:integers$ and one other $integer:integer$ on the outside, then has all the $integers:integers$ within the $list:list$ be put to the power of whatever number was outside the $list:list$.
        """
        
  subset: first_success
- __index_level_0__: 1664
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student53
  submitted_text: raise each integer in lst to val and return corresponding list
  prompt: |-
    def exp(lst, val):
        """
        raise each $integer:integer$ in lst to val and $return:return$ corresponding $list:list$
        """
        
  subset: first_success
- __index_level_0__: 1665
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student55
  submitted_text: |-
    Write a function that gets a list of numbers and an integer separated by a comma.
    The list of numbers should be the base and the integer should the the exponent. Compute all the elements from the list and returns the lists of the results.
  prompt: |-
    def exp(lst, val):
        """
        Write a function that $takes:gets$ a $list:list$ of numbers and an $integer:integer$ separated by a comma.
    The $list:list$ of numbers should be the base and the $integer:integer$ should the the exponent. Compute all the $keys:elements$ from the $list:list$ and $returns:returns$ the $lists:lists$ of the results.
        """
        
  subset: first_success
- __index_level_0__: 1666
  problem: exp
  entrypoint: exp
  assertions: |-
    assert exp([1, 2, 3], 1) == [1,2,3]
    assert exp([2,2,2], 3) == [8,8,8]
    assert exp([2], 2) == [4]
  username: student58
  submitted_text: Return each item in the list and multiply it by the following number.
  prompt: |-
    def exp(lst, val):
        """
        $Return:Return$ each $key:item$ in the $list:list$ and multiply it by the following number.
        """
        
  subset: first_success
- __index_level_0__: 1694
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student2
  submitted_text: This function uses the size of laugh to determine the amount of
    times an h is printed. This function creates a loop in which it prints an h with
    a's after it the size of laugh. It then subtracts 1 from the size and prints an
    h with less a's. It does this until it reaches a value of 1
  prompt: |-
    def laugh(size):
        """
        This function uses the size of laugh to determine the amount of times an h is $returned:printed$. This function creates a loop in which it $returns:prints$ an h with a's after it the size of laugh. It then subtracts 1 from the size and $returns:prints$ an h with less a's. It does this until it reaches a value of 1
        """
        
  subset: last_failure
- __index_level_0__: 1695
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student5
  submitted_text: |
    the function laugh will take the input of an int and should output a string with the ha as many times as the input but also the number of a's is based on the number it is currently working with
  prompt: |-
    def laugh(size):
        """
        the function laugh will $take:take$ the $input:input$ of an $integer:int$ and should $return:output$ a $string:string$ with the ha as many times as the $input:input$ but also the number of a's is based on the number it is currently working with

        """
        
  subset: first_failure
- __index_level_0__: 1698
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student5
  submitted_text: |+
    the function laugh will take the input of an int and should output a string with "ha" as many times as the input int. However each respective "ha" has as many a's as the current number of "ha"s left to produce. and add a space in between the ha's but not at the very end. 

  prompt: |-
    def laugh(size):
        """
        the function laugh will $take:take$ the $input:input$ of an $integer:int$ and should $return:output$ a $string:string$ with "ha" as many times as the $input:input$ $integer:int$. However each respective "ha" has as many a's as the current number of "ha"s left to $return:produce$. and $insert:add$ a space in between the ha's but not at the very end. 


        """
        
  subset: last_failure
- __index_level_0__: 1699
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student8
  submitted_text: |-
    If n is the input value, returns a combination of n strings, where each of the n strings consists of "h" followed by n occurrences of "a", and there is " " before each "h" except the first "h". 
  prompt: |-
    def laugh(size):
        """
        If n is the $input:input$ value, $returns:returns$ a combination of n $strings:strings$, where each of the n $strings:strings$ consists of "h" followed by n occurrences of "a", and there is " " before each "h" except the first "h". 
        """
        
  subset: first_failure
- __index_level_0__: 1716
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student8
  submitted_text: |-
    If n is the input value, the function creates a string containing "h" plus n occurrences of "a", plus " h" plus n-1 occurrences of "a", repeated until "ha" is the last part of the string. Then return the string.
  prompt: |-
    def laugh(size):
        """
        If n is the $input:input$ value, the function creates a $string:string$ containing "h" plus n occurrences of "a", plus " h" plus n-1 occurrences of "a", repeated until "ha" is the last $key:part$ of the $string:string$. Then $return:return$ the $string:string$.
        """
        
  subset: last_failure
- __index_level_0__: 1717
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student11
  submitted_text: |-
    a function have initial input as 'ha' when  input of size(int) is 1, when size+= 1 from 1, 'ha' will gain one more 'a'
  prompt: |-
    def laugh(size):
        """
        a function have initial $input:input$ as 'ha' when  $input:input$ of size(int) is 1, when size+= 1 from 1, 'ha' will gain one more 'a'
        """
        
  subset: first_failure
- __index_level_0__: 1718
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student11
  submitted_text: |-
    a function have initial input as 'ha' when  input of size(int) is 1, when size+= 1 from 1, 'ha' will gain one more 'a' and have another 'ha' with the original length of 'a'
  prompt: |-
    def laugh(size):
        """
        a function have initial $input:input$ as 'ha' when  $input:input$ of size(int) is 1, when size+= 1 from 1, 'ha' will gain one more 'a' and have another 'ha' with the original length of 'a'
        """
        
  subset: last_failure
- __index_level_0__: 1719
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student13
  submitted_text: |-
    The function will repeat the word "ha" based on the size inputted. Each time the word "ha" is printed, the number of "a"s in the "ha" will start with its initial size, then decrease by one for each repetition.
  prompt: |-
    def laugh(size):
        """
        The function will repeat the $string:word$ "ha" based on the size $inputted:inputted$. Each time the $string:word$ "ha" is $returned:printed$, the number of "a"s in the "ha" will start with its initial size, then decrease by one for each repetition.
        """
        
  subset: first_failure
- __index_level_0__: 1722
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student13
  submitted_text: |-
    Based on the inputted size, the function will return a laugh size, repeating the word "ha" the number of times inputted. The number of "a"s in the "ha" will start with its initial size, then decrease by one for each repetition.
  prompt: |-
    def laugh(size):
        """
        Based on the $inputted:inputted$ size, the function will $return:return$ a laugh size, repeating the $string:word$ "ha" the number of times $inputted:inputted$. The number of "a"s in the "ha" will start with its initial size, then decrease by one for each repetition.
        """
        
  subset: last_failure
- __index_level_0__: 1723
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student16
  submitted_text: count the number of words in a string separated by a space
  prompt: |-
    def laugh(size):
        """
        count the number of $strings:words$ in a $string:string$ separated by a space
        """
        
  subset: first_failure
- __index_level_0__: 1725
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student22
  submitted_text: take in a number and write the word 'ha' but with as many 'a's as
    the number
  prompt: |-
    def laugh(size):
        """
        $take:take$ in a number and write the $string:word$ 'ha' but with as many 'a's as the number
        """
        
  subset: first_failure
- __index_level_0__: 1731
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student22
  submitted_text: take in an integer and write a decreasing amount of 'a's next to
    an 'h'
  prompt: |-
    def laugh(size):
        """
        $take:take$ in an $integer:integer$ and write a decreasing amount of 'a's next to an 'h'
        """
        
  subset: last_failure
- __index_level_0__: 1732
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student37
  submitted_text: |-
    Write a function which takes an integer size as an input, and uses a for loop to print an h followed by size a's and then a space, and then an h followed by size-1 a's and then a space, etc. until it prints a h followed by one a
  prompt: |-
    def laugh(size):
        """
        Write a function which $takes:takes$ an $integer:integer$ size as an $input:input$, and uses a for loop to $return:print$ an h followed by size a's and then a space, and then an h followed by size-1 a's and then a space, etc. until it $returns:prints$ a h followed by one a
        """
        
  subset: first_failure
- __index_level_0__: 1738
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student37
  submitted_text: |-
    Write a function which takes an integer size as an input, creates an empty string called laugh, and the uses a for loop to append an h followed by i number a's for each 0<i<=size starting with i = size, append a space before each h except the first h in the string
  prompt: |-
    def laugh(size):
        """
        Write a function which $takes:takes$ an $integer:integer$ size as an $input:input$, creates an empty $string:string$ called laugh, and the uses a for loop to $insert:append$ an h followed by i number a's for each 0<i<=size starting with i = size, $insert:append$ a space before each h except the first h in the $string:string$
        """
        
  subset: last_success
- __index_level_0__: 1739
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student61
  submitted_text: function adds 'a' to every 'h' based on input and will lower amount
    of 'a'. Function also adds a space between every 'ha' except the last one
  prompt: |-
    def laugh(size):
        """
        function $inserts:adds$ 'a' to every 'h' based on $input:input$ and will lower amount of 'a'. Function also $inserts:adds$ a space between every 'ha' except the last one
        """
        
  subset: first_success
- __index_level_0__: 1741
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student61
  submitted_text: function adds 'a' to every 'h' based on input and will lower amount
    of 'a'. Function also adds a space between every 'ha'
  prompt: |-
    def laugh(size):
        """
        function $inserts:adds$ 'a' to every 'h' based on $input:input$ and will lower amount of 'a'. Function also $inserts:adds$ a space between every 'ha'
        """
        
  subset: last_failure
- __index_level_0__: 1742
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student72
  submitted_text: |-
    Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after.
  prompt: |-
    def laugh(size):
        """
        $Return:Produce$ a $string:string$, with each $string:word$ starting with h and then however many a's the $input:input$ says. Decrease the count of a's by one following the h for each $string:word$ after.
        """
        
  subset: first_failure
- __index_level_0__: 1746
  problem: laugh
  entrypoint: laugh
  assertions: |-
    assert laugh(4) == "haaaa haaa haa ha"
    assert laugh(1) == "ha"
    assert laugh(3) == "haaa haa ha"
  username: student72
  submitted_text: |-
    Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after. Stop after the last word in the string is ha.
  prompt: |-
    def laugh(size):
        """
        $Return:Produce$ a $string:string$, with each $string:word$ starting with h and then however many a's the $input:input$ says. Decrease the count of a's by one following the h for each $string:word$ after. Stop after the last $string:word$ in the $string:string$ is ha.
        """
        
  subset: last_failure
