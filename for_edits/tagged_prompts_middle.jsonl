{"__index_level_0__": 1, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student1", "submitted_text": "takes a list of strings, integers, and floats and returns the sum of all the numbers.", "prompt": "def add_up(arr):\n    \"\"\"\n    $takes:takes$ a $list:list$ of $strings:strings$, $integers:integers$, and floats and $returns:returns$ the sum of all the numbers.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 4, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student6", "submitted_text": "Input: list of items, that may be a combination of strings and integers. Function checks each item in the list to check if it is an integer or a string. If it is an integer it adds it to a new list. If it is not an integer it ignores it. Outputs the sum of each ingter in the new list. If the original list contains no integers, return 0", "prompt": "def add_up(arr):\n    \"\"\"\n    $Input:Input$: $list:list$ of $keys:items$, that may be a combination of $strings:strings$ and $integers:integers$. Function checks each $key:item$ in the $list:list$ to check if it is an $integer:integer$ or a $string:string$. If it is an $integer:integer$ it $inserts:adds$ it to a new $list:list$. If it is not an $integer:integer$ it $skips:ignores$ it. $Returns:Outputs$ the sum of each ingter in the new $list:list$. If the original $list:list$ contains no $integers:integers$, $return:return$ 0\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 7, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student7", "submitted_text": "adds up only integers and floats in an array. strings are ignored, empty spots count as 0", "prompt": "def add_up(arr):\n    \"\"\"\n    $inserts:adds$ up only $integers:integers$ and floats in an $list:array$. $strings:strings$ are $skipped:ignored$, empty spots count as 0\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 8, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student7", "submitted_text": "sums integers and floats in an array. strings are ignored, empty spots count as 0", "prompt": "def add_up(arr):\n    \"\"\"\n    sums $integers:integers$ and floats in an $list:array$. $strings:strings$ are $skipped:ignored$, empty spots count as 0\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 9, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student7", "submitted_text": "iterates through the array and sums the total of integers and floats. strings are ignored, empty spots count as 0", "prompt": "def add_up(arr):\n    \"\"\"\n    $loops through:iterates through$ the $list:array$ and sums the total of $integers:integers$ and floats. $strings:strings$ are $skipped:ignored$, empty spots count as 0\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 10, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student7", "submitted_text": "iterates through the array and prints i", "prompt": "def add_up(arr):\n    \"\"\"\n    $loops through:iterates through$ the $list:array$ and $returns:prints$ i\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 13, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student9", "submitted_text": "Add together each value in the list. If there is a string, and the word inside is a number in written form, add that number too.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Insert:Add$ together each value in the $list:list$. If there is a $string:string$, and the $string:word$ inside is a number in written form, $insert:add$ that number too.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 14, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student9", "submitted_text": "Add together the list. If there is a string, and the word inside is a number in written form, add that number too.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Insert:Add$ together the $list:list$. If there is a $string:string$, and the $string:word$ inside is a number in written form, $insert:add$ that number too.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 15, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student9", "submitted_text": "Add together each item in the list. If there is a string, and the word inside is a number in written form, add that number too.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Insert:Add$ together each $key:item$ in the $list:list$. If there is a $string:string$, and the $string:word$ inside is a number in written form, $insert:add$ that number too.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 16, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student9", "submitted_text": "Add together each item that is not a string in the list. If there is a string, and the word inside is a number in written form, add that number too.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Insert:Add$ together each $key:item$ that is not a $string:string$ in the $list:list$. If there is a $string:string$, and the $string:word$ inside is a number in written form, $insert:add$ that number too.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 17, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student9", "submitted_text": "Add together each item that is not a string in the list. ", "prompt": "def add_up(arr):\n    \"\"\"\n    $Insert:Add$ together each $key:item$ that is not a $string:string$ in the $list:list$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 18, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student9", "submitted_text": "Add together each item that is not a string in the list. If there is a string, and the word inside is a number in written form, add that item too.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Insert:Add$ together each $key:item$ that is not a $string:string$ in the $list:list$. If there is a $string:string$, and the $string:word$ inside is a number in written form, $insert:add$ that $key:item$ too.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 19, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student9", "submitted_text": "Add together each integer in the list. If there is a string, and the word inside is a number in written form, add that number too.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Insert:Add$ together each $integer:integer$ in the $list:list$. If there is a $string:string$, and the $string:word$ inside is a number in written form, $insert:add$ that number too.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 20, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student9", "submitted_text": "Add together each number in the list. If there is a string, and the word inside is a number in written form, add that number too.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Insert:Add$ together each number in the $list:list$. If there is a $string:string$, and the $string:word$ inside is a number in written form, $insert:add$ that number too.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 23, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student14", "submitted_text": "if string contains characters 2, 3, 3.4, or 4, add up those numbers in the string and output the answer", "prompt": "def add_up(arr):\n    \"\"\"\n    if $string:string$ contains $strings:characters$ 2, 3, 3.4, or 4, $insert:add$ up those numbers in the $string:string$ and $return:output$ the answer\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 24, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student14", "submitted_text": "if the arrangement contains characters 2, 3, 3.4, or 4, add up those numbers in the string and output the answer. else, return 0", "prompt": "def add_up(arr):\n    \"\"\"\n    if the arrangement contains $strings:characters$ 2, 3, 3.4, or 4, $insert:add$ up those numbers in the $string:string$ and $return:output$ the answer. else, $return:return$ 0\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 25, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student14", "submitted_text": "if the arrangement contains characters 2, 3, 3.4, or 4, add up those numbers in the arrangement and output the answer. else, return 0", "prompt": "def add_up(arr):\n    \"\"\"\n    if the arrangement contains $strings:characters$ 2, 3, 3.4, or 4, $insert:add$ up those numbers in the arrangement and $return:output$ the answer. else, $return:return$ 0\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 28, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student15", "submitted_text": "For each number in the list, adds the numbers returns the number. If there are no numbers, returns 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    For each number in the $list:list$, $inserts:adds$ the numbers $returns:returns$ the number. If there are no numbers, $returns:returns$ 0.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 29, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student15", "submitted_text": "For each number variable in the list, if the variable is a number, adds the number to a separate list. Adds the number in this list together and returns the number. If there are no numbers, returns 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    For each number $key:variable$ in the $list:list$, if the $key:variable$ is a number, $inserts:adds$ the number to a separate $list:list$. $Inserts:Adds$ the number in this $list:list$ together and $returns:returns$ the number. If there are no numbers, $returns:returns$ 0.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 30, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student15", "submitted_text": "For each variable in the list, if the variable can be casted to a float, adds the variable to a separate list. Adds the number in this list together and returns the number. If there are no numbers, returns 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    For each $key:variable$ in the $list:list$, if the $key:variable$ can be $typecasted:casted$ to a float, $inserts:adds$ the $key:variable$ to a separate $list:list$. $Inserts:Adds$ the number in this $list:list$ together and $returns:returns$ the number. If there are no numbers, $returns:returns$ 0.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 36, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student31", "submitted_text": "Takes a list with a list inside. Creates a new float variable and sets it to zero, and then converts each item in the list inside the input list to a float in any way possible and adds them to the float variable. Then, returns that float variable.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Takes:Takes$ a $list:list$ with a $list:list$ inside. Creates a new float $key:variable$ and $lists:sets$ it to zero, and then $typecasts:converts$ each $key:item$ in the $list:list$ inside the $input:input$ $list:list$ to a float in any way possible and $inserts:adds$ them to the float $key:variable$. Then, $returns:returns$ that float $key:variable$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 40, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student45", "submitted_text": "Takes an array. For each value in the array, if it is a number, adds it to the sum. Output is the sum of all the numbers in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Takes:Takes$ an $list:array$. For each value in the $list:array$, if it is a number, $inserts:adds$ it to the sum. $Return:Output$ is the sum of all the numbers in the $list:array$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 41, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student45", "submitted_text": "Takes an array. Reads each value in the array. If it is a number, adds it to the sum. If it is not a number, skips to the next value in the array. Output is the sum of all the numbers in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Takes:Takes$ an $list:array$. Reads each value in the $list:array$. If it is a number, $inserts:adds$ it to the sum. If it is not a number, $skips:skips$ to the next value in the $list:array$. $Return:Output$ is the sum of all the numbers in the $list:array$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 44, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student46", "submitted_text": "Takes in an array, removes all strings, outputs all integers added together that are in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Takes:Takes$ in an $list:array$, $skips:removes$ all $strings:strings$, $returns:outputs$ all $integers:integers$ $inserted:added$ together that are in the $list:array$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 45, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student46", "submitted_text": "Takes in an array, removes all strings, outputs all numbers added together that are in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Takes:Takes$ in an $list:array$, $skips:removes$ all $strings:strings$, $returns:outputs$ all numbers $inserted:added$ together that are in the $list:array$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 46, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student46", "submitted_text": "Takes in a list within an array, removes all strings, outputs all numbers added together that are in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Takes:Takes$ in a $list:list$ within an $list:array$, $skips:removes$ all $strings:strings$, $returns:outputs$ all numbers $inserted:added$ together that are in the $list:array$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 47, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student46", "submitted_text": "Takes in a list within an array, removes all strings, outputs all numbers added together that are in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Takes:Takes$ in a $list:list$ within an $list:array$, $skips:removes$ all $strings:strings$, $returns:outputs$ all numbers $inserted:added$ together that are in the $list:array$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 50, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student47", "submitted_text": "\"add up all the floats in arr, neglect the item if the item in arr is not a float\"", "prompt": "def add_up(arr):\n    \"\"\"\n    \"$insert:add$ up all the floats in arr, $skip:neglect$ the $key:item$ if the $key:item$ in arr is not a float\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 51, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student47", "submitted_text": "\"add all the floats in arr into a number named sum, neglect the item if the item in arr is not a float, return sum\"", "prompt": "def add_up(arr):\n    \"\"\"\n    \"$insert:add$ all the floats in arr into a number named sum, $skip:neglect$ the $key:item$ if the $key:item$ in arr is not a float, $return:return$ sum\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 52, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student47", "submitted_text": "\"add all the doubles in arr into a number named sum, neglect the item if the item in arr is not a float, return sum\"", "prompt": "def add_up(arr):\n    \"\"\"\n    \"$insert:add$ all the doubles in arr into a number named sum, $skip:neglect$ the $key:item$ if the $key:item$ in arr is not a float, $return:return$ sum\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 53, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student47", "submitted_text": "\"add all the doubles in arr into a number named sum, neglect the item if the item in arr is not a double, return sum\"", "prompt": "def add_up(arr):\n    \"\"\"\n    \"$insert:add$ all the doubles in arr into a number named sum, $skip:neglect$ the $key:item$ if the $key:item$ in arr is not a double, $return:return$ sum\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 54, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student47", "submitted_text": "\"add all the doubles in arr into a double named sum, neglect the item if the item in arr is not a double, return sum\"", "prompt": "def add_up(arr):\n    \"\"\"\n    \"$insert:add$ all the doubles in arr into a double named sum, $skip:neglect$ the $key:item$ if the $key:item$ in arr is not a double, $return:return$ sum\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 57, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student53", "submitted_text": "loop through arr and loop again and if the element is an integer or float add them and return the sum. ", "prompt": "def add_up(arr):\n    \"\"\"\n    $loop through:loop through$ arr and loop again and if the $key:element$ is an $integer:integer$ or float $insert:add$ them and $return:return$ the sum. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 60, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that runs through a list of lists. The function should get all numbers from the list and returns the sum of all numbers in the inner list. The function should avoid strings if they are elements in the list. ", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that $loops through:runs through$ a $list:list$ of $lists:lists$. The function should $take:get$ all numbers from the $list:list$ and $returns:returns$ the sum of all numbers in the inner $list:list$. The function should $skip:avoid$ $strings:strings$ if they are $keys:elements$ in the $list:list$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 61, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that runs through a list of lists. The function should get all numbers (both integers or floats) from the list and returns the sum of all numbers in the inner list. The function should avoid strings if they are elements in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that $loops through:runs through$ a $list:list$ of $lists:lists$. The function should $take:get$ all numbers (both $integers:integers$ or floats) from the $list:list$ and $returns:returns$ the sum of all numbers in the inner $list:list$. The function should $skip:avoid$ $strings:strings$ if they are $keys:elements$ in the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 62, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that runs through a list of lists. The function should get all numbers (both integers or floats) from the list and returns the sum of all numbers in the inner list. The function should avoid strings if they are elements in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that $loops through:runs through$ a $list:list$ of $lists:lists$. The function should $take:get$ all numbers (both $integers:integers$ or floats) from the $list:list$ and $returns:returns$ the sum of all numbers in the inner $list:list$. The function should $skip:avoid$ $strings:strings$ if they are $keys:elements$ in the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 63, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that runs through a list of lists. The function should get all numbers (both integers or floats) from the list and returns the sum of all numbers in the inner list. The function should avoid strings if they are elements in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that $loops through:runs through$ a $list:list$ of $lists:lists$. The function should $take:get$ all numbers (both $integers:integers$ or floats) from the $list:list$ and $returns:returns$ the sum of all numbers in the inner $list:list$. The function should $skip:avoid$ $strings:strings$ if they are $keys:elements$ in the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 64, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that gets a list. The function runs through a list of lists. The function should get all numbers (both integers or floats) from the list and returns the sum of all numbers in the inner list. The function should avoid strings if they are elements in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that $takes:gets$ a $list:list$. The function $loops through:runs through$ a $list:list$ of $lists:lists$. The function should $take:get$ all numbers (both $integers:integers$ or floats) from the $list:list$ and $returns:returns$ the sum of all numbers in the inner $list:list$. The function should $skip:avoid$ $strings:strings$ if they are $keys:elements$ in the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 67, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student58", "submitted_text": "Return the sum of the integers in the list", "prompt": "def add_up(arr):\n    \"\"\"\n    $Return:Return$ the sum of the $integers:integers$ in the $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 68, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student58", "submitted_text": "Add together and return the numbers in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    $Insert:Add$ together and $return:return$ the numbers in the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 71, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student65", "submitted_text": "This function takes entries in the first row of an array, and adds them to the total if the entry is a number. Otherwise, it adds 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    This function $takes:takes$ $keys:entries$ in the first row of an $list:array$, and $inserts:adds$ them to the total if the $key:entry$ is a number. Otherwise, it $inserts:adds$ 0.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 72, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student65", "submitted_text": "This function adds all numbers in an array together and returns the total. Otherwise it returns 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    This function $inserts:adds$ all numbers in an $list:array$ together and $returns:returns$ the total. Otherwise it $returns:returns$ 0.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 73, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student65", "submitted_text": "This function takes entries in an array, and adds them to the total if the entry is a number. Otherwise, it adds 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    This function $takes:takes$ $keys:entries$ in an $list:array$, and $inserts:adds$ them to the total if the $key:entry$ is a number. Otherwise, it $inserts:adds$ 0.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 74, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student65", "submitted_text": "This function takes entries within an array, and adds them to the total if the entry is a number. Otherwise, it adds 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    This function $takes:takes$ $keys:entries$ within an $list:array$, and $inserts:adds$ them to the total if the $key:entry$ is a number. Otherwise, it $inserts:adds$ 0.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 79, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student29", "submitted_text": "For each list entry, convert the input to an integer. Multiply list entries that correspond to an odd index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    For each $list:list$ $key:entry$, $typecast:convert$ the $input:input$ to an $integer:integer$. Multiply $list:list$ $keys:entries$ that correspond to an odd index by -1. Then $insert:add$ all of the $list:list$ $keys:entries$ together and $return:return$ their sum. If the $list:list$ is empty, $return:return$ 0.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 82, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student32", "submitted_text": "Turns all the elements in lst into integers. Then subtracts the last element in the list from the sum of all the other elements in the list, and returns the resulting int", "prompt": "def subtract_add(lst):\n    \"\"\"\n    $Typecasts:Turns$ all the $keys:elements$ in lst into $integers:integers$. Then subtracts the last $key:element$ in the $list:list$ from the sum of all the other $keys:elements$ in the $list:list$, and $returns:returns$ the resulting $integer:int$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 83, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student32", "submitted_text": "Turns all the elements in lst into integers. Then subtracts the last element in the list from the sum of all the other elements in the list, and returns the resulting int. If the list is empty, it returns 0", "prompt": "def subtract_add(lst):\n    \"\"\"\n    $Typecasts:Turns$ all the $keys:elements$ in lst into $integers:integers$. Then subtracts the last $key:element$ in the $list:list$ from the sum of all the other $keys:elements$ in the $list:list$, and $returns:returns$ the resulting $integer:int$. If the $list:list$ is empty, it $returns:returns$ 0\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 90, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student62", "submitted_text": "turn each element into int, alternate between subtracting and adding each element in list, return total", "prompt": "def subtract_add(lst):\n    \"\"\"\n    $typecast:turn$ each $key:element$ into $integer:int$, alternate between subtracting and $inserting:adding$ each $key:element$ in $list:list$, $return:return$ total\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 91, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student62", "submitted_text": "turn each element into int, alternate between subtracting and adding each element in list and add to count, return count", "prompt": "def subtract_add(lst):\n    \"\"\"\n    $typecast:turn$ each $key:element$ into $integer:int$, alternate between subtracting and $inserting:adding$ each $key:element$ in $list:list$ and $insert:add$ to count, $return:return$ count\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 92, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student62", "submitted_text": "turn each element into int, subtract even indexes and add odd indexes in list and add to count, return count", "prompt": "def subtract_add(lst):\n    \"\"\"\n    $typecast:turn$ each $key:element$ into $integer:int$, subtract even indexes and $insert:add$ odd indexes in $list:list$ and $insert:add$ to count, $return:return$ count\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 93, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student62", "submitted_text": "turn each element into int, add first element to count. if index of element is odd, subtract from count. if index of element is even, add to count.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    $typecast:turn$ each $key:element$ into $integer:int$, $insert:add$ first $key:element$ to count. if index of $key:element$ is odd, subtract from count. if index of $key:element$ is even, $insert:add$ to count.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 96, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student66", "submitted_text": "Take the first two items in the array list and change them into integers then take then take the next two integers and subtract them from each other. sum the two values return the product. if there are just two items in the list subtract the second one from the first one and return the product. if there are no items then return zero", "prompt": "def subtract_add(lst):\n    \"\"\"\n    $Take:Take$ the first two $keys:items$ in the $list:array$ $list:list$ and $typecast:change$ them into $integers:integers$ then $take:take$ then $take:take$ the next two $integers:integers$ and subtract them from each other. sum the two values $return:return$ the product. if there are just two $keys:items$ in the $list:list$ subtract the second one from the first one and $return:return$ the product. if there are no $keys:items$ then $return:return$ zero\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 97, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student66", "submitted_text": "Take the first two items in the array list and change them into integers then take then take the next two integers and subtract them from each other. sum the two values return the product. if there are just two items in the list subtract the second one from the first one and return the product. if there are no items then return zero", "prompt": "def subtract_add(lst):\n    \"\"\"\n    $Take:Take$ the first two $keys:items$ in the $list:array$ $list:list$ and $typecast:change$ them into $integers:integers$ then $take:take$ then $take:take$ the next two $integers:integers$ and subtract them from each other. sum the two values $return:return$ the product. if there are just two $keys:items$ in the $list:list$ subtract the second one from the first one and $return:return$ the product. if there are no $keys:items$ then $return:return$ zero\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 98, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student66", "submitted_text": "Subtract the second item in the array list from the first item. then subtract the forth item from the third item then add the two sums. if there are just two items in the list subtract the second one from the first one and return the product. if there are no items then return zero", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Subtract the second $key:item$ in the $list:array$ $list:list$ from the first $key:item$. then subtract the forth $key:item$ from the third $key:item$ then $insert:add$ the two sums. if there are just two $keys:items$ in the $list:list$ subtract the second one from the first one and $return:return$ the product. if there are no $keys:items$ then $return:return$ zero\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 99, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student66", "submitted_text": "Change them into integers. Subtract the second item in the array list from the first item. then subtract the forth item from the third item then add the two sums. if there are just two items in the list subtract the second one from the first one and return the product. if there are no items then return zero", "prompt": "def subtract_add(lst):\n    \"\"\"\n    $Typecast:Change$ them into $integers:integers$. Subtract the second $key:item$ in the $list:array$ $list:list$ from the first $key:item$. then subtract the forth $key:item$ from the third $key:item$ then $insert:add$ the two sums. if there are just two $keys:items$ in the $list:list$ subtract the second one from the first one and $return:return$ the product. if there are no $keys:items$ then $return:return$ zero\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 102, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student67", "submitted_text": "Converts all items to integer. Subtracts the second number from the first one, stores that value. Then adds that value to the next number, etc.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    $Typecasts:Converts$ all $keys:items$ to $integer:integer$. Subtracts the second number from the first one, stores that value. Then $inserts:adds$ that value to the next number, etc.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 105, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student68", "submitted_text": "given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count\n", "prompt": "def subtract_add(lst):\n    \"\"\"\n    given an $list:array$ of $strings:characters$ containing $integers:integers$, $typecast:convert$ the $strings:characters$ into $integers:integers$. Store the first number in the $list:array$ in a count $key:variable$. then subtract the next number from the count. With the next number, $insert:add$ it to the count and then alternate between subtracting and $inserting:adding$ until you $take:get$ to the end of the $list:array$. $return:return$ the count\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 106, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student68", "submitted_text": "if there are no values stored in the given array, return 0. Else, given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count\n", "prompt": "def subtract_add(lst):\n    \"\"\"\n    if there are no values stored in the given $list:array$, $return:return$ 0. Else, given an $list:array$ of $strings:characters$ containing $integers:integers$, $typecast:convert$ the $strings:characters$ into $integers:integers$. Store the first number in the $list:array$ in a count $key:variable$. then subtract the next number from the count. With the next number, $insert:add$ it to the count and then alternate between subtracting and $inserting:adding$ until you $take:get$ to the end of the $list:array$. $return:return$ the count\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 109, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student70", "submitted_text": "Create a variable for the result. If the list contains 0 elements, return 0. If the list contains 1 element, return that element. If the list contains 2 or more elements: subtract the second element from the first and save the result, then add the third element to that result, and continue on alternating subtraction and addition until the end of the list.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Create a $key:variable$ for the result. If the $list:list$ contains 0 $keys:elements$, $return:return$ 0. If the $list:list$ contains 1 $key:element$, $return:return$ that $key:element$. If the $list:list$ contains 2 or more $keys:elements$: subtract the second $key:element$ from the first and save the result, then $insert:add$ the third $key:element$ to that result, and continue on alternating subtraction and addition until the end of the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 110, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student70", "submitted_text": "Convert all list elements to integers. Create a variable for the result. If the list contains 0 elements, return 0. If the list contains 1 element, return that element. If the list contains 2 or more elements: subtract the second element from the first and save the result, then add the third element to that result, and continue on alternating subtraction and addition until the end of the list.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    $Typecast:Convert$ all $list:list$ $keys:elements$ to $integers:integers$. Create a $key:variable$ for the result. If the $list:list$ contains 0 $keys:elements$, $return:return$ 0. If the $list:list$ contains 1 $key:element$, $return:return$ that $key:element$. If the $list:list$ contains 2 or more $keys:elements$: subtract the second $key:element$ from the first and save the result, then $insert:add$ the third $key:element$ to that result, and continue on alternating subtraction and addition until the end of the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 111, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student70", "submitted_text": "Create a variable for the result. If the list contains 0 elements, return 0. If the list contains 1 element, return that element. If the list contains 2 or more elements: treat all elements as integers. subtract the second element from the first and save the result, then add the third element to that result, and continue on alternating subtraction and addition until the end of the list.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Create a $key:variable$ for the result. If the $list:list$ contains 0 $keys:elements$, $return:return$ 0. If the $list:list$ contains 1 $key:element$, $return:return$ that $key:element$. If the $list:list$ contains 2 or more $keys:elements$: $typecast:treat$ all $keys:elements$ as $integers:integers$. subtract the second $key:element$ from the first and save the result, then $insert:add$ the third $key:element$ to that result, and continue on alternating subtraction and addition until the end of the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 115, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers, have another list with the letters in the alphabet, create an answer list, iterate through the input list, append the letter with the corresponding index of the list with the letters in the alphabet to the answer list, create a new string when encounter a negative number, and return the answer list", "prompt": "def convert(lst):\n    \"\"\"\n    $takes:takes$ a $list:list$ of numbers, have another $list:list$ with the letters in the alphabet, create an answer $list:list$, $loop through:iterate through$ the $input:input$ $list:list$, $insert:append$ the letter with the corresponding index of the $list:list$ with the letters in the alphabet to the answer $list:list$, create a new $string:string$ when encounter a negative number, and $return:return$ the answer $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 116, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers, have another list with the letters in the alphabet, create an answer list. When iterating through the input list, create a temp string variable and assign the letter with the corresponding index of the list with the letters in the alphabet to the temp variable, append the temp variable into the answer list, and start a new temp string when encounter a negative number. Return the answer list.", "prompt": "def convert(lst):\n    \"\"\"\n    $takes:takes$ a $list:list$ of numbers, have another $list:list$ with the letters in the alphabet, create an answer $list:list$. When iterating through the $input:input$ $list:list$, create a temp $string:string$ $key:variable$ and assign the letter with the corresponding index of the $list:list$ with the letters in the alphabet to the temp $key:variable$, $insert:append$ the temp $key:variable$ into the answer $list:list$, and start a new temp $string:string$ when encounter a negative number. $Return:Return$ the answer $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 117, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable, have it add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. If encounter a negative number,  start a new temp string. Return the answer list.", "prompt": "def convert(lst):\n    \"\"\"\n    $takes:takes$ a $list:list$ of numbers. Have another $list:list$ with the letters in the alphabet, and create an answer $list:list$. When iterating through the $input:input$ $list:list$, create a temp $string:string$ $key:variable$, have it $insert:add$ the letter with the corresponding index of the $list:list$ with the letters in the alphabet to the temp $key:variable$. $Insert:Append$ the temp $key:variable$ into the answer $list:list$. If encounter a negative number,  start a new temp $string:string$. $Return:Return$ the answer $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 118, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While the number is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.", "prompt": "def convert(lst):\n    \"\"\"\n    $takes:takes$ a $list:list$ of numbers. Have another $list:list$ with the letters in the alphabet, and create an answer $list:list$. When iterating through the $input:input$ $list:list$, create a temp $string:string$ $key:variable$. While the number is not negative, $insert:add$ the letter with the corresponding index of the $list:list$ with the letters in the alphabet to the temp $key:variable$. $Insert:Append$ the temp $key:variable$ into the answer $list:list$. $Return:Return$ the answer $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 119, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While the iterating number is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.", "prompt": "def convert(lst):\n    \"\"\"\n    $takes:takes$ a $list:list$ of numbers. Have another $list:list$ with the letters in the alphabet, and create an answer $list:list$. When iterating through the $input:input$ $list:list$, create a temp $string:string$ $key:variable$. While the iterating number is not negative, $insert:add$ the letter with the corresponding index of the $list:list$ with the letters in the alphabet to the temp $key:variable$. $Insert:Append$ the temp $key:variable$ into the answer $list:list$. $Return:Return$ the answer $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 120, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While num is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.", "prompt": "def convert(lst):\n    \"\"\"\n    $takes:takes$ a $list:list$ of numbers. Have another $list:list$ with the letters in the alphabet, and create an answer $list:list$. When iterating through the $input:input$ $list:list$, create a temp $string:string$ $key:variable$. While num is not negative, $insert:add$ the letter with the corresponding index of the $list:list$ with the letters in the alphabet to the temp $key:variable$. $Insert:Append$ the temp $key:variable$ into the answer $list:list$. $Return:Return$ the answer $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 121, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers. Create a ABC list with the letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.", "prompt": "def convert(lst):\n    \"\"\"\n    $takes:takes$ a $list:list$ of numbers. Create a ABC $list:list$ with the letters in the alphabet and create an answer $string:string$. Iterate through the $input:input$ $list:list$, if there is \"-1\" then $insert:add$ ' ' to the answer $string:string$, or otherwise, $insert:add$ the letter with the corresponding index of the answer $string:string$. Split the answer $string:string$ at ' '. $return:return$ the answer $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 124, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "create a list with element of alphabet last element are comma\n", "prompt": "def convert(lst):\n    \"\"\"\n    create a $list:list$ with $key:element$ of alphabet last $key:element$ are comma\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 125, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "convert the list of index number into string of letters of corresponding index \nnumbers of alphabetical table\n", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:convert$ the $list:list$ of index number into $string:string$ of letters of corresponding index \nnumbers of alphabetical table\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 126, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "call a list with element of alphabet and last element are comma\n", "prompt": "def convert(lst):\n    \"\"\"\n    call a $list:list$ with $key:element$ of alphabet and last $key:element$ are comma\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 127, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "call out element of the following list [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z, ',']", "prompt": "def convert(lst):\n    \"\"\"\n    call out $key:element$ of the following $list:list$ [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z, ',']\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 128, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "convert the list into list of alphabet with number represent index of alphabet table\n", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:convert$ the $list:list$ into $list:list$ of alphabet with number represent index of alphabet table\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 129, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "convert the list of index number into list of letters of corresponding index \nnumbers", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:convert$ the $list:list$ of index number into $list:list$ of letters of corresponding index \nnumbers\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 130, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table and insert into a list", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:convert$ the $list:list$ of index number into $string:string$ of capital letters of corresponding index numbers of alphabetical table and $insert:insert$ into a $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 131, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table and insert into a list (-1 represent comma)", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:convert$ the $list:list$ of index number into $string:string$ of capital letters of corresponding index numbers of alphabetical table and $insert:insert$ into a $list:list$ (-1 represent comma)\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 132, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "convert the list of index number into capital letters of corresponding index numbers of alphabetical table(-1 represent comma)", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:convert$ the $list:list$ of index number into capital letters of corresponding index numbers of alphabetical table(-1 represent comma)\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 133, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:convert$ the $list:list$ of index number into $string:string$ of capital letters of corresponding index numbers of alphabetical table\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 134, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table and then insert into a list (-1 represent where to split into a new element)", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:convert$ the $list:list$ of index number into $string:string$ of capital letters of corresponding index numbers of alphabetical table and then $insert:insert$ into a $list:list$ (-1 represent where to split into a new $key:element$)\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 137, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student4", "submitted_text": "converts a list of numbers into a list of letters, creating a new item in new list when -1 is in the inputted list", "prompt": "def convert(lst):\n    \"\"\"\n    $typecasts:converts$ a $list:list$ of numbers into a $list:list$ of letters, creating a new $key:item$ in new $list:list$ when -1 is in the $inputted:inputted$ $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 140, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student10", "submitted_text": "User inputs a list of numbers ranging from -1 to 25, and function outputs a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current string in list and start a new string. ", "prompt": "def convert(lst):\n    \"\"\"\n    User $inputs:inputs$ a $list:list$ of numbers ranging from -1 to 25, and function $returns:outputs$ a $list:list$ of the corresponding letters and line breaks. Function $typecasts:converts$ the $integers:integers$ from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user $inputs:inputs$ -1, function should end current $string:string$ in $list:list$ and start a new $string:string$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 143, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A. ignoring any negative numbers in the list.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A. $skipping:ignoring$ any negative numbers in the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 144, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then turning the output into one string.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A, $typecasting:turning$ the negative numbers into commas, and then $typecasting:turning$ the $return:output$ into one $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 145, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing the commas in the answer when the letters are the same or in alphabetical order.  ", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A $skipping:ignoring$ any negative numbers in the $list:list$. $Skipping:Removing$ the commas in the answer when the letters are the same or in alphabetical order.  \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 146, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing the commas in the output when the letters are the same or in alphabetical order.  ", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A $skipping:ignoring$ any negative numbers in the $list:list$. $Skipping:Removing$ the commas in the $return:output$ when the letters are the same or in alphabetical order.  \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 147, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.  ", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A $skipping:ignoring$ any negative numbers in the $list:list$.  \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 148, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Then take the list of converted letters, removing any commas between letters in the last when the letters are in alphabetical order, or when they are the same letters.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A $skipping:ignoring$ any negative numbers in the $list:list$. Then $take:take$ the $list:list$ of $typecasted:converted$ letters, $skipping:removing$ any commas between letters in the last when the letters are in alphabetical order, or when they are the same letters.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 149, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A $skipping:ignoring$ any negative numbers in the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 150, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A $skipping:ignoring$ any negative numbers in the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 151, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing all commas in the list of outputs", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A $skipping:ignoring$ any negative numbers in the $list:list$. $Skipping:Removing$ all commas in the $list:list$ of $returns:outputs$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 152, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A turning all negative numbers into commas.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A $typecasting:turning$ all negative numbers into commas.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 153, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then turning the output into one string in a list.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A, $typecasting:turning$ the negative numbers into commas, and then $typecasting:turning$ the $return:output$ into one $string:string$ in a $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 154, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then group the letters in alphabetical order or the same into one string in a list.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A, $typecasting:turning$ the negative numbers into commas, and then group the letters in alphabetical order or the same into one $string:string$ in a $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 155, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas separating the letters. ", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A, $typecasting:turning$ the negative numbers into commas separating the letters. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 156, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas separating the letters. ", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A, $typecasting:turning$ the negative numbers into commas separating the letters. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 157, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 158, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as points of seperation.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A. grouping the $return:output$ as a single $string:string$, then use the negative numbers as points of seperation.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 159, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as points of seperation.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A. grouping the $return:output$ as a single $string:string$, then use the negative numbers as points of seperation.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 160, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as commas and points of separation between strings.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A. grouping the $return:output$ as a single $string:string$, then use the negative numbers as commas and points of separation between $strings:strings$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 161, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as commas and points of separation between strings.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A. grouping the $return:output$ as a single $string:string$, then use the negative numbers as commas and points of separation between $strings:strings$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 162, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then turn the negative numbers as commas and points of separation between the strings.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A. grouping the $return:output$ as a single $string:string$, then $typecast:turn$ the negative numbers as commas and points of separation between the $strings:strings$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 163, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, 1 as B. grouping the output as a single string, then turn the negative numbers as commas and points of separation between the strings.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A, 1 as B. grouping the $return:output$ as a single $string:string$, then $typecast:turn$ the negative numbers as commas and points of separation between the $strings:strings$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 164, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into commas.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A, $typecasting:turning$ negative numbers into commas.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 165, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into commas.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A, $typecasting:turning$ negative numbers into commas.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 166, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, using the -1 points to separate the string.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A, using the -1 points to separate the $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 167, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, grouping the answer as one string, and then using the -1 as points to separate the string.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A, grouping the answer as one $string:string$, and then using the -1 as points to separate the $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 168, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "\n\ninput: [1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]\noutput: ['BBB', 'ZZZ', 'ABC']", "prompt": "def convert(lst):\n    \"\"\"\n    \n\n$input:input$: [1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]\n$return:output$: ['BBB', 'ZZZ', 'ABC']\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 169, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "if user inputs [1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2], output should be ['BBB', 'ZZZ', 'ABC'].", "prompt": "def convert(lst):\n    \"\"\"\n    if user $inputs:inputs$ [1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2], $return:output$ should be ['BBB', 'ZZZ', 'ABC'].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 170, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\"", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A, $typecasting:turning$ negative numbers into \"\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 171, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\", grouping the output as one string.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A, $typecasting:turning$ negative numbers into \"\", grouping the $return:output$ as one $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 172, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\", and grouping the output as one string in a list.", "prompt": "def convert(lst):\n    \"\"\"\n    $typecast:change$ numbers to letters matching the order of the alphabet starting at 0 as A, $typecasting:turning$ negative numbers into \"\", and grouping the $return:output$ as one $string:string$ in a $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 175, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student18", "submitted_text": "Assign a number from 0~25 to each alphabet, and create a list. Based on their assigned numbers in the lst, create a string of capitalized alphabetical letters and add to the list. When there is -1 in the lst, create a separate string and add it to the list. Return a list of created strings.", "prompt": "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a $list:list$. Based on their assigned numbers in the lst, create a $string:string$ of capitalized alphabetical letters and $insert:add$ to the $list:list$. When there is -1 in the lst, create a separate $string:string$ and $insert:add$ it to the $list:list$. $Return:Return$ a $list:list$ of created $strings:strings$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 176, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student18", "submitted_text": "Assign a number from 0~25 to each alphabet, and create a list. Based on their assigned numbers in the lst, create string of capitalized alphabetical letters and add to the list. When there is -1 in the lst, create a separate string from the next index and add it to the list. Return a list of created strings.", "prompt": "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a $list:list$. Based on their assigned numbers in the lst, create $string:string$ of capitalized alphabetical letters and $insert:add$ to the $list:list$. When there is -1 in the lst, create a separate $string:string$ from the next index and $insert:add$ it to the $list:list$. $Return:Return$ a $list:list$ of created $strings:strings$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 179, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a set of strings that correspond to the given numbers in the input set, only separating the strings when there is a -1 in the input.", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the $input:input$ $list:set$ corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will $return:produce$ a $list:set$ of $strings:strings$ that correspond to the given numbers in the $input:input$ $list:set$, only separating the $strings:strings$ when there is a -1 in the $input:input$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 180, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string when there is a -1 in the input.", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the $input:input$ $list:set$ corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will $return:produce$ a $list:list$ of $strings:strings$ that correspond to the given numbers in the $input:input$ $list:set$, creating a new $string:string$ when there is a -1 in the $input:input$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 181, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string each time it comes across a -1 in the input.", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the $input:input$ $list:set$ corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will $return:produce$ a $list:list$ of $strings:strings$ that correspond to the given numbers in the $input:input$ $list:set$, creating a new $string:string$ each time it comes across a -1 in the $input:input$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 182, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a separate string each time it comes across a -1 in the input.", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the $input:input$ $list:set$ corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will $return:produce$ a $list:list$ of $strings:strings$ that correspond to the given numbers in the $input:input$ $list:set$, creating a separate $string:string$ each time it comes across a -1 in the $input:input$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 183, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string at each -1 in the input.", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the $input:input$ $list:set$ corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will $return:produce$ a $list:list$ of $strings:strings$ that correspond to the given numbers in the $input:input$ $list:set$, creating a new $string:string$ at each -1 in the $input:input$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 184, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will look at each index of the input list of strings, build a string that correspond to the given numbers in the input set, and add that string to the output list and start a new one when it comes across -1 in the input.", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the $input:input$ $list:set$ corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will look at each index of the $input:input$ $list:list$ of $strings:strings$, build a $string:string$ that correspond to the given numbers in the $input:input$ $list:set$, and $insert:add$ that $string:string$ to the $return:output$ $list:list$ and start a new one when it comes across -1 in the $input:input$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 185, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will look at each index of the input list of strings, build a string that correspond to the given numbers in the input set, and add that string to the output list and start a new one when it comes across -1 in the input. we will also add the string when we reach the end of the input list.", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the $input:input$ $list:set$ corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will look at each index of the $input:input$ $list:list$ of $strings:strings$, build a $string:string$ that correspond to the given numbers in the $input:input$ $list:set$, and $insert:add$ that $string:string$ to the $return:output$ $list:list$ and start a new one when it comes across -1 in the $input:input$. we will also $insert:add$ the $string:string$ when we reach the end of the $input:input$ $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 186, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will look at each index of the input list of strings, build a string that correspond to the given numbers in the input set, and add that string to the output list and start a new one when it comes across -1 in the input. we will also add this string when we reach the end of the input list.", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the $input:input$ $list:set$ corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will look at each index of the $input:input$ $list:list$ of $strings:strings$, build a $string:string$ that correspond to the given numbers in the $input:input$ $list:set$, and $insert:add$ that $string:string$ to the $return:output$ $list:list$ and start a new one when it comes across -1 in the $input:input$. we will also $insert:add$ this $string:string$ when we reach the end of the $input:input$ $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 189, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student25", "submitted_text": "Letters A-Z correspond with numbers 0-25. This function creates a string by replacing the given number with its corresponding number. Negative numbers start a new string.", "prompt": "def convert(lst):\n    \"\"\"\n    Letters A-Z correspond with numbers 0-25. This function creates a $string:string$ by replacing the given number with its corresponding number. Negative numbers start a new $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 190, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student25", "submitted_text": "Letters A-Z correspond with numbers 0-25. This function creates a string by replacing the given number with its corresponding number. Input \"-1\" starts a new string.", "prompt": "def convert(lst):\n    \"\"\"\n    Letters A-Z correspond with numbers 0-25. This function creates a $string:string$ by replacing the given number with its corresponding number. $Input:Input$ \"-1\" starts a new $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 195, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student30", "submitted_text": "Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. -1 = a space.", "prompt": "def convert(lst):\n    \"\"\"\n    $Typecast:Convert$ numbers to letters. 0 = A, 1 = B, 2 = C, and so on. -1 = a space.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 196, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student30", "submitted_text": "Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. \n\nReturn strings of letters with no spaces. A -1 in lst indicates the start of a new string.", "prompt": "def convert(lst):\n    \"\"\"\n    $Typecast:Convert$ numbers to letters. 0 = A, 1 = B, 2 = C, and so on. \n\n$Return:Return$ $strings:strings$ of letters with no spaces. A -1 in lst indicates the start of a new $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 199, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student41", "submitted_text": "Given a list, returns a list with letters from the alphabet that correspond to the index in the inputted list, starting from zero. Corresponding letters should be combined as one string to insert into the list. A negative one indicates the start of a new item in the list.", "prompt": "def convert(lst):\n    \"\"\"\n    Given a $list:list$, $returns:returns$ a $list:list$ with letters from the alphabet that correspond to the index in the $inputted:inputted$ $list:list$, starting from zero. Corresponding letters should be $concatenated:combined$ as one $string:string$ to $insert:insert$ into the $list:list$. A negative one indicates the start of a new $key:item$ in the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 200, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student41", "submitted_text": "Given a list, returns a list with capitalized letters from the alphabet that correspond to the index in the inputted list, starting from zero. Until a negative one is in the list, letters should be combined as one string to insert into the list. A negative one indicates the start of a new item in the list.", "prompt": "def convert(lst):\n    \"\"\"\n    Given a $list:list$, $returns:returns$ a $list:list$ with capitalized letters from the alphabet that correspond to the index in the $inputted:inputted$ $list:list$, starting from zero. Until a negative one is in the $list:list$, letters should be $concatenated:combined$ as one $string:string$ to $insert:insert$ into the $list:list$. A negative one indicates the start of a new $key:item$ in the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 204, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student51", "submitted_text": "Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. If -1, start the next character with a new string.", "prompt": "def convert(lst):\n    \"\"\"\n    Each $string:character$ in the alphabet is assigned an index value starting with A =0. $Take:Take$ each $key:item$ in the $list:list$ and $insert:add$ the corresponding $string:character$ to a $string:string$. If -1, start the next $string:character$ with a new $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 213, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student17", "submitted_text": "when there are numbers, reversing the order of the first of the list and revering the order of the second half of the list", "prompt": "def order_strings(lst):\n    \"\"\"\n    when there are numbers, reversing the order of the first of the $list:list$ and revering the order of the second half of the $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 214, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student17", "submitted_text": "when there are numbers, reverse the order of the first of the list and reversing the order of the second half of the list", "prompt": "def order_strings(lst):\n    \"\"\"\n    when there are numbers, reverse the order of the first of the $list:list$ and reversing the order of the second half of the $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 215, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student17", "submitted_text": "when there are numbers, reverse the order of the first of the list and reverse the order of the second half of the list", "prompt": "def order_strings(lst):\n    \"\"\"\n    when there are numbers, reverse the order of the first of the $list:list$ and reverse the order of the second half of the $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 216, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student17", "submitted_text": "reverse the order of the first of the list and reverse the order of the second half of the list", "prompt": "def order_strings(lst):\n    \"\"\"\n    reverse the order of the first of the $list:list$ and reverse the order of the second half of the $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 217, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student17", "submitted_text": "reverse the order of the first of the list and reverse the order of the second half of the list", "prompt": "def order_strings(lst):\n    \"\"\"\n    reverse the order of the first of the $list:list$ and reverse the order of the second half of the $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 218, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student17", "submitted_text": "reverse the order of the first half of the list and reverse the order of the second half of the list", "prompt": "def order_strings(lst):\n    \"\"\"\n    reverse the order of the first half of the $list:list$ and reverse the order of the second half of the $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 223, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student25", "submitted_text": "This function imports random and randomly changes the order of the given list.", "prompt": "def order_strings(lst):\n    \"\"\"\n    This function imports random and randomly $typecasts:changes$ the order of the given $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 228, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student30", "submitted_text": "Initialize the Python random module. Return elements of lst in randomized order.\n", "prompt": "def order_strings(lst):\n    \"\"\"\n    Initialize the Python random module. $Return:Return$ $keys:elements$ of lst in randomized order.\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 242, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student38", "submitted_text": "If position in lst is string, append num to string. If position in lst is integer, add num to integer. Else, return position. Return the new lst. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    If position in lst is $string:string$, $insert:append$ num to $string:string$. If position in lst is $integer:integer$, $insert:add$ num to $integer:integer$. Else, $return:return$ position. $Return:Return$ the new lst. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 243, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student38", "submitted_text": "If position in lst is string, append num to string. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Return the new lst. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    If position in lst is $string:string$, $insert:append$ num to $string:string$. If position in lst is $integer:integer$, $insert:add$ num to $integer:integer$. If position in lst is $list:list$, $insert:add$ $list:list$ to lst. $Return:Return$ the new lst. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 249, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student54", "submitted_text": "Return a new list with the integer added at each index of the old list. If it is a string, append it to the end. If it is an integer, concatenate.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    $Return:Return$ a new $list:list$ with the $integer:integer$ $inserted:added$ at each index of the old $list:list$. If it is a $string:string$, $insert:append$ it to the end. If it is an $integer:integer$, $concatenate:concatenate$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 250, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student54", "submitted_text": "Return a new list with the integer added at each index of the old list. If it is a string, add it to the end to create a new string. If it is an integer, or a string containing an integer, concatenate.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    $Return:Return$ a new $list:list$ with the $integer:integer$ $inserted:added$ at each index of the old $list:list$. If it is a $string:string$, $insert:add$ it to the end to create a new $string:string$. If it is an $integer:integer$, or a $string:string$ containing an $integer:integer$, $concatenate:concatenate$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 251, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student54", "submitted_text": "Return a new list with the integer added at each index of the old list. If it is a string, append the integer on to the end of the string to create a new string. If it is an integer, or a string containing an integer, concatenate.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    $Return:Return$ a new $list:list$ with the $integer:integer$ $inserted:added$ at each index of the old $list:list$. If it is a $string:string$, $insert:append$ the $integer:integer$ on to the end of the $string:string$ to create a new $string:string$. If it is an $integer:integer$, or a $string:string$ containing an $integer:integer$, $concatenate:concatenate$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 258, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student29", "submitted_text": "Convert each input to an integer. If that integer is prime return \"True\". Else, return \"False\"", "prompt": "def check_prime(num):\n    \"\"\"\n    $Typecast:Convert$ each $input:input$ to an $integer:integer$. If that $integer:integer$ is prime $return:return$ \"True\". Else, $return:return$ \"False\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 261, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student32", "submitted_text": "Turns num into int. If num is a prime number, return \"True\". if not, return \"False\"", "prompt": "def check_prime(num):\n    \"\"\"\n    $Typecasts:Turns$ num into $integer:int$. If num is a prime number, $return:return$ \"True\". if not, $return:return$ \"False\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 266, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student49", "submitted_text": "given a string type cast it into an integer, if the integer is only divisible by itself and 1, return True otherwise return False", "prompt": "def check_prime(num):\n    \"\"\"\n    given a $string:string$ $typecast:type cast$ it into an $integer:integer$, if the $integer:integer$ is only divisible by itself and 1, $return:return$ True otherwise $return:return$ False\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 271, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student66", "submitted_text": "if the number is prime return true else return false", "prompt": "def check_prime(num):\n    \"\"\"\n    if the number is prime $return:return$ true else $return:return$ false\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 272, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student66", "submitted_text": "if the number is not divisible buy 4 or 3 return true else return false", "prompt": "def check_prime(num):\n    \"\"\"\n    if the number is not divisible buy 4 or 3 $return:return$ true else $return:return$ false\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 273, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student66", "submitted_text": "change the string into an in if the number is not divisible buy 4 or 3 return true else return false", "prompt": "def check_prime(num):\n    \"\"\"\n    $typecast:change$ the $string:string$ into an in if the number is not divisible buy 4 or 3 $return:return$ true else $return:return$ false\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 274, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student66", "submitted_text": "change the string into an integer if the number is not divisible buy 4 or 3 return true else return false", "prompt": "def check_prime(num):\n    \"\"\"\n    $typecast:change$ the $string:string$ into an $integer:integer$ if the number is not divisible buy 4 or 3 $return:return$ true else $return:return$ false\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 279, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student68", "submitted_text": "given a string, first cast the string into an integer and return true if that number is a prime number. if not, return false", "prompt": "def check_prime(num):\n    \"\"\"\n    given a $string:string$, first $typecast:cast$ the $string:string$ into an $integer:integer$ and $return:return$ true if that number is a prime number. if not, $return:return$ false\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 280, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student68", "submitted_text": "given a string, first cast the string into an integer and return true if that number is a prime number. if not, return false. ", "prompt": "def check_prime(num):\n    \"\"\"\n    given a $string:string$, first $typecast:cast$ the $string:string$ into an $integer:integer$ and $return:return$ true if that number is a prime number. if not, $return:return$ false. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 281, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student68", "submitted_text": "given a string, first cast the string into an integer. return true if that number is a prime number. if not, return false. ", "prompt": "def check_prime(num):\n    \"\"\"\n    given a $string:string$, first $typecast:cast$ the $string:string$ into an $integer:integer$. $return:return$ true if that number is a prime number. if not, $return:return$ false. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 282, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student68", "submitted_text": "given a character, convert the character into a number. return true if that number is a prime number. if not, return false. ", "prompt": "def check_prime(num):\n    \"\"\"\n    given a $string:character$, $typecast:convert$ the $string:character$ into a number. $return:return$ true if that number is a prime number. if not, $return:return$ false. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 285, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student70", "submitted_text": "convert the input to an integer. return whether the input num is prime.", "prompt": "def check_prime(num):\n    \"\"\"\n    $typecast:convert$ the $input:input$ to an $integer:integer$. $return:return$ whether the $input:input$ num is prime.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 286, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student70", "submitted_text": "save the input num to an integer variable. return whether this integer is prime.", "prompt": "def check_prime(num):\n    \"\"\"\n    save the $input:input$ num to an $integer:integer$ $key:variable$. $return:return$ whether this $integer:integer$ is prime.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 287, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student70", "submitted_text": "treat the input num as an integer. return whether this integer is prime.", "prompt": "def check_prime(num):\n    \"\"\"\n    $typecast:treat$ the $input:input$ num as an $integer:integer$. $return:return$ whether this $integer:integer$ is prime.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 291, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student0", "submitted_text": "takes in a list of numbers. returns the list of numbers with decimals or even numbers.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    $takes:takes$ in a $list:list$ of numbers. $returns:returns$ the $list:list$ of numbers with decimals or even numbers.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 292, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student0", "submitted_text": "takes in a list of numbers. returns the list of numbers with doubles or even numbers.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    $takes:takes$ in a $list:list$ of numbers. $returns:returns$ the $list:list$ of numbers with doubles or even numbers.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 293, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student0", "submitted_text": "takes in a list of numbers. returns the list of numbers with only even numbers.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    $takes:takes$ in a $list:list$ of numbers. $returns:returns$ the $list:list$ of numbers with only even numbers.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 294, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student0", "submitted_text": "takes in a list of numbers. returns the list of numbers without odd numbers.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    $takes:takes$ in a $list:list$ of numbers. $returns:returns$ the $list:list$ of numbers without odd numbers.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 297, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student3", "submitted_text": "remove element which are even or have 1 number behind the comma\n", "prompt": "def remove_odd(lst):\n    \"\"\"\n    $skip:remove$ $key:element$ which are even or have 1 number behind the comma\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 298, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student3", "submitted_text": "remove the element which are integer and odd", "prompt": "def remove_odd(lst):\n    \"\"\"\n    $skip:remove$ the $key:element$ which are $integer:integer$ and odd\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 299, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student3", "submitted_text": "remove the element which are odd", "prompt": "def remove_odd(lst):\n    \"\"\"\n    $skip:remove$ the $key:element$ which are odd\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 302, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student4", "submitted_text": "deletes odd whole numbers from the list, returns the appended list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    deletes odd $integers:whole numbers$ from the $list:list$, $returns:returns$ the $inserted:appended$ $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 303, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student4", "submitted_text": "deletes odd integers from the list, returns the appended list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    deletes odd $integers:integers$ from the $list:list$, $returns:returns$ the $inserted:appended$ $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 304, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student4", "submitted_text": "deletes integers that are odd from the list, returns the appended list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    deletes $integers:integers$ that are odd from the $list:list$, $returns:returns$ the $inserted:appended$ $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 305, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student4", "submitted_text": "deletes ints that are odd from the list, returns the appended list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    deletes $integers:ints$ that are odd from the $list:list$, $returns:returns$ the $inserted:appended$ $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 306, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student4", "submitted_text": "for ints in the given list, deletes ints that are odd from the list, returns the appended list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    for $integers:ints$ in the given $list:list$, deletes $integers:ints$ that are odd from the $list:list$, $returns:returns$ the $inserted:appended$ $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 309, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student10", "submitted_text": "Function removes all odd integers from list, but keeps odd floats. Returns list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Function $skips:removes$ all odd $integers:integers$ from $list:list$, but keeps odd floats. $Returns:Returns$ $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 312, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student17", "submitted_text": "if given 4.3, 4, 5, 2, 7 output 4.3, 4, 2 in a list.\nif given 1.1, 2.2, 3.3 output 1.1, 2.2, 3.3 a list.\nif given 3, 5, 7 output a empty list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    if given 4.3, 4, 5, 2, 7 $return:output$ 4.3, 4, 2 in a $list:list$.\nif given 1.1, 2.2, 3.3 $return:output$ 1.1, 2.2, 3.3 a $list:list$.\nif given 3, 5, 7 $return:output$ a empty $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 313, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student17", "submitted_text": "if given [4.3, 4, 5, 2, 7] output 4.3, 4, 2 in a list.\n", "prompt": "def remove_odd(lst):\n    \"\"\"\n    if given [4.3, 4, 5, 2, 7] $return:output$ 4.3, 4, 2 in a $list:list$.\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 314, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student17", "submitted_text": "if given 4.3, 4, 5, 2, 7 output [4.3, 4, 2]\n", "prompt": "def remove_odd(lst):\n    \"\"\"\n    if given 4.3, 4, 5, 2, 7 $return:output$ [4.3, 4, 2]\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 315, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student17", "submitted_text": "if given 4.3, 4, 5, 2, 7 output 4.3, 4, 2 in a list.\n", "prompt": "def remove_odd(lst):\n    \"\"\"\n    if given 4.3, 4, 5, 2, 7 $return:output$ 4.3, 4, 2 in a $list:list$.\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 316, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student17", "submitted_text": "if given [4.3, 4, 5, 2, 7] output [4.3, 4, 2]\nif given [1.1, 2.2, 3.3] output [1.1, 2.2, 3.3]\nif given [3, 5, 7] output []\n", "prompt": "def remove_odd(lst):\n    \"\"\"\n    if given [4.3, 4, 5, 2, 7] $return:output$ [4.3, 4, 2]\nif given [1.1, 2.2, 3.3] $return:output$ [1.1, 2.2, 3.3]\nif given [3, 5, 7] $return:output$ []\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 317, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student17", "submitted_text": "if given [4.3, 4, 5, 2, 7] output [4.3, 4, 2],\nif given [1.1, 2.2, 3.3] output [1.1, 2.2, 3.3],\nif given [3, 5, 7] output [].\n", "prompt": "def remove_odd(lst):\n    \"\"\"\n    if given [4.3, 4, 5, 2, 7] $return:output$ [4.3, 4, 2],\nif given [1.1, 2.2, 3.3] $return:output$ [1.1, 2.2, 3.3],\nif given [3, 5, 7] $return:output$ [].\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 318, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student17", "submitted_text": "input: 2 output = 4\n", "prompt": "def remove_odd(lst):\n    \"\"\"\n    $input:input$: 2 $return:output$ = 4\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 319, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student17", "submitted_text": "abc\n", "prompt": "def remove_odd(lst):\n    \"\"\"\n    abc\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 322, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student18", "submitted_text": "Remove numbers that are either not an even number or a float from the lst. ", "prompt": "def remove_odd(lst):\n    \"\"\"\n    $Skip:Remove$ numbers that are either not an even number or a float from the lst. \n    \"\"\"\n    ", "subset": "middle_success"}
{"__index_level_0__": 325, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student21", "submitted_text": "if the value in the list is an integer, evaluate if it is odd and remove from the list if it is odd.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    if the value in the $list:list$ is an $integer:integer$, evaluate if it is odd and $skip:remove$ from the $list:list$ if it is odd.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 326, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student21", "submitted_text": "remove odd integers from given list ", "prompt": "def remove_odd(lst):\n    \"\"\"\n    $skip:remove$ odd $integers:integers$ from given $list:list$ \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 327, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student21", "submitted_text": "if the value in the list is an integer, evaluate if it is odd and remove from the list if it is odd.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    if the value in the $list:list$ is an $integer:integer$, evaluate if it is odd and $skip:remove$ from the $list:list$ if it is odd.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 328, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student21", "submitted_text": "if the value in the list is an integer, evaluate if it is odd and remove from the list if it is odd.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    if the value in the $list:list$ is an $integer:integer$, evaluate if it is odd and $skip:remove$ from the $list:list$ if it is odd.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 331, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student25", "submitted_text": "This function removes odd integers from the given list and returns a new list including all of the original number except for the odd integers.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    This function $skips:removes$ odd $integers:integers$ from the given $list:list$ and $returns:returns$ a new $list:list$ including all of the original number except for the odd $integers:integers$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 332, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student25", "submitted_text": "This function removes odd integers from the given list and returns a new list including all of the original numbers except for the odd integers. Floats are not removed from the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    This function $skips:removes$ odd $integers:integers$ from the given $list:list$ and $returns:returns$ a new $list:list$ including all of the original numbers except for the odd $integers:integers$. Floats are not $skipped:removed$ from the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 333, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student25", "submitted_text": "This function removes odd integers from the given list and returns a list including all of the original numbers except for the odd integers. Floats are not removed from the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    This function $skips:removes$ odd $integers:integers$ from the given $list:list$ and $returns:returns$ a $list:list$ including all of the original numbers except for the odd $integers:integers$. Floats are not $skipped:removed$ from the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 336, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student26", "submitted_text": "Remove odd numbers in a list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    $Skip:Remove$ odd numbers in a $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 341, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student41", "submitted_text": "For every number in the inputted list, if that item is not a float and is not divisible by two it is removed from the list. It returns the list with the remaining values.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For every number in the $inputted:inputted$ $list:list$, if that $key:item$ is not a float and is not divisible by two it is $skipped:removed$ from the $list:list$. It $returns:returns$ the $list:list$ with the remaining values.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 342, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student41", "submitted_text": "For every item in the inputted list, if that item is not a float and is not divisible by two it is removed from the list. It returns the list with the remaining values.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For every $key:item$ in the $inputted:inputted$ $list:list$, if that $key:item$ is not a float and is not divisible by two it is $skipped:removed$ from the $list:list$. It $returns:returns$ the $list:list$ with the remaining values.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 347, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student51", "submitted_text": "For each object in the list, remove it if it is an odd integer. Return the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For each object in the $list:list$, $skip:remove$ it if it is an odd $integer:integer$. $Return:Return$ the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 348, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student51", "submitted_text": "remove each object in the list if it is an odd integer. Return the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    $skip:remove$ each object in the $list:list$ if it is an odd $integer:integer$. $Return:Return$ the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 356, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student36", "submitted_text": "using dt as a reference, return the associated objects of the objects in lst", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    using dt as a reference, $return:return$ the associated objects of the objects in lst\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 364, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student54", "submitted_text": "Find the keys in the list. If found, return the value of that key. If not found, return None.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Find the $keys:keys$ in the $list:list$. If found, $return:return$ the value of that $key:key$. If not found, $return:return$ None.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 381, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student77", "submitted_text": "Given a list of letters, return \"True\" if the list has a Q or U or both, and \"False\" if the list does not.", "prompt": "def has_qu(lst):\n    \"\"\"\n    Given a $list:list$ of letters, $return:return$ \"True\" if the $list:list$ has a Q or U or both, and \"False\" if the $list:list$ does not.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 389, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student14", "submitted_text": "if planet mass is less than 16, add up the total planet mass in each bracket", "prompt": "def planets_mass(planets):\n    \"\"\"\n    if planet mass is less than 16, $insert:add$ up the total planet mass in each bracket\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 390, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student14", "submitted_text": "if 'sun' is in the string, output is 15", "prompt": "def planets_mass(planets):\n    \"\"\"\n    if 'sun' is in the $string:string$, $return:output$ is 15\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 391, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student14", "submitted_text": "if 'sun' is in planets, output is 15. else, output 0", "prompt": "def planets_mass(planets):\n    \"\"\"\n    if 'sun' is in planets, $return:output$ is 15. else, $return:output$ 0\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 395, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student24", "submitted_text": "For each item in the dictionary, add the values from that name if the name is in a different dictionary. Return the sum of those values.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    For each $key:item$ in the $dictionary:dictionary$, $insert:add$ the values from that name if the name is in a different $dictionary:dictionary$. $Return:Return$ the sum of those values.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 402, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student46", "submitted_text": "The function will take in a dictionary where the keys are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    The function will $take:take$ in a $dictionary:dictionary$ where the $keys:keys$ are $strings:strings$, with the first letter capitalized, and $integers:integers$ are stored inside them. It will $skip:remove$ any $strings:strings$ that are not associated with planets, then it will $take:take$ all the $integers:integers$ stored inside and $insert:add$ them together and $return:output$ that.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 405, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student47", "submitted_text": "\"add up all the floats associated with 'Venus' and 'Mercury'\"", "prompt": "def planets_mass(planets):\n    \"\"\"\n    \"$insert:add$ up all the floats associated with 'Venus' and 'Mercury'\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 406, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student47", "submitted_text": "\"add up all the integers associated with 'Venus' and 'Mercury'\"", "prompt": "def planets_mass(planets):\n    \"\"\"\n    \"$insert:add$ up all the $integers:integers$ associated with 'Venus' and 'Mercury'\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 407, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student47", "submitted_text": "\"add up all the integers that are associated with with a string that is 'Venus' and 'Mercury'\"", "prompt": "def planets_mass(planets):\n    \"\"\"\n    \"$insert:add$ up all the $integers:integers$ that are associated with with a $string:string$ that is 'Venus' and 'Mercury'\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 412, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student55", "submitted_text": "Write a function that gets a dictionary of planets and their masses. All the planets masses in a dictionary using the name of the planet as the key. The function should return the sum of all the planets' masses. The sun and pluto are not planets, so they cannot be added.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Write a function that $takes:gets$ a $dictionary:dictionary$ of planets and their masses. All the planets masses in a $dictionary:dictionary$ using the name of the planet as the $key:key$. The function should $return:return$ the sum of all the planets' masses. The sun and pluto are not planets, so they cannot be $inserted:added$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 413, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student55", "submitted_text": "Write a function that gets a dictionary. The function should sum up the masses of the planets and returns the total.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Write a function that $takes:gets$ a $dictionary:dictionary$. The function should sum up the masses of the planets and $returns:returns$ the total.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 414, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student55", "submitted_text": "Write a function that gets a dictionary. The key of the dictionary is the name of the planet and the value is the mass. The function should sum up the masses of only the planets and returns the total.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Write a function that $takes:gets$ a $dictionary:dictionary$. The $key:key$ of the $dictionary:dictionary$ is the name of the planet and the value is the mass. The function should sum up the masses of only the planets and $returns:returns$ the total.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 417, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student58", "submitted_text": "return the sum of the integers unless planet = 'Sun' or 'Pluto'", "prompt": "def planets_mass(planets):\n    \"\"\"\n    $return:return$ the sum of the $integers:integers$ unless planet = 'Sun' or 'Pluto'\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 418, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student58", "submitted_text": "return the sum of the integers unless planets = 'Sun' or 'Pluto'", "prompt": "def planets_mass(planets):\n    \"\"\"\n    $return:return$ the sum of the $integers:integers$ unless planets = 'Sun' or 'Pluto'\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 419, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student58", "submitted_text": "If planets = 'Sun' or 'Pluto', return 0. Else return the sum of the integers", "prompt": "def planets_mass(planets):\n    \"\"\"\n    If planets = 'Sun' or 'Pluto', $return:return$ 0. Else $return:return$ the sum of the $integers:integers$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 422, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student65", "submitted_text": "This function returns the total mass of all planets in a dictionary", "prompt": "def planets_mass(planets):\n    \"\"\"\n    This function $returns:returns$ the total mass of all planets in a $dictionary:dictionary$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 423, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student65", "submitted_text": "This function takes the input of a dictionary. If the key is a planet, it takes the entry and adds it to the total mass. The function outputs the total mass of all planets in the dictionary.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    This function $takes:takes$ the $input:input$ of a $dictionary:dictionary$. If the $key:key$ is a planet, it $takes:takes$ the $key:entry$ and $inserts:adds$ it to the total mass. The function $returns:outputs$ the total mass of all planets in the $dictionary:dictionary$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 428, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student5", "submitted_text": "the function student_grades will take two inputs of students and grades. Students will have a name and then a score. Grades will have a number and a range of letter grades. The function should return the name of a student with the range of letter grade they got based on their score. ", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    the function student_grades will $take:take$ two $inputs:inputs$ of students and grades. Students will have a name and then a score. Grades will have a number and a range of letter grades. The function should $return:return$ the name of a student with the range of letter grade they got based on their score. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 432, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student11", "submitted_text": "by comparing two dictionaries: students and grades. If the values from students equals to the keys from grades, then sign the values from grades to update the values in students.", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    by comparing two $dictionaries:dictionaries$: students and grades. If the values from students equals to the $keys:keys$ from grades, then sign the values from grades to update the values in students.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 444, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student74", "submitted_text": "Assigns students to a number. Then, the students are assigned a letter grade. The code should keep track of the letter grade for each student. Any unassigned students should be ignored.", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Assigns students to a number. Then, the students are assigned a letter grade. The code should keep track of the letter grade for each student. Any unassigned students should be $skipped:ignored$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 447, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student23", "submitted_text": "This function takes in a list within a list, consisting of the age as an integer, and names as a string. The output creates a dictionary where the key is the name and appends the value which is the age that is given. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function $takes:takes$ in a $list:list$ within a $list:list$, consisting of the age as an $integer:integer$, and names as a $string:string$. The $return:output$ creates a $dictionary:dictionary$ where the $key:key$ is the name and $inserts:appends$ the value which is the age that is given. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 448, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student23", "submitted_text": "This function takes in a list within a list, consisting of the an integer, and names as a string. The output creates a dictionary where the key is the name and appends the value which is the integar that is given. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function $takes:takes$ in a $list:list$ within a $list:list$, consisting of the an $integer:integer$, and names as a $string:string$. The $return:output$ creates a $dictionary:dictionary$ where the $key:key$ is the name and $inserts:appends$ the value which is the integar that is given. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 449, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student23", "submitted_text": "This function takes in a list within a list, consisting of an integer, and names as a string. The output creates a dictionary where the key is the name and updates the dictionary with the value which is the integar that is given. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function $takes:takes$ in a $list:list$ within a $list:list$, consisting of an $integer:integer$, and names as a $string:string$. The $return:output$ creates a $dictionary:dictionary$ where the $key:key$ is the name and updates the $dictionary:dictionary$ with the value which is the integar that is given. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 450, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student23", "submitted_text": "This function takes in a list within a list, consisting of an integer in the outer list, and names as a string in the inner list. The output creates a dictionary where the key is the name and updates the dictionary with the value which is the integar that is given. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function $takes:takes$ in a $list:list$ within a $list:list$, consisting of an $integer:integer$ in the outer $list:list$, and names as a $string:string$ in the inner $list:list$. The $return:output$ creates a $dictionary:dictionary$ where the $key:key$ is the name and updates the $dictionary:dictionary$ with the value which is the integar that is given. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 457, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student40", "submitted_text": "the input will consist of a list of lists. an empty dictionary will be made. the strings will be keys in the dictionary and the numbers will be the values that correspond to each key. each string will be its own key. if a key appears twice, then the values will be added and will correspond to only one key.", "prompt": "def times_with(meetings):\n    \"\"\"\n    the $input:input$ will consist of a $list:list$ of $lists:lists$. an empty $dictionary:dictionary$ will be made. the $strings:strings$ will be $keys:keys$ in the $dictionary:dictionary$ and the numbers will be the values that correspond to each $key:key$. each $string:string$ will be its own $key:key$. if a $key:key$ appears twice, then the values will be $inserted:added$ and will correspond to only one $key:key$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 458, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student40", "submitted_text": "the input will consist of a list of lists. an empty dictionary will be made. each string within the list will be a  key. the numbers outside of each list will be the value for each key. if a key appears twice, then the values will be added and will correspond to only one key.", "prompt": "def times_with(meetings):\n    \"\"\"\n    the $input:input$ will consist of a $list:list$ of $lists:lists$. an empty $dictionary:dictionary$ will be made. each $string:string$ within the $list:list$ will be a  $key:key$. the numbers outside of each $list:list$ will be the value for each $key:key$. if a $key:key$ appears twice, then the values will be $inserted:added$ and will correspond to only one $key:key$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 462, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student50", "submitted_text": "Input is an array containing a number and names. Return a dictionary with each name pointing to one number. If a name in the list of names appears next to more than one number, add the two numbers together when returning a number.", "prompt": "def times_with(meetings):\n    \"\"\"\n    $Input:Input$ is an $list:array$ containing a number and names. $Return:Return$ a $dictionary:dictionary$ with each name pointing to one number. If a name in the $list:list$ of names appears next to more than one number, $insert:add$ the two numbers together when $returning:returning$ a number.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 463, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student50", "submitted_text": "Input is an array containing a number and names. Return a dictionary where each name in the list of names points to the number. If there are several lists of names and several numbers, if names appear in more than one list, add the corresponding numbers together.", "prompt": "def times_with(meetings):\n    \"\"\"\n    $Input:Input$ is an $list:array$ containing a number and names. $Return:Return$ a $dictionary:dictionary$ where each name in the $list:list$ of names points to the number. If there are several $lists:lists$ of names and several numbers, if names appear in more than one $list:list$, $insert:add$ the corresponding numbers together.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 466, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student59", "submitted_text": "takes a list of lists as an input. creates an empty dictionary. for each list in the inputted list, takes each value in the [1] place and make it a key and add it to the created dictionary, then make the value of that key the value in the [0] place from the list. returns a dictionary of keys and their values", "prompt": "def times_with(meetings):\n    \"\"\"\n    $takes:takes$ a $list:list$ of $lists:lists$ as an $input:input$. creates an empty $dictionary:dictionary$. for each $list:list$ in the $inputted:inputted$ $list:list$, $takes:takes$ each value in the [1] place and make it a $key:key$ and $insert:add$ it to the created $dictionary:dictionary$, then make the value of that $key:key$ the value in the [0] place from the $list:list$. $returns:returns$ a $dictionary:dictionary$ of $keys:keys$ and their values\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 478, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student75", "submitted_text": "def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1,2,3:val1", "prompt": "def times_with(meetings):\n    \"\"\"\n    def times_with(meetings): $takes:takes$ the $input:input$ [ [30, ['Alice', 'Bob', 'Carol']] ] and $returns:produces$ and $return:output$ of val1,2,3:val1\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 479, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student75", "submitted_text": "def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val:val1", "prompt": "def times_with(meetings):\n    \"\"\"\n    def times_with(meetings): $takes:takes$ the $input:input$ [ [30, ['Alice', 'Bob', 'Carol']] ] and $returns:produces$ and $return:output$ of val:val1\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 480, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student75", "submitted_text": "def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1:val1, val2:val1, val3:val1", "prompt": "def times_with(meetings):\n    \"\"\"\n    def times_with(meetings): $takes:takes$ the $input:input$ [ [30, ['Alice', 'Bob', 'Carol']] ] and $returns:produces$ and $return:output$ of val1:val1, val2:val1, val3:val1\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 481, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student75", "submitted_text": "def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val(1,2,3):val0", "prompt": "def times_with(meetings):\n    \"\"\"\n    def times_with(meetings): $takes:takes$ the $input:input$ [ [30, ['Alice', 'Bob', 'Carol']] ] and $returns:produces$ and $return:output$ of val(1,2,3):val0\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 482, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student75", "submitted_text": "def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val(1,2,3):val0, print without \"[]\"", "prompt": "def times_with(meetings):\n    \"\"\"\n    def times_with(meetings): $takes:takes$ the $input:input$ [ [30, ['Alice', 'Bob', 'Carol']] ] and $returns:produces$ and $return:output$ of val(1,2,3):val0, $return:print$ without \"[]\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 486, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student79", "submitted_text": "you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists and return that dictionary.", "prompt": "def times_with(meetings):\n    \"\"\"\n    you are going to have a nested $list:list$ as an $input:input$. the inner most $lists:lists$ are going to have $strings:strings$. next to them they will have an $integer:integer$. your goal is to create a $dictionary:dictionary$ with the names in the inner most $lists:lists$ and $return:return$ that $dictionary:dictionary$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 487, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student79", "submitted_text": "you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists with the corresponding number and return that dictionary.", "prompt": "def times_with(meetings):\n    \"\"\"\n    you are going to have a nested $list:list$ as an $input:input$. the inner most $lists:lists$ are going to have $strings:strings$. next to them they will have an $integer:integer$. your goal is to create a $dictionary:dictionary$ with the names in the inner most $lists:lists$ with the corresponding number and $return:return$ that $dictionary:dictionary$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 488, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student79", "submitted_text": "you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists with the corresponding number and return.", "prompt": "def times_with(meetings):\n    \"\"\"\n    you are going to have a nested $list:list$ as an $input:input$. the inner most $lists:lists$ are going to have $strings:strings$. next to them they will have an $integer:integer$. your goal is to create a $dictionary:dictionary$ with the names in the inner most $lists:lists$ with the corresponding number and $return:return$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 489, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student79", "submitted_text": "you are going to have a nested list as an input. the inner most lists are going to have strings. next to them in an outer list they will have an integer. your goal is to create a dictionary with the names in the inner most lists with the corresponding number and return.", "prompt": "def times_with(meetings):\n    \"\"\"\n    you are going to have a nested $list:list$ as an $input:input$. the inner most $lists:lists$ are going to have $strings:strings$. next to them in an outer $list:list$ they will have an $integer:integer$. your goal is to create a $dictionary:dictionary$ with the names in the inner most $lists:lists$ with the corresponding number and $return:return$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 498, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student16", "submitted_text": "count the number of 'Meep' and 'Morp' in a list", "prompt": "def meeps_morps(items):\n    \"\"\"\n    count the number of 'Meep' and 'Morp' in a $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 501, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student22", "submitted_text": "take in a list of strings and output a tuple count of how many times the word 'Meep' and 'Morp' occur", "prompt": "def meeps_morps(items):\n    \"\"\"\n    $take:take$ in a $list:list$ of $strings:strings$ and $return:output$ a tuple count of how many times the $string:word$ 'Meep' and 'Morp' occur\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 505, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student61", "submitted_text": "function counts amount of times that 'Meep' and 'Morp' appear in input", "prompt": "def meeps_morps(items):\n    \"\"\"\n    function counts amount of times that 'Meep' and 'Morp' appear in $input:input$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 506, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student61", "submitted_text": "function counts amount of times that 'Meep' and 'Morp' appear in input of strings", "prompt": "def meeps_morps(items):\n    \"\"\"\n    function counts amount of times that 'Meep' and 'Morp' appear in $input:input$ of $strings:strings$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 507, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student61", "submitted_text": "function counts amount of times that 'Meep' and 'Morp' appear in dictionary", "prompt": "def meeps_morps(items):\n    \"\"\"\n    function counts amount of times that 'Meep' and 'Morp' appear in $dictionary:dictionary$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 513, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student12", "submitted_text": "Return if the day of the week is a weekday or weekend if the hour is not between 0 and 8. Else, return sleeping.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    $Return:Return$ if the day of the week is a weekday or weekend if the hour is not between 0 and 8. Else, $return:return$ sleeping.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 514, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student12", "submitted_text": "If the hour is between 0 and 8, return sleeping. Return weekend if the day is Saturday or Sunday. Return weekday if the day is any day between Monday and Friday.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    If the hour is between 0 and 8, $return:return$ sleeping. $Return:Return$ weekend if the day is Saturday or Sunday. $Return:Return$ weekday if the day is any day between Monday and Friday.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 515, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student12", "submitted_text": "If the hour is between 0 and 8, return sleeping. Else, return weekend if the day is Saturday or Sunday. Else, return weekday if the day is any day between Monday and Friday.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    If the hour is between 0 and 8, $return:return$ sleeping. Else, $return:return$ weekend if the day is Saturday or Sunday. Else, $return:return$ weekday if the day is any day between Monday and Friday.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 520, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student36", "submitted_text": "Return weekend for Sat and Sun or weekday for any other.  If the time is between 0-8 return sleeping", "prompt": "def print_time(day,hour):\n    \"\"\"\n    $Return:Return$ weekend for Sat and Sun or weekday for any other.  If the time is between 0-8 $return:return$ sleeping\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 525, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student42", "submitted_text": "take in a day and an hour. if the hour is between 0 and 8, return the string \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, return the string \"weekend\". else, return the string \"weekday\". ", "prompt": "def print_time(day,hour):\n    \"\"\"\n    $take:take$ in a day and an hour. if the hour is between 0 and 8, $return:return$ the $string:string$ \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, $return:return$ the $string:string$ \"weekend\". else, $return:return$ the $string:string$ \"weekday\". \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 530, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student54", "submitted_text": "If Sat or Sun, print weekend. If Mon-Fri, print weekday. If hours 0-8, print sleeping.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    If Sat or Sun, $return:print$ weekend. If Mon-Fri, $return:print$ weekday. If hours 0-8, $return:print$ sleeping.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 531, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student54", "submitted_text": "If Sat or Sun, return weekend. If Mon-Fri, return weekday. If hours 0-8, return sleeping.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    If Sat or Sun, $return:return$ weekend. If Mon-Fri, $return:return$ weekday. If hours 0-8, $return:return$ sleeping.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 532, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student54", "submitted_text": "If hours 0-8, return sleeping. If Sat or Sun, return weekend. If Mon-Fri, return weekday. ", "prompt": "def print_time(day,hour):\n    \"\"\"\n    If hours 0-8, $return:return$ sleeping. If Sat or Sun, $return:return$ weekend. If Mon-Fri, $return:return$ weekday. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 537, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student77", "submitted_text": "Given two parameters,  the first being the day and the second being a measurement of time, return \"weekend\" if the day is 'Sat' or 'Sun', and return weekday if the day is neither. Return \"sleeping\" if the measurement of time is between '0' and '8', inclusive.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    Given two $parameters:parameters$,  the first being the day and the second being a measurement of time, $return:return$ \"weekend\" if the day is 'Sat' or 'Sun', and $return:return$ weekday if the day is neither. $Return:Return$ \"sleeping\" if the measurement of time is between '0' and '8', inclusive.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 542, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student20", "submitted_text": "Take a list of words sharing the same ending, and a string as an input.\nSearch the last letters of each word in the list for the string, and replace it with 's'.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    $Take:Take$ a $list:list$ of $strings:words$ sharing the same ending, and a $string:string$ as an $input:input$.\nSearch the last letters of each $string:word$ in the $list:list$ for the $string:string$, and replace it with 's'.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 543, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student20", "submitted_text": "Take a list of words sharing the same ending, and a string as an input.\nTake the last letters of each word in the list for the string, and replace it with 's'.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    $Take:Take$ a $list:list$ of $strings:words$ sharing the same ending, and a $string:string$ as an $input:input$.\n$Take:Take$ the last letters of each $string:word$ in the $list:list$ for the $string:string$, and replace it with 's'.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 546, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student36", "submitted_text": "With the words in the list, replace the part of the word in string contained outside the list with 's'", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    With the $strings:words$ in the $list:list$, replace the $key:part$ of the $string:word$ in $string:string$ contained outside the $list:list$ with 's'\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 547, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student36", "submitted_text": "With the words in the list,  the part of the word in string contained outside the list replace with 's'", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    With the $strings:words$ in the $list:list$,  the $key:part$ of the $string:word$ in $string:string$ contained outside the $list:list$ replace with 's'\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 550, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student38", "submitted_text": "Take out ending from each string in words", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    $Take:Take$ out ending from each $string:string$ in $strings:words$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 555, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student54", "submitted_text": "Find the string stated after the list within each string at each index in the list and replace with 's'. If the string occurs more than one time at the index, replace it the last time.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Find the $string:string$ stated after the $list:list$ within each $string:string$ at each index in the $list:list$ and replace with 's'. If the $string:string$ occurs more than one time at the index, replace it the last time.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 556, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student54", "submitted_text": "Find the string stated after the list within each string at each index in the list and replace with 's'. If the string occurs more than one time at the index, replace it with 's' the last time, maintaining the rest of the string.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Find the $string:string$ stated after the $list:list$ within each $string:string$ at each index in the $list:list$ and replace with 's'. If the $string:string$ occurs more than one time at the index, replace it with 's' the last time, maintaining the rest of the $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 557, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student54", "submitted_text": "If the string stated after the list occurs more than one time within a string in the list, replace it with 's' the last time, maintaining the rest of the string. Find the string stated after the list within each string at each index in the list and replace with 's'. ", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    If the $string:string$ stated after the $list:list$ occurs more than one time within a $string:string$ in the $list:list$, replace it with 's' the last time, maintaining the rest of the $string:string$. Find the $string:string$ stated after the $list:list$ within each $string:string$ at each index in the $list:list$ and replace with 's'. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 562, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student23", "submitted_text": "This function takes in a number and adds one if the number is greater than 9. If the number is negative it turns into a positive number. If it is a single-digit number it adds a zero to the end of the number. Then the output is returned with the updated number.", "prompt": "def increaseScore(score):\n    \"\"\"\n    This function $takes:takes$ in a number and $inserts:adds$ one if the number is greater than 9. If the number is negative it $typecasts:turns$ into a positive number. If it is a single-digit number it $inserts:adds$ a zero to the end of the number. Then the $return:output$ is $returned:returned$ with the updated number.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 563, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student23", "submitted_text": "This function takes in a number and adds one if the number is greater than 9. If the number is negative it turns into a positive number. If it is a single-digit number it adds a zero to the end of the integar. Then the output is returned with the updated number.", "prompt": "def increaseScore(score):\n    \"\"\"\n    This function $takes:takes$ in a number and $inserts:adds$ one if the number is greater than 9. If the number is negative it $typecasts:turns$ into a positive number. If it is a single-digit number it $inserts:adds$ a zero to the end of the integar. Then the $return:output$ is $returned:returned$ with the updated number.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 564, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student23", "submitted_text": "This function takes in a number and adds one if the number is greater than 9. If the number is negative it turns into a positive number. If it is a single-digit number it adds the number zero to the end of the integer. Then the output is returned with the updated number.", "prompt": "def increaseScore(score):\n    \"\"\"\n    This function $takes:takes$ in a number and $inserts:adds$ one if the number is greater than 9. If the number is negative it $typecasts:turns$ into a positive number. If it is a single-digit number it $inserts:adds$ the number zero to the end of the $integer:integer$. Then the $return:output$ is $returned:returned$ with the updated number.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 569, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student35", "submitted_text": "The purpose of the function is to convert the input score into a number that is greater than or equal to 10. If a negative number is provided, it is to be converted into a positive number and if its value is less than 10, it should become 10. If a positive single digit is provided, it should be converted into 10. If a positive double-digit number (including 10) is provided, its value is to be increased by 1.", "prompt": "def increaseScore(score):\n    \"\"\"\n    The purpose of the function is to $typecast:convert$ the $input:input$ score into a number that is greater than or equal to 10. If a negative number is $provided:provided$, it is to be $typecasted:converted$ into a positive number and if its value is less than 10, it should become 10. If a positive single digit is $provided:provided$, it should be $typecasted:converted$ into 10. If a positive double-digit number (including 10) is $provided:provided$, its value is to be increased by 1.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 578, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student60", "submitted_text": "The function takes in an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number and returns it. Otherwise, the function just returns score + 1. This function always returns an int", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function $takes:takes$ in an $integer:int$ score as $parameter:parameter$. If the score is negative, it $returns:returns$ a positive number. If the score is a single digit, it $inserts:adds$ a 0 at the end of the number and $returns:returns$ it. Otherwise, the function just $returns:returns$ score + 1. This function always $returns:returns$ an $integer:int$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 592, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student6", "submitted_text": "Function takes in the name of an inputted month of the year and outputs the season that the month is in ", "prompt": "def getSeason(month):\n    \"\"\"\n    Function $takes:takes$ in the name of an $inputted:inputted$ month of the year and $returns:outputs$ the season that the month is in \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 593, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student6", "submitted_text": "Function takes in the name of an inputted month of the year and outputs the season that the month is in. It returns and prints the correct outputted season", "prompt": "def getSeason(month):\n    \"\"\"\n    Function $takes:takes$ in the name of an $inputted:inputted$ month of the year and $returns:outputs$ the season that the month is in. It $returns:returns$ and $returns:prints$ the correct $returned:outputted$ season\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 596, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student7", "submitted_text": "Takes an inputted month and returns the season for which the month is found in. The months are assigned numbers one to twelve, respectively. The first three months of the year are considered to be winter, the next three months are considered to be spring, the next three months are considered summer, and the last three months are considered fall.\n", "prompt": "def getSeason(month):\n    \"\"\"\n    $Takes:Takes$ an $inputted:inputted$ month and $returns:returns$ the season for which the month is found in. The months are assigned numbers one to twelve, respectively. The first three months of the year are considered to be winter, the next three months are considered to be spring, the next three months are considered summer, and the last three months are considered fall.\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 597, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student7", "submitted_text": "Takes an inputted month and returns the season for which the month is found in. January, February, and March are considered to be winter; April, May, and June are considered to be spring; July, August, and September are considered summer; and the rest are considered fall.\n", "prompt": "def getSeason(month):\n    \"\"\"\n    $Takes:Takes$ an $inputted:inputted$ month and $returns:returns$ the season for which the month is found in. January, February, and March are considered to be winter; April, May, and June are considered to be spring; July, August, and September are considered summer; and the rest are considered fall.\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 600, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student9", "submitted_text": "The function determines which season the string belongs to. It makes the first letter of the output lowercase.", "prompt": "def getSeason(month):\n    \"\"\"\n    The function determines which season the $string:string$ belongs to. It makes the first letter of the $return:output$ lowercase.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 601, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student9", "submitted_text": "The function determines which season the string belongs to. It makes the first letter of the output lowercase. It uses the string \"fall\" instead of \"autumn\".", "prompt": "def getSeason(month):\n    \"\"\"\n    The function determines which season the $string:string$ belongs to. It makes the first letter of the $return:output$ lowercase. It uses the $string:string$ \"fall\" instead of \"autumn\".\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 602, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student9", "submitted_text": "The function determines which season the string belongs to. It makes the first letter of the output lowercase. If the string is 'September', 'October', or 'November', the output is 'fall'.", "prompt": "def getSeason(month):\n    \"\"\"\n    The function determines which season the $string:string$ belongs to. It makes the first letter of the $return:output$ lowercase. If the $string:string$ is 'September', 'October', or 'November', the $return:output$ is 'fall'.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 603, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student9", "submitted_text": "The function determines which season the string belongs to. It makes the first letter of the output lowercase. ", "prompt": "def getSeason(month):\n    \"\"\"\n    The function determines which season the $string:string$ belongs to. It makes the first letter of the $return:output$ lowercase. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 606, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student14", "submitted_text": "if month == 12, 1, or 2, output is winter. If month == 3, 4, or 5, output is spring. If month == 6, 7, or 8, output is summer. If month == 9, 10, or 11, output is fall.", "prompt": "def getSeason(month):\n    \"\"\"\n    if month == 12, 1, or 2, $return:output$ is winter. If month == 3, 4, or 5, $return:output$ is spring. If month == 6, 7, or 8, $return:output$ is summer. If month == 9, 10, or 11, $return:output$ is fall.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 607, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student14", "submitted_text": "if month == 12, 1, or 2, output is winter. If month == 3, 4, or 5, output is spring. If month == 6, 7, or 8, output is summer. If month == 9, 10, or 11, output is fall. No else statement.", "prompt": "def getSeason(month):\n    \"\"\"\n    if month == 12, 1, or 2, $return:output$ is winter. If month == 3, 4, or 5, $return:output$ is spring. If month == 6, 7, or 8, $return:output$ is summer. If month == 9, 10, or 11, $return:output$ is fall. No else statement.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 610, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student15", "submitted_text": "Has a list of all months in order, with index 0 = 0 and the rest of the indexes corresponding to the correct month. Has a dictionary matching a season to a month. If the inputted month is in the season, returns that season.", "prompt": "def getSeason(month):\n    \"\"\"\n    Has a $list:list$ of all months in order, with index 0 = 0 and the rest of the indexes corresponding to the correct month. Has a $dictionary:dictionary$ matching a season to a month. If the $inputted:inputted$ month is in the season, $returns:returns$ that season.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 611, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student15", "submitted_text": "Has a list of all months in order. Index 0 of the list is '0', and the rest of the indexes corresponding to the correct month. Has a dictionary matching a season to a month. If the inputted month is in the season, returns that season.", "prompt": "def getSeason(month):\n    \"\"\"\n    Has a $list:list$ of all months in order. Index 0 of the $list:list$ is '0', and the rest of the indexes corresponding to the correct month. Has a $dictionary:dictionary$ matching a season to a month. If the $inputted:inputted$ month is in the season, $returns:returns$ that season.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 612, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student15", "submitted_text": "Has a list of all months in order. Index 0 of the list is '0', and the rest of the indexes corresponding to the correct month. Has a dictionary matching a season to a month. \nfor each key, value in the dictionary, if the inputted month = value, returns the key.", "prompt": "def getSeason(month):\n    \"\"\"\n    Has a $list:list$ of all months in order. Index 0 of the $list:list$ is '0', and the rest of the indexes corresponding to the correct month. Has a $dictionary:dictionary$ matching a season to a month. \nfor each $key:key$, value in the $dictionary:dictionary$, if the $inputted:inputted$ month = value, $returns:returns$ the $key:key$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 615, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student24", "submitted_text": "If the number of a month is in the list, return the season for that month", "prompt": "def getSeason(month):\n    \"\"\"\n    If the number of a month is in the $list:list$, $return:return$ the season for that month\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 618, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student28", "submitted_text": "This function takes one parameter, month. Month is a string and Month represents the months in a year. The code should take seasons associated with that month and print the associated season of that month. ", "prompt": "def getSeason(month):\n    \"\"\"\n    This function $takes:takes$ one $parameter:parameter$, month. Month is a $string:string$ and Month represents the months in a year. The code should $take:take$ seasons associated with that month and $return:print$ the associated season of that month. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 619, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student28", "submitted_text": "This function takes one parameter, month. Month is a string and Month represents the months in a year. There are seasons associated with each month. Winter, spring, summer, and fall. The code should take seasons associated with that month and print the associated season of that month. ", "prompt": "def getSeason(month):\n    \"\"\"\n    This function $takes:takes$ one $parameter:parameter$, month. Month is a $string:string$ and Month represents the months in a year. There are seasons associated with each month. Winter, spring, summer, and fall. The code should $take:take$ seasons associated with that month and $return:print$ the associated season of that month. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 622, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student31", "submitted_text": "Takes a string corresponding to one month of the year, and returns a string indicating what season that month is in: 'summer', 'winter', 'spring', or 'fall'.", "prompt": "def getSeason(month):\n    \"\"\"\n    $Takes:Takes$ a $string:string$ corresponding to one month of the year, and $returns:returns$ a $string:string$ indicating what season that month is in: 'summer', 'winter', 'spring', or 'fall'.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 623, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student31", "submitted_text": "Takes a string corresponding to one month of the year, and returns a string indicating what season that month is in: December, January, and February are all in winter, March, April, and May are all in spring, June, July, and August are all in summer, and October, September, and November are all in fall.", "prompt": "def getSeason(month):\n    \"\"\"\n    $Takes:Takes$ a $string:string$ corresponding to one month of the year, and $returns:returns$ a $string:string$ indicating what season that month is in: December, January, and February are all in winter, March, April, and May are all in spring, June, July, and August are all in summer, and October, September, and November are all in fall.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 626, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student39", "submitted_text": "The goal for this function, getSeason is when provided with a number corresponding to a month of the year to return what season that month belongs to. ", "prompt": "def getSeason(month):\n    \"\"\"\n    The goal for this function, getSeason is when $provided:provided$ with a number corresponding to a month of the year to $return:return$ what season that month belongs to. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 627, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student39", "submitted_text": "The goal for this function, getSeason is when provided a month of the year to return what season that month belongs to. The month of the year will correspond with a numerical value based on the order of the month during the year. For example January = 1.", "prompt": "def getSeason(month):\n    \"\"\"\n    The goal for this function, getSeason is when $provided:provided$ a month of the year to $return:return$ what season that month belongs to. The month of the year will correspond with a numerical value based on the order of the month during the year. For example January = 1.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 630, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student45", "submitted_text": "Takes one parameter, a string, which we will call month. Outputs a string which we will call season. If month is \"December\", \"January\", or \"February\", season is 'winter'. If month is \"March\", \"April\", or \"May\", season is 'spring'. If month is \"June\", \"July\", or \"August\", season is 'summer'. If month is \"September\", \"October\", or \"November\", season is \"fall\".", "prompt": "def getSeason(month):\n    \"\"\"\n    $Takes:Takes$ one $parameter:parameter$, a $string:string$, which we will call month. $Returns:Outputs$ a $string:string$ which we will call season. If month is \"December\", \"January\", or \"February\", season is 'winter'. If month is \"March\", \"April\", or \"May\", season is 'spring'. If month is \"June\", \"July\", or \"August\", season is 'summer'. If month is \"September\", \"October\", or \"November\", season is \"fall\".\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 631, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student45", "submitted_text": "Takes one parameter, a string, which we will call month. Outputs a string which we will call season. If month is \"December\", \"January\", or \"February\", season is 'winter'. If month is \"March\", \"April\", or \"May\", season is 'spring'. If month is \"June\", \"July\", or \"August\", season is 'summer'. If month is \"September\", \"October\", or \"November\", season is 'fall'.", "prompt": "def getSeason(month):\n    \"\"\"\n    $Takes:Takes$ one $parameter:parameter$, a $string:string$, which we will call month. $Returns:Outputs$ a $string:string$ which we will call season. If month is \"December\", \"January\", or \"February\", season is 'winter'. If month is \"March\", \"April\", or \"May\", season is 'spring'. If month is \"June\", \"July\", or \"August\", season is 'summer'. If month is \"September\", \"October\", or \"November\", season is 'fall'.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 634, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student46", "submitted_text": "The functions take in a string, representing a month, then outputs the season commonly associated with that month.", "prompt": "def getSeason(month):\n    \"\"\"\n    The functions $take:take$ in a $string:string$, representing a month, then $returns:outputs$ the season commonly associated with that month.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 635, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student46", "submitted_text": "The functions take in a string, representing a month, then outputs the season commonly associated with that month, in lower case.", "prompt": "def getSeason(month):\n    \"\"\"\n    The functions $take:take$ in a $string:string$, representing a month, then $returns:outputs$ the season commonly associated with that month, in lower case.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 641, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student55", "submitted_text": "Write a function that gets the name of the month and returns the season that the majority of the month is represented by in the north hemisphere. The first letter of the season should be in lowercase.", "prompt": "def getSeason(month):\n    \"\"\"\n    Write a function that $takes:gets$ the name of the month and $returns:returns$ the season that the majority of the month is represented by in the north hemisphere. The first letter of the season should be in lowercase.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 642, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student55", "submitted_text": "Write a function that gets the name of the month and returns the season that the majority of the month is represented by in the north hemisphere. The first letter of the season should be in lowercase.", "prompt": "def getSeason(month):\n    \"\"\"\n    Write a function that $takes:gets$ the name of the month and $returns:returns$ the season that the majority of the month is represented by in the north hemisphere. The first letter of the season should be in lowercase.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 643, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student55", "submitted_text": "Write a function that gets the name of the month and returns the season that the majority of the month is represented by in the north hemisphere. The first letter of the season should be in lowercase. For the case of autumn, provide the return statement as 'fall'.", "prompt": "def getSeason(month):\n    \"\"\"\n    Write a function that $takes:gets$ the name of the month and $returns:returns$ the season that the majority of the month is represented by in the north hemisphere. The first letter of the season should be in lowercase. For the case of autumn, $provide:provide$ the $return:return$ statement as 'fall'.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 649, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student2", "submitted_text": "This function pints a list containing strings of every vowel from the input", "prompt": "def assessVowels(s):\n    \"\"\"\n    This function pints a $list:list$ containing $strings:strings$ of every vowel from the $input:input$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 650, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student2", "submitted_text": "This function prints a list containing strings of every vowel from the input", "prompt": "def assessVowels(s):\n    \"\"\"\n    This function $returns:prints$ a $list:list$ containing $strings:strings$ of every vowel from the $input:input$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 651, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student2", "submitted_text": "This function prints a list of all \"a\", \"e\", \"I\", or \"u\" that appear in the input", "prompt": "def assessVowels(s):\n    \"\"\"\n    This function $returns:prints$ a $list:list$ of all \"a\", \"e\", \"I\", or \"u\" that appear in the $input:input$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 652, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student2", "submitted_text": "This function prints all vowels", "prompt": "def assessVowels(s):\n    \"\"\"\n    This function $returns:prints$ all vowels\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 653, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student2", "submitted_text": "This function prints a list of all vowels that appear", "prompt": "def assessVowels(s):\n    \"\"\"\n    This function $returns:prints$ a $list:list$ of all vowels that appear\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 656, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student5", "submitted_text": "the function assessVowels will take input of a string and return a list of all the vowels in that string in the case they were originally written. include both capital and lower case letters. ", "prompt": "def assessVowels(s):\n    \"\"\"\n    the function assessVowels will $take:take$ $input:input$ of a $string:string$ and $return:return$ a $list:list$ of all the vowels in that $string:string$ in the case they were originally written. include both capital and lower case letters. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 661, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student13", "submitted_text": "Given a string of characters, the function should make all characters lowercase then extract the vowels in the string and returns them in a list. ", "prompt": "def assessVowels(s):\n    \"\"\"\n    Given a $string:string$ of $strings:characters$, the function should make all $strings:characters$ lowercase then extract the vowels in the $string:string$ and $returns:returns$ them in a $list:list$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 664, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student16", "submitted_text": "return a list of strings with all vowels used in the input in the same order (repetitions ok)", "prompt": "def assessVowels(s):\n    \"\"\"\n    $return:return$ a $list:list$ of $strings:strings$ with all vowels used in the $input:input$ in the same order (repetitions ok)\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 682, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student44", "submitted_text": "Return true if there is an index that contains the same value in all the arrays in the array or there is an array with all the same values.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    $Return:Return$ true if there is an index that contains the same value in all the $lists:arrays$ in the $list:array$ or there is an $list:array$ with all the same values.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 685, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student50", "submitted_text": "Measure the height and width of a 2D array, which will be iterated over. If all elements of a row or all elements of a column in a 2D array are the same, return true. Else, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Measure the height and width of a 2D $list:array$, which will be iterated over. If all $keys:elements$ of a row or all $keys:elements$ of a column in a 2D $list:array$ are the same, $return:return$ true. Else, $return:return$ false.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 686, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student50", "submitted_text": "Measure the height and width of a 2D array, which will be iterated over. If all elements of a row or all elements of a column in a 2D array are the same, return true. make sure to check all elements in the row or column. Else, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Measure the height and width of a 2D $list:array$, which will be iterated over. If all $keys:elements$ of a row or all $keys:elements$ of a column in a 2D $list:array$ are the same, $return:return$ true. make sure to check all $keys:elements$ in the row or column. Else, $return:return$ false.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 687, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student50", "submitted_text": "Measure the height and width of a 2D array, which will be iterated over. If all elements of a row or all elements of a column in a 2D array are the same, return true. make sure to check all elements in the row or column. Else, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Measure the height and width of a 2D $list:array$, which will be iterated over. If all $keys:elements$ of a row or all $keys:elements$ of a column in a 2D $list:array$ are the same, $return:return$ true. make sure to check all $keys:elements$ in the row or column. Else, $return:return$ false.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 688, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student50", "submitted_text": "Iterate through a 2D array. If a row or column of an array contain all the same element, return true. Else, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Iterate through a 2D $list:array$. If a row or column of an $list:array$ contain all the same $key:element$, $return:return$ true. Else, $return:return$ false.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 694, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student64", "submitted_text": "In list of lists, if all 5 characters in list is equal to letter, return true. Otherwise, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    In $list:list$ of $lists:lists$, if all 5 $strings:characters$ in $list:list$ is equal to letter, $return:return$ true. Otherwise, $return:return$ false.\n    \"\"\"\n    ", "subset": "middle_success"}
{"__index_level_0__": 695, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student64", "submitted_text": "In list of lists, if a list has consecutive 'X' or 'O' character, return true. Otherwise, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    In $list:list$ of $lists:lists$, if a $list:list$ has consecutive 'X' or 'O' $string:character$, $return:return$ true. Otherwise, $return:return$ false.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 696, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student64", "submitted_text": "In list of lists, if each character in list is an 'X' or 'O' character, return true. Otherwise, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    In $list:list$ of $lists:lists$, if each $string:character$ in $list:list$ is an 'X' or 'O' $string:character$, $return:return$ true. Otherwise, $return:return$ false.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 708, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "For each list entry, parse through the string and keep track of the number of \"\\\" characters. When the number of \"\\\" is 2, isolate the rest of the string. Then isolate the remainder of that string, starting at index 1. Convert this string to a float. Keep track of the float for each entry and add them all together, returning the sum for each list\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    For each $list:list$ $key:entry$, parse through the $string:string$ and keep track of the number of \"\\\" $strings:characters$. When the number of \"\\\" is 2, isolate the rest of the $string:string$. Then isolate the remainder of that $string:string$, starting at index 1. $Typecast:Convert$ this $string:string$ to a float. Keep track of the float for each $key:entry$ and $insert:add$ them all together, $returning:returning$ the sum for each $list:list$\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 709, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "For each list entry, parse through the string and keep track of the number of \"\\\" characters. When that count is 2, isolate the rest of the string. Then isolate the remainder of that string, starting at index 1. Convert this string to a float. Keep track of the float for each entry and add them all together, returning the sum for each list\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    For each $list:list$ $key:entry$, parse through the $string:string$ and keep track of the number of \"\\\" $strings:characters$. When that count is 2, isolate the rest of the $string:string$. Then isolate the remainder of that $string:string$, starting at index 1. $Typecast:Convert$ this $string:string$ to a float. Keep track of the float for each $key:entry$ and $insert:add$ them all together, $returning:returning$ the sum for each $list:list$\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 710, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "For each list entry, parse through the string and increase count after each \"\\\" character. When that count is 2, isolate the rest of the string. Then isolate the remainder of that string, starting at index 1. Convert this string to a float. Keep track of the float for each entry and add them all together, returning the sum for each list\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    For each $list:list$ $key:entry$, parse through the $string:string$ and increase count after each \"\\\" $string:character$. When that count is 2, isolate the rest of the $string:string$. Then isolate the remainder of that $string:string$, starting at index 1. $Typecast:Convert$ this $string:string$ to a float. Keep track of the float for each $key:entry$ and $insert:add$ them all together, $returning:returning$ the sum for each $list:list$\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 711, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "Starting at the end of each string input, parse backwards until you reach the \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Starting at the end of each $string:string$ $input:input$, parse backwards until you reach the \"t\" $string:character$. Isolate the $string:string$ from the \"t\" $string:character$ until the end of the $key:entry$. $Typecast:Convert$ that $string:string$ to a float, then $insert:add$ all of the floats for each $key:entry$ together and $return:return$ the total.\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 712, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "Starting at the end of each list entry, parse backwards until you reach the \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Starting at the end of each $list:list$ $key:entry$, parse backwards until you reach the \"t\" $string:character$. Isolate the $string:string$ from the \"t\" $string:character$ until the end of the $key:entry$. $Typecast:Convert$ that $string:string$ to a float, then $insert:add$ all of the floats for each $key:entry$ together and $return:return$ the total.\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 713, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "For each list entry, start at the end of the corresponding string, parse backwards until you reach the \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    For each $list:list$ $key:entry$, start at the end of the corresponding $string:string$, parse backwards until you reach the \"t\" $string:character$. Isolate the $string:string$ from the \"t\" $string:character$ until the end of the $key:entry$. $Typecast:Convert$ that $string:string$ to a float, then $insert:add$ all of the floats for each $key:entry$ together and $return:return$ the total.\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 716, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student32", "submitted_text": "Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. the sum should not be limited to integers", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    $Returns:Returns$ the sum of the numbers in each $key:element$ in the $list:array$ following the last instance of '/t' in the $key:element$. the sum should not be limited to $integers:integers$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 719, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student34", "submitted_text": "Convert the numbers that appear after the last t of each object in the list into integers, and then find the sum of those integers", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    $Typecast:Convert$ the numbers that appear after the last t of each object in the $list:list$ into $integers:integers$, and then find the sum of those $integers:integers$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 720, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student34", "submitted_text": "Convert what appears after the last t of each object in the list into numbers, and then find the sum of those numbers", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    $Typecast:Convert$ what appears after the last t of each object in the $list:list$ into numbers, and then find the sum of those numbers\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 721, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student34", "submitted_text": "Convert all that appears after the \"ice cream\\t\" or \"frozen yogurt\\t\" of each object in the list into a float, make a new list of those floats, and find the sum of that list", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    $Typecast:Convert$ all that appears after the \"ice cream\\t\" or \"frozen yogurt\\t\" of each object in the $list:list$ into a float, make a new $list:list$ of those floats, and find the sum of that $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 724, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student49", "submitted_text": "Given a list of strings remove anything past the last t in the string, and store in a new list. Type cast the new list to floats and add values together.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Given a $list:list$ of $strings:strings$ $skip:remove$ anything past the last t in the $string:string$, and store in a new $list:list$. Type $typecast:cast$ the new $list:list$ to floats and $insert:add$ values together.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 725, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student49", "submitted_text": "Given a list of strings remove anything past the last t in the string type cast the values to floats and add values together.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Given a $list:list$ of $strings:strings$ $skip:remove$ anything past the last t in the $string:string$ $typecast:type cast$ the values to floats and $insert:add$ values together.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 726, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student49", "submitted_text": "Given a list of strings remove anything past the last t in the string type cast the value to float. Then move to the next string in the list and repeat. Once the end at the end of the list and add all removed values together.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Given a $list:list$ of $strings:strings$ $skip:remove$ anything past the last t in the $string:string$ $typecast:type cast$ the value to float. Then move to the next $string:string$ in the $list:list$ and repeat. Once the end at the end of the $list:list$ and $insert:add$ all $skipped:removed$ values together.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 730, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student62", "submitted_text": "for each element in list, adds number directly after '\\t' to count if it is an integer, returns sum", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    for each $key:element$ in $list:list$, $inserts:adds$ number directly after '\\t' to count if it is an $integer:integer$, $returns:returns$ sum\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 731, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student62", "submitted_text": "for each element in list, adds number directly after the second '\\t' to count, returns sum", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    for each $key:element$ in $list:list$, $inserts:adds$ number directly after the second '\\t' to count, $returns:returns$ sum\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 734, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student66", "submitted_text": "take the integer at the end of each item in the array list and sum all of the values return the sum", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    $take:take$ the $integer:integer$ at the end of each $key:item$ in the $list:array$ $list:list$ and sum all of the values $return:return$ the sum\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 737, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student67", "submitted_text": "Multiplies the number of letters in the word before the first \\ by the number after t.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Multiplies the number of letters in the $string:word$ before the first \\ by the number after t.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 738, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student67", "submitted_text": "Multiplies the number of letters in the word before the first \\ by the number after t and returns that value.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Multiplies the number of letters in the $string:word$ before the first \\ by the number after t and $returns:returns$ that value.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 743, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student70", "submitted_text": "Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into a number, then add that number to the sum. Return the sum at the end of the list.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Create a $key:variable$ for the sum. Go through each $string:string$ in the $input:input$ $list:list$. After the second time \"\\t\" appears in the $string:string$, save the rest of the $string:string$ and $typecast:convert$ it into a number, then $insert:add$ that number to the sum. $Return:Return$ the sum at the end of the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 746, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student78", "submitted_text": "given a list of strings, split each string by \\. find the sting that contains a number and\neliminate the 't' in it, convert it to a float, and add it to running total. output this total", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given a $list:list$ of $strings:strings$, split each $string:string$ by \\. find the sting that contains a number and\neliminate the 't' in it, $typecast:convert$ it to a float, and $insert:add$ it to running total. $return:output$ this total\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 747, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student78", "submitted_text": "given a list of strings, split each string by \\. for each new string, if it starts with t, eliminate the t. next find the sting that contains a number, convert it to a float, and add it to running total. output this total", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given a $list:list$ of $strings:strings$, split each $string:string$ by \\. for each new $string:string$, if it starts with t, eliminate the t. next find the sting that contains a number, $typecast:convert$ it to a float, and $insert:add$ it to running total. $return:output$ this total\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 748, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student78", "submitted_text": "given a list of strings, split each string by \\. output this ", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given a $list:list$ of $strings:strings$, split each $string:string$ by \\. $return:output$ this \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 751, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student27", "submitted_text": "The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. They don't have to be in the same order. Return a dictionary with the string as the key and the position of the string as the value.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The $input:input$ will be a \"puzzle\" $list:list$ and a \"wordList\" $list:list$. They consist of $strings:strings$ and have equal length. Check if the $string:string$ in the puzzle $list:list$ contains all the $strings:characters$ of the $string:string$ in the wordList $list:list$. They don't have to be in the same order. $Return:Return$ a $dictionary:dictionary$ with the $string:string$ as the $key:key$ and the position of the $string:string$ as the value.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 756, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student32", "submitted_text": "Return a dictionary of each element in wordList that than can be made with the letters in puzzle, paired with its index in puzzle. Only include elements of wordlist that appear in puzzle", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    $Return:Return$ a $dictionary:dictionary$ of each $key:element$ in wordList that than can be made with the letters in puzzle, paired with its index in puzzle. Only include $keys:elements$ of wordlist that appear in puzzle\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 757, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student32", "submitted_text": "Return a dictionary of each element in wordList that that can be found with the letters in puzzle (even if the letters in an element of puzzle need to be retordered), paired with its index in puzzle. Only include elements of wordlist that appear in puzzle", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    $Return:Return$ a $dictionary:dictionary$ of each $key:element$ in wordList that that can be found with the letters in puzzle (even if the letters in an $key:element$ of puzzle need to be retordered), paired with its index in puzzle. Only include $keys:elements$ of wordlist that appear in puzzle\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 761, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student49", "submitted_text": "Given two lists labeled puzzle and wordList, for each word in the wordList, if the same letters appear in one of the strings in puzzle, create a dictionary with the corresponding word in WordList as the key and the position of the string where the letters show up in puzzle as the value. ", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Given two $lists:lists$ labeled puzzle and wordList, for each $string:word$ in the wordList, if the same letters appear in one of the $strings:strings$ in puzzle, create a $dictionary:dictionary$ with the corresponding $string:word$ in WordList as the $key:key$ and the position of the $string:string$ where the letters show up in puzzle as the value. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 765, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student62", "submitted_text": "count how many elements in first list include characters from each element in second list. If more than 0, add to dictionary with count as value", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    count how many $keys:elements$ in first $list:list$ include $strings:characters$ from each $key:element$ in second $list:list$. If more than 0, $insert:add$ to $dictionary:dictionary$ with count as value\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 770, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student67", "submitted_text": "Returns a list of dictionaries, where the name of the dictionary is ", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    $Returns:Returns$ a $list:list$ of $dictionaries:dictionaries$, where the name of the $dictionary:dictionary$ is \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 771, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student67", "submitted_text": "Returns a list of dictionaries, where the name of the dictionary is the word that repeats in the second input list.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    $Returns:Returns$ a $list:list$ of $dictionaries:dictionaries$, where the name of the $dictionary:dictionary$ is the $string:word$ that repeats in the second $input:input$ $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 775, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student70", "submitted_text": "create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a key to the dictionary with the count of the number of times it appears in the strings from puzzle as its value. return the dictionary.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty $dictionary:dictionary$. $loop through:iterate through$ each $string:string$ of the $input:input$ $list:list$ puzzle. if any of the $strings:strings$ in puzzle contain a $string:string$ from wordList, $insert:add$ that $string:string$ from wordList as a $key:key$ to the $dictionary:dictionary$ with the count of the number of times it appears in the $strings:strings$ from puzzle as its value. $return:return$ the $dictionary:dictionary$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 776, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student70", "submitted_text": "create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain the same letters as a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty $dictionary:dictionary$. $loop through:iterate through$ each $string:string$ of the $input:input$ $list:list$ puzzle. if any of the $strings:strings$ in puzzle contain the same letters as a $string:string$ from wordList, $insert:add$ that $string:string$ from wordList as a $key:key$ to the $dictionary:dictionary$ with the index of the $string:string$ from puzzle where it appeared as the value. $return:return$ the $dictionary:dictionary$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 779, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student78", "submitted_text": "given that puzzle is a list of strings, check if the letters (in any order) of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that puzzle is a $list:list$ of $strings:strings$, check if the letters (in any order) of each $string:string$ in wordList is contained in any of the $strings:strings$ in puzzle. if the $string:string$ in wordList is in any of the $strings:strings$ in puzzle, $insert:add$ it to a $dictionary:dictionary$ with the $key:key$ as the sting in wordList and the $return:output$ as the position of the $string:string$ in puzzle\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 785, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student9", "submitted_text": "The function prints how many letters each string in the list shares with the string outside the list.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function $returns:prints$ how many letters each $string:string$ in the $list:list$ shares with the $string:string$ outside the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 786, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student9", "submitted_text": "The function prints how many letters each string in the list has in common with the string outside the list.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function $returns:prints$ how many letters each $string:string$ in the $list:list$ has in common with the $string:string$ outside the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 787, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student9", "submitted_text": "The function prints how many characters each string in the list has in common with the string outside the list.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function $returns:prints$ how many $strings:characters$ each $string:string$ in the $list:list$ has in common with the $string:string$ outside the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 788, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student9", "submitted_text": "The function shows how many characters each string within the list has in common with the characters in the string outside the list.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function shows how many $strings:characters$ each $string:string$ within the $list:list$ has in common with the $strings:characters$ in the $string:string$ outside the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 789, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student9", "submitted_text": "The function shows how many characters, including \"'\", each string within the list has in common with the characters in the string outside the list.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function shows how many $strings:characters$, including \"'\", each $string:string$ within the $list:list$ has in common with the $strings:characters$ in the $string:string$ outside the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 804, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student55", "submitted_text": "Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words and return a list with the number of how many similar letters both strings share.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function that $takes:gets$ a $list:list$ of $strings:strings$ and the hidden $string:word$ (a $string:string$ separated by a comma). From the $list:list$ of $strings:strings$, compare each letter from the $strings:strings$ in the $list:list$ with the hidden $strings:words$ and $return:return$ a $list:list$ with the number of how many similar letters both $strings:strings$ share.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 805, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student55", "submitted_text": "Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words and return a list with the number of how many similar letters both strings share.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function that $takes:gets$ a $list:list$ of $strings:strings$ and the hidden $string:word$ (a $string:string$ separated by a comma). From the $list:list$ of $strings:strings$, compare each letter from the $strings:strings$ in the $list:list$ with the hidden $strings:words$ and $return:return$ a $list:list$ with the number of how many similar letters both $strings:strings$ share.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 806, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student55", "submitted_text": "Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function returns a list of the total points from each word in the list.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function that $takes:gets$ a $list:list$ of $strings:strings$ and the hidden $string:word$ (a $string:string$ separated by a comma). From the $list:list$ of $strings:strings$, compare each letter from the $strings:strings$ in the $list:list$ with the hidden $strings:words$. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden $string:word$ but in a different position, $takes:receives$ +1. If the letter is the same from the hidden $string:word$ and in the same position, $takes:receives$ +2. The function $returns:returns$ a $list:list$ of the total points from each $string:word$ in the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 820, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student67", "submitted_text": "If '&' in an item of the list, and majority '-', returns the lowest number of dashes in an item times 3. If the majority of the input in an item is '&', returns the highest number of & times 2. Returns 0 if there aren't both & and -.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    If '&' in an $key:item$ of the $list:list$, and majority '-', $returns:returns$ the lowest number of dashes in an $key:item$ times 3. If the majority of the $input:input$ in an $key:item$ is '&', $returns:returns$ the highest number of & times 2. $Returns:Returns$ 0 if there aren't both & and -.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 821, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student67", "submitted_text": "If '&' and '-' is in an item of the list, and majority '-', returns the lowest number of dashes in an item times 3. If the majority of the input in an item is '&', returns the highest number of & times 2. Returns 0 if there aren't both & and -.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    If '&' and '-' is in an $key:item$ of the $list:list$, and majority '-', $returns:returns$ the lowest number of dashes in an $key:item$ times 3. If the majority of the $input:input$ in an $key:item$ is '&', $returns:returns$ the highest number of & times 2. $Returns:Returns$ 0 if there aren't both & and -.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 822, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student67", "submitted_text": "If '&' and '-' is in an item of the list, and if there are more '-' than '&', and majority '-', returns the lowest number of dashes in an item times 3. If the majority of the input in an item is '&', returns the highest number of & times 2. Returns 0 if there aren't both & and -.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    If '&' and '-' is in an $key:item$ of the $list:list$, and if there are more '-' than '&', and majority '-', $returns:returns$ the lowest number of dashes in an $key:item$ times 3. If the majority of the $input:input$ in an $key:item$ is '&', $returns:returns$ the highest number of & times 2. $Returns:Returns$ 0 if there aren't both & and -.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 823, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student67", "submitted_text": "If '&' and '-' is in an item of the list, and if there are more '-' than '&', returns number of '-' times 3. and majority '-', returns the lowest number of dashes in an item times 3. If the majority of the input in an item is '&', returns the highest number of & times 2. Returns 0 if there aren't both & and -.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    If '&' and '-' is in an $key:item$ of the $list:list$, and if there are more '-' than '&', $returns:returns$ number of '-' times 3. and majority '-', $returns:returns$ the lowest number of dashes in an $key:item$ times 3. If the majority of the $input:input$ in an $key:item$ is '&', $returns:returns$ the highest number of & times 2. $Returns:Returns$ 0 if there aren't both & and -.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 824, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student67", "submitted_text": "If '&' and '-' is in an item of the list, and if there are more '-' than '&', returns number of '-' times 3. Otherwise returns the number of '&' times 2. and majority '-', returns the lowest number of dashes in an item times 3. If the majority of the input in an item is '&', returns the highest number of & times 2. Returns 0 if there aren't both & and -.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    If '&' and '-' is in an $key:item$ of the $list:list$, and if there are more '-' than '&', $returns:returns$ number of '-' times 3. Otherwise $returns:returns$ the number of '&' times 2. and majority '-', $returns:returns$ the lowest number of dashes in an $key:item$ times 3. If the majority of the $input:input$ in an $key:item$ is '&', $returns:returns$ the highest number of & times 2. $Returns:Returns$ 0 if there aren't both & and -.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 825, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student67", "submitted_text": "If '&' and '-' is in an item of the list, and if there are more '-' than '&', returns number of '-' times 3. Otherwise returns the number of '&' times 2. ", "prompt": "def andCount(andGrid):\n    \"\"\"\n    If '&' and '-' is in an $key:item$ of the $list:list$, and if there are more '-' than '&', $returns:returns$ number of '-' times 3. Otherwise $returns:returns$ the number of '&' times 2. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 834, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student20", "submitted_text": "Replace letters in input s that are located in index l to the input c", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Replace letters in $input:input$ s that are located in index l to the $input:input$ c\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 835, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student20", "submitted_text": "Replace letters in input s that are located in index l to the input c", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Replace letters in $input:input$ s that are located in index l to the $input:input$ c\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 836, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student20", "submitted_text": "Replace letters in input s that are located in index l to the input c.\nIf index l is out of range don't change that letter.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Replace letters in $input:input$ s that are located in index l to the $input:input$ c.\nIf index l is out of range don't $typecast:change$ that letter.\n    \"\"\"\n    ", "subset": "middle_success"}
{"__index_level_0__": 839, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student36", "submitted_text": "Insert the character contained in the second string into the character indexes of the first string contained in the list. If the index is out of range, replace the last character of the first string with the second string instead", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    $Insert:Insert$ the $string:character$ contained in the second $string:string$ into the $string:character$ indexes of the first $string:string$ contained in the $list:list$. If the index is out of range, replace the last $string:character$ of the first $string:string$ with the second $string:string$ instead\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 840, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student36", "submitted_text": "Insert the character contained in c into the character indexes of s using the numbers in l as indexes. If the index is greater than the string length replace the last character in s with c instead", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    $Insert:Insert$ the $string:character$ contained in c into the $string:character$ indexes of s using the numbers in l as indexes. If the index is greater than the $string:string$ length replace the last $string:character$ in s with c instead\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 843, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student38", "submitted_text": "Find the l character in s and replace with c", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Find the l $string:character$ in s and replace with c\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 848, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student43", "submitted_text": "First convert each element in l from string to number. Loop through each number N in l, replace the element in s that has the index order  N with the element in c. Return the changed s.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    First $typecast:convert$ each $key:element$ in l from $string:string$ to number. Loop through each number N in l, replace the $key:element$ in s that has the index order  N with the $key:element$ in c. $Return:Return$ the $typecasted:changed$ s.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 852, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student57", "submitted_text": "given a string and a character and a list, replace string at specified index in list with given character. if given index is 1+ the length of string, add character at end", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a $string:string$ and a $string:character$ and a $list:list$, replace $string:string$ at specified index in $list:list$ with given $string:character$. if given index is 1+ the length of $string:string$, $insert:add$ $string:character$ at end\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 853, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student57", "submitted_text": "given a string and a character and a list, replace string at specified index in list with given character. ", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a $string:string$ and a $string:character$ and a $list:list$, replace $string:string$ at specified index in $list:list$ with given $string:character$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 854, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student57", "submitted_text": "given a string and a character and a list, replace string at specified index in list with given character and also if given index is 1+ the length of the string, add character at end as well", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a $string:string$ and a $string:character$ and a $list:list$, replace $string:string$ at specified index in $list:list$ with given $string:character$ and also if given index is 1+ the length of the $string:string$, $insert:add$ $string:character$ at end as well\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 859, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and outputs every other letter as upper case, not including the lower case letters. If it is just a one letter word it is turned into an upper case letter. ", "prompt": "def altText(s):\n    \"\"\"\n    This function $takes:takes$ in a $string:word$ or sentence and $returns:outputs$ every other letter as upper case, not including the lower case letters. If it is just a one letter $string:word$ it is $typecasted:turned$ into an upper case letter. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 860, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and outputs every other letter as upper case, including the lower case letters. If it is just a one letter word it is turned into an upper case letter. ", "prompt": "def altText(s):\n    \"\"\"\n    This function $takes:takes$ in a $string:word$ or sentence and $returns:outputs$ every other letter as upper case, including the lower case letters. If it is just a one letter $string:word$ it is $typecasted:turned$ into an upper case letter. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 861, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and outputs every other letter as upper cas. If it is just a one letter word it is turned into an upper case letter. It then returns the whole phrase that was given.", "prompt": "def altText(s):\n    \"\"\"\n    This function $takes:takes$ in a $string:word$ or sentence and $returns:outputs$ every other letter as upper cas. If it is just a one letter $string:word$ it is $typecasted:turned$ into an upper case letter. It then $returns:returns$ the whole $string:phrase$ that was given.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 862, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and outputs every other letter as upper cas. If it is just a one letter word it is turned into an upper case letter. It then returns the whole phrase that was given, including all characters upper and lower case. ", "prompt": "def altText(s):\n    \"\"\"\n    This function $takes:takes$ in a $string:word$ or sentence and $returns:outputs$ every other letter as upper cas. If it is just a one letter $string:word$ it is $typecasted:turned$ into an upper case letter. It then $returns:returns$ the whole $string:phrase$ that was given, including all $strings:characters$ upper and lower case. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 863, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and outputs every other letter as upper case. If it is just a one-letter word it is turned into an upper-case letter. It then returns the whole phrase that was given, including all characters upper and lower case. ", "prompt": "def altText(s):\n    \"\"\"\n    This function $takes:takes$ in a $string:word$ or sentence and $returns:outputs$ every other letter as upper case. If it is just a one-letter $string:word$ it is $typecasted:turned$ into an upper-case letter. It then $returns:returns$ the whole $string:phrase$ that was given, including all $strings:characters$ upper and lower case. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 864, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and outputs every letter as upper case. If it is just a one-letter word it is turned into an upper-case letter. It then returns the whole phrase that was given, including all characters upper and lower case. ", "prompt": "def altText(s):\n    \"\"\"\n    This function $takes:takes$ in a $string:word$ or sentence and $returns:outputs$ every letter as upper case. If it is just a one-letter $string:word$ it is $typecasted:turned$ into an upper-case letter. It then $returns:returns$ the whole $string:phrase$ that was given, including all $strings:characters$ upper and lower case. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 868, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student35", "submitted_text": "'s' is a string value provided. Starting from the first character of the string, the function is supposed to convert the characters of the string in even index positions into uppercase and then return the string.", "prompt": "def altText(s):\n    \"\"\"\n    's' is a $string:string$ $parameter:value provided$. Starting from the first $string:character$ of the $string:string$, the function is supposed to $typecast:convert$ the $strings:characters$ of the $string:string$ in even index positions into uppercase and then $return:return$ the $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 871, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student40", "submitted_text": "if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, returns a new string that has the same input with alternating uppercase and lowercase letters", "prompt": "def altText(s):\n    \"\"\"\n    if the $string:string$ has one $string:character$, $returns:returns$ a capital letter when given a lowercase letter. if the $string:string$ has multiple $strings:characters$, $returns:returns$ a new $string:string$ that has the same $input:input$ with alternating uppercase and lowercase letters\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 872, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student40", "submitted_text": "if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, returns new_string that has the same input with alternating uppercase and lowercase letters", "prompt": "def altText(s):\n    \"\"\"\n    if the $string:string$ has one $string:character$, $returns:returns$ a capital letter when given a lowercase letter. if the $string:string$ has multiple $strings:characters$, $returns:returns$ new_string that has the same $input:input$ with alternating uppercase and lowercase letters\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 873, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student40", "submitted_text": "if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, creates a variable called 'new_string', which will take the original string passed through the function and return the same string but with letters of alternating case. new_string will have letters of alternating case.", "prompt": "def altText(s):\n    \"\"\"\n    if the $string:string$ has one $string:character$, $returns:returns$ a capital letter when given a lowercase letter. if the $string:string$ has multiple $strings:characters$, creates a $key:variable$ called 'new_string', which will $take:take$ the original $string:string$ passed through the function and $return:return$ the same $string:string$ but with letters of alternating case. new_string will have letters of alternating case.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 874, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student40", "submitted_text": "if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, creates a variable called 'new_string', which will take the original string passed through the function and return the same string but with letters of alternating case. new_string will have letters of alternating case. returns new_string", "prompt": "def altText(s):\n    \"\"\"\n    if the $string:string$ has one $string:character$, $returns:returns$ a capital letter when given a lowercase letter. if the $string:string$ has multiple $strings:characters$, creates a $key:variable$ called 'new_string', which will $take:take$ the original $string:string$ passed through the function and $return:return$ the same $string:string$ but with letters of alternating case. new_string will have letters of alternating case. $returns:returns$ new_string\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 877, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student44", "submitted_text": "Print the string that is input with every other character that is not a white space or a punctuation capitalized starting with a capital letter. ", "prompt": "def altText(s):\n    \"\"\"\n    $Return:Print$ the $string:string$ that is $input:input$ with every other $string:character$ that is not a white space or a punctuation capitalized starting with a capital letter. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 878, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student44", "submitted_text": "Go through every character in the string. \nIf the character is a letter and that character is the first character in the string, print it capitalized. \nIf the character is a letter that is not the first in the string, print in lowercase if the previous  letter that was printed was in capital. If the last letter was printed in uppercase, print it in lowercase. ", "prompt": "def altText(s):\n    \"\"\"\n    Go through every $string:character$ in the $string:string$. \nIf the $string:character$ is a letter and that $string:character$ is the first $string:character$ in the $string:string$, $return:print$ it capitalized. \nIf the $string:character$ is a letter that is not the first in the $string:string$, $return:print$ in lowercase if the previous  letter that was $returned:printed$ was in capital. If the last letter was $returned:printed$ in uppercase, $return:print$ it in lowercase. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 882, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student59", "submitted_text": "takes a string. capitalizes random letters in each word of that string. ", "prompt": "def altText(s):\n    \"\"\"\n    $takes:takes$ a $string:string$. capitalizes random letters in each $string:word$ of that $string:string$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 885, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student60", "submitted_text": "This function inputs a string as parameter. This function returns that string except every other letter is capitalized. ", "prompt": "def altText(s):\n    \"\"\"\n    This function $inputs:inputs$ a $string:string$ as $parameter:parameter$. This function $returns:returns$ that $string:string$ except every other letter is capitalized. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 888, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student63", "submitted_text": "The function takes in a string and capitalizes every other letter in the string, starting with the first letter being a capital. It outputs the same string but with the capitalization adjusted. ", "prompt": "def altText(s):\n    \"\"\"\n    The function $takes:takes$ in a $string:string$ and capitalizes every other letter in the $string:string$, starting with the first letter being a capital. It $returns:outputs$ the same $string:string$ but with the capitalization adjusted. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 894, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student75", "submitted_text": "\ndef altText(s): brings in input 'computers' and capitalizes every other letter starting at 'C' and ending at 'S'\ndef altText(s): brings in input 'T' and outputs the capitalized version", "prompt": "def altText(s):\n    \"\"\"\n    \ndef altText(s): $takes:brings in$ $input:input$ 'computers' and capitalizes every other letter starting at 'C' and ending at 'S'\ndef altText(s): $takes:brings in$ $input:input$ 'T' and $returns:outputs$ the capitalized version\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 900, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student3", "submitted_text": "create a function which make the order of i first letters of the string backward ", "prompt": "def changeSection(s,i):\n    \"\"\"\n    create a function which make the order of i first letters of the $string:string$ backward \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 901, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student3", "submitted_text": "take i first letters of the string and then write it in backward order", "prompt": "def changeSection(s,i):\n    \"\"\"\n    $take:take$ i first letters of the $string:string$ and then write it in backward order\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 904, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student4", "submitted_text": "flips the inputted string around", "prompt": "def changeSection(s,i):\n    \"\"\"\n    flips the $inputted:inputted$ $string:string$ around\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 909, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student17", "submitted_text": "turn the string into a list", "prompt": "def changeSection(s,i):\n    \"\"\"\n    $typecast:turn$ the $string:string$ into a $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 910, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student17", "submitted_text": "turn the string into a list separated by each letter", "prompt": "def changeSection(s,i):\n    \"\"\"\n    $typecast:turn$ the $string:string$ into a $list:list$ separated by each letter\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 911, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student17", "submitted_text": "turn the string into a list separated by each letter", "prompt": "def changeSection(s,i):\n    \"\"\"\n    $typecast:turn$ the $string:string$ into a $list:list$ separated by each letter\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 912, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student17", "submitted_text": "run a for loop through the string, separating each letter into a list", "prompt": "def changeSection(s,i):\n    \"\"\"\n    $loop through:run a for loop through$ the $string:string$, separating each letter into a $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 913, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student17", "submitted_text": "s is the string given, using i as the index for where to reverse the order of the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    s is the $string:string$ given, using i as the index for where to reverse the order of the $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 914, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student17", "submitted_text": "run a for loop through the string, separating each letter into a list. ignoring everything after comma.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    $loop through:run a for loop through$ the $string:string$, separating each letter into a $list:list$. $skipping:ignoring$ everything after comma.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 915, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student17", "submitted_text": "run a for loop through the string, separating each letter into a list. When there are spaces in the string, reverse the order of the string based on the number given after the comma.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    $loop through:run a for loop through$ the $string:string$, separating each letter into a $list:list$. When there are spaces in the $string:string$, reverse the order of the $string:string$ based on the number given after the comma.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 916, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student17", "submitted_text": "s is the string given, using i as the index for reversing the order of the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    s is the $string:string$ given, using i as the index for reversing the order of the $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 917, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student17", "submitted_text": "run a for loop through s, putting each letter into a list, then using i as the index point as where to reverse the order of the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    $loop through:run a for loop through$ s, putting each letter into a $list:list$, then using i as the index point as where to reverse the order of the $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 918, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student17", "submitted_text": "run a for loop through s, putting each letter into a list, then using i as the index point as where to reverse the order of the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    $loop through:run a for loop through$ s, putting each letter into a $list:list$, then using i as the index point as where to reverse the order of the $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 921, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student18", "submitted_text": "Go through each letters from index 0 to i-1 in the string s. Append the letter to the index of i-1-index. ", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Go through each letters from index 0 to i-1 in the $string:string$ s. $Insert:Append$ the letter to the index of i-1-index. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 922, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student18", "submitted_text": "Go through each letter in the s from index 0 to i-1. Append the letter to the index of i-1-index. ", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Go through each letter in the s from index 0 to i-1. $Insert:Append$ the letter to the index of i-1-index. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 925, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student21", "submitted_text": "given a string and a number within string length, reverse the characters up to the given number index and concatenate this with the rest of the original string", "prompt": "def changeSection(s,i):\n    \"\"\"\n    given a $string:string$ and a number within $string:string$ length, reverse the $strings:characters$ up to the given number index and $concatenate:concatenate$ this with the rest of the original $string:string$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 926, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student21", "submitted_text": "given a string and a number within string length, create a new string up to this index and after. reverse the new String up to this index and concatenate this with the string after the index.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    given a $string:string$ and a number within $string:string$ length, create a new $string:string$ up to this index and after. reverse the new $String:String$ up to this index and $concatenate:concatenate$ this with the $string:string$ after the index.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 927, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student21", "submitted_text": "given a string and a number within string length, create a new string up to this index and after. reverse the new String up to this index and add the string after the index.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    given a $string:string$ and a number within $string:string$ length, create a new $string:string$ up to this index and after. reverse the new $String:String$ up to this index and $insert:add$ the $string:string$ after the index.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 928, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student21", "submitted_text": "create a new string up to this index and after. reverse the new String up to this index and add the string after the index.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    create a new $string:string$ up to this index and after. reverse the new $String:String$ up to this index and $insert:add$ the $string:string$ after the index.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 933, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student26", "submitted_text": "Slice a string starting at 1 and ending at the given number. Reverse the slice and display the original string", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Slice a $string:string$ starting at 1 and ending at the given number. Reverse the slice and $return:display$ the original $string:string$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 936, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student30", "submitted_text": "Takes in parameters (s, i), where s is a string and i is an integer. \nCreate a new string, z, that is equal to the first i characters in string s.\nReverse string z.\nRemove the first i characters in string s. \nAppend string s to string z.\nReturn string z.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    $Takes:Takes$ in $parameters:parameters$ (s, i), where s is a $string:string$ and i is an $integer:integer$. \nCreate a new $string:string$, z, that is equal to the first i $strings:characters$ in $string:string$ s.\nReverse $string:string$ z.\n$Skip:Remove$ the first i $strings:characters$ in $string:string$ s. \n$Insert:Append$ $string:string$ s to $string:string$ z.\n$Return:Return$ $string:string$ z.\n    \"\"\"\n    ", "subset": "middle_success"}
{"__index_level_0__": 937, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student30", "submitted_text": "Takes in parameters (s, i), where s is a string and i is an integer. Reverses the order of the first i characters in the string, leaving the rest intact.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    $Takes:Takes$ in $parameters:parameters$ (s, i), where s is a $string:string$ and i is an $integer:integer$. Reverses the order of the first i $strings:characters$ in the $string:string$, leaving the rest intact.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 938, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student30", "submitted_text": "Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them at the beginning of the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    $Takes:Takes$ in $parameters:parameters$ (s, i), where s is a $string:string$ and i is an $integer:integer$. $Skips:Removes$ the first i $keys:elements$ in the $string:string$, reverses their order, and $inserts:inserts$ them at the beginning of the $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 941, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student41", "submitted_text": "Prints in reverse the length of the string equal to the number that is inputted, then prints the rest of the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    $Returns:Prints$ in reverse the length of the $string:string$ equal to the number that is $inputted:inputted$, then $returns:prints$ the rest of the $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 957, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student67", "submitted_text": "Replaces the first item of the last list with the sum of i and n.", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    Replaces the first $key:item$ of the last $list:list$ with the sum of i and n.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 958, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student67", "submitted_text": "Replaces the first item of the last list with the sum of i and n. If all the numbers in both of the lists are 1, then replaces the first item of the first list with the sum of i and n as well.", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    Replaces the first $key:item$ of the last $list:list$ with the sum of i and n. If all the numbers in both of the $lists:lists$ are 1, then replaces the first $key:item$ of the first $list:list$ with the sum of i and n as well.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 967, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student20", "submitted_text": "Take two lists and combine them", "prompt": "def combine(l1,l2):\n    \"\"\"\n    $Take:Take$ two $lists:lists$ and $concatenate:combine$ them\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 968, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student20", "submitted_text": "Use zip to loop through the two lists and append them to each other", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Use zip to $loop through:loop through$ the two $lists:lists$ and $insert:append$ them to each other\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 969, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student20", "submitted_text": "Combine two lists", "prompt": "def combine(l1,l2):\n    \"\"\"\n    $Concatenate:Combine$ two $lists:lists$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 970, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student20", "submitted_text": "Combine all elements in two lists", "prompt": "def combine(l1,l2):\n    \"\"\"\n    $Concatenate:Combine$ all $keys:elements$ in two $lists:lists$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 977, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student43", "submitted_text": "Count the number of elements in the inputted list, store this number as n. Divide n by 2 store it as m, then combine the 1st element in the list with the 1+m th element in the list, return it as a single element. Then combine the 2nd element in the list with the 2+m th element in the list, return it as a single element. Loop through every first mth element in the list.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Count the number of $keys:elements$ in the $inputted:inputted$ $list:list$, store this number as n. Divide n by 2 store it as m, then $concatenate:combine$ the 1st $key:element$ in the $list:list$ with the 1+m th $key:element$ in the $list:list$, $return:return$ it as a single $key:element$. Then $concatenate:combine$ the 2nd $key:element$ in the $list:list$ with the 2+m th $key:element$ in the $list:list$, $return:return$ it as a single $key:element$. Loop through every first mth $key:element$ in the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 980, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student54", "submitted_text": "Combine the two lists.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    $Concatenate:Combine$ the two $lists:lists$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 981, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student54", "submitted_text": "Combine the two lists into one single list.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    $Concatenate:Combine$ the two $lists:lists$ into one single $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 982, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student54", "submitted_text": "Alternatively combine inner lists of the outer list until you have one single list.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Alternatively $concatenate:combine$ inner $lists:lists$ of the outer $list:list$ until you have one single $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 988, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student3", "submitted_text": "create function which take 1 input (value). create list of ascending numbers of value", "prompt": "def pattern(value):\n    \"\"\"\n    create function which $take:take$ 1 $input:input$ (value). create $list:list$ of ascending numbers of value\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 989, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student3", "submitted_text": "create function which take 1 input (value). create list of ascending numbers of value. insert that list value times into a new list", "prompt": "def pattern(value):\n    \"\"\"\n    create function which $take:take$ 1 $input:input$ (value). create $list:list$ of ascending numbers of value. $insert:insert$ that $list:list$ value times into a new $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 990, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student3", "submitted_text": "create function which take 1 input (value). create list of ascending numbers of value. ", "prompt": "def pattern(value):\n    \"\"\"\n    create function which $take:take$ 1 $input:input$ (value). create $list:list$ of ascending numbers of value. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 991, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student3", "submitted_text": "create function which take 1 input (value). create list of ascending numbers of value start from 1", "prompt": "def pattern(value):\n    \"\"\"\n    create function which $take:take$ 1 $input:input$ (value). create $list:list$ of ascending numbers of value start from 1\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 997, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student17", "submitted_text": "count to the letter of the input", "prompt": "def pattern(value):\n    \"\"\"\n    count to the letter of the $input:input$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 998, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student17", "submitted_text": "if given 2 output two lists 1,2 and 1,2", "prompt": "def pattern(value):\n    \"\"\"\n    if given 2 $return:output$ two $lists:lists$ 1,2 and 1,2\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1008, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student41", "submitted_text": "Returns a list of lists. The number of lists in the output list should be equal to the value. All of the lists within the output list should have each integer greater than zero up to, and including, the value inputted.", "prompt": "def pattern(value):\n    \"\"\"\n    $Returns:Returns$ a $list:list$ of $lists:lists$. The number of $lists:lists$ in the $return:output$ $list:list$ should be equal to the value. All of the $lists:lists$ within the $return:output$ $list:list$ should have each $integer:integer$ greater than zero up to, and including, the value $inputted:inputted$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1009, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student41", "submitted_text": "Returns a list of lists. The number of lists in the output list should be equal to the value. All of the lists within the output list should have every integer between zero and the inputted value.", "prompt": "def pattern(value):\n    \"\"\"\n    $Returns:Returns$ a $list:list$ of $lists:lists$. The number of $lists:lists$ in the $return:output$ $list:list$ should be equal to the value. All of the $lists:lists$ within the $return:output$ $list:list$ should have every $integer:integer$ between zero and the $inputted:inputted$ value.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1024, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student26", "submitted_text": "Count the characters in a string and replace all '^' as '_', then return a copy of the new string", "prompt": "def reduce(val):\n    \"\"\"\n    Count the $strings:characters$ in a $string:string$ and replace all '^' as '_', then $return:return$ a copy of the new $string:string$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1025, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student26", "submitted_text": "Count the characters in a string and replace all '^' as '_', then return a copy of the new string", "prompt": "def reduce(val):\n    \"\"\"\n    Count the $strings:characters$ in a $string:string$ and replace all '^' as '_', then $return:return$ a copy of the new $string:string$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1033, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student2", "submitted_text": "this function returns false if the value contains a '9' but returns true if the value does not contain a 9", "prompt": "def fib(n):\n    \"\"\"\n    this function $returns:returns$ false if the value contains a '9' but $returns:returns$ true if the value does not contain a 9\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1034, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student2", "submitted_text": "this function returns only true or false. It returns false if the value contains a '9' but returns true if the value does not contain a 9", "prompt": "def fib(n):\n    \"\"\"\n    this function $returns:returns$ only true or false. It $returns:returns$ false if the value contains a '9' but $returns:returns$ true if the value does not contain a 9\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1037, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student5", "submitted_text": "the function fib(n) should take an input and return a Boolean (true or false) expression declaring wether the input only contains 1, 2, or 3", "prompt": "def fib(n):\n    \"\"\"\n    the function fib(n) should $take:take$ an $input:input$ and $return:return$ a Boolean (true or false) expression declaring wether the $input:input$ only contains 1, 2, or 3\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1040, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student8", "submitted_text": "Returns True if the number is a Fibonacci number, or False otherwise.", "prompt": "def fib(n):\n    \"\"\"\n    $Returns:Returns$ True if the number is a Fibonacci number, or False otherwise.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1045, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student13", "submitted_text": "Check inputted number against the set of Fibonacci numbers. If the number is in the set, return True, otherwise, return False.", "prompt": "def fib(n):\n    \"\"\"\n    Check $inputted:inputted$ number against the $list:set$ of Fibonacci numbers. If the number is in the $list:set$, $return:return$ True, otherwise, $return:return$ False.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1046, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student13", "submitted_text": "Check if inputted number is in the set of Fibonacci numbers. If the number is in the set, return True, otherwise, return False.", "prompt": "def fib(n):\n    \"\"\"\n    Check if $inputted:inputted$ number is in the $list:set$ of Fibonacci numbers. If the number is in the $list:set$, $return:return$ True, otherwise, $return:return$ False.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1047, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student13", "submitted_text": "Check if inputted number is a Fibonacci number. If it is, return True, otherwise, return False.", "prompt": "def fib(n):\n    \"\"\"\n    Check if $inputted:inputted$ number is a Fibonacci number. If it is, $return:return$ True, otherwise, $return:return$ False.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1048, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student13", "submitted_text": "Check if inputted number is a Fibonacci number. If it is, return True, otherwise, return False.", "prompt": "def fib(n):\n    \"\"\"\n    Check if $inputted:inputted$ number is a Fibonacci number. If it is, $return:return$ True, otherwise, $return:return$ False.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1049, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student13", "submitted_text": "Check if inputted number is a Fibonacci number. If it is, return True. If it is not a Fibonacci number, return False.", "prompt": "def fib(n):\n    \"\"\"\n    Check if $inputted:inputted$ number is a Fibonacci number. If it is, $return:return$ True. If it is not a Fibonacci number, $return:return$ False.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1050, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student13", "submitted_text": "Check if inputted number is a Fibonacci number. If it is, return True. If it is not a Fibonacci number, return False.", "prompt": "def fib(n):\n    \"\"\"\n    Check if $inputted:inputted$ number is a Fibonacci number. If it is, $return:return$ True. If it is not a Fibonacci number, $return:return$ False.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1051, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student13", "submitted_text": "Check if inputted number is a Fibonacci number. If it is, return True. If it is not a Fibonacci number, return False.", "prompt": "def fib(n):\n    \"\"\"\n    Check if $inputted:inputted$ number is a Fibonacci number. If it is, $return:return$ True. If it is not a Fibonacci number, $return:return$ False.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1052, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student13", "submitted_text": "Check if inputted number is a Fibonacci number. If it is, return True. If it is not a Fibonacci number, return False.", "prompt": "def fib(n):\n    \"\"\"\n    Check if $inputted:inputted$ number is a Fibonacci number. If it is, $return:return$ True. If it is not a Fibonacci number, $return:return$ False.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1053, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student13", "submitted_text": "Put all possible Fibonacci numbers in a set. Check if the inputted number is in that set. If it is, return True. If it is not in the set, return False.", "prompt": "def fib(n):\n    \"\"\"\n    Put all possible Fibonacci numbers in a $list:set$. Check if the $inputted:inputted$ number is in that $list:set$. If it is, $return:return$ True. If it is not in the $list:set$, $return:return$ False.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1058, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student22", "submitted_text": "check to see if the number is part of the list ['1','13','21'] and return a boolean value ", "prompt": "def fib(n):\n    \"\"\"\n    check to see if the number is $key:part$ of the $list:list$ ['1','13','21'] and $return:return$ a boolean value \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1067, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student3", "submitted_text": "create a function with 3 input word(string), line_number (int) and map (dict). add new key name word and its corresponding list of line_number into the map", "prompt": "def add_word(word, line_number, $dictionary:map$):\n    \"\"\"\n    create a function with 3 $input:input$ word(string), line_number ($integer:int$) and $dictionary:map$ (dict). $insert:add$ new $key:key$ name $string:word$ and its corresponding $list:list$ of line_number into the $dictionary:map$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1077, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student21", "submitted_text": "if word isn't in map, add the word and number to map, following the format in map. if the word is in map already, add the number to the word. return word", "prompt": "def add_word(word, line_number, $dictionary:map$):\n    \"\"\"\n    if $string:word$ isn't in $dictionary:map$, $insert:add$ the $string:word$ and number to $dictionary:map$, following the format in $dictionary:map$. if the $string:word$ is in $dictionary:map$ already, $insert:add$ the number to the $string:word$. $return:return$ $string:word$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1092, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student27", "submitted_text": "Check if \"aspen\" is a key in a dictionary. Return \"Yup\" if it is a key, \"Nope\" if it is not a key.", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    Check if \"aspen\" is a $key:key$ in a $dictionary:dictionary$. $Return:Return$ \"Yup\" if it is a $key:key$, \"Nope\" if it is not a $key:key$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1093, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student27", "submitted_text": "A dict object contains keys and values. Check if \"aspen\" is one of the keys in a dict. Return \"Yup\" if it is a key, \"Nope\" if it is not a key.", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    A dict object contains $keys:keys$ and values. Check if \"aspen\" is one of the $keys:keys$ in a dict. $Return:Return$ \"Yup\" if it is a $key:key$, \"Nope\" if it is not a $key:key$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1098, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student34", "submitted_text": "If \"Aspen\" appears as a definition in the dictionary, output the string \"Yup\", and if it does not appear output the string \"Nope\"", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If \"Aspen\" appears as a definition in the $dictionary:dictionary$, $return:output$ the $string:string$ \"Yup\", and if it does not appear $return:output$ the $string:string$ \"Nope\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1099, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student34", "submitted_text": "If \"Aspen\" corresponds to an integer greater than 0, output the string \"Yup\", and if it does not appear output the string \"Nope\"", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If \"Aspen\" corresponds to an $integer:integer$ greater than 0, $return:output$ the $string:string$ \"Yup\", and if it does not appear $return:output$ the $string:string$ \"Nope\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1100, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student34", "submitted_text": "If 'Aspen' corresponds to an integer greater than 0, print the string \"Yup\", and if 'Aspen' does not appear in the dictionary put print the string \"Nope\"", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If 'Aspen' corresponds to an $integer:integer$ greater than 0, $return:print$ the $string:string$ \"Yup\", and if 'Aspen' does not appear in the $dictionary:dictionary$ put $return:print$ the $string:string$ \"Nope\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1101, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student34", "submitted_text": "If 'Aspen' corresponds to an integer greater than 0, output \"Yup\", and if 'Aspen' does not exist in the dictionary output \"Nope\"", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If 'Aspen' corresponds to an $integer:integer$ greater than 0, $return:output$ \"Yup\", and if 'Aspen' does not exist in the $dictionary:dictionary$ $return:output$ \"Nope\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1102, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student34", "submitted_text": "If 'Aspen' appears in the dictionary output \"Yup\" and if it is not in the dictionary output \"Nope\"", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If 'Aspen' appears in the $dictionary:dictionary$ $return:output$ \"Yup\" and if it is not in the $dictionary:dictionary$ $return:output$ \"Nope\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1110, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student67", "submitted_text": "If the name is 'Aspen', returns 'Yup'. Otherwise returns 'Nope'.", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If the name is 'Aspen', $returns:returns$ 'Yup'. Otherwise $returns:returns$ 'Nope'.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1111, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student67", "submitted_text": "If the name of the dictionary is 'Aspen', returns 'Yup'. Otherwise returns 'Nope'.", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If the name of the $dictionary:dictionary$ is 'Aspen', $returns:returns$ 'Yup'. Otherwise $returns:returns$ 'Nope'.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1112, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student67", "submitted_text": "If the name of the dictionary is 'Aspen', returns 'Yup'. Otherwise returns 'Nope'.", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If the name of the $dictionary:dictionary$ is 'Aspen', $returns:returns$ 'Yup'. Otherwise $returns:returns$ 'Nope'.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1115, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student68", "submitted_text": "given an array formatted so that there is a String key and a number associated with that key, check if there is value that has a key, \"Aspen\",  whose number is greater than 0. return \"Yup\" if it passes the check and \"Nope\" if it doesn't ", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    given an $list:array$ formatted so that there is a $String:String$ $key:key$ and a number associated with that $key:key$, check if there is value that has a $key:key$, \"Aspen\",  whose number is greater than 0. $return:return$ \"Yup\" if it passes the check and \"Nope\" if it doesn't \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1116, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student68", "submitted_text": "given a dictionary check if there is a value that has a key, \"Aspen\". return \"Yup\" if it passes the check and \"Nope\" if it doesn't ", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    given a $dictionary:dictionary$ check if there is a value that has a $key:key$, \"Aspen\". $return:return$ \"Yup\" if it passes the check and \"Nope\" if it doesn't \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1132, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student45", "submitted_text": "Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s, remove the character from s at the index where we split, and insert sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    $Takes:Takes$ three $inputs:inputs$: a $string:string$ which we will call s, a $list:list$ of $strings:strings$ which we will call chars, and another $string:string$ which we will call sep. At each point in s where a $string:string$ from chars is present, we split s, $skip:remove$ the $string:character$ from s at the index where we split, and $insert:insert$ sep.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1144, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student29", "submitted_text": "Check the second parameter of the input for the string of author name. Then return all input entries where the author value corresponds to that parameter, with a line break between each entry", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Check the second $parameter:parameter$ of the $input:input$ for the $string:string$ of author name. Then $return:return$ all $input:input$ $keys:entries$ where the author value corresponds to that $parameter:parameter$, with a line break between each $key:entry$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1145, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student29", "submitted_text": "Check the second parameter of the input for the string of author name. Then return all input entries where the author value corresponds to that parameter, separated by a line break", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Check the second $parameter:parameter$ of the $input:input$ for the $string:string$ of author name. Then $return:return$ all $input:input$ $keys:entries$ where the author value corresponds to that $parameter:parameter$, separated by a line break\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1146, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student29", "submitted_text": "Check the second parameter of the input for the string of author name. Then return all input entries where the author value corresponds to that parameter, with each sub-dictionary starting on a new line", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Check the second $parameter:parameter$ of the $input:input$ for the $string:string$ of author name. Then $return:return$ all $input:input$ $keys:entries$ where the author value corresponds to that $parameter:parameter$, with each sub-$dictionary:dictionary$ starting on a new line\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1147, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student29", "submitted_text": "Check the second parameter of the input for the string of author name. Then return a list with all input entries where the author value corresponds to that parameter, with each input entry on a new line", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Check the second $parameter:parameter$ of the $input:input$ for the $string:string$ of author name. Then $return:return$ a $list:list$ with all $input:input$ $keys:entries$ where the author value corresponds to that $parameter:parameter$, with each $input:input$ $key:entry$ on a new line\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1150, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student32", "submitted_text": "Sort the elements of the array by the year value in its dictionary, from lowest to highest. Then removes the last element in the array and returns the rest", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Sort the $keys:elements$ of the $list:array$ by the year value in its $dictionary:dictionary$, from lowest to highest. Then $skips:removes$ the last $key:element$ in the $list:array$ and $returns:returns$ the rest\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1154, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student49", "submitted_text": "Given a list of dictionaries and a string, return a list of the dictionaries where the string is the value of the author key. Order each dictionary in the list by ascending the values in the year key.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Given a $list:list$ of $dictionaries:dictionaries$ and a $string:string$, $return:return$ a $list:list$ of the $dictionaries:dictionaries$ where the $string:string$ is the value of the author $key:key$. Order each $dictionary:dictionary$ in the $list:list$ by ascending the values in the year $key:key$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1158, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student62", "submitted_text": "remove any element from list that does not have the same 'author' as the string provided by user", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    $skip:remove$ any $key:element$ from $list:list$ that does not have the same 'author' as the $string:string$ $provided:provided$ by user\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1163, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student67", "submitted_text": "Returns the dictionaries of the specified author.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    $Returns:Returns$ the $dictionaries:dictionaries$ of the specified author.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1164, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student67", "submitted_text": "Returns the dictionaries of the specified writer.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    $Returns:Returns$ the $dictionaries:dictionaries$ of the specified writer.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1165, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student67", "submitted_text": "Returns the information of the specified writer.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    $Returns:Returns$ the information of the specified writer.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1168, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student68", "submitted_text": "given a dictionary list and a string, return all the dictionaries whose 'author' key value equals the input string in a dictionary list ", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    given a $dictionary:dictionary$ $list:list$ and a $string:string$, $return:return$ all the $dictionaries:dictionaries$ whose 'author' $key:key$ value equals the $input:input$ $string:string$ in a $dictionary:dictionary$ $list:list$ \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1171, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student70", "submitted_text": "return all the entries in the dictionary where the value for the 'author' key is equal to the input writer.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    $return:return$ all the $keys:entries$ in the $dictionary:dictionary$ where the value for the 'author' $key:key$ is equal to the $input:input$ writer.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1172, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student70", "submitted_text": "return all the entries in the dictionary books where the value for the 'author' key is equal to the input writer.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    $return:return$ all the $keys:entries$ in the $dictionary:dictionary$ books where the value for the 'author' $key:key$ is equal to the $input:input$ writer.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1173, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student70", "submitted_text": "return all the entries in the input list where the value for the 'author' key is equal to the input writer.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    $return:return$ all the $keys:entries$ in the $input:input$ $list:list$ where the value for the 'author' $key:key$ is equal to the $input:input$ writer.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1176, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student78", "submitted_text": "if books is a list of dictionaries, output a list of dictionaries thats authors match the input writer", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    if books is a $list:list$ of $dictionaries:dictionaries$, $return:output$ a $list:list$ of $dictionaries:dictionaries$ thats authors match the $input:input$ writer\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1179, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student23", "submitted_text": "This function takes in a list of dictionaries that have the nominee, the amount of wins, and the amount of noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success within each dictionary.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function $takes:takes$ in a $list:list$ of $dictionaries:dictionaries$ that have the nominee, the amount of wins, and the amount of noms. A new $key:attribute$ is given to each $dictionary:dictionary$ which is the success $key:attribute$. It is calculated by dividing wins by noms and creates a float. The $lists:lists$ are then sorted by the highest success within each $dictionary:dictionary$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1182, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student33", "submitted_text": "The function takes in a list of dictionaries. The function divides the value for \"wins\" in the dictionary by the value for \"noms\" in the dictionary, adding a new entry to that dictionary called \"success\" with the output value. It then sorts the dictionary entries by the value in \"success,\" highest to lowest. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function $takes:takes$ in a $list:list$ of $dictionaries:dictionaries$. The function divides the value for \"wins\" in the $dictionary:dictionary$ by the value for \"noms\" in the $dictionary:dictionary$, $inserting:adding$ a new $key:entry$ to that $dictionary:dictionary$ called \"success\" with the $return:output$ value. It then sorts the $dictionary:dictionary$ $keys:entries$ by the value in \"success,\" highest to lowest. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1185, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student35", "submitted_text": "The nominations is a list of dictionaries. The function iterates through the dictioanries backwards using a for loop. A new variable 'success' is created which computes (wins/noms) during each loop run for every dictionary. A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a $list:list$ of $dictionaries:dictionaries$. The function $loops through:iterates through$ the dictioanries backwards using a for loop. A new $key:variable$ 'success' is created which computes (wins/noms) during each loop run for every $dictionary:dictionary$. A new $list:list$ is made. As the $input:input$ $list:list$ is iterated through, the new $list:list$ is $inserted:appended$ with the contents of the $dictionary:dictionary$ along with the corresponding success rate.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1186, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student35", "submitted_text": "The nominations is a list of dictionaries. The function iterates through the dictioanries backwards using a for loop. A new variable 'success' is created which computes (wins/noms) during each loop run for every dictionary. A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a $list:list$ of $dictionaries:dictionaries$. The function $loops through:iterates through$ the dictioanries backwards using a for loop. A new $key:variable$ 'success' is created which computes (wins/noms) during each loop run for every $dictionary:dictionary$. A new $list:list$ is made. As the $input:input$ $list:list$ is iterated through, the new $list:list$ is $inserted:appended$ with the contents of the $dictionary:dictionary$ along with the corresponding success rate.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1189, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student40", "submitted_text": "the input is a list of dictionaries. the function will divide the value within key 'wins' by the value within key 'noms'. the new number will be stores as a new key, 'success'. the function will then return a list that reorders the dictionaries within the original list, in order of highest success value to lowest success value.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    the $input:input$ is a $list:list$ of $dictionaries:dictionaries$. the function will divide the value within $key:key$ 'wins' by the value within $key:key$ 'noms'. the new number will be stores as a new $key:key$, 'success'. the function will then $return:return$ a $list:list$ that reorders the $dictionaries:dictionaries$ within the original $list:list$, in order of highest success value to lowest success value.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1194, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student50", "submitted_text": "Add a new part to each element in the dictionary called \"success\". Calculate success by dividing wins by noms. Return in reverse alphabetical order.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    $Insert:Add$ a new $key:part$ to each $key:element$ in the $dictionary:dictionary$ called \"success\". Calculate success by dividing wins by noms. $Return:Return$ in reverse alphabetical order.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1197, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student59", "submitted_text": "takes a list of dictionaries as an input. returns an ordered list of the dictionaries in the input for the key 'nominee'", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    $takes:takes$ a $list:list$ of $dictionaries:dictionaries$ as an $input:input$. $returns:returns$ an ordered $list:list$ of the $dictionaries:dictionaries$ in the $input:input$ for the $key:key$ 'nominee'\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1200, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student60", "submitted_text": "This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions output is a single 2d list. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function $takes:takes$ in a 2d $list:list$ containing $dictionaries:dictionaries$ at its $parameter:parameter$. In each $dictionary:dictionary$ is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then $returns:returns$ this $dictionary:dictionary$ with an $inserted:added$ $parameter:parameter$ of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions $return:output$ is a single 2d $list:list$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1205, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student64", "submitted_text": "For each dictionary in list, create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Sort by success in descending order.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    For each $dictionary:dictionary$ in $list:list$, create a new $dictionary:dictionary$ and create a new $key:key$ value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Sort by success in descending order.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1208, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student69", "submitted_text": "Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list, rounded to 2 decimal places.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    $Provide:Enter$ a $list:list$ of $dictionaries:dictionaries$. for every $dictionary:dictionary$ in the $list:list$ of $dictionaries:dictionaries$, divide the values of 'wins' by the value of 'noms'. The result is the value of the new $key:key$ 'success'. $Insert:Add$ the 'success' $key:key$ to each $dictionary:dictionary$ in the $list:list$, rounded to 2 decimal places.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1212, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student75", "submitted_text": "def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms'", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): $takes:takes$ $input:input$ \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand $returns:prints$ $return:output$ in order of least amount of 'wins', if the same $returns:prints$ based on least amount of 'noms'\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1213, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student75", "submitted_text": "def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', indent after each 'noms'", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): $takes:takes$ $input:input$ \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand $returns:prints$ $return:output$ in order of least amount of 'wins', if the same $returns:prints$ based on least amount of 'noms', indent after each 'noms'\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1214, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student75", "submitted_text": "def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', print each 'nominee' on its own line", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): $takes:takes$ $input:input$ \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand $returns:prints$ $return:output$ in order of least amount of 'wins', if the same $returns:prints$ based on least amount of 'noms', $return:print$ each 'nominee' on its own line\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1215, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student75", "submitted_text": "def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms'", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): $takes:takes$ $input:input$ \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand $returns:prints$ $return:output$ in order of least amount of 'wins', if the same $returns:prints$ based on least amount of 'noms'\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1216, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student75", "submitted_text": "def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms'.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): $takes:takes$ $input:input$ \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand $returns:prints$ $return:output$ in order of least amount of 'wins', if the same $returns:prints$ based on least amount of 'noms'.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1220, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student79", "submitted_text": "you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by noms. you are then going to sort the dictionary according to decreasing success.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a $list:list$ of $dictionaries:dictionaries$ as an $input:input$. as an $return:output$ you are going to $insert:add$ another $key:variable$ called success to each $dictionary:dictionary$ which is the wins divided by noms. you are then going to sort the $dictionary:dictionary$ according to decreasing success.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1221, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student79", "submitted_text": "you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by the value of noms. you are then going to sort the dictionary according to decreasing success.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a $list:list$ of $dictionaries:dictionaries$ as an $input:input$. as an $return:output$ you are going to $insert:add$ another $key:variable$ called success to each $dictionary:dictionary$ which is the wins divided by the value of noms. you are then going to sort the $dictionary:dictionary$ according to decreasing success.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1222, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student79", "submitted_text": "you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by the value of noms. you are then going to sort the dictionary according to decreasing success. use two decimal places for the success rate and use different lines to put each dictionary", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a $list:list$ of $dictionaries:dictionaries$ as an $input:input$. as an $return:output$ you are going to $insert:add$ another $key:variable$ called success to each $dictionary:dictionary$ which is the wins divided by the value of noms. you are then going to sort the $dictionary:dictionary$ according to decreasing success. use two decimal places for the success rate and use different lines to put each $dictionary:dictionary$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1226, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student5", "submitted_text": "this function will take a list of flights and the starting city and return the possible layovers with the staring city", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    this function will $take:take$ a $list:list$ of flights and the starting city and $return:return$ the possible layovers with the staring city\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1231, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student13", "submitted_text": "Based on the inputted origin, the function will return the possible destinations with one layover location. ", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    Based on the $inputted:inputted$ origin, the function will $return:return$ the possible destinations with one layover location. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1242, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student12", "submitted_text": "Create a list of the 0th element in the list within the list if the 2nd element says \"Physics\". Sort the list from least to greatest by looking at the 1st value in the list within the big list. Return this sorted list", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Create a $list:list$ of the 0th $key:element$ in the $list:list$ within the $list:list$ if the 2nd $key:element$ says \"Physics\". Sort the $list:list$ from least to greatest by looking at the 1st value in the $list:list$ within the big $list:list$. $Return:Return$ this sorted $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1243, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student12", "submitted_text": "Create a list of the 0th element each list within the list if the 2nd element says \"Physics\". Sort the list from least to greatest by looking at the 1st value in each list within the big list. Return this sorted list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Create a $list:list$ of the 0th $key:element$ each $list:list$ within the $list:list$ if the 2nd $key:element$ says \"Physics\". Sort the $list:list$ from least to greatest by looking at the 1st value in each $list:list$ within the big $list:list$. $Return:Return$ this sorted $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1248, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student20", "submitted_text": "For each list in scientists, if \"Physics\" is in the list, take the first string and add it to a new list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    For each $list:list$ in scientists, if \"Physics\" is in the $list:list$, $take:take$ the first $string:string$ and $insert:add$ it to a new $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1249, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student20", "submitted_text": "For each list in scientists, if \"Physics\" is in the list, take the first string and add it to a new list.\n\nThen sort the list in order of magnitude of the integer in the first index of each list in scientists.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    For each $list:list$ in scientists, if \"Physics\" is in the $list:list$, $take:take$ the first $string:string$ and $insert:add$ it to a new $list:list$.\n\nThen sort the $list:list$ in order of magnitude of the $integer:integer$ in the first index of each $list:list$ in scientists.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1250, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student20", "submitted_text": "For each list in scientists, check index 1 for the integer, which you will store in a variable 'age'. Return 'age'.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    For each $list:list$ in scientists, check index 1 for the $integer:integer$, which you will store in a $key:variable$ 'age'. $Return:Return$ 'age'.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1251, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student20", "submitted_text": "Sort the lists in scientists by the magnitude of the first index in each list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Sort the $lists:lists$ in scientists by the magnitude of the first index in each $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1254, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student36", "submitted_text": "The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return the names based on what year they graduated from lowest to highest", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    The internal $lists:lists$ contain name, year graduated and subject. If the subject is \"Physics\" $return:return$ the names based on what year they graduated from lowest to highest\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1255, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student36", "submitted_text": "The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return just the names in order of what year they graduated from lowest to highest", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    The internal $lists:lists$ contain name, year graduated and subject. If the subject is \"Physics\" $return:return$ just the names in order of what year they graduated from lowest to highest\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1258, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student38", "submitted_text": "If first position in list in scientists has \"Peiris\", add 'Peiris' to new list. If position in scientists has \"Ghez\", add 'Ghez' to new list. If position in scientists has \"Strickland\", add 'Strickland' to new list. ", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    If first position in $list:list$ in scientists has \"Peiris\", $insert:add$ 'Peiris' to new $list:list$. If position in scientists has \"Ghez\", $insert:add$ 'Ghez' to new $list:list$. If position in scientists has \"Strickland\", $insert:add$ 'Strickland' to new $list:list$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1262, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student43", "submitted_text": "Create an empty list A. Loop through each list in scientists: check if the third element in the list is Physics. If true, append the 1st element to list A. If false, do nothing. Return list A if all lists in scientists are checked", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Create an empty $list:list$ A. Loop through each $list:list$ in scientists: check if the third $key:element$ in the $list:list$ is Physics. If true, $insert:append$ the 1st $key:element$ to $list:list$ A. If false, do nothing. $Return:Return$ $list:list$ A if all $lists:lists$ in scientists are checked\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1265, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student54", "submitted_text": "Check that the inner list contains \"Physics\" at index 2. If so, return the string at index 0. Sort these into a new list based on the integer at index 1.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Check that the inner $list:list$ contains \"Physics\" at index 2. If so, $return:return$ the $string:string$ at index 0. Sort these into a new $list:list$ based on the $integer:integer$ at index 1.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1268, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student57", "submitted_text": "when given a list of lists, if last index of list in lists is equal to \"Physics\", return the first value in list of lists in a new list where if multiple values are to be added, list in order of ascending order of the second value in list of lists.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    when given a $list:list$ of $lists:lists$, if last index of $list:list$ in $lists:lists$ is equal to \"Physics\", $return:return$ the first value in $list:list$ of $lists:lists$ in a new $list:list$ where if multiple values are to be $inserted:added$, $list:list$ in order of ascending order of the second value in $list:list$ of $lists:lists$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1271, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student77", "submitted_text": "Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into alphabetical order.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Given a $list:set$ of $lists:lists$ with a scientist, number, and a subject, respectively, only $return:return$ the scientist if the subject is \"Physics\" in a $list:list$. Then sort the $list:list$ into alphabetical order.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1272, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student77", "submitted_text": "Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Given a $list:set$ of $lists:lists$ with a scientist, number, and a subject, respectively, only $return:return$ the scientist if the subject is \"Physics\" in a $list:list$. Then sort the $list:list$ into ascending order based on the number.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1273, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student77", "submitted_text": "Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number, but don't return the number.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Given a $list:set$ of $lists:lists$ with a scientist, number, and a subject, respectively, only $return:return$ the scientist if the subject is \"Physics\" in a $list:list$. Then sort the $list:list$ into ascending order based on the number, but don't $return:return$ the number.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1274, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student77", "submitted_text": "Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number given in the set of lists, but don't return the number.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Given a $list:set$ of $lists:lists$ with a scientist, number, and a subject, respectively, only $return:return$ the scientist if the subject is \"Physics\" in a $list:list$. Then sort the $list:list$ into ascending order based on the number given in the $list:set$ of $lists:lists$, but don't $return:return$ the number.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1277, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student2", "submitted_text": "This function prints the start value and adds the factor until it reaches the stop value", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    This function $returns:prints$ the start value and $inserts:adds$ the factor until it reaches the stop value\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1278, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student2", "submitted_text": "This function prints the start value and adds the value factor until it reaches the stop value", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    This function $returns:prints$ the start value and $inserts:adds$ the value factor until it reaches the stop value\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1284, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student11", "submitted_text": "a function ask for three inputs:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we get the stop. Then create a list to hold those values", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask for three $inputs:inputs$:start, stop, factor. By $inserting:adding$ up start*factor and records all the sum of those all the way until we $take:get$ the stop. Then create a $list:list$ to hold those values\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1285, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student11", "submitted_text": "a function ask for three inputs:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we get the stop-start. Then create a list to hold those values", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask for three $inputs:inputs$:start, stop, factor. By $inserting:adding$ up start*factor and records all the sum of those all the way until we $take:get$ the stop-start. Then create a $list:list$ to hold those values\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1286, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student11", "submitted_text": "a function ask for three inputs:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we get the sum==stop. Then create a list to hold those values", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask for three $inputs:inputs$:start, stop, factor. By $inserting:adding$ up start*factor and records all the sum of those all the way until we $take:get$ the sum==stop. Then create a $list:list$ to hold those values\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1289, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student13", "submitted_text": "The function will find the multiples of the factor in the range of the start and stop numbers.", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    The function will find the multiples of the factor in the range of the start and stop numbers.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1292, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student16", "submitted_text": "from the start number inputted, count by the factor until the stop number and include the stop number", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    from the start number $inputted:inputted$, count by the factor until the stop number and include the stop number\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1293, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student16", "submitted_text": "from the start number inputted, count by the factor until the stop number, including the stop number and return as list", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    from the start number $inputted:inputted$, count by the factor until the stop number, including the stop number and $return:return$ as $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1296, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student22", "submitted_text": "take in a list of integers [start number, final number, step size] and output a including the last number, and the 5 closest numbers in the step size to that last number", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    $take:take$ in a $list:list$ of $integers:integers$ [start number, final number, step size] and $return:output$ a including the last number, and the 5 closest numbers in the step size to that last number\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1297, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student22", "submitted_text": "take in a list of integers [start number, final number, step size] and output a including the last number, and the 5 closest numbers in the step size to that last number", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    $take:take$ in a $list:list$ of $integers:integers$ [start number, final number, step size] and $return:output$ a including the last number, and the 5 closest numbers in the step size to that last number\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1301, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student61", "submitted_text": "Function returns multiples from the first item to the second item in the input in multiples of the third item", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    Function $returns:returns$ multiples from the first $key:item$ to the second $key:item$ in the $input:input$ in multiples of the third $key:item$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1309, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student23", "submitted_text": "This function takes in a list of the item purchased, the price, the tax, and the overall sales tax. All of the prices and taxes within the lists are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function $takes:takes$ in a $list:list$ of the $key:item$ purchased, the price, the tax, and the overall sales tax. All of the prices and taxes within the $lists:lists$ are $inserted:added$ together. The sales tax is then multiplied by the outcome of the $inserted:added$ prices, and then the result of the multiplication is $inserted:added$ onto the total price. The total price is then $returned:returned$ as the $return:output$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1310, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student23", "submitted_text": "This function takes in a list of the item purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the lists, which is the last two components of the list are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function $takes:takes$ in a $list:list$ of the $key:item$ purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the $lists:lists$, which is the last two components of the $list:list$ are $inserted:added$ together. The sales tax is then multiplied by the outcome of the $inserted:added$ prices, and then the result of the multiplication is $inserted:added$ onto the total price. The total price is then $returned:returned$ as the $return:output$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1317, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student40", "submitted_text": "the function will multiply the last two values in each list within the list. these numbers will all be added together and stored in variable 'cost'. the variable 'cost' will then be multiplied by the value outside of the list. the product will be stored in a new variable, 'tax'. a new variable, 'total_cost', will contain the sum of the values of 'cost' and 'tax'. the function will return the value of the variable 'total_cost'.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    the function will multiply the last two values in each $list:list$ within the $list:list$. these numbers will all be $inserted:added$ together and stored in $key:variable$ 'cost'. the $key:variable$ 'cost' will then be multiplied by the value outside of the $list:list$. the product will be stored in a new $key:variable$, 'tax'. a new $key:variable$, 'total_cost', will contain the sum of the values of 'cost' and 'tax'. the function will $return:return$ the value of the $key:variable$ 'total_cost'.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1324, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student59", "submitted_text": "takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an float that is the sales tax times the sum of all goods' quantity*price", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    $takes:takes$ a $list:list$ of groceries and a value for sales tax. the $list:list$ of groceries contains a $list:list$ for every $key:item$. each $key:item$'s $list:list$ contains its name, quantity, and price, in that order. $returns:returns$ an float that is the sales tax times the sum of all goods' quantity*price\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1325, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student59", "submitted_text": "takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an float that is the sales tax times 100 times the sum of all goods' quantity*price", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    $takes:takes$ a $list:list$ of groceries and a value for sales tax. the $list:list$ of groceries contains a $list:list$ for every $key:item$. each $key:item$'s $list:list$ contains its name, quantity, and price, in that order. $returns:returns$ an float that is the sales tax times 100 times the sum of all goods' quantity*price\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1330, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student63", "submitted_text": "The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by 1 plus the inputted number. That result is outputted.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function $takes:takes$ in a $list:list$ of $lists:lists$ and a number. For every $list:list$ in the $list:list$, the function multiplies the second value by the third value, sums all of the products of each $list:list$, and multiplies that value by 1 plus the $inputted:inputted$ number. That result is $returned:outputted$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1333, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student64", "submitted_text": "In grocery_list, multiple index 0 with index 1, repeat for all lists in grocery_list and add them together. Then, multiple 100% + sale_tax to result.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list, multiple index 0 with index 1, repeat for all $lists:lists$ in grocery_list and $insert:add$ them together. Then, multiple 100% + sale_tax to result.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1334, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student64", "submitted_text": "In grocery_list, multiple index 1 with index 2, repeat for all lists in grocery_list and add them together. Then, multiple 100% + sale_tax to result.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list, multiple index 1 with index 2, repeat for all $lists:lists$ in grocery_list and $insert:add$ them together. Then, multiple 100% + sale_tax to result.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1337, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student69", "submitted_text": "Enter a list where the 0th index is a list of lists and the 1st index is an integer. for every list in the 0th index, multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    $Provide:Enter$ a $list:list$ where the 0th index is a $list:list$ of $lists:lists$ and the 1st index is an $integer:integer$. for every $list:list$ in the 0th index, multiply the $integers:integers$ in the first and second indexes of each $list:list$ in the $list:list$ of $lists:lists$. $Insert:Add$ each product of each $list:list$. Then, multiply by 1 plus the $integer:integer$ in the first index of the $input:input$ $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1356, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student60", "submitted_text": "This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then prints the string in french. If a word in the function is not in the dictionary, the function prints 'UNK' for that word. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    This function $takes:takes$ in a $dictionary:dictionary$ and a $string:string$ as $parameters:parameters$. The $dictionary:dictionary$ contains the translation of given english $strings:words$. The function then $returns:prints$ the $string:string$ in french. If a $string:word$ in the function is not in the $dictionary:dictionary$, the function $returns:prints$ 'UNK' for that $string:word$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1357, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student60", "submitted_text": "This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then prints the string in french. If a word in the function is not in the dictionary, the function prints 'UNK' for that word. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    This function $takes:takes$ in a $dictionary:dictionary$ and a $string:string$ as $parameters:parameters$. The $dictionary:dictionary$ contains the translation of given english $strings:words$. The function then $returns:prints$ the $string:string$ in french. If a $string:word$ in the function is not in the $dictionary:dictionary$, the function $returns:prints$ 'UNK' for that $string:word$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1361, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student64", "submitted_text": "For each string in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    For each $string:string$ in sentence, find $key:key$ value in lexicon and create new $string:string$ with its value pair. If the $string:word$ is not in lexicon, $insert:append$ 'UNK' to new $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1367, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student75", "submitted_text": "def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french\ndef translate(lexicon,sentence): defines {\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four:\"quatre\", \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\", \"like\":aime\", \"my\":\"mes\"}, this program will run the phrase \"I like\nmy three cats\" through def translate and output the french translation", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english $string:word$ with its french translation to create the ability to $input:input$ english and $return:output$ french\ndef translate(lexicon,sentence): defines {\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four:\"quatre\", \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\", \"like\":aime\", \"my\":\"mes\"}, this program will run the $string:phrase$ \"I like\nmy three cats\" through def translate and $return:output$ the french translation\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1368, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student75", "submitted_text": "def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=english, output=french\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english $string:word$ with its french translation to create the ability to $input:input$ english and $return:output$ french as $input:input$=english, $return:output$=french\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the $string:phrase$ input=\"I like my three cats\" through def translate and output={} translation\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1377, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people from oldest to youngest, as long as there is less than a 10-year gap between the two. \n", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. $Returns:Returns$ a $list:list$ of the names of people from oldest to youngest, as long as there is less than a 10-year gap between the two. \n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1378, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people from oldest to youngest", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. $Returns:Returns$ a $list:list$ of the names of people from oldest to youngest\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1379, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people from youngest to oldest", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. $Returns:Returns$ a $list:list$ of the names of people from youngest to oldest\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1380, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people sorted by age from oldest to youngest", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. $Returns:Returns$ a $list:list$ of the names of people sorted by age from oldest to youngest\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1381, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people sorted by age from oldest to youngest. The returned list will be at most 5 names long is the original list of lists has more than 5 items, if the original list of lists has between 4 and 5 items, the returned list will have 3 names, else, the returned list will be empty. ", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. $Returns:Returns$ a $list:list$ of the names of people sorted by age from oldest to youngest. The $returned:returned$ $list:list$ will be at most 5 names long is the original $list:list$ of $lists:lists$ has more than 5 $keys:items$, if the original $list:list$ of $lists:lists$ has between 4 and 5 $keys:items$, the $returned:returned$ $list:list$ will have 3 names, else, the $returned:returned$ $list:list$ will be empty. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1382, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people sorted by age from oldest to youngest. The returned list will be at most 5 names long is the original list of lists has more than 5 items, if the original list of lists has between 4 and 5 items, the returned list will have 3 names, else, the returned list will be empty. ", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. $Returns:Returns$ a $list:list$ of the names of people sorted by age from oldest to youngest. The $returned:returned$ $list:list$ will be at most 5 names long is the original $list:list$ of $lists:lists$ has more than 5 $keys:items$, if the original $list:list$ of $lists:lists$ has between 4 and 5 $keys:items$, the $returned:returned$ $list:list$ will have 3 names, else, the $returned:returned$ $list:list$ will be empty. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1383, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people sorted by age from oldest to youngest. The returned list will be at most 5 names long if the original list of lists has more than 5 items, if the original list of lists has between 4 and 5 items, the returned list will have 3 names, else, the returned list will be empty. ", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. $Returns:Returns$ a $list:list$ of the names of people sorted by age from oldest to youngest. The $returned:returned$ $list:list$ will be at most 5 names long if the original $list:list$ of $lists:lists$ has more than 5 $keys:items$, if the original $list:list$ of $lists:lists$ has between 4 and 5 $keys:items$, the $returned:returned$ $list:list$ will have 3 names, else, the $returned:returned$ $list:list$ will be empty. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1384, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a new list of the names of people sorted by age from oldest to youngest. The returned list will be 5 names long if the original list has more than 5 items; 3 names long if the original list of lists has between 4 and 5 items; else the returned list will be empty. ", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. $Returns:Returns$ a new $list:list$ of the names of people sorted by age from oldest to youngest. The $returned:returned$ $list:list$ will be 5 names long if the original $list:list$ has more than 5 $keys:items$; 3 names long if the original $list:list$ of $lists:lists$ has between 4 and 5 $keys:items$; else the $returned:returned$ $list:list$ will be empty. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1385, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a new list of the names of people sorted by age from oldest to youngest. The returned list will be 5 names long if the original list has more than 5 items; The returned list will be 3 names long if the original list has between 4 and 5 items; The returned list will be empty if the original list has less than 4 items", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. $Returns:Returns$ a new $list:list$ of the names of people sorted by age from oldest to youngest. The $returned:returned$ $list:list$ will be 5 names long if the original $list:list$ has more than 5 $keys:items$; The $returned:returned$ $list:list$ will be 3 names long if the original $list:list$ has between 4 and 5 $keys:items$; The $returned:returned$ $list:list$ will be empty if the original $list:list$ has less than 4 $keys:items$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1386, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a new list of the names of people sorted by age from oldest to youngest. The returned list will be 5 names long if the original list has more than 5 items.", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. $Returns:Returns$ a new $list:list$ of the names of people sorted by age from oldest to youngest. The $returned:returned$ $list:list$ will be 5 names long if the original $list:list$ has more than 5 $keys:items$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1387, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created and returned of the names of people sorted by age from oldest to youngest. If the original list is less than 4 items long, the new list will return empty. If the original list is between 4 and 5 items long, the new list will return 3 names. If the original list is more than 5 items long, the new list will return 5 names. ", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. A new $list:list$ will be created and $returned:returned$ of the names of people sorted by age from oldest to youngest. If the original $list:list$ is less than 4 $keys:items$ long, the new $list:list$ will $return:return$ empty. If the original $list:list$ is between 4 and 5 $keys:items$ long, the new $list:list$ will $return:return$ 3 names. If the original $list:list$ is more than 5 $keys:items$ long, the new $list:list$ will $return:return$ 5 names. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1388, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created and returned of the names of people sorted by age from oldest to youngest.  ", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. A new $list:list$ will be created and $returned:returned$ of the names of people sorted by age from oldest to youngest.  \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1389, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created of the names of people sorted by age from oldest to youngest.  ", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. A new $list:list$ will be created of the names of people sorted by age from oldest to youngest.  \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1390, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Creates a new list of the names sorted by age from oldest to youngest.  ", "prompt": "def topScores(lst):\n    \"\"\"\n    Creates a new $list:list$ of the names sorted by age from oldest to youngest.  \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1391, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created sorting the names of people by their age, from oldest to youngest", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. A new $list:list$ will be created sorting the names of people by their age, from oldest to youngest\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1392, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created sorting the namess by their age, from oldest to youngest", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. A new $list:list$ will be created sorting the namess by their age, from oldest to youngest\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1393, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created sorting the names by their age, from oldest to youngest", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a $list:list$ of $lists:lists$, with each $list:list$ housing the age and name of a person respectively. A new $list:list$ will be created sorting the names by their age, from oldest to youngest\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1396, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function finds the highest value in the list, and prints the string next to it in order from highest number to lowest number.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function finds the highest value in the $list:list$, and $returns:prints$ the $string:string$ next to it in order from highest number to lowest number.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1397, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function finds the highest three values in the list, and prints the string next to it in order from highest number to lowest number.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function finds the highest three values in the $list:list$, and $returns:prints$ the $string:string$ next to it in order from highest number to lowest number.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1398, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function reads the values in the list. The values that are the over 80 are ordered from highest to lowest. The strings are printed in the order of their corresponding values.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function reads the values in the $list:list$. The values that are the over 80 are ordered from highest to lowest. The $strings:strings$ are $returned:printed$ in the order of their corresponding values.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1399, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function reads the values in the list. The values that are over 80 are ordered from highest to lowest. The strings are printed in the order of their corresponding values.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function reads the values in the $list:list$. The values that are over 80 are ordered from highest to lowest. The $strings:strings$ are $returned:printed$ in the order of their corresponding values.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1400, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function reads the numbers in the list. The numbers that are over 80 are ordered from highest to lowest. The strings are printed in the order of their corresponding numbers.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function reads the numbers in the $list:list$. The numbers that are over 80 are ordered from highest to lowest. The $strings:strings$ are $returned:printed$ in the order of their corresponding numbers.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1401, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function reads the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The strings are printed in the order of their corresponding numbers.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function reads the numbers in the $list:list$. The numbers that are greater than 76 are ordered from highest to lowest. The $strings:strings$ are $returned:printed$ in the order of their corresponding numbers.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1402, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function reads the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The strings are printed in the order of their corresponding numbers.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function reads the numbers in the $list:list$. The numbers that are greater than 76 are ordered from highest to lowest. The $strings:strings$ are $returned:printed$ in the order of their corresponding numbers.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1405, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student14", "submitted_text": "if the string contains a number above 80, print its paired name", "prompt": "def topScores(lst):\n    \"\"\"\n    if the $string:string$ contains a number above 80, $return:print$ its paired name\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1408, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "For each list in lst, if the number in index 0 is greater than 76, adds the name to a list. Returns the list.", "prompt": "def topScores(lst):\n    \"\"\"\n    For each $list:list$ in lst, if the number in index 0 is greater than 76, $inserts:adds$ the name to a $list:list$. $Returns:Returns$ the $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1409, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "For each list in lst, if the number in index 0 is greater than 76, adds the name to a list. Sorts in reverse alphabetical order. Returns the list. ", "prompt": "def topScores(lst):\n    \"\"\"\n    For each $list:list$ in lst, if the number in index 0 is greater than 76, $inserts:adds$ the name to a $list:list$. Sorts in reverse alphabetical order. $Returns:Returns$ the $list:list$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1410, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "For each list in lst, if the number in index 0 is greater than 76, adds the name to a list. Sorts in reverse numerical order by the number in index 0. Returns the list. ", "prompt": "def topScores(lst):\n    \"\"\"\n    For each $list:list$ in lst, if the number in index 0 is greater than 76, $inserts:adds$ the name to a $list:list$. Sorts in reverse numerical order by the number in index 0. $Returns:Returns$ the $list:list$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1411, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "For each list in lst, if the number in index 0 is greater than 76, adds the [num, name] list to a list. Sorts in reverse numerical order by the number in index 0. Adds the names to a second list. Returns the second list. ", "prompt": "def topScores(lst):\n    \"\"\"\n    For each $list:list$ in lst, if the number in index 0 is greater than 76, $inserts:adds$ the [num, name] $list:list$ to a $list:list$. Sorts in reverse numerical order by the number in index 0. $Inserts:Adds$ the names to a second $list:list$. $Returns:Returns$ the second $list:list$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1412, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "For each list in lst, if the number in index 0 is greater than 80, adds the [num, name] list to a list. Sorts in reverse numerical order by the number in index 0. Adds the names to a second list. Returns the second list. ", "prompt": "def topScores(lst):\n    \"\"\"\n    For each $list:list$ in lst, if the number in index 0 is greater than 80, $inserts:adds$ the [num, name] $list:list$ to a $list:list$. Sorts in reverse numerical order by the number in index 0. $Inserts:Adds$ the names to a second $list:list$. $Returns:Returns$ the second $list:list$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1413, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\". Adds the top \"top\" names in the list to a second list. Returns the second list.", "prompt": "def topScores(lst):\n    \"\"\"\n    For each $list:list$ in $list:list$, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the $list:list$ by 2, rounding up to create number \"top\". $Inserts:Adds$ the top \"top\" names in the $list:list$ to a second $list:list$. $Returns:Returns$ the second $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1414, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "Does not use math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\". Adds the top \"top\" names in the list to a second list. Returns the second list.", "prompt": "def topScores(lst):\n    \"\"\"\n    Does not use math. For each $list:list$ in $list:list$, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the $list:list$ by 2, rounding up to create number \"top\". $Inserts:Adds$ the top \"top\" names in the $list:list$ to a second $list:list$. $Returns:Returns$ the second $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1415, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "Imports math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\". Adds the top \"top\" names in the list to a second list. Returns the second list.", "prompt": "def topScores(lst):\n    \"\"\"\n    Imports math. For each $list:list$ in $list:list$, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the $list:list$ by 2, rounding up to create number \"top\". $Inserts:Adds$ the top \"top\" names in the $list:list$ to a second $list:list$. $Returns:Returns$ the second $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1416, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "Imports math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\", if the number of the length of the list is even, adds one to top. Adds the top \"top\" names in the list to a second list. Returns the second list.", "prompt": "def topScores(lst):\n    \"\"\"\n    Imports math. For each $list:list$ in $list:list$, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the $list:list$ by 2, rounding up to create number \"top\", if the number of the length of the $list:list$ is even, $inserts:adds$ one to top. $Inserts:Adds$ the top \"top\" names in the $list:list$ to a second $list:list$. $Returns:Returns$ the second $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1417, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "Imports math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\", if the number of the length of the list is even, adds one to top. Adds the top \"top\" names in the list to a second list. Returns the second list, but only the names.", "prompt": "def topScores(lst):\n    \"\"\"\n    Imports math. For each $list:list$ in $list:list$, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the $list:list$ by 2, rounding up to create number \"top\", if the number of the length of the $list:list$ is even, $inserts:adds$ one to top. $Inserts:Adds$ the top \"top\" names in the $list:list$ to a second $list:list$. $Returns:Returns$ the second $list:list$, but only the names.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1418, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "Imports math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\", if the number of the length of the list is even, adds one to top. Adds the top \"top\" names in the list to a second list. Returns the second list.", "prompt": "def topScores(lst):\n    \"\"\"\n    Imports math. For each $list:list$ in $list:list$, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the $list:list$ by 2, rounding up to create number \"top\", if the number of the length of the $list:list$ is even, $inserts:adds$ one to top. $Inserts:Adds$ the top \"top\" names in the $list:list$ to a second $list:list$. $Returns:Returns$ the second $list:list$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1424, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student31", "submitted_text": "Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Returns a list of the names whose corresponding scores were the highest, and were a minimum of 80, sorted from highest corresponding score to lowest.", "prompt": "def topScores(lst):\n    \"\"\"\n    $Takes:Takes$ a $list:list$ containing multiple internal $lists:lists$, with each internal $list:list$ containing two $keys:items$: an $integer:integer$ score and a $string:string$ name. $Returns:Returns$ a $list:list$ of the names whose corresponding scores were the highest, and were a minimum of 80, sorted from highest corresponding score to lowest.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1425, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student31", "submitted_text": "Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Sorts this list from highest integer score to lowest, and returns a list of the names whose corresponding scores were a minimum of 80.", "prompt": "def topScores(lst):\n    \"\"\"\n    $Takes:Takes$ a $list:list$ containing multiple internal $lists:lists$, with each internal $list:list$ containing two $keys:items$: an $integer:integer$ score and a $string:string$ name. Sorts this $list:list$ from highest $integer:integer$ score to lowest, and $returns:returns$ a $list:list$ of the names whose corresponding scores were a minimum of 80.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1430, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student45", "submitted_text": "Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then convert the lists in newLst to strings.", "prompt": "def topScores(lst):\n    \"\"\"\n    $Takes:Takes$ a $list:list$ of $lists:lists$, which we will call lst. For each $list:list$ in lst, if the value at index 0 is greater than or equal to 80, $insert:add$ the $list:list$ at index 1 to a new $list:list$ of $lists:lists$ called newLst. Then sort newLst. If there are more than five $lists:lists$ in newLst, $skip:remove$ any $lists:lists$ after the five $lists:lists$ with the highest values at index 0. Then $typecast:convert$ the $lists:lists$ in newLst to $strings:strings$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1431, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student45", "submitted_text": "Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst.", "prompt": "def topScores(lst):\n    \"\"\"\n    $Takes:Takes$ a $list:list$ of $lists:lists$, which we will call lst. For each $list:list$ in lst, if the value at index 0 is greater than or equal to 80, $insert:add$ the $list:list$ at index 1 to a new $list:list$ of $lists:lists$ called newLst. Then sort newLst. If there are more than five $lists:lists$ in newLst, $skip:remove$ any $lists:lists$ after the five $lists:lists$ with the highest values at index 0. Then make a new $list:list$ called finalLst. For each $list:list$ in newLst, $insert:add$ the value at index 1 to finalLst.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1432, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student45", "submitted_text": "Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. Return finalLst.", "prompt": "def topScores(lst):\n    \"\"\"\n    $Takes:Takes$ a $list:list$ of $lists:lists$, which we will call lst. For each $list:list$ in lst, if the value at index 0 is greater than or equal to 80, $insert:add$ the $list:list$ at index 1 to a new $list:list$ of $lists:lists$ called newLst. Then sort newLst. If there are more than five $lists:lists$ in newLst, $skip:remove$ any $lists:lists$ after the five $lists:lists$ with the highest values at index 0. Then make a new $list:list$ called finalLst. For each $list:list$ in newLst, $insert:add$ the value at index 1 to finalLst. $Return:Return$ finalLst.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1433, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student45", "submitted_text": "Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. Return finalLst.", "prompt": "def topScores(lst):\n    \"\"\"\n    $Takes:Takes$ a $list:list$ of $lists:lists$, which we will call lst. For each $list:list$ in lst, if the value at index 0 is greater than or equal to 80, $insert:add$ the $list:list$ at index 1 to a new $list:list$ of $lists:lists$ called newLst. Then sort newLst from highest to lowest. If there are more than five $lists:lists$ in newLst, $skip:remove$ any $lists:lists$ after the five $lists:lists$ with the highest values at index 0. Then make a new $list:list$ called finalLst. For each $list:list$ in newLst, $insert:add$ the value at index 1 to finalLst. $Return:Return$ finalLst.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1434, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student45", "submitted_text": "Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. When that's finished, return finalLst.", "prompt": "def topScores(lst):\n    \"\"\"\n    $Takes:Takes$ a $list:list$ of $lists:lists$, which we will call lst. For each $list:list$ in lst, if the value at index 0 is greater than or equal to 80, $insert:add$ the $list:list$ at index 1 to a new $list:list$ of $lists:lists$ called newLst. Then sort newLst from highest to lowest. If there are more than five $lists:lists$ in newLst, $skip:remove$ any $lists:lists$ after the five $lists:lists$ with the highest values at index 0. Then make a new $list:list$ called finalLst. For each $list:list$ in newLst, $insert:add$ the value at index 1 to finalLst. When that's finished, $return:return$ finalLst.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1435, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student45", "submitted_text": "Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. The output should be finalLst.", "prompt": "def topScores(lst):\n    \"\"\"\n    $Takes:Takes$ a $list:list$ of $lists:lists$, which we will call lst. For each $list:list$ in lst, if the value at index 0 is greater than or equal to 80, $insert:add$ the $list:list$ at index 1 to a new $list:list$ of $lists:lists$ called newLst. Then sort newLst from highest to lowest. If there are more than five $lists:lists$ in newLst, $skip:remove$ any $lists:lists$ after the five $lists:lists$ with the highest values at index 0. Then make a new $list:list$ called finalLst. For each $list:list$ in newLst, $insert:add$ the value at index 1 to finalLst. The $return:output$ should be finalLst.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1441, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "taken lst, loop each list and if the zeroth index is less than or equal to 80, add the 1st index into a list and return this new list ", "prompt": "def topScores(lst):\n    \"\"\"\n    taken lst, loop each $list:list$ and if the zeroth index is less than or equal to 80, $insert:add$ the 1st index into a $list:list$ and $return:return$ this new $list:list$ \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1442, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "taken lst, loop each list and if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list ", "prompt": "def topScores(lst):\n    \"\"\"\n    taken lst, loop each $list:list$ and if the zeroth index is more than or equal to 80, $insert:add$ the 1st index into a $list:list$ and $return:return$ this new $list:list$ \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1443, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "taken lst, loop each list and if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list in the order of the highest zeroth index. If the list is larger than 4 items, then return only 4 items with the highest zeroth index. ", "prompt": "def topScores(lst):\n    \"\"\"\n    taken lst, loop each $list:list$ and if the zeroth index is more than or equal to 80, $insert:add$ the 1st index into a $list:list$ and $return:return$ this new $list:list$ in the order of the highest zeroth index. If the $list:list$ is larger than 4 $keys:items$, then $return:return$ only 4 $keys:items$ with the highest zeroth index. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1444, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "taken lst, loop each list and if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list by sorting from the highest 0th index of the original list. If the list is larger than 5 items, then return only 5 items with the highest zeroth index. ", "prompt": "def topScores(lst):\n    \"\"\"\n    taken lst, loop each $list:list$ and if the zeroth index is more than or equal to 80, $insert:add$ the 1st index into a $list:list$ and $return:return$ this new $list:list$ by sorting from the highest 0th index of the original $list:list$. If the $list:list$ is larger than 5 $keys:items$, then $return:return$ only 5 $keys:items$ with the highest zeroth index. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1445, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "taken lst, sort the list be the highest 0th index then if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list by sorting from the highest 0th index of the original list. If the list is larger than 5 items, then return only 5 items with the highest zeroth index. ", "prompt": "def topScores(lst):\n    \"\"\"\n    taken lst, sort the $list:list$ be the highest 0th index then if the zeroth index is more than or equal to 80, $insert:add$ the 1st index into a $list:list$ and $return:return$ this new $list:list$ by sorting from the highest 0th index of the original $list:list$. If the $list:list$ is larger than 5 $keys:items$, then $return:return$ only 5 $keys:items$ with the highest zeroth index. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1446, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "taken lst, loop through each list and sort the list in the order of the highest 0th index. Given new list if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list by sorting from the highest 0th index of the original list. If the list is larger than 5 items, then return only 5 items with the highest zeroth index. ", "prompt": "def topScores(lst):\n    \"\"\"\n    taken lst, $loop through:loop through$ each $list:list$ and sort the $list:list$ in the order of the highest 0th index. Given new $list:list$ if the zeroth index is more than or equal to 80, $insert:add$ the 1st index into a $list:list$ and $return:return$ this new $list:list$ by sorting from the highest 0th index of the original $list:list$. If the $list:list$ is larger than 5 $keys:items$, then $return:return$ only 5 $keys:items$ with the highest zeroth index. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1447, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "Loop through each lst and take the nested list with a 0th index larger than or equal to 80. Append to a new list and sort the new list in the order of the largest 0th index in the nested list. Add the 1st index into a new list and return this new list. If the list is larger than 5 items, then return only 5 items with the highest zeroth index. ", "prompt": "def topScores(lst):\n    \"\"\"\n    Loop through each lst and $take:take$ the nested $list:list$ with a 0th index larger than or equal to 80. $Insert:Append$ to a new $list:list$ and sort the new $list:list$ in the order of the largest 0th index in the nested $list:list$. $Insert:Add$ the 1st index into a new $list:list$ and $return:return$ this new $list:list$. If the $list:list$ is larger than 5 $keys:items$, then $return:return$ only 5 $keys:items$ with the highest zeroth index. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1448, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "Loop through each lst and take the nested list with a 0th index larger than or equal to 80. Append to a new list and sort the new list in the order of the largest 0th index in the nested list. Add the 1st index into a new list and return this list. If the list is larger than 5 items then take then eliminate the last elements to make 5 total items. ", "prompt": "def topScores(lst):\n    \"\"\"\n    Loop through each lst and $take:take$ the nested $list:list$ with a 0th index larger than or equal to 80. $Insert:Append$ to a new $list:list$ and sort the new $list:list$ in the order of the largest 0th index in the nested $list:list$. $Insert:Add$ the 1st index into a new $list:list$ and $return:return$ this $list:list$. If the $list:list$ is larger than 5 $keys:items$ then $take:take$ then eliminate the last $keys:elements$ to make 5 total $keys:items$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1449, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "Loop through each lst and take the nested list with a 0th index larger than or equal to 80. Define and append to a new list and sort the new list in the order of the largest 0th index in the nested list. Add the 1st index into a another defined new list and return this list. If the list is larger than 5 items then take then eliminate the last elements to make 5 total items. ", "prompt": "def topScores(lst):\n    \"\"\"\n    Loop through each lst and $take:take$ the nested $list:list$ with a 0th index larger than or equal to 80. Define and $insert:append$ to a new $list:list$ and sort the new $list:list$ in the order of the largest 0th index in the nested $list:list$. $Insert:Add$ the 1st index into a another defined new $list:list$ and $return:return$ this $list:list$. If the $list:list$ is larger than 5 $keys:items$ then $take:take$ then eliminate the last $keys:elements$ to make 5 total $keys:items$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1452, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student55", "submitted_text": "Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns the name from the highest grade to the lowest, if only the grades are higher than 80.", "prompt": "def topScores(lst):\n    \"\"\"\n    Write a function that $loops through:runs through$ a $list:list$ of $lists:lists$ with 2 $keys:elements$. The first $key:element$ is the grade and the second $key:element$ is the name of the student. This function $returns:returns$ the name from the highest grade to the lowest, if only the grades are higher than 80.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1453, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student55", "submitted_text": "Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns the name from the highest grade to the lowest, if only the grades are higher or equal than 80.", "prompt": "def topScores(lst):\n    \"\"\"\n    Write a function that $loops through:runs through$ a $list:list$ of $lists:lists$ with 2 $keys:elements$. The first $key:element$ is the grade and the second $key:element$ is the name of the student. This function $returns:returns$ the name from the highest grade to the lowest, if only the grades are higher or equal than 80.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1454, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student55", "submitted_text": "Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns all the name of the students with grades higher or equal to 80. The order of the return is from the highest grade to the lowest one.", "prompt": "def topScores(lst):\n    \"\"\"\n    Write a function that $loops through:runs through$ a $list:list$ of $lists:lists$ with 2 $keys:elements$. The first $key:element$ is the grade and the second $key:element$ is the name of the student. This function $returns:returns$ all the name of the students with grades higher or equal to 80. The order of the $return:return$ is from the highest grade to the lowest one.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1458, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student65", "submitted_text": "This function has a list of lists of length 2 as inputs. If the first entry in the list (the score) is greater than or equal to 80, add the second entry in the list (the name) to a list to be output at the end. The final list should be ordered by names with the largest score to names with the smallest score.", "prompt": "def topScores(lst):\n    \"\"\"\n    This function has a $list:list$ of $lists:lists$ of length 2 as $inputs:inputs$. If the first $key:entry$ in the $list:list$ (the score) is greater than or equal to 80, $insert:add$ the second $key:entry$ in the $list:list$ (the name) to a $list:list$ to be $return:output$ at the end. The final $list:list$ should be ordered by names with the largest score to names with the smallest score.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1459, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student65", "submitted_text": "This function has a list of lists of length 2 as inputs. First, sort the lists by the first entry. If the first entry in the list (the score) is greater than or equal to 80, add the second entry in the list (the name) to a list to be output at the end. ", "prompt": "def topScores(lst):\n    \"\"\"\n    This function has a $list:list$ of $lists:lists$ of length 2 as $inputs:inputs$. First, sort the $lists:lists$ by the first $key:entry$. If the first $key:entry$ in the $list:list$ (the score) is greater than or equal to 80, $insert:add$ the second $key:entry$ in the $list:list$ (the name) to a $list:list$ to be $return:output$ at the end. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1462, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student23", "submitted_text": "This function inputs two lists. The letter at the end of the first list adds on the lowest number of the second dictionary. This keeps going and forms a new list with all the combined letters and numbers. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function $inputs:inputs$ two $lists:lists$. The letter at the end of the first $list:list$ $inserts:adds$ on the lowest number of the second $dictionary:dictionary$. This keeps going and forms a new $list:list$ with all the $concatenated:combined$ letters and numbers. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1463, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student23", "submitted_text": "This function inputs two lists. The letter at index -1 of the first list adds on the lowest number of the second dictionary. This keeps going and forms a new list with all the combined letters and numbers. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function $inputs:inputs$ two $lists:lists$. The letter at index -1 of the first $list:list$ $inserts:adds$ on the lowest number of the second $dictionary:dictionary$. This keeps going and forms a new $list:list$ with all the $concatenated:combined$ letters and numbers. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1464, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student23", "submitted_text": "This function inputs two lists. The letter at the last index of the first list adds on the lowest number of the second list and then the letters in the alphabet. This keeps going and forms a new list with all the combined letters and numbers. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function $inputs:inputs$ two $lists:lists$. The letter at the last index of the first $list:list$ $inserts:adds$ on the lowest number of the second $list:list$ and then the letters in the alphabet. This keeps going and forms a new $list:list$ with all the $concatenated:combined$ letters and numbers. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1465, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student23", "submitted_text": "This function inputs two lists. The letter at the beginning of the first list adds on the lowest number of the second list and then the letters in the alphabet. This keeps going and forms a new list with all the combined letters and numbers. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function $inputs:inputs$ two $lists:lists$. The letter at the beginning of the first $list:list$ $inserts:adds$ on the lowest number of the second $list:list$ and then the letters in the alphabet. This keeps going and forms a new $list:list$ with all the $concatenated:combined$ letters and numbers. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1466, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student23", "submitted_text": "This function inputs two lists. The last letter at the end of the first list adds on the lowest number of the second list and then the letters in the alphabet. This keeps going and forms a new list with all the combined letters and numbers. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function $inputs:inputs$ two $lists:lists$. The last letter at the end of the first $list:list$ $inserts:adds$ on the lowest number of the second $list:list$ and then the letters in the alphabet. This keeps going and forms a new $list:list$ with all the $concatenated:combined$ letters and numbers. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1471, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student35", "submitted_text": "From the first list of parameters, the function takes the last element first and goes backwards towards the first element. It attaches these elements with the inputs given in the second list. A new list is made which is appended continuously with these new attachments. No function is called for this but rather the two stings which are to be attached are concatenated. This goes on until the elements of the first list are exhausted.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    From the first $list:list$ of $parameters:parameters$, the function $takes:takes$ the last $key:element$ first and goes backwards towards the first $key:element$. It $inserts:attaches$ these $keys:elements$ with the $inputs:inputs$ given in the second $list:list$. A new $list:list$ is made which is $inserted:appended$ continuously with these new attachments. No function is called for this but rather the two stings which are to be $inserted:attached$ are $concatenated:concatenated$. This goes on until the $keys:elements$ of the first $list:list$ are exhausted.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1472, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student35", "submitted_text": "From the first list of parameters, the function takes the last element first and goes backwards towards the first element. It attaches these elements with the inputs given in the second list. A new list is made which is appended continuously with these new attachments. No function is called for this but rather the two stings which are to be attached are concatenated. During concatenation, the element of the first list is put first and the element of the second list is put second. This goes on until the elements of the first list are exhausted.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    From the first $list:list$ of $parameters:parameters$, the function $takes:takes$ the last $key:element$ first and goes backwards towards the first $key:element$. It $inserts:attaches$ these $keys:elements$ with the $inputs:inputs$ given in the second $list:list$. A new $list:list$ is made which is $inserted:appended$ continuously with these new attachments. No function is called for this but rather the two stings which are to be $inserted:attached$ are $concatenated:concatenated$. During concatenation, the $key:element$ of the first $list:list$ is put first and the $key:element$ of the second $list:list$ is put second. This goes on until the $keys:elements$ of the first $list:list$ are exhausted.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1475, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student40", "submitted_text": "when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    when given two $lists:lists$ containing $strings:strings$, the function will $return:return$ 1 $list:list$. Each individual $string:string$ within the first $list:list$ will be $concatenated:combined$ with each $string:string$ in the other $list:list$, with letters appearing first and numbers appearing second.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1476, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student40", "submitted_text": "when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second. the new strings will appear in alphabetical order.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    when given two $lists:lists$ containing $strings:strings$, the function will $return:return$ 1 $list:list$. Each individual $string:string$ within the first $list:list$ will be $concatenated:combined$ with each $string:string$ in the other $list:list$, with letters appearing first and numbers appearing second. the new $strings:strings$ will appear in alphabetical order.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1477, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student40", "submitted_text": "when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second. the new strings will appear in alphabetical and numerical order.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    when given two $lists:lists$ containing $strings:strings$, the function will $return:return$ 1 $list:list$. Each individual $string:string$ within the first $list:list$ will be $concatenated:combined$ with each $string:string$ in the other $list:list$, with letters appearing first and numbers appearing second. the new $strings:strings$ will appear in alphabetical and numerical order.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1480, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student44", "submitted_text": "For every value starting with the last one in the first array\nconcatenate with each value in the second array starting with the first one. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    For every value starting with the last one in the first $list:array$\n$concatenate:concatenate$ with each value in the second $list:array$ starting with the first one. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1481, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student44", "submitted_text": "Starting with the last value in the first array\nconcatenate with each value starting with the first one in the second array . ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    Starting with the last value in the first $list:array$\n$concatenate:concatenate$ with each value starting with the first one in the second $list:array$ . \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1484, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student50", "submitted_text": "There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    There are two $lists:lists$ of $strings:strings$. $Concatenate:Combine$ the first $key:element$ with the first $list:list$ with the first $key:element$ in the second $list:list$ and $insert:add$ that to a new $list:list$, which will be $returned:returned$ [ex, if the first $key:element$ of the first $list:list$ is F and an $key:element$ of the second $list:list$ is 7, $concatenate:combine$ them like F7]. Keep $inserting:adding$ the first $key:element$ of the first $list:list$ to each $key:element$ of the second $list:list$ and $insert:add$ each addition to the new $list:list$. $Return:Return$ the $list:list$ in alphabetical order.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1485, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student50", "submitted_text": "There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order and numerical order [ex. A1, B2, C3]", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    There are two $lists:lists$ of $strings:strings$. $Concatenate:Combine$ the first $key:element$ with the first $list:list$ with the first $key:element$ in the second $list:list$ and $insert:add$ that to a new $list:list$, which will be $returned:returned$ [ex, if the first $key:element$ of the first $list:list$ is F and an $key:element$ of the second $list:list$ is 7, $concatenate:combine$ them like F7]. Keep $inserting:adding$ the first $key:element$ of the first $list:list$ to each $key:element$ of the second $list:list$ and $insert:add$ each addition to the new $list:list$. $Return:Return$ the $list:list$ in alphabetical order and numerical order [ex. A1, B2, C3]\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1486, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student50", "submitted_text": "There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Reorder the new list to make it in alphabetical and numerical order, then return", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    There are two $lists:lists$ of $strings:strings$. $Concatenate:Combine$ the first $key:element$ with the first $list:list$ with the first $key:element$ in the second $list:list$ and $insert:add$ that to a new $list:list$, which will be $returned:returned$ [ex, if the first $key:element$ of the first $list:list$ is F and an $key:element$ of the second $list:list$ is 7, $concatenate:combine$ them like F7]. Keep $inserting:adding$ the first $key:element$ of the first $list:list$ to each $key:element$ of the second $list:list$ and $insert:add$ each addition to the new $list:list$. Reorder the new $list:list$ to make it in alphabetical and numerical order, then $return:return$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1489, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student59", "submitted_text": "takes a list of suits and a list of values as inputs. returns a list of all possible combinations of values and suits", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    $takes:takes$ a $list:list$ of suits and a $list:list$ of values as $inputs:inputs$. $returns:returns$ a $list:list$ of all possible combinations of values and suits\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1490, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student59", "submitted_text": "takes a list of suits and a list of values as inputs. returns a list of all possible combinations of suits and values in alphabetical order", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    $takes:takes$ a $list:list$ of suits and a $list:list$ of values as $inputs:inputs$. $returns:returns$ a $list:list$ of all possible combinations of suits and values in alphabetical order\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1491, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student59", "submitted_text": "takes a list of suits and a list of values as inputs. returns an ordered list of all possible combinations of values and suits", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    $takes:takes$ a $list:list$ of suits and a $list:list$ of values as $inputs:inputs$. $returns:returns$ an ordered $list:list$ of all possible combinations of values and suits\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1494, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student60", "submitted_text": "This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function $inputs:inputs$ suits and vals as a $list:list$ as its $parameters:parameters$. This function $returns:prints$ out every combination of these $parameters:parameters$. As an example. If you $input:input$ ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function $returns:prints$\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1495, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student60", "submitted_text": "This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. This function prints the final values alphabetically. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function $inputs:inputs$ suits and vals as a $list:list$ as its $parameters:parameters$. This function $returns:prints$ out every combination of these $parameters:parameters$. As an example. If you $input:input$ ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function $returns:prints$\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. This function $returns:prints$ the final values alphabetically. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1496, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student60", "submitted_text": "This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. The final output in the list is ordered alphabetically. 'D6' would be in the list before 'S1'", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function $inputs:inputs$ suits and vals as a $list:list$ as its $parameters:parameters$. This function $returns:prints$ out every combination of these $parameters:parameters$. As an example. If you $input:input$ ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function $returns:prints$\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. The final $return:output$ in the $list:list$ is ordered alphabetically. 'D6' would be in the $list:list$ before 'S1'\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1497, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student60", "submitted_text": "This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. The final output in the list is ordered C then D then H then S ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function $inputs:inputs$ suits and vals as a $list:list$ as its $parameters:parameters$. This function $returns:prints$ out every combination of these $parameters:parameters$. As an example. If you $input:input$ ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function $returns:prints$\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. The final $return:output$ in the $list:list$ is ordered C then D then H then S \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1502, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student64", "submitted_text": "For each character in suits, create a list that appends each of the suits with each of the values in vals. Results in vals must be in alphabetical order.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    For each $string:character$ in suits, create a $list:list$ that $inserts:appends$ each of the suits with each of the values in vals. Results in vals must be in alphabetical order.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1503, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student64", "submitted_text": "For each character in suits, create a list that appends each of the suits with each of the values in vals. Each card in list must be in alphabetical order.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    For each $string:character$ in suits, create a $list:list$ that $inserts:appends$ each of the suits with each of the values in vals. Each card in $list:list$ must be in alphabetical order.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1504, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student64", "submitted_text": "For each character in suits, create a list that appends each of the suits with each of the values in vals. Each card in list must be in alphabetical order of suits.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    For each $string:character$ in suits, create a $list:list$ that $inserts:appends$ each of the suits with each of the values in vals. Each card in $list:list$ must be in alphabetical order of suits.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1505, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student64", "submitted_text": "For each character in suits, create a list that appends each of the suits with each of the values in vals. Each card in list must be in alphabetical order by suits.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    For each $string:character$ in suits, create a $list:list$ that $inserts:appends$ each of the suits with each of the values in vals. Each card in $list:list$ must be in alphabetical order by suits.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1506, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student64", "submitted_text": "For each character in suits, create a list that appends each of the suits with each of the values in vals. Each card in list must be in alphabetical order by first character.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    For each $string:character$ in suits, create a $list:list$ that $inserts:appends$ each of the suits with each of the values in vals. Each card in $list:list$ must be in alphabetical order by first $string:character$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1507, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student64", "submitted_text": "For each character in suits, create a list that appends each of the suits with each of the values in vals. Sort each card in deck by alphabetical order of first character.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    For each $string:character$ in suits, create a $list:list$ that $inserts:appends$ each of the suits with each of the values in vals. Sort each card in deck by alphabetical order of first $string:character$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1510, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student69", "submitted_text": "Enter two arrays of characters. Print an array with the reverse of the first array multiplied by the second array.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    $Provide:Enter$ two $lists:arrays$ of $strings:characters$. $Return:Print$ an $list:array$ with the reverse of the first $list:array$ multiplied by the second $list:array$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1514, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "The data on the left is put through the defined function using suits and vals to output data on the right.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The data on the left is put through the defined function using suits and vals to $return:output$ data on the right.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1515, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "The data on the left is put through the defined function using suits and vals and defines the term Card for the function generateCardDeck to output data on the right.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The data on the left is put through the defined function using suits and vals and defines the term Card for the function generateCardDeck to $return:output$ data on the right.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1516, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "The term Card is defined in relation to the function generateCardDeck which inputs the data on the left side of the table and outputs the data on the right side of the table.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The term Card is defined in relation to the function generateCardDeck which $inputs:inputs$ the data on the left side of the table and $returns:outputs$ the data on the right side of the table.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1517, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "The function defines Card as the left input in relation to the function generateCardDeck which inputs the data on the left side of the table and outputs the data on the right side of the table.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function defines Card as the left $input:input$ in relation to the function generateCardDeck which $inputs:inputs$ the data on the left side of the table and $returns:outputs$ the data on the right side of the table.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1518, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "The program defines Card as the input data, ['S\", 'H', 'D'], ['1', '2', 'A'] and uses the defined function generateCardDeck(suits, vals): to create an output which combines both blocks of information.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The program defines Card as the $input:input$ data, ['S\", 'H', 'D'], ['1', '2', 'A'] and uses the defined function generateCardDeck(suits, vals): to create an $return:output$ which $concatenates:combines$ both blocks of information.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1519, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "The program defines Card as the input data, Card == ['H'], ['2'], and uses the defined function generateCardDeck(suits, vals): to create an output which combines both blocks of information.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The program defines Card as the $input:input$ data, Card == ['H'], ['2'], and uses the defined function generateCardDeck(suits, vals): to create an $return:output$ which $concatenates:combines$ both blocks of information.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1520, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], Card then flips the order of suit[] making the variables print in the opposite order, this program then outputs and combination of the suit [] and val []\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then outputs and combination of the opposite order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): $takes:brings in$ the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], Card then flips the order of suit[] making the $keys:variables$ $return:print$ in the opposite order, this program then $returns:outputs$ and combination of the suit [] and val []\ndef generateCardDeck(suits, vals): $takes:brings in$ the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then $returns:outputs$ and combination of the opposite order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): $takes:brings in$ the information:['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1521, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "The program, generateCardDeck(suits, vals):, defines Card as the input data, Card == ['H'], ['2'], and creates an output that combines both [] of information.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The program, generateCardDeck(suits, vals):, defines Card as the $input:input$ data, Card == ['H'], ['2'], and creates an $return:output$ that $concatenates:combines$ both [] of information.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1522, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information ['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): $takes:brings in$ the information ['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1523, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A']; ['H', 'D'], ['6', 'Q', 'J', '2']; ['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): $takes:brings in$ the information: ['S', 'H', 'D'], ['1', '2', 'A']; ['H', 'D'], ['6', 'Q', 'J', '2']; ['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1524, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].\nef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): $takes:brings in$ the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\ndef generateCardDeck(suits, vals): $takes:brings in$ the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\nef generateCardDeck(suits, vals): $takes:brings in$ the information:['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1525, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], Card then reverses the order of suit[] making the variables print in the opposite order starting with ['D'], this program then outputs and combination of the suit [] and val []\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then outputs and combination of the opposite order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): $takes:brings in$ the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], Card then reverses the order of suit[] making the $keys:variables$ $return:print$ in the opposite order starting with ['D'], this program then $returns:outputs$ and combination of the suit [] and val []\ndef generateCardDeck(suits, vals): $takes:brings in$ the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then $returns:outputs$ and combination of the opposite order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): $takes:brings in$ the information:['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1526, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then outputs and combination of both the  reverse suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then outputs and combination of both the suit [] and the reverse val [].\nef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): $takes:brings in$ the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then $returns:outputs$ and combination of both the  reverse suit [] and the val [].\ndef generateCardDeck(suits, vals): $takes:brings in$ the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the reverse val [].\nef generateCardDeck(suits, vals): $takes:brings in$ the information:['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1527, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then outputs and combination of the reverse order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then outputs and combination of the suit [] and the reverse order of the val [].\nef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): $takes:brings in$ the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then $returns:outputs$ and combination of the reverse order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): $takes:brings in$ the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then $returns:outputs$ and combination of the suit [] and the reverse order of the val [].\nef generateCardDeck(suits, vals): $takes:brings in$ the information:['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1528, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then outputs and combination of the suit [] and the reverse order of the  val [].\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then outputs and combination of the reverse order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): $takes:brings in$ the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then $returns:outputs$ and combination of the suit [] and the reverse order of the  val [].\ndef generateCardDeck(suits, vals): $takes:brings in$ the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then $returns:outputs$ and combination of the reverse order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): $takes:brings in$ the information:['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1529, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then outputs and combination of the suit [] and the  val [] except the suit [] will output in the reverse order of the input.\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then outputs and combination of the reverse order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): $takes:brings in$ the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then $returns:outputs$ and combination of the suit [] and the  val [] except the suit [] will $return:output$ in the reverse order of the $input:input$.\ndef generateCardDeck(suits, vals): $takes:brings in$ the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then $returns:outputs$ and combination of the reverse order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): $takes:brings in$ the information:['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1530, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then outputs and combination of the suit [reverse order] and the  val []\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then outputs and combination of the reverse order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): $takes:brings in$ the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then $returns:outputs$ and combination of the suit [reverse order] and the  val []\ndef generateCardDeck(suits, vals): $takes:brings in$ the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then $returns:outputs$ and combination of the reverse order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): $takes:brings in$ the information:['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1531, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then outputs and combination of the suit [] in a reversed order and the  val []\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then outputs and combination of the reverse order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): $takes:brings in$ the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then $returns:outputs$ and combination of the suit [] in a reversed order and the  val []\ndef generateCardDeck(suits, vals): $takes:brings in$ the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then $returns:outputs$ and combination of the reverse order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): $takes:brings in$ the information:['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1532, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then outputs and combination of the suit [] in a reversed order and the  val []\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then outputs and combination of the opposite order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): $takes:brings in$ the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], this program then $returns:outputs$ and combination of the suit [] in a reversed order and the  val []\ndef generateCardDeck(suits, vals): $takes:brings in$ the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then $returns:outputs$ and combination of the opposite order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): $takes:brings in$ the information:['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1533, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], Card then flips the order of suit[] making the numbers print reversed, this program then outputs and combination of the suit [] in a reversed order and the  val []\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then outputs and combination of the opposite order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): $takes:brings in$ the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], Card then flips the order of suit[] making the numbers $return:print$ reversed, this program then $returns:outputs$ and combination of the suit [] in a reversed order and the  val []\ndef generateCardDeck(suits, vals): $takes:brings in$ the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], this program then $returns:outputs$ and combination of the opposite order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): $takes:brings in$ the information:['H'], ['2'] and defines Card=[], this program then $returns:outputs$ and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1537, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student79", "submitted_text": "there are two lists, both with strings. you should use a nested for loop to concatenate the two strings and then add them to a list in increasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). suit takes precedence over rank. when you concatenate the letter should be before the number. \n", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    there are two $lists:lists$, both with $strings:strings$. you should use a nested for loop to $concatenate:concatenate$ the two $strings:strings$ and then $insert:add$ them to a $list:list$ in increasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). suit $takes:takes$ precedence over rank. when you $concatenate:concatenate$ the letter should be before the number. \n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1538, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student79", "submitted_text": "there are two lists, both with strings. you should use a nested for loop to concatenate the two strings and then add them to a list in decreasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). suit takes precedence over rank. when you concatenate the letter should be before the number. \n", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    there are two $lists:lists$, both with $strings:strings$. you should use a nested for loop to $concatenate:concatenate$ the two $strings:strings$ and then $insert:add$ them to a $list:list$ in decreasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). suit $takes:takes$ precedence over rank. when you $concatenate:concatenate$ the letter should be before the number. \n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1541, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student1", "submitted_text": "takes a list of words, reverses them and orders them in alphabetical order.", "prompt": "def reverseWords(words):\n    \"\"\"\n    $takes:takes$ a $list:list$ of $strings:words$, reverses them and orders them in alphabetical order.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1544, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student6", "submitted_text": "Input: list of strings. Output: list of strings, whose characters are in the reverse order of the original string. The order of the strings in the outputted list is also in the reverse order that the strings were in the inputted list", "prompt": "def reverseWords(words):\n    \"\"\"\n    $Input:Input$: $list:list$ of $strings:strings$. $Return:Output$: $list:list$ of $strings:strings$, whose $strings:characters$ are in the reverse order of the original $string:string$. The order of the $strings:strings$ in the $returned:outputted$ $list:list$ is also in the reverse order that the $strings:strings$ were in the $inputted:inputted$ $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1545, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student6", "submitted_text": "Input: list of strings. Output: list of strings, whose characters are in the reverse order of the original string. The order of the strings in the outputted list is in alphabetical", "prompt": "def reverseWords(words):\n    \"\"\"\n    $Input:Input$: $list:list$ of $strings:strings$. $Return:Output$: $list:list$ of $strings:strings$, whose $strings:characters$ are in the reverse order of the original $string:string$. The order of the $strings:strings$ in the $returned:outputted$ $list:list$ is in alphabetical\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1550, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student9", "submitted_text": "The function reverses the positions of each string and reverses the string itself.", "prompt": "def reverseWords(words):\n    \"\"\"\n    The function reverses the positions of each $string:string$ and reverses the $string:string$ itself.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1551, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student9", "submitted_text": "The function reverses the letters in each string.", "prompt": "def reverseWords(words):\n    \"\"\"\n    The function reverses the letters in each $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1554, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student14", "submitted_text": "put each character in each word in reverse order. then put each word in alphabetical order", "prompt": "def reverseWords(words):\n    \"\"\"\n    put each $string:character$ in each $string:word$ in reverse order. then put each $string:word$ in alphabetical order\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1555, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student14", "submitted_text": "put each character in each word in reverse order. then put each word in alphabetical order", "prompt": "def reverseWords(words):\n    \"\"\"\n    put each $string:character$ in each $string:word$ in reverse order. then put each $string:word$ in alphabetical order\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1565, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student39", "submitted_text": "In this function your goal is given a list of strings to reverse the strings and order the reversed strings in alphabetical order.", "prompt": "def reverseWords(words):\n    \"\"\"\n    In this function your goal is given a $list:list$ of $strings:strings$ to reverse the $strings:strings$ and order the reversed $strings:strings$ in alphabetical order.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1570, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student46", "submitted_text": "The function takes in a list of strings, it will sort the strings alphabetically by the first character. Then it will make all the character within the strings reverse. ", "prompt": "def reverseWords(words):\n    \"\"\"\n    The function $takes:takes$ in a $list:list$ of $strings:strings$, it will sort the $strings:strings$ alphabetically by the first $string:character$. Then it will make all the $string:character$ within the $strings:strings$ reverse. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1578, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student58", "submitted_text": "take each item in the list and return it in reverse", "prompt": "def reverseWords(words):\n    \"\"\"\n    $take:take$ each $key:item$ in the $list:list$ and $return:return$ it in reverse\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1579, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student58", "submitted_text": "Reverse each string in the list. return the list", "prompt": "def reverseWords(words):\n    \"\"\"\n    Reverse each $string:string$ in the $list:list$. $return:return$ the $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1580, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student58", "submitted_text": "Reverse the characters in each string in the list. return the list", "prompt": "def reverseWords(words):\n    \"\"\"\n    Reverse the $strings:characters$ in each $string:string$ in the $list:list$. $return:return$ the $list:list$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1586, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student3", "submitted_text": "create a function with 2 inputs: guess (list) and answers(list). find the number of the element match in guess and answers then divide with the number of element of answers. then times the results 100 times and round up the to interger", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    create a function with 2 $inputs:inputs$: guess ($list:list$) and answers(list). find the number of the $key:element$ match in guess and answers then divide with the number of $key:element$ of answers. then times the results 100 times and round up the to interger\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1589, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student4", "submitted_text": "determines the percent of items in list 1 that are identical to the items in list 2, returns in whole number format including percent sign", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    determines the percent of $keys:items$ in $list:list$ 1 that are identical to the $keys:items$ in $list:list$ 2, $returns:returns$ in $integer:whole number$ format including percent sign\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1590, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student4", "submitted_text": "determines the percent of items in list 1 that are identical to the items in list 2, returns in integer format including percent sign", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    determines the percent of $keys:items$ in $list:list$ 1 that are identical to the $keys:items$ in $list:list$ 2, $returns:returns$ in $integer:integer$ format including percent sign\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1593, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student10", "submitted_text": "User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    User $inputs:inputs$ two $lists:lists$ of equal length. Program would compare each $key:item$ against second $list:list$'s corresponding $key:item$, and would $return:return$ the percentage of times the two $keys:items$ match\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1594, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student10", "submitted_text": "User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match, as an integer value with a % sign at the end.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    User $inputs:inputs$ two $lists:lists$ of equal length. Program would compare each $key:item$ against second $list:list$'s corresponding $key:item$, and would $return:return$ the percentage of times the two $keys:items$ match, as an $integer:integer$ value with a % sign at the end.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1597, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student17", "submitted_text": "matches the numbers and letters of the two given strings and calculates the similarity, then give the answer as a percentage", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers and letters of the two given $strings:strings$ and calculates the similarity, then give the answer as a percentage\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1598, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student17", "submitted_text": "matches the numbers and letters of the two given strings and calculates the similarity, then multiply the answer by 100", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers and letters of the two given $strings:strings$ and calculates the similarity, then multiply the answer by 100\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1599, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student17", "submitted_text": "matches the numbers and letters of the two given strings and calculates the similarity, lastly turn the answer into a percent number", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers and letters of the two given $strings:strings$ and calculates the similarity, lastly $typecast:turn$ the answer into a percent number\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1600, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student17", "submitted_text": "matches the numbers and letters of the two given strings and calculates the similarity, lastly turn the answer into a percent number with the percent symbol", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers and letters of the two given $strings:strings$ and calculates the similarity, lastly $typecast:turn$ the answer into a percent number with the percent symbol\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1603, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student18", "submitted_text": "Compare the string in guess and answers by each index and calculate the percentage of the match between guess and answers. Then, multiply 100 to the value and add '%' at the end. ", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Compare the $string:string$ in guess and answers by each index and calculate the percentage of the match between guess and answers. Then, multiply 100 to the value and $insert:add$ '%' at the end. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1604, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student18", "submitted_text": "Compare the string in guess and answers by each index and calculate the percentage of the match between guess and answers. Then, multiply 100 to the value while rounding up and add '%' at the end. ", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Compare the $string:string$ in guess and answers by each index and calculate the percentage of the match between guess and answers. Then, multiply 100 to the value while rounding up and $insert:add$ '%' at the end. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1607, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student21", "submitted_text": "given two lists, divide the number of 'X' in the first list by the length of the list, multiply by 100. Subtract this number from 100. Return the String of this obtained number plus the percentage sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    given two $lists:lists$, divide the number of 'X' in the first $list:list$ by the length of the $list:list$, multiply by 100. Subtract this number from 100. $Return:Return$ the $String:String$ of this obtained number plus the percentage sign.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1610, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student25", "submitted_text": "This function compares how similar 2 lists are and returns the percent of the guess list that matches the answer list. The percentage is multiplied by 100 and \"%\" is added to the final result.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    This function compares how similar 2 $lists:lists$ are and $returns:returns$ the percent of the guess $list:list$ that matches the answer $list:list$. The percentage is multiplied by 100 and \"%\" is $inserted:added$ to the final result.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1611, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student25", "submitted_text": "This function compares how similar 2 lists are and returns the percent of the guess list that matches the answer list. The percentage is multiplied by 100, rounded, and \"%\" is added to the final result.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    This function compares how similar 2 $lists:lists$ are and $returns:returns$ the percent of the guess $list:list$ that matches the answer $list:list$. The percentage is multiplied by 100, rounded, and \"%\" is $inserted:added$ to the final result.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1614, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student26", "submitted_text": "Count how many characters in a range of numbers match those in another range of numbers and display the difference as a percentage", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Count how many $strings:characters$ in a range of numbers match those in another range of numbers and $return:display$ the difference as a percentage\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1615, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student26", "submitted_text": "Count how many characters in a range of numbers match those in another range of numbers and display the difference, multiply the difference by 100 and display followed by %", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Count how many $strings:characters$ in a range of numbers match those in another range of numbers and $return:display$ the difference, multiply the difference by 100 and $return:display$ followed by %\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1616, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student26", "submitted_text": "Count how many characters in a range of numbers match those in another range of numbers and display the difference. Multiply the difference by 100 and display followed by '%'", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Count how many $strings:characters$ in a range of numbers match those in another range of numbers and $return:display$ the difference. Multiply the difference by 100 and $return:display$ followed by '%'\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1619, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student30", "submitted_text": "Take in array guess. Create variable X equal to 0. Iterate through array A. When a character is present in Array A, add 1 to X. Create variable Y, equal to X divided by the size of the guess array. Return variable Z, equal to Y rounded to the nearest integer with '%' appended to it.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    $Take:Take$ in $list:array$ guess. Create $key:variable$ X equal to 0. Iterate through $list:array$ A. When a $string:character$ is present in $List:Array$ A, $insert:add$ 1 to X. Create $key:variable$ Y, equal to X divided by the size of the guess $list:array$. $Return:Return$ $key:variable$ Z, equal to Y rounded to the nearest $integer:integer$ with '%' $inserted:appended$ to it.\n    \"\"\"\n    ", "subset": "middle_success"}
{"__index_level_0__": 1622, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student41", "submitted_text": "Given two lists, compares each item in the second list to each item in the first list. For each item in the second list that does not match the first list, it subtracts from one, one divided by the total length of the list. Then it prints the proportion of correct responses multiplied by 100 and followed by a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Given two $lists:lists$, compares each $key:item$ in the second $list:list$ to each $key:item$ in the first $list:list$. For each $key:item$ in the second $list:list$ that does not match the first $list:list$, it subtracts from one, one divided by the total length of the $list:list$. Then it $returns:prints$ the proportion of correct responses multiplied by 100 and followed by a percent sign.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1626, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student51", "submitted_text": "check both lists for equality and return the percent of matching items in percent notation", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    check both $lists:lists$ for equality and $return:return$ the percent of matching $keys:items$ in percent notation\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1627, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student51", "submitted_text": "check both lists for equality and return the percent of matching items rounded tot he nearest whole number in percent notation", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    check both $lists:lists$ for equality and $return:return$ the percent of matching $keys:items$ rounded tot he nearest $integer:whole number$ in percent notation\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1651, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student14", "submitted_text": "multiply numbers in brackets by number outside of brackets. Return finished equation", "prompt": "def exp(lst, val):\n    \"\"\"\n    multiply numbers in $lists:brackets$ by number outside of $lists:brackets$. $Return:Return$ finished equation\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1670, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints \"ha\" for an input of 1. This function prints an additional \"haa\" for an input greater than 1 ", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ \"ha\" for an $input:input$ of 1. This function $returns:prints$ an additional \"haa\" for an $input:input$ greater than 1 \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1671, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints an 'h' and adds the corresponding amount of a's as the value provided. It then adds a space to the output. It subtracts 1 from the value and prints another h with less a's and repeats until the value of the number is 0", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ an 'h' and $inserts:adds$ the corresponding amount of a's as the $parameter:value provided$. It then $inserts:adds$ a space to the $return:output$. It subtracts 1 from the value and $returns:prints$ another h with less a's and repeats until the value of the number is 0\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1672, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints \"ha\" once", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ \"ha\" once\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1673, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints 'ha' for every input greater than zero. If the input is greater than 1 it prints an h with an increasing amount of a's for every value from 1 until the input until it reaches the value of the input. ", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ 'ha' for every $input:input$ greater than zero. If the $input:input$ is greater than 1 it $returns:prints$ an h with an increasing amount of a's for every value from 1 until the $input:input$ until it reaches the value of the $input:input$. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1674, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints ha for every input greater than zero.", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ ha for every $input:input$ greater than zero.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1675, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints \"ha\" for every input greater than zero.", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ \"ha\" for every $input:input$ greater than zero.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1676, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints \"ha\" for every value greater than zero.", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ \"ha\" for every value greater than zero.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1677, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints a string 'ha'", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ a $string:string$ 'ha'\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1678, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints ha", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ ha\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1679, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints a word", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ a $string:word$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1680, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints ha times the input value with spaces between", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ ha times the $input:input$ value with spaces between\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1681, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints ha ", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ ha \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1682, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints a word", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ a $string:word$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1683, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints \"ha\" times the value inputted ", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ \"ha\" times the value $inputted:inputted$ \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1684, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints \"ha\" the amount of times as the value inputted ", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ \"ha\" the amount of times as the value $inputted:inputted$ \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1685, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints \"ha\" for any input. This function prints an h with increasing amounts of a if the input is larger than 1. ", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ \"ha\" for any $input:input$. This function $returns:prints$ an h with increasing amounts of a if the $input:input$ is larger than 1. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1686, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints \"ha\" for a value of 1. This function prints \"haaaa haaa haa ha\" for a value of 4. This function prints \"haaa haa ha\" for a value of 3. ", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ \"ha\" for a value of 1. This function $returns:prints$ \"haaaa haaa haa ha\" for a value of 4. This function $returns:prints$ \"haaa haa ha\" for a value of 3. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1687, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints \"ha\" for a value of 1. This function uses size to determine the amount of times ha is printed and the length of a's that appear after the h. ", "prompt": "def laugh(size):\n    \"\"\"\n    This function $returns:prints$ \"ha\" for a value of 1. This function uses size to determine the amount of times ha is $returned:printed$ and the length of a's that appear after the h. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1688, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function uses size to determine the amount of times \"ha\" is printed and the length of a's that appear after the h. ", "prompt": "def laugh(size):\n    \"\"\"\n    This function uses size to determine the amount of times \"ha\" is $returned:printed$ and the length of a's that appear after the h. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1689, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function uses laugh to determine the amount of times \"ha\" is printed and the length of a's that appear after the h. ", "prompt": "def laugh(size):\n    \"\"\"\n    This function uses laugh to determine the amount of times \"ha\" is $returned:printed$ and the length of a's that appear after the h. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1690, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function uses laugh to determine the amount of times \"ha\" is printed and the length of a's that appear after the h. ", "prompt": "def laugh(size):\n    \"\"\"\n    This function uses laugh to determine the amount of times \"ha\" is $returned:printed$ and the length of a's that appear after the h. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1691, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function uses laugh to determine the amount of times ha is printed and the length of a's that appear after the h. ", "prompt": "def laugh(size):\n    \"\"\"\n    This function uses laugh to determine the amount of times ha is $returned:printed$ and the length of a's that appear after the h. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1692, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function uses the size of laugh to determine the amount of times ha is printed ", "prompt": "def laugh(size):\n    \"\"\"\n    This function uses the size of laugh to determine the amount of times ha is $returned:printed$ \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1693, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function uses the size of laugh to determine the amount of times ha is printed. This function creates a loop in which it prints an h with a's the size of laugh then subtracts 1 from the size and prints an h with less a's", "prompt": "def laugh(size):\n    \"\"\"\n    This function uses the size of laugh to determine the amount of times ha is $returned:printed$. This function creates a loop in which it $returns:prints$ an h with a's the size of laugh then subtracts 1 from the size and $returns:prints$ an h with less a's\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1696, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student5", "submitted_text": "the function laugh will take the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of 'ha's left to produce. \n\n", "prompt": "def laugh(size):\n    \"\"\"\n    the function laugh will $take:take$ the $input:input$ of an $integer:int$ and should $return:output$ a $string:string$ with \"ha\" as many times as the $input:input$ $integer:int$. However each respective \"ha\" has as many a's as the current number of 'ha's left to $return:produce$. \n\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1697, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student5", "submitted_text": "the function laugh will take the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of 'ha's left to produce. and add a space in between the ha's\n\n", "prompt": "def laugh(size):\n    \"\"\"\n    the function laugh will $take:take$ the $input:input$ of an $integer:int$ and should $return:output$ a $string:string$ with \"ha\" as many times as the $input:input$ $integer:int$. However each respective \"ha\" has as many a's as the current number of 'ha's left to $return:produce$. and $insert:add$ a space in between the ha's\n\n\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1700, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "If n is the input value, the function returns \"h\" followed by n occurrences of \"a\", then \" h\" followed by n-1 occurrences of \"a\", until the last two characters in the string are \"ha\".", "prompt": "def laugh(size):\n    \"\"\"\n    If n is the $input:input$ value, the function $returns:returns$ \"h\" followed by n occurrences of \"a\", then \" h\" followed by n-1 occurrences of \"a\", until the last two $strings:characters$ in the $string:string$ are \"ha\".\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1701, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "If n is the input value, the function returns \"h\" followed by n occurrences of \"a\", then \" h\" followed by n-1 occurrences of \"a\", and repeats this while the last two characters in the string are not \"ha\".", "prompt": "def laugh(size):\n    \"\"\"\n    If n is the $input:input$ value, the function $returns:returns$ \"h\" followed by n occurrences of \"a\", then \" h\" followed by n-1 occurrences of \"a\", and repeats this while the last two $strings:characters$ in the $string:string$ are not \"ha\".\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1702, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "If n is the input value, the function returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two characters in the string are not \"ha\".", "prompt": "def laugh(size):\n    \"\"\"\n    If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two $strings:characters$ in the $string:string$ are not \"ha\".\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1703, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "If n is the input value, the function returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two characters in the string are not \"ha\".", "prompt": "def laugh(size):\n    \"\"\"\n    If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two $strings:characters$ in the $string:string$ are not \"ha\".\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1704, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "If n is the input value, the function returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two characters in the string are not \"ha\". Returns \"\" if input value is 0. ", "prompt": "def laugh(size):\n    \"\"\"\n    If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two $strings:characters$ in the $string:string$ are not \"ha\". $Returns:Returns$ \"\" if $input:input$ value is 0. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1705, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "If n is the input value, the function returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two characters in the string are not \"ha\". ", "prompt": "def laugh(size):\n    \"\"\"\n    If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two $strings:characters$ in the $string:string$ are not \"ha\". \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1706, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc.", "prompt": "def laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1707, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "While the last two characters in the string are not \"ha\", the function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. ", "prompt": "def laugh(size):\n    \"\"\"\n    While the last two $strings:characters$ in the $string:string$ are not \"ha\", the function repeats the following process: If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1708, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Until the last two characters in the string are \"ha\" ", "prompt": "def laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Until the last two $strings:characters$ in the $string:string$ are \"ha\" \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1709, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. ", "prompt": "def laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1710, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc., and stops when \"ha\" is the last part of the string.", "prompt": "def laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc., and stops when \"ha\" is the last $key:part$ of the $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1711, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Doesn't add the last \" h\"", "prompt": "def laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Doesn't $insert:add$ the last \" h\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1712, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Removes the last \" h\"", "prompt": "def laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. $Skips:Removes$ the last \" h\"\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1713, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc., but with \" h\" removed at the end of the final string.", "prompt": "def laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc., but with \" h\" $skipped:removed$ at the end of the final $string:string$.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1714, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", followed by decreasing natural number of n occurrences of \"a\" ", "prompt": "def laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\", followed by decreasing natural number of n occurrences of \"a\" \n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1715, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", plus \" h\" plus n-1 occurrences of \"a\", until there are 0 occurrences of \"a\" left", "prompt": "def laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the $input:input$ value, the function $returns:returns$ \"h\" plus n occurrences of \"a\", plus \" h\" plus n-1 occurrences of \"a\", until there are 0 occurrences of \"a\" left\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1720, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student13", "submitted_text": "Based on the inputted number, will return a laugh size where the number of \"a\"'s starts with the initial size, then decreases by one for each additional laugh.", "prompt": "def laugh(size):\n    \"\"\"\n    Based on the $inputted:inputted$ number, will $return:return$ a laugh size where the number of \"a\"'s starts with the initial size, then decreases by one for each additional laugh.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1721, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student13", "submitted_text": "Based on the inputted number, will return a laugh size repeating the word \"ha\" that number of times. Based on the number inputted, the function will produce the set of characters where the number of \"a\"'s following the \"h\" will decrease by one for each \"ha\".", "prompt": "def laugh(size):\n    \"\"\"\n    Based on the $inputted:inputted$ number, will $return:return$ a laugh size repeating the $string:word$ \"ha\" that number of times. Based on the number $inputted:inputted$, the function will $return:produce$ the $list:set$ of $strings:characters$ where the number of \"a\"'s following the \"h\" will decrease by one for each \"ha\".\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1726, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student22", "submitted_text": "take in an integer and write the string 'h'+'a', but add as many 'a' as the integer amount", "prompt": "def laugh(size):\n    \"\"\"\n    $take:take$ in an $integer:integer$ and write the $string:string$ 'h'+'a', but $insert:add$ as many 'a' as the $integer:integer$ amount\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1727, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student22", "submitted_text": "take in an integer and write the string 'h'+'a' * integer", "prompt": "def laugh(size):\n    \"\"\"\n    $take:take$ in an $integer:integer$ and write the $string:string$ 'h'+'a' * $integer:integer$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1728, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student22", "submitted_text": "take in an integer and write 'ha' as many times as the integer", "prompt": "def laugh(size):\n    \"\"\"\n    $take:take$ in an $integer:integer$ and write 'ha' as many times as the $integer:integer$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1729, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student22", "submitted_text": "take in an integer and write 'ha ' as many times as the integer", "prompt": "def laugh(size):\n    \"\"\"\n    $take:take$ in an $integer:integer$ and write 'ha ' as many times as the $integer:integer$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1730, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student22", "submitted_text": "take in an integer and add that many 'a' to a string", "prompt": "def laugh(size):\n    \"\"\"\n    $take:take$ in an $integer:integer$ and $insert:add$ that many 'a' to a $string:string$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1733, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student37", "submitted_text": "Write a function which takes an integer size as an input, creates an empty string called laugh, and uses a for loop to append an h followed by size a's and then a space, and then an h followed by size-1 a's and then a space, etc. until it appends an h followed by one a all into laugh", "prompt": "def laugh(size):\n    \"\"\"\n    Write a function which $takes:takes$ an $integer:integer$ size as an $input:input$, creates an empty $string:string$ called laugh, and uses a for loop to $insert:append$ an h followed by size a's and then a space, and then an h followed by size-1 a's and then a space, etc. until it $inserts:appends$ an h followed by one a all into laugh\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1734, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student37", "submitted_text": "Write a function which takes an integer size as an input, creates an empty string called laugh, and then executes a for loop with i in range size where i is decreased by one after each iteration, and the contents of the for loop is that an h followed by i number of a's and a space is appended to laugh, and then laugh is returned after the loop", "prompt": "def laugh(size):\n    \"\"\"\n    Write a function which $takes:takes$ an $integer:integer$ size as an $input:input$, creates an empty $string:string$ called laugh, and then $loops through:executes a for loop with$ i in range size where i is decreased by one after each iteration, and the contents of the for loop is that an h followed by i number of a's and a space is $inserted:appended$ to laugh, and then laugh is $returned:returned$ after the loop\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1735, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student37", "submitted_text": "Write a function which takes an integer size as an input, creates an empty string called laugh, and then executes a for loop with i in range size where i is decreased by one after each iteration and i starts at size, and the contents of the for loop is that an h followed by i number of a's and a space is appended to laugh, and then laugh is returned after the loop", "prompt": "def laugh(size):\n    \"\"\"\n    Write a function which $takes:takes$ an $integer:integer$ size as an $input:input$, creates an empty $string:string$ called laugh, and then $loops through:executes a for loop with$ i in range size where i is decreased by one after each iteration and i starts at size, and the contents of the for loop is that an h followed by i number of a's and a space is $inserted:appended$ to laugh, and then laugh is $returned:returned$ after the loop\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1736, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student37", "submitted_text": "Write a function which takes an integer size as an input, creates an empty string called laugh, and then executes a for loop with i in range size-2 where i is decreased by one after each iteration and i starts at size, and the contents of the for loop is that an h followed by i number of a's and a space is appended to laugh, and then after the loop, append 'ha' and laugh is returned", "prompt": "def laugh(size):\n    \"\"\"\n    Write a function which $takes:takes$ an $integer:integer$ size as an $input:input$, creates an empty $string:string$ called laugh, and then $loops through:executes a for loop with$ i in range size-2 where i is decreased by one after each iteration and i starts at size, and the contents of the for loop is that an h followed by i number of a's and a space is $inserted:appended$ to laugh, and then after the loop, $insert:append$ 'ha' and laugh is $returned:returned$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1737, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student37", "submitted_text": "Write a function which takes an integer size as an input, creates an empty string called laugh, and the uses a for loop to append an h followed by i a's for each 0<i<=size, append a space before each h except the first h in the string", "prompt": "def laugh(size):\n    \"\"\"\n    Write a function which $takes:takes$ an $integer:integer$ size as an $input:input$, creates an empty $string:string$ called laugh, and the uses a for loop to $insert:append$ an h followed by i a's for each 0<i<=size, $insert:append$ a space before each h except the first h in the $string:string$\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1740, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student61", "submitted_text": "function adds 'a' to every 'h' based on input and will lower amount of 'a' until it reaches only 1 'a' after the 'h'", "prompt": "def laugh(size):\n    \"\"\"\n    function $inserts:adds$ 'a' to every 'h' based on $input:input$ and will lower amount of 'a' until it reaches only 1 'a' after the 'h'\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1743, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student72", "submitted_text": "Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after until count of a = 1.", "prompt": "def laugh(size):\n    \"\"\"\n    $Return:Produce$ a $string:string$, with each $string:word$ starting with h and then however many a's the $input:input$ says. Decrease the count of a's by one following the h for each $string:word$ after until count of a = 1.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1744, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student72", "submitted_text": "Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after. Stop when a = 1.", "prompt": "def laugh(size):\n    \"\"\"\n    $Return:Produce$ a $string:string$, with each $string:word$ starting with h and then however many a's the $input:input$ says. Decrease the count of a's by one following the h for each $string:word$ after. Stop when a = 1.\n    \"\"\"\n    ", "subset": "middle_failure"}
{"__index_level_0__": 1745, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student72", "submitted_text": "Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after. Stop when a = 2.", "prompt": "def laugh(size):\n    \"\"\"\n    $Return:Produce$ a $string:string$, with each $string:word$ starting with h and then however many a's the $input:input$ says. Decrease the count of a's by one following the h for each $string:word$ after. Stop when a = 2.\n    \"\"\"\n    ", "subset": "middle_failure"}
