{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 5,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 10, in convert\n    new_lst.append(alphabet[i])\nNameError: name 'alphabet' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    new_lst.append(alphabet[i])\nNameError: name 'alphabet' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    new_lst.append(alphabet[i])\nNameError: name 'alphabet' is not defined\n",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 3,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 8\n    if i >= 0\n             ^\nSyntaxError: expected ':'\n\n  File \"/tmp/file.py\", line 8\n    if i >= 0\n             ^\nSyntaxError: expected ':'\n\n  File \"/tmp/file.py\", line 8\n    if i >= 0\n             ^\nSyntaxError: expected ':'\n",
            "color": "blue",
            "id": 1
        },
        {
            "stderr_id": 4,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 9\n    print(convert([0, 1, 2, 3]))\nIndentationError: expected an indented block after 'for' statement on line 8\n\n  File \"/tmp/file.py\", line 9\n    print(convert([0, -1, 1, -1, 2]))\nIndentationError: expected an indented block after 'for' statement on line 8\n\n  File \"/tmp/file.py\", line 9\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\nIndentationError: expected an indented block after 'for' statement on line 8\n",
            "color": "blue",
            "id": 2
        },
        {
            "stderr_id": 0,
            "stdout_id": 10,
            "hover": "stdout:\nNone\n\nNone\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 3
        },
        {
            "stderr_id": 0,
            "stdout_id": 19,
            "hover": "stdout:\n['abcd']\n\n['a', 'b', 'c']\n\n['bbb', 'zzz', 'abc']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 4
        },
        {
            "stderr_id": 0,
            "stdout_id": 16,
            "hover": "stdout:\n['ABCD']\n\n['A', 'B', 'C']\n\n['BBB', 'ZZZ', 'ABC']\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 5
        },
        {
            "stderr_id": 0,
            "stdout_id": 13,
            "hover": "stdout:\n['A', 'B', 'C', 'D']\n\n['A', '@', 'B', '@', 'C']\n\n['B', 'B', 'B', '@', 'Z', 'Z', 'Z', '@', 'A', 'B', 'C']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 6
        },
        {
            "stderr_id": 0,
            "stdout_id": 14,
            "hover": "stdout:\n['A', 'B', 'C', 'D']\n\n['A', 'B', 'C']\n\n['B', 'B', 'B', 'Z', 'Z', 'Z', 'A', 'B', 'C']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 7
        },
        {
            "stderr_id": 0,
            "stdout_id": 5,
            "hover": "stdout:\nABCD\n\nA,B,C\n\nBBB,ZZZ,ABC\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 8
        },
        {
            "stderr_id": 0,
            "stdout_id": 9,
            "hover": "stdout:\nABCD\n\nABC\n\nBZABC\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 9
        },
        {
            "stderr_id": 0,
            "stdout_id": 8,
            "hover": "stdout:\nABCD\n\nABC\n\nBBBZZZABC\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 10
        },
        {
            "stderr_id": 0,
            "stdout_id": 7,
            "hover": "stdout:\nABCD\n\nABC\n\nB,B,B,Z,Z,Z,A,B,C\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 11
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\nA,B,C,D\n\nA,,,B,,,C\n\nB,B,B,,,Z,Z,Z,,,A,B,C\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 12
        },
        {
            "stderr_id": 0,
            "stdout_id": 17,
            "hover": "stdout:\n['ABCD']\n\n['A,B,C']\n\n['BBB,ZZZ,ABC']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 13
        },
        {
            "stderr_id": 7,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 6, in convert\n    lst = [''.join(g) for k, g in groupby(lst)]\nNameError: name 'groupby' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 6, in convert\n    lst = [''.join(g) for k, g in groupby(lst)]\nNameError: name 'groupby' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 6, in convert\n    lst = [''.join(g) for k, g in groupby(lst)]\nNameError: name 'groupby' is not defined\n",
            "color": "blue",
            "id": 14
        },
        {
            "stderr_id": 0,
            "stdout_id": 15,
            "hover": "stdout:\n['A', 'B', 'C']\n\n[',', 'A', ',', 'B']\n\n['A', 'A', 'A', ',', 'Y', 'Y', 'Y', ',', 'A', 'B']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 15
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\nABC\n\nAAAB\n\nAAAAYYYAAB\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 16
        },
        {
            "stderr_id": 0,
            "stdout_id": 18,
            "hover": "stdout:\n['BCD']\n\n['@B@C']\n\n['BBB@ZZZ@BC']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 17
        },
        {
            "stderr_id": 0,
            "stdout_id": 6,
            "hover": "stdout:\nABCD\n\nA@B@C\n\nBBB@ZZZ@ABC\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 18
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\nAABC\n\nA,A,B\n\nAAA,YYY,AAB\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 19
        },
        {
            "stderr_id": 0,
            "stdout_id": 12,
            "hover": "stdout:\n['A', 'B', 'C', 'D']\n\n['A', '-', 'B', '-', 'C']\n\n['B', 'B', 'B', '-', 'Z', 'Z', 'Z', '-', 'A', 'B', 'C']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 20
        },
        {
            "stderr_id": 1,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 17\n    if result[i] ==\n                   ^\nSyntaxError: invalid syntax\n\n  File \"/tmp/file.py\", line 17\n    if result[i] ==\n                   ^\nSyntaxError: invalid syntax\n\n  File \"/tmp/file.py\", line 17\n    if result[i] ==\n                   ^\nSyntaxError: invalid syntax\n",
            "color": "blue",
            "id": 21
        },
        {
            "stderr_id": 2,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 18\n    result.\n           ^\nSyntaxError: invalid syntax\n\n  File \"/tmp/file.py\", line 18\n    result.\n           ^\nSyntaxError: invalid syntax\n\n  File \"/tmp/file.py\", line 18\n    result.\n           ^\nSyntaxError: invalid syntax\n",
            "color": "blue",
            "id": 22
        },
        {
            "stderr_id": 0,
            "stdout_id": 11,
            "hover": "stdout:\n['A', 'B', 'C', 'D']\n\n['A', '', 'B', '', 'C']\n\n['B', 'B', 'B', '', 'Z', 'Z', 'Z', '', 'A', 'B', 'C']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 23
        },
        {
            "stderr_id": 6,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 10, in convert\n    result[-1] += chr(i + 65)\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    result[-1] += chr(i + 65)\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    result[-1] += chr(i + 65)\nIndexError: list index out of range\n",
            "color": "grey",
            "id": 24
        },
        {
            "stderr_id": 0,
            "stdout_id": 4,
            "hover": "stdout:\nABCD\n\nA B C\n\nBBB ZZZ ABC\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 25
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -5,32 +5,57 @@\n a list of-numbers-and-returns-a+numbers,+have+another list with the+letters+in+the+alphabet,+create+an+answer+list,+iterate+through+the+input+list,+append+the+letter+with+the corresponding-indexes+index of the-alphabet,-where-negative-numbers-as-indexes-means-to-take+list+with+the+letters in the-next-index-as+alphabet+to+the+answer+list,+create a new string+when+encounter+a+negative+number,+and+return+the+answer+list \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers and returns a list with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new string\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i < 0:\n            new_lst.append(i)\n        else:\n            new_lst.append(alphabet[i])\n    return new_lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers, have another list with the letters in the alphabet, create an answer list, iterate through the input list, append the letter with the corresponding index of the list with the letters in the alphabet to the answer list, create a new string when encounter a negative number, and return the answer list\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    for i in lst:\n        if i >= 0",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\nedge: (1->2)\ndiff:\n--- \n+++ \n@@ -18,13 +18,20 @@\n create an answer-list,-iterate+list.+When+iterating through the input list,-append+create+a+temp+string+variable+and+assign the letter with@@ -42,20 +49,29 @@\n alphabet to the+temp+variable,+append+the+temp+variable+into+the answer list,-create+and+start a new+temp string when encounter a negative-number,-and-return+number.+Return the answer-list+list. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers, have another list with the letters in the alphabet, create an answer list, iterate through the input list, append the letter with the corresponding index of the list with the letters in the alphabet to the answer list, create a new string when encounter a negative number, and return the answer list\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    for i in lst:\n        if i >= 0\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers, have another list with the letters in the alphabet, create an answer list. When iterating through the input list, create a temp string variable and assign the letter with the corresponding index of the list with the letters in the alphabet to the temp variable, append the temp variable into the answer list, and start a new temp string when encounter a negative number. Return the answer list.\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    temp = ''\n    for num in lst:\n",
                "id": 2,
                "key": 0
            }
        ],
        [
            {
                "diff": 2,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\nedge: (2->2)\ndiff:\n--- \n+++ \n@@ -5,8 +5,8 @@\n a list of-numbers,-have+numbers.+Have another list with@@ -15,6 +15,7 @@\n in the alphabet,+and create an answer@@ -29,9 +30,10 @@\n a temp string-variable-and-assign+variable,+have+it+add the letter with@@ -50,26 +52,25 @@\n to the temp-variable,-append+variable.+Append the temp variable into the answer-list,-and+list.+If+encounter+a+negative+number, start a new temp-string-when-encounter-a-negative-number.+string. Return the answer\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers, have another list with the letters in the alphabet, create an answer list. When iterating through the input list, create a temp string variable and assign the letter with the corresponding index of the list with the letters in the alphabet to the temp variable, append the temp variable into the answer list, and start a new temp string when encounter a negative number. Return the answer list.\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    temp = ''\n    for num in lst:\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable, have it add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. If encounter a negative number,  start a new temp string. Return the answer list.\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    temp = ''\n    for i in lst:\n",
                "id": 2,
                "key": 0
            },
            {
                "diff": 3,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\nedge: (2->3)\ndiff:\n--- \n+++ \n@@ -30,9 +30,13 @@\n a temp string-variable,-have-it+variable.+While+the+number+is+not+negative, add the letter@@ -61,16 +65,6 @@\n the answer list.-If-encounter-a-negative-number,-start-a-new-temp-string. Return the answer\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable, have it add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. If encounter a negative number,  start a new temp string. Return the answer list.\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    temp = ''\n    for i in lst:\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While the number is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.\n    \"\"\"\n        answer = []\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for num in lst:\n        temp = ''\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 4,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\nedge: (3->3)\ndiff:\n--- \n+++ \n@@ -33,6 +33,7 @@\n variable. While the+iterating number is not\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While the number is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.\n    \"\"\"\n        answer = []\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for num in lst:\n        temp = ''\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While the iterating number is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    for num in lst:\n        temp = ''\n",
                "id": 3,
                "key": 0
            },
            {
                "diff": 5,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\nedge: (3->3)\ndiff:\n--- \n+++ \n@@ -32,9 +32,7 @@\n string variable. While-the-iterating-number+num is not negative,\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While the iterating number is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    for num in lst:\n        temp = ''\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While num is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.\n    \"\"\"\n        answer = []\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for num in lst:\n        temp = ''\n",
                "id": 3,
                "key": 1
            },
            {
                "diff": 6,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\nedge: (3->4)\ndiff:\n--- \n+++ \n@@ -6,36 +6,40 @@\n list of numbers.-Have-another+Create+a+ABC list with the letters in the-alphabet,+alphabet and create an answer-list.-When-iterating+string.+Iterate through the input list,-create-a-temp-string-variable.-While-num+if+there is-not-negative,+\"-1\"+then+add+'+'+to+the+answer+string,+or+otherwise, add the letter@@ -45,27 +49,17 @@\n index of the-list-with-the-letters-in-the-alphabet-to-the-temp-variable.-Append-the-temp-variable-into+answer+string.+Split the answer-list.-Return+string+at+'+'.+return the answer-list.+string. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While num is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.\n    \"\"\"\n        answer = []\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for num in lst:\n        temp = ''\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Create a ABC list with the letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.\n    \"\"\"\n        abc = [chr(i) for i in range(97, 123)]\n    answer = ''\n    for i in lst:\n        if i == -1:\n            answer += ' '\n        else:\n            answer += abc[i]\n    return answer.split(' ')\n\n",
                "id": 4,
                "key": 0
            },
            {
                "diff": 23,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (3->18)\ndiff:\n--- \n+++ \n@@ -29,7 +29,11 @@\n negative numbers as+commas+and points of-seperation.+separation+between+strings. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as points of seperation.\n    \"\"\"\n        #print(lst)\n    lst = [x+1 for x in lst]\n    #print(lst)\n    lst = [x-1 for x in lst]\n    #print(lst)\n    lst = [chr(x+65) for x in lst]\n    #print(lst)\n    lst = ''.join(lst)\n    #print(lst)\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as commas and points of separation between strings.\n    \"\"\"\n        return ''.join([chr(i+65) for i in lst])\n",
                "id": 18,
                "key": 0
            }
        ],
        [
            {
                "diff": 7,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\nedge: (4->5)\ndiff:\n--- \n+++ \n@@ -12,6 +12,7 @@\n list with the+capital letters in the\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Create a ABC list with the letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.\n    \"\"\"\n        abc = [chr(i) for i in range(97, 123)]\n    answer = ''\n    for i in lst:\n        if i == -1:\n            answer += ' '\n        else:\n            answer += abc[i]\n    return answer.split(' ')\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.\n    \"\"\"\n        abc = [chr(i) for i in range(65, 91)]\n    answer = ''\n    for i in lst:\n        if i == -1:\n            answer += ' '\n        else:\n            answer += abc[i]\n    return answer.split(' ')\n\n",
                "id": 5,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 8,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (6->7)\ndiff:\n--- \n+++ \n@@ -15,5 +15,12 @@\n at 0 as-A+A.+ignoring+any+negative+numbers+in+the+list. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A\n    \"\"\"\n        return [chr(x+65) for x in lst]\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. ignoring any negative numbers in the list.\n    \"\"\"\n        return [chr(i+65) for i in lst if i >= 0]\n\nprint(convert([-1,1,1,3,2,1,2,3,1]))\n",
                "id": 7,
                "key": 0
            },
            {
                "diff": 22,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (6->17)\ndiff:\n--- \n+++ \n@@ -16,4 +16,20 @@\n 0 as A.+grouping+the+output+as+a+single+string,+then+use+the+negative+numbers+as+points+of+seperation. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A.\n    \"\"\"\n        return [chr(i+65) for i in lst]\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as points of seperation.\n    \"\"\"\n        lst = [i for i in lst if i != 0]\n    lst = [chr(i + 65) for i in lst]\n    lst = \"\".join(lst)\n    lst = lst.split(\"-\")\n    lst = [i for i in lst if i != \"\"]\n    return lst\n",
                "id": 17,
                "key": 0
            }
        ],
        [
            {
                "diff": 9,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (7->8)\ndiff:\n--- \n+++ \n@@ -15,12 +15,19 @@\n at 0 as-A.-ignoring-any+A,+turning+the negative numbers-in+into+commas,+and+then+turning the-list.+output+into+one+string. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. ignoring any negative numbers in the list.\n    \"\"\"\n        return [chr(i+65) for i in lst if i >= 0]\n\nprint(convert([-1,1,1,3,2,1,2,3,1]))\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then turning the output into one string.\n    \"\"\"\n        return ''.join(chr(ord('A') + abs(x)) if x >= 0 else ',' for x in lst)\n",
                "id": 8,
                "key": 0
            },
            {
                "diff": 13,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (7->11)\ndiff:\n--- \n+++ \n@@ -23,4 +23,33 @@\n in the list.+Then+take+the+list+of+converted+letters,+removing+any+commas+between+letters+in+the+last+when+the+letters+are+in+alphabetical+order,+or+when+they+are+the+same+letters. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.  \n    \"\"\"\n        return [chr(i+65) for i in lst if i>=0]\n\nprint(convert([-1,1,2,3,4,5]))\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Then take the list of converted letters, removing any commas between letters in the last when the letters are in alphabetical order, or when they are the same letters.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i >= 0:\n            new_lst.append(chr(i + 65))\n    if new_lst == sorted(new_lst) or len(set(new_lst)) == 1:\n        return ''.join(new_lst)\n    else:\n        return ','.join(new_lst)\n\nprint(con",
                "id": 11,
                "key": 0
            },
            {
                "diff": 15,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (7->7)\ndiff:\n\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.\n    \"\"\"\n        return [chr(i + 65) for i in lst if i >= 0]\n\nprint(convert([-1, -2, -3, -4, 1, 2, 3, 4]))\nprint(convert([25, 1, 27, 30, 2, 5, 29, 28]))\nprint(convert([-1, -2, -3, -4, -5, -6, -7, -8\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.\n    \"\"\"\n        return [chr(i+65) for i in lst if i>=0]\n\nprint(convert([-1,1,2,3,4,5]))\n",
                "id": 7,
                "key": 0
            },
            {
                "diff": 16,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (7->10)\ndiff:\n--- \n+++ \n@@ -23,4 +23,12 @@\n in the list.+Removing+all+commas+in+the+list+of+outputs \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.\n    \"\"\"\n        return [chr(i+65) for i in lst if i>=0]\n\nprint(convert([-1,1,2,3,4,5]))\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing all commas in the list of outputs\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i >= 0:\n            new_lst.append(chr(i+65))\n    return ''.join(new_lst)\n",
                "id": 10,
                "key": 0
            }
        ],
        [
            {
                "diff": 10,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (8->9)\ndiff:\n--- \n+++ \n@@ -15,19 +15,28 @@\n at 0 as-A,-turning-the+A+ignoring+any negative numbers-into-commas,-and-then-turning+in the-output-into-one-string.+list.+Removing+the+commas+in+the+answer+when+the+letters+are+the+same+or+in+alphabetical+order. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then turning the output into one string.\n    \"\"\"\n        return ''.join(chr(ord('A') + abs(x)) if x >= 0 else ',' for x in lst)\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing the commas in the answer when the letters are the same or in alphabetical order.  \n    \"\"\"\n        lst = [x for x in lst if x >= 0]\n    lst = [chr(x+65) for x in lst]\n    lst = [x for i, x in enumerate(lst) if i == 0 or x != lst[i-1]]\n    return ''.join(lst)\n\nprint(convert([-1, -1, -1, -1, -1, -",
                "id": 9,
                "key": 0
            },
            {
                "diff": 15,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (8->8)\ndiff:\n\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into commas.\n    \"\"\"\n        return ''.join(map(lambda x: chr(x+65) if x >= 0 else ',', lst))\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into commas.\n    \"\"\"\n        return ''.join([chr(x + 65) if x >= 0 else ',' for x in lst])\n",
                "id": 8,
                "key": 0
            },
            {
                "diff": 27,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (8->20)\ndiff:\n--- \n+++ \n@@ -16,9 +16,12 @@\n 0 as A,-turning-negative-numbers-into-commas.+using+the+-1+points+to+separate+the+string. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into commas.\n    \"\"\"\n        return ''.join([chr(x + 65) if x >= 0 else ',' for x in lst])\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, using the -1 points to separate the string.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i == -1:\n            new_lst.append('-')\n        else:\n            new_lst.append(chr(i+65))\n    return new_lst\n",
                "id": 20,
                "key": 0
            }
        ],
        [
            {
                "diff": 11,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (9->10)\ndiff:\n--- \n+++ \n@@ -28,7 +28,7 @@\n commas in the-answer+output when the letters\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing the commas in the answer when the letters are the same or in alphabetical order.  \n    \"\"\"\n        lst = [x for x in lst if x >= 0]\n    lst = [chr(x+65) for x in lst]\n    lst = [x for i, x in enumerate(lst) if i == 0 or x != lst[i-1]]\n    return ''.join(lst)\n\nprint(convert([-1, -1, -1, -1, -1, -\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing the commas in the output when the letters are the same or in alphabetical order.  \n    \"\"\"\n        result = \"\"\n    for i in lst:\n        if i >= 0:\n            result += chr(i + 65)\n    return result\n\nprint(convert([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1",
                "id": 10,
                "key": 0
            }
        ],
        [
            {
                "diff": 12,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (10->7)\ndiff:\n--- \n+++ \n@@ -23,20 +23,4 @@\n in the list.-Removing-the-commas-in-the-output-when-the-letters-are-the-same-or-in-alphabetical-order. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing the commas in the output when the letters are the same or in alphabetical order.  \n    \"\"\"\n        result = \"\"\n    for i in lst:\n        if i >= 0:\n            result += chr(i + 65)\n    return result\n\nprint(convert([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.  \n    \"\"\"\n        return [chr(i+65) for i in lst if i>=0]\n\nprint(convert([-1,1,2,3,4,5]))",
                "id": 7,
                "key": 0
            },
            {
                "diff": 17,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (10->12)\ndiff:\n--- \n+++ \n@@ -16,19 +16,10 @@\n 0 as A-ignoring-any+turning+all negative numbers-in-the-list.-Removing-all-commas-in-the-list-of-outputs+into+commas. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing all commas in the list of outputs\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i >= 0:\n            new_lst.append(chr(i+65))\n    return ''.join(new_lst)\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A turning all negative numbers into commas.\n    \"\"\"\n        return ','.join(map(lambda x: chr(x + 65) if x >= 0 else ',', lst))\n",
                "id": 12,
                "key": 0
            },
            {
                "diff": 33,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (10->23)\ndiff:\n--- \n+++ \n@@ -21,10 +21,14 @@\n numbers into \"\",+and grouping the output as one-string.+string+in+a+list. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\", grouping the output as one string.\n    \"\"\"\n        return \"\".join([\"\" if n < 0 else chr(n + 65) for n in lst])\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\", and grouping the output as one string in a list.\n    \"\"\"\n        output = []\n    for i in lst:\n        if i < 0:\n            output.append(\"\")\n        else:\n            output.append(chr(i + 65))\n    return output\n",
                "id": 23,
                "key": 0
            }
        ],
        [
            {
                "diff": 14,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (11->7)\ndiff:\n--- \n+++ \n@@ -23,33 +23,4 @@\n in the list.-Then-take-the-list-of-converted-letters,-removing-any-commas-between-letters-in-the-last-when-the-letters-are-in-alphabetical-order,-or-when-they-are-the-same-letters. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Then take the list of converted letters, removing any commas between letters in the last when the letters are in alphabetical order, or when they are the same letters.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i >= 0:\n            new_lst.append(chr(i + 65))\n    if new_lst == sorted(new_lst) or len(set(new_lst)) == 1:\n        return ''.join(new_lst)\n    else:\n        return ','.join(new_lst)\n\nprint(con\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.\n    \"\"\"\n        return [chr(i + 65) for i in lst if i >= 0]\n\nprint(convert([-1, -2, -3, -4, 1, 2, 3, 4]))\nprint(convert([25, 1, 27, 30, 2, 5, 29, 28]))\nprint(convert([-1, -2, -3, -4, -5, -6, -7, -8",
                "id": 7,
                "key": 0
            }
        ],
        [
            {
                "diff": 18,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (12->13)\ndiff:\n--- \n+++ \n@@ -15,11 +15,22 @@\n at 0 as-A+A, turning-all+the negative numbers into-commas.+commas,+and+then+turning+the+output+into+one+string+in+a+list. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A turning all negative numbers into commas.\n    \"\"\"\n        return ','.join(map(lambda x: chr(x + 65) if x >= 0 else ',', lst))\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then turning the output into one string in a list.\n    \"\"\"\n        return [''.join([chr(i + 65) if i >= 0 else ',' for i in lst])]\n",
                "id": 13,
                "key": 0
            }
        ],
        [
            {
                "diff": 19,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (13->14)\ndiff:\n--- \n+++ \n@@ -24,9 +24,15 @@\n commas, and then-turning+group the-output+letters+in+alphabetical+order+or+the+same into one string\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then turning the output into one string in a list.\n    \"\"\"\n        return [''.join([chr(i + 65) if i >= 0 else ',' for i in lst])]\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then group the letters in alphabetical order or the same into one string in a list.\n    \"\"\"\n        lst = [chr(x+65) if x >= 0 else ',' for x in lst]\n    lst = [''.join(g) for k, g in groupby(lst)]\n    return lst\n",
                "id": 14,
                "key": 0
            }
        ],
        [
            {
                "diff": 20,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (14->15)\ndiff:\n--- \n+++ \n@@ -21,22 +21,8 @@\n negative numbers into-commas,-and-then-group+commas+separating the-letters-in-alphabetical-order-or-the-same-into-one-string-in-a-list.+letters. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then group the letters in alphabetical order or the same into one string in a list.\n    \"\"\"\n        lst = [chr(x+65) if x >= 0 else ',' for x in lst]\n    lst = [''.join(g) for k, g in groupby(lst)]\n    return lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas separating the letters. \n    \"\"\"\n        res = []\n    for i in lst:\n        if i > 0:\n            res.append(chr(i + 64))\n        elif i < 0:\n            res.append(\",\")\n    return res\n",
                "id": 15,
                "key": 0
            }
        ],
        [
            {
                "diff": 15,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (15->16)\ndiff:\n\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas separating the letters. \n    \"\"\"\n        res = []\n    for i in lst:\n        if i > 0:\n            res.append(chr(i + 64))\n        elif i < 0:\n            res.append(\",\")\n    return res\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas separating the letters. \n    \"\"\"\n        lst = [i for i in lst if i != 0]\n    lst = [i if i > 0 else -i for i in lst]\n    lst = [chr(i + 64) for i in lst]\n    lst = [i if i != '@' else ',' for i in lst]\n    return ''.join(lst)\n",
                "id": 16,
                "key": 0
            }
        ],
        [
            {
                "diff": 21,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (16->6)\ndiff:\n--- \n+++ \n@@ -15,14 +15,5 @@\n at 0 as-A,-turning-the-negative-numbers-into-commas-separating-the-letters.+A. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas separating the letters. \n    \"\"\"\n        lst = [i for i in lst if i != 0]\n    lst = [i if i > 0 else -i for i in lst]\n    lst = [chr(i + 64) for i in lst]\n    lst = [i if i != '@' else ',' for i in lst]\n    return ''.join(lst)\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A.\n    \"\"\"\n        return [chr(i+65) for i in lst]\n",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 15,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (17->3)\ndiff:\n\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as points of seperation.\n    \"\"\"\n        lst = [i for i in lst if i != 0]\n    lst = [chr(i + 65) for i in lst]\n    lst = \"\".join(lst)\n    lst = lst.split(\"-\")\n    lst = [i for i in lst if i != \"\"]\n    return lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as points of seperation.\n    \"\"\"\n        #print(lst)\n    lst = [x+1 for x in lst]\n    #print(lst)\n    lst = [x-1 for x in lst]\n    #print(lst)\n    lst = [chr(x+65) for x in lst]\n    #print(lst)\n    lst = ''.join(lst)\n    #print(lst)",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 15,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (18->18)\ndiff:\n\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as commas and points of separation between strings.\n    \"\"\"\n        return ''.join([chr(i+65) for i in lst])\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as commas and points of separation between strings.\n    \"\"\"\n        return ''.join(chr(ord('A') + i) for i in lst)\n",
                "id": 18,
                "key": 0
            },
            {
                "diff": 24,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (18->19)\ndiff:\n--- \n+++ \n@@ -24,7 +24,7 @@\n single string, then-use+turn the negative numbers@@ -35,5 +35,6 @@\n of separation between+the strings. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as commas and points of separation between strings.\n    \"\"\"\n        return ''.join(chr(ord('A') + i) for i in lst)\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then turn the negative numbers as commas and points of separation between the strings.\n    \"\"\"\n        output = ''\n    for i in lst:\n        if i < 0:\n            output += ','\n        elif i == 0:\n            output += 'A'\n        else:\n            output += chr(i+64)\n    return output\n",
                "id": 19,
                "key": 0
            },
            {
                "diff": 26,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (18->8)\ndiff:\n--- \n+++ \n@@ -16,28 +16,9 @@\n 0 as A,-1-as-B.-grouping-the-output-as-a-single-string,-then-turn-the+turning negative numbers-as-commas-and-points-of-separation-between-the-strings.+into+commas. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, 1 as B. grouping the output as a single string, then turn the negative numbers as commas and points of separation between the strings.\n    \"\"\"\n        return ''.join(chr(ord('A') + i) for i in lst).replace('-', ',')\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into commas.\n    \"\"\"\n        return ''.join(map(lambda x: chr(x+65) if x >= 0 else ',', lst))\n",
                "id": 8,
                "key": 0
            },
            {
                "diff": 29,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (18->21)\ndiff:\n--- \n+++ \n@@ -1,36 +1,20 @@\n def convert(lst): \"\"\"-change-numbers-to-letters-matching-the-order-of-the-alphabet-starting-at-0-as-A,-grouping-the-answer-as-one-string,-and-then-using-the--1-as-points-to-separate-the-string.+input:+[1,+1,+1,+-1,+25,+25,+25,+-1,+0,+1,+2]+output:+['BBB',+'ZZZ',+'ABC'] \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, grouping the answer as one string, and then using the -1 as points to separate the string.\n    \"\"\"\n        lst = [chr(i + 65) for i in lst]\n    lst = ''.join(lst)\n    lst = lst.replace('-1', '-1 ')\n    return lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    \n\ninput: [1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]\noutput: ['BBB', 'ZZZ', 'ABC']\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append(i)\n    for i in range(len(result)):\n        lst.remove(-1)\n    for i in range(0, len(lst), 3):\n        result.append(lst[i:i+3])\n    for i in range(len(result)):\n        if result[i] ==",
                "id": 21,
                "key": 0
            }
        ],
        [
            {
                "diff": 25,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (19->18)\ndiff:\n--- \n+++ \n@@ -15,7 +15,10 @@\n at 0 as-A.+A,+1+as+B. grouping the output\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then turn the negative numbers as commas and points of separation between the strings.\n    \"\"\"\n        output = ''\n    for i in lst:\n        if i < 0:\n            output += ','\n        elif i == 0:\n            output += 'A'\n        else:\n            output += chr(i+64)\n    return output\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, 1 as B. grouping the output as a single string, then turn the negative numbers as commas and points of separation between the strings.\n    \"\"\"\n        return ''.join(chr(ord('A') + i) for i in lst).replace('-', ',')\n\n",
                "id": 18,
                "key": 0
            }
        ],
        [
            {
                "diff": 28,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (20->18)\ndiff:\n--- \n+++ \n@@ -16,9 +16,18 @@\n 0 as A,+grouping+the+answer+as+one+string,+and+then using the -1+as points to separate\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, using the -1 points to separate the string.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i == -1:\n            new_lst.append('-')\n        else:\n            new_lst.append(chr(i+65))\n    return new_lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, grouping the answer as one string, and then using the -1 as points to separate the string.\n    \"\"\"\n        lst = [chr(i + 65) for i in lst]\n    lst = ''.join(lst)\n    lst = lst.replace('-1', '-1 ')\n    return lst\n",
                "id": 18,
                "key": 0
            }
        ],
        [
            {
                "diff": 30,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (21->22)\ndiff:\n--- \n+++ \n@@ -1,7 +1,9 @@\n def convert(lst): \"\"\"-input:+if+user+inputs [1, 1, 1,@@ -12,9 +14,11 @@\n -1, 0, 1,-2]-output:+2],+output+should+be ['BBB', 'ZZZ',-'ABC']+'ABC']. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    \n\ninput: [1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]\noutput: ['BBB', 'ZZZ', 'ABC']\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append(i)\n    for i in range(len(result)):\n        lst.remove(-1)\n    for i in range(0, len(lst), 3):\n        result.append(lst[i:i+3])\n    for i in range(len(result)):\n        if result[i] ==\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    if user inputs [1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2], output should be ['BBB', 'ZZZ', 'ABC'].\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append('')\n        elif i == 0:\n            result.append('A')\n        elif i == 1:\n            result.append('B')\n        elif i == 2:\n            result.append('C')\n        elif i == 25:\n            result.append('Z')\n        else:\n            result.",
                "id": 22,
                "key": 0
            }
        ],
        [
            {
                "diff": 31,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (22->23)\ndiff:\n--- \n+++ \n@@ -1,24 +1,24 @@\n def convert(lst): \"\"\"-if-user-inputs-[1,-1,-1,--1,-25,-25,-25,--1,-0,-1,-2],-output-should-be-['BBB',-'ZZZ',-'ABC'].+change+numbers+to+letters+matching+the+order+of+the+alphabet+starting+at+0+as+A,+turning+negative+numbers+into+\"\" \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    if user inputs [1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2], output should be ['BBB', 'ZZZ', 'ABC'].\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append('')\n        elif i == 0:\n            result.append('A')\n        elif i == 1:\n            result.append('B')\n        elif i == 2:\n            result.append('C')\n        elif i == 25:\n            result.append('Z')\n        else:\n            result.\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\"\n    \"\"\"\n        return [chr(x + 65) if x >= 0 else \"\" for x in lst]\n\n",
                "id": 23,
                "key": 0
            }
        ],
        [
            {
                "diff": 32,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (23->10)\ndiff:\n--- \n+++ \n@@ -20,5 +20,11 @@\n negative numbers into-\"\"+\"\",+grouping+the+output+as+one+string. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\"\n    \"\"\"\n        return [chr(x + 65) if x >= 0 else \"\" for x in lst]\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\", grouping the output as one string.\n    \"\"\"\n        return \"\".join([\"\" if n < 0 else chr(n + 65) for n in lst])\n",
                "id": 10,
                "key": 0
            },
            {
                "diff": 34,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student17",
                "hover": "username:student17\nedge: (23->5)\ndiff:\n--- \n+++ \n@@ -16,11 +16,6 @@\n 0 as A,-turning-negative-numbers-into-\"\", and grouping the@@ -30,5 +25,11 @@\n string in a-list.+list,+using+-1+as+places+to+slice. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\", and grouping the output as one string in a list.\n    \"\"\"\n        output = []\n    for i in lst:\n        if i < 0:\n            output.append(\"\")\n        else:\n            output.append(chr(i + 65))\n    return output\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, and grouping the output as one string in a list, using -1 as places to slice. \n    \"\"\"\n        return [''.join(chr(i + 65) for i in lst[:lst.index(-1)])] + convert(lst[lst.index(-1) + 1:]) if -1 in lst else [''.join(chr(i + 65) for i in lst)]\n",
                "id": 5,
                "key": 0
            }
        ],
        [
            {
                "diff": 15,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student51",
                "hover": "username:student51\nedge: (24->25)\ndiff:\n\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. If -1, start the next character with a new string.\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append(\"\")\n        else:\n            result[-1] += chr(i + 65)\n    return result\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. If -1, start the next character with a new string.\n    \"\"\"\n        str = \"\"\n    for i in lst:\n        if i == -1:\n            str += \" \"\n        else:\n            str += chr(i+65)\n    return str\n",
                "id": 25,
                "key": 0
            }
        ],
        [
            {
                "diff": 35,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student51",
                "hover": "username:student51\nedge: (25->5)\ndiff:\n--- \n+++ \n@@ -29,14 +29,23 @@\n to a string.-If--1,-start-the-next-character-with+When+-1+appears+make a new-string.+string+and+add+the+following+characters+to+it.+return+a+list+of+strings. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. If -1, start the next character with a new string.\n    \"\"\"\n        str = \"\"\n    for i in lst:\n        if i == -1:\n            str += \" \"\n        else:\n            str += chr(i+65)\n    return str\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. When -1 appears make a new string and add the following characters to it. return a list of strings.\n    \"\"\"\n        result = []\n    temp = \"\"\n    for i in lst:\n        if i == -1:\n            result.append(temp)\n            temp = \"\"\n        else:\n            temp += chr(i+65)\n    result.append(temp)\n    return result\n",
                "id": 5,
                "key": 0
            }
        ]
    ]
}