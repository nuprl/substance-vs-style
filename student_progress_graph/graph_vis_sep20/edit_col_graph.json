{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 0,
            "hover": "stdout:\n[2, 6, 8]\n\n[9, 1]\n\n[3]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\n[[1, 6, 3], [4, 6, 6], [7, 6, 9]]\n\n[[9, 1, 1, 1, 1], [9, 1, 1, 1, 1]]\n\n[[2, 1]]\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student29",
                "hover": "username:student29\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -3,27 +3,35 @@\n \"\"\" For each-entry,+entry+take+in+the+second+parameter+as+an+index.+Then+go+through+each+entry+of+the+first+parameter+and replace the-integer+value corresponding to-the-2nd-parameter+that index with the third+input parameter-integer.-return-a-list-with-all-the-altered-entries \"\"\"\n\nFROM completion:\ndef edit_col(mat,i,n):\n    \"\"\"\n    For each entry, replace the integer corresponding to the 2nd parameter index with the third parameter integer. return a list with all the altered entries\n    \"\"\"\n        return [mat[j][i] if j!=i else n for j in range(len(mat))]\n\n\nTO completion:\ndef edit_col(mat,i,n):\n    \"\"\"\n    For each entry take in the second parameter as an index. Then go through each entry of the first parameter and replace the value corresponding to that index with the third input parameter\n    \"\"\"\n        for j in range(len(mat)):\n        mat[j][i] = n\n    return mat\n",
                "id": 1,
                "key": 0
            }
        ],
        []
    ]
}