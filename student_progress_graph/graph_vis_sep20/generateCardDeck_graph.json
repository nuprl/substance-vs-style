{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 5,
            "hover": "stdout:\n['S1', 'S2', 'SA', 'H1', 'H2', 'HA', 'D1', 'D2', 'DA']\n\n['H6', 'HQ', 'HJ', 'H2', 'D6', 'DQ', 'DJ', 'D2']\n\n['H2']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 4,
            "hover": "stdout:\n['D1', 'D2', 'DA', 'H1', 'H2', 'HA', 'S1', 'S2', 'SA']\n\n['D2', 'D6', 'DJ', 'DQ', 'H2', 'H6', 'HJ', 'HQ']\n\n['H2']\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n['1S', '2S', 'AS', '1H', '2H', 'AH', '1D', '2D', 'AD']\n\n['6H', 'QH', 'JH', '2H', '6D', 'QD', 'JD', '2D']\n\n['2H']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\n['1D', '1H', '1S', '2D', '2H', '2S', 'AD', 'AH', 'AS']\n\n['2D', '2H', '6D', '6H', 'JD', 'JH', 'QD', 'QH']\n\n['2H']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 3
        },
        {
            "stderr_id": 1,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 9\n    generateCardDeck(suits, vals)\nIndentationError: expected an indented block after 'for' statement on line 6\n\n  File \"/tmp/file.py\", line 9\n    generateCardDeck(suits, vals)\nIndentationError: expected an indented block after 'for' statement on line 6\n\n  File \"/tmp/file.py\", line 9\n    generateCardDeck(suits, vals)\nIndentationError: expected an indented block after 'for' statement on line 6\n",
            "color": "grey",
            "id": 4
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\nNone\n\nNone\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 5
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student33",
                "hover": "username:student33\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -10,14 +10,32 @@\n of input strings+\"suits\" and another series of input-strings,-and-then+strings+\"vals\".+It+sorts+each+series+first+into+alphabetical+order+followed+by+in+order+of+increasing+numerical+value.+Then+it splices each string\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes a series of input strings and another series of input strings, and then splices each string from the first series with each string from the second series\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes a series of input strings \"suits\" and another series of input strings \"vals\". It sorts each series first into alphabetical order followed by in order of increasing numerical value. Then it splices each string from the first series with each string from the second series\n    \"\"\"\n        suits.sort()\n    vals.sort()\n    deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 4,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student40",
                "hover": "username:student40\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -42,11 +42,28 @@\n the new strings+in+the+new+list will appear in alphabetical-and+order.+if+multiple+strings+have+the+same+first+letter,+then+they+will+appear+in numerical order. \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second. the new strings will appear in alphabetical and numerical order.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second. the new strings in the new list will appear in alphabetical order. if multiple strings have the same first letter, then they will appear in numerical order.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return sorted(deck)\n",
                "id": 1,
                "key": 1
            },
            {
                "diff": 8,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student50",
                "hover": "username:student50\nedge: (0->1)\ndiff:\n\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Reorder the new list to make it in alphabetical and numerical order, then return\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Reorder the new list to make it in alphabetical and numerical order, then return\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    deck.sort()\n    return deck\n",
                "id": 1,
                "key": 2
            },
            {
                "diff": 13,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student60",
                "hover": "username:student60\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -22,7 +22,9 @@\n combination of these-parameters.+parameters+sorted+alphabetically. As an example.@@ -50,19 +52,4 @@\n 'H2','H6', 'HJ', 'HQ'].-The-final-output-in-the-list-is-ordered-C-then-D-then-H-then-S \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. The final output in the list is ordered C then D then H then S \n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit+val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters sorted alphabetically. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. \n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    deck.sort()\n    return deck\n",
                "id": 1,
                "key": 3
            },
            {
                "diff": 14,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student63",
                "hover": "username:student63\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -38,4 +38,20 @@\n each original list.+The+resulting+list+will+be+arranged+in+alphabetical+order+based+on+the+letters+of+each+string. \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes in multiple lists made up of single characters and outputs one list in which all the entries are two characters strings made up of the combination of each character from each original list. \n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes in multiple lists made up of single characters and outputs one list in which all the entries are two characters strings made up of the combination of each character from each original list. The resulting list will be arranged in alphabetical order based on the letters of each string.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return sorted(deck)\n",
                "id": 1,
                "key": 4
            },
            {
                "diff": 2,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student40",
                "hover": "username:student40\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -39,4 +39,12 @@\n numbers appearing second.+the+new+strings+will+appear+in+alphabetical+order. \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second. the new strings will appear in alphabetical order.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n",
                "id": 0,
                "key": 0
            },
            {
                "diff": 3,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student40",
                "hover": "username:student40\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -46,5 +46,7 @@\n appear in alphabetical+and+numerical order. \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second. the new strings will appear in alphabetical order.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second. the new strings will appear in alphabetical and numerical order.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n",
                "id": 0,
                "key": 1
            },
            {
                "diff": 6,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student50",
                "hover": "username:student50\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -88,5 +88,12 @@\n list in alphabetical-order.+order+and+numerical+order+[ex.+A1,+B2,+C3] \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order and numerical order [ex. A1, B2, C3]\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n",
                "id": 0,
                "key": 2
            },
            {
                "diff": 7,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student50",
                "hover": "username:student50\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -83,17 +83,18 @@\n the new list.-Return+Reorder the+new list+to+make+it in alphabetical-order and numerical-order-[ex.-A1,-B2,-C3]+order,+then+return \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order and numerical order [ex. A1, B2, C3]\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Reorder the new list to make it in alphabetical and numerical order, then return\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n",
                "id": 0,
                "key": 3
            },
            {
                "diff": 12,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student60",
                "hover": "username:student60\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -58,13 +58,11 @@\n list is ordered-alphabetically.-'D6'-would-be-in-the-list-before-'S1'+C+then+D+then+H+then+S \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. The final output in the list is ordered alphabetically. 'D6' would be in the list before 'S1'\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit+val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. The final output in the list is ordered C then D then H then S \n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit+val)\n    return deck\n",
                "id": 0,
                "key": 4
            },
            {
                "diff": 17,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student64",
                "hover": "username:student64\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -31,5 +31,7 @@\n be in alphabetical-order.+order+of+suits. \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals. Each card in list must be in alphabetical order.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals. Each card in list must be in alphabetical order of suits.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n",
                "id": 0,
                "key": 5
            },
            {
                "diff": 18,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student64",
                "hover": "username:student64\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -32,6 +32,6 @@\n in alphabetical order-of+by suits. \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals. Each card in list must be in alphabetical order of suits.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals. Each card in list must be in alphabetical order by suits.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n",
                "id": 0,
                "key": 6
            },
            {
                "diff": 19,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student64",
                "hover": "username:student64\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -33,5 +33,6 @@\n alphabetical order by-suits.+first+character. \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals. Each card in list must be in alphabetical order by suits.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals. Each card in list must be in alphabetical order by first character.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n",
                "id": 0,
                "key": 7
            },
            {
                "diff": 10,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student60",
                "hover": "username:student60\nedge: (0->5)\ndiff:\n--- \n+++ \n@@ -49,5 +49,12 @@\n 'DQ', 'H2','H6', 'HJ',-'HQ']+'HQ'].+This+function+prints+the+final+values+alphabetically. \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. This function prints the final values alphabetically. \n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    deck.sort()\n    print(deck)\n",
                "id": 5,
                "key": 0
            },
            {
                "diff": 15,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student64",
                "hover": "username:student64\nedge: (0->2)\ndiff:\n--- \n+++ \n@@ -23,4 +23,12 @@\n values in vals.+Results+in+vals+must+be+in+alphabetical+order. \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals. Results in vals must be in alphabetical order.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(val + suit)\n    return deck\n",
                "id": 2,
                "key": 0
            },
            {
                "diff": 20,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student64",
                "hover": "username:student64\nedge: (0->3)\ndiff:\n--- \n+++ \n@@ -23,16 +23,15 @@\n values in vals.-Each+Sort+each card in-list-must-be-in+deck+by alphabetical order-by+of first character. \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals. Each card in list must be in alphabetical order by first character.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals. Sort each card in deck by alphabetical order of first character.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(val + suit)\n    deck.sort()\n    return deck\n",
                "id": 3,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 1,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student40",
                "hover": "username:student40\nedge: (2->0)\ndiff:\n--- \n+++ \n@@ -30,5 +30,13 @@\n in the other-list.+list,+with+letters+appearing+first+and+numbers+appearing+second. \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(val + suit)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n",
                "id": 0,
                "key": 0
            },
            {
                "diff": 16,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student64",
                "hover": "username:student64\nedge: (2->0)\ndiff:\n--- \n+++ \n@@ -23,9 +23,10 @@\n values in vals.-Results+Each+card in-vals+list must be in\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals. Results in vals must be in alphabetical order.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(val + suit)\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals. Each card in list must be in alphabetical order.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n",
                "id": 0,
                "key": 1
            }
        ],
        [
            {
                "diff": 5,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student50",
                "hover": "username:student50\nedge: (3->0)\ndiff:\n--- \n+++ \n@@ -34,7 +34,31 @@\n which will be-returned.+returned+[ex,+if+the+first+element+of+the+first+list+is+F+and+an+element+of+the+second+list+is+7,+combine+them+like+F7]. Keep adding the\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(val + suit)\n    return sorted(deck)\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n",
                "id": 0,
                "key": 0
            },
            {
                "diff": 21,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student64",
                "hover": "username:student64\nedge: (3->1)\ndiff:\n--- \n+++ \n@@ -32,6 +32,6 @@\n alphabetical order of-first+suit character. \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals. Sort each card in deck by alphabetical order of first character.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(val + suit)\n    deck.sort()\n    return deck\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that appends each of the suits with each of the values in vals. Sort each card in deck by alphabetical order of suit character.\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    deck.sort()\n    return deck\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 9,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student60",
                "hover": "username:student60\nedge: (4->0)\ndiff:\n--- \n+++ \n@@ -23,4 +23,31 @@\n of these parameters.+As+an+example.+If+you+input+['H',+'D']+as+suits+and+['6',+'Q',+'J',+'2']+as+vals,+the+function+prints+['D2',+'D6',+'DJ',+'DQ',+'H2','H6',+'HJ',+'HQ'] \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. \n    \"\"\"\n        for suit in suits:\n        for val in vals:\n            print(val + \" of \" + suit)\n\ngenerateCardDeck(suits, vals)\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    return deck\n",
                "id": 0,
                "key": 0
            }
        ],
        [
            {
                "diff": 11,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student60",
                "hover": "username:student60\nedge: (5->0)\ndiff:\n--- \n+++ \n@@ -50,11 +50,21 @@\n 'H2','H6', 'HJ', 'HQ'].-This-function-prints+The+final+output+in the-final-values+list+is+ordered alphabetically.+'D6'+would+be+in+the+list+before+'S1' \"\"\"\n\nFROM completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. This function prints the final values alphabetically. \n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit + val)\n    deck.sort()\n    print(deck)\n\n\nTO completion:\ndef generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. The final output in the list is ordered alphabetically. 'D6' would be in the list before 'S1'\n    \"\"\"\n        deck = []\n    for suit in suits:\n        for val in vals:\n            deck.append(suit+val)\n    return deck\n",
                "id": 0,
                "key": 0
            }
        ]
    ]
}