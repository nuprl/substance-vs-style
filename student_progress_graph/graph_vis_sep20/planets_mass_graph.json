{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 2,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}))\n  File \"/tmp/file.py\", line 7, in planets_mass\n    if planet[1] > 16:\nTypeError: '>' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}))\n  File \"/tmp/file.py\", line 7, in planets_mass\n    if planet[1] > 16:\nTypeError: '>' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(planets_mass({'Pluto': 100}))\n  File \"/tmp/file.py\", line 7, in planets_mass\n    if planet[1] > 16:\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 3,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 19, in <module>\n    print(planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}))\n  File \"/tmp/file.py\", line 18, in planets_mass\n    mass_\nNameError: name 'mass_' is not defined. Did you mean: 'mass_16'?\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 19, in <module>\n    print(planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}))\n  File \"/tmp/file.py\", line 18, in planets_mass\n    mass_\nNameError: name 'mass_' is not defined. Did you mean: 'mass_16'?\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 19, in <module>\n    print(planets_mass({'Pluto': 100}))\n  File \"/tmp/file.py\", line 18, in planets_mass\n    mass_\nNameError: name 'mass_' is not defined. Did you mean: 'mass_16'?\n",
            "color": "blue",
            "id": 1
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\n0\n\n0\n\n0\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 2
        },
        {
            "stderr_id": 0,
            "stdout_id": 4,
            "hover": "stdout:\n15\n\n15\n\n0\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 3
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n115\n\n145\n\n100\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 4
        },
        {
            "stderr_id": 1,
            "stdout_id": 1,
            "hover": "stdout:\n\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}))\n  File \"/tmp/file.py\", line 8, in planets_mass\n    mass_list.append(planets[planet]['mass'])\nTypeError: 'int' object is not subscriptable\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}))\n  File \"/tmp/file.py\", line 8, in planets_mass\n    mass_list.append(planets[planet]['mass'])\nTypeError: 'int' object is not subscriptable\n\n",
            "color": "grey",
            "id": 5
        },
        {
            "stderr_id": 4,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}))\n  File \"/tmp/file.py\", line 7, in planets_mass\n    total += planets[planet]['mass']\nTypeError: 'int' object is not subscriptable\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}))\n  File \"/tmp/file.py\", line 7, in planets_mass\n    total += planets[planet]['mass']\nTypeError: 'int' object is not subscriptable\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(planets_mass({'Pluto': 100}))\n  File \"/tmp/file.py\", line 7, in planets_mass\n    total += planets[planet]['mass']\nTypeError: 'int' object is not subscriptable\n",
            "color": "blue",
            "id": 6
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student14",
                "hover": "username:student14\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -2,33 +2,19 @@\n planets_mass(planets): \"\"\" if-the-number-attached-to-each planet-name+mass is-greater+less than 16,-get-rid-of-it.-Add+add up the-remaining-numbers-attached-to+total+planet+mass+in each-planet-that-are-less-than-16+bracket \"\"\"\n\nFROM completion:\ndef planets_mass(planets):\n    \"\"\"\n    if the number attached to each planet name is greater than 16, get rid of it. Add up the remaining numbers attached to each planet that are less than 16\n    \"\"\"\n        total = 0\n    for planet in planets:\n        if planet[1] > 16:\n            continue\n        total += planet[1]\n    return total\n\n\nTO completion:\ndef planets_mass(planets):\n    \"\"\"\n    if planet mass is less than 16, add up the total planet mass in each bracket\n    \"\"\"\n        mass_16 = 0\n    mass_32 = 0\n    mass_64 = 0\n    mass_128 = 0\n    mass_256 = 0\n    mass_512 = 0\n    mass_1024 = 0\n    mass_2048 = 0\n    mass_4096 = 0\n    mass_8192 = 0\n    mass_16384 = 0\n    mass_32768 = 0\n    mass_65536 = 0\n    mass_",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student14",
                "hover": "username:student14\nedge: (1->2)\ndiff:\n--- \n+++ \n@@ -2,19 +2,12 @@\n planets_mass(planets): \"\"\" if-planet-mass+'sun' is-less-than-16,-add-up+in the-total-planet-mass-in-each-bracket+string,+output+is+15 \"\"\"\n\nFROM completion:\ndef planets_mass(planets):\n    \"\"\"\n    if planet mass is less than 16, add up the total planet mass in each bracket\n    \"\"\"\n        mass_16 = 0\n    mass_32 = 0\n    mass_64 = 0\n    mass_128 = 0\n    mass_256 = 0\n    mass_512 = 0\n    mass_1024 = 0\n    mass_2048 = 0\n    mass_4096 = 0\n    mass_8192 = 0\n    mass_16384 = 0\n    mass_32768 = 0\n    mass_65536 = 0\n    mass_\n\nTO completion:\ndef planets_mass(planets):\n    \"\"\"\n    if 'sun' is in the string, output is 15\n    \"\"\"\n        if 'sun' in planets:\n        return 15\n    else:\n        return 0\n",
                "id": 2,
                "key": 0
            }
        ],
        [
            {
                "diff": 2,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student14",
                "hover": "username:student14\nedge: (2->2)\ndiff:\n--- \n+++ \n@@ -5,9 +5,11 @@\n 'sun' is in-the-string,+planets, output is-15+15.+else,+output+0 \"\"\"\n\nFROM completion:\ndef planets_mass(planets):\n    \"\"\"\n    if 'sun' is in the string, output is 15\n    \"\"\"\n        if 'sun' in planets:\n        return 15\n    else:\n        return 0\n\n\nTO completion:\ndef planets_mass(planets):\n    \"\"\"\n    if 'sun' is in planets, output is 15. else, output 0\n    \"\"\"\n        if 'sun' in planets:\n        return 15\n    else:\n        return 0\n",
                "id": 2,
                "key": 0
            },
            {
                "diff": 3,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student14",
                "hover": "username:student14\nedge: (2->3)\ndiff:\n--- \n+++ \n@@ -2,7 +2,7 @@\n planets_mass(planets): \"\"\" if-'sun'+'Sun' is in planets,\n\nFROM completion:\ndef planets_mass(planets):\n    \"\"\"\n    if 'sun' is in planets, output is 15. else, output 0\n    \"\"\"\n        if 'sun' in planets:\n        return 15\n    else:\n        return 0\n\n\nTO completion:\ndef planets_mass(planets):\n    \"\"\"\n    if 'Sun' is in planets, output is 15. else, output 0\n    \"\"\"\n        if 'Sun' in planets:\n        return 15\n    else:\n        return 0\n",
                "id": 3,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 4,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student46",
                "hover": "username:student46\nedge: (4->4)\ndiff:\n\n\nFROM completion:\ndef planets_mass(planets):\n    \"\"\"\n    The function will take in a dictionary where the keys are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.\n    \"\"\"\n        # remove all keys that are not planets\n    for key in planets.keys():\n        if key[0] != key[0].upper():\n            del planets[key]\n    # add all the values together\n    total = 0\n    for value in planets.values():\n        total += value\n    return total\n\n\nTO completion:\ndef planets_mass(planets):\n    \"\"\"\n    The function will take in a dictionary where the keys are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.\n    \"\"\"\n        for key in planets:\n        if key[0].isupper() == False:\n            del planets[key]\n    mass = 0\n    for key in planets:\n        mass += planets[key]\n    return mass\n",
                "id": 4,
                "key": 0
            },
            {
                "diff": 7,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student55",
                "hover": "username:student55\nedge: (4->4)\ndiff:\n--- \n+++ \n@@ -40,4 +40,16 @@\n the planets' masses.+The+sun+and+pluto+are+not+planets,+so+they+cannot+be+added. \"\"\"\n\nFROM completion:\ndef planets_mass(planets):\n    \"\"\"\n    Write a function that gets a dictionary of planets and their masses. All the planets masses in a dictionary using the name of the planet as the key. The function should return the sum of all the planets' masses.\n    \"\"\"\n        return sum(planets.values())\n\n\nTO completion:\ndef planets_mass(planets):\n    \"\"\"\n    Write a function that gets a dictionary of planets and their masses. All the planets masses in a dictionary using the name of the planet as the key. The function should return the sum of all the planets' masses. The sun and pluto are not planets, so they cannot be added.\n    \"\"\"\n        mass = 0\n    for planet in planets:\n        if planet != \"sun\" and planet != \"pluto\":\n            mass += planets[planet]\n    return mass\n",
                "id": 4,
                "key": 1
            },
            {
                "diff": 5,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student46",
                "hover": "username:student46\nedge: (4->3)\ndiff:\n--- \n+++ \n@@ -12,12 +12,7 @@\n the keys are-strings,-with-the-first-letter-capitalized,+strings and integers are\n\nFROM completion:\ndef planets_mass(planets):\n    \"\"\"\n    The function will take in a dictionary where the keys are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.\n    \"\"\"\n        for key in planets:\n        if key[0].isupper() == False:\n            del planets[key]\n    mass = 0\n    for key in planets:\n        mass += planets[key]\n    return mass\n\n\nTO completion:\ndef planets_mass(planets):\n    \"\"\"\n    The function will take in a dictionary where the keys are strings and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.\n    \"\"\"\n        total = 0\n    for planet in planets:\n        if planet == \"Mercury\" or planet == \"Venus\" or planet == \"Earth\" or planet == \"Mars\" or planet == \"Jupiter\" or planet == \"Saturn\" or planet == \"Uranus\" or planet == \"Neptune\":\n            total += planets[planet]\n    return total\n",
                "id": 3,
                "key": 0
            },
            {
                "diff": 10,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student55",
                "hover": "username:student55\nedge: (4->3)\ndiff:\n--- \n+++ \n@@ -40,4 +40,11 @@\n returns the total.+The+sun+and+pluto+are+not+planets. \"\"\"\n\nFROM completion:\ndef planets_mass(planets):\n    \"\"\"\n    Write a function that gets a dictionary. The key of the dictionary is the name of the planet and the value is the mass. The function should sum up the masses of only the planets and returns the total.\n    \"\"\"\n        total = 0\n    for planet in planets:\n        total += planets[planet]\n    return total\n\n\nTO completion:\ndef planets_mass(planets):\n    \"\"\"\n    Write a function that gets a dictionary. The key of the dictionary is the name of the planet and the value is the mass. The function should sum up the masses of only the planets and returns the total. The sun and pluto are not planets.\n    \"\"\"\n        total = 0\n    for planet in planets:\n        if planet != \"Sun\" and planet != \"Pluto\":\n            total += planets[planet]\n    return total\n",
                "id": 3,
                "key": 1
            },
            {
                "diff": 8,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student55",
                "hover": "username:student55\nedge: (4->6)\ndiff:\n--- \n+++ \n@@ -7,49 +7,19 @@\n that gets a-dictionary-of-planets-and-their-masses.-All-the-planets-masses-in-a-dictionary-using-the-name-of-the-planet-as-the-key.+dictionary. The function should-return+sum+up the-sum+masses of-all the-planets'-masses.-The-sun+planets and-pluto-are-not-planets,-so-they-cannot-be-added.+returns+the+total. \"\"\"\n\nFROM completion:\ndef planets_mass(planets):\n    \"\"\"\n    Write a function that gets a dictionary of planets and their masses. All the planets masses in a dictionary using the name of the planet as the key. The function should return the sum of all the planets' masses. The sun and pluto are not planets, so they cannot be added.\n    \"\"\"\n        mass = 0\n    for planet in planets:\n        if planet != \"sun\" and planet != \"pluto\":\n            mass += planets[planet]\n    return mass\n\n\nTO completion:\ndef planets_mass(planets):\n    \"\"\"\n    Write a function that gets a dictionary. The function should sum up the masses of the planets and returns the total.\n    \"\"\"\n        total = 0\n    for planet in planets:\n        total += planets[planet]['mass']\n    return total\n\n",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 6,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student53",
                "hover": "username:student53\nedge: (5->3)\ndiff:\n--- \n+++ \n@@ -7,24 +7,17 @@\n and if the-element-is+key == 'Venus' or 'Mercury' add-value-to-a-new-list+the+values+together and return-the-sum-of-the-new-list.+this+value \"\"\"\n\nFROM completion:\ndef planets_mass(planets):\n    \"\"\"\n    loop through planets and if the element is == 'Venus' or 'Mercury' add value to a new list and return the sum of the new list. \n    \"\"\"\n        mass_list = []\n    for planet in planets:\n        if planet == 'Venus' or planet == 'Mercury':\n            mass_list.append(planets[planet]['mass'])\n    return sum(mass_list)\n\n\nTO completion:\ndef planets_mass(planets):\n    \"\"\"\n    loop through planets and if the key == 'Venus' or 'Mercury' add the values together and return this value\n    \"\"\"\n        total_mass = 0\n    for key, value in planets.items():\n        if key == 'Venus' or key == 'Mercury':\n            total_mass += value\n    return total_mass\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 9,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student55",
                "hover": "username:student55\nedge: (6->4)\ndiff:\n--- \n+++ \n@@ -9,6 +9,23 @@\n a dictionary. The+key+of+the+dictionary+is+the+name+of+the+planet+and+the+value+is+the+mass.+The function should sum@@ -16,6 +33,7 @@\n the masses of+only the planets and\n\nFROM completion:\ndef planets_mass(planets):\n    \"\"\"\n    Write a function that gets a dictionary. The function should sum up the masses of the planets and returns the total.\n    \"\"\"\n        total = 0\n    for planet in planets:\n        total += planets[planet]['mass']\n    return total\n\n\n\nTO completion:\ndef planets_mass(planets):\n    \"\"\"\n    Write a function that gets a dictionary. The key of the dictionary is the name of the planet and the value is the mass. The function should sum up the masses of only the planets and returns the total.\n    \"\"\"\n        total = 0\n    for planet in planets:\n        total += planets[planet]\n    return total\n",
                "id": 4,
                "key": 0
            }
        ]
    ]
}