{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 8,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    total += int(line.split(\"\t\")[2])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 5,
            "hover": "stdout:\n36.5\n\n10.0\n\n0.0\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 2,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    total += int(line.split('\t')[-1])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n34\n\n10\n\n0\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 3
        },
        {
            "stderr_id": 5,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    count += int(line.split('\t')[1])\nValueError: invalid literal for int() with base 10: 'ice cream'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t10\"]))\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    count += int(line.split('\t')[1])\nValueError: invalid literal for int() with base 10: 'frozen yogurt'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t0\"]))\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    count += int(line.split('\t')[1])\nValueError: invalid literal for int() with base 10: 'frozen yogurt'\n",
            "color": "grey",
            "id": 4
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\n0\n\n0\n\n0\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 5
        },
        {
            "stderr_id": 6,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    count += int(line.split('\t')[2])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "blue",
            "id": 6
        },
        {
            "stderr_id": 7,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    total += float(line)\nValueError: could not convert string to float: 'peppermint\tice cream\t3'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t10\"]))\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    total += float(line)\nValueError: could not convert string to float: 'salty\tfrozen yogurt\t10'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t0\"]))\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    total += float(line)\nValueError: could not convert string to float: 'salty\tfrozen yogurt\t0'\n",
            "color": "grey",
            "id": 7
        },
        {
            "stderr_id": 9,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    total += int(line.split()[-1])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "blue",
            "id": 8
        },
        {
            "stderr_id": 1,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    count += int(line[-1])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "grey",
            "id": 9
        },
        {
            "stderr_id": 3,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 9, in readingIceCream\n    sum += int(line[second + 1:])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "grey",
            "id": 10
        },
        {
            "stderr_id": 4,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 12, in readingIceCream\n    sum += int(line[i+1:])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "blue",
            "id": 11
        },
        {
            "stderr_id": 0,
            "stdout_id": 4,
            "hover": "stdout:\n36.5\n\n10\n\n0\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 12
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student27",
                "hover": "username:student27\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -47,4 +47,11 @@\n of each string.+The+value+can+be+integers+or+floats. \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Calculate the total value of a list of ice cream. The input will be a list of strings, and each string contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each string.\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += int(line.split(\"\\t\")[2])\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Calculate the total value of a list of ice cream. The input will be a list of strings, and each string contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each string. The value can be integers or floats.\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += float(line.split(\"\\t\")[2])\n    return total\n",
                "id": 1,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 1,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student32",
                "hover": "username:student32\nedge: (2->3)\ndiff:\n--- \n+++ \n@@ -22,4 +22,12 @@\n in the element.+the+sum+should+not+be+limited+to+integers \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. \n    \"\"\"\n        total = 0\n    for line in lines:\n        if '\\t' in line:\n            total += int(line.split('\\t')[-1])\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. the sum should not be limited to integers\n    \"\"\"\n        total = 0\n    for line in lines:\n        for word in line.split():\n            if word.isdigit():\n                total += int(word)\n    return total\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 2,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student32",
                "hover": "username:student32\nedge: (3->1)\ndiff:\n--- \n+++ \n@@ -25,9 +25,8 @@\n the sum should-not-be-limited-to-integers+include+numbers+with+decimals \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. the sum should not be limited to integers\n    \"\"\"\n        total = 0\n    for line in lines:\n        for word in line.split():\n            if word.isdigit():\n                total += int(word)\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. the sum should include numbers with decimals\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split('\\t')\n        total += float(line[-1])\n    return total\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 3,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student62",
                "hover": "username:student62\nedge: (4->5)\ndiff:\n--- \n+++ \n@@ -12,7 +12,12 @@\n after '\\t' to-count,+count+if+it+is+an+integer, returns sum \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds number directly after '\\t' to count, returns sum\n    \"\"\"\n        count = 0\n    for line in lines:\n        count += int(line.split('\\t')[1])\n    return count\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds number directly after '\\t' to count if it is an integer, returns sum\n    \"\"\"\n        count = 0\n    for line in lines:\n        if line[0] == '\\t':\n            try:\n                count += int(line[1:])\n            except ValueError:\n                pass\n    return count\n",
                "id": 5,
                "key": 0
            }
        ],
        [
            {
                "diff": 4,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student62",
                "hover": "username:student62\nedge: (5->6)\ndiff:\n--- \n+++ \n@@ -10,14 +10,11 @@\n number directly after+the+second '\\t' to-count-if-it-is-an-integer,+count, returns sum \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds number directly after '\\t' to count if it is an integer, returns sum\n    \"\"\"\n        count = 0\n    for line in lines:\n        if line[0] == '\\t':\n            try:\n                count += int(line[1:])\n            except ValueError:\n                pass\n    return count\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds number directly after the second '\\t' to count, returns sum\n    \"\"\"\n        count = 0\n    for line in lines:\n        count += int(line.split('\\t')[2])\n    return count\n",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 5,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student62",
                "hover": "username:student62\nedge: (6->1)\ndiff:\n--- \n+++ \n@@ -7,7 +7,7 @@\n in list, adds-number+float directly after the\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds number directly after the second '\\t' to count, returns sum\n    \"\"\"\n        count = 0\n    for line in lines:\n        count += int(line.split('\\t')[2])\n    return count\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds float directly after the second '\\t' to count, returns sum\n    \"\"\"\n        count = 0\n    for line in lines:\n        count += float(line.split('\\t')[2])\n    return count\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 6,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student66",
                "hover": "username:student66\nedge: (7->8)\ndiff:\n--- \n+++ \n@@ -1,17 +1,26 @@\n def readingIceCream(lines): \"\"\"-return+take the-sum+integer+at+the+end of-the-float-in each item in the array list+and+sum+all+of+the+values+return+the+sum \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    return the sum of the float in each item in the array list\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += float(line)\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    take the integer at the end of each item in the array list and sum all of the values return the sum\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += int(line.split()[-1])\n    return total\n",
                "id": 8,
                "key": 0
            }
        ],
        [
            {
                "diff": 7,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student66",
                "hover": "username:student66\nedge: (8->1)\ndiff:\n--- \n+++ \n@@ -3,7 +3,7 @@\n \"\"\" take the-integer+float at the end\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    take the integer at the end of each item in the array list and sum all of the values return the sum\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += int(line.split()[-1])\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    take the float at the end of each item in the array list and sum all of the values return the sum\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += float(line.split()[-1])\n    return total\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student68",
                "hover": "username:student68\nedge: (9->1)\ndiff:\n--- \n+++ \n@@ -20,7 +20,7 @@\n should be a-number+double and add it\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    given an array of strings, parse each string by '\\t' and grab the last value that should be a number and add it to a count value. return the count value\n    \"\"\"\n        count = 0\n    for line in lines:\n        line = line.split('\\t')\n        count += int(line[-1])\n    return count\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    given an array of strings, parse each string by '\\t' and grab the last value that should be a double and add it to a count value. return the count value\n    \"\"\"\n        count = 0\n    for line in lines:\n        count += float(line.split('\\t')[-1])\n    return count\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 9,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student70",
                "hover": "username:student70\nedge: (10->11)\ndiff:\n--- \n+++ \n@@ -34,12 +34,12 @@\n convert it into-an-integer,+a+number, then add that-integer+number to the sum.\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into an integer, then add that integer to the sum. Return the sum at the end of the list.\n    \"\"\"\n        sum = 0\n    for line in lines:\n        first = line.find(\"\\t\")\n        second = line.find(\"\\t\", first + 1)\n        sum += int(line[second + 1:])\n    return sum\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into a number, then add that number to the sum. Return the sum at the end of the list.\n    \"\"\"\n        sum = 0\n    for line in lines:\n        count = 0\n        for i in range(len(line)):\n            if line[i] == \"\\t\":\n                count += 1\n            if count == 2:\n                sum += int(line[i+1:])\n                break\n    return sum\n",
                "id": 11,
                "key": 0
            }
        ],
        [
            {
                "diff": 10,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student70",
                "hover": "username:student70\nedge: (11->12)\ndiff:\n--- \n+++ \n@@ -29,17 +29,32 @@\n rest of the+string.+If+this+remaining+portion+of+the string-and+contains+\".\", convert it into a-number,-then-add-that-number+float.+Otherwise,+convert+it+into+an+integer.+Add+this+float+or+integer to the sum.\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into a number, then add that number to the sum. Return the sum at the end of the list.\n    \"\"\"\n        sum = 0\n    for line in lines:\n        count = 0\n        for i in range(len(line)):\n            if line[i] == \"\\t\":\n                count += 1\n            if count == 2:\n                sum += int(line[i+1:])\n                break\n    return sum\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string. If this remaining portion of the string contains \".\", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Return the sum at the end of the list.\n    \"\"\"\n        sum = 0\n    for line in lines:\n        line = line.strip()\n        line = line[line.find(\"\\t\")+1:]\n        line = line[line.find(\"\\t\")+1:]\n        if \".\" in line:\n            sum += float(line)\n        else:\n            sum += int(line)\n    return sum\n",
                "id": 12,
                "key": 0
            }
        ],
        []
    ]
}