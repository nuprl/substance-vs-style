{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 4,
            "hover": "stdout:\nuvurybudy loves upples.\n\niqe cream is the bestq\n\ntoast and jam and toast and ham\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\nuvurybudy loves upples.\n\niqe cream is the best\n\ntoast and jam and toast and ham\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 3,
            "stdout_id": 0,
            "hover": "stdout:\n\n\ntoast and jam and toast and ham\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(set_chars('Everybody loves apples.', \"u\", [0,2,6,16]))\n  File \"/tmp/file.py\", line 6, in set_chars\n    s = s.replace(i,c)\nTypeError: replace() argument 1 must be str, not int\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(set_chars('ice cream is the best', 'q', [1,21]))\n  File \"/tmp/file.py\", line 6, in set_chars\n    s = s.replace(i,c)\nTypeError: replace() argument 1 must be str, not int\n\n",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 2,
            "stdout_id": 2,
            "hover": "stdout:\nuvurybudy loves upples.\n\n\ntoast and jam and toast and ham\n\nstderr:\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(set_chars('ice cream is the best', 'q', [1,21]))\n  File \"/tmp/file.py\", line 7, in set_chars\n    s[i] = c\nIndexError: list assignment index out of range\n\n",
            "color": "grey",
            "id": 3
        },
        {
            "stderr_id": 1,
            "stdout_id": 1,
            "hover": "stdout:\nuverybody loves apples.\n\niqe cream is the best\n\n\nstderr:\n\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(set_chars('toast and jam and toast and ham', 't', []))\n  File \"/tmp/file.py\", line 5, in set_chars\n    if l[0] == 0:\nIndexError: list index out of range\n",
            "color": "blue",
            "id": 4
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student19",
                "hover": "username:student19\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -30,4 +30,20 @@\n the input character.+If+an+index+is+greater+than+the+length+of+the+string+-+1,+it+is+ignored. \"\"\"\n\nFROM completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    Takes an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character.\n    \"\"\"\n        for i in l:\n        s = s[:i] + c + s[i+1:]\n    return s\n\n\nTO completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    Takes an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character. If an index is greater than the length of the string - 1, it is ignored.\n    \"\"\"\n        for i in l:\n        if i < len(s):\n            s = s[:i] + c + s[i+1:]\n    return s\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 9,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student57",
                "hover": "username:student57\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -20,22 +20,17 @@\n with given character-and-also if given index is-1++not+in the length of the string,-add-character-at-end-as-well+ignore+index \"\"\"\n\nFROM completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    given a string and a character and a list, replace string at specified index in list with given character and also if given index is 1+ the length of the string, add character at end as well\n    \"\"\"\n        for i in l:\n        if i < len(s):\n            s = s[:i] + c + s[i+1:]\n        else:\n            s = s + c\n    return s\n\n\nTO completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    given a string and a character and a list, replace string at specified index in list with given character if given index is not in the length of the string, ignore index\n    \"\"\"\n        for i in l:\n        if i < len(s):\n            s = s[:i] + c + s[i+1:]\n    return s\n",
                "id": 1,
                "key": 1
            },
            {
                "diff": 6,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student57",
                "hover": "username:student57\nedge: (0->4)\ndiff:\n--- \n+++ \n@@ -19,5 +19,18 @@\n list with given+character.+if+given+index+is+1++the+length+of+string,+add character+at+end \"\"\"\n\nFROM completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    given a string and a character and a list, replace string at specified index in list with given character\n    \"\"\"\n        for i in l:\n        s = s[:i] + c + s[i+1:]\n    return s\n\n\nTO completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    given a string and a character and a list, replace string at specified index in list with given character. if given index is 1+ the length of string, add character at end\n    \"\"\"\n        if l[0] == 0:\n        s = c + s[l[0]+1:]\n    elif l[0] == len(s)-1:\n        s = s[:l[0]] + c\n    else:\n        s = s[:l[0]] + c + s[l[0]+1:]\n    return s\n",
                "id": 4,
                "key": 0
            },
            {
                "diff": 8,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student57",
                "hover": "username:student57\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -19,5 +19,23 @@\n list with given-character.+character+and+also+if+given+index+is+1++the+length+of+the+string,+add+character+at+end+as+well \"\"\"\n\nFROM completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    given a string and a character and a list, replace string at specified index in list with given character. \n    \"\"\"\n        for i in l:\n        s = s[:i] + c + s[i+1:]\n    return s\n\n\nTO completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    given a string and a character and a list, replace string at specified index in list with given character and also if given index is 1+ the length of the string, add character at end as well\n    \"\"\"\n        for i in l:\n        if i < len(s):\n            s = s[:i] + c + s[i+1:]\n        else:\n            s = s + c\n    return s\n",
                "id": 0,
                "key": 0
            }
        ],
        [
            {
                "diff": 4,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student20",
                "hover": "username:student20\nedge: (1->1)\ndiff:\n--- \n+++ \n@@ -23,8 +23,7 @@\n out of range-don't-change-that-letter.+ignore+the+index. \"\"\"\n\nFROM completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    Replace letters in input s that are located in index l to the input c.\nIf index l is out of range don't change that letter.\n    \"\"\"\n        s = list(s)\n    for i in range(len(l)):\n        if l[i] < len(s):\n            s[l[i]] = c\n    return ''.join(s)\n\n\nTO completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    Replace letters in input s that are located in index l to the input c.\nIf index l is out of range ignore the index.\n    \"\"\"\n        s = list(s)\n    for i in l:\n        if i < len(s):\n            s[i] = c\n    return ''.join(s)\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student20",
                "hover": "username:student20\nedge: (2->3)\ndiff:\n--- \n+++ \n@@ -4,12 +4,16 @@\n Replace letters in+input s that are located in+index l to+the+input c \"\"\"\n\nFROM completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    Replace letters in s that are located in l to c\n    \"\"\"\n        for i in l:\n        s = s.replace(i,c)\n    return s\n\n\nTO completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    Replace letters in input s that are located in index l to the input c\n    \"\"\"\n        s = list(s)\n    for i in l:\n        s[i] = c\n    return ''.join(s)\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 2,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student20",
                "hover": "username:student20\nedge: (3->3)\ndiff:\n\n\nFROM completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    Replace letters in input s that are located in index l to the input c\n    \"\"\"\n        s = list(s)\n    for i in l:\n        s[i] = c\n    return ''.join(s)\n\n\nTO completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    Replace letters in input s that are located in index l to the input c\n    \"\"\"\n        s = list(s)\n    for i in l:\n        s[i] = c\n    return ''.join(s)\n",
                "id": 3,
                "key": 0
            },
            {
                "diff": 3,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student20",
                "hover": "username:student20\nedge: (3->1)\ndiff:\n--- \n+++ \n@@ -15,5 +15,16 @@\n to the input-c+c.+If+index+l+is+out+of+range+don't+change+that+letter. \"\"\"\n\nFROM completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    Replace letters in input s that are located in index l to the input c\n    \"\"\"\n        s = list(s)\n    for i in l:\n        s[i] = c\n    return ''.join(s)\n\n\nTO completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    Replace letters in input s that are located in index l to the input c.\nIf index l is out of range don't change that letter.\n    \"\"\"\n        s = list(s)\n    for i in range(len(l)):\n        if l[i] < len(s):\n            s[l[i]] = c\n    return ''.join(s)\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 5,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student42",
                "hover": "username:student42\nedge: (3->1)\ndiff:\n--- \n+++ \n@@ -26,5 +26,17 @@\n return the new-string+string.+if+an+index+is+outside+the+range+of+the+list,+ignore+it. \"\"\"\n\nFROM completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and return the new string \n    \"\"\"\n        s = list(s)\n    for i in l:\n        s[i] = c\n    return ''.join(s)\n\n\nTO completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and return the new string. if an index is outside the range of the list, ignore it.  \n    \"\"\"\n        for i in l:\n        if i < len(s) and i >= 0:\n            s = s[:i] + c + s[i+1:]\n    return s\n",
                "id": 1,
                "key": 1
            },
            {
                "diff": 10,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student77",
                "hover": "username:student77\nedge: (3->1)\ndiff:\n--- \n+++ \n@@ -31,4 +31,16 @@\n with the letter.+If+the+location+is+outside+the+range+of+the+list,+do+nothing. \"\"\"\n\nFROM completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    Given a string, a letter, and locations specified in a list, remove the letters in the string in the locations specified in the list, and replace them with the letter.\n    \"\"\"\n        s = list(s)\n    for i in l:\n        s[i] = c\n    return ''.join(s)\n\n\nTO completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    Given a string, a letter, and locations specified in a list, remove the letters in the string in the locations specified in the list, and replace them with the letter. If the location is outside the range of the list, do nothing.\n    \"\"\"\n        s = list(s)\n    for i in l:\n        if i < len(s):\n            s[i] = c\n    return \"\".join(s)\n",
                "id": 1,
                "key": 2
            }
        ],
        [
            {
                "diff": 7,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student57",
                "hover": "username:student57\nedge: (4->0)\ndiff:\n--- \n+++ \n@@ -20,17 +20,4 @@\n with given character.-if-given-index-is-1+-the-length-of-string,-add-character-at-end \"\"\"\n\nFROM completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    given a string and a character and a list, replace string at specified index in list with given character. if given index is 1+ the length of string, add character at end\n    \"\"\"\n        if l[0] == 0:\n        s = c + s[l[0]+1:]\n    elif l[0] == len(s)-1:\n        s = s[:l[0]] + c\n    else:\n        s = s[:l[0]] + c + s[l[0]+1:]\n    return s\n\n\nTO completion:\ndef set_chars(s,c,l):\n    \"\"\"\n    given a string and a character and a list, replace string at specified index in list with given character. \n    \"\"\"\n        for i in l:\n        s = s[:i] + c + s[i+1:]\n    return s\n",
                "id": 0,
                "key": 0
            }
        ]
    ]
}