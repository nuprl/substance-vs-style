{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 2,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n  File \"/tmp/file.py\", line 7, in sortBySuccessRate\n    success.append(nominations[i][1]/nominations[i][2])\nKeyError: 1\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n  File \"/tmp/file.py\", line 7, in sortBySuccessRate\n    success.append(nominations[i][1]/nominations[i][2])\nKeyError: 1\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\n  File \"/tmp/file.py\", line 7, in sortBySuccessRate\n    success.append(nominations[i][1]/nominations[i][2])\nKeyError: 1\n",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\n[{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.6428571428571429}, {'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544}, {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}]\n\n[{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.2894736842105263}, {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.2682926829268293}, {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22448979591836735}]\n\n[{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544}, {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22448979591836735}]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 1
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\n[{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, {'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'success': 0.35}]\n\n[{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29}, {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27}, {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\n\n[{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'success': 0.35}, {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 2
        },
        {
            "stderr_id": 1,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    for key, value in nominations.items():\nAttributeError: 'list' object has no attribute 'items'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    for key, value in nominations.items():\nAttributeError: 'list' object has no attribute 'items'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    for key, value in nominations.items():\nAttributeError: 'list' object has no attribute 'items'\n",
            "color": "grey",
            "id": 3
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student40",
                "hover": "username:student40\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -1,27 +1,38 @@\n def sortBySuccessRate(nominations): \"\"\"+the+input+is+a+list+of+dictionaries. the function will divide the-number-of-wins+value+within+key+'wins' by the+value+within+key+'noms'.+the+new number-of-noms.-this will be-defined-by-the+stores+as+a new-variable+key, 'success'. the function@@ -31,13 +42,21 @@\n a list that-orders+reorders the-input+dictionaries+within+the+original+list, in-increasing order of+highest success-values+value+to+lowest+success+value. \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    the function will divide the number of wins by the number of noms. this will be defined by the new variable 'success'. the function will then return a list that orders the input in increasing order of success values\n    \"\"\"\n        success = []\n    for i in range(len(nominations)):\n        success.append(nominations[i][1]/nominations[i][2])\n    return [x for _,x in sorted(zip(success,nominations))]\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    the input is a list of dictionaries. the function will divide the value within key 'wins' by the value within key 'noms'. the new number will be stores as a new key, 'success'. the function will then return a list that reorders the dictionaries within the original list, in order of highest success value to lowest success value.\n    \"\"\"\n        for i in nominations:\n        i['success'] = i['wins']/i['noms']\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student40",
                "hover": "username:student40\nedge: (1->2)\ndiff:\n--- \n+++ \n@@ -23,6 +23,15 @@\n within key 'noms'.+this+number+will+be+rounded+to+two+decimal+values. the new number\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    the input is a list of dictionaries. the function will divide the value within key 'wins' by the value within key 'noms'. the new number will be stores as a new key, 'success'. the function will then return a list that reorders the dictionaries within the original list, in order of highest success value to lowest success value.\n    \"\"\"\n        for i in nominations:\n        i['success'] = i['wins']/i['noms']\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    the input is a list of dictionaries. the function will divide the value within key 'wins' by the value within key 'noms'. this number will be rounded to two decimal values. the new number will be stores as a new key, 'success'. the function will then return a list that reorders the dictionaries within the original list, in order of highest success value to lowest success value.\n    \"\"\"\n        for i in nominations:\n        i['success'] = round(i['wins'] / i['noms'], 2)\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n",
                "id": 2,
                "key": 0
            },
            {
                "diff": 2,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student63",
                "hover": "username:student63\nedge: (1->2)\ndiff:\n--- \n+++ \n@@ -46,7 +46,13 @@\n of the key-'noms'.+'noms',+rounded+to+the+second+decimal+place. The outputted list\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms'. The outputted list will also be arranged in descending order based on the value of 'success'.\n    \"\"\"\n        for i in range(len(nominations)):\n        nominations[i]['success'] = nominations[i]['wins'] / nominations[i]['noms']\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms', rounded to the second decimal place. The outputted list will also be arranged in descending order based on the value of 'success'.  \n    \"\"\"\n        for i in range(len(nominations)):\n        nominations[i]['success'] = round(nominations[i]['wins'] / nominations[i]['noms'], 2)\n    return sorted(nominations, key = lambda x: x['success'], reverse = True)\n",
                "id": 2,
                "key": 1
            },
            {
                "diff": 4,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student64",
                "hover": "username:student64\nedge: (1->2)\ndiff:\n--- \n+++ \n@@ -29,6 +29,13 @@\n divided by 'noms.'+Round+success+to+nearest+2+decimal+places. Sort by success\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    For each dictionary in list, create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Sort by success in descending order.\n    \"\"\"\n        for nom in nominations:\n        nom['success'] = nom['wins'] / nom['noms']\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    For each dictionary in list, create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Round success to nearest 2 decimal places. Sort by success in descending order. \n    \"\"\"\n        for dictionary in nominations:\n        wins = dictionary['wins']\n        noms = dictionary['noms']\n        success = round(wins / noms, 2)\n        dictionary['success'] = success\n    sorted_nominations = sorted(nominations, key=lambda x: x['success'], reverse=True)\n    return sorted_nominations\n",
                "id": 2,
                "key": 2
            }
        ],
        [],
        [
            {
                "diff": 3,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student64",
                "hover": "username:student64\nedge: (3->1)\ndiff:\n--- \n+++ \n@@ -1,7 +1,12 @@\n def sortBySuccessRate(nominations): \"\"\"-Create+For+each+dictionary+in+list,+create a new dictionary\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    Create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Sort by success in descending order.\n    \"\"\"\n        newDict = {}\n    for key, value in nominations.items():\n        newDict[key] = value\n        newDict[key]['success'] = value['wins'] / value['noms']\n    sortedDict = sorted(newDict.items(), key=lambda x: x[1]['success'], reverse=True)\n    return sortedDict\n\nprint(sortBySuccessRate(nominations))\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    For each dictionary in list, create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Sort by success in descending order.\n    \"\"\"\n        for nom in nominations:\n        nom['success'] = nom['wins'] / nom['noms']\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n",
                "id": 1,
                "key": 0
            }
        ]
    ]
}