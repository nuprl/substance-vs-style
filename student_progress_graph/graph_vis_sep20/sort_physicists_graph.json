{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 5,
            "hover": "stdout:\n_no_stdout_\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\n['Peiris', 'Ghez', 'Strickland']\n\n['Peiris', 'Ghez', 'Strickland']\n\n['Ghez']\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 1,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 5, in sort_physicists\n    return sorted(scientists, key=lambda x: int(x.split()[-1]))\n  File \"/tmp/file.py\", line 5, in <lambda>\n    return sorted(scientists, key=lambda x: int(x.split()[-1]))\nAttributeError: 'list' object has no attribute 'split'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 5, in sort_physicists\n    return sorted(scientists, key=lambda x: int(x.split()[-1]))\n  File \"/tmp/file.py\", line 5, in <lambda>\n    return sorted(scientists, key=lambda x: int(x.split()[-1]))\nAttributeError: 'list' object has no attribute 'split'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]))\n  File \"/tmp/file.py\", line 5, in sort_physicists\n    return sorted(scientists, key=lambda x: int(x.split()[-1]))\n  File \"/tmp/file.py\", line 5, in <lambda>\n    return sorted(scientists, key=lambda x: int(x.split()[-1]))\nAttributeError: 'list' object has no attribute 'split'\n",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n[['Peiris', 48, 'Physics'], ['Ghez', 56, 'Physics'], ['Strickland', 62, 'Physics'], ['Youyou', 91, 'Chemistry']]\n\n[['Peiris', 48, 'Physics'], ['Ghez', 56, 'Physics'], ['Strickland', 62, 'Physics']]\n\n[['Ghez', 56, 'Physics'], ['Taylor', 59, 'Computer Science'], ['Tu', 91, 'Chemistry']]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 3
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\n['Ghez', 'Peiris', 'Strickland']\n\n['Ghez', 'Peiris', 'Strickland']\n\n['Ghez']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 4
        },
        {
            "stderr_id": 0,
            "stdout_id": 4,
            "hover": "stdout:\n[['Peiris', 48, 'Physics'], ['Ghez', 56, 'Physics'], ['Strickland', 62, 'Physics']]\n\n[['Peiris', 48, 'Physics'], ['Ghez', 56, 'Physics'], ['Strickland', 62, 'Physics']]\n\n[['Ghez', 56, 'Physics']]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 5
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student12",
                "hover": "username:student12\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -40,4 +40,8 @@\n the big list.+Return+this+sorted+list \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Create a list of the 0th element in the list within the list if the 2nd element says \"Physics\". Sort the list from least to greatest by looking at the 1st value in the list within the big list.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[1] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Create a list of the 0th element in the list within the list if the 2nd element says \"Physics\". Sort the list from least to greatest by looking at the 1st value in the list within the big list. Return this sorted list\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[1] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: x[1])\n    return physicists\n",
                "id": 0,
                "key": 0
            },
            {
                "diff": 1,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student12",
                "hover": "username:student12\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -8,8 +8,7 @@\n the 0th element-in-the+each list within the@@ -34,7 +33,7 @@\n 1st value in-the+each list within the@@ -43,5 +42,5 @@\n Return this sorted-list+list. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Create a list of the 0th element in the list within the list if the 2nd element says \"Physics\". Sort the list from least to greatest by looking at the 1st value in the list within the big list. Return this sorted list\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[1] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: x[1])\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Create a list of the 0th element each list within the list if the 2nd element says \"Physics\". Sort the list from least to greatest by looking at the 1st value in each list within the big list. Return this sorted list.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[1] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n",
                "id": 0,
                "key": 1
            },
            {
                "diff": 2,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student12",
                "hover": "username:student12\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -1,7 +1,7 @@\n def sort_physicists(scientists): \"\"\"-Create+Return a list of@@ -10,9 +10,8 @@\n element each list-within-the-list+of+scientists if the 2nd@@ -20,7 +19,7 @@\n says \"Physics\". Sort-the+this list from least@@ -37,7 +36,7 @@\n list within the-big+scientists list. Return this\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Create a list of the 0th element each list within the list if the 2nd element says \"Physics\". Sort the list from least to greatest by looking at the 1st value in each list within the big list. Return this sorted list.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[1] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Return a list of the 0th element each list of scientists if the 2nd element says \"Physics\". Sort this list from least to greatest by looking at the 1st value in each list within the scientists list. Return this sorted list.\n    \"\"\"\n        return sorted([i[0] for i in scientists if i[2] == \"Physics\"], key=lambda x: x[1])\n",
                "id": 1,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 3,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student36",
                "hover": "username:student36\nedge: (2->3)\ndiff:\n--- \n+++ \n@@ -1,20 +1,29 @@\n def sort_physicists(scientists): \"\"\"+The+internal+lists+contain+name,+year+graduated+and+subject. If the-list-contains+subject+is \"Physics\" return the-first-string-in-order-of-the-numbers+names+based+on+what+year+they+graduated from lowest to\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    If the list contains \"Physics\" return the first string in order of the numbers from lowest to highest\n    \"\"\"\n        return sorted(scientists, key=lambda x: int(x.split()[-1]))\n\nprint(sort_physicists(scientists))\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return the names based on what year they graduated from lowest to highest\n    \"\"\"\n        return sorted(scientists, key=lambda x: x[1])\n\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 4,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student36",
                "hover": "username:student36\nedge: (3->4)\ndiff:\n--- \n+++ \n@@ -16,10 +16,12 @@\n is \"Physics\" return+just the names-based-on+in+order+of what year they\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return the names based on what year they graduated from lowest to highest\n    \"\"\"\n        return sorted(scientists, key=lambda x: x[1])\n\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return just the names in order of what year they graduated from lowest to highest\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n",
                "id": 4,
                "key": 0
            }
        ],
        [
            {
                "diff": 5,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student36",
                "hover": "username:student36\nedge: (4->1)\ndiff:\n--- \n+++ \n@@ -18,7 +18,7 @@\n return just the-names+names, in order of\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return just the names in order of what year they graduated from lowest to highest\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return just the names, in order of what year they graduated from lowest to highest\n    \"\"\"\n        return [name for name, year, subject in sorted(scientists, key=lambda x: x[1]) if subject == \"Physics\"]\n\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 10,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student77",
                "hover": "username:student77\nedge: (4->1)\ndiff:\n--- \n+++ \n@@ -29,23 +29,45 @@\n Then sort the-list-into-ascending-order+scientists based on the-number+numbers given in the set of+lists+from+smallest+to+largest.+For+example,+if+the+scientist+has+the+smallest+number+attached+to+them+in+the+set+of lists,-but-don't-return+they+should+be+placed+first+in the-number.+output+list. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number given in the set of lists, but don't return the number.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the scientists based on the numbers given in the set of lists from smallest to largest. For example, if the scientist has the smallest number attached to them in the set of lists, they should be placed first in the output list.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: x[1])\n    return physicists\n",
                "id": 1,
                "key": 1
            },
            {
                "diff": 6,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student77",
                "hover": "username:student77\nedge: (4->4)\ndiff:\n--- \n+++ \n@@ -26,4 +26,11 @@\n in a list.+Then+sort+the+list+into+alphabetical+order. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list.\n    \"\"\"\n        return [scientist for scientist, number, subject in scientists if subject == \"Physics\"]\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into alphabetical order.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n",
                "id": 4,
                "key": 0
            },
            {
                "diff": 9,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student77",
                "hover": "username:student77\nedge: (4->4)\ndiff:\n--- \n+++ \n@@ -36,7 +36,13 @@\n based on the-number,+number+given+in+the+set+of+lists, but don't return\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number, but don't return the number.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number given in the set of lists, but don't return the number.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n",
                "id": 4,
                "key": 1
            },
            {
                "diff": 7,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student77",
                "hover": "username:student77\nedge: (4->5)\ndiff:\n--- \n+++ \n@@ -31,6 +31,10 @@\n the list into-alphabetical-order.+ascending+order+based+on+the+number. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into alphabetical order.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist)\n    physicists.sort(key=lambda x: x[1])\n    return physicists\n",
                "id": 5,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student77",
                "hover": "username:student77\nedge: (5->4)\ndiff:\n--- \n+++ \n@@ -36,5 +36,10 @@\n based on the+number,+but+don't+return+the number. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist)\n    physicists.sort(key=lambda x: x[1])\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number, but don't return the number.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n",
                "id": 4,
                "key": 0
            }
        ]
    ]
}