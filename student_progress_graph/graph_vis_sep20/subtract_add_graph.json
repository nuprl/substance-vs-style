{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 7,
            "stdout_id": 1,
            "hover": "stdout:\n\n\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(subtract_add(['1', '2', '3', '4']))\n  File \"/tmp/file.py\", line 12, in subtract_add\n    even += lst[i]\nTypeError: unsupported operand type(s) for +=: 'int' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(subtract_add(['0', '2']))\n  File \"/tmp/file.py\", line 12, in subtract_add\n    even += lst[i]\nTypeError: unsupported operand type(s) for +=: 'int' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(subtract_add(['0', '0']))\n  File \"/tmp/file.py\", line 12, in subtract_add\n    even += lst[i]\nTypeError: unsupported operand type(s) for +=: 'int' and 'str'\n\n",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n-2\n\n-2\n\n0\n\n0\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 0,
            "stdout_id": 5,
            "hover": "stdout:\n2\n\n2\n\n0\n\n0\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 6,
            "stdout_id": 1,
            "hover": "stdout:\n\n\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(subtract_add(['1', '2', '3', '4']))\n  File \"/tmp/file.py\", line 13, in subtract_add\n    result -= lst[i]\nTypeError: unsupported operand type(s) for -=: 'str' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(subtract_add(['0', '2']))\n  File \"/tmp/file.py\", line 13, in subtract_add\n    result -= lst[i]\nTypeError: unsupported operand type(s) for -=: 'str' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(subtract_add(['0', '0']))\n  File \"/tmp/file.py\", line 13, in subtract_add\n    result -= lst[i]\nTypeError: unsupported operand type(s) for -=: 'str' and 'str'\n\n",
            "color": "grey",
            "id": 3
        },
        {
            "stderr_id": 3,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 12\n    return (int(lst[0]) + int(lst[1])) * (int(lst[2]) - int(lst[3\n                                                               ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 12\n    return (int(lst[0]) + int(lst[1])) * (int(lst[2]) - int(lst[3\n                                                               ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 12\n    return (int(lst[0]) + int(lst[1])) * (int(lst[2]) - int(lst[3\n                                                               ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 12\n    return (int(lst[0]) + int(lst[1])) * (int(lst[2]) - int(lst[3\n                                                               ^\nSyntaxError: '[' was never closed\n",
            "color": "grey",
            "id": 4
        },
        {
            "stderr_id": 2,
            "stdout_id": 4,
            "hover": "stdout:\n-4\n\n\n\n0\n\nstderr:\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(subtract_add(['0', '2']))\n  File \"/tmp/file.py\", line 10, in subtract_add\n    return int(lst[0]) + int(lst[1]) - int(lst[2]) - int(lst[3])\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(subtract_add(['0', '0']))\n  File \"/tmp/file.py\", line 10, in subtract_add\n    return int(lst[0]) + int(lst[1]) - int(lst[2]) - int(lst[3])\nIndexError: list index out of range\n\n",
            "color": "blue",
            "id": 5
        },
        {
            "stderr_id": 4,
            "stdout_id": 1,
            "hover": "stdout:\n\n\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(subtract_add(['1', '2', '3', '4']))\n  File \"/tmp/file.py\", line 10, in subtract_add\n    return (lst[0] - lst[1]) + (lst[2] - lst[3])\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(subtract_add(['0', '2']))\n  File \"/tmp/file.py\", line 8, in subtract_add\n    return lst[0] - lst[1]\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(subtract_add(['0', '0']))\n  File \"/tmp/file.py\", line 8, in subtract_add\n    return lst[0] - lst[1]\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\n",
            "color": "blue",
            "id": 6
        },
        {
            "stderr_id": 5,
            "stdout_id": 1,
            "hover": "stdout:\n\n\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(subtract_add(['1', '2', '3', '4']))\n  File \"/tmp/file.py\", line 8, in subtract_add\n    return (lst[0] - lst[1]) + (lst[2] - lst[3])\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(subtract_add(['0', '2']))\n  File \"/tmp/file.py\", line 6, in subtract_add\n    return lst[0] - lst[1]\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(subtract_add(['0', '0']))\n  File \"/tmp/file.py\", line 6, in subtract_add\n    return lst[0] - lst[1]\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\n",
            "color": "blue",
            "id": 7
        },
        {
            "stderr_id": 1,
            "stdout_id": 2,
            "hover": "stdout:\n-2\n\n-2\n\n0\n\n\nstderr:\n\n\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(subtract_add([ ]))\n  File \"/tmp/file.py\", line 6, in subtract_add\n    count = int(lst[0])\nIndexError: list index out of range\n",
            "color": "blue",
            "id": 8
        },
        {
            "stderr_id": 0,
            "stdout_id": 6,
            "hover": "stdout:\n4\n\n2\n\n0\n\n0\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 9
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student27",
                "hover": "username:student27\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -8,7 +8,7 @@\n a list of-integers.+strings. Return 0 if@@ -17,6 +17,12 @@\n is empty. Otherwise,+convert+the+strings+into+integers,+then subtract the sum\n\nFROM completion:\ndef subtract_add(lst):\n    \"\"\"\n    The input will be a list of integers. Return 0 if the list is empty. Otherwise, subtract the sum of all the integers with odd positions from the sum of all the integers with even positions.\n    \"\"\"\n        if len(lst) == 0:\n        return 0\n    else:\n        even = 0\n        odd = 0\n        for i in range(len(lst)):\n            if i % 2 == 0:\n                even += lst[i]\n            else:\n                odd += lst[i]\n        return even - odd\n\n\nTO completion:\ndef subtract_add(lst):\n    \"\"\"\n    The input will be a list of strings. Return 0 if the list is empty. Otherwise, convert the strings into integers, then subtract the sum of all the integers with odd positions from the sum of all the integers with even positions. \n    \"\"\"\n        if len(lst) == 0:\n        return 0\n    else:\n        return sum([int(lst[i]) for i in range(len(lst)) if i % 2 == 0]) - sum([int(lst[i]) for i in range(len(lst)) if i % 2 != 0])\n",
                "id": 1,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 1,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student29",
                "hover": "username:student29\nedge: (2->2)\ndiff:\n--- \n+++ \n@@ -18,7 +18,7 @@\n correspond to an-even+odd index by -1.\n\nFROM completion:\ndef subtract_add(lst):\n    \"\"\"\n    For each list entry, convert the input to an integer. Multiply list entries that correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.\n    \"\"\"\n        if len(lst) == 0:\n        return 0\n    else:\n        for i in range(len(lst)):\n            lst[i] = int(lst[i])\n            if i % 2 == 0:\n                lst[i] *= -1\n        return sum(lst)\n\n\nTO completion:\ndef subtract_add(lst):\n    \"\"\"\n    For each list entry, convert the input to an integer. Multiply list entries that correspond to an odd index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.\n    \"\"\"\n        sum = 0\n    for i in range(len(lst)):\n        lst[i] = int(lst[i])\n        if i % 2 == 0:\n            lst[i] *= -1\n        sum += lst[i]\n    return sum\n",
                "id": 2,
                "key": 0
            },
            {
                "diff": 2,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student29",
                "hover": "username:student29\nedge: (2->1)\ndiff:\n--- \n+++ \n@@ -15,10 +15,11 @@\n list entries that+don't correspond to an-odd+even index by -1.\n\nFROM completion:\ndef subtract_add(lst):\n    \"\"\"\n    For each list entry, convert the input to an integer. Multiply list entries that correspond to an odd index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.\n    \"\"\"\n        sum = 0\n    for i in range(len(lst)):\n        lst[i] = int(lst[i])\n        if i % 2 == 0:\n            lst[i] *= -1\n        sum += lst[i]\n    return sum\n\n\nTO completion:\ndef subtract_add(lst):\n    \"\"\"\n    For each list entry, convert the input to an integer. Multiply list entries that don't correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.\n    \"\"\"\n        if lst == []:\n        return 0\n    else:\n        total = 0\n        for i in range(len(lst)):\n            if i % 2 == 0:\n                total += int(lst[i])\n            else:\n                total -= int(lst[i])\n        return total\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 8,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student68",
                "hover": "username:student68\nedge: (2->8)\ndiff:\n--- \n+++ \n@@ -13,33 +13,36 @@\n characters into integers.-Starting-from-the-front-of-the-array,-subtract+Store the first-two-numbers-and-store-that+number+in+the+array in a count variable. then-add+subtract the next number+from+the+count.+With+the+next+number,+add+it to the-count.+count+and+then alternate between subtracting\n\nFROM completion:\ndef subtract_add(lst):\n    \"\"\"\n    given an array of characters containing integers, convert the characters into integers. Starting from the front of the array, subtract the first two numbers and store that in a count variable. then add the next number to the count. alternate between subtracting and adding until you get to the end of the array. return the count\n\n    \"\"\"\n        count = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            count -= int(lst[i])\n        else:\n            count += int(lst[i])\n    return count\n\n\n\nTO completion:\ndef subtract_add(lst):\n    \"\"\"\n    given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count\n\n    \"\"\"\n        count = int(lst[0])\n    for i in range(1, len(lst)):\n        if i % 2 == 1:\n            count -= int(lst[i])\n        else:\n            count += int(lst[i])\n    return count\n",
                "id": 8,
                "key": 0
            }
        ],
        [
            {
                "diff": 3,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student49",
                "hover": "username:student49\nedge: (3->1)\ndiff:\n--- \n+++ \n@@ -5,7 +5,13 @@\n a list of-integers,+strings,+type+cast+to+integers+and+then take the first\n\nFROM completion:\ndef subtract_add(lst):\n    \"\"\"\n    Given a list of integers, take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output\n    \"\"\"\n        if not lst:\n        return 0\n    else:\n        result = lst[0]\n        for i in range(1, len(lst)):\n            if i % 2 == 0:\n                result += lst[i]\n            else:\n                result -= lst[i]\n        return result\n\n\n\nTO completion:\ndef subtract_add(lst):\n    \"\"\"\n    Given a list of strings, type cast to integers and then take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output\n    \"\"\"\n        if len(lst) == 0:\n        return 0\n    else:\n        lst = [int(i) for i in lst]\n        output = lst[0]\n        for i in range(1, len(lst)):\n            if i % 2 == 0:\n                output += lst[i]\n            else:\n                output -= lst[i]\n        return output\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 4,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student66",
                "hover": "username:student66\nedge: (4->5)\ndiff:\n\n\nFROM completion:\ndef subtract_add(lst):\n    \"\"\"\n    Take the first two items in the array list and change them into integers then take then take the next two integers and subtract them from each other. sum the two values return the product. if there are just two items in the list subtract the second one from the first one and return the product. if there are no items then return zero\n    \"\"\"\n        if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return lst[0]\n    elif len(lst) == 2:\n        return lst[0] - lst[1]\n    else:\n        return (int(lst[0]) + int(lst[1])) * (int(lst[2]) - int(lst[3\n\nTO completion:\ndef subtract_add(lst):\n    \"\"\"\n    Take the first two items in the array list and change them into integers then take then take the next two integers and subtract them from each other. sum the two values return the product. if there are just two items in the list subtract the second one from the first one and return the product. if there are no items then return zero\n    \"\"\"\n        if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return int(lst[0]) + int(lst[1]) - int(lst[2]) - int(lst[3])\n\n",
                "id": 5,
                "key": 0
            }
        ],
        [
            {
                "diff": 5,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student66",
                "hover": "username:student66\nedge: (5->6)\ndiff:\n--- \n+++ \n@@ -1,41 +1,32 @@\n def subtract_add(lst): \"\"\"-Take+Subtract the-first-two-items+second+item in the array list-and-change-them-into-integers+from+the+first+item. then-take+subtract+the+forth+item+from+the+third+item then-take-the-next-two-integers-and-subtract-them-from-each-other.-sum+add the two-values-return-the-product.+sums. if there are\n\nFROM completion:\ndef subtract_add(lst):\n    \"\"\"\n    Take the first two items in the array list and change them into integers then take then take the next two integers and subtract them from each other. sum the two values return the product. if there are just two items in the list subtract the second one from the first one and return the product. if there are no items then return zero\n    \"\"\"\n        if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return int(lst[0]) + int(lst[1]) - int(lst[2]) - int(lst[3])\n\n\n\nTO completion:\ndef subtract_add(lst):\n    \"\"\"\n    Subtract the second item in the array list from the first item. then subtract the forth item from the third item then add the two sums. if there are just two items in the list subtract the second one from the first one and return the product. if there are no items then return zero\n    \"\"\"\n        if len(lst) == 0:\n        return 0\n    elif len(lst) == 2:\n        return lst[0] - lst[1]\n    else:\n        return (lst[0] - lst[1]) + (lst[2] - lst[3])\n",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 6,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student66",
                "hover": "username:student66\nedge: (6->7)\ndiff:\n--- \n+++ \n@@ -1,6 +1,10 @@\n def subtract_add(lst): \"\"\"+Change+them+into+integers. Subtract the second\n\nFROM completion:\ndef subtract_add(lst):\n    \"\"\"\n    Subtract the second item in the array list from the first item. then subtract the forth item from the third item then add the two sums. if there are just two items in the list subtract the second one from the first one and return the product. if there are no items then return zero\n    \"\"\"\n        if len(lst) == 0:\n        return 0\n    elif len(lst) == 2:\n        return lst[0] - lst[1]\n    else:\n        return (lst[0] - lst[1]) + (lst[2] - lst[3])\n\n\nTO completion:\ndef subtract_add(lst):\n    \"\"\"\n    Change them into integers. Subtract the second item in the array list from the first item. then subtract the forth item from the third item then add the two sums. if there are just two items in the list subtract the second one from the first one and return the product. if there are no items then return zero\n    \"\"\"\n        if len(lst) == 2:\n        return lst[0] - lst[1]\n    elif len(lst) == 4:\n        return (lst[0] - lst[1]) + (lst[2] - lst[3])\n    else:\n        return 0\n\n",
                "id": 7,
                "key": 0
            }
        ],
        [
            {
                "diff": 7,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student66",
                "hover": "username:student66\nedge: (7->1)\ndiff:\n--- \n+++ \n@@ -2,9 +2,12 @@\n subtract_add(lst): \"\"\" Change-them+the+first+two+items into-integers.+integers Subtract the second@@ -17,6 +20,14 @@\n the first item.+change+the+third+and+forth+items+into+integers then subtract the@@ -38,8 +49,13 @@\n two items in-the list+change+those+two+items+into+integers subtract the second\n\nFROM completion:\ndef subtract_add(lst):\n    \"\"\"\n    Change them into integers. Subtract the second item in the array list from the first item. then subtract the forth item from the third item then add the two sums. if there are just two items in the list subtract the second one from the first one and return the product. if there are no items then return zero\n    \"\"\"\n        if len(lst) == 2:\n        return lst[0] - lst[1]\n    elif len(lst) == 4:\n        return (lst[0] - lst[1]) + (lst[2] - lst[3])\n    else:\n        return 0\n\n\n\nTO completion:\ndef subtract_add(lst):\n    \"\"\"\n    Change the first two items into integers Subtract the second item in the array list from the first item. change the third and forth items into integers then subtract the forth item from the third item then add the two sums. if there are just two items in list change those two items into integers subtract the second one from the first one and return the product. if there are no items then return zero\n    \"\"\"\n        if len(lst) == 0:\n        return 0\n    elif len(lst) == 2:\n        return int(lst[0]) - int(lst[1])\n    else:\n        return int(lst[0]) - int(lst[1]) + int(lst[2]) - int(lst[3])\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 9,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student68",
                "hover": "username:student68\nedge: (8->9)\ndiff:\n--- \n+++ \n@@ -1,6 +1,19 @@\n def subtract_add(lst): \"\"\"+if+there+are+no+values+stored+in+the+given+array,+return+0.+Else, given an array\n\nFROM completion:\ndef subtract_add(lst):\n    \"\"\"\n    given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count\n\n    \"\"\"\n        count = int(lst[0])\n    for i in range(1, len(lst)):\n        if i % 2 == 1:\n            count -= int(lst[i])\n        else:\n            count += int(lst[i])\n    return count\n\n\nTO completion:\ndef subtract_add(lst):\n    \"\"\"\n    if there are no values stored in the given array, return 0. Else, given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count\n\n    \"\"\"\n        if len(lst) == 0:\n        return 0\n    count = int(lst[0])\n    for i in range(1, len(lst)):\n        if i % 2 == 0:\n            count -= int(lst[i])\n        else:\n            count += int(lst[i])\n    return count\n\n",
                "id": 9,
                "key": 0
            }
        ],
        [
            {
                "diff": 10,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student68",
                "hover": "username:student68\nedge: (9->1)\ndiff:\n--- \n+++ \n@@ -1,20 +1,7 @@\n def subtract_add(lst): \"\"\"-if-there-are-no-values-stored-in-the-given-array,-return-0.-Else,-given+Given an array of@@ -72,5 +59,13 @@\n array. return the-count+count.+If+the+given+array+is+empty,+return+0. \"\"\"\n\nFROM completion:\ndef subtract_add(lst):\n    \"\"\"\n    if there are no values stored in the given array, return 0. Else, given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count\n\n    \"\"\"\n        if len(lst) == 0:\n        return 0\n    count = int(lst[0])\n    for i in range(1, len(lst)):\n        if i % 2 == 0:\n            count -= int(lst[i])\n        else:\n            count += int(lst[i])\n    return count\n\n\n\nTO completion:\ndef subtract_add(lst):\n    \"\"\"\n    Given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count. If the given array is empty, return 0. \n\n    \"\"\"\n        if len(lst) == 0:\n        return 0\n    count = int(lst[0])\n    for i in range(1, len(lst)):\n        if i % 2 == 1:\n            count -= int(lst[i])\n        else:\n            count += int(lst[i])\n    return count\n\n",
                "id": 1,
                "key": 0
            }
        ]
    ]
}