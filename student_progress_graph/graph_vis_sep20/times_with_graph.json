{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 2,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    if meetings[i][1][j] in times_with_dict:\nNameError: name 'times_with_dict' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    if meetings[i][1][j] in times_with_dict:\nNameError: name 'times_with_dict' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    if meetings[i][1][j] in times_with_dict:\nNameError: name 'times_with_dict' is not defined\n",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 5,
            "hover": "stdout:\n{'Alice': 30, 'Bob': 30, 'Carol': 30}\n\n{'Alice': 50, 'Bob': 50, 'Carol': 30}\n\n{'Alice': 10, 'Bob': 10, 'Carol': 5}\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 0,
            "stdout_id": 4,
            "hover": "stdout:\n{'Alice': 30, 'Bob': 30, 'Carol': 30}\n\n{'Alice': 20, 'Bob': 20, 'Carol': 30}\n\n{'Alice': 10, 'Bob': 10, 'Carol': 5}\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n[[0, ['Alice', 'Bob', 'Carol']]]\n\n[[1, ['Alice', 'Bob', 'Carol']], [0, ['Alice', 'Bob']]]\n\n[[1, ['Alice', 'Bob']], [0, ['Carol']]]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 3
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\nNone\n\nNone\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 4
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\n['30:30']\n\n['30:30', '20:20']\n\n['10:10', '5:5']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 5
        },
        {
            "stderr_id": 0,
            "stdout_id": 6,
            "hover": "stdout:\n{'Alice': [30], 'Bob': [30], 'Carol': [30]}\n\n{'Alice': [30, 20], 'Bob': [30, 20], 'Carol': [30]}\n\n{'Alice': [10], 'Bob': [10], 'Carol': [5]}\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 6
        },
        {
            "stderr_id": 1,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 6\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\nIndentationError: expected an indented block after 'for' statement on line 5\n",
            "color": "blue",
            "id": 7
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student60",
                "hover": "username:student60\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -56,4 +56,38 @@\n added to that.+The+function+then+would+return+a+dictionary+containing+the+total+value+assigned+to+every+string.+Given+[+[30,+['Alice',+'Bob',+'Carol']]+],+the+function+would+return+{+'Alice':+30,+'Bob':+30,+'Carol':+30+} \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. \n    \"\"\"\n        for i in range(len(meetings)):\n        for j in range(len(meetings[i][1])):\n            if meetings[i][1][j] in times_with_dict:\n                times_with_dict[meetings[i][1][j]] += meetings[i][0]\n            else:\n                times_with_dict[meetings[i][1][j]] = meetings[i][0]\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. The function then would return a dictionary containing the total value assigned to every string. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would return { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\n\n    \"\"\"\n        dic = {}\n    for i in meetings:\n        for j in i[1]:\n            if j in dic:\n                dic[j] += i[0]\n            else:\n                dic[j] = i[0]\n    return dic\n",
                "id": 1,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 1,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student69",
                "hover": "username:student69\nedge: (2->1)\ndiff:\n--- \n+++ \n@@ -51,4 +51,19 @@\n is a value.+if+the+name+appears+more+than+once,+add+the+new+number+to+the+previous+number \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. \n    \"\"\"\n        return {name: time for time, names in meetings for name in names}\n\nprint(times_with([[1, [\"A\", \"B\", \"C\"]], [2, [\"A\", \"B\", \"D\"]]]))\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. if the name appears more than once, add the new number to the previous number\n    \"\"\"\n        times_dict = {}\n    for meeting in meetings:\n        for name in meeting[1]:\n            if name in times_dict:\n                times_dict[name] += meeting[0]\n            else:\n                times_dict[name] = meeting[0]\n    return times_dict\n\nprint(times_with([[1, [\"A\", \"B\"]], [2, [\"A\", \"C\"]]]))\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 2,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student75",
                "hover": "username:student75\nedge: (3->4)\ndiff:\n--- \n+++ \n@@ -17,5 +17,5 @@\n and output of-val1,2,3:val1+val:val1 \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1,2,3:val1\n    \"\"\"\n        #print(meetings)\n    times = []\n    for meeting in meetings:\n        times.append(meeting[0])\n    times.sort()\n    #print(times)\n    #print(meetings)\n    for meeting in meetings:\n        meeting[0] = times.index(meeting[0])\n    #print(meetings)\n    return meetings\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val:val1\n    \"\"\"\n        #print(meetings)\n    #print(meetings[0])\n    #print(meetings[0][0])\n    #print(meetings[0][1])\n    #print(meetings[0][1][0])\n    #print(meetings[0][1][1])\n    #print(meetings[0][1][2])\n    #print(meetings[0][1][3])\n    #",
                "id": 4,
                "key": 0
            }
        ],
        [
            {
                "diff": 3,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student75",
                "hover": "username:student75\nedge: (4->5)\ndiff:\n--- \n+++ \n@@ -17,5 +17,7 @@\n and output of-val:val1+val1:val1,+val2:val1,+val3:val1 \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val:val1\n    \"\"\"\n        #print(meetings)\n    #print(meetings[0])\n    #print(meetings[0][0])\n    #print(meetings[0][1])\n    #print(meetings[0][1][0])\n    #print(meetings[0][1][1])\n    #print(meetings[0][1][2])\n    #print(meetings[0][1][3])\n    #\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1:val1, val2:val1, val3:val1\n    \"\"\"\n        return [str(meetings[0]) + \":\" + str(meetings[0]) for meetings in meetings]\n",
                "id": 5,
                "key": 0
            }
        ],
        [
            {
                "diff": 4,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student75",
                "hover": "username:student75\nedge: (5->6)\ndiff:\n--- \n+++ \n@@ -17,7 +17,5 @@\n and output of-val1:val1,-val2:val1,-val3:val1+val(1,2,3):val0 \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1:val1, val2:val1, val3:val1\n    \"\"\"\n        return [str(meetings[0]) + \":\" + str(meetings[0]) for meetings in meetings]\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val(1,2,3):val0\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        time = meeting[0]\n        people = meeting[1]\n        for person in people:\n            if person in times:\n                times[person].append(time)\n            else:\n                times[person] = [time]\n    return times\n",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 5,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student75",
                "hover": "username:student75\nedge: (6->7)\ndiff:\n--- \n+++ \n@@ -17,5 +17,8 @@\n and output of-val(1,2,3):val0+val(1,2,3):val0,+print+without+\"[]\" \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val(1,2,3):val0\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        time = meeting[0]\n        people = meeting[1]\n        for person in people:\n            if person in times:\n                times[person].append(time)\n            else:\n                times[person] = [time]\n    return times\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val(1,2,3):val0, print without \"[]\"\n    \"\"\"\n        for meeting in meetings:\n        print(str(meeting[1]).replace(\"'\", \"\").replace(\"[\", \"\").replace(\"]\", \"\") + \":\" + str(meeting[0]))\n",
                "id": 7,
                "key": 0
            }
        ],
        [
            {
                "diff": 6,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student75",
                "hover": "username:student75\nedge: (7->1)\ndiff:\n--- \n+++ \n@@ -17,8 +17,9 @@\n and output of-val(1,2,3):val0,-print-without-\"[]\"+val1:val0,+increase+val1+++1 \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val(1,2,3):val0, print without \"[]\"\n    \"\"\"\n        for meeting in meetings:\n        print(str(meeting[1]).replace(\"'\", \"\").replace(\"[\", \"\").replace(\"]\", \"\") + \":\" + str(meeting[0]))\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1:val0, increase val1 + 1\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        for person in meeting[1]:\n            if person not in times:\n                times[person] = 0\n            times[person] += meeting[0]\n    return times\n",
                "id": 1,
                "key": 0
            }
        ]
    ]
}