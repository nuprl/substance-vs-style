{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n15.4401\n\n14.43\n\n10.5\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\n15.44\n\n14.43\n\n10.5\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 0,
            "stdout_id": 4,
            "hover": "stdout:\n15.440100000000001\n\n14.43\n\n10.5\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\n1.0101\n\n0.0\n\n3.5\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 3
        },
        {
            "stderr_id": 1,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07))\n  File \"/tmp/file.py\", line 7, in total_bill\n    total += item[0] * item[1]\nTypeError: unsupported operand type(s) for +=: 'int' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0))\n  File \"/tmp/file.py\", line 7, in total_bill\n    total += item[0] * item[1]\nTypeError: unsupported operand type(s) for +=: 'int' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(total_bill([['bread', 2, 3.50]], 0.5))\n  File \"/tmp/file.py\", line 7, in total_bill\n    total += item[0] * item[1]\nTypeError: unsupported operand type(s) for +=: 'int' and 'str'\n",
            "color": "grey",
            "id": 4
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student33",
                "hover": "username:student33\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -66,5 +66,10 @@\n added to the-\"total\"+\"total\",+truncated+to+two+decimal+places. \"\"\"\n\nFROM completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\"\n    \"\"\"\n        total = 0\n    for item in grocery_list:\n        total += item[1] * item[2]\n    return total + total * sales_tax\n\n\nTO completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\", truncated to two decimal places.\n    \"\"\"\n        total = 0\n    for item in grocery_list:\n        total += item[1] * item[2]\n    total = round(total * (1 + sales_tax), 2)\n    return total\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 3,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student40",
                "hover": "username:student40\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -68,6 +68,17 @@\n and 'tax'. the+value+of+total_cost+will+be+rounded+to+two+decimal+places.+the function will return\n\nFROM completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    the function will multiply the last two values in each list within the list. these numbers will all be added together and stored in variable 'cost'. the variable 'cost' will then be multiplied by the value outside of the list. the product will be stored in a new variable, 'tax'. a new variable, 'total_cost', will contain the sum of the values of 'cost' and 'tax'. the function will return the value of the variable 'total_cost'.\n    \"\"\"\n        cost = 0\n    for item in grocery_list:\n        cost += item[1] * item[2]\n    tax = cost * sales_tax\n    total_cost = cost + tax\n    return total_cost\n\n\nTO completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    the function will multiply the last two values in each list within the list. these numbers will all be added together and stored in variable 'cost'. the variable 'cost' will then be multiplied by the value outside of the list. the product will be stored in a new variable, 'tax'. a new variable, 'total_cost', will contain the sum of the values of 'cost' and 'tax'. the value of total_cost will be rounded to two decimal places. the function will return the value of the variable 'total_cost'.\n    \"\"\"\n        cost = 0\n    for item in grocery_list:\n        cost += item[1] * item[2]\n    tax = cost * sales_tax\n    total_cost = round(cost + tax, 2)\n    return total_cost\n",
                "id": 1,
                "key": 1
            },
            {
                "diff": 4,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student44",
                "hover": "username:student44\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -17,5 +17,19 @@\n index 1 and-2.+2+and+round+to+the+nearest+hundredths+if+there+are+more+than+2+decimal+places. \"\"\"\n\nFROM completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Add up the values of the product of the values stored in index 1 and 2. \n    \"\"\"\n        total = 0\n    for item in grocery_list:\n        total += item[1] * item[2]\n    total += total * sales_tax\n    return total\n\n\nTO completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Add up the values of the product of the values stored in index 1 and 2 and round to the nearest hundredths if there are more than 2 decimal places. \n    \"\"\"\n        total_bill = 0\n    for item in grocery_list:\n        total_bill += round(item[1] * item[2], 2)\n    total_bill = round(total_bill * (1 + sales_tax), 2)\n    return total_bill\n",
                "id": 1,
                "key": 2
            }
        ],
        [],
        [
            {
                "diff": 1,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student35",
                "hover": "username:student35\nedge: (2->1)\ndiff:\n--- \n+++ \n@@ -51,5 +51,13 @@\n to give the+output.+The output+is+rounded+to+two+decimal+points. \"\"\"\n\nFROM completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function is supposed to calculate the total billing amount. From the grocery_list (list of lists), it looks into each individual list and multiplies the numbers provided in each list. Then, it adds all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the output\n    \"\"\"\n        total = 0\n    for item in grocery_list:\n        total += item[1] * item[2]\n    return total * (sales_tax + 1)\n\nprint(total_bill(grocery_list, sales_tax))\n\nTO completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function is supposed to calculate the total billing amount. From the grocery_list (list of lists), it looks into each individual list and multiplies the numbers provided in each list. Then, it adds all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the output. The output is rounded to two decimal points.\n    \"\"\"\n        total_bill = 0\n    for i in grocery_list:\n        total_bill += i[1] * i[2]\n    total_bill = round(total_bill * (sales_tax + 1), 2)\n    return total_bill\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 5,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student60",
                "hover": "username:student60\nedge: (2->1)\ndiff:\n--- \n+++ \n@@ -39,4 +39,11 @@\n items returns it.+This+function+rounds+to+2+decimal+points \"\"\"\n\nFROM completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function takes in a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. \n    \"\"\"\n        total_bill = 0\n    for i in range(len(grocery_list)):\n        total_bill += grocery_list[i][1] * grocery_list[i][2]\n    total_bill = total_bill * (1 + sales_tax)\n    return total_bill\n\n\nTO completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function takes in a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. This function rounds to 2 decimal points\n    \"\"\"\n        total_bill = 0\n    for item in grocery_list:\n        total_bill += item[1] * item[2]\n    total_bill += total_bill * sales_tax\n    return round(total_bill, 2)\n",
                "id": 1,
                "key": 1
            },
            {
                "diff": 7,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student63",
                "hover": "username:student63\nedge: (2->1)\ndiff:\n--- \n+++ \n@@ -48,7 +48,12 @@\n inputted number. That-result+result,+rounded+to+two+decimal+places, is outputted. \"\"\"\n\nFROM completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by 1 plus the inputted number. That result is outputted.\n    \"\"\"\n        total = 0\n    for i in range(len(grocery_list)):\n        total += grocery_list[i][1] * grocery_list[i][2]\n    total = total * (1 + sales_tax)\n    return total\n\n\nTO completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by 1 plus the inputted number. That result, rounded to two decimal places, is outputted.\n    \"\"\"\n        total = 0\n    for item in grocery_list:\n        total += item[1] * item[2]\n    total = round(total * (1 + sales_tax), 2)\n    return total\n",
                "id": 1,
                "key": 2
            },
            {
                "diff": 10,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student64",
                "hover": "username:student64\nedge: (2->1)\ndiff:\n--- \n+++ \n@@ -27,4 +27,11 @@\n sale_tax to result.+Round+to+the+nearest+2+decimal+places. \"\"\"\n\nFROM completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list, multiple index 1 with index 2, repeat for all lists in grocery_list and add them together. Then, multiple 100% + sale_tax to result.\n    \"\"\"\n        total_bill = 0\n    for item in grocery_list:\n        total_bill += item[1] * item[2]\n    total_bill = total_bill * (1 + sales_tax)\n    return total_bill\n\n\nTO completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list, multiple index 1 with index 2, repeat for all lists in grocery_list and add them together. Then, multiple 100% + sale_tax to result. Round to the nearest 2 decimal places.\n    \"\"\"\n        total_bill = 0\n    for item in grocery_list:\n        total_bill += (item[1] * item[2])\n    total_bill = round(total_bill * (1 + sales_tax), 2)\n    return total_bill\n",
                "id": 1,
                "key": 3
            }
        ],
        [
            {
                "diff": 2,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student40",
                "hover": "username:student40\nedge: (3->0)\ndiff:\n--- \n+++ \n@@ -16,8 +16,21 @@\n within the list.-this-value+these+numbers+will+all+be+added+together+and+stored+in+variable+'cost'.+the+variable+'cost' will then be@@ -29,15 +42,39 @@\n of the list.-these-two-numbers+the+product will be-added-to-each-other+stored+in+a+new+variable,+'tax'.+a+new+variable,+'total_cost',+will+contain+the+sum+of+the+values+of+'cost' and-returned+'tax'.+the+function+will+return+the+value+of+the+variable+'total_cost'. \"\"\"\n\nFROM completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    the function will multiply the last two values in each list within the list. this value will then be multiplied by the value outside of the list. these two numbers will be added to each other and returned\n    \"\"\"\n        total = 0\n    for item in grocery_list:\n        total += item[1] * item[2] * sales_tax\n    return total\n\n\nTO completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    the function will multiply the last two values in each list within the list. these numbers will all be added together and stored in variable 'cost'. the variable 'cost' will then be multiplied by the value outside of the list. the product will be stored in a new variable, 'tax'. a new variable, 'total_cost', will contain the sum of the values of 'cost' and 'tax'. the function will return the value of the variable 'total_cost'.\n    \"\"\"\n        cost = 0\n    for item in grocery_list:\n        cost += item[1] * item[2]\n    tax = cost * sales_tax\n    total_cost = cost + tax\n    return total_cost\n",
                "id": 0,
                "key": 0
            },
            {
                "diff": 6,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student63",
                "hover": "username:student63\nedge: (3->2)\ndiff:\n--- \n+++ \n@@ -42,6 +42,8 @@\n that value by+1+plus the inputted number.\n\nFROM completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by the inputted number. That result is outputted.\n    \"\"\"\n        total = 0\n    for item in grocery_list:\n        total += item[1] * item[2]\n    total *= sales_tax\n    return total\n\n\nTO completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by 1 plus the inputted number. That result is outputted.\n    \"\"\"\n        total = 0\n    for i in range(len(grocery_list)):\n        total += grocery_list[i][1] * grocery_list[i][2]\n    total = total * (1 + sales_tax)\n    return total\n",
                "id": 2,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student64",
                "hover": "username:student64\nedge: (4->4)\ndiff:\n\n\nFROM completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list, multiple index 0 with index 1, repeat for all lists in grocery_list and add them together. Then, multiple 100% + sale_tax to result.\n    \"\"\"\n        total = 0\n    for item in grocery_list:\n        total += item[0] * item[1]\n    total = total * (1 + sales_tax)\n    return total\n\n\nTO completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list, multiple index 0 with index 1, repeat for all lists in grocery_list and add them together. Then, multiple 100% + sale_tax to result.\n    \"\"\"\n        total = 0\n    for item in grocery_list:\n        total += item[0] * item[1]\n    total *= 1 + sales_tax\n    return total\n",
                "id": 4,
                "key": 0
            },
            {
                "diff": 9,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student64",
                "hover": "username:student64\nedge: (4->2)\ndiff:\n--- \n+++ \n@@ -6,10 +6,10 @@\n grocery_list, multiple index-0+1 with index-1,+2, repeat for all\n\nFROM completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list, multiple index 0 with index 1, repeat for all lists in grocery_list and add them together. Then, multiple 100% + sale_tax to result.\n    \"\"\"\n        total = 0\n    for item in grocery_list:\n        total += item[0] * item[1]\n    total *= 1 + sales_tax\n    return total\n\n\nTO completion:\ndef total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list, multiple index 1 with index 2, repeat for all lists in grocery_list and add them together. Then, multiple 100% + sale_tax to result.\n    \"\"\"\n        total_bill = 0\n    for item in grocery_list:\n        total_bill += item[1] * item[2]\n    total_bill = total_bill * (1 + sales_tax)\n    return total_bill\n",
                "id": 2,
                "key": 0
            }
        ]
    ]
}