{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 3,
            "stdout_id": 7,
            "hover": "stdout:\n['hello', 'aaa', 'bbb', 'ccc', 6, 9]\n\n[9, 57, 9, '5', '4']\n\n['hello', 'aaa', 'bbb', ['list'], 6, 9]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 3,
            "stdout_id": 6,
            "hover": "stdout:\n['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\n\n[9, 57, 9, '51', '41']\n\n['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 2,
            "stdout_id": 5,
            "hover": "stdout:\n['hello', 'aaa', 'bbb', 'ccc', 1, 4]\n\n[8, 56, 8, '5', '4']\n\n\nstderr:\n\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5))\n  File \"/tmp/file.py\", line 9, in add_int\n    i += num\nTypeError: 'int' object is not iterable\n",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 5,
            "stdout_id": 1,
            "hover": "stdout:\n['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\n\n[9, 57, 9, '51', '41']\n\n\nstderr:\n\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5))\n  File \"/tmp/file.py\", line 10, in add_int\n    new_lst.append(i + num)\nTypeError: can only concatenate list (not \"int\") to list\n",
            "color": "grey",
            "id": 3
        },
        {
            "stderr_id": 3,
            "stdout_id": 9,
            "hover": "stdout:\n['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\n\n[9, 57, 9, '51', '41']\n\n['hello5', 'aaa5', 'bbb5', ['list', 5], 6, 9]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 4
        },
        {
            "stderr_id": 3,
            "stdout_id": 8,
            "hover": "stdout:\n['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\n\n[9, 57, 9, '51', '41']\n\n['hello5', 'aaa5', 'bbb5', ['list'], 6, 9, 'list']\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 5
        },
        {
            "stderr_id": 3,
            "stdout_id": 2,
            "hover": "stdout:\n['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\n\n[9, 57, 9, '51', '41']\n\n['hello5', 'aaa5', 'bbb5', 6, 9]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 6
        },
        {
            "stderr_id": 4,
            "stdout_id": 4,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5))\n  File \"/tmp/file.py\", line 5, in add_int\n    return [x + num for x in lst]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [x + num for x in lst]\nTypeError: can only concatenate str (not \"int\") to str\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(add_int([8, 56, 8, '5', '4'], 1))\n  File \"/tmp/file.py\", line 5, in add_int\n    return [x + num for x in lst]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [x + num for x in lst]\nTypeError: can only concatenate str (not \"int\") to str\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5))\n  File \"/tmp/file.py\", line 5, in add_int\n    return [x + num for x in lst]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [x + num for x in lst]\nTypeError: can only concatenate str (not \"int\") to str\n",
            "color": "grey",
            "id": 7
        },
        {
            "stderr_id": 3,
            "stdout_id": 3,
            "hover": "stdout:\n['hello', 'aaa', 'bbb', 'ccc', 6, 9]\n\n[9, 57, 9, '5', '4']\n\n['hello', 'aaa', 'bbb', 6, 9]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 8
        },
        {
            "stderr_id": 1,
            "stdout_id": 4,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 15\n    print(add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5))\nIndentationError: expected an indented block after 'else' statement on line 14\n\n  File \"/tmp/file.py\", line 15\n    print(add_int([8, 56, 8, '5', '4'], 1))\nIndentationError: expected an indented block after 'else' statement on line 14\n\n  File \"/tmp/file.py\", line 15\n    print(add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5))\nIndentationError: expected an indented block after 'else' statement on line 14\n",
            "color": "blue",
            "id": 9
        },
        {
            "stderr_id": 0,
            "stdout_id": 0,
            "hover": "stdout:\n['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\n\n[9, 57, 9, 6, 5]\n\n\nstderr:\n\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5))\n  File \"/tmp/file.py\", line 13, in add_int\n    new_lst.append(item + num)\nTypeError: can only concatenate list (not \"int\") to list\n",
            "color": "blue",
            "id": 10
        },
        {
            "stderr_id": 6,
            "stdout_id": 1,
            "hover": "stdout:\n['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\n\n[9, 57, 9, '51', '41']\n\n\nstderr:\n\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5))\n  File \"/tmp/file.py\", line 9, in add_int\n    lst[i] = lst[i] + num\nTypeError: can only concatenate list (not \"int\") to list\n",
            "color": "grey",
            "id": 11
        }
    ],
    "adjacency": [
        [
            {
                "diff": 10,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student19",
                "hover": "username:student19\n\ndiff:\n--- \n+++ \n@@ -6,25 +6,39 @@\n an input list-(which-can-have-both-strings-and-integers) and an+input integer.-Adds+For+all+strings+in+the+list, the input integer-to-each-item+is+concatenated+after+the+end+of+the+string.+For+all+numbers in the+list,+the input-list.+integer+is+added+to+that+number. \"\"\"\n\nFROM completion:\ndef add_int(lst, num):\n    \"\"\"\n    Takes an input list (which can have both strings and integers) and an integer. Adds the input integer to each item in the input list. \n    \"\"\"\n        new_lst = []\n    for item in lst:\n        if type(item) == int:\n            new_lst.append(item + num)\n        else:\n            new_lst.append(item)\n    return new_lst\n\n\nTO completion:\ndef add_int(lst, num):\n    \"\"\"\n    Takes an input list and an input integer. For all strings in the list, the input integer is concatenated after the end of the string. For all numbers in the list, the input integer is added to that number.\n    \"\"\"\n        for i in range(len(lst)):\n        if type(lst[i]) == str:\n            lst[i] = lst[i] + str(num)\n        elif type(lst[i]) == int:\n            lst[i] = lst[i] + num\n    return lst\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 3,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student38",
                "hover": "username:student38\n\ndiff:\n--- \n+++ \n@@ -22,9 +22,16 @@\n num to integer.-Else,-return-position.+If+position+in+lst+is+list,+add+list+to+lst. Return the new\n\nFROM completion:\ndef add_int(lst, num):\n    \"\"\"\n    If position in lst is string, append num to string. If position in lst is integer, add num to integer. Else, return position. Return the new lst. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if type(i) == str:\n            new_lst.append(i + str(num))\n        elif type(i) == int:\n            new_lst.append(i + num)\n        else:\n            new_lst.append(i)\n    return new_lst\n\nprint(add_int(['a', 'b',\n\nTO completion:\ndef add_int(lst, num):\n    \"\"\"\n    If position in lst is string, append num to string. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Return the new lst. \n    \"\"\"\n        new_lst = []\n    for item in lst:\n        if type(item) == str:\n            new_lst.append(item + str(num))\n        elif type(item) == int:\n            new_lst.append(item + num)\n        elif type(item) == list:\n            new_lst.append(item + [num])\n    return new_lst\n",
                "id": 4,
                "key": 0
            }
        ],
        [
            {
                "diff": 4,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student36",
                "hover": "username:student36\n\ndiff:\n--- \n+++ \n@@ -18,7 +18,10 @@\n outside of the-list,+list+to+the+string, if the input@@ -32,4 +35,7 @@\n of the list+to+the+number \"\"\"\n\nFROM completion:\ndef add_int(lst, num):\n    \"\"\"\n    Go through the list, if the input is a string concatenate the number outside of the list, if the input is a number add the number outside of the list\n    \"\"\"\n        for i in lst:\n        if type(i) == str:\n            i += str(num)\n        else:\n            i += num\n    return lst\n\n\nTO completion:\ndef add_int(lst, num):\n    \"\"\"\n    Go through the list, if the input is a string concatenate the number outside of the list to the string, if the input is a number add the number outside of the list to the number\n    \"\"\"\n        for i in range(len(lst)):\n        if type(lst[i]) == str:\n            lst[i] += str(num)\n        elif type(lst[i]) == int:\n            lst[i] += num\n    return lst\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student38",
                "hover": "username:student38\n\ndiff:\n--- \n+++ \n@@ -22,6 +22,9 @@\n num to integer.+Else,+return+position. Return the new\n\nFROM completion:\ndef add_int(lst, num):\n    \"\"\"\n    If position in lst is string, append num to string. If position in lst is integer, add num to integer. Return the new lst. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if type(i) == str:\n            new_lst.append(i + str(num))\n        else:\n            new_lst.append(i + num)\n    return new_lst\n\nprint(add_int([1, 2, 3], 4))\nprint(add_int([\"a\", \"b\", \"c\"], 4))\nprint\n\nTO completion:\ndef add_int(lst, num):\n    \"\"\"\n    If position in lst is string, append num to string. If position in lst is integer, add num to integer. Else, return position. Return the new lst. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if type(i) == str:\n            new_lst.append(i + str(num))\n        elif type(i) == int:\n            new_lst.append(i + num)\n        else:\n            new_lst.append(i)\n    return new_lst\n\nprint(add_int(['a', 'b',",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 0,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student38",
                "hover": "username:student38\n\ndiff:\n\n\nFROM completion:\ndef add_int(lst, num):\n    \"\"\"\n    If position in lst is string, append num to string. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Return the new lst. \n    \"\"\"\n        new_lst = []\n    for item in lst:\n        if type(item) == str:\n            new_lst.append(item + str(num))\n        elif type(item) == int:\n            new_lst.append(item + num)\n        elif type(item) == list:\n            new_lst.append(item + [num])\n    return new_lst\n\n\nTO completion:\ndef add_int(lst, num):\n    \"\"\"\n    If position in lst is string, append num to string. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Return the new lst. \n    \"\"\"\n        for i in range(len(lst)):\n        if type(lst[i]) == str:\n            lst[i] += str(num)\n        elif type(lst[i]) == int:\n            lst[i] += num\n        elif type(lst[i]) == list:\n            lst += lst[i]\n    return lst\n",
                "id": 5,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 6,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student42",
                "hover": "username:student42\n\ndiff:\n--- \n+++ \n@@ -60,5 +60,25 @@\n they should add-normally+normally.+if+an+element+of+the+initial+list+is+neither,+leave+it+alone+and+add+it+to+the+outputted+list+regardless \"\"\"\n\nFROM completion:\ndef add_int(lst, num):\n    \"\"\"\n    given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if type(i) == int:\n            new_lst.append(i + num)\n        elif type(i) == str:\n            new_lst.append(i + str(num))\n    return new_lst\n\n\nTO completion:\ndef add_int(lst, num):\n    \"\"\"\n    given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally. if an element of the initial list is neither, leave it alone and add it to the outputted list regardless\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if type(i) == str:\n            new_lst.append(i + str(num))\n        elif type(i) == int:\n            new_lst.append(i + num)\n        else:\n            new_lst.append(i)\n    return new_lst\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 5,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student54",
                "hover": "username:student54\n\ndiff:\n--- \n+++ \n@@ -17,4 +17,20 @@\n the old list.+If+it+is+a+string,+append+it+to+the+end.+If+it+is+an+integer,+concatenate. \"\"\"\n\nFROM completion:\ndef add_int(lst, num):\n    \"\"\"\n    Return a new list with the integer added at each index of the old list.\n    \"\"\"\n        return [x + num for x in lst]\n\n\n\nTO completion:\ndef add_int(lst, num):\n    \"\"\"\n    Return a new list with the integer added at each index of the old list. If it is a string, append it to the end. If it is an integer, concatenate.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if type(i) == int:\n            new_lst.append(i + num)\n        elif type(i) == str:\n            new_lst.append(i)\n    return new_lst\n",
                "id": 8,
                "key": 0
            }
        ],
        [
            {
                "diff": 7,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student54",
                "hover": "username:student54\n\ndiff:\n--- \n+++ \n@@ -22,15 +22,26 @@\n is a string,-append+add it to the-end.+end+to+create+a+new+string. If it is an integer,+or+a+string+containing+an+integer, concatenate. \"\"\"\n\nFROM completion:\ndef add_int(lst, num):\n    \"\"\"\n    Return a new list with the integer added at each index of the old list. If it is a string, append it to the end. If it is an integer, concatenate.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if type(i) == int:\n            new_lst.append(i + num)\n        elif type(i) == str:\n            new_lst.append(i)\n    return new_lst\n\n\nTO completion:\ndef add_int(lst, num):\n    \"\"\"\n    Return a new list with the integer added at each index of the old list. If it is a string, add it to the end to create a new string. If it is an integer, or a string containing an integer, concatenate.\n    \"\"\"\n        if type(lst) == list:\n        return [add_int(x, num) for x in lst]\n    elif type(lst) == str:\n        if lst.isdigit():\n            return str(int(lst) + num)\n        else:\n            return lst + str(num)\n    elif type(lst) == int:\n        return lst + num\n    else:",
                "id": 9,
                "key": 0
            }
        ],
        [
            {
                "diff": 9,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student54",
                "hover": "username:student54\n\ndiff:\n--- \n+++ \n@@ -22,11 +22,16 @@\n is a string,-add-it+append+the+integer+on to the end+of+the+string to create a\n\nFROM completion:\ndef add_int(lst, num):\n    \"\"\"\n    Return a new list with the integer added at each index of the old list. If it is a string, add it to the end to create a new string. If it is an integer, or a string containing an integer, concatenate.\n    \"\"\"\n        if type(lst) == list:\n        return [add_int(x, num) for x in lst]\n    elif type(lst) == str:\n        if lst.isdigit():\n            return str(int(lst) + num)\n        else:\n            return lst + str(num)\n    elif type(lst) == int:\n        return lst + num\n    else:\n\nTO completion:\ndef add_int(lst, num):\n    \"\"\"\n    Return a new list with the integer added at each index of the old list. If it is a string, append the integer on to the end of the string to create a new string. If it is an integer, or a string containing an integer, concatenate.\n    \"\"\"\n        new_lst = []\n    for item in lst:\n        if type(item) == str:\n            if item.isdigit():\n                new_lst.append(int(item) + num)\n            else:\n                new_lst.append(item + str(num))\n        else:\n            new_lst.append(item + num)\n    return new_lst\n",
                "id": 10,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student54",
                "hover": "username:student54\n\ndiff:\n--- \n+++ \n@@ -42,11 +42,5 @@\n is an integer,-or-a-string-containing-an-integer, concatenate. \"\"\"\n\nFROM completion:\ndef add_int(lst, num):\n    \"\"\"\n    Return a new list with the integer added at each index of the old list. If it is a string, append the integer on to the end of the string to create a new string. If it is an integer, or a string containing an integer, concatenate.\n    \"\"\"\n        new_lst = []\n    for item in lst:\n        if type(item) == str:\n            if item.isdigit():\n                new_lst.append(int(item) + num)\n            else:\n                new_lst.append(item + str(num))\n        else:\n            new_lst.append(item + num)\n    return new_lst\n\n\nTO completion:\ndef add_int(lst, num):\n    \"\"\"\n    Return a new list with the integer added at each index of the old list. If it is a string, append the integer on to the end of the string to create a new string. If it is an integer, concatenate.\n    \"\"\"\n        new_lst = []\n    for item in lst:\n        if type(item) == str:\n            new_lst.append(item + str(num))\n        elif type(item) == int:\n            new_lst.append(item + num)\n        else:\n            new_lst.append(item)\n    return new_lst\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 2,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student77",
                "hover": "username:student77\n\ndiff:\n--- \n+++ \n@@ -6,7 +6,8 @@\n a list of-numbers+numbers,+lists, and strings as@@ -23,7 +24,6 @@\n in the list,-and add the number@@ -32,5 +32,14 @@\n numbers in the+list,+and+do+nothing+to+the+lists+in+the list. \"\"\"\n\nFROM completion:\ndef add_int(lst, num):\n    \"\"\"\n    Given a list of numbers and strings as well as a number, append the number to the strings in the list, and add the number to the numbers in the list.\n    \"\"\"\n        for i in range(len(lst)):\n        if type(lst[i]) == str:\n            lst[i] = lst[i] + str(num)\n        else:\n            lst[i] = lst[i] + num\n    return lst\n\n\nTO completion:\ndef add_int(lst, num):\n    \"\"\"\n    Given a list of numbers, lists, and strings as well as a number, append the number to the strings in the list, add the number to the numbers in the list, and do nothing to the lists in the list.\n    \"\"\"\n        for i in range(len(lst)):\n        if type(lst[i]) == str:\n            lst[i] += str(num)\n        elif type(lst[i]) == int:\n            lst[i] += num\n    return lst\n",
                "id": 1,
                "key": 0
            }
        ]
    ]
}