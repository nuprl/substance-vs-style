{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(check_prime('2'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    for i in range(2, num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(check_prime('8'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    for i in range(2, num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(check_prime('9'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    for i in range(2, num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(check_prime('11'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    for i in range(2, num):\nTypeError: 'str' object cannot be interpreted as an integer\n",
            "color": "red",
            "id": 0
        },
        {
            "stderr_id": 6,
            "stdout_id": 1,
            "hover": "stdout:\nTrue\n\nFalse\n\nFalse\n\nTrue\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 4,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(check_prime('2'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    for i in range(2,num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(check_prime('8'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    for i in range(2,num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(check_prime('9'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    for i in range(2,num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(check_prime('11'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    for i in range(2,num):\nTypeError: 'str' object cannot be interpreted as an integer\n",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 9,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(check_prime('2'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    for i in range(2,num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(check_prime('8'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    for i in range(2,num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(check_prime('9'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    for i in range(2,num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(check_prime('11'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    for i in range(2,num):\nTypeError: 'str' object cannot be interpreted as an integer\n",
            "color": "red",
            "id": 3
        },
        {
            "stderr_id": 7,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(check_prime('2'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    for i in range(2, num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(check_prime('8'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    for i in range(2, num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(check_prime('9'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    for i in range(2, num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(check_prime('11'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    for i in range(2, num):\nTypeError: 'str' object cannot be interpreted as an integer\n",
            "color": "grey",
            "id": 4
        },
        {
            "stderr_id": 1,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(check_prime('2'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    if num % 4 == 0 or num % 3 == 0:\nTypeError: not all arguments converted during string formatting\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(check_prime('8'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    if num % 4 == 0 or num % 3 == 0:\nTypeError: not all arguments converted during string formatting\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(check_prime('9'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    if num % 4 == 0 or num % 3 == 0:\nTypeError: not all arguments converted during string formatting\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(check_prime('11'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    if num % 4 == 0 or num % 3 == 0:\nTypeError: not all arguments converted during string formatting\n",
            "color": "blue",
            "id": 5
        },
        {
            "stderr_id": 5,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(check_prime('2'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    if num % 2 == 0:\nTypeError: not all arguments converted during string formatting\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(check_prime('8'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    if num % 2 == 0:\nTypeError: not all arguments converted during string formatting\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(check_prime('9'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    if num % 2 == 0:\nTypeError: not all arguments converted during string formatting\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(check_prime('11'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    if num % 2 == 0:\nTypeError: not all arguments converted during string formatting\n",
            "color": "grey",
            "id": 6
        },
        {
            "stderr_id": 2,
            "stdout_id": 0,
            "hover": "stdout:\n\nFalse\n\n\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(check_prime('2'))\n  File \"/tmp/file.py\", line 8, in check_prime\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\nNameError: name 'math' is not defined\n\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(check_prime('9'))\n  File \"/tmp/file.py\", line 8, in check_prime\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\nNameError: name 'math' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(check_prime('11'))\n  File \"/tmp/file.py\", line 8, in check_prime\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\nNameError: name 'math' is not defined\n",
            "color": "blue",
            "id": 7
        },
        {
            "stderr_id": 11,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(check_prime('2'))\n  File \"/tmp/file.py\", line 10, in check_prime\n    for i in range(2, num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(check_prime('8'))\n  File \"/tmp/file.py\", line 10, in check_prime\n    for i in range(2, num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(check_prime('9'))\n  File \"/tmp/file.py\", line 10, in check_prime\n    for i in range(2, num):\nTypeError: 'str' object cannot be interpreted as an integer\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(check_prime('11'))\n  File \"/tmp/file.py\", line 10, in check_prime\n    for i in range(2, num):\nTypeError: 'str' object cannot be interpreted as an integer\n",
            "color": "blue",
            "id": 8
        },
        {
            "stderr_id": 10,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(check_prime('2'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    if num <= 1:\nTypeError: '<=' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(check_prime('8'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    if num <= 1:\nTypeError: '<=' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(check_prime('9'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    if num <= 1:\nTypeError: '<=' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(check_prime('11'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    if num <= 1:\nTypeError: '<=' not supported between instances of 'str' and 'int'\n",
            "color": "grey",
            "id": 9
        },
        {
            "stderr_id": 3,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(check_prime('2'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    if num < 2:\nTypeError: '<' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(check_prime('8'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    if num < 2:\nTypeError: '<' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(check_prime('9'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    if num < 2:\nTypeError: '<' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(check_prime('11'))\n  File \"/tmp/file.py\", line 5, in check_prime\n    if num < 2:\nTypeError: '<' not supported between instances of 'str' and 'int'\n",
            "color": "blue",
            "id": 10
        },
        {
            "stderr_id": 8,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(check_prime('2'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    if num < 2 or num % 2 == 0:\nTypeError: '<' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(check_prime('8'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    if num < 2 or num % 2 == 0:\nTypeError: '<' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(check_prime('9'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    if num < 2 or num % 2 == 0:\nTypeError: '<' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(check_prime('11'))\n  File \"/tmp/file.py\", line 7, in check_prime\n    if num < 2 or num % 2 == 0:\nTypeError: '<' not supported between instances of 'str' and 'int'\n",
            "color": "blue",
            "id": 11
        }
    ],
    "adjacency": [
        [
            {
                "diff": 12,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student29",
                "hover": "username:student29\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -1,10 +1,15 @@\n def check_prime(num): \"\"\"+Convert+each+input+to+an+integer. If-the-input-number+that+integer is prime return\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    If the input number is prime return \"True\". Else, return \"False\"\n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    Convert each input to an integer. If that integer is prime return \"True\". Else, return \"False\"\n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
                "id": 0,
                "key": 0
            },
            {
                "diff": 21,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student49",
                "hover": "username:student49\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -2,6 +2,12 @@\n check_prime(num): \"\"\" given+a+string+type+cast+it+into an integer, if\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    given an integer, if the integer is only divisible by itself and 1, return True otherwise return False\n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    given a string type cast it into an integer, if the integer is only divisible by itself and 1, return True otherwise return False\n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
                "id": 0,
                "key": 1
            },
            {
                "diff": 2,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student68",
                "hover": "username:student68\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -3,14 +3,13 @@\n \"\"\" given a-string,-first-cast+character,+convert the-string+character into-an-integer.+a+number. return true if\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    given a string, first cast the string into an integer. return true if that number is a prime number. if not, return false. \n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    given a character, convert the character into a number. return true if that number is a prime number. if not, return false. \n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
                "id": 0,
                "key": 2
            },
            {
                "diff": 0,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student68",
                "hover": "username:student68\nedge: (0->0)\ndiff:\n\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    given a character, convert the character into a number. return true if that number is a prime number. if not, return false. \n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    given a character, convert the character into a number. return true if that number is a prime number. if not, return false. \n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
                "id": 0,
                "key": 3
            },
            {
                "diff": 16,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student29",
                "hover": "username:student29\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -2,19 +2,30 @@\n check_prime(num): \"\"\" Convert-each+the input to an integer.-If-that+Then+check+if+the integer is+a prime+number+and return-\"True\".-Else,-return+\"True\"+if+it+is+prime+and \"False\"+if+it's+not \"\"\"\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    Convert each input to an integer. If that integer is prime return \"True\". Else, return \"False\"\n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    Convert the input to an integer. Then check if the integer is a prime number and return \"True\" if it is prime and \"False\" if it's not\n    \"\"\"\n        try:\n        num = int(num)\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    except ValueError:\n        return False\n\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 10,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student32",
                "hover": "username:student32\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -1,7 +1,11 @@\n def check_prime(num): \"\"\"-if+Turns+num+into+int.+If num is a\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    if num is a prime number, return \"True\". if not, return \"False\"\n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    Turns num into int. If num is a prime number, return \"True\". if not, return \"False\"\n    \"\"\"\n        num = int(num)\n    if num == 1:\n        return \"False\"\n    for i in range(2, num):\n        if num % i == 0:\n            return \"False\"\n    return \"True\"\n",
                "id": 1,
                "key": 1
            },
            {
                "diff": 8,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student49",
                "hover": "username:student49\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -1,18 +1,13 @@\n def check_prime(num): \"\"\"-given-a-string-type-cast-it-into+typecast+num+as an integer, if-the-integer+num is only divisible\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    given a string type cast it into an integer, if the integer is only divisible by itself and 1, return True otherwise return False\n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    typecast num as an integer, if num is only divisible by itself and 1, return True otherwise return False\n    \"\"\"\n        num = int(num)\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n",
                "id": 1,
                "key": 2
            },
            {
                "diff": 5,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student66",
                "hover": "username:student66\nedge: (0->5)\ndiff:\n--- \n+++ \n@@ -5,7 +5,12 @@\n the number is-prime+not+divisible+buy+4+or+3 return true else\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    if the number is prime return true else return false\n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    if the number is not divisible buy 4 or 3 return true else return false\n    \"\"\"\n        if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n        return True\n\n",
                "id": 5,
                "key": 0
            },
            {
                "diff": 11,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student68",
                "hover": "username:student68\nedge: (0->7)\ndiff:\n--- \n+++ \n@@ -4,7 +4,10 @@\n given a string,-convert+first+cast+the+string into an integer@@ -12,7 +15,9 @@\n return true if-it's+that+number+is a prime number.\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    given a string, convert into an integer and return true if it's a prime number. if not, return false\n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    given a string, first cast the string into an integer and return true if that number is a prime number. if not, return false\n    \"\"\"\n        num = int(num)\n    if num % 2 == 0 and num > 2:\n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n",
                "id": 7,
                "key": 0
            }
        ],
        [
            {
                "diff": 20,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student32",
                "hover": "username:student32\nedge: (1->1)\ndiff:\n--- \n+++ \n@@ -5,16 +5,14 @@\n num into int.-If+Return+a+bool+indicating+if num is a prime-number,-return-\"True\".-if-not,-return-\"False\"+number. \"\"\"\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    Turns num into int. If num is a prime number, return \"True\". if not, return \"False\"\n    \"\"\"\n        num = int(num)\n    if num == 1:\n        return \"False\"\n    for i in range(2, num):\n        if num % i == 0:\n            return \"False\"\n    return \"True\"\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    Turns num into int. Return a bool indicating if num is a prime number.\n    \"\"\"\n        num = int(num)\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 9,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student34",
                "hover": "username:student34\nedge: (2->3)\ndiff:\n--- \n+++ \n@@ -3,21 +3,23 @@\n \"\"\" if num-is-divisible-by+cannot+produce an integer+when+divided+by+integers other than 1 or-itself-it-is-false,+itself,+return+true.+If otherwise-it-is-true+return+false. \"\"\"\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    if num is divisible by an integer other than 1 or itself it is false, otherwise it is true\n    \"\"\"\n        for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    if num cannot produce an integer when divided by integers other than 1 or itself, return true. If otherwise return false.\n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n",
                "id": 3,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 4,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student66",
                "hover": "username:student66\nedge: (4->0)\ndiff:\n--- \n+++ \n@@ -8,4 +8,7 @@\n prime return true+else+return+false \"\"\"\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    if the number is prime return true\n    \"\"\"\n        for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    if the number is prime return true else return false\n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n",
                "id": 0,
                "key": 0
            }
        ],
        [
            {
                "diff": 19,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student66",
                "hover": "username:student66\nedge: (5->5)\ndiff:\n--- \n+++ \n@@ -1,6 +1,12 @@\n def check_prime(num): \"\"\"+change+the+string+into+an+in if the number\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    if the number is not divisible buy 4 or 3 return true else return false\n    \"\"\"\n        if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n        return True\n\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    change the string into an in if the number is not divisible buy 4 or 3 return true else return false\n    \"\"\"\n        if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n        return True\n\n",
                "id": 5,
                "key": 0
            },
            {
                "diff": 7,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student66",
                "hover": "username:student66\nedge: (5->5)\ndiff:\n--- \n+++ \n@@ -6,7 +6,7 @@\n string into an-in+integer if the number\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    change the string into an in if the number is not divisible buy 4 or 3 return true else return false\n    \"\"\"\n        if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n        return True\n\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    change the string into an integer if the number is not divisible buy 4 or 3 return true else return false\n    \"\"\"\n        if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n        return True\n\n",
                "id": 5,
                "key": 1
            },
            {
                "diff": 6,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student66",
                "hover": "username:student66\nedge: (5->1)\ndiff:\n--- \n+++ \n@@ -3,7 +3,7 @@\n \"\"\" change the-string+input into an integer\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    change the string into an integer if the number is not divisible buy 4 or 3 return true else return false\n    \"\"\"\n        if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n        return True\n\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    change the input into an integer if the number is not divisible buy 4 or 3 return true else return false\n    \"\"\"\n        num = int(num)\n    if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n        return True\n\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 13,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student67",
                "hover": "username:student67\nedge: (6->1)\ndiff:\n--- \n+++ \n@@ -1,6 +1,11 @@\n def check_prime(num): \"\"\"+Converts+input+into+an+integer. Returns 'True' if\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    Returns 'True' if input is a prime number.\n    \"\"\"\n        if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    Converts input into an integer. Returns 'True' if input is a prime number.\n    \"\"\"\n        num = int(num)\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 3,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student68",
                "hover": "username:student68\nedge: (7->8)\ndiff:\n--- \n+++ \n@@ -24,5 +24,5 @@\n if not, return-false+false. \"\"\"\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    given a string, first cast the string into an integer and return true if that number is a prime number. if not, return false\n    \"\"\"\n        num = int(num)\n    if num % 2 == 0 and num > 2:\n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    given a string, first cast the string into an integer and return true if that number is a prime number. if not, return false. \n    \"\"\"\n        if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n",
                "id": 8,
                "key": 0
            }
        ],
        [
            {
                "diff": 17,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student68",
                "hover": "username:student68\nedge: (8->0)\ndiff:\n--- \n+++ \n@@ -10,8 +10,7 @@\n string into an-integer-and+integer. return true if\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    given a string, first cast the string into an integer and return true if that number is a prime number. if not, return false. \n    \"\"\"\n        if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    given a string, first cast the string into an integer. return true if that number is a prime number. if not, return false. \n    \"\"\"\n        if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
                "id": 0,
                "key": 0
            },
            {
                "diff": 18,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student70",
                "hover": "username:student70\nedge: (8->10)\ndiff:\n--- \n+++ \n@@ -1,17 +1,18 @@\n def check_prime(num): \"\"\"-convert-the-input-to-an-integer.-return-whether+save the input num+to+an+integer+variable.+return+whether+this+integer is prime. \"\"\"\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    convert the input to an integer. return whether the input num is prime.\n    \"\"\"\n        if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    save the input num to an integer variable. return whether this integer is prime.\n    \"\"\"\n        if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n",
                "id": 10,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student70",
                "hover": "username:student70\nedge: (9->8)\ndiff:\n--- \n+++ \n@@ -1,6 +1,12 @@\n def check_prime(num): \"\"\"+convert+the+input+to+an+integer. return whether the\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    return whether the input num is prime.\n    \"\"\"\n        if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    convert the input to an integer. return whether the input num is prime.\n    \"\"\"\n        if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n",
                "id": 8,
                "key": 0
            }
        ],
        [
            {
                "diff": 14,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student70",
                "hover": "username:student70\nedge: (10->11)\ndiff:\n--- \n+++ \n@@ -1,14 +1,13 @@\n def check_prime(num): \"\"\"-save+treat the input num-to+as an-integer-variable.+integer. return whether this\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    save the input num to an integer variable. return whether this integer is prime.\n    \"\"\"\n        if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    treat the input num as an integer. return whether this integer is prime.\n    \"\"\"\n        if num == 2:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n",
                "id": 11,
                "key": 0
            }
        ],
        [
            {
                "diff": 15,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student70",
                "hover": "username:student70\nedge: (11->1)\ndiff:\n--- \n+++ \n@@ -1,13 +1,20 @@\n def check_prime(num): \"\"\"-treat+create+a+new+variable+that+saves the input num as an-integer.+integer+using+int(). return whether this\n\nFROM completion:\ndef check_prime(num):\n    \"\"\"\n    treat the input num as an integer. return whether this integer is prime.\n    \"\"\"\n        if num == 2:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n\n\nTO completion:\ndef check_prime(num):\n    \"\"\"\n    create a new variable that saves the input num as an integer using int(). return whether this integer is prime.\n    \"\"\"\n        num = int(num)\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n\n",
                "id": 1,
                "key": 0
            }
        ]
    ]
}