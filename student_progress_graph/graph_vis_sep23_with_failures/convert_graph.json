{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 1,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 10, in convert\n    new_lst.append(alphabet[i])\nNameError: name 'alphabet' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    new_lst.append(alphabet[i])\nNameError: name 'alphabet' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    new_lst.append(alphabet[i])\nNameError: name 'alphabet' is not defined\n",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 15,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 8\n    if i >= 0\n             ^\nSyntaxError: expected ':'\n\n  File \"/tmp/file.py\", line 8\n    if i >= 0\n             ^\nSyntaxError: expected ':'\n\n  File \"/tmp/file.py\", line 8\n    if i >= 0\n             ^\nSyntaxError: expected ':'\n",
            "color": "blue",
            "id": 1
        },
        {
            "stderr_id": 9,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 9\n    print(convert([0, 1, 2, 3]))\nIndentationError: expected an indented block after 'for' statement on line 8\n\n  File \"/tmp/file.py\", line 9\n    print(convert([0, -1, 1, -1, 2]))\nIndentationError: expected an indented block after 'for' statement on line 8\n\n  File \"/tmp/file.py\", line 9\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\nIndentationError: expected an indented block after 'for' statement on line 8\n",
            "color": "blue",
            "id": 2
        },
        {
            "stderr_id": 12,
            "stdout_id": 2,
            "hover": "stdout:\nNone\n\nNone\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 3
        },
        {
            "stderr_id": 12,
            "stdout_id": 26,
            "hover": "stdout:\n['abcd']\n\n['a', 'b', 'c']\n\n['bbb', 'zzz', 'abc']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 4
        },
        {
            "stderr_id": 12,
            "stdout_id": 7,
            "hover": "stdout:\n['ABCD']\n\n['A', 'B', 'C']\n\n['BBB', 'ZZZ', 'ABC']\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 5
        },
        {
            "stderr_id": 19,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 10\n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\n                                                                                                     ^\nSyntaxError: unterminated string literal (detected at line 10)\n\n  File \"/tmp/file.py\", line 10\n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\n                                                                                                     ^\nSyntaxError: unterminated string literal (detected at line 10)\n\n  File \"/tmp/file.py\", line 10\n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\n                                                                                                     ^\nSyntaxError: unterminated string literal (detected at line 10)\n",
            "color": "blue",
            "id": 6
        },
        {
            "stderr_id": 12,
            "stdout_id": 1,
            "hover": "stdout:\n['A', 'B', 'C', 'D']\n\n['A', '@', 'B', '@', 'C']\n\n['B', 'B', 'B', '@', 'Z', 'Z', 'Z', '@', 'A', 'B', 'C']\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 7
        },
        {
            "stderr_id": 12,
            "stdout_id": 4,
            "hover": "stdout:\n['A', 'B', 'C', 'D']\n\n['A', 'B', 'C']\n\n['B', 'B', 'B', 'Z', 'Z', 'Z', 'A', 'B', 'C']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 8
        },
        {
            "stderr_id": 12,
            "stdout_id": 31,
            "hover": "stdout:\nABCD\n\nA,B,C\n\nBBB,ZZZ,ABC\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 9
        },
        {
            "stderr_id": 12,
            "stdout_id": 5,
            "hover": "stdout:\nABCD\n\nABC\n\nBZABC\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 10
        },
        {
            "stderr_id": 12,
            "stdout_id": 11,
            "hover": "stdout:\nABCD\n\nABC\n\nBBBZZZABC\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 11
        },
        {
            "stderr_id": 12,
            "stdout_id": 10,
            "hover": "stdout:\nABCD\n\nABC\n\nB,B,B,Z,Z,Z,A,B,C\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 12
        },
        {
            "stderr_id": 12,
            "stdout_id": 13,
            "hover": "stdout:\nA,B,C,D\n\nA,,,B,,,C\n\nB,B,B,,,Z,Z,Z,,,A,B,C\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 13
        },
        {
            "stderr_id": 12,
            "stdout_id": 30,
            "hover": "stdout:\n['ABCD']\n\n['A,B,C']\n\n['BBB,ZZZ,ABC']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 14
        },
        {
            "stderr_id": 6,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 6, in convert\n    lst = [''.join(g) for k, g in groupby(lst)]\nNameError: name 'groupby' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 6, in convert\n    lst = [''.join(g) for k, g in groupby(lst)]\nNameError: name 'groupby' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 6, in convert\n    lst = [''.join(g) for k, g in groupby(lst)]\nNameError: name 'groupby' is not defined\n",
            "color": "blue",
            "id": 15
        },
        {
            "stderr_id": 12,
            "stdout_id": 29,
            "hover": "stdout:\n['A', 'B', 'C']\n\n[',', 'A', ',', 'B']\n\n['A', 'A', 'A', ',', 'Y', 'Y', 'Y', ',', 'A', 'B']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 16
        },
        {
            "stderr_id": 12,
            "stdout_id": 25,
            "hover": "stdout:\nABC\n\nAAAB\n\nAAAAYYYAAB\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 17
        },
        {
            "stderr_id": 12,
            "stdout_id": 3,
            "hover": "stdout:\n['BCD']\n\n['@B@C']\n\n['BBB@ZZZ@BC']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 18
        },
        {
            "stderr_id": 12,
            "stdout_id": 18,
            "hover": "stdout:\nABCD\n\nA@B@C\n\nBBB@ZZZ@ABC\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 19
        },
        {
            "stderr_id": 12,
            "stdout_id": 22,
            "hover": "stdout:\nAABC\n\nA,A,B\n\nAAA,YYY,AAB\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 20
        },
        {
            "stderr_id": 12,
            "stdout_id": 16,
            "hover": "stdout:\n['A', 'B', 'C', 'D']\n\n['A', '-', 'B', '-', 'C']\n\n['B', 'B', 'B', '-', 'Z', 'Z', 'Z', '-', 'A', 'B', 'C']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 21
        },
        {
            "stderr_id": 7,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 17\n    if result[i] ==\n                   ^\nSyntaxError: invalid syntax\n\n  File \"/tmp/file.py\", line 17\n    if result[i] ==\n                   ^\nSyntaxError: invalid syntax\n\n  File \"/tmp/file.py\", line 17\n    if result[i] ==\n                   ^\nSyntaxError: invalid syntax\n",
            "color": "blue",
            "id": 22
        },
        {
            "stderr_id": 10,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 18\n    result.\n           ^\nSyntaxError: invalid syntax\n\n  File \"/tmp/file.py\", line 18\n    result.\n           ^\nSyntaxError: invalid syntax\n\n  File \"/tmp/file.py\", line 18\n    result.\n           ^\nSyntaxError: invalid syntax\n",
            "color": "blue",
            "id": 23
        },
        {
            "stderr_id": 12,
            "stdout_id": 14,
            "hover": "stdout:\n['A', 'B', 'C', 'D']\n\n['A', '', 'B', '', 'C']\n\n['B', 'B', 'B', '', 'Z', 'Z', 'Z', '', 'A', 'B', 'C']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 24
        },
        {
            "stderr_id": 12,
            "stdout_id": 24,
            "hover": "stdout:\n['a', 'b']\n\n['bbb', 'zzz']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 25
        },
        {
            "stderr_id": 12,
            "stdout_id": 23,
            "hover": "stdout:\n['A', 'B', 'C', 'D']\n\n['A', 'B', 'B', 'C', 'C']\n\n['B', 'B', 'B', 'Z', 'Z', 'Z', 'Z', 'A', 'A', 'B', 'C']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 26
        },
        {
            "stderr_id": 4,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 14\n    lst_str.append(chr(\n                      ^\nSyntaxError: '(' was never closed\n\n  File \"/tmp/file.py\", line 14\n    lst_str.append(chr(\n                      ^\nSyntaxError: '(' was never closed\n\n  File \"/tmp/file.py\", line 14\n    lst_str.append(chr(\n                      ^\nSyntaxError: '(' was never closed\n",
            "color": "red",
            "id": 27
        },
        {
            "stderr_id": 12,
            "stdout_id": 19,
            "hover": "stdout:\n['A', 'B']\n\n['BBB', 'ZZZ']\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 28
        },
        {
            "stderr_id": 12,
            "stdout_id": 21,
            "hover": "stdout:\nABCD\n\nA B C\n\nBBB ZZZ ABC\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 29
        },
        {
            "stderr_id": 2,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 10, in convert\n    result[-1] += chr(lst[i] + 65)\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    result[-1] += chr(lst[i] + 65)\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    result[-1] += chr(lst[i] + 65)\nIndexError: list index out of range\n",
            "color": "blue",
            "id": 30
        },
        {
            "stderr_id": 18,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 16\n    print(convert([0, 1, 2, 3]))\nIndentationError: expected an indented block after 'if' statement on line 14\n\n  File \"/tmp/file.py\", line 16\n    print(convert([0, -1, 1, -1, 2]))\nIndentationError: expected an indented block after 'if' statement on line 14\n\n  File \"/tmp/file.py\", line 16\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\nIndentationError: expected an indented block after 'if' statement on line 14\n",
            "color": "red",
            "id": 31
        },
        {
            "stderr_id": 12,
            "stdout_id": 28,
            "hover": "stdout:\n['@', 'A', 'B', 'C']\n\n['@', '?', 'A', '?', 'B']\n\n['A', 'A', 'A', '?', 'Y', 'Y', 'Y', '?', '@', 'A', 'B']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 32
        },
        {
            "stderr_id": 11,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 6, in convert\n    return ''.join([alphabet[abs(int(i))] for i in lst.split()])\nAttributeError: 'list' object has no attribute 'split'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 6, in convert\n    return ''.join([alphabet[abs(int(i))] for i in lst.split()])\nAttributeError: 'list' object has no attribute 'split'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 6, in convert\n    return ''.join([alphabet[abs(int(i))] for i in lst.split()])\nAttributeError: 'list' object has no attribute 'split'\n",
            "color": "grey",
            "id": 33
        },
        {
            "stderr_id": 8,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 6, in convert\n    return ''.join([d[int(num)] for num in lst.split()])\nAttributeError: 'list' object has no attribute 'split'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 6, in convert\n    return ''.join([d[int(num)] for num in lst.split()])\nAttributeError: 'list' object has no attribute 'split'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 6, in convert\n    return ''.join([d[int(num)] for num in lst.split()])\nAttributeError: 'list' object has no attribute 'split'\n",
            "color": "red",
            "id": 34
        },
        {
            "stderr_id": 12,
            "stdout_id": 0,
            "hover": "stdout:\n[0, 1, 2, 3, ',']\n\n[0, -1, 1, -1, 2, ',']\n\n[1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2, ',']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 35
        },
        {
            "stderr_id": 12,
            "stdout_id": 6,
            "hover": "stdout:\nabcd\n\na`b`c\n\nbbb`zzz`abc\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 36
        },
        {
            "stderr_id": 17,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 7, in convert\n    lst = [ord(i) for i in lst]\n  File \"/tmp/file.py\", line 7, in <listcomp>\n    lst = [ord(i) for i in lst]\nTypeError: ord() expected string of length 1, but int found\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 7, in convert\n    lst = [ord(i) for i in lst]\n  File \"/tmp/file.py\", line 7, in <listcomp>\n    lst = [ord(i) for i in lst]\nTypeError: ord() expected string of length 1, but int found\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 7, in convert\n    lst = [ord(i) for i in lst]\n  File \"/tmp/file.py\", line 7, in <listcomp>\n    lst = [ord(i) for i in lst]\nTypeError: ord() expected string of length 1, but int found\n",
            "color": "blue",
            "id": 37
        },
        {
            "stderr_id": 12,
            "stdout_id": 12,
            "hover": "stdout:\n0\n\n0\n\n1\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 38
        },
        {
            "stderr_id": 14,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 6, in convert\n    return [ord(i) - 97 for i in lst]\n  File \"/tmp/file.py\", line 6, in <listcomp>\n    return [ord(i) - 97 for i in lst]\nTypeError: ord() expected string of length 1, but int found\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 6, in convert\n    return [ord(i) - 97 for i in lst]\n  File \"/tmp/file.py\", line 6, in <listcomp>\n    return [ord(i) - 97 for i in lst]\nTypeError: ord() expected string of length 1, but int found\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 6, in convert\n    return [ord(i) - 97 for i in lst]\n  File \"/tmp/file.py\", line 6, in <listcomp>\n    return [ord(i) - 97 for i in lst]\nTypeError: ord() expected string of length 1, but int found\n",
            "color": "blue",
            "id": 39
        },
        {
            "stderr_id": 13,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 6, in convert\n    return [letters[i] for i in lst]\n  File \"/tmp/file.py\", line 6, in <listcomp>\n    return [letters[i] for i in lst]\nNameError: name 'letters' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 6, in convert\n    return [letters[i] for i in lst]\n  File \"/tmp/file.py\", line 6, in <listcomp>\n    return [letters[i] for i in lst]\nNameError: name 'letters' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 6, in convert\n    return [letters[i] for i in lst]\n  File \"/tmp/file.py\", line 6, in <listcomp>\n    return [letters[i] for i in lst]\nNameError: name 'letters' is not defined\n",
            "color": "blue",
            "id": 40
        },
        {
            "stderr_id": 12,
            "stdout_id": 8,
            "hover": "stdout:\n['A', 'B', 'C', 'D']\n\n['A', ',', 'B', ',', 'C']\n\n['B', 'B', 'B', ',', 'Z', 'Z', 'Z', ',', 'A', 'B', 'C']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 41
        },
        {
            "stderr_id": 16,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 10, in convert\n    lst_str[-1] += chr(lst[i]+65)\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    lst_str[-1] += chr(lst[i]+65)\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    lst_str[-1] += chr(lst[i]+65)\nIndexError: list index out of range\n",
            "color": "blue",
            "id": 42
        },
        {
            "stderr_id": 12,
            "stdout_id": 27,
            "hover": "stdout:\n['A', 'B', 'C', 'D']\n\n['A', ' ', 'B', ' ', 'C']\n\n['B', 'B', 'B', ' ', 'Z', 'Z', 'Z', ' ', 'A', 'B', 'C']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 43
        },
        {
            "stderr_id": 12,
            "stdout_id": 15,
            "hover": "stdout:\nABCD\n\nA][B][C\n\nBBB][ZZZ][ABC\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 44
        },
        {
            "stderr_id": 0,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 10, in convert\n    new_lst[-1].append(chr(lst[i] + 97))\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    new_lst[-1].append(chr(lst[i] + 97))\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    new_lst[-1].append(chr(lst[i] + 97))\nIndexError: list index out of range\n",
            "color": "grey",
            "id": 45
        },
        {
            "stderr_id": 5,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 10, in convert\n    new_lst[-1].append(i)\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    new_lst[-1].append(i)\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    new_lst[-1].append(i)\nIndexError: list index out of range\n",
            "color": "blue",
            "id": 46
        },
        {
            "stderr_id": 12,
            "stdout_id": 17,
            "hover": "stdout:\n[['a'], ['b']]\n\n[['b', 'b', 'b'], ['z', 'z', 'z']]\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 47
        },
        {
            "stderr_id": 12,
            "stdout_id": 9,
            "hover": "stdout:\n['`', 'a', 'b', 'c']\n\n['`', -1, 'a', -1, 'b']\n\n['a', 'a', 'a', -1, 'y', 'y', 'y', -1, '`', 'a', 'b']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 48
        },
        {
            "stderr_id": 3,
            "stdout_id": 20,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, 1, 2, 3]))\n  File \"/tmp/file.py\", line 10, in convert\n    result[-1] += chr(i + 65)\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([0, -1, 1, -1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    result[-1] += chr(i + 65)\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]))\n  File \"/tmp/file.py\", line 10, in convert\n    result[-1] += chr(i + 65)\nIndexError: list index out of range\n",
            "color": "grey",
            "id": 49
        }
    ],
    "adjacency": [
        [
            {
                "diff": 40,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\n\ndiff:\n--- \n+++ \n@@ -5,32 +5,57 @@\n a list of-numbers-and-returns-a+numbers,+have+another list with the+letters+in+the+alphabet,+create+an+answer+list,+iterate+through+the+input+list,+append+the+letter+with+the corresponding-indexes+index of the-alphabet,-where-negative-numbers-as-indexes-means-to-take+list+with+the+letters in the-next-index-as+alphabet+to+the+answer+list,+create a new string+when+encounter+a+negative+number,+and+return+the+answer+list \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers and returns a list with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new string\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i < 0:\n            new_lst.append(i)\n        else:\n            new_lst.append(alphabet[i])\n    return new_lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers, have another list with the letters in the alphabet, create an answer list, iterate through the input list, append the letter with the corresponding index of the list with the letters in the alphabet to the answer list, create a new string when encounter a negative number, and return the answer list\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    for i in lst:\n        if i >= 0",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 62,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\n\ndiff:\n--- \n+++ \n@@ -18,13 +18,20 @@\n create an answer-list,-iterate+list.+When+iterating through the input list,-append+create+a+temp+string+variable+and+assign the letter with@@ -42,20 +49,29 @@\n alphabet to the+temp+variable,+append+the+temp+variable+into+the answer list,-create+and+start a new+temp string when encounter a negative-number,-and-return+number.+Return the answer-list+list. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers, have another list with the letters in the alphabet, create an answer list, iterate through the input list, append the letter with the corresponding index of the list with the letters in the alphabet to the answer list, create a new string when encounter a negative number, and return the answer list\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    for i in lst:\n        if i >= 0\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers, have another list with the letters in the alphabet, create an answer list. When iterating through the input list, create a temp string variable and assign the letter with the corresponding index of the list with the letters in the alphabet to the temp variable, append the temp variable into the answer list, and start a new temp string when encounter a negative number. Return the answer list.\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    temp = ''\n    for num in lst:\n",
                "id": 2,
                "key": 0
            }
        ],
        [
            {
                "diff": 25,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\n\ndiff:\n--- \n+++ \n@@ -5,8 +5,8 @@\n a list of-numbers,-have+numbers.+Have another list with@@ -15,6 +15,7 @@\n in the alphabet,+and create an answer@@ -29,9 +30,10 @@\n a temp string-variable-and-assign+variable,+have+it+add the letter with@@ -50,26 +52,25 @@\n to the temp-variable,-append+variable.+Append the temp variable into the answer-list,-and+list.+If+encounter+a+negative+number, start a new temp-string-when-encounter-a-negative-number.+string. Return the answer\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers, have another list with the letters in the alphabet, create an answer list. When iterating through the input list, create a temp string variable and assign the letter with the corresponding index of the list with the letters in the alphabet to the temp variable, append the temp variable into the answer list, and start a new temp string when encounter a negative number. Return the answer list.\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    temp = ''\n    for num in lst:\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable, have it add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. If encounter a negative number,  start a new temp string. Return the answer list.\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    temp = ''\n    for i in lst:\n",
                "id": 2,
                "key": 0
            },
            {
                "diff": 54,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\n\ndiff:\n--- \n+++ \n@@ -30,9 +30,13 @@\n a temp string-variable,-have-it+variable.+While+the+number+is+not+negative, add the letter@@ -61,16 +65,6 @@\n the answer list.-If-encounter-a-negative-number,-start-a-new-temp-string. Return the answer\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable, have it add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. If encounter a negative number,  start a new temp string. Return the answer list.\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    temp = ''\n    for i in lst:\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While the number is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.\n    \"\"\"\n        answer = []\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for num in lst:\n        temp = ''\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 28,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\n\ndiff:\n--- \n+++ \n@@ -33,6 +33,7 @@\n variable. While the+iterating number is not\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While the number is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.\n    \"\"\"\n        answer = []\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for num in lst:\n        temp = ''\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While the iterating number is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    for num in lst:\n        temp = ''\n",
                "id": 3,
                "key": 0
            },
            {
                "diff": 27,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\n\ndiff:\n--- \n+++ \n@@ -32,9 +32,7 @@\n string variable. While-the-iterating-number+num is not negative,\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While the iterating number is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.\n    \"\"\"\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    answer = []\n    for num in lst:\n        temp = ''\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While num is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.\n    \"\"\"\n        answer = []\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for num in lst:\n        temp = ''\n",
                "id": 3,
                "key": 1
            },
            {
                "diff": 50,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\n\ndiff:\n--- \n+++ \n@@ -6,36 +6,40 @@\n list of numbers.-Have-another+Create+a+ABC list with the letters in the-alphabet,+alphabet and create an answer-list.-When-iterating+string.+Iterate through the input list,-create-a-temp-string-variable.-While-num+if+there is-not-negative,+\"-1\"+then+add+'+'+to+the+answer+string,+or+otherwise, add the letter@@ -45,27 +49,17 @@\n index of the-list-with-the-letters-in-the-alphabet-to-the-temp-variable.-Append-the-temp-variable-into+answer+string.+Split the answer-list.-Return+string+at+'+'.+return the answer-list.+string. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another list with the letters in the alphabet, and create an answer list. When iterating through the input list, create a temp string variable. While num is not negative, add the letter with the corresponding index of the list with the letters in the alphabet to the temp variable. Append the temp variable into the answer list. Return the answer list.\n    \"\"\"\n        answer = []\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for num in lst:\n        temp = ''\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Create a ABC list with the letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.\n    \"\"\"\n        abc = [chr(i) for i in range(97, 123)]\n    answer = ''\n    for i in lst:\n        if i == -1:\n            answer += ' '\n        else:\n            answer += abc[i]\n    return answer.split(' ')\n\n",
                "id": 4,
                "key": 0
            },
            {
                "diff": 22,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -29,7 +29,11 @@\n negative numbers as+commas+and points of-seperation.+separation+between+strings. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as points of seperation.\n    \"\"\"\n        #print(lst)\n    lst = [x+1 for x in lst]\n    #print(lst)\n    lst = [x-1 for x in lst]\n    #print(lst)\n    lst = [chr(x+65) for x in lst]\n    #print(lst)\n    lst = ''.join(lst)\n    #print(lst)\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as commas and points of separation between strings.\n    \"\"\"\n        return ''.join([chr(i+65) for i in lst])\n",
                "id": 19,
                "key": 0
            },
            {
                "diff": 7,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student21",
                "hover": "username:student21\n\ndiff:\n--- \n+++ \n@@ -48,14 +48,10 @@\n set, creating a-separate+new string+at each-time-it-comes-across-a -1 in the\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a separate string each time it comes across a -1 in the input.\n    \"\"\"\n        # create a list to store the result\n    result = []\n    # create a variable to store the current string\n    curr_str = \"\"\n    # loop through the input list\n    for num in lst:\n        # if the number is -1\n        if num == -1:\n            # append the current string to the result\n            result.append(curr_str)\n            # reset the current string\n            curr_str\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string at each -1 in the input.\n    \"\"\"\n        result = []\n    for i in range(len(lst)):\n        if lst[i] == -1:\n            result.append(\"\")\n        else:\n            result[-1] += chr(lst[i] + 65)\n    return result\n",
                "id": 30,
                "key": 0
            }
        ],
        [
            {
                "diff": 5,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student0",
                "hover": "username:student0\n\ndiff:\n--- \n+++ \n@@ -12,6 +12,7 @@\n list with the+capital letters in the\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Create a ABC list with the letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.\n    \"\"\"\n        abc = [chr(i) for i in range(97, 123)]\n    answer = ''\n    for i in lst:\n        if i == -1:\n            answer += ' '\n        else:\n            answer += abc[i]\n    return answer.split(' ')\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    takes a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.\n    \"\"\"\n        abc = [chr(i) for i in range(65, 91)]\n    answer = ''\n    for i in lst:\n        if i == -1:\n            answer += ' '\n        else:\n            answer += abc[i]\n    return answer.split(' ')\n\n",
                "id": 5,
                "key": 0
            },
            {
                "diff": 69,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student10",
                "hover": "username:student10\n\ndiff:\n--- \n+++ \n@@ -6,12 +6,30 @@\n a list of+numbers+ranging+from+-1+to+25,+and+function+outputs+a+list+of+the+corresponding+letters+and+line+breaks.+Function+converts+the integers from-0-25.-Function-converts-integers+0-25 into letters by@@ -25,13 +43,6 @@\n of the alphabet.-Function-would-return-a-list-of-letters. When the user\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    User inputs a list of integers from 0-25. Function converts integers into letters by matching the number with the corresponding letter of the alphabet. Function would return a list of letters. When the user inputs -1, function should end current string in list and start a new string. \n    \"\"\"\n        new_lst = []\n    new_str = \"\"\n    for i in lst:\n        if i == -1:\n            new_lst.append(new_str)\n            new_str = \"\"\n        else:\n            new_str += chr(i + 97)\n    new_lst.append(new_str)\n    return new_lst\n\nprint(convert([1,2,3,\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    User inputs a list of numbers ranging from -1 to 25, and function outputs a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current string in list and start a new string. \n    \"\"\"\n        # Create empty list to store the converted numbers\n    converted_list = []\n    # Create empty string to store the converted numbers\n    converted_string = \"\"\n    # Create a list of the alphabet\n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 58,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student21",
                "hover": "username:student21\n\ndiff:\n--- \n+++ \n@@ -79,7 +79,7 @@\n will also add-the+this string when we\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will look at each index of the input list of strings, build a string that correspond to the given numbers in the input set, and add that string to the output list and start a new one when it comes across -1 in the input. we will also add the string when we reach the end of the input list.\n    \"\"\"\n        output = []\n    current_string = \"\"\n    for i in lst:\n        if i == -1:\n            output.append(current_string)\n            current_string = \"\"\n        else:\n            current_string += chr(i + 65)\n    output.append(current_string)\n    return output\n\nprint(convert([11, 11, -1, 2, 1, 0, -1, 27,\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will look at each index of the input list of strings, build a string that correspond to the given numbers in the input set, and add that string to the output list and start a new one when it comes across -1 in the input. we will also add this string when we reach the end of the input list.\n    \"\"\"\n        output = []\n    current = \"\"\n    for i in lst:\n        if i == -1:\n            output.append(current)\n            current = \"\"\n        else:\n            current += chr(i + 65)\n    output.append(current)\n    return output\n\nprint(convert([20, 12, 18, 30, 21, -1, 15, 9, -1, 17, 14, -1, 25",
                "id": 5,
                "key": 0
            },
            {
                "diff": 39,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student21",
                "hover": "username:student21\n\ndiff:\n--- \n+++ \n@@ -31,63 +31,24 @@\n the code will-look-at-each-index-of-the-input+return+a list of-strings,-build-a-string-that-correspond-to+Strings+parsed+from the given-numbers+numbers,+with+each+-1 in the input-set,-and-add-that-string-to-the-output-list-and-start+signifying a-new-one-when-it-comes-across--1-in-the-input.-we-will-also-add-this-string-when-we-reach-the-end-of-the-input-list.+separate+string. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will look at each index of the input list of strings, build a string that correspond to the given numbers in the input set, and add that string to the output list and start a new one when it comes across -1 in the input. we will also add this string when we reach the end of the input list.\n    \"\"\"\n        output = []\n    current = \"\"\n    for i in lst:\n        if i == -1:\n            output.append(current)\n            current = \"\"\n        else:\n            current += chr(i + 65)\n    output.append(current)\n    return output\n\nprint(convert([20, 12, 18, 30, 21, -1, 15, 9, -1, 17, 14, -1, 25\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will return a list of Strings parsed from the given numbers, with each -1 in the input signifying a separate string. \n    \"\"\"\n        # create a list of letters\n    letters = [chr(i) for i in range(ord('A'), ord('Z')+1)]\n    # create a list of strings\n    strings = []\n    # create a string\n    string = ''\n    # iterate through the list\n    for i in lst:\n        # if the number is -1\n        if i == -1:\n            # add the string to the list of",
                "id": 31,
                "key": 0
            }
        ],
        [
            {
                "diff": 11,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student10",
                "hover": "username:student10\n\ndiff:\n--- \n+++ \n@@ -60,4 +60,12 @@\n a new string.+Function+should+return+a+list+of+the+letters. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    User inputs a list of numbers ranging from -1 to 25, and function outputs a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current string in list and start a new string. \n    \"\"\"\n        # Create empty list to store the converted numbers\n    converted_list = []\n    # Create empty string to store the converted numbers\n    converted_string = \"\"\n    # Create a list of the alphabet\n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    User inputs a list of numbers ranging from -1 to 25, and function outputs a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current string in list and start a new string. Function should return a list of the letters.\n    \"\"\"\n        # create a list of the alphabet\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    # create a list to store the letters",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 57,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -15,5 +15,12 @@\n at 0 as-A+A.+ignoring+any+negative+numbers+in+the+list. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A\n    \"\"\"\n        return [chr(x+65) for x in lst]\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. ignoring any negative numbers in the list.\n    \"\"\"\n        return [chr(i+65) for i in lst if i >= 0]\n\nprint(convert([-1,1,1,3,2,1,2,3,1]))\n",
                "id": 8,
                "key": 0
            },
            {
                "diff": 12,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -16,4 +16,20 @@\n 0 as A.+grouping+the+output+as+a+single+string,+then+use+the+negative+numbers+as+points+of+seperation. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A.\n    \"\"\"\n        return [chr(i+65) for i in lst]\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as points of seperation.\n    \"\"\"\n        lst = [i for i in lst if i != 0]\n    lst = [chr(i + 65) for i in lst]\n    lst = \"\".join(lst)\n    lst = lst.split(\"-\")\n    lst = [i for i in lst if i != \"\"]\n    return lst\n",
                "id": 18,
                "key": 0
            },
            {
                "diff": 8,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student3",
                "hover": "username:student3\n\ndiff:\n--- \n+++ \n@@ -1,21 +1,15 @@\n def convert(lst): \"\"\"-convert-the+create+a list+with+element of-index-number-into-list-of-letters-of-corresponding-index-numbers-of-alphabetical-table+alphabet+last+element+are+comma \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into list of letters of corresponding index \nnumbers of alphabetical table\n\n    \"\"\"\n        return [chr(i + 65) for i in lst]\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    create a list with element of alphabet last element are comma\n\n    \"\"\"\n        lst = [i for i in lst]\n    lst.append(',')\n    return lst\n\n",
                "id": 35,
                "key": 0
            },
            {
                "diff": 72,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student3",
                "hover": "username:student3\n\ndiff:\n--- \n+++ \n@@ -24,4 +24,7 @@\n into a list+(-1+represent+comma) \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table and insert into a list\n    \"\"\"\n        lst_converted = []\n    for i in lst:\n        lst_converted.append(chr(i+65))\n    return lst_converted\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table and insert into a list (-1 represent comma)\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append(',')\n        else:\n            result.append(chr(i+65))\n    return result\n",
                "id": 41,
                "key": 0
            }
        ],
        [
            {
                "diff": 30,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -15,12 +15,19 @@\n at 0 as-A.-ignoring-any+A,+turning+the negative numbers-in+into+commas,+and+then+turning the-list.+output+into+one+string. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. ignoring any negative numbers in the list.\n    \"\"\"\n        return [chr(i+65) for i in lst if i >= 0]\n\nprint(convert([-1,1,1,3,2,1,2,3,1]))\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then turning the output into one string.\n    \"\"\"\n        return ''.join(chr(ord('A') + abs(x)) if x >= 0 else ',' for x in lst)\n",
                "id": 9,
                "key": 0
            },
            {
                "diff": 32,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -23,4 +23,33 @@\n in the list.+Then+take+the+list+of+converted+letters,+removing+any+commas+between+letters+in+the+last+when+the+letters+are+in+alphabetical+order,+or+when+they+are+the+same+letters. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.  \n    \"\"\"\n        return [chr(i+65) for i in lst if i>=0]\n\nprint(convert([-1,1,2,3,4,5]))\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Then take the list of converted letters, removing any commas between letters in the last when the letters are in alphabetical order, or when they are the same letters.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i >= 0:\n            new_lst.append(chr(i + 65))\n    if new_lst == sorted(new_lst) or len(set(new_lst)) == 1:\n        return ''.join(new_lst)\n    else:\n        return ','.join(new_lst)\n\nprint(con",
                "id": 12,
                "key": 0
            },
            {
                "diff": 0,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.\n    \"\"\"\n        return [chr(i + 65) for i in lst if i >= 0]\n\nprint(convert([-1, -2, -3, -4, 1, 2, 3, 4]))\nprint(convert([25, 1, 27, 30, 2, 5, 29, 28]))\nprint(convert([-1, -2, -3, -4, -5, -6, -7, -8\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.\n    \"\"\"\n        return [chr(i+65) for i in lst if i>=0]\n\nprint(convert([-1,1,2,3,4,5]))\n",
                "id": 8,
                "key": 0
            },
            {
                "diff": 49,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -23,4 +23,12 @@\n in the list.+Removing+all+commas+in+the+list+of+outputs \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.\n    \"\"\"\n        return [chr(i+65) for i in lst if i>=0]\n\nprint(convert([-1,1,2,3,4,5]))\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing all commas in the list of outputs\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i >= 0:\n            new_lst.append(chr(i+65))\n    return ''.join(new_lst)\n",
                "id": 11,
                "key": 0
            }
        ],
        [
            {
                "diff": 52,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -15,19 +15,28 @@\n at 0 as-A,-turning-the+A+ignoring+any negative numbers-into-commas,-and-then-turning+in the-output-into-one-string.+list.+Removing+the+commas+in+the+answer+when+the+letters+are+the+same+or+in+alphabetical+order. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then turning the output into one string.\n    \"\"\"\n        return ''.join(chr(ord('A') + abs(x)) if x >= 0 else ',' for x in lst)\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing the commas in the answer when the letters are the same or in alphabetical order.  \n    \"\"\"\n        lst = [x for x in lst if x >= 0]\n    lst = [chr(x+65) for x in lst]\n    lst = [x for i, x in enumerate(lst) if i == 0 or x != lst[i-1]]\n    return ''.join(lst)\n\nprint(convert([-1, -1, -1, -1, -1, -",
                "id": 10,
                "key": 0
            },
            {
                "diff": 0,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into commas.\n    \"\"\"\n        return ''.join(map(lambda x: chr(x+65) if x >= 0 else ',', lst))\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into commas.\n    \"\"\"\n        return ''.join([chr(x + 65) if x >= 0 else ',' for x in lst])\n",
                "id": 9,
                "key": 0
            },
            {
                "diff": 61,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -16,9 +16,12 @@\n 0 as A,-turning-negative-numbers-into-commas.+using+the+-1+points+to+separate+the+string. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into commas.\n    \"\"\"\n        return ''.join([chr(x + 65) if x >= 0 else ',' for x in lst])\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, using the -1 points to separate the string.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i == -1:\n            new_lst.append('-')\n        else:\n            new_lst.append(chr(i+65))\n    return new_lst\n",
                "id": 21,
                "key": 0
            }
        ],
        [
            {
                "diff": 6,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -28,7 +28,7 @@\n commas in the-answer+output when the letters\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing the commas in the answer when the letters are the same or in alphabetical order.  \n    \"\"\"\n        lst = [x for x in lst if x >= 0]\n    lst = [chr(x+65) for x in lst]\n    lst = [x for i, x in enumerate(lst) if i == 0 or x != lst[i-1]]\n    return ''.join(lst)\n\nprint(convert([-1, -1, -1, -1, -1, -\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing the commas in the output when the letters are the same or in alphabetical order.  \n    \"\"\"\n        result = \"\"\n    for i in lst:\n        if i >= 0:\n            result += chr(i + 65)\n    return result\n\nprint(convert([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1",
                "id": 11,
                "key": 0
            }
        ],
        [
            {
                "diff": 63,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -23,20 +23,4 @@\n in the list.-Removing-the-commas-in-the-output-when-the-letters-are-the-same-or-in-alphabetical-order. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing the commas in the output when the letters are the same or in alphabetical order.  \n    \"\"\"\n        result = \"\"\n    for i in lst:\n        if i >= 0:\n            result += chr(i + 65)\n    return result\n\nprint(convert([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.  \n    \"\"\"\n        return [chr(i+65) for i in lst if i>=0]\n\nprint(convert([-1,1,2,3,4,5]))",
                "id": 8,
                "key": 0
            },
            {
                "diff": 4,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -16,19 +16,10 @@\n 0 as A-ignoring-any+turning+all negative numbers-in-the-list.-Removing-all-commas-in-the-list-of-outputs+into+commas. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Removing all commas in the list of outputs\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i >= 0:\n            new_lst.append(chr(i+65))\n    return ''.join(new_lst)\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A turning all negative numbers into commas.\n    \"\"\"\n        return ','.join(map(lambda x: chr(x + 65) if x >= 0 else ',', lst))\n",
                "id": 13,
                "key": 0
            },
            {
                "diff": 29,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -21,10 +21,14 @@\n numbers into \"\",+and grouping the output as one-string.+string+in+a+list. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\", grouping the output as one string.\n    \"\"\"\n        return \"\".join([\"\" if n < 0 else chr(n + 65) for n in lst])\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\", and grouping the output as one string in a list.\n    \"\"\"\n        output = []\n    for i in lst:\n        if i < 0:\n            output.append(\"\")\n        else:\n            output.append(chr(i + 65))\n    return output\n",
                "id": 24,
                "key": 0
            },
            {
                "diff": 23,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student25",
                "hover": "username:student25\n\ndiff:\n--- \n+++ \n@@ -21,9 +21,9 @@\n its corresponding number.-Negative-numbers-start+Input+\"-1\"+starts a new string.\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Letters A-Z correspond with numbers 0-25. This function creates a string by replacing the given number with its corresponding number. Negative numbers start a new string.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i < 0:\n            new_lst.append('')\n        else:\n            new_lst.append(chr(i+65))\n    return ''.join(new_lst)\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Letters A-Z correspond with numbers 0-25. This function creates a string by replacing the given number with its corresponding number. Input \"-1\" starts a new string.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i == -1:\n            new_lst.append(\" \")\n        else:\n            new_lst.append(chr(i+65))\n    return \"\".join(new_lst)\n",
                "id": 29,
                "key": 0
            }
        ],
        [
            {
                "diff": 59,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -23,33 +23,4 @@\n in the list.-Then-take-the-list-of-converted-letters,-removing-any-commas-between-letters-in-the-last-when-the-letters-are-in-alphabetical-order,-or-when-they-are-the-same-letters. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list. Then take the list of converted letters, removing any commas between letters in the last when the letters are in alphabetical order, or when they are the same letters.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i >= 0:\n            new_lst.append(chr(i + 65))\n    if new_lst == sorted(new_lst) or len(set(new_lst)) == 1:\n        return ''.join(new_lst)\n    else:\n        return ','.join(new_lst)\n\nprint(con\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A ignoring any negative numbers in the list.\n    \"\"\"\n        return [chr(i + 65) for i in lst if i >= 0]\n\nprint(convert([-1, -2, -3, -4, 1, 2, 3, 4]))\nprint(convert([25, 1, 27, 30, 2, 5, 29, 28]))\nprint(convert([-1, -2, -3, -4, -5, -6, -7, -8",
                "id": 8,
                "key": 0
            }
        ],
        [
            {
                "diff": 16,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -15,11 +15,22 @@\n at 0 as-A+A, turning-all+the negative numbers into-commas.+commas,+and+then+turning+the+output+into+one+string+in+a+list. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A turning all negative numbers into commas.\n    \"\"\"\n        return ','.join(map(lambda x: chr(x + 65) if x >= 0 else ',', lst))\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then turning the output into one string in a list.\n    \"\"\"\n        return [''.join([chr(i + 65) if i >= 0 else ',' for i in lst])]\n",
                "id": 14,
                "key": 0
            }
        ],
        [
            {
                "diff": 45,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -24,9 +24,15 @@\n commas, and then-turning+group the-output+letters+in+alphabetical+order+or+the+same into one string\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then turning the output into one string in a list.\n    \"\"\"\n        return [''.join([chr(i + 65) if i >= 0 else ',' for i in lst])]\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then group the letters in alphabetical order or the same into one string in a list.\n    \"\"\"\n        lst = [chr(x+65) if x >= 0 else ',' for x in lst]\n    lst = [''.join(g) for k, g in groupby(lst)]\n    return lst\n",
                "id": 15,
                "key": 0
            }
        ],
        [
            {
                "diff": 53,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -21,22 +21,8 @@\n negative numbers into-commas,-and-then-group+commas+separating the-letters-in-alphabetical-order-or-the-same-into-one-string-in-a-list.+letters. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas, and then group the letters in alphabetical order or the same into one string in a list.\n    \"\"\"\n        lst = [chr(x+65) if x >= 0 else ',' for x in lst]\n    lst = [''.join(g) for k, g in groupby(lst)]\n    return lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas separating the letters. \n    \"\"\"\n        res = []\n    for i in lst:\n        if i > 0:\n            res.append(chr(i + 64))\n        elif i < 0:\n            res.append(\",\")\n    return res\n",
                "id": 16,
                "key": 0
            }
        ],
        [
            {
                "diff": 0,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas separating the letters. \n    \"\"\"\n        res = []\n    for i in lst:\n        if i > 0:\n            res.append(chr(i + 64))\n        elif i < 0:\n            res.append(\",\")\n    return res\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas separating the letters. \n    \"\"\"\n        lst = [i for i in lst if i != 0]\n    lst = [i if i > 0 else -i for i in lst]\n    lst = [chr(i + 64) for i in lst]\n    lst = [i if i != '@' else ',' for i in lst]\n    return ''.join(lst)\n",
                "id": 17,
                "key": 0
            }
        ],
        [
            {
                "diff": 60,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -15,14 +15,5 @@\n at 0 as-A,-turning-the-negative-numbers-into-commas-separating-the-letters.+A. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning the negative numbers into commas separating the letters. \n    \"\"\"\n        lst = [i for i in lst if i != 0]\n    lst = [i if i > 0 else -i for i in lst]\n    lst = [chr(i + 64) for i in lst]\n    lst = [i if i != '@' else ',' for i in lst]\n    return ''.join(lst)\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A.\n    \"\"\"\n        return [chr(i+65) for i in lst]\n",
                "id": 7,
                "key": 0
            }
        ],
        [
            {
                "diff": 0,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as points of seperation.\n    \"\"\"\n        lst = [i for i in lst if i != 0]\n    lst = [chr(i + 65) for i in lst]\n    lst = \"\".join(lst)\n    lst = lst.split(\"-\")\n    lst = [i for i in lst if i != \"\"]\n    return lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as points of seperation.\n    \"\"\"\n        #print(lst)\n    lst = [x+1 for x in lst]\n    #print(lst)\n    lst = [x-1 for x in lst]\n    #print(lst)\n    lst = [chr(x+65) for x in lst]\n    #print(lst)\n    lst = ''.join(lst)\n    #print(lst)",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 0,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as commas and points of separation between strings.\n    \"\"\"\n        return ''.join([chr(i+65) for i in lst])\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as commas and points of separation between strings.\n    \"\"\"\n        return ''.join(chr(ord('A') + i) for i in lst)\n",
                "id": 19,
                "key": 0
            },
            {
                "diff": 15,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -24,7 +24,7 @@\n single string, then-use+turn the negative numbers@@ -35,5 +35,6 @@\n of separation between+the strings. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then use the negative numbers as commas and points of separation between strings.\n    \"\"\"\n        return ''.join(chr(ord('A') + i) for i in lst)\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then turn the negative numbers as commas and points of separation between the strings.\n    \"\"\"\n        output = ''\n    for i in lst:\n        if i < 0:\n            output += ','\n        elif i == 0:\n            output += 'A'\n        else:\n            output += chr(i+64)\n    return output\n",
                "id": 20,
                "key": 0
            },
            {
                "diff": 3,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -16,28 +16,9 @@\n 0 as A,-1-as-B.-grouping-the-output-as-a-single-string,-then-turn-the+turning negative numbers-as-commas-and-points-of-separation-between-the-strings.+into+commas. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, 1 as B. grouping the output as a single string, then turn the negative numbers as commas and points of separation between the strings.\n    \"\"\"\n        return ''.join(chr(ord('A') + i) for i in lst).replace('-', ',')\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into commas.\n    \"\"\"\n        return ''.join(map(lambda x: chr(x+65) if x >= 0 else ',', lst))\n",
                "id": 9,
                "key": 0
            },
            {
                "diff": 9,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -1,36 +1,20 @@\n def convert(lst): \"\"\"-change-numbers-to-letters-matching-the-order-of-the-alphabet-starting-at-0-as-A,-grouping-the-answer-as-one-string,-and-then-using-the--1-as-points-to-separate-the-string.+input:+[1,+1,+1,+-1,+25,+25,+25,+-1,+0,+1,+2]+output:+['BBB',+'ZZZ',+'ABC'] \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, grouping the answer as one string, and then using the -1 as points to separate the string.\n    \"\"\"\n        lst = [chr(i + 65) for i in lst]\n    lst = ''.join(lst)\n    lst = lst.replace('-1', '-1 ')\n    return lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    \n\ninput: [1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]\noutput: ['BBB', 'ZZZ', 'ABC']\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append(i)\n    for i in range(len(result)):\n        lst.remove(-1)\n    for i in range(0, len(lst), 3):\n        result.append(lst[i:i+3])\n    for i in range(len(result)):\n        if result[i] ==",
                "id": 22,
                "key": 0
            },
            {
                "diff": 66,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student3",
                "hover": "username:student3\n\ndiff:\n--- \n+++ \n@@ -19,4 +19,19 @@\n of alphabetical table+and+then+insert+into+a+list+(-1+represent+where+to+split+into+a+new+element) \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table\n    \"\"\"\n        return ''.join([chr(i + 65) for i in lst])\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table and then insert into a list (-1 represent where to split into a new element)\n    \"\"\"\n        lst_str = []\n    for i in range(len(lst)):\n        if lst[i] == -1:\n            lst_str.append('')\n        else:\n            lst_str[-1] += chr(lst[i]+65)\n    return lst_str\n",
                "id": 42,
                "key": 0
            }
        ],
        [
            {
                "diff": 71,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -15,7 +15,10 @@\n at 0 as-A.+A,+1+as+B. grouping the output\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A. grouping the output as a single string, then turn the negative numbers as commas and points of separation between the strings.\n    \"\"\"\n        output = ''\n    for i in lst:\n        if i < 0:\n            output += ','\n        elif i == 0:\n            output += 'A'\n        else:\n            output += chr(i+64)\n    return output\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, 1 as B. grouping the output as a single string, then turn the negative numbers as commas and points of separation between the strings.\n    \"\"\"\n        return ''.join(chr(ord('A') + i) for i in lst).replace('-', ',')\n\n",
                "id": 19,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -16,9 +16,18 @@\n 0 as A,+grouping+the+answer+as+one+string,+and+then using the -1+as points to separate\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, using the -1 points to separate the string.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i == -1:\n            new_lst.append('-')\n        else:\n            new_lst.append(chr(i+65))\n    return new_lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, grouping the answer as one string, and then using the -1 as points to separate the string.\n    \"\"\"\n        lst = [chr(i + 65) for i in lst]\n    lst = ''.join(lst)\n    lst = lst.replace('-1', '-1 ')\n    return lst\n",
                "id": 19,
                "key": 0
            }
        ],
        [
            {
                "diff": 20,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -1,7 +1,9 @@\n def convert(lst): \"\"\"-input:+if+user+inputs [1, 1, 1,@@ -12,9 +14,11 @@\n -1, 0, 1,-2]-output:+2],+output+should+be ['BBB', 'ZZZ',-'ABC']+'ABC']. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    \n\ninput: [1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]\noutput: ['BBB', 'ZZZ', 'ABC']\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append(i)\n    for i in range(len(result)):\n        lst.remove(-1)\n    for i in range(0, len(lst), 3):\n        result.append(lst[i:i+3])\n    for i in range(len(result)):\n        if result[i] ==\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    if user inputs [1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2], output should be ['BBB', 'ZZZ', 'ABC'].\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append('')\n        elif i == 0:\n            result.append('A')\n        elif i == 1:\n            result.append('B')\n        elif i == 2:\n            result.append('C')\n        elif i == 25:\n            result.append('Z')\n        else:\n            result.",
                "id": 23,
                "key": 0
            }
        ],
        [
            {
                "diff": 19,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -1,24 +1,24 @@\n def convert(lst): \"\"\"-if-user-inputs-[1,-1,-1,--1,-25,-25,-25,--1,-0,-1,-2],-output-should-be-['BBB',-'ZZZ',-'ABC'].+change+numbers+to+letters+matching+the+order+of+the+alphabet+starting+at+0+as+A,+turning+negative+numbers+into+\"\" \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    if user inputs [1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2], output should be ['BBB', 'ZZZ', 'ABC'].\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append('')\n        elif i == 0:\n            result.append('A')\n        elif i == 1:\n            result.append('B')\n        elif i == 2:\n            result.append('C')\n        elif i == 25:\n            result.append('Z')\n        else:\n            result.\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\"\n    \"\"\"\n        return [chr(x + 65) if x >= 0 else \"\" for x in lst]\n\n",
                "id": 24,
                "key": 0
            }
        ],
        [
            {
                "diff": 64,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -20,5 +20,11 @@\n negative numbers into-\"\"+\"\",+grouping+the+output+as+one+string. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\"\n    \"\"\"\n        return [chr(x + 65) if x >= 0 else \"\" for x in lst]\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\", grouping the output as one string.\n    \"\"\"\n        return \"\".join([\"\" if n < 0 else chr(n + 65) for n in lst])\n",
                "id": 11,
                "key": 0
            },
            {
                "diff": 14,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student17",
                "hover": "username:student17\n\ndiff:\n--- \n+++ \n@@ -16,11 +16,6 @@\n 0 as A,-turning-negative-numbers-into-\"\", and grouping the@@ -30,5 +25,11 @@\n string in a-list.+list,+using+-1+as+places+to+slice. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, turning negative numbers into \"\", and grouping the output as one string in a list.\n    \"\"\"\n        output = []\n    for i in lst:\n        if i < 0:\n            output.append(\"\")\n        else:\n            output.append(chr(i + 65))\n    return output\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, and grouping the output as one string in a list, using -1 as places to slice. \n    \"\"\"\n        return [''.join(chr(i + 65) for i in lst[:lst.index(-1)])] + convert(lst[lst.index(-1) + 1:]) if -1 in lst else [''.join(chr(i + 65) for i in lst)]\n",
                "id": 5,
                "key": 0
            },
            {
                "diff": 55,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student18",
                "hover": "username:student18\n\ndiff:\n--- \n+++ \n@@ -22,7 +22,6 @@\n the lst, create-a string of capitalized@@ -44,6 +43,10 @@\n a separate string+from+the+next+index and add it\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a list. Based on their assigned numbers in the lst, create a string of capitalized alphabetical letters and add to the list. When there is -1 in the lst, create a separate string and add it to the list. Return a list of created strings.\n    \"\"\"\n        result = []\n    for i in range(len(lst)):\n        if lst[i] == -1:\n            result.append('')\n        else:\n            result.append(chr(lst[i]+65))\n    return result\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a list. Based on their assigned numbers in the lst, create string of capitalized alphabetical letters and add to the list. When there is -1 in the lst, create a separate string from the next index and add it to the list. Return a list of created strings.\n    \"\"\"\n        lst_str = []\n    for i in range(len(lst)):\n        if lst[i] == -1:\n            lst_str.append(chr(lst[i+1]+65))\n        else:\n            lst_str.append(chr(lst[i]+65))\n    return lst_str\n",
                "id": 26,
                "key": 0
            },
            {
                "diff": 68,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student21",
                "hover": "username:student21\n\ndiff:\n--- \n+++ \n@@ -50,9 +50,11 @@\n a new string-when-there-is+each+time+it+comes+across a -1 in\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string when there is a -1 in the input.\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append(\"\")\n        else:\n            result.append(chr(i+65))\n    return result\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string each time it comes across a -1 in the input.\n    \"\"\"\n        result = []\n    current_string = \"\"\n    for num in lst:\n        if num == -1:\n            result.append(current_string)\n            current_string = \"\"\n        else:\n            current_string += chr(num + 65)\n    return result",
                "id": 28,
                "key": 0
            }
        ],
        [
            {
                "diff": 65,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student18",
                "hover": "username:student18\n\ndiff:\n--- \n+++ \n@@ -12,20 +12,27 @@\n and create a-list-of-string-of-alphabetical-letters-based+list.+Based on their assigned numbers in the-lst.+lst,+create+a+string+of+capitalized+alphabetical+letters+and+add+to+the+list. When there is@@ -35,7 +42,7 @@\n lst, create a-new+separate string and add\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a list of string of alphabetical letters based on their assigned numbers in the lst. When there is -1 in the lst, create a new string and add it to the list. Return a list of created strings.\n    \"\"\"\n        res = []\n    temp = []\n    for i in lst:\n        if i == -1:\n            res.append(''.join(temp))\n            temp = []\n        else:\n            temp.append(chr(i+97))\n    return res\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a list. Based on their assigned numbers in the lst, create a string of capitalized alphabetical letters and add to the list. When there is -1 in the lst, create a separate string and add it to the list. Return a list of created strings.\n    \"\"\"\n        result = []\n    for i in range(len(lst)):\n        if lst[i] == -1:\n            result.append('')\n        else:\n            result.append(chr(lst[i]+65))\n    return result\n",
                "id": 24,
                "key": 0
            },
            {
                "diff": 41,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student41",
                "hover": "username:student41\n\ndiff:\n--- \n+++ \n@@ -8,6 +8,7 @@\n a list with+capitalized letters from the@@ -24,7 +25,14 @@\n starting from zero.-Corresponding+Until+a+negative+one+is+in+the+list, letters should be\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Given a list, returns a list with letters from the alphabet that correspond to the index in the inputted list, starting from zero. Corresponding letters should be combined as one string to insert into the list. A negative one indicates the start of a new item in the list.\n    \"\"\"\n        alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_lst = []\n    temp = \"\"\n    for i in lst:\n        if i == -1:\n            new_lst.append(temp)\n            temp = \"\"\n        else:\n            temp += alphabet[i]\n    return new_lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Given a list, returns a list with capitalized letters from the alphabet that correspond to the index in the inputted list, starting from zero. Until a negative one is in the list, letters should be combined as one string to insert into the list. A negative one indicates the start of a new item in the list.\n    \"\"\"\n        result = []\n    temp = \"\"\n    for i in lst:\n        if i == -1:\n            result.append(temp)\n            temp = \"\"\n        else:\n            temp += chr(i + 65)\n    return result\n",
                "id": 28,
                "key": 0
            }
        ],
        [
            {
                "diff": 26,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student18",
                "hover": "username:student18\n\ndiff:\n--- \n+++ \n@@ -41,7 +41,7 @@\n lst, create a-separate+new string from the\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a list. Based on their assigned numbers in the lst, create string of capitalized alphabetical letters and add to the list. When there is -1 in the lst, create a separate string from the next index and add it to the list. Return a list of created strings.\n    \"\"\"\n        lst_str = []\n    for i in range(len(lst)):\n        if lst[i] == -1:\n            lst_str.append(chr(lst[i+1]+65))\n        else:\n            lst_str.append(chr(lst[i]+65))\n    return lst_str\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a list. Based on their assigned numbers in the lst, create string of capitalized alphabetical letters and add to the list. When there is -1 in the lst, create a new string from the next index and add it to the list. Return a list of created strings.\n    \"\"\"\n        lst_num = []\n    for i in lst:\n        if i == -1:\n            lst_num.append(i)\n        else:\n            lst_num.append(i+65)\n    lst_str = []\n    for i in range(len(lst_num)):\n        if lst_num[i] == -1:\n            lst_str.append(chr(",
                "id": 27,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 2,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student21",
                "hover": "username:student21\n\ndiff:\n--- \n+++ \n@@ -33,7 +33,7 @@\n will produce a-list+set of strings that@@ -46,11 +46,10 @@\n the input set,-creating-a-new-string only+separating+the+strings when there is\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string only when there is a -1 in the input.\n    \"\"\"\n        result = []\n    temp = []\n    for i in lst:\n        if i == -1:\n            result.append(''.join(temp))\n            temp = []\n        else:\n            temp.append(chr(i+65))\n    return result\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a set of strings that correspond to the given numbers in the input set, only separating the strings when there is a -1 in the input.\n    \"\"\"\n        output = []\n    for i in lst:\n        if i == -1:\n            output.append(\" \")\n        else:\n            output.append(chr(i + 65))\n    return \"\".join(output)\n",
                "id": 29,
                "key": 0
            },
            {
                "diff": 17,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student21",
                "hover": "username:student21\n\ndiff:\n--- \n+++ \n@@ -48,7 +48,7 @@\n set, creating a-new+separate string each time\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string each time it comes across a -1 in the input.\n    \"\"\"\n        result = []\n    current_string = \"\"\n    for num in lst:\n        if num == -1:\n            result.append(current_string)\n            current_string = \"\"\n        else:\n            current_string += chr(num + 65)\n    return result\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a separate string each time it comes across a -1 in the input.\n    \"\"\"\n        # create a list to store the result\n    result = []\n    # create a variable to store the current string\n    curr_str = \"\"\n    # loop through the input list\n    for num in lst:\n        # if the number is -1\n        if num == -1:\n            # append the current string to the result\n            result.append(curr_str)\n            # reset the current string\n            curr_str",
                "id": 3,
                "key": 0
            },
            {
                "diff": 51,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student21",
                "hover": "username:student21\n\ndiff:\n--- \n+++ \n@@ -75,4 +75,19 @@\n in the input.+we+will+also+add+the+string+when+we+reach+the+end+of+the+input+list. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will look at each index of the input list of strings, build a string that correspond to the given numbers in the input set, and add that string to the output list and start a new one when it comes across -1 in the input.\n    \"\"\"\n        output = []\n    temp = ''\n    for i in range(len(lst)):\n        if lst[i] == -1:\n            output.append(temp)\n            temp = ''\n        else:\n            temp += chr(lst[i] + 65)\n    return output\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will look at each index of the input list of strings, build a string that correspond to the given numbers in the input set, and add that string to the output list and start a new one when it comes across -1 in the input. we will also add the string when we reach the end of the input list.\n    \"\"\"\n        output = []\n    current_string = \"\"\n    for i in lst:\n        if i == -1:\n            output.append(current_string)\n            current_string = \"\"\n        else:\n            current_string += chr(i + 65)\n    output.append(current_string)\n    return output\n\nprint(convert([11, 11, -1, 2, 1, 0, -1, 27,",
                "id": 5,
                "key": 0
            },
            {
                "diff": 47,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student41",
                "hover": "username:student41\n\ndiff:\n--- \n+++ \n@@ -8,7 +8,6 @@\n a list with-capitalized letters from the@@ -25,6 +24,14 @@\n starting from zero.+Letters+in+the+returned+list+should+be+capitalized. Until a negative@@ -39,9 +46,20 @@\n combined as one-string-to-insert+string.+When+a+negative+one+is+reached+this+combination+of+letters+can+be+inserted into the list.@@ -49,9 +67,6 @@\n negative one indicates-the-start-of a new item\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Given a list, returns a list with capitalized letters from the alphabet that correspond to the index in the inputted list, starting from zero. Until a negative one is in the list, letters should be combined as one string to insert into the list. A negative one indicates the start of a new item in the list.\n    \"\"\"\n        result = []\n    temp = \"\"\n    for i in lst:\n        if i == -1:\n            result.append(temp)\n            temp = \"\"\n        else:\n            temp += chr(i + 65)\n    return result\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Given a list, returns a list with letters from the alphabet that correspond to the index in the inputted list, starting from zero. Letters in the returned list should be capitalized. Until a negative one is in the list, letters should be combined as one string. When a negative one is reached this combination of letters can be inserted into the list. A negative one indicates a new item in the list.\n    \"\"\"\n        result = []\n    temp = ''\n    for i in lst:\n        if i == -1:\n            result.append(temp)\n            temp = ''\n        else:\n            temp += chr(i + 65)\n    return result\n",
                "id": 28,
                "key": 0
            }
        ],
        [
            {
                "diff": 48,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student21",
                "hover": "username:student21\n\ndiff:\n--- \n+++ \n@@ -33,7 +33,7 @@\n will produce a-set+list of strings that@@ -46,10 +46,10 @@\n the input set,-only-separating-the-strings+creating+a+new+string when there is\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a set of strings that correspond to the given numbers in the input set, only separating the strings when there is a -1 in the input.\n    \"\"\"\n        output = []\n    for i in lst:\n        if i == -1:\n            output.append(\" \")\n        else:\n            output.append(chr(i + 65))\n    return \"\".join(output)\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string when there is a -1 in the input.\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append(\"\")\n        else:\n            result.append(chr(i+65))\n    return result\n",
                "id": 24,
                "key": 0
            },
            {
                "diff": 70,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student25",
                "hover": "username:student25\n\ndiff:\n--- \n+++ \n@@ -26,5 +26,5 @@\n starts a new-string.+output. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Letters A-Z correspond with numbers 0-25. This function creates a string by replacing the given number with its corresponding number. Input \"-1\" starts a new string.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i == -1:\n            new_lst.append(\" \")\n        else:\n            new_lst.append(chr(i+65))\n    return \"\".join(new_lst)\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Letters A-Z correspond with numbers 0-25. This function creates a string by replacing the given number with its corresponding number. Input \"-1\" starts a new output.\n    \"\"\"\n        output = \"\"\n    for i in lst:\n        if i == -1:\n            output += \" \"\n        else:\n            output += chr(i + 65)\n    return output\n",
                "id": 29,
                "key": 0
            },
            {
                "diff": 56,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student30",
                "hover": "username:student30\n\ndiff:\n--- \n+++ \n@@ -35,4 +35,14 @@\n a new string.+Separate+strings+with+commas.+Enclose+the+new+list+with+brackets. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. \n\nReturn strings of letters with no spaces. A -1 in lst indicates the start of a new string.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i == -1:\n            new_lst.append(' ')\n        else:\n            new_lst.append(chr(i + 65))\n    return ''.join(new_lst)\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. \n\nReturn strings of letters with no spaces. A -1 in lst indicates the start of a new string. Separate strings with commas. Enclose the new list with brackets.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i == -1:\n            new_lst.append(\"]\")\n            new_lst.append(\"[\")\n        else:\n            new_lst.append(chr(i+65))\n    return \"\".join(new_lst)\n",
                "id": 44,
                "key": 0
            },
            {
                "diff": 10,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student51",
                "hover": "username:student51\n\ndiff:\n--- \n+++ \n@@ -29,14 +29,23 @@\n to a string.-If--1,-start-the-next-character-with+When+-1+appears+make a new-string.+string+and+add+the+following+characters+to+it.+return+a+list+of+strings. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. If -1, start the next character with a new string.\n    \"\"\"\n        str = \"\"\n    for i in lst:\n        if i == -1:\n            str += \" \"\n        else:\n            str += chr(i+65)\n    return str\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. When -1 appears make a new string and add the following characters to it. return a list of strings.\n    \"\"\"\n        result = []\n    temp = \"\"\n    for i in lst:\n        if i == -1:\n            result.append(temp)\n            temp = \"\"\n        else:\n            temp += chr(i+65)\n    result.append(temp)\n    return result\n",
                "id": 5,
                "key": 0
            }
        ],
        [
            {
                "diff": 31,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student21",
                "hover": "username:student21\n\ndiff:\n--- \n+++ \n@@ -31,11 +31,19 @@\n the code will-produce-a+look+at+each+index+of+the+input list of-strings+strings,+build+a+string that correspond to@@ -46,12 +54,23 @@\n the input set,-creating+and+add+that+string+to+the+output+list+and+start a new-string-at-each+one+when+it+comes+across -1 in the\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string at each -1 in the input.\n    \"\"\"\n        result = []\n    for i in range(len(lst)):\n        if lst[i] == -1:\n            result.append(\"\")\n        else:\n            result[-1] += chr(lst[i] + 65)\n    return result\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will look at each index of the input list of strings, build a string that correspond to the given numbers in the input set, and add that string to the output list and start a new one when it comes across -1 in the input.\n    \"\"\"\n        output = []\n    temp = ''\n    for i in range(len(lst)):\n        if lst[i] == -1:\n            output.append(temp)\n            temp = ''\n        else:\n            temp += chr(lst[i] + 65)\n    return output\n",
                "id": 28,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 37,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student25",
                "hover": "username:student25\n\ndiff:\n--- \n+++ \n@@ -1,15 +1,30 @@\n def convert(lst): \"\"\"+Letters+A-Z+correspond+with+numbers+0-25. This function-converts-integers-to+creates+a+string+by+replacing+the+given+number+with its corresponding-letter-in-the-alphabet.+number.+Negative+numbers+start+a+new+string. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    This function converts integers to its corresponding letter in the alphabet.\n    \"\"\"\n        return [chr(x + 64) for x in lst]\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Letters A-Z correspond with numbers 0-25. This function creates a string by replacing the given number with its corresponding number. Negative numbers start a new string.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i < 0:\n            new_lst.append('')\n        else:\n            new_lst.append(chr(i+65))\n    return ''.join(new_lst)\n",
                "id": 11,
                "key": 0
            }
        ],
        [
            {
                "diff": 24,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student26",
                "hover": "username:student26\n\ndiff:\n--- \n+++ \n@@ -1,34 +1,32 @@\n def convert(lst): \"\"\"-The+Create+a+dictionary+where+the absolute values+of+numbers from-0-to-25-correspond-to-the+0-25+equal+capital letters of the alphabet.-Take+Replace the numbers in a given string-and-replace-them-with+according+to the-letters-of-the-alphabet.+dictionary \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    The absolute values from 0 to 25 correspond to the letters of the alphabet. Take the numbers in a given string and replace them with the letters of the alphabet.\n    \"\"\"\n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join([alphabet[abs(int(i))] for i in lst.split()])\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Create a dictionary where the absolute values of numbers from 0-25 equal capital letters of the alphabet. Replace the numbers in a given string according to the dictionary\n    \"\"\"\n        d = {abs(num): chr(65+num) for num in range(26)}\n    return ''.join([d[int(num)] for num in lst.split()])\n",
                "id": 34,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 33,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student3",
                "hover": "username:student3\n\ndiff:\n--- \n+++ \n@@ -1,15 +1,21 @@\n def convert(lst): \"\"\"-create-a+convert+the list-with-element of-alphabet-last-element-are-comma+index+number+into+string+of+letters+of+corresponding+index+numbers+of+alphabetical+table \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    create a list with element of alphabet last element are comma\n\n    \"\"\"\n        lst = [i for i in lst]\n    lst.append(',')\n    return lst\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into string of letters of corresponding index \nnumbers of alphabetical table\n\n    \"\"\"\n        return ''.join(map(lambda x: chr(x + 97), lst))\n\n",
                "id": 36,
                "key": 0
            }
        ],
        [
            {
                "diff": 44,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student3",
                "hover": "username:student3\n\ndiff:\n--- \n+++ \n@@ -1,21 +1,16 @@\n def convert(lst): \"\"\"-convert-the+call+a list+with+element of-index-number-into-string-of-letters-of-corresponding-index-numbers-of-alphabetical-table+alphabet+and+last+element+are+comma \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into string of letters of corresponding index \nnumbers of alphabetical table\n\n    \"\"\"\n        return ''.join(map(lambda x: chr(x + 97), lst))\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    call a list with element of alphabet and last element are comma\n\n    \"\"\"\n        lst = lst[:-1]\n    lst = [ord(i) for i in lst]\n    return lst\n\n",
                "id": 37,
                "key": 0
            }
        ],
        [
            {
                "diff": 42,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student3",
                "hover": "username:student3\n\ndiff:\n--- \n+++ \n@@ -2,15 +2,12 @@\n convert(lst): \"\"\" call-a-list-with+out element of-alphabet-and-last-element-are-comma+the+following+list+[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,+','] \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    call a list with element of alphabet and last element are comma\n\n    \"\"\"\n        lst = lst[:-1]\n    lst = [ord(i) for i in lst]\n    return lst\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    call out element of the following list [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z, ',']\n    \"\"\"\n        return lst[0]\n",
                "id": 38,
                "key": 0
            }
        ],
        [
            {
                "diff": 67,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student3",
                "hover": "username:student3\n\ndiff:\n--- \n+++ \n@@ -1,13 +1,18 @@\n def convert(lst): \"\"\"-call-out-element+convert+the+list+into+list of-the-following-list-[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,-',']+alphabet+with+number+represent+index+of+alphabet+table \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    call out element of the following list [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z, ',']\n    \"\"\"\n        return lst[0]\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    convert the list into list of alphabet with number represent index of alphabet table\n\n    \"\"\"\n        return [ord(i) - 97 for i in lst]\n\n",
                "id": 39,
                "key": 0
            }
        ],
        [
            {
                "diff": 21,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student3",
                "hover": "username:student3\n\ndiff:\n--- \n+++ \n@@ -4,15 +4,15 @@\n convert the list+of+index+number into list of-alphabet-with-number-represent+letters+of+corresponding index-of-alphabet-table+numbers \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    convert the list into list of alphabet with number represent index of alphabet table\n\n    \"\"\"\n        return [ord(i) - 97 for i in lst]\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into list of letters of corresponding index \nnumbers\n    \"\"\"\n        return [letters[i] for i in lst]\n",
                "id": 40,
                "key": 0
            }
        ],
        [
            {
                "diff": 13,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student3",
                "hover": "username:student3\n\ndiff:\n--- \n+++ \n@@ -8,11 +8,20 @@\n index number into-list+string of+capital letters of corresponding index numbers+of+alphabetical+table+and+insert+into+a+list \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into list of letters of corresponding index \nnumbers\n    \"\"\"\n        return [letters[i] for i in lst]\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table and insert into a list\n    \"\"\"\n        lst_converted = []\n    for i in lst:\n        lst_converted.append(chr(i+65))\n    return lst_converted\n",
                "id": 7,
                "key": 0
            }
        ],
        [
            {
                "diff": 18,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student3",
                "hover": "username:student3\n\ndiff:\n--- \n+++ \n@@ -8,8 +8,6 @@\n index number into-string-of capital letters of@@ -18,13 +16,7 @@\n numbers of alphabetical-table-and-insert-into-a-list-(-1+table(-1 represent comma) \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table and insert into a list (-1 represent comma)\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append(',')\n        else:\n            result.append(chr(i+65))\n    return result\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into capital letters of corresponding index numbers of alphabetical table(-1 represent comma)\n    \"\"\"\n        for i in range(len(lst)):\n        if lst[i] == -1:\n            lst[i] = ','\n        else:\n            lst[i] = chr(lst[i]+65)\n    return lst\n",
                "id": 41,
                "key": 0
            },
            {
                "diff": 34,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student3",
                "hover": "username:student3\n\ndiff:\n--- \n+++ \n@@ -8,6 +8,8 @@\n index number into+string+of capital letters of@@ -16,7 +18,5 @@\n numbers of alphabetical-table(-1-represent-comma)+table \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into capital letters of corresponding index numbers of alphabetical table(-1 represent comma)\n    \"\"\"\n        for i in range(len(lst)):\n        if lst[i] == -1:\n            lst[i] = ','\n        else:\n            lst[i] = chr(lst[i]+65)\n    return lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table\n    \"\"\"\n        return ''.join([chr(i + 65) for i in lst])\n\n",
                "id": 19,
                "key": 0
            }
        ],
        [
            {
                "diff": 35,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student3",
                "hover": "username:student3\n\ndiff:\n--- \n+++ \n@@ -25,13 +25,4 @@\n into a list-(-1-represent-where-to-split-into-a-new-element) \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table and then insert into a list (-1 represent where to split into a new element)\n    \"\"\"\n        lst_str = []\n    for i in range(len(lst)):\n        if lst[i] == -1:\n            lst_str.append('')\n        else:\n            lst_str[-1] += chr(lst[i]+65)\n    return lst_str\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table and then insert into a list \n    \"\"\"\n        lst2 = []\n    for i in lst:\n        lst2.append(chr(i+65))\n    return lst2\n",
                "id": 7,
                "key": 0
            }
        ],
        [
            {
                "diff": 0,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student30",
                "hover": "username:student30\n\ndiff:\n\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. -1 = a space.\n    \"\"\"\n        return [chr(x + 65) if x >= 0 else ' ' for x in lst]\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. -1 = a space.\n    \"\"\"\n        return [chr(x + 65) if x >= 0 else ' ' for x in lst]\n\n",
                "id": 43,
                "key": 0
            },
            {
                "diff": 46,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student30",
                "hover": "username:student30\n\ndiff:\n--- \n+++ \n@@ -17,8 +17,22 @@\n and so on.+Return+strings+of+letters+with+no+spaces.+A -1-=+in+lst+indicates+the+start+of a-space.+new+string. \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. -1 = a space.\n    \"\"\"\n        return [chr(x + 65) if x >= 0 else ' ' for x in lst]\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. \n\nReturn strings of letters with no spaces. A -1 in lst indicates the start of a new string.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i == -1:\n            new_lst.append(' ')\n        else:\n            new_lst.append(chr(i + 65))\n    return ''.join(new_lst)\n",
                "id": 29,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 38,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student4",
                "hover": "username:student4\n\ndiff:\n--- \n+++ \n@@ -11,16 +11,6 @@\n list of letters,-letter-values-are-assigned-consecutively-beginning-at-the-index-0, creating a new\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    converts a list of numbers into a list of letters, letter values are assigned consecutively beginning at the index 0, creating a new item in new list when -1 is in the inputted list\n    \"\"\"\n        new_lst = []\n    for i in range(len(lst)):\n        if lst[i] == -1:\n            new_lst.append([])\n        else:\n            new_lst[-1].append(chr(lst[i] + 97))\n    return new_lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    converts a list of numbers into a list of letters, creating a new item in new list when -1 is in the inputted list\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i == -1:\n            new_lst.append([])\n        else:\n            new_lst[-1].append(i)\n    return new_lst\n\n",
                "id": 46,
                "key": 0
            }
        ],
        [
            {
                "diff": 36,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student4",
                "hover": "username:student4\n\ndiff:\n--- \n+++ \n@@ -1,28 +1,36 @@\n def convert(lst): \"\"\"-converts+create a+new list-of-numbers-into-a-list+with+stings of letters,-creating+inputted+numbers+correspond+to+the+index+in+the+alphabet+beginning+at+zero,+begins a new item in+the new list when--1+'-1' is-in-the-inputted-list+passed \"\"\"\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    converts a list of numbers into a list of letters, creating a new item in new list when -1 is in the inputted list\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i == -1:\n            new_lst.append([])\n        else:\n            new_lst[-1].append(i)\n    return new_lst\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    create a new list with stings of letters, inputted numbers correspond to the index in the alphabet beginning at zero, begins a new item in the new list when '-1' is passed\n    \"\"\"\n        new_lst = []\n    sub_lst = []\n    for i in lst:\n        if i == -1:\n            new_lst.append(sub_lst)\n            sub_lst = []\n        else:\n            sub_lst.append(chr(i + 97))\n    return new_lst\n",
                "id": 47,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 43,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student41",
                "hover": "username:student41\n\ndiff:\n--- \n+++ \n@@ -8,38 +8,23 @@\n a list with+letters+from the-letter-corresponding+alphabet+that+correspond to-each-number+the+index in the inputted-list.-If-there-is-a-negative-one,-the-corresponding-letters-should-be-printed-as-a-separate-item-in-the-list.-Otherwise,-the-corresponding+list,+starting+from+zero.+Corresponding letters should be@@ -47,6 +32,21 @@\n as one string+to+insert+into+the+list.+A+negative+one+indicates+the+start+of+a+new+item in the list.\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Given a list, returns a list with the letter corresponding to each number in the inputted list. If there is a negative one, the corresponding letters should be printed as a separate item in the list. Otherwise, the corresponding letters should be combined as one string in the list.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i == -1:\n            new_lst.append(i)\n        else:\n            new_lst.append(chr(i + 96))\n    return new_lst\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Given a list, returns a list with letters from the alphabet that correspond to the index in the inputted list, starting from zero. Corresponding letters should be combined as one string to insert into the list. A negative one indicates the start of a new item in the list.\n    \"\"\"\n        alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_lst = []\n    temp = \"\"\n    for i in lst:\n        if i == -1:\n            new_lst.append(temp)\n            temp = \"\"\n        else:\n            temp += alphabet[i]\n    return new_lst\n",
                "id": 25,
                "key": 0
            }
        ],
        [
            {
                "diff": 0,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student51",
                "hover": "username:student51\n\ndiff:\n\n\nFROM completion:\ndef convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. If -1, start the next character with a new string.\n    \"\"\"\n        result = []\n    for i in lst:\n        if i == -1:\n            result.append(\"\")\n        else:\n            result[-1] += chr(i + 65)\n    return result\n\n\n\nTO completion:\ndef convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. If -1, start the next character with a new string.\n    \"\"\"\n        str = \"\"\n    for i in lst:\n        if i == -1:\n            str += \" \"\n        else:\n            str += chr(i+65)\n    return str\n",
                "id": 29,
                "key": 0
            }
        ]
    ]
}