{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 4,
            "hover": "stdout:\n['a', 't', 'c', 'b', 'd']\n\n[1, 5, 3, 'a', 'b', 'c']\n\n['a', 'b', 'c', 't', 'r', 'e']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 0,
            "hover": "stdout:\n['b', 'd', None]\n\n['a', None, 'c']\n\n[None, None, None]\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 4,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']))\n  File \"/tmp/file.py\", line 5, in create_list\n    return [dt[i] for i in lst]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [dt[i] for i in lst]\nKeyError: 'c'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]))\n  File \"/tmp/file.py\", line 5, in create_list\n    return [dt[i] for i in lst]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [dt[i] for i in lst]\nKeyError: 5\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']))\n  File \"/tmp/file.py\", line 5, in create_list\n    return [dt[i] for i in lst]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [dt[i] for i in lst]\nKeyError: 'a'\n",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 3,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']))\n  File \"/tmp/file.py\", line 7, in create_list\n    new_list.append(dt[i])\nKeyError: 'c'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]))\n  File \"/tmp/file.py\", line 7, in create_list\n    new_list.append(dt[i])\nKeyError: 5\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']))\n  File \"/tmp/file.py\", line 7, in create_list\n    new_list.append(dt[i])\nKeyError: 'a'\n",
            "color": "grey",
            "id": 3
        },
        {
            "stderr_id": 2,
            "stdout_id": 2,
            "hover": "stdout:\nNone\n\n\nNone\n\nstderr:\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]))\n  File \"/tmp/file.py\", line 8, in create_list\n    return create_list(dt[lst[0]], lst[1:])\n  File \"/tmp/file.py\", line 7, in create_list\n    if lst[0] in dt:\nTypeError: 'in <string>' requires string as left operand, not int\n\n",
            "color": "grey",
            "id": 4
        },
        {
            "stderr_id": 1,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']))\n  File \"/tmp/file.py\", line 7, in create_list\n    if dt.key == lst[0]:\nAttributeError: 'dict' object has no attribute 'key'. Did you mean: 'keys'?\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]))\n  File \"/tmp/file.py\", line 7, in create_list\n    if dt.key == lst[0]:\nAttributeError: 'dict' object has no attribute 'key'. Did you mean: 'keys'?\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']))\n  File \"/tmp/file.py\", line 7, in create_list\n    if dt.key == lst[0]:\nAttributeError: 'dict' object has no attribute 'key'. Did you mean: 'keys'?\n",
            "color": "grey",
            "id": 5
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\nb\n\na\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 6
        }
    ],
    "adjacency": [
        [
            {
                "diff": 6,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student20",
                "hover": "username:student20\n\ndiff:\n--- \n+++ \n@@ -2,13 +2,42 @@\n create_list(dt, lst): \"\"\"-Create-a-list+Take+the+values+that+can+be+accessed+in+dt using the-values-of+keys+in the-keys+lst,+and+create+a+new+list+with+the+values.+If+the+key+in+lst+does+not+exist+in+dt,+add+None+to+the+list. \"\"\"\n\nFROM completion:\ndef create_list(dt, lst):\n    \"\"\"\n    Create a list using the values of the keys\n    \"\"\"\n        for key in dt:\n        lst.append(dt[key])\n    return lst\n\n\nTO completion:\ndef create_list(dt, lst):\n    \"\"\"\n    Take the values that can be accessed in dt using the keys in the lst, and create a new list with the values. If the key in lst does not exist in dt, add None to the list.\n    \"\"\"\n        new_list = []\n    for key in lst:\n        if key in dt:\n            new_list.append(dt[key])\n        else:\n            new_list.append(None)\n    return new_list\n",
                "id": 1,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 7,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student36",
                "hover": "username:student36\n\ndiff:\n--- \n+++ \n@@ -2,15 +2,18 @@\n create_list(dt, lst): \"\"\"-Using+using+dt+as+a+reference,+return+the+associated+objects+of the objects in-dt,-return-their-associated-keys-in-dt+lst \"\"\"\n\nFROM completion:\ndef create_list(dt, lst):\n    \"\"\"\n    Using the objects in dt, return their associated keys in dt\n    \"\"\"\n        return [dt[i] for i in lst]\n\n\nTO completion:\ndef create_list(dt, lst):\n    \"\"\"\n    using dt as a reference, return the associated objects of the objects in lst\n    \"\"\"\n        return [dt[i] for i in lst]\n\n",
                "id": 2,
                "key": 0
            },
            {
                "diff": 1,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student36",
                "hover": "username:student36\n\ndiff:\n--- \n+++ \n@@ -15,5 +15,15 @@\n the objects in-lst+lst.+If+the+object+does+not+appear+in+dt+return+none \"\"\"\n\nFROM completion:\ndef create_list(dt, lst):\n    \"\"\"\n    using dt as a reference, return the associated objects of the objects in lst\n    \"\"\"\n        return [dt[i] for i in lst]\n\n\n\nTO completion:\ndef create_list(dt, lst):\n    \"\"\"\n    using dt as a reference, return the associated objects of the objects in lst. If the object does not appear in dt return none\n    \"\"\"\n        return [dt.get(i, None) for i in lst]\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 3,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student42",
                "hover": "username:student42\n\ndiff:\n--- \n+++ \n@@ -32,4 +32,28 @@\n in the dictionary.+if+an+element+of+the+list+doesnt+appear+as+a+key+in+the+dictionary,+it+should+show+up+in+the+output+list+as+None \"\"\"\n\nFROM completion:\ndef create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a list, return a new list where each element in the new list is what the elements of the original list map to in the dictionary. \n    \"\"\"\n        new_list = []\n    for i in lst:\n        new_list.append(dt[i])\n    return new_list\n\n\nTO completion:\ndef create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a list, return a new list where each element in the new list is what the elements of the original list map to in the dictionary. if an element of the list doesnt appear as a key in the dictionary, it should show up in the output list as None\n    \"\"\"\n        new_list = []\n    for i in lst:\n        if i in dt:\n            new_list.append(dt[i])\n        else:\n            new_list.append(None)\n    return new_list\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 2,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student43",
                "hover": "username:student43\n\ndiff:\n--- \n+++ \n@@ -2,33 +2,27 @@\n create_list(dt, lst): \"\"\"-Return+Loop+through+each+element+in+lst+and+return the value stored in-the-key+it in-dt-corresponding-to-the-keys-in-lst.+dt. If you-can+can't find-it,-then-return the value,-if-not,-then return None. \"\"\"\n\nFROM completion:\ndef create_list(dt, lst):\n    \"\"\"\n    Return the value stored in the key in dt corresponding to the keys in lst. If you can find it, then return the value, if not, then return None.\n\n    \"\"\"\n        if lst:\n        if lst[0] in dt:\n            return create_list(dt[lst[0]], lst[1:])\n        else:\n            return None\n    else:\n        return dt\n\n\nTO completion:\ndef create_list(dt, lst):\n    \"\"\"\n    Loop through each element in lst and return the value stored in it in dt. If you can't find the value, return None. \n\n    \"\"\"\n        new_list = []\n    for i in lst:\n        if i in dt:\n            new_list.append(dt[i])\n        else:\n            new_list.append(None)\n    return new_list\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 5,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student54",
                "hover": "username:student54\n\ndiff:\n--- \n+++ \n@@ -4,7 +4,7 @@\n \"\"\" Find the-key+keys in the list.\n\nFROM completion:\ndef create_list(dt, lst):\n    \"\"\"\n    Find the key in the list. If found, return the value of that key. If not found, return None.\n    \"\"\"\n        if dt == None:\n        return None\n    if dt.key == lst[0]:\n        if len(lst) == 1:\n            return dt.value\n        else:\n            return create_list(dt.child, lst[1:])\n    else:\n        return create_list(dt.next, lst)\n\n\nTO completion:\ndef create_list(dt, lst):\n    \"\"\"\n    Find the keys in the list. If found, return the value of that key. If not found, return None.\n    \"\"\"\n        for key in lst:\n        if key in dt:\n            return dt[key]\n    return None\n",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 0,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student54",
                "hover": "username:student54\n\ndiff:\n--- \n+++ \n@@ -15,10 +15,18 @@\n value of that-key.+key+in+a+new+list. If not found, return-None.+None+in+the+new+list. \"\"\"\n\nFROM completion:\ndef create_list(dt, lst):\n    \"\"\"\n    Find the keys in the list. If found, return the value of that key. If not found, return None.\n    \"\"\"\n        for key in lst:\n        if key in dt:\n            return dt[key]\n    return None\n\n\nTO completion:\ndef create_list(dt, lst):\n    \"\"\"\n    Find the keys in the list. If found, return the value of that key in a new list. If not found, return None in the new list.\n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i in dt:\n            new_lst.append(dt[i])\n        else:\n            new_lst.append(None)\n    return new_lst\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 4,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student57",
                "hover": "username:student57\n\ndiff:\n--- \n+++ \n@@ -14,20 +14,17 @@\n in dictionary, return-all values-in+as+well+as+None+(if key-value-pair+does+not+exist) in a list.-if-key-does-not-exist,-return-None \"\"\"\n\nFROM completion:\ndef create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a list, if key exists in dictionary, return all values in key value pair in a list. if key does not exist, return None\n    \"\"\"\n        if lst[0] in dt:\n        return dt[lst[0]]\n    else:\n        return None\n\n\nTO completion:\ndef create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a list, if key exists in dictionary, return values as well as None (if key does not exist) in a list. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i in dt:\n            new_lst.append(dt[i])\n        else:\n            new_lst.append(None)\n    return new_lst\n",
                "id": 1,
                "key": 1
            }
        ]
    ]
}