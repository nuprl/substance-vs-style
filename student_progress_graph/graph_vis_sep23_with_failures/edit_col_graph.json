{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 1,
            "stdout_id": 2,
            "hover": "stdout:\n[2, 6, 8]\n\n[9, 1]\n\n[3]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 1,
            "stdout_id": 4,
            "hover": "stdout:\n[[1, 6, 3], [4, 6, 6], [7, 6, 9]]\n\n[[9, 1, 1, 1, 1], [9, 1, 1, 1, 1]]\n\n[[2, 1]]\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6))\n  File \"/tmp/file.py\", line 5, in edit_col\n    mat[i,:] += 1\nTypeError: list indices must be integers or slices, not tuple\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9))\n  File \"/tmp/file.py\", line 5, in edit_col\n    mat[i,:] += 1\nTypeError: list indices must be integers or slices, not tuple\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(edit_col([[2,3]], 1, 1))\n  File \"/tmp/file.py\", line 5, in edit_col\n    mat[i,:] += 1\nTypeError: list indices must be integers or slices, not tuple\n",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 1,
            "stdout_id": 0,
            "hover": "stdout:\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n[[1, 1, 1, 1, 1], [9, 1, 1, 1, 1]]\n\n[[2, 3]]\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 3
        },
        {
            "stderr_id": 2,
            "stdout_id": 3,
            "hover": "stdout:\n[[1, 2, 3], [7, 5, 6], [7, 8, 9]]\n\n[[9, 1, 1, 1, 1], [9, 1, 1, 1, 1]]\n\n\nstderr:\n\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(edit_col([[2,3]], 1, 1))\n  File \"/tmp/file.py\", line 7, in edit_col\n    mat[1][0] = i + n\nIndexError: list index out of range\n",
            "color": "blue",
            "id": 4
        }
    ],
    "adjacency": [
        [
            {
                "diff": 3,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student29",
                "hover": "username:student29\n\ndiff:\n--- \n+++ \n@@ -3,27 +3,35 @@\n \"\"\" For each-entry,+entry+take+in+the+second+parameter+as+an+index.+Then+go+through+each+entry+of+the+first+parameter+and replace the-integer+value corresponding to-the-2nd-parameter+that index with the third+input parameter-integer.-return-a-list-with-all-the-altered-entries \"\"\"\n\nFROM completion:\ndef edit_col(mat,i,n):\n    \"\"\"\n    For each entry, replace the integer corresponding to the 2nd parameter index with the third parameter integer. return a list with all the altered entries\n    \"\"\"\n        return [mat[j][i] if j!=i else n for j in range(len(mat))]\n\n\nTO completion:\ndef edit_col(mat,i,n):\n    \"\"\"\n    For each entry take in the second parameter as an index. Then go through each entry of the first parameter and replace the value corresponding to that index with the third input parameter\n    \"\"\"\n        for j in range(len(mat)):\n        mat[j][i] = n\n    return mat\n",
                "id": 1,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 0,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student67",
                "hover": "username:student67\n\ndiff:\n--- \n+++ \n@@ -1,9 +1,19 @@\n def edit_col(mat,i,n): \"\"\"-Adds-1+Replaces+the+first+item+of+the+last+list+with+the+sum+of+i and-subtracts-2.+n. \"\"\"\n\nFROM completion:\ndef edit_col(mat,i,n):\n    \"\"\"\n    Adds 1 and subtracts 2.\n    \"\"\"\n        mat[i,:] += 1\n    mat[i,:] -= 2\n    return mat\n\n\nTO completion:\ndef edit_col(mat,i,n):\n    \"\"\"\n    Replaces the first item of the last list with the sum of i and n.\n    \"\"\"\n        mat[-1][0] = i + n\n    return mat\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student67",
                "hover": "username:student67\n\ndiff:\n--- \n+++ \n@@ -16,4 +16,33 @@\n i and n.+If+all+the+numbers+in+both+of+the+lists+are+1,+then+replaces+the+first+item+of+the+first+list+with+the+sum+of+i+and+n+as+well. \"\"\"\n\nFROM completion:\ndef edit_col(mat,i,n):\n    \"\"\"\n    Replaces the first item of the last list with the sum of i and n.\n    \"\"\"\n        mat[-1][0] = i + n\n    return mat\n\n\nTO completion:\ndef edit_col(mat,i,n):\n    \"\"\"\n    Replaces the first item of the last list with the sum of i and n. If all the numbers in both of the lists are 1, then replaces the first item of the first list with the sum of i and n as well.\n    \"\"\"\n        if mat[0][0] == 1 and mat[1][0] == 1:\n        mat[0][0] = i + n\n    mat[1][0] = i + n\n    return mat\n",
                "id": 4,
                "key": 0
            }
        ],
        [
            {
                "diff": 2,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student67",
                "hover": "username:student67\n\ndiff:\n--- \n+++ \n@@ -16,33 +16,4 @@\n i and n.-If-all-the-numbers-in-both-of-the-lists-are-1,-then-replaces-the-first-item-of-the-first-list-with-the-sum-of-i-and-n-as-well. \"\"\"\n\nFROM completion:\ndef edit_col(mat,i,n):\n    \"\"\"\n    Replaces the first item of the last list with the sum of i and n. If all the numbers in both of the lists are 1, then replaces the first item of the first list with the sum of i and n as well.\n    \"\"\"\n        if mat[0][0] == 1 and mat[1][0] == 1:\n        mat[0][0] = i + n\n    mat[1][0] = i + n\n    return mat\n\n\nTO completion:\ndef edit_col(mat,i,n):\n    \"\"\"\n    Replaces the first item of the last list with the sum of i and n. \n    \"\"\"\n        mat[-1][0] = i + n\n    return mat\n",
                "id": 3,
                "key": 0
            }
        ]
    ]
}