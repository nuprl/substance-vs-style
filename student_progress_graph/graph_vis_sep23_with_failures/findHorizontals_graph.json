{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 8,
            "hover": "stdout:\nNone\n\nNone\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 4,
            "hover": "stdout:\n{}\n\n{}\n\n{'it': 3}\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 1
        },
        {
            "stderr_id": 5,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 14\n    wordDict[word] = (i\n                     ^\nSyntaxError: '(' was never closed\n\n  File \"/tmp/file.py\", line 14\n    wordDict[word] = (i\n                     ^\nSyntaxError: '(' was never closed\n\n  File \"/tmp/file.py\", line 14\n    wordDict[word] = (i\n                     ^\nSyntaxError: '(' was never closed\n",
            "color": "red",
            "id": 2
        },
        {
            "stderr_id": 0,
            "stdout_id": 9,
            "hover": "stdout:\n{'tea': 2}\n\n{}\n\n{'it': 3}\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 3
        },
        {
            "stderr_id": 0,
            "stdout_id": 10,
            "hover": "stdout:\n{'tea': (2, 0)}\n\n{}\n\n{'it': (3, 0)}\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 4
        },
        {
            "stderr_id": 3,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n  File \"/tmp/file.py\", line 5, in findHorizontals\n    puzzle = puzzle.split()\nAttributeError: 'list' object has no attribute 'split'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n  File \"/tmp/file.py\", line 5, in findHorizontals\n    puzzle = puzzle.split()\nAttributeError: 'list' object has no attribute 'split'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n  File \"/tmp/file.py\", line 5, in findHorizontals\n    puzzle = puzzle.split()\nAttributeError: 'list' object has no attribute 'split'\n",
            "color": "red",
            "id": 5
        },
        {
            "stderr_id": 0,
            "stdout_id": 0,
            "hover": "stdout:\n{'tea': 'teaz'}\n\n{}\n\n{'it': 'it'}\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 6
        },
        {
            "stderr_id": 0,
            "stdout_id": 6,
            "hover": "stdout:\n{'cat': 1, 'tea': 1}\n\n{}\n\n{'it': 1}\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 7
        },
        {
            "stderr_id": 4,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 12\n    if word not in word\n                       ^\nSyntaxError: expected ':'\n\n  File \"/tmp/file.py\", line 12\n    if word not in word\n                       ^\nSyntaxError: expected ':'\n\n  File \"/tmp/file.py\", line 12\n    if word not in word\n                       ^\nSyntaxError: expected ':'\n",
            "color": "grey",
            "id": 8
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\n{'tea': [2]}\n\n{}\n\n{'it': [3]}\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 9
        },
        {
            "stderr_id": 0,
            "stdout_id": 7,
            "hover": "stdout:\n[{'word': 'tea', 'start': [2, 0], 'end': [2, 2]}]\n\n[{'word': 'it', 'start': [3, 0], 'end': [3, 1]}]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 10
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n{'tea': 1}\n\n{}\n\n{'it': 1}\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 11
        },
        {
            "stderr_id": 1,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n  File \"/tmp/file.py\", line 8, in findHorizontals\n    if isSubstring(puzzle[i],wordList[j]):\nNameError: name 'isSubstring' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n  File \"/tmp/file.py\", line 8, in findHorizontals\n    if isSubstring(puzzle[i],wordList[j]):\nNameError: name 'isSubstring' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n  File \"/tmp/file.py\", line 8, in findHorizontals\n    if isSubstring(puzzle[i],wordList[j]):\nNameError: name 'isSubstring' is not defined\n",
            "color": "red",
            "id": 12
        },
        {
            "stderr_id": 2,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n  File \"/tmp/file.py\", line 8, in findHorizontals\n    if checkWord(word,puzzle[i]):\nNameError: name 'checkWord' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n  File \"/tmp/file.py\", line 8, in findHorizontals\n    if checkWord(word,puzzle[i]):\nNameError: name 'checkWord' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n  File \"/tmp/file.py\", line 8, in findHorizontals\n    if checkWord(word,puzzle[i]):\nNameError: name 'checkWord' is not defined\n",
            "color": "blue",
            "id": 13
        }
    ],
    "adjacency": [
        [
            {
                "diff": 6,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student27",
                "hover": "username:student27\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -39,6 +39,15 @@\n the wordList list.+They+don't+have+to+be+in+the+same+order. Return a dictionary\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. Return a dictionary with the string as the key and the position of the string as the value.\n    \"\"\"\n        # create a dictionary to store the result\n    result = {}\n    # iterate through the wordList\n    for word in wordList:\n        # iterate through the puzzle\n        for i in range(len(puzzle)):\n            # check if the word is in the puzzle\n            if word in puzzle[i]:\n                # store the result in the dictionary\n                result[word] = (i,puzzle[i].index(word))\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. They don't have to be in the same order. Return a dictionary with the string as the key and the position of the string as the value.\n    \"\"\"\n        dic = {}\n    for i in range(len(puzzle)):\n        for j in range(len(wordList)):\n            if sorted(puzzle[i]) == sorted(wordList[j]):\n                dic[wordList[j]] = i\n    return dic\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 0,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student32",
                "hover": "username:student32\nedge: (0->0)\ndiff:\n\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    Return a dictionary of each element in wordList that that can be found with the letters in puzzle (even if the letters in an element of puzzle need to be retordered), paired with its index in puzzle. Only include elements of wordlist that appear in puzzle\n    \"\"\"\n        #make a dictionary of each element in wordList that that can be found with the letters in puzzle (even if the letters in an element of puzzle need to be retordered), paired with its index in puzzle\n    #only include elements of wordlist that appear in puzzle\n    #make a dictionary of each element in wordList that that can be found with the letters in puzzle (even if the letters in an element of puzzle need to be retordered), paired with its index in puzzle\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    Return a dictionary of each element in wordList that that can be found with the letters in puzzle (even if the letters in an element of puzzle need to be retordered), paired with its index in puzzle. Only include elements of wordlist that appear in puzzle\n    \"\"\"\n        #make a dictionary of the letters in puzzle and their indices\n    puzzleDict = {}\n    for i in range(len(puzzle)):\n        if puzzle[i] not in puzzleDict:\n            puzzleDict[puzzle[i]] = [i]\n        else:\n            puzzleDict[puzzle[i]].append(i)\n    #make a dictionary of the letters in wordList and their indices\n    wordList",
                "id": 0,
                "key": 0
            }
        ],
        [
            {
                "diff": 3,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student27",
                "hover": "username:student27\nedge: (1->2)\ndiff:\n--- \n+++ \n@@ -47,7 +47,10 @@\n in the same-order.+order+or+same+length. Return a dictionary\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. They don't have to be in the same order. Return a dictionary with the string as the key and the position of the string as the value.\n    \"\"\"\n        dic = {}\n    for i in range(len(puzzle)):\n        for j in range(len(wordList)):\n            if sorted(puzzle[i]) == sorted(wordList[j]):\n                dic[wordList[j]] = i\n    return dic\n\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. They don't have to be in the same order or same length. Return a dictionary with the string as the key and the position of the string as the value.\n    \"\"\"\n        #Create a dictionary to store the words and their positions\n    wordDict = {}\n    #Iterate through the wordList\n    for word in wordList:\n        #Iterate through the puzzle\n        for i in range(len(puzzle)):\n            #Check if the word is in the puzzle\n            if word in puzzle[i]:\n                #Add the word and its position to the dictionary\n                wordDict[word] = (i",
                "id": 2,
                "key": 0
            },
            {
                "diff": 11,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student32",
                "hover": "username:student32\nedge: (1->3)\ndiff:\n--- \n+++ \n@@ -10,7 +10,13 @@\n in wordList that-appears+than+can+be+made+with+the+letters in puzzle, paired\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    Return a dictionary of each element in wordList that appears in puzzle, paired with its index in puzzle. Only include elements of wordlist that appear in puzzle\n    \"\"\"\n        horizontals = {}\n    for word in wordList:\n        if word in puzzle:\n            horizontals[word] = puzzle.index(word)\n    return horizontals\n\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    Return a dictionary of each element in wordList that than can be made with the letters in puzzle, paired with its index in puzzle. Only include elements of wordlist that appear in puzzle\n    \"\"\"\n        wordDict = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n            if word in puzzle[i]:\n                wordDict[word] = i\n    return wordDict\n",
                "id": 3,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 7,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student32",
                "hover": "username:student32\nedge: (3->0)\ndiff:\n--- \n+++ \n@@ -10,15 +10,28 @@\n in wordList that-than+that can be-made+found with the letters in-puzzle,+puzzle+(even+if+the+letters+in+an+element+of+puzzle+need+to+be+retordered), paired with its\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    Return a dictionary of each element in wordList that than can be made with the letters in puzzle, paired with its index in puzzle. Only include elements of wordlist that appear in puzzle\n    \"\"\"\n        wordDict = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n            if word in puzzle[i]:\n                wordDict[word] = i\n    return wordDict\n\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    Return a dictionary of each element in wordList that that can be found with the letters in puzzle (even if the letters in an element of puzzle need to be retordered), paired with its index in puzzle. Only include elements of wordlist that appear in puzzle\n    \"\"\"\n        #make a dictionary of each element in wordList that that can be found with the letters in puzzle (even if the letters in an element of puzzle need to be retordered), paired with its index in puzzle\n    #only include elements of wordlist that appear in puzzle\n    #make a dictionary of each element in wordList that that can be found with the letters in puzzle (even if the letters in an element of puzzle need to be retordered), paired with its index in puzzle",
                "id": 0,
                "key": 0
            },
            {
                "diff": 4,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student70",
                "hover": "username:student70\nedge: (3->11)\ndiff:\n--- \n+++ \n@@ -39,17 +39,21 @@\n dictionary with the-index+count of the-string+number+of+times+it+appears+in+the+strings from puzzle-where-it-appeared as-the+its value. return the\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.\n    \"\"\"\n        d = {}\n    for i in range(len(puzzle)):\n        for word in wordList:\n            if word in puzzle[i]:\n                d[word] = i\n    return d\n\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a key to the dictionary with the count of the number of times it appears in the strings from puzzle as its value. return the dictionary.\n    \"\"\"\n        d = {}\n    for string in puzzle:\n        for word in wordList:\n            if word in string:\n                if word not in d:\n                    d[word] = string.count(word)\n                else:\n                    d[word] += string.count(word)\n    return d\n",
                "id": 11,
                "key": 0
            },
            {
                "diff": 2,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student70",
                "hover": "username:student70\nedge: (3->12)\ndiff:\n--- \n+++ \n@@ -25,6 +25,9 @@\n the same letters+in+any+order as a string\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain the same letters as a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.\n    \"\"\"\n        d = {}\n    for i in range(len(puzzle)):\n        for word in wordList:\n            if word in puzzle[i]:\n                d[word] = i\n    return d\n\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain the same letters in any order as a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.\n    \"\"\"\n        d = {}\n    for i in range(len(puzzle)):\n        for j in range(len(wordList)):\n            if isSubstring(puzzle[i],wordList[j]):\n                d[wordList[j]] = i\n    return d\n",
                "id": 12,
                "key": 0
            },
            {
                "diff": 5,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student78",
                "hover": "username:student78\nedge: (3->13)\ndiff:\n--- \n+++ \n@@ -13,6 +13,9 @@\n if the letters+(in+any+order) of each string\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that puzzle is a list of strings, check if the letters of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle\n    \"\"\"\n        horizDict = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n            if word in puzzle[i]:\n                horizDict[word] = i\n    return horizDict\n\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that puzzle is a list of strings, check if the letters (in any order) of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle\n    \"\"\"\n        horizontalDict = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n            if checkWord(word,puzzle[i]):\n                horizontalDict[word] = i\n    return horizontalDict\n",
                "id": 13,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student49",
                "hover": "username:student49\nedge: (4->5)\ndiff:\n--- \n+++ \n@@ -2,7 +2,6 @@\n findHorizontals(puzzle,wordList): \"\"\" Given-a two lists labeled@@ -21,6 +20,11 @@\n letters appear in+one+of+the+strings+in puzzle, create a@@ -38,6 +42,8 @@\n the position of+the+string where the letters\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    Given a two lists labeled puzzle and wordList, for each word in the wordList, if the same letters appear in puzzle, create a dictionary with the corresponding word in WordList as the key and the position of where the letters show up in puzzle as the value. \n    \"\"\"\n        horizontal = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n            if word in puzzle[i]:\n                horizontal[word] = (i,puzzle[i].index(word[0]))\n    return horizontal\n\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    Given two lists labeled puzzle and wordList, for each word in the wordList, if the same letters appear in one of the strings in puzzle, create a dictionary with the corresponding word in WordList as the key and the position of the string where the letters show up in puzzle as the value. \n    \"\"\"\n        puzzle = puzzle.split()\n    wordList = wordList.split()\n    horizontal = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n            if word in puzzle[i]:\n                horizontal[word] = i\n    return horizontal\n",
                "id": 5,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 10,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student62",
                "hover": "username:student62\nedge: (6->7)\ndiff:\n--- \n+++ \n@@ -1,9 +1,9 @@\n def findHorizontals(puzzle,wordList): \"\"\"-check-if-any+count+how+many elements in first@@ -17,9 +17,14 @@\n second list. If-they-do,+more+than+0, add to dictionary+with+count+as+value \"\"\"\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    check if any elements in first list include characters from each element in second list. If they do, add to dictionary\n    \"\"\"\n        horizontalWords = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n            if word in puzzle[i]:\n                horizontalWords[word] = puzzle[i]\n    return horizontalWords\n\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    count how many elements in first list include characters from each element in second list. If more than 0, add to dictionary with count as value\n    \"\"\"\n        horizontalDict = {}\n    for word in wordList:\n        count = 0\n        for row in puzzle:\n            if all(char in row for char in word):\n                count += 1\n        if count > 0:\n            horizontalDict[word] = count\n    return horizontalDict\n",
                "id": 7,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 13,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student66",
                "hover": "username:student66\nedge: (8->9)\ndiff:\n--- \n+++ \n@@ -4,29 +4,29 @@\n if the letters-of-the-strings+contained in the first-array-list+string are+entirely+contained+in+a+string in the+second array-list-above+list. then create a dictionary where the-second-array-list+that string is the@@ -35,6 +35,7 @@\n the index is-the-definition.+within+that+key \"\"\"\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    if the letters of the strings in the first array list are in the array list above then create a dictionary where the second array list string is the key and the index is the definition. \n    \"\"\"\n        wordDict = {}\n    for word in wordList:\n        for row in range(len(puzzle)):\n            for col in range(len(puzzle[row])):\n                if puzzle[row][col] == word[0]:\n                    if len(word) <= len(puzzle[row]) - col:\n                        if word == puzzle[row][col:col+len(word)]:\n                            if word not in word\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    if the letters contained in the first string are entirely contained in a string in the second array list. then create a dictionary where the that string is the key and the index is within that key\n    \"\"\"\n        wordDict = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n            if word in puzzle[i]:\n                if word not in wordDict:\n                    wordDict[word] = [i]\n                else:\n                    wordDict[word].append(i)\n    return wordDict\n",
                "id": 9,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 1,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student67",
                "hover": "username:student67\nedge: (10->0)\ndiff:\n--- \n+++ \n@@ -13,4 +13,13 @@\n the dictionary is+the+word+that+repeats+in+the+second+input+list. \"\"\"\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    Returns a list of dictionaries, where the name of the dictionary is \n    \"\"\"\n        horizontalWords = []\n    for i in range(len(puzzle)):\n        for j in range(len(puzzle[i])):\n            for word in wordList:\n                if word == puzzle[i][j:j+len(word)]:\n                    horizontalWords.append({\"word\":word,\"start\":[i,j],\"end\":[i,j+len(word)-1]})\n    return horizontalWords\n\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    Returns a list of dictionaries, where the name of the dictionary is the word that repeats in the second input list.\n    \"\"\"\n        #print(puzzle)\n    #print(wordList)\n    #print(puzzle[0])\n    #print(puzzle[0][0])\n    #print(puzzle[0][0][0])\n    #print(puzzle[0][0][0][0])\n    #print(puzzle[0][0][0][0][0])\n    #print(puzzle[0][0][0][0",
                "id": 0,
                "key": 0
            }
        ],
        [
            {
                "diff": 12,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student70",
                "hover": "username:student70\nedge: (11->3)\ndiff:\n--- \n+++ \n@@ -22,6 +22,10 @@\n in puzzle contain+the+same+letters+as a string from@@ -39,21 +43,17 @@\n dictionary with the-count+index of the-number-of-times-it-appears-in-the-strings+string from puzzle+where+it+appeared as-its+the value. return the\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a key to the dictionary with the count of the number of times it appears in the strings from puzzle as its value. return the dictionary.\n    \"\"\"\n        d = {}\n    for string in puzzle:\n        for word in wordList:\n            if word in string:\n                if word not in d:\n                    d[word] = string.count(word)\n                else:\n                    d[word] += string.count(word)\n    return d\n\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain the same letters as a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.\n    \"\"\"\n        d = {}\n    for i in range(len(puzzle)):\n        for word in wordList:\n            if word in puzzle[i]:\n                d[word] = i\n    return d\n",
                "id": 3,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 9,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student78",
                "hover": "username:student78\nedge: (13->4)\ndiff:\n--- \n+++ \n@@ -13,9 +13,6 @@\n if the letters-(in-any-order) of each string\n\nFROM completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that puzzle is a list of strings, check if the letters (in any order) of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle\n    \"\"\"\n        horizontalDict = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n            if checkWord(word,puzzle[i]):\n                horizontalDict[word] = i\n    return horizontalDict\n\n\nTO completion:\ndef findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that puzzle is a list of strings, check if the letters of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle\n    \"\"\"\n        horizontalWords = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n            if word in puzzle[i]:\n                horizontalWords[word] = (i,puzzle[i].index(word[0]))\n    return horizontalWords\n",
                "id": 4,
                "key": 0
            }
        ]
    ]
}