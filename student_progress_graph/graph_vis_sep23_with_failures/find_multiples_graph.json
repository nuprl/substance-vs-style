{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 7,
            "hover": "stdout:\n[20, 40, 60, 80]\n\n[10, 15, 20, 25]\n\n[1062, 1239, 1416, 1593, 1770, 1947]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 6,
            "hover": "stdout:\n[20, 40, 60, 80, 100]\n\n[50]\n\n[177000]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 1
        },
        {
            "stderr_id": 0,
            "stdout_id": 8,
            "hover": "stdout:\n[20, 40, 60, 80]\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 2
        },
        {
            "stderr_id": 0,
            "stdout_id": 5,
            "hover": "stdout:\n[20, 40, 60, 80, 100]\n\n[10, 15, 20, 25, 30]\n\n[1062, 1239, 1416, 1593, 1770, 1947]\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 3
        },
        {
            "stderr_id": 0,
            "stdout_id": 9,
            "hover": "stdout:\nrange(1, 101, 20)\n\nrange(10, 31, 5)\n\nrange(1000, 2001, 177)\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 4
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n[1, 21, 41, 61, 81]\n\n[10, 15, 20, 25, 30]\n\n[1000, 1177, 1354, 1531, 1708, 1885]\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 5
        },
        {
            "stderr_id": 2,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 6\n    print(find_multiples(1,100,20))\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(find_multiples(10, 30, 5))\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(find_multiples(1000,2000,177))\nIndentationError: expected an indented block after 'for' statement on line 5\n",
            "color": "grey",
            "id": 6
        },
        {
            "stderr_id": 3,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    find_multiples(start,stop,factor)\nNameError: name 'start' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    find_multiples(start,stop,factor)\nNameError: name 'start' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    find_multiples(start,stop,factor)\nNameError: name 'start' is not defined\n",
            "color": "blue",
            "id": 7
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\nNone\n\nNone\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 8
        },
        {
            "stderr_id": 0,
            "stdout_id": 4,
            "hover": "stdout:\n[1, 21, 41, 61, 81]\n\n[10, 15, 20, 25]\n\n[1000, 1177, 1354, 1531, 1708, 1885]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 9
        },
        {
            "stderr_id": 1,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 12\n    closest_numbers = [last_number +\n                      ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 12\n    closest_numbers = [last_number +\n                      ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 12\n    closest_numbers = [last_number +\n                      ^\nSyntaxError: '[' was never closed\n",
            "color": "blue",
            "id": 10
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\n(81, [1, 21, 41, 61, 81])\n\n(25, [10, 15, 20, 25])\n\n(1885, [1177, 1354, 1531, 1708, 1885])\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 11
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student11",
                "hover": "username:student11\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -5,16 +5,18 @@\n function ask for-start,+three+inputs:start, stop,-factor-and-by+factor.+By adding up start*factor and-getting+records+all+the sum of those\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask for start, stop, factor and by adding up start*factor and getting sum of those all the way until we get the stop. Then create a list to hold those values\n    \"\"\"\n        multiples = []\n    for i in range(start,stop):\n        if i % factor == 0:\n            multiples.append(i)\n    return multiples\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask for three inputs:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we get the stop. Then create a list to hold those values\n    \"\"\"\n        result = []\n    i = start\n    while i < stop:\n        if i % factor == 0:\n            result.append(i)\n        i += 1\n    return result\n",
                "id": 0,
                "key": 0
            },
            {
                "diff": 1,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student11",
                "hover": "username:student11\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -27,7 +27,7 @@\n we get the-stop.+stop-start. Then create a\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask for three inputs:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we get the stop. Then create a list to hold those values\n    \"\"\"\n        result = []\n    i = start\n    while i < stop:\n        if i % factor == 0:\n            result.append(i)\n        i += 1\n    return result\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask for three inputs:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we get the stop-start. Then create a list to hold those values\n    \"\"\"\n        multiples = []\n    for i in range(start,stop):\n        if i % factor == 0:\n            multiples.append(i)\n    return multiples\n\nprint(find_multiples(1,10,2))\n",
                "id": 0,
                "key": 1
            },
            {
                "diff": 4,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student13",
                "hover": "username:student13\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -10,7 +10,7 @@\n of the factor-between+in the range of\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    The function will find the multiples of the factor between the range of the start and stop numbers.\n    \"\"\"\n        multiples = []\n    for i in range(start,stop):\n        if i % factor == 0:\n            multiples.append(i)\n    return multiples\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    The function will find the multiples of the factor in the range of the start and stop numbers.\n    \"\"\"\n        multiples = []\n    for i in range(start,stop):\n        if i % factor == 0:\n            multiples.append(i)\n    return multiples\n",
                "id": 0,
                "key": 2
            },
            {
                "diff": 14,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student61",
                "hover": "username:student61\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -4,10 +4,14 @@\n Function returns multiples-between+from+the first-two-items+item+to+the+second+item in the input\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    Function returns multiples between first two items in the input in multiples of the third item\n    \"\"\"\n        return [x for x in range(start,stop) if x % factor == 0]\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    Function returns multiples from the first item to the second item in the input in multiples of the third item\n    \"\"\"\n        return [x for x in range(start,stop) if x % factor == 0]\n",
                "id": 0,
                "key": 3
            },
            {
                "diff": 2,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student11",
                "hover": "username:student11\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -27,7 +27,7 @@\n we get the-stop-start.+sum==stop. Then create a\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask for three inputs:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we get the stop-start. Then create a list to hold those values\n    \"\"\"\n        multiples = []\n    for i in range(start,stop):\n        if i % factor == 0:\n            multiples.append(i)\n    return multiples\n\nprint(find_multiples(1,10,2))\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask for three inputs:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we get the sum==stop. Then create a list to hold those values\n    \"\"\"\n        multiples=[]\n    sum=0\n    while sum<stop:\n        sum=sum+start*factor\n        multiples.append(sum)\n    return multiples\n\nprint(find_multiples(3,100,5))\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 5,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student13",
                "hover": "username:student13\nedge: (0->3)\ndiff:\n--- \n+++ \n@@ -10,7 +10,7 @@\n of the factor-in+between the range of@@ -18,5 +18,11 @@\n start and stop+numbers,+including+the+start+and+stop numbers. \"\"\"\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    The function will find the multiples of the factor in the range of the start and stop numbers.\n    \"\"\"\n        multiples = []\n    for i in range(start,stop):\n        if i % factor == 0:\n            multiples.append(i)\n    return multiples\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    The function will find the multiples of the factor between the range of the start and stop numbers, including the start and stop numbers.\n    \"\"\"\n        multiples = []\n    for i in range(start,stop+1):\n        if i % factor == 0:\n            multiples.append(i)\n    return multiples\n",
                "id": 3,
                "key": 0
            },
            {
                "diff": 13,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student5",
                "hover": "username:student5\nedge: (0->3)\ndiff:\n--- \n+++ \n@@ -37,5 +37,11 @@\n at the stopping-number.+number+but+including+it+in+the+list. \"\"\"\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    the function find_multiples will take the input of a starting number, a stopping number, and a factor. The function will start counting at the starting number and count up by the factor, stopping at the stopping number. \n    \"\"\"\n        #initialize the list\n    multiples = []\n    #start the loop\n    for i in range(start,stop):\n        #check if the number is a multiple of the factor\n        if i % factor == 0:\n            #add the number to the list\n            multiples.append(i)\n    #return the list\n    return multiples\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    the function find_multiples will take the input of a starting number, a stopping number, and a factor. The function will start counting at the starting number and count up by the factor, stopping at the stopping number but including it in the list. \n    \"\"\"\n        multiples = []\n    for i in range(start,stop+1):\n        if i%factor == 0:\n            multiples.append(i)\n    return multiples\n",
                "id": 3,
                "key": 1
            },
            {
                "diff": 15,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student61",
                "hover": "username:student61\nedge: (0->3)\ndiff:\n--- \n+++ \n@@ -12,6 +12,10 @@\n the second item+(including+the+second+item) in the input\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    Function returns multiples from the first item to the second item in the input in multiples of the third item\n    \"\"\"\n        return [x for x in range(start,stop) if x % factor == 0]\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    Function returns multiples from the first item to the second item (including the second item) in the input in multiples of the third item\n    \"\"\"\n        multiples = []\n    for i in range(start,stop+1):\n        if i % factor == 0:\n            multiples.append(i)\n    return multiples\n",
                "id": 3,
                "key": 2
            },
            {
                "diff": 16,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student72",
                "hover": "username:student72\nedge: (0->3)\ndiff:\n--- \n+++ \n@@ -12,17 +12,34 @@\n input. The first-and-second number of the input-are+is the-bounds+starting+bound and the+second+number+is+the+the+ending+bound,+but+is+included+in+the+list+of+multiples+if+applicable.+The last number is\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    Produce a list of multiples with the given input. The first and second number of the input are the bounds and the last number is the multiple.\n    \"\"\"\n        return [x for x in range(start,stop) if x % factor == 0]\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    Produce a list of multiples with the given input. The first number of the input is the starting bound and the second number is the the ending bound, but is included in the list of multiples if applicable. The last number is the multiple.\n    \"\"\"\n        multiples = []\n    for i in range(start,stop+1):\n        if i % factor == 0:\n            multiples.append(i)\n    return multiples\n",
                "id": 3,
                "key": 3
            },
            {
                "diff": 17,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student74",
                "hover": "username:student74\nedge: (0->3)\ndiff:\n--- \n+++ \n@@ -23,5 +23,12 @@\n also given as-inputs+inputs.+The+end+input+should+also+be+included \"\"\"\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    the code should increase the amount of a number by the factor given. Where to start and end are also given as inputs\n    \"\"\"\n        result = []\n    for i in range(start,stop):\n        if i % factor == 0:\n            result.append(i)\n    return result\n\nprint(find_multiples(1,10,2))\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    the code should increase the amount of a number by the factor given. Where to start and end are also given as inputs. The end input should also be included \n    \"\"\"\n        # your code here\n    return [x for x in range(start,stop+1) if x%factor==0]\n\nprint(find_multiples(1,10,2))\n",
                "id": 3,
                "key": 4
            },
            {
                "diff": 6,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student16",
                "hover": "username:student16\nedge: (0->4)\ndiff:\n--- \n+++ \n@@ -14,4 +14,9 @@\n the stop number+and+include+the+stop+number \"\"\"\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    from the start number inputted, count by the factor until the stop number\n    \"\"\"\n        multiples = []\n    for i in range(start,stop):\n        if i % factor == 0:\n            multiples.append(i)\n    return multiples\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    from the start number inputted, count by the factor until the stop number and include the stop number\n    \"\"\"\n        return range(start,stop+1,factor)\n",
                "id": 4,
                "key": 0
            }
        ],
        [
            {
                "diff": 3,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student11",
                "hover": "username:student11\nedge: (1->2)\ndiff:\n--- \n+++ \n@@ -35,5 +35,5 @@\n to hold those-values+values. \"\"\"\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask for three inputs:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we get the sum==stop. Then create a list to hold those values\n    \"\"\"\n        multiples=[]\n    sum=0\n    while sum<stop:\n        sum=sum+start*factor\n        multiples.append(sum)\n    return multiples\n\nprint(find_multiples(3,100,5))\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask for three inputs:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we get the sum==stop. Then create a list to hold those values.\n    \"\"\"\n        result = []\n    while start*factor < stop:\n        result.append(start*factor)\n        start += 1\n    return result\n",
                "id": 2,
                "key": 0
            }
        ],
        [],
        [],
        [
            {
                "diff": 7,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student16",
                "hover": "username:student16\nedge: (4->5)\ndiff:\n--- \n+++ \n@@ -13,10 +13,13 @@\n until the stop-number-and-include+number,+including the stop number+and+return+as+list \"\"\"\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    from the start number inputted, count by the factor until the stop number and include the stop number\n    \"\"\"\n        return range(start,stop+1,factor)\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    from the start number inputted, count by the factor until the stop number, including the stop number and return as list\n    \"\"\"\n        return list(range(start,stop+1,factor))\n",
                "id": 5,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student16",
                "hover": "username:student16\nedge: (5->5)\ndiff:\n\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    from the start number inputted, count by the factor until the stop number, including the stop number and return as list\n    \"\"\"\n        return list(range(start,stop+1,factor))\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    from the start number inputted, count by the factor until the stop number, including the stop number and return as list\n    \"\"\"\n        return list(range(start,stop+1,factor))\n",
                "id": 5,
                "key": 0
            }
        ],
        [
            {
                "diff": 9,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (6->7)\ndiff:\n--- \n+++ \n@@ -4,14 +4,17 @@\n This function prints-values-from the start+value+and+adds+the+factor until+it+reaches the stop-by-the-factor+value \"\"\"\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    This function prints values from the start until the stop by the factor\n    \"\"\"\n        for i in range(start,stop,factor):\n        print(i)\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    This function prints the start value and adds the factor until it reaches the stop value\n    \"\"\"\n        while start < stop:\n        print(start)\n        start += factor\n\nfind_multiples(start,stop,factor)",
                "id": 7,
                "key": 0
            }
        ],
        [
            {
                "diff": 10,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (7->8)\ndiff:\n--- \n+++ \n@@ -10,6 +10,7 @@\n and adds the+value factor until it\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    This function prints the start value and adds the factor until it reaches the stop value\n    \"\"\"\n        while start < stop:\n        print(start)\n        start += factor\n\nfind_multiples(start,stop,factor)\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    This function prints the start value and adds the value factor until it reaches the stop value\n    \"\"\"\n        while start < stop:\n        print(start)\n        start += factor\n\nfind_multiples(1,10,2)\n",
                "id": 8,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (8->8)\ndiff:\n\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    This function prints the start value and adds the value factor until it reaches the stop value\n    \"\"\"\n        while start < stop:\n        print(start)\n        start += factor\n\nfind_multiples(1,10,2)\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    This function prints the start value and adds the value factor until it reaches the stop value\n    \"\"\"\n        i = start\n    while i < stop:\n        print(i)\n        i += factor\n\nfind_multiples(0,100,10)\n",
                "id": 8,
                "key": 0
            }
        ],
        [
            {
                "diff": 11,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student22",
                "hover": "username:student22\nedge: (9->10)\ndiff:\n--- \n+++ \n@@ -16,9 +16,21 @@\n and output a-list-based-on-those-parameters+including+the+last+number,+and+the+5+closest+numbers+in+the+step+size+to+that+last+number \"\"\"\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    take in a list of integers [start number, final number, step size] and output a list based on those parameters\n    \"\"\"\n        return [x for x in range(start,stop,factor)]\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    take in a list of integers [start number, final number, step size] and output a including the last number, and the 5 closest numbers in the step size to that last number\n    \"\"\"\n        #create a list of numbers from start to stop\n    numbers = range(start,stop)\n    #create a list of multiples of factor\n    multiples = [x for x in numbers if x % factor == 0]\n    #find the last number in the list\n    last_number = multiples[-1]\n    #find the 5 closest numbers in the step size to that last number\n    closest_numbers = [last_number +",
                "id": 10,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student22",
                "hover": "username:student22\nedge: (10->11)\ndiff:\n\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    take in a list of integers [start number, final number, step size] and output a including the last number, and the 5 closest numbers in the step size to that last number\n    \"\"\"\n        #create a list of numbers from start to stop\n    numbers = range(start,stop)\n    #create a list of multiples of factor\n    multiples = [x for x in numbers if x % factor == 0]\n    #find the last number in the list\n    last_number = multiples[-1]\n    #find the 5 closest numbers in the step size to that last number\n    closest_numbers = [last_number +\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    take in a list of integers [start number, final number, step size] and output a including the last number, and the 5 closest numbers in the step size to that last number\n    \"\"\"\n        #create a list of numbers\n    numbers = list(range(start,stop,factor))\n    #find the last number in the list\n    last_number = numbers[-1]\n    #find the 5 closest numbers to the last number\n    closest_numbers = numbers[-5:]\n    #return the last number and the 5 closest numbers\n    return last_number, closest_numbers\n",
                "id": 11,
                "key": 0
            }
        ],
        [
            {
                "diff": 12,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student22",
                "hover": "username:student22\nedge: (11->3)\ndiff:\n--- \n+++ \n@@ -7,30 +7,25 @@\n list of integers-[start-number,-final-number,-step-size]+[start,+stop,+factor] and output a+list+starting+at+the+closest+even+number+to+the+start,+and including the-last-number,-and-the-5-closest-numbers-in-the-step-size-to-that-last+stop number \"\"\"\n\nFROM completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    take in a list of integers [start number, final number, step size] and output a including the last number, and the 5 closest numbers in the step size to that last number\n    \"\"\"\n        #create a list of numbers\n    numbers = list(range(start,stop,factor))\n    #find the last number in the list\n    last_number = numbers[-1]\n    #find the 5 closest numbers to the last number\n    closest_numbers = numbers[-5:]\n    #return the last number and the 5 closest numbers\n    return last_number, closest_numbers\n\n\nTO completion:\ndef find_multiples(start,stop,factor):\n    \"\"\"\n    take in a list of integers [start, stop, factor] and output a list starting at the closest even number to the start, and including the stop number\n    \"\"\"\n        multiples = []\n    for i in range(start,stop+1):\n        if i % factor == 0:\n            multiples.append(i)\n    return multiples\n",
                "id": 3,
                "key": 0
            }
        ]
    ]
}