{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\nTrue\n\nFalse\n\nFalse\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\nTrue\n\nTrue\n\nFalse\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 1
        },
        {
            "stderr_id": 0,
            "stdout_id": 0,
            "hover": "stdout:\nFalse\n\nFalse\n\nFalse\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\nFalse\n\nTrue\n\nTrue\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 3
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student35",
                "hover": "username:student35\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -34,14 +34,9 @@\n all the values-are-the-exact-same-as-that-of-'letter'.+match+with+letter. If so, it\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    'board' is a list of lists with string values. 'letter' is a string value. The function checks if there is any list inside the list of lists in which all the values are the exact same as that of 'letter'. If so, it returns True otherwise False.\n    \"\"\"\n        for row in board:\n        if row.count(letter) == len(row):\n            return True\n    return False\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    'board' is a list of lists with string values. 'letter' is a string value. The function checks if there is any list inside the list of lists in which all the values match with letter. If so, it returns True otherwise False.\n    \"\"\"\n        for row in board:\n        if row.count(letter) == len(row):\n            return True\n    return False\n",
                "id": 0,
                "key": 0
            },
            {
                "diff": 11,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student69",
                "hover": "username:student69\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -5,18 +5,43 @@\n Enter a list+where+the+0th+index+is+a+list of lists of-strings.+strings,+and+the+1st+index+is+a+character. if any list+in+the+0th+index has five consecutive-'X'-values,+values+of+the+character+entered+in+the+1st+index, return true. else\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Enter a list of lists of strings. if any list has five consecutive 'X' values, return true. else return false\n    \"\"\"\n        for row in board:\n        if row.count(letter) == 5:\n            return True\n    return False\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Enter a list where the 0th index is a list of lists of strings, and the 1st index is a character. if any list in the 0th index has five consecutive values of the character entered in the 1st index, return true. else return false\n    \"\"\"\n        for row in board:\n        for i in range(len(row) - 4):\n            if row[i] == letter and row[i + 1] == letter and row[i + 2] == letter and row[i + 3] == letter and row[i + 4] == letter:\n                return True\n    return False\n",
                "id": 0,
                "key": 1
            },
            {
                "diff": 8,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student64",
                "hover": "username:student64\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -7,15 +7,14 @@\n of lists, if-all-5-characters-in+a list-is-equal-to-letter,+has+consecutive+'X'+or+'O'+character, return true. Otherwise,\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    In list of lists, if all 5 characters in list is equal to letter, return true. Otherwise, return false.\n    \"\"\"\n        for row in board:\n        if row[0] == letter and row[1] == letter and row[2] == letter and row[3] == letter and row[4] == letter:\n            return True\n    return False\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    In list of lists, if a list has consecutive 'X' or 'O' character, return true. Otherwise, return false.\n    \"\"\"\n        for row in board:\n        if row[0] == row[1] == row[2] == letter:\n            return True\n    return False\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student44",
                "hover": "username:student44\nedge: (1->1)\ndiff:\n--- \n+++ \n@@ -10,11 +10,11 @@\n an index that-has+contains the same value-for+in all the arrays\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Return true if there is an index that has the same value for all the arrays in the array or there is an array with all the same values.\n    \"\"\"\n        for i in range(len(board)):\n        if board[i][0] == letter and board[i][1] == letter and board[i][2] == letter:\n            return True\n    return False\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Return true if there is an index that contains the same value in all the arrays in the array or there is an array with all the same values.\n    \"\"\"\n        for row in board:\n        if row[0] == row[1] == row[2] == letter:\n            return True\n    return False\n\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 2,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student44",
                "hover": "username:student44\nedge: (1->1)\ndiff:\n\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Return true if there is an index that contains the same value in all the arrays in the array or there is an array with all the same values.\n    \"\"\"\n        for row in board:\n        if row[0] == row[1] == row[2] == letter:\n            return True\n    return False\n\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Return true if there is an index that contains the same value in all the arrays in the array or there is an array with all the same values.\n    \"\"\"\n        for i in range(len(board)):\n        if board[i][0] == board[i][1] == board[i][2] == letter:\n            return True\n    return False\n",
                "id": 1,
                "key": 1
            },
            {
                "diff": 3,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student50",
                "hover": "username:student50\nedge: (1->1)\ndiff:\n--- \n+++ \n@@ -2,6 +2,20 @@\n hasHorizontalWin(board, letter): \"\"\"+Measure+the+height+and+width+of+a+2D+array,+which+will+be+iterated+over. If all elements\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    If all elements of a row or all elements of a column in a 2D array are the same, return true. Else, return false.\n    \"\"\"\n        for i in range(3):\n        if board[i][0] == board[i][1] == board[i][2] == letter:\n            return True\n        if board[0][i] == board[1][i] == board[2][i] == letter:\n            return True\n    return False\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Measure the height and width of a 2D array, which will be iterated over. If all elements of a row or all elements of a column in a 2D array are the same, return true. Else, return false.\n    \"\"\"\n        for row in range(len(board)):\n        if board[row][0] == letter and board[row][1] == letter and board[row][2] == letter:\n            return True\n    return False\n",
                "id": 1,
                "key": 2
            },
            {
                "diff": 4,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student50",
                "hover": "username:student50\nedge: (1->1)\ndiff:\n--- \n+++ \n@@ -37,6 +37,17 @@\n same, return true.+make+sure+to+check+all+elements+in+the+row+or+column. Else, return false.\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Measure the height and width of a 2D array, which will be iterated over. If all elements of a row or all elements of a column in a 2D array are the same, return true. Else, return false.\n    \"\"\"\n        for row in range(len(board)):\n        if board[row][0] == letter and board[row][1] == letter and board[row][2] == letter:\n            return True\n    return False\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Measure the height and width of a 2D array, which will be iterated over. If all elements of a row or all elements of a column in a 2D array are the same, return true. make sure to check all elements in the row or column. Else, return false.\n    \"\"\"\n        for i in range(len(board)):\n        if board[i][0] == letter and board[i][1] == letter and board[i][2] == letter:\n            return True\n    for i in range(len(board)):\n        if board[0][i] == letter and board[1][i] == letter and board[2][i] == letter:\n            return True\n    return False\n",
                "id": 1,
                "key": 3
            },
            {
                "diff": 2,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student50",
                "hover": "username:student50\nedge: (1->1)\ndiff:\n\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Measure the height and width of a 2D array, which will be iterated over. If all elements of a row or all elements of a column in a 2D array are the same, return true. make sure to check all elements in the row or column. Else, return false.\n    \"\"\"\n        for i in range(len(board)):\n        if board[i][0] == letter and board[i][1] == letter and board[i][2] == letter:\n            return True\n    for i in range(len(board)):\n        if board[0][i] == letter and board[1][i] == letter and board[2][i] == letter:\n            return True\n    return False\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Measure the height and width of a 2D array, which will be iterated over. If all elements of a row or all elements of a column in a 2D array are the same, return true. make sure to check all elements in the row or column. Else, return false.\n    \"\"\"\n        for row in range(len(board)):\n        if board[row][0] == letter and board[row][1] == letter and board[row][2] == letter:\n            return True\n    return False\n",
                "id": 1,
                "key": 4
            },
            {
                "diff": 5,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student50",
                "hover": "username:student50\nedge: (1->1)\ndiff:\n--- \n+++ \n@@ -2,52 +2,26 @@\n hasHorizontalWin(board, letter): \"\"\"-Measure-the-height-and-width-of+Iterate+through a 2D-array,-which-will-be-iterated-over.+array. If-all-elements-of a row or+column+of+an+array+contain all-elements-of-a-column-in-a-2D-array-are the-same,+same+element, return true.-make-sure-to-check-all-elements-in-the-row-or-column. Else, return false.\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Measure the height and width of a 2D array, which will be iterated over. If all elements of a row or all elements of a column in a 2D array are the same, return true. make sure to check all elements in the row or column. Else, return false.\n    \"\"\"\n        for row in range(len(board)):\n        if board[row][0] == letter and board[row][1] == letter and board[row][2] == letter:\n            return True\n    return False\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Iterate through a 2D array. If a row or column of an array contain all the same element, return true. Else, return false.\n    \"\"\"\n        for row in range(len(board)):\n        if board[row][0] == letter and board[row][1] == letter and board[row][2] == letter:\n            return True\n    return False\n",
                "id": 1,
                "key": 5
            },
            {
                "diff": 6,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student50",
                "hover": "username:student50\nedge: (1->1)\ndiff:\n--- \n+++ \n@@ -22,6 +22,21 @@\n element, return true.+For+example,+if+the+row+length+is+5,+check+all+5+elements+in+the+list. Else, return false.\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Iterate through a 2D array. If a row or column of an array contain all the same element, return true. Else, return false.\n    \"\"\"\n        for row in range(len(board)):\n        if board[row][0] == letter and board[row][1] == letter and board[row][2] == letter:\n            return True\n    return False\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Iterate through a 2D array. If a row or column of an array contain all the same element, return true. For example, if the row length is 5, check all 5 elements in the list. Else, return false.\n    \"\"\"\n        for row in range(len(board)):\n        if board[row][0] == letter and board[row][1] == letter and board[row][2] == letter:\n            return True\n    return False\n",
                "id": 1,
                "key": 6
            },
            {
                "diff": 9,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student64",
                "hover": "username:student64\nedge: (1->1)\ndiff:\n--- \n+++ \n@@ -7,10 +7,12 @@\n of lists, if-a+each+character+in list-has-consecutive+is+an 'X' or 'O'\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    In list of lists, if a list has consecutive 'X' or 'O' character, return true. Otherwise, return false.\n    \"\"\"\n        for row in board:\n        if row[0] == row[1] == row[2] == letter:\n            return True\n    return False\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    In list of lists, if each character in list is an 'X' or 'O' character, return true. Otherwise, return false.\n    \"\"\"\n        for row in board:\n        if row[0] == row[1] == row[2] == letter:\n            return True\n    return False\n",
                "id": 1,
                "key": 7
            },
            {
                "diff": 10,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student64",
                "hover": "username:student64\nedge: (1->1)\ndiff:\n--- \n+++ \n@@ -12,11 +12,9 @@\n in list is-an-'X'-or-'O'-character,+equal+to+letter, return true. Otherwise,\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    In list of lists, if each character in list is an 'X' or 'O' character, return true. Otherwise, return false.\n    \"\"\"\n        for row in board:\n        if row[0] == row[1] == row[2] == letter:\n            return True\n    return False\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    In list of lists, if each character in list is equal to letter, return true. Otherwise, return false.\n    \"\"\"\n        for row in board:\n        if row[0] == row[1] == row[2] == letter:\n            return True\n    return False\n\n",
                "id": 1,
                "key": 8
            }
        ],
        [
            {
                "diff": 7,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student64",
                "hover": "username:student64\nedge: (2->0)\ndiff:\n--- \n+++ \n@@ -7,8 +7,9 @@\n of lists, if-every-character+all+5+characters in list is\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    In list of lists, if every character in list is equal to letter, return true. Otherwise, return false.\n    \"\"\"\n        for row in board:\n        if row == [letter, letter, letter]:\n            return True\n    return False\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    In list of lists, if all 5 characters in list is equal to letter, return true. Otherwise, return false.\n    \"\"\"\n        for row in board:\n        if row[0] == letter and row[1] == letter and row[2] == letter and row[3] == letter and row[4] == letter:\n            return True\n    return False\n",
                "id": 0,
                "key": 0
            }
        ],
        [
            {
                "diff": 12,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student76",
                "hover": "username:student76\nedge: (3->3)\ndiff:\n--- \n+++ \n@@ -5,13 +5,14 @@\n Looks through a-list-of-lists+dictionary and if one list+inside+the+dictionary contains only 'X'\n\nFROM completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Looks through a list of lists and if one list contains only 'X' it returns True if not it returns False\n    \"\"\"\n        for row in board:\n        if row.count(letter) == 3:\n            return True\n    return False\n\n\nTO completion:\ndef hasHorizontalWin(board, letter):\n    \"\"\"\n    Looks through a dictionary and if one list inside the dictionary contains only 'X' it returns True if not it returns False\n    \"\"\"\n        for row in board:\n        if row.count(letter) == 3:\n            return True\n    return False\n",
                "id": 3,
                "key": 0
            }
        ]
    ]
}