{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 10,
            "hover": "stdout:\nhaaaaa\n\nhaa\n\nhaaaa\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 23,
            "hover": "stdout:\nhahahahahahaha\n\nha\n\nhahahahaha\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 1
        },
        {
            "stderr_id": 7,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 8\n    laugh(3)\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 8\n    laugh(3)\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 8\n    laugh(3)\nIndentationError: expected an indented block after 'for' statement on line 5\n",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\n_no_stdout_\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 3
        },
        {
            "stderr_id": 0,
            "stdout_id": 28,
            "hover": "stdout:\nhahhhh\n\nhah\n\nhahhh\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 4
        },
        {
            "stderr_id": 0,
            "stdout_id": 29,
            "hover": "stdout:\nhahhhh!\n\nhah!\n\nhahhh!\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 5
        },
        {
            "stderr_id": 0,
            "stdout_id": 16,
            "hover": "stdout:\nhahahaha\n\nha\n\nhahaha\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 6
        },
        {
            "stderr_id": 4,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 7\n    else:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 5\n\n  File \"/tmp/file.py\", line 7\n    else:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 5\n\n  File \"/tmp/file.py\", line 7\n    else:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 5\n",
            "color": "blue",
            "id": 7
        },
        {
            "stderr_id": 8,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 8\n    print(laugh(4))\nIndentationError: expected an indented block after 'for' statement on line 7\n\n  File \"/tmp/file.py\", line 8\n    print(laugh(1))\nIndentationError: expected an indented block after 'for' statement on line 7\n\n  File \"/tmp/file.py\", line 8\n    print(laugh(3))\nIndentationError: expected an indented block after 'for' statement on line 7\n",
            "color": "blue",
            "id": 8
        },
        {
            "stderr_id": 11,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(laugh(4))\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(3)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(3)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(3)\n  [Previous line repeated 996 more times]\nRecursionError: maximum recursion depth exceeded\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(laugh(1))\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(3)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(3)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(3)\n  [Previous line repeated 996 more times]\nRecursionError: maximum recursion depth exceeded\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(laugh(3))\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(3)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(3)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(3)\n  [Previous line repeated 996 more times]\nRecursionError: maximum recursion depth exceeded\n",
            "color": "blue",
            "id": 9
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\nNone\n\nNone\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 10
        },
        {
            "stderr_id": 9,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 9\n    laugh(3)\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 9\n    laugh(3)\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 9\n    laugh(3)\nIndentationError: expected an indented block after 'for' statement on line 5\n",
            "color": "grey",
            "id": 11
        },
        {
            "stderr_id": 12,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(laugh(4))\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(5)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(5)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(5)\n  [Previous line repeated 996 more times]\nRecursionError: maximum recursion depth exceeded\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(laugh(1))\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(5)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(5)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(5)\n  [Previous line repeated 996 more times]\nRecursionError: maximum recursion depth exceeded\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(laugh(3))\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(5)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(5)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(5)\n  [Previous line repeated 996 more times]\nRecursionError: maximum recursion depth exceeded\n",
            "color": "blue",
            "id": 12
        },
        {
            "stderr_id": 0,
            "stdout_id": 22,
            "hover": "stdout:\nhahahahaha\n\nhaha\n\nhahahaha\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 13
        },
        {
            "stderr_id": 10,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(laugh(4))\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(10)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(10)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(10)\n  [Previous line repeated 996 more times]\nRecursionError: maximum recursion depth exceeded\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(laugh(1))\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(10)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(10)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(10)\n  [Previous line repeated 996 more times]\nRecursionError: maximum recursion depth exceeded\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(laugh(3))\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(10)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(10)\n  File \"/tmp/file.py\", line 5, in laugh\n    laugh(10)\n  [Previous line repeated 996 more times]\nRecursionError: maximum recursion depth exceeded\n",
            "color": "blue",
            "id": 14
        },
        {
            "stderr_id": 1,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 11\n    laugh(3)\nIndentationError: expected an indented block after 'else' statement on line 8\n\n  File \"/tmp/file.py\", line 11\n    laugh(3)\nIndentationError: expected an indented block after 'else' statement on line 8\n\n  File \"/tmp/file.py\", line 11\n    laugh(3)\nIndentationError: expected an indented block after 'else' statement on line 8\n",
            "color": "blue",
            "id": 15
        },
        {
            "stderr_id": 3,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 7\n    elif size == 2:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 5\n\n  File \"/tmp/file.py\", line 7\n    elif size == 2:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 5\n\n  File \"/tmp/file.py\", line 7\n    elif size == 2:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 5\n",
            "color": "blue",
            "id": 16
        },
        {
            "stderr_id": 0,
            "stdout_id": 20,
            "hover": "stdout:\nhahahaha!\n\nha!\n\nhahaha!\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 17
        },
        {
            "stderr_id": 2,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 6\n    print(laugh(4))\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(laugh(1))\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(laugh(3))\nIndentationError: expected an indented block after 'for' statement on line 5\n",
            "color": "blue",
            "id": 18
        },
        {
            "stderr_id": 5,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 7\n    for i in range(size-1,0,-1):\n    ^\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 7\n    for i in range(size-1,0,-1):\n    ^\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 7\n    for i in range(size-1,0,-1):\n    ^\nIndentationError: expected an indented block after 'for' statement on line 5\n",
            "color": "red",
            "id": 19
        },
        {
            "stderr_id": 6,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 7\n    print laugh(3)\n    ^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n\n  File \"/tmp/file.py\", line 7\n    print laugh(3)\n    ^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n\n  File \"/tmp/file.py\", line 7\n    print laugh(3)\n    ^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n",
            "color": "grey",
            "id": 20
        },
        {
            "stderr_id": 0,
            "stdout_id": 12,
            "hover": "stdout:\nhaaaah\n\nhah\n\nhaaah\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 21
        },
        {
            "stderr_id": 0,
            "stdout_id": 21,
            "hover": "stdout:\nhahahahah\n\nhah\n\nhahahah\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 22
        },
        {
            "stderr_id": 0,
            "stdout_id": 18,
            "hover": "stdout:\nhahahaha hahaha haha ha \n\nha \n\nhahaha haha ha \n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 23
        },
        {
            "stderr_id": 0,
            "stdout_id": 4,
            "hover": "stdout:\nh ha haa haaa \n\nh \n\nh ha haa \n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 24
        },
        {
            "stderr_id": 0,
            "stdout_id": 7,
            "hover": "stdout:\nhaaaa haaa haa ha \n\nha \n\nhaaa haa ha \n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 25
        },
        {
            "stderr_id": 0,
            "stdout_id": 5,
            "hover": "stdout:\nhaa ha ha\n\nha\n\nha ha\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 26
        },
        {
            "stderr_id": 0,
            "stdout_id": 30,
            "hover": "stdout:\nhi hii  hiii   hiiii\n\nhi\n\nhi hii  hiii\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 27
        },
        {
            "stderr_id": 0,
            "stdout_id": 6,
            "hover": "stdout:\nhaaaa haaa haa ha\n\nha\n\nhaaa haa ha\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 28
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\n ha haha hahaha !\n\n !\n\n ha haha !\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 29
        },
        {
            "stderr_id": 0,
            "stdout_id": 13,
            "hover": "stdout:\nhaaaahaaahaaha\n\nha\n\nhaaahaaha\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 30
        },
        {
            "stderr_id": 0,
            "stdout_id": 8,
            "hover": "stdout:\nhaaaa haaa haa ha h\n\nha h\n\nhaaa haa ha h\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 31
        },
        {
            "stderr_id": 0,
            "stdout_id": 11,
            "hover": "stdout:\nhaaaaa haaaa haaa haa ha\n\nhaa ha\n\nhaaaa haaa haa ha\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 32
        },
        {
            "stderr_id": 0,
            "stdout_id": 17,
            "hover": "stdout:\nhahahaha   hahahaha\n\nhaha\n\nhahaha  hahaha\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 33
        },
        {
            "stderr_id": 0,
            "stdout_id": 27,
            "hover": "stdout:\nhahahahahhhhh\n\nhahh\n\nhahahahhhh\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 34
        },
        {
            "stderr_id": 0,
            "stdout_id": 15,
            "hover": "stdout:\nhaaaahhaaahhaahhahh\n\nhahh\n\nhaaahhaahhahh\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 35
        },
        {
            "stderr_id": 0,
            "stdout_id": 26,
            "hover": "stdout:\nhahahahahhahahahhahahahhahahhahahhahha\n\nha\n\nhahahahhahahhahahhahha\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 36
        },
        {
            "stderr_id": 0,
            "stdout_id": 24,
            "hover": "stdout:\nhahahahahahahahaha\n\nhahaha\n\nhahahahahahaha\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 37
        },
        {
            "stderr_id": 0,
            "stdout_id": 9,
            "hover": "stdout:\nhaaaa haaa haa ha ha\n\nha ha\n\nhaaa haa ha ha\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 38
        },
        {
            "stderr_id": 0,
            "stdout_id": 25,
            "hover": "stdout:\nhahahahahahahahahahaha\n\nhaha\n\nhahahahahahaha\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 39
        },
        {
            "stderr_id": 0,
            "stdout_id": 14,
            "hover": "stdout:\nhaaaahaaahaahah\n\nhah\n\nhaaahaahah\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 40
        },
        {
            "stderr_id": 0,
            "stdout_id": 19,
            "hover": "stdout:\nhahahaha hahaha haha ha ha\n\nha ha\n\nhahaha haha ha ha\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 41
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student11",
                "hover": "username:student11\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -25,4 +25,14 @@\n one more 'a'+and+have+another+'ha'+with+the+original+length+of+'a' \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    a function have initial input as 'ha' when  input of size(int) is 1, when size+= 1 from 1, 'ha' will gain one more 'a'\n    \"\"\"\n        laugh = \"ha\"\n    for i in range(size):\n        laugh = laugh + 'a'\n    return laugh\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    a function have initial input as 'ha' when  input of size(int) is 1, when size+= 1 from 1, 'ha' will gain one more 'a' and have another 'ha' with the original length of 'a'\n    \"\"\"\n        if size == 1:\n        return 'ha'\n    else:\n        return 'ha' + 'ha' + laugh(size-1)\n\nprint(laugh(3))\n",
                "id": 1,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 1,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student13",
                "hover": "username:student13\nedge: (2->3)\ndiff:\n--- \n+++ \n@@ -1,43 +1,32 @@\n def laugh(size): \"\"\"-The-function-will-repeat-the-word-\"ha\"-based+Based on the+inputted+number,+will+return+a+laugh size-inputted.-Each-time-the-word-\"ha\"-is-printed,+where the number of-\"a\"s-in+\"a\"'s+starts+with the-\"ha\"-will-start-with-its initial size, then-decrease+decreases by one for each-repetition.+additional+laugh. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    The function will repeat the word \"ha\" based on the size inputted. Each time the word \"ha\" is printed, the number of \"a\"s in the \"ha\" will start with its initial size, then decrease by one for each repetition.\n    \"\"\"\n        for i in range(size):\n        print(\"ha\"*(size-i))\n\nlaugh(3)\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    Based on the inputted number, will return a laugh size where the number of \"a\"'s starts with the initial size, then decreases by one for each additional laugh.\n    \"\"\"\n        laugh = \"a\"\n    for i in range(size):\n        print(laugh)\n        laugh = laugh[:-1]\n    return laugh\n\nlaugh(3)\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 2,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student13",
                "hover": "username:student13\nedge: (3->4)\ndiff:\n--- \n+++ \n@@ -11,22 +11,40 @@\n a laugh size+repeating+the+word+\"ha\"+that+number+of+times.+Based+on+the+number+inputted,+the+function+will+produce+the+set+of+characters where the number of \"a\"'s-starts-with+following the-initial-size,-then-decreases+\"h\"+will+decrease by one for each-additional-laugh.+\"ha\". \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    Based on the inputted number, will return a laugh size where the number of \"a\"'s starts with the initial size, then decreases by one for each additional laugh.\n    \"\"\"\n        laugh = \"a\"\n    for i in range(size):\n        print(laugh)\n        laugh = laugh[:-1]\n    return laugh\n\nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    Based on the inputted number, will return a laugh size repeating the word \"ha\" that number of times. Based on the number inputted, the function will produce the set of characters where the number of \"a\"'s following the \"h\" will decrease by one for each \"ha\".\n    \"\"\"\n        laugh = \"ha\"\n    for i in range(size):\n        laugh += \"ha\"\n        laugh = laugh[:-1]\n    return laugh\n\nprint(laugh(3))\n",
                "id": 4,
                "key": 0
            }
        ],
        [
            {
                "diff": 3,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student13",
                "hover": "username:student13\nedge: (4->5)\ndiff:\n--- \n+++ \n@@ -5,46 +5,41 @@\n on the inputted-number,+size,+the+function will return a laugh-size+size, repeating the word \"ha\"-that-number-of-times.-Based-on-the-number-inputted,-the-function-will-produce-the-set-of-characters-where the number of-\"a\"'s-following+times+inputted.+The+number+of+\"a\"s+in the-\"h\"+\"ha\" will+start+with+its+initial+size,+then decrease by one for each-\"ha\".+repetition. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    Based on the inputted number, will return a laugh size repeating the word \"ha\" that number of times. Based on the number inputted, the function will produce the set of characters where the number of \"a\"'s following the \"h\" will decrease by one for each \"ha\".\n    \"\"\"\n        laugh = \"ha\"\n    for i in range(size):\n        laugh += \"ha\"\n        laugh = laugh[:-1]\n    return laugh\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    Based on the inputted size, the function will return a laugh size, repeating the word \"ha\" the number of times inputted. The number of \"a\"s in the \"ha\" will start with its initial size, then decrease by one for each repetition.\n    \"\"\"\n        laugh = \"ha\"\n    for i in range(size):\n        laugh += \"ha\"\n        laugh = laugh[:-1]\n    return laugh + \"!\"\n\nprint(laugh(3))",
                "id": 5,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 4,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (6->7)\ndiff:\n--- \n+++ \n@@ -6,6 +6,20 @@\n prints \"ha\" for-any-value+an+input+of+1.+This+function+prints+an+additional+\"haa\"+for+an+input+greater+than+1 \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" for any value\n    \"\"\"\n        return \"ha\" * size\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" for an input of 1. This function prints an additional \"haa\" for an input greater than 1 \n    \"\"\"\n        if size == 1:\n        print(\"ha\")\n    else:\n        print(\"ha\" * size)\n\nlaugh(3)\n",
                "id": 7,
                "key": 0
            },
            {
                "diff": 26,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (6->18)\ndiff:\n--- \n+++ \n@@ -16,5 +16,35 @@\n times ha is-printed+printed.+This+function+creates+a+loop+in+which+it+prints+an+h+with+a's+the+size+of+laugh+then+subtracts+1+from+the+size+and+prints+an+h+with+less+a's \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function uses the size of laugh to determine the amount of times ha is printed \n    \"\"\"\n        ha = \"ha\"\n    return ha * size\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function uses the size of laugh to determine the amount of times ha is printed. This function creates a loop in which it prints an h with a's the size of laugh then subtracts 1 from the size and prints an h with less a's\n    \"\"\"\n        for i in range(size):\n        print(\"ha\", end=\"\")\n    print(\"h\")\n",
                "id": 18,
                "key": 0
            },
            {
                "diff": 31,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student22",
                "hover": "username:student22\nedge: (6->10)\ndiff:\n--- \n+++ \n@@ -7,7 +7,8 @@\n integer and write-'ha'+'ha+' as many times\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    take in an integer and write 'ha' as many times as the integer\n    \"\"\"\n        return \"ha\" * size\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    take in an integer and write 'ha ' as many times as the integer\n    \"\"\"\n        ha = \"ha\"\n    print(ha * size)\n\nlaugh(3)\n",
                "id": 10,
                "key": 0
            }
        ],
        [
            {
                "diff": 5,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (7->8)\ndiff:\n--- \n+++ \n@@ -4,22 +4,48 @@\n This function prints-\"ha\"-for an-input+'h'+and+adds+the+corresponding+amount of-1.-This-function+a's+as+the+value+provided.+It+then+adds+a+space+to+the+output.+It+subtracts+1+from+the+value+and prints-an-additional-\"haa\"-for-an-input-greater-than-1+another+h+with+less+a's+and+repeats+until+the+value+of+the+number+is+0 \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" for an input of 1. This function prints an additional \"haa\" for an input greater than 1 \n    \"\"\"\n        if size == 1:\n        print(\"ha\")\n    else:\n        print(\"ha\" * size)\n\nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints an 'h' and adds the corresponding amount of a's as the value provided. It then adds a space to the output. It subtracts 1 from the value and prints another h with less a's and repeats until the value of the number is 0\n    \"\"\"\n        for i in range(size):\n        print(\"h\", end=\"\")\n        for j in range(i):\n            print(\"a\", end=\"\")\n        print(\" \", end=\"\")\n    print(\"\\n\")\n",
                "id": 8,
                "key": 0
            },
            {
                "diff": 9,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (7->11)\ndiff:\n--- \n+++ \n@@ -4,7 +4,7 @@\n This function prints-ha+\"ha\" for every input\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints ha for every input greater than zero.\n    \"\"\"\n        if size > 0:\n        print(\"ha\" * size)\n    else:\n        print(\"\")\n\nlaugh(3)\nlaugh(0)\nlaugh(-1)\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" for every input greater than zero.\n    \"\"\"\n        for i in range(size):\n        print(\"ha\", end=\"\")\n    print(\"!\")\n\nlaugh(3)\n",
                "id": 11,
                "key": 0
            }
        ],
        [
            {
                "diff": 6,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (8->9)\ndiff:\n--- \n+++ \n@@ -4,48 +4,6 @@\n This function prints-an-'h'-and-adds-the-corresponding-amount-of-a's-as-the-value-provided.-It-then-adds-a-space-to-the-output.-It-subtracts-1-from-the-value-and-prints-another-h-with-less-a's-and-repeats-until-the-value-of-the-number-is-0+\"ha\"+once \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints an 'h' and adds the corresponding amount of a's as the value provided. It then adds a space to the output. It subtracts 1 from the value and prints another h with less a's and repeats until the value of the number is 0\n    \"\"\"\n        for i in range(size):\n        print(\"h\", end=\"\")\n        for j in range(i):\n            print(\"a\", end=\"\")\n        print(\" \", end=\"\")\n    print(\"\\n\")\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" once\n    \"\"\"\n        print(\"ha\" * size)\n\nlaugh(3)\n",
                "id": 9,
                "key": 0
            }
        ],
        [
            {
                "diff": 7,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (9->10)\ndiff:\n--- \n+++ \n@@ -4,6 +4,44 @@\n This function prints-\"ha\"-once+'ha'+for+every+input+greater+than+zero.+If+the+input+is+greater+than+1+it+prints+an+h+with+an+increasing+amount+of+a's+for+every+value+from+1+until+the+input+until+it+reaches+the+value+of+the+input. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" once\n    \"\"\"\n        print(\"ha\" * size)\n\nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints 'ha' for every input greater than zero. If the input is greater than 1 it prints an h with an increasing amount of a's for every value from 1 until the input until it reaches the value of the input. \n    \"\"\"\n        if size > 0:\n        print(\"ha\", end=\"\")\n        laugh(size-1)\n\nlaugh(3)\n",
                "id": 10,
                "key": 0
            },
            {
                "diff": 21,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (9->10)\ndiff:\n--- \n+++ \n@@ -1,15 +1,6 @@\n def laugh(size): \"\"\"-This-function-prints-\"ha\"-for-a-value-of-1. This function uses@@ -20,7 +11,7 @@\n amount of times-ha+\"ha\" is printed and\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" for a value of 1. This function uses size to determine the amount of times ha is printed and the length of a's that appear after the h. \n    \"\"\"\n        print(\"ha\" + \"a\"*size)\n    \nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function uses size to determine the amount of times \"ha\" is printed and the length of a's that appear after the h. \n    \"\"\"\n        ha = \"ha\"\n    a = \"a\"\n    print(ha * size + a * size)\n\nlaugh(3)\n",
                "id": 10,
                "key": 1
            },
            {
                "diff": 13,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (9->13)\ndiff:\n--- \n+++ \n@@ -4,5 +4,6 @@\n This function prints-ha+a+word \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints ha\n    \"\"\"\n        print(\"ha\" * size)\n\nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints a word\n    \"\"\"\n        return \"ha\" + \"ha\" * size\n\nprint(laugh(3))\n",
                "id": 13,
                "key": 0
            },
            {
                "diff": 16,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (9->14)\ndiff:\n--- \n+++ \n@@ -4,6 +4,9 @@\n This function prints-a-word+\"ha\"+times+the+value+inputted \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints a word\n    \"\"\"\n        print(\"ha\" * size + \"!\")\n\nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" times the value inputted \n    \"\"\"\n        print(\"ha\" * size)\n\nlaugh(10)\n",
                "id": 14,
                "key": 0
            },
            {
                "diff": 18,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (9->15)\ndiff:\n--- \n+++ \n@@ -5,12 +5,24 @@\n function prints \"ha\"+for+any+input.+This+function+prints+an+h+with+increasing+amounts+of+a+if the-amount-of-times-as-the-value-inputted+input+is+larger+than+1. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" the amount of times as the value inputted \n    \"\"\"\n        print(\"ha\" * size)\n\nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" for any input. This function prints an h with increasing amounts of a if the input is larger than 1. \n    \"\"\"\n        if size > 1:\n        print(\"h\" + \"a\" * size)\n        laugh(size - 1)\n    else:\n        print(\"h\" + \"a\" * size)\n\nlaugh(3)",
                "id": 15,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (10->7)\ndiff:\n--- \n+++ \n@@ -4,44 +4,11 @@\n This function prints-'ha'+ha for every input greater than zero.-If-the-input-is-greater-than-1-it-prints-an-h-with-an-increasing-amount-of-a's-for-every-value-from-1-until-the-input-until-it-reaches-the-value-of-the-input. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints 'ha' for every input greater than zero. If the input is greater than 1 it prints an h with an increasing amount of a's for every value from 1 until the input until it reaches the value of the input. \n    \"\"\"\n        if size > 0:\n        print(\"ha\", end=\"\")\n        laugh(size-1)\n\nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints ha for every input greater than zero.\n    \"\"\"\n        if size > 0:\n        print(\"ha\" * size)\n    else:\n        print(\"\")\n\nlaugh(3)\nlaugh(0)\nlaugh(-1)",
                "id": 7,
                "key": 0
            },
            {
                "diff": 15,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (10->14)\ndiff:\n--- \n+++ \n@@ -5,11 +5,4 @@\n function prints ha-times-the-input-value-with-spaces-between \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints ha times the input value with spaces between\n    \"\"\"\n        ha = \"ha\"\n    print(ha * size, end=\" \")\n    return\n\nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints ha \n    \"\"\"\n        print(\"ha\" * size)\n\nlaugh(10)\n",
                "id": 14,
                "key": 0
            },
            {
                "diff": 22,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (10->17)\ndiff:\n--- \n+++ \n@@ -4,7 +4,7 @@\n This function uses-size+laugh to determine the\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function uses size to determine the amount of times \"ha\" is printed and the length of a's that appear after the h. \n    \"\"\"\n        ha = \"ha\"\n    a = \"a\"\n    print(ha * size + a * size)\n\nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function uses laugh to determine the amount of times \"ha\" is printed and the length of a's that appear after the h. \n    \"\"\"\n        ha = \"ha\"\n    ha_size = \"ha\" * size\n    return ha_size + \"!\"\n\nprint(laugh(3))\n",
                "id": 17,
                "key": 0
            },
            {
                "diff": 32,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student22",
                "hover": "username:student22\nedge: (10->17)\ndiff:\n--- \n+++ \n@@ -6,13 +6,11 @@\n an integer and-write-'ha-'-as+add+that many-times-as-the-integer+'a'+to+a+string \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    take in an integer and write 'ha ' as many times as the integer\n    \"\"\"\n        ha = \"ha\"\n    print(ha * size)\n\nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    take in an integer and add that many 'a' to a string\n    \"\"\"\n        return \"ha\" * size + \"!\"\n\nprint(laugh(3))\n",
                "id": 17,
                "key": 1
            }
        ],
        [
            {
                "diff": 10,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (11->11)\ndiff:\n--- \n+++ \n@@ -7,7 +7,7 @@\n \"ha\" for every-input+value greater than zero.\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" for every input greater than zero.\n    \"\"\"\n        for i in range(size):\n        print(\"ha\", end=\"\")\n    print(\"!\")\n\nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" for every value greater than zero.\n    \"\"\"\n        for i in range(size):\n        print(\"ha\", end=\"\")\n    print(\"!\")\n\nlaugh(3)\n",
                "id": 11,
                "key": 0
            },
            {
                "diff": 11,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (11->12)\ndiff:\n--- \n+++ \n@@ -4,11 +4,7 @@\n This function prints-\"ha\"-for-every-value-greater-than-zero.+a+string+'ha' \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" for every value greater than zero.\n    \"\"\"\n        for i in range(size):\n        print(\"ha\", end=\"\")\n    print(\"!\")\n\nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints a string 'ha'\n    \"\"\"\n        print('ha'*size)\n\nlaugh(5)\n",
                "id": 12,
                "key": 0
            },
            {
                "diff": 34,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student37",
                "hover": "username:student37\nedge: (11->23)\ndiff:\n--- \n+++ \n@@ -12,13 +12,19 @@\n as an input,+creates+an+empty+string+called+laugh, and uses a for loop to-print+append an h followed@@ -44,11 +50,14 @@\n etc. until it-prints-a+appends+an h followed by one a+all+into+laugh \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, and uses a for loop to print an h followed by size a's and then a space, and then an h followed by size-1 a's and then a space, etc. until it prints a h followed by one a\n    \"\"\"\n        for i in range(size,0,-1):\n        print(\"h\"+\"a\"*i+\" \")\n    print(\"h\")\n\nlaugh(3)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty string called laugh, and uses a for loop to append an h followed by size a's and then a space, and then an h followed by size-1 a's and then a space, etc. until it appends an h followed by one a all into laugh\n    \"\"\"\n        laugh = \"\"\n    for i in range(size):\n        laugh += \"ha\"*(size-i) + \" \"\n    return laugh\n",
                "id": 23,
                "key": 0
            }
        ],
        [
            {
                "diff": 12,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (12->9)\ndiff:\n--- \n+++ \n@@ -4,7 +4,5 @@\n This function prints-a-string-'ha'+ha \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints a string 'ha'\n    \"\"\"\n        print('ha'*size)\n\nlaugh(5)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints ha\n    \"\"\"\n        print(\"ha\" * size)\n\nlaugh(3)\n",
                "id": 9,
                "key": 0
            }
        ],
        [
            {
                "diff": 14,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (13->10)\ndiff:\n--- \n+++ \n@@ -4,6 +4,12 @@\n This function prints-a-word+ha+times+the+input+value+with+spaces+between \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints a word\n    \"\"\"\n        return \"ha\" + \"ha\" * size\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints ha times the input value with spaces between\n    \"\"\"\n        ha = \"ha\"\n    print(ha * size, end=\" \")\n    return\n\nlaugh(3)\n",
                "id": 10,
                "key": 0
            },
            {
                "diff": 59,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (13->31)\ndiff:\n--- \n+++ \n@@ -30,16 +30,11 @@\n occurrences of \"a\",-etc.,-and-stops-when-\"ha\"-is+etc.+Doesn't+add the last-part-of-the-string.+\"+h\" \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc., and stops when \"ha\" is the last part of the string.\n    \"\"\"\n        if size == 0:\n        return \"ha\"\n    else:\n        return \"ha\" + laugh(size - 1)\n\nprint(laugh(3))\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Doesn't add the last \" h\"\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\"*size + \" \" + laugh(size-1)\n\nprint(laugh(3))",
                "id": 31,
                "key": 0
            }
        ],
        [
            {
                "diff": 13,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (14->9)\ndiff:\n--- \n+++ \n@@ -4,5 +4,6 @@\n This function prints-ha+a+word \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints ha \n    \"\"\"\n        print(\"ha\" * size)\n\nlaugh(10)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints a word\n    \"\"\"\n        print(\"ha\" * size + \"!\")\n\nlaugh(3)\n",
                "id": 9,
                "key": 0
            },
            {
                "diff": 17,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (14->9)\ndiff:\n--- \n+++ \n@@ -5,7 +5,11 @@\n function prints \"ha\"+the+amount+of times+as the value inputted\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" times the value inputted \n    \"\"\"\n        print(\"ha\" * size)\n\nlaugh(10)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" the amount of times as the value inputted \n    \"\"\"\n        print(\"ha\" * size)\n\nlaugh(3)\n",
                "id": 9,
                "key": 1
            }
        ],
        [
            {
                "diff": 19,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (15->16)\ndiff:\n--- \n+++ \n@@ -6,23 +6,31 @@\n prints \"ha\" for-any-input.+a+value+of+1. This function prints-an-h-with-increasing-amounts+\"haaaa+haaa+haa+ha\"+for+a+value of+4.+This+function+prints+\"haaa+haa+ha\"+for a-if-the-input-is-larger-than-1.+value+of+3. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" for any input. This function prints an h with increasing amounts of a if the input is larger than 1. \n    \"\"\"\n        if size > 1:\n        print(\"h\" + \"a\" * size)\n        laugh(size - 1)\n    else:\n        print(\"h\" + \"a\" * size)\n\nlaugh(3)\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" for a value of 1. This function prints \"haaaa haaa haa ha\" for a value of 4. This function prints \"haaa haa ha\" for a value of 3. \n    \"\"\"\n        if size == 1:\n        print(\"ha\")\n    elif size == 2:\n        print(\"ha ha\")\n    elif size == 3:\n        print(\"ha ha ha\")\n    elif size == 4:\n        print(\"ha ha ha ha\")\n    elif size == 5:\n        print(\"ha ha ha ha ha\")\n    elif size == 6:\n        print(\"ha ha ha ha ha ha\")\n    el",
                "id": 16,
                "key": 0
            }
        ],
        [
            {
                "diff": 20,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (16->9)\ndiff:\n--- \n+++ \n@@ -12,25 +12,25 @@\n 1. This function-prints-\"haaaa-haaa-haa-ha\"-for-a-value+uses+size+to+determine+the+amount of-4.-This-function-prints-\"haaa-haa-ha\"-for-a-value+times+ha+is+printed+and+the+length of-3.+a's+that+appear+after+the+h. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" for a value of 1. This function prints \"haaaa haaa haa ha\" for a value of 4. This function prints \"haaa haa ha\" for a value of 3. \n    \"\"\"\n        if size == 1:\n        print(\"ha\")\n    elif size == 2:\n        print(\"ha ha\")\n    elif size == 3:\n        print(\"ha ha ha\")\n    elif size == 4:\n        print(\"ha ha ha ha\")\n    elif size == 5:\n        print(\"ha ha ha ha ha\")\n    elif size == 6:\n        print(\"ha ha ha ha ha ha\")\n    el\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function prints \"ha\" for a value of 1. This function uses size to determine the amount of times ha is printed and the length of a's that appear after the h. \n    \"\"\"\n        print(\"ha\" + \"a\"*size)\n    \nlaugh(3)\n",
                "id": 9,
                "key": 0
            }
        ],
        [
            {
                "diff": 23,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (17->17)\ndiff:\n\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function uses laugh to determine the amount of times \"ha\" is printed and the length of a's that appear after the h. \n    \"\"\"\n        ha = \"ha\"\n    ha_size = \"ha\" * size\n    return ha_size + \"!\"\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function uses laugh to determine the amount of times \"ha\" is printed and the length of a's that appear after the h. \n    \"\"\"\n        laugh = \"ha\"\n    laugh += \"ha\" * (size - 1)\n    laugh += \"!\"\n    return laugh\n\nprint(laugh(3))",
                "id": 17,
                "key": 0
            },
            {
                "diff": 24,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (17->17)\ndiff:\n--- \n+++ \n@@ -11,7 +11,7 @@\n amount of times-\"ha\"+ha is printed and\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function uses laugh to determine the amount of times \"ha\" is printed and the length of a's that appear after the h. \n    \"\"\"\n        laugh = \"ha\"\n    laugh += \"ha\" * (size - 1)\n    laugh += \"!\"\n    return laugh\n\nprint(laugh(3))\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function uses laugh to determine the amount of times ha is printed and the length of a's that appear after the h. \n    \"\"\"\n        return \"ha\" + \"ha\" * (size - 1) + \"!\"\n\nprint(laugh(3))\n",
                "id": 17,
                "key": 1
            },
            {
                "diff": 25,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (17->6)\ndiff:\n--- \n+++ \n@@ -4,6 +4,9 @@\n This function uses+the+size+of laugh to determine@@ -14,14 +17,4 @@\n ha is printed-and-the-length-of-a's-that-appear-after-the-h. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function uses laugh to determine the amount of times ha is printed and the length of a's that appear after the h. \n    \"\"\"\n        return \"ha\" + \"ha\" * (size - 1) + \"!\"\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function uses the size of laugh to determine the amount of times ha is printed \n    \"\"\"\n        ha = \"ha\"\n    return ha * size\n\nprint(laugh(3))\n",
                "id": 6,
                "key": 0
            },
            {
                "diff": 33,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student22",
                "hover": "username:student22\nedge: (17->22)\ndiff:\n--- \n+++ \n@@ -6,11 +6,14 @@\n an integer and-add-that-many-'a'+write+a+decreasing+amount+of+'a's+next to-a-string+an+'h' \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    take in an integer and add that many 'a' to a string\n    \"\"\"\n        return \"ha\" * size + \"!\"\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    take in an integer and write a decreasing amount of 'a's next to an 'h'\n    \"\"\"\n        if size == 0:\n        return 'h'\n    else:\n        return 'ha' + laugh(size - 1)\n\nprint(laugh(3))\n",
                "id": 22,
                "key": 0
            }
        ],
        [
            {
                "diff": 27,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student2",
                "hover": "username:student2\nedge: (18->19)\ndiff:\n--- \n+++ \n@@ -14,7 +14,8 @@\n amount of times-ha+an+h is printed. This@@ -30,10 +31,13 @@\n h with a's+after+it the size of-laugh+laugh.+It then subtracts 1@@ -46,5 +50,15 @@\n h with less-a's+a's.+It+does+this+until+it+reaches+a+value+of+1 \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    This function uses the size of laugh to determine the amount of times ha is printed. This function creates a loop in which it prints an h with a's the size of laugh then subtracts 1 from the size and prints an h with less a's\n    \"\"\"\n        for i in range(size):\n        print(\"ha\", end=\"\")\n    print(\"h\")\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    This function uses the size of laugh to determine the amount of times an h is printed. This function creates a loop in which it prints an h with a's after it the size of laugh. It then subtracts 1 from the size and prints an h with less a's. It does this until it reaches a value of 1\n    \"\"\"\n        for i in range(size):\n        print(\"h\" + \"a\"*i + \"h\")\n    for i in range(size-1,0,-1):\n        print(\"h\" + \"a\"*i + \"h\")\n",
                "id": 19,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 28,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student22",
                "hover": "username:student22\nedge: (20->21)\ndiff:\n--- \n+++ \n@@ -3,19 +3,20 @@\n \"\"\" take in-a-number+an+integer and write the-word-'ha'+string+'h'+'a', but-with+add as many-'a's+'a' as the-number+integer+amount \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    take in a number and write the word 'ha' but with as many 'a's as the number\n    \"\"\"\n        return \"ha\" + \"ha\" * (size - 1)\n\nprint laugh(3)\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    take in an integer and write the string 'h'+'a', but add as many 'a' as the integer amount\n    \"\"\"\n        if size < 1:\n        return 'h'\n    else:\n        return 'h' + 'a' * size + 'h'\n\nprint(laugh(3))\n",
                "id": 21,
                "key": 0
            }
        ],
        [
            {
                "diff": 29,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student22",
                "hover": "username:student22\nedge: (21->21)\ndiff:\n--- \n+++ \n@@ -9,14 +9,7 @@\n write the string-'h'+'a',-but-add-as-many-'a'-as-the+'h'+'a'+* integer-amount \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    take in an integer and write the string 'h'+'a', but add as many 'a' as the integer amount\n    \"\"\"\n        if size < 1:\n        return 'h'\n    else:\n        return 'h' + 'a' * size + 'h'\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    take in an integer and write the string 'h'+'a' * integer\n    \"\"\"\n        return 'h' + 'a' * size + 'h'\n",
                "id": 21,
                "key": 0
            },
            {
                "diff": 30,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student22",
                "hover": "username:student22\nedge: (21->6)\ndiff:\n--- \n+++ \n@@ -7,9 +7,11 @@\n integer and write+'ha'+as+many+times+as the-string-'h'+'a'-* integer \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    take in an integer and write the string 'h'+'a' * integer\n    \"\"\"\n        return 'h' + 'a' * size + 'h'\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    take in an integer and write 'ha' as many times as the integer\n    \"\"\"\n        return \"ha\" * size\n\nprint(laugh(3))\n",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 44,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student61",
                "hover": "username:student61\nedge: (22->25)\ndiff:\n--- \n+++ \n@@ -15,14 +15,13 @@\n lower amount of-'a'-until-it-reaches-only-1-'a'-after-the-'h'+'a'.+Function+also+adds+a+space+between+every+'ha' \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    function adds 'a' to every 'h' based on input and will lower amount of 'a' until it reaches only 1 'a' after the 'h'\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"ha\" + laugh(size - 1)\n\nprint(laugh(3))\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    function adds 'a' to every 'h' based on input and will lower amount of 'a'. Function also adds a space between every 'ha'\n    \"\"\"\n        if size > 0:\n        return 'ha' + 'a' * (size - 1) + ' ' + laugh(size - 1)\n    else:\n        return ''\n\nprint(laugh(3))\n",
                "id": 25,
                "key": 0
            },
            {
                "diff": 46,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student72",
                "hover": "username:student72\nedge: (22->32)\ndiff:\n--- \n+++ \n@@ -31,10 +31,9 @@\n for each word-after-until-count-of+after.+Stop+when a = 1.\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after until count of a = 1.\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"ha\" + laugh(size - 1)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after. Stop when a = 1.\n    \"\"\"\n        if size == 0:\n        return \"ha\"\n    else:\n        return \"ha\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n",
                "id": 32,
                "key": 0
            },
            {
                "diff": 48,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student72",
                "hover": "username:student72\nedge: (22->32)\ndiff:\n--- \n+++ \n@@ -33,8 +33,13 @@\n word after. Stop-when-a-=-2.+after+the+last+word+in+the+string+is+ha. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after. Stop when a = 2.\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"ha\" + laugh(size - 1)\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after. Stop after the last word in the string is ha.\n    \"\"\"\n        if size == 0:\n        return \"ha\"\n    else:\n        return \"ha\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n",
                "id": 32,
                "key": 1
            }
        ],
        [
            {
                "diff": 35,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student37",
                "hover": "username:student37\nedge: (23->24)\ndiff:\n--- \n+++ \n@@ -19,45 +19,55 @@\n called laugh, and-uses+then+executes a for loop-to-append+with+i+in+range+size+where+i+is+decreased+by+one+after+each+iteration,+and+the+contents+of+the+for+loop+is+that an h followed by-size+i+number+of a's and-then a-space,+space+is+appended+to+laugh, and then-an-h-followed-by-size-1-a's-and-then-a-space,-etc.-until-it-appends-an-h-followed-by-one-a-all-into laugh+is+returned+after+the+loop \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty string called laugh, and uses a for loop to append an h followed by size a's and then a space, and then an h followed by size-1 a's and then a space, etc. until it appends an h followed by one a all into laugh\n    \"\"\"\n        laugh = \"\"\n    for i in range(size):\n        laugh += \"ha\"*(size-i) + \" \"\n    return laugh\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty string called laugh, and then executes a for loop with i in range size where i is decreased by one after each iteration, and the contents of the for loop is that an h followed by i number of a's and a space is appended to laugh, and then laugh is returned after the loop\n    \"\"\"\n        laugh = \"\"\n    for i in range(size):\n        laugh += \"h\" + \"a\"*i + \" \"\n    return laugh\n\nprint(laugh(3))\n",
                "id": 24,
                "key": 0
            }
        ],
        [
            {
                "diff": 36,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student37",
                "hover": "username:student37\nedge: (24->25)\ndiff:\n--- \n+++ \n@@ -37,7 +37,12 @@\n one after each-iteration,+iteration+and+i+starts+at+size, and the contents\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty string called laugh, and then executes a for loop with i in range size where i is decreased by one after each iteration, and the contents of the for loop is that an h followed by i number of a's and a space is appended to laugh, and then laugh is returned after the loop\n    \"\"\"\n        laugh = \"\"\n    for i in range(size):\n        laugh += \"h\" + \"a\"*i + \" \"\n    return laugh\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty string called laugh, and then executes a for loop with i in range size where i is decreased by one after each iteration and i starts at size, and the contents of the for loop is that an h followed by i number of a's and a space is appended to laugh, and then laugh is returned after the loop\n    \"\"\"\n        laugh = \"\"\n    for i in range(size, 0, -1):\n        laugh += \"h\" + \"a\" * i + \" \"\n    return laugh\n",
                "id": 25,
                "key": 0
            }
        ],
        [
            {
                "diff": 37,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student37",
                "hover": "username:student37\nedge: (25->26)\ndiff:\n--- \n+++ \n@@ -28,7 +28,7 @@\n i in range-size+size-2 where i is@@ -69,10 +69,13 @@\n laugh, and then+after+the+loop,+append+'ha'+and laugh is returned-after-the-loop \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty string called laugh, and then executes a for loop with i in range size where i is decreased by one after each iteration and i starts at size, and the contents of the for loop is that an h followed by i number of a's and a space is appended to laugh, and then laugh is returned after the loop\n    \"\"\"\n        laugh = \"\"\n    for i in range(size, 0, -1):\n        laugh += \"h\" + \"a\" * i + \" \"\n    return laugh\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty string called laugh, and then executes a for loop with i in range size-2 where i is decreased by one after each iteration and i starts at size, and the contents of the for loop is that an h followed by i number of a's and a space is appended to laugh, and then after the loop, append 'ha' and laugh is returned\n    \"\"\"\n        laugh = ''\n    for i in range(size-2, 0, -1):\n        laugh += 'h' + i*'a' + ' '\n    laugh += 'ha'\n    return laugh\n",
                "id": 26,
                "key": 0
            },
            {
                "diff": 42,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student5",
                "hover": "username:student5\nedge: (25->25)\ndiff:\n--- \n+++ \n@@ -38,7 +38,7 @@\n current number of-'ha's+\"ha\"s left to produce.@@ -50,4 +50,10 @@\n between the ha's+but+not+at+the+very+end. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    the function laugh will take the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of 'ha's left to produce. and add a space in between the ha's\n\n\n    \"\"\"\n        if size == 0:\n        return \"\"\n    else:\n        return \"ha\" + \"a\" * (size - 1) + \" \" + laugh(size - 1)\n\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    the function laugh will take the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of \"ha\"s left to produce. and add a space in between the ha's but not at the very end. \n\n\n    \"\"\"\n        if size == 0:\n        return \"\"\n    else:\n        return \"ha\" + \"a\" * (size - 1) + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n",
                "id": 25,
                "key": 0
            }
        ],
        [
            {
                "diff": 38,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student37",
                "hover": "username:student37\nedge: (26->27)\ndiff:\n--- \n+++ \n@@ -19,63 +19,33 @@\n called laugh, and-then-executes+the+uses a for loop-with-i-in-range-size-2-where-i-is-decreased-by-one-after-each-iteration-and-i-starts-at-size,-and-the-contents-of-the-for-loop-is-that+to+append an h followed by i-number-of a's-and+for+each+0<i<=size,+append a space-is-appended-to-laugh,-and-then-after+before+each+h+except the-loop,-append-'ha'-and-laugh-is-returned+first+h+in+the+string \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty string called laugh, and then executes a for loop with i in range size-2 where i is decreased by one after each iteration and i starts at size, and the contents of the for loop is that an h followed by i number of a's and a space is appended to laugh, and then after the loop, append 'ha' and laugh is returned\n    \"\"\"\n        laugh = ''\n    for i in range(size-2, 0, -1):\n        laugh += 'h' + i*'a' + ' '\n    laugh += 'ha'\n    return laugh\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty string called laugh, and the uses a for loop to append an h followed by i a's for each 0<i<=size, append a space before each h except the first h in the string\n    \"\"\"\n        laugh = \"\"\n    for i in range(1, size+1):\n        laugh += \" \"*(i-1) + \"h\" + \"i\"*i\n    return laugh\n\nprint(laugh(3))\n",
                "id": 27,
                "key": 0
            }
        ],
        [
            {
                "diff": 39,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student37",
                "hover": "username:student37\nedge: (27->28)\ndiff:\n--- \n+++ \n@@ -31,10 +31,16 @@\n followed by i+number a's for each-0<i<=size,+0<i<=size+starting+with+i+=+size, append a space\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty string called laugh, and the uses a for loop to append an h followed by i a's for each 0<i<=size, append a space before each h except the first h in the string\n    \"\"\"\n        laugh = \"\"\n    for i in range(1, size+1):\n        laugh += \" \"*(i-1) + \"h\" + \"i\"*i\n    return laugh\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty string called laugh, and the uses a for loop to append an h followed by i number a's for each 0<i<=size starting with i = size, append a space before each h except the first h in the string\n    \"\"\"\n        laugh = \"\"\n    for i in range(size, 0, -1):\n        laugh += \"h\" + \"a\"*i + \" \"\n    return laugh[:-1]\n\nprint(laugh(3))\n",
                "id": 28,
                "key": 0
            }
        ],
        [
            {
                "diff": 43,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student61",
                "hover": "username:student61\nedge: (28->22)\ndiff:\n--- \n+++ \n@@ -15,17 +15,14 @@\n lower amount of-'a'.-Function-also-adds-a-space-between-every-'ha'-except+'a'+until+it+reaches+only+1+'a'+after the-last-one+'h' \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    function adds 'a' to every 'h' based on input and will lower amount of 'a'. Function also adds a space between every 'ha' except the last one\n    \"\"\"\n        if size == 1:\n        return 'ha'\n    else:\n        return 'ha' + 'a' * (size - 1) + ' ' + laugh(size - 1)\n\nprint(laugh(3))\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    function adds 'a' to every 'h' based on input and will lower amount of 'a' until it reaches only 1 'a' after the 'h'\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"ha\" + laugh(size - 1)\n\nprint(laugh(3))",
                "id": 22,
                "key": 0
            }
        ],
        [
            {
                "diff": 40,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student5",
                "hover": "username:student5\nedge: (29->30)\ndiff:\n--- \n+++ \n@@ -17,28 +17,29 @@\n a string with-the-ha+\"ha\" as many times as the input-but-also+int.+However+each+respective+\"ha\"+has+as+many+a's+as the+current number of-a's-is-based-on-the-number-it-is-currently-working-with+'ha's+left+to+produce. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    the function laugh will take the input of an int and should output a string with the ha as many times as the input but also the number of a's is based on the number it is currently working with\n\n    \"\"\"\n        ha = \"ha\"\n    ha_string = \"\"\n    for i in range(size):\n        ha_string += ha * i\n        ha_string += \" \"\n    return ha_string + \"!\"\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    the function laugh will take the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of 'ha's left to produce. \n\n\n    \"\"\"\n        if size == 0:\n        return \"\"\n    else:\n        return \"ha\" + \"a\" * (size - 1) + laugh(size - 1)\n\nprint(laugh(4))\n",
                "id": 30,
                "key": 0
            }
        ],
        [
            {
                "diff": 41,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student5",
                "hover": "username:student5\nedge: (30->25)\ndiff:\n--- \n+++ \n@@ -42,4 +42,12 @@\n left to produce.+and+add+a+space+in+between+the+ha's \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    the function laugh will take the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of 'ha's left to produce. \n\n\n    \"\"\"\n        if size == 0:\n        return \"\"\n    else:\n        return \"ha\" + \"a\" * (size - 1) + laugh(size - 1)\n\nprint(laugh(4))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    the function laugh will take the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of 'ha's left to produce. and add a space in between the ha's\n\n\n    \"\"\"\n        if size == 0:\n        return \"\"\n    else:\n        return \"ha\" + \"a\" * (size - 1) + \" \" + laugh(size - 1)\n\n\nprint(laugh(3))\n",
                "id": 25,
                "key": 0
            }
        ],
        [
            {
                "diff": 45,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student72",
                "hover": "username:student72\nedge: (31->22)\ndiff:\n--- \n+++ \n@@ -31,5 +31,11 @@\n for each word-after.+after+until+count+of+a+=+1. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after.\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\"*size + \" \" + laugh(size-1)\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after until count of a = 1.\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"ha\" + laugh(size - 1)\n",
                "id": 22,
                "key": 0
            },
            {
                "diff": 23,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (31->31)\ndiff:\n\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, the function returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two characters in the string are not \"ha\".\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\"*size + \" \" + laugh(size-1)\n\nprint(laugh(3))\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, the function returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two characters in the string are not \"ha\".\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n",
                "id": 31,
                "key": 0
            },
            {
                "diff": 60,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (31->31)\ndiff:\n--- \n+++ \n@@ -31,8 +31,7 @@\n of \"a\", etc.-Doesn't-add+Removes the last \"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Doesn't add the last \" h\"\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\"*size + \" \" + laugh(size-1)\n\nprint(laugh(3))\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Removes the last \" h\"\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n",
                "id": 31,
                "key": 1
            },
            {
                "diff": 52,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (31->36)\ndiff:\n--- \n+++ \n@@ -40,4 +40,11 @@\n are not \"ha\".+Returns+\"\"+if+input+value+is+0. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, the function returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two characters in the string are not \"ha\".\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, the function returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two characters in the string are not \"ha\". Returns \"\" if input value is 0. \n    \"\"\"\n        if size == 0:\n        return \"\"\n    elif size == 1:\n        return \"ha\"\n    else:\n        return \"ha\" + \"ha\"*(size-1) + \"h\" + \"ha\"*(size-1) + \"h\" + laugh(size-1)\n\nprint(laugh(3))\nprint(laugh(0))\nprint(laugh(1))\nprint(laugh(2))\nprint",
                "id": 36,
                "key": 0
            },
            {
                "diff": 55,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (31->38)\ndiff:\n--- \n+++ \n@@ -1,7 +1,18 @@\n def laugh(size): \"\"\"-The+While+the+last+two+characters+in+the+string+are+not+\"ha\",+the function repeats the\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc.\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(4))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    While the last two characters in the string are not \"ha\", the function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. \n    \"\"\"\n        if size == 0:\n        return \"ha\"\n    else:\n        return \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n",
                "id": 38,
                "key": 0
            },
            {
                "diff": 58,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (31->13)\ndiff:\n--- \n+++ \n@@ -30,5 +30,16 @@\n occurrences of \"a\",-etc.+etc.,+and+stops+when+\"ha\"+is+the+last+part+of+the+string. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. \n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc., and stops when \"ha\" is the last part of the string.\n    \"\"\"\n        if size == 0:\n        return \"ha\"\n    else:\n        return \"ha\" + laugh(size - 1)\n\nprint(laugh(3))",
                "id": 13,
                "key": 0
            },
            {
                "diff": 61,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (31->34)\ndiff:\n--- \n+++ \n@@ -30,10 +30,17 @@\n occurrences of \"a\",-etc.-Removes-the-last+etc.,+but+with \" h\"+removed+at+the+end+of+the+final+string. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Removes the last \" h\"\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc., but with \" h\" removed at the end of the final string.\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"ha\" + laugh(size-1) + \"h\"\n\nprint(laugh(3))\n",
                "id": 34,
                "key": 0
            }
        ],
        [
            {
                "diff": 47,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student72",
                "hover": "username:student72\nedge: (32->22)\ndiff:\n--- \n+++ \n@@ -36,5 +36,5 @@\n when a =-1.+2. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after. Stop when a = 1.\n    \"\"\"\n        if size == 0:\n        return \"ha\"\n    else:\n        return \"ha\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after. Stop when a = 2.\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"ha\" + laugh(size - 1)\n",
                "id": 22,
                "key": 0
            }
        ],
        [
            {
                "diff": 49,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (33->34)\ndiff:\n--- \n+++ \n@@ -7,20 +7,9 @@\n the input value,+the+function returns-a-combination-of-n-strings,-where-each-of-the-n-strings-consists-of \"h\" followed by@@ -28,16 +17,23 @@\n occurrences of \"a\",-and-there-is+then \"-\"-before-each-\"h\"-except+h\"+followed+by+n-1+occurrences+of+\"a\",+until the-first-\"h\".+last+two+characters+in+the+string+are+\"ha\". \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, returns a combination of n strings, where each of the n strings consists of \"h\" followed by n occurrences of \"a\", and there is \" \" before each \"h\" except the first \"h\". \n    \"\"\"\n        return \"ha\"*size + \" \"*(size-1) + \"ha\"*size\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, the function returns \"h\" followed by n occurrences of \"a\", then \" h\" followed by n-1 occurrences of \"a\", until the last two characters in the string are \"ha\".\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"ha\" + laugh(size-1) + \"h\"\n\nprint(laugh(3))\n",
                "id": 34,
                "key": 0
            }
        ],
        [
            {
                "diff": 50,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (34->35)\ndiff:\n--- \n+++ \n@@ -26,7 +26,10 @@\n occurrences of \"a\",-until+and+repeats+this+while the last two@@ -35,5 +38,6 @@\n the string are+not \"ha\". \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, the function returns \"h\" followed by n occurrences of \"a\", then \" h\" followed by n-1 occurrences of \"a\", until the last two characters in the string are \"ha\".\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"ha\" + laugh(size-1) + \"h\"\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, the function returns \"h\" followed by n occurrences of \"a\", then \" h\" followed by n-1 occurrences of \"a\", and repeats this while the last two characters in the string are not \"ha\".\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\"*size + \"h\" + laugh(size-1)\n\nprint(laugh(3))",
                "id": 35,
                "key": 0
            },
            {
                "diff": 62,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (34->40)\ndiff:\n--- \n+++ \n@@ -22,25 +22,14 @@\n occurrences of \"a\",-then-\"-h\"-plus-n-1+followed+by+decreasing+natural+number+of+n occurrences of-\"a\",-etc.,-but-with-\"-h\"-removed-at-the-end-of-the-final-string.+\"a\" \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc., but with \" h\" removed at the end of the final string.\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"ha\" + laugh(size-1) + \"h\"\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", followed by decreasing natural number of n occurrences of \"a\" \n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\"*size + laugh(size-1)\n\nprint(laugh(3))\n",
                "id": 40,
                "key": 0
            }
        ],
        [
            {
                "diff": 51,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (35->31)\ndiff:\n--- \n+++ \n@@ -11,21 +11,21 @@\n function returns \"h\"-followed-by+plus n occurrences of-\"a\",+\"a\"+after, then \" h\"-followed-by+plus n-1 occurrences of-\"a\",+\"a\"+after, and repeats this\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, the function returns \"h\" followed by n occurrences of \"a\", then \" h\" followed by n-1 occurrences of \"a\", and repeats this while the last two characters in the string are not \"ha\".\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\"*size + \"h\" + laugh(size-1)\n\nprint(laugh(3))\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, the function returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two characters in the string are not \"ha\".\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\"*size + \" \" + laugh(size-1)\n\nprint(laugh(3))",
                "id": 31,
                "key": 0
            },
            {
                "diff": 64,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (35->41)\ndiff:\n--- \n+++ \n@@ -1,12 +1,6 @@\n def laugh(size): \"\"\"-The-function-repeats-the-following-process: If n is@@ -15,7 +9,10 @@\n value, the function-returns+creates+a+string+containing \"h\" plus n@@ -30,12 +27,18 @@\n occurrences of \"a\",+repeated until-there-are-0-occurrences+\"ha\"+is+the+last+part of-\"a\"-left+the+string.+Then+return+the+string. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", plus \" h\" plus n-1 occurrences of \"a\", until there are 0 occurrences of \"a\" left\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\"*size + \"h\" + laugh(size-1)\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, the function creates a string containing \"h\" plus n occurrences of \"a\", plus \" h\" plus n-1 occurrences of \"a\", repeated until \"ha\" is the last part of the string. Then return the string.\n    \"\"\"\n        if size == 0:\n        return \"ha\"\n    else:\n        return \"ha\" + \"ha\" * (size - 1) + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n",
                "id": 41,
                "key": 0
            }
        ],
        [
            {
                "diff": 53,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (36->37)\ndiff:\n--- \n+++ \n@@ -40,11 +40,4 @@\n are not \"ha\".-Returns-\"\"-if-input-value-is-0. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, the function returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two characters in the string are not \"ha\". Returns \"\" if input value is 0. \n    \"\"\"\n        if size == 0:\n        return \"\"\n    elif size == 1:\n        return \"ha\"\n    else:\n        return \"ha\" + \"ha\"*(size-1) + \"h\" + \"ha\"*(size-1) + \"h\" + laugh(size-1)\n\nprint(laugh(3))\nprint(laugh(0))\nprint(laugh(1))\nprint(laugh(2))\nprint\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, the function returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two characters in the string are not \"ha\". \n    \"\"\"\n        if size == 0:\n        return \"ha\"\n    else:\n        return \"ha\" + laugh(size-1) + \"ha\"\n\nprint(laugh(3))\n",
                "id": 37,
                "key": 0
            }
        ],
        [
            {
                "diff": 54,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (37->31)\ndiff:\n--- \n+++ \n@@ -1,6 +1,12 @@\n def laugh(size): \"\"\"+The+function+repeats+the+following+process: If n is@@ -15,8 +21,7 @@\n n occurrences of-\"a\"-after,+\"a\", then \" h\"@@ -24,20 +29,6 @@\n n-1 occurrences of-\"a\"-after,-and-repeats-this-while-the-last-two-characters-in-the-string-are-not-\"ha\".+\"a\",+etc. \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    If n is the input value, the function returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences of \"a\" after, and repeats this while the last two characters in the string are not \"ha\". \n    \"\"\"\n        if size == 0:\n        return \"ha\"\n    else:\n        return \"ha\" + laugh(size-1) + \"ha\"\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc.\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(4))\n",
                "id": 31,
                "key": 0
            }
        ],
        [
            {
                "diff": 56,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (38->39)\ndiff:\n--- \n+++ \n@@ -1,18 +1,7 @@\n def laugh(size): \"\"\"-While-the-last-two-characters-in-the-string-are-not-\"ha\",-the+The function repeats the@@ -42,4 +31,14 @@\n of \"a\", etc.+Until+the+last+two+characters+in+the+string+are+\"ha\" \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    While the last two characters in the string are not \"ha\", the function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. \n    \"\"\"\n        if size == 0:\n        return \"ha\"\n    else:\n        return \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Until the last two characters in the string are \"ha\" \n    \"\"\"\n        if size == 0:\n        return \"ha\"\n    else:\n        return \"ha\" + \"ha\" * (size - 1) + laugh(size - 1)\n\nprint(laugh(3))\n",
                "id": 39,
                "key": 0
            }
        ],
        [
            {
                "diff": 57,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (39->31)\ndiff:\n--- \n+++ \n@@ -31,14 +31,4 @@\n of \"a\", etc.-Until-the-last-two-characters-in-the-string-are-\"ha\" \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Until the last two characters in the string are \"ha\" \n    \"\"\"\n        if size == 0:\n        return \"ha\"\n    else:\n        return \"ha\" + \"ha\" * (size - 1) + laugh(size - 1)\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. \n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n",
                "id": 31,
                "key": 0
            }
        ],
        [
            {
                "diff": 63,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student8",
                "hover": "username:student8\nedge: (40->35)\ndiff:\n--- \n+++ \n@@ -22,14 +22,20 @@\n occurrences of \"a\",-followed-by-decreasing-natural-number+plus+\"+h\"+plus+n-1+occurrences of-n+\"a\",+until+there+are+0 occurrences of \"a\"+left \"\"\"\n\nFROM completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", followed by decreasing natural number of n occurrences of \"a\" \n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\"*size + laugh(size-1)\n\nprint(laugh(3))\n\n\nTO completion:\ndef laugh(size):\n    \"\"\"\n    The function repeats the following process: If n is the input value, the function returns \"h\" plus n occurrences of \"a\", plus \" h\" plus n-1 occurrences of \"a\", until there are 0 occurrences of \"a\" left\n    \"\"\"\n        if size == 0:\n        return \"h\"\n    else:\n        return \"h\" + \"a\"*size + \"h\" + laugh(size-1)\n\nprint(laugh(3))\n",
                "id": 35,
                "key": 0
            }
        ],
        []
    ]
}