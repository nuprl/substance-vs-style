{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n['a man', ' wow', ' the dog', ' much hat', ' much hair', '']\n\n['celestial', 'teas', '', 'a', 'guide']\n\n['celestial teas: a guide']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\na man~ wow~ the dog~ much hat~ much hair~\n\ncelestial!teas!!a!guide\n\ncelestial teas: a guide\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\na man~! wow~- the dog~, much hat~! much hair~!\n\ncelestial! teas!:! a! guide\n\ncelestial teas: a guide\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 0,
            "stdout_id": 0,
            "hover": "stdout:\na man~ wow~ the dog\n\ncelestial!teas!!a!guide\n\ncelestial teas: a guide\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 3
        }
    ],
    "adjacency": [
        [
            {
                "diff": 2,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student15",
                "hover": "username:student15\n\ndiff:\n--- \n+++ \n@@ -1,18 +1,26 @@\n def multisplit(s,chars,sep): \"\"\"-removes-everything+for+every+character in the-list+list,+looks+through+the+string and+if+the+character+is+in+the+string, replaces it with-what-is-after-the-list.+sep. \"\"\"\n\nFROM completion:\ndef multisplit(s,chars,sep):\n    \"\"\"\n    removes everything in the list and replaces it with what is after the list.\n    \"\"\"\n        for c in chars:\n        s = s.replace(c,sep)\n    return s.split(sep)\n\n\nTO completion:\ndef multisplit(s,chars,sep):\n    \"\"\"\n    for every character in the list, looks through the string and if the character is in the string, replaces it with sep.\n    \"\"\"\n        for char in chars:\n        s = s.replace(char,sep)\n    return s\n",
                "id": 1,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 0,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student45",
                "hover": "username:student45\n\ndiff:\n--- \n+++ \n@@ -42,7 +42,18 @@\n present, we split+s,+remove+the+character+from s+at+the+index+where+we+split, and insert sep.\n\nFROM completion:\ndef multisplit(s,chars,sep):\n    \"\"\"\n    Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and insert sep.\n    \"\"\"\n        for c in chars:\n        s = s.replace(c,sep+c)\n    return s\n\n\nTO completion:\ndef multisplit(s,chars,sep):\n    \"\"\"\n    Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s, remove the character from s at the index where we split, and insert sep.\n    \"\"\"\n        for char in chars:\n        s = s.replace(char,sep+char)\n    return s\n",
                "id": 2,
                "key": 0
            },
            {
                "diff": 3,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student45",
                "hover": "username:student45\n\ndiff:\n--- \n+++ \n@@ -42,8 +42,9 @@\n present, we split-s,-remove+s+and+replace the character from@@ -53,8 +54,7 @@\n index where we-split,-and-insert+split+with sep. \"\"\"\n\nFROM completion:\ndef multisplit(s,chars,sep):\n    \"\"\"\n    Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s, remove the character from s at the index where we split, and insert sep.\n    \"\"\"\n        for char in chars:\n        s = s.replace(char,sep+char)\n    return s\n\n\nTO completion:\ndef multisplit(s,chars,sep):\n    \"\"\"\n    Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and replace the character from s at the index where we split with sep.\n    \"\"\"\n        for char in chars:\n        s = s.replace(char,sep)\n    return s\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student55",
                "hover": "username:student55\n\ndiff:\n--- \n+++ \n@@ -27,7 +27,11 @@\n separated by a-comma+double+quotes+or+simple+quotes and remove the\n\nFROM completion:\ndef multisplit(s,chars,sep):\n    \"\"\"\n    Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a comma and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.\n    \"\"\"\n        if chars == []:\n        return s\n    else:\n        s = s.split(',')[0]\n        s = s.replace('\"', \"'\")\n        for char in chars:\n            s = s.replace(char, sep)\n        return s\n\n\nTO completion:\ndef multisplit(s,chars,sep):\n    \"\"\"\n    Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a double quotes or simple quotes and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.\n    \"\"\"\n        if not chars:\n        return s\n    s = s.split(sep=sep)[0]\n    s = s.replace('\"', \"'\")\n    for char in chars:\n        s = s.replace(char, sep)\n    return s\n",
                "id": 1,
                "key": 0
            }
        ]
    ]
}