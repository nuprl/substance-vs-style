{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 0,
            "hover": "stdout:\n[0, 0, 2, 3, 0]\n\n[0, 1, 2, 0, 1]\n\n[2, 2, 1, 1, 1]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\n[0, 0, 2, 3, 3]\n\n[0, 1, 2, 1, 2]\n\n[2, 1, 1, 1, 2]\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 1
        },
        {
            "stderr_id": 1,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n  File \"/tmp/file.py\", line 6, in partialWordle\n    raise NotImplementedError()\nNotImplementedError\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n  File \"/tmp/file.py\", line 6, in partialWordle\n    raise NotImplementedError()\nNotImplementedError\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 7, in <module>\n    print(partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n  File \"/tmp/file.py\", line 6, in partialWordle\n    raise NotImplementedError()\nNotImplementedError\n",
            "color": "blue",
            "id": 2
        },
        {
            "stderr_id": 0,
            "stdout_id": 5,
            "hover": "stdout:\n[0, 0, 4, 6, 3]\n\n[0, 2, 4, 1, 3]\n\n[4, 4, 2, 2, 3]\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 3
        },
        {
            "stderr_id": 2,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 6\n    print(partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\nIndentationError: expected an indented block after 'for' statement on line 5\n",
            "color": "grey",
            "id": 4
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student55",
                "hover": "username:student55\nedge: (0->1)\ndiff:\n\n\nFROM completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words and return a list with the number of how many similar letters both strings share.\n    \"\"\"\n        # your code here\n    return [sum([1 for i in range(len(guessList[j])) if guessList[j][i] == hiddenWord[i]]) for j in range(len(guessList))]\n\n\nTO completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words and return a list with the number of how many similar letters both strings share.\n    \"\"\"\n        # your code here\n    return [len(set(guessList[i]) & set(hiddenWord)) for i in range(len(guessList))]\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 6,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student55",
                "hover": "username:student55\nedge: (1->2)\ndiff:\n--- \n+++ \n@@ -37,20 +37,71 @@\n with the hidden-words+words.+Compute+the+total+points+after+comparing+all+letters.+The+total+points+should+be+calculated+following+the+rules:+If+the+letter+is+the+same+from+the+hidden+word+but+in+a+different+position,+receives++1.+If+the+letter+is+the+same+from+the+hidden+word and-return+in+the+same+position,+receives++2.+The+function+returns a list-with+of the-number-of-how-many-similar-letters-both-strings-share.+total+points+from+each+word+in+the+list. \"\"\"\n\nFROM completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words and return a list with the number of how many similar letters both strings share.\n    \"\"\"\n        # your code here\n    return [len(set(guessList[i]) & set(hiddenWord)) for i in range(len(guessList))]\n\n\nTO completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function returns a list of the total points from each word in the list.\n    \"\"\"\n        # YOUR CODE HERE\n    raise NotImplementedError()\n",
                "id": 2,
                "key": 0
            },
            {
                "diff": 2,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student9",
                "hover": "username:student9\nedge: (1->1)\ndiff:\n--- \n+++ \n@@ -6,7 +6,9 @@\n shows how many-characters+characters,+including+\"'\", each string within\n\nFROM completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function shows how many characters each string within the list has in common with the characters in the string outside the list.\n    \"\"\"\n        partialWordle = []\n    for guess in guessList:\n        partialWordle.append(len(set(guess) & set(hiddenWord)))\n    return partialWordle\n\n\nTO completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function shows how many characters, including \"'\", each string within the list has in common with the characters in the string outside the list.\n    \"\"\"\n        partialWordle = []\n    for i in range(len(guessList)):\n        partialWordle.append(len(set(guessList[i])&set(hiddenWord)))\n    return partialWordle\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 4,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student9",
                "hover": "username:student9\nedge: (1->1)\ndiff:\n--- \n+++ \n@@ -8,7 +8,7 @@\n many characters, including-\"'\",+''', each string within\n\nFROM completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function shows how many characters, including \"'\", each string within the list has in common with the characters in the string outside the list.\n    \"\"\"\n        partialWordle = []\n    for i in range(len(guessList)):\n        partialWordle.append(len(set(guessList[i])&set(hiddenWord)))\n    return partialWordle\n\n\nTO completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function shows how many characters, including ''', each string within the list has in common with the characters in the string outside the list.\n    \"\"\"\n        partialWordle = []\n    for word in guessList:\n        partialWordle.append(len(set(hiddenWord).intersection(set(word))))\n    return partialWordle\n",
                "id": 1,
                "key": 1
            }
        ],
        [
            {
                "diff": 0,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student55",
                "hover": "username:student55\nedge: (2->3)\ndiff:\n\n\nFROM completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function returns a list of the total points from each word in the list.\n    \"\"\"\n        # YOUR CODE HERE\n    raise NotImplementedError()\n\n\nTO completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function returns a list of the total points from each word in the list.\n    \"\"\"\n        # Your code here\n    points = []\n    for word in guessList:\n        points.append(0)\n        for i in range(len(word)):\n            if word[i] == hiddenWord[i]:\n                points[-1] += 2\n            elif word[i] in hiddenWord:\n                points[-1] += 1\n    return points\n",
                "id": 3,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 1,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student9",
                "hover": "username:student9\nedge: (4->4)\ndiff:\n--- \n+++ \n@@ -12,7 +12,9 @@\n in the list-shares+has+in+common with the string\n\nFROM completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function prints how many letters each string in the list shares with the string outside the list.\n    \"\"\"\n        for i in range(len(guessList)):\n        print(guessList[i] + \": \" + str(len(set(guessList[i]) & set(hiddenWord))))\n\n\nTO completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function prints how many letters each string in the list has in common with the string outside the list.\n    \"\"\"\n        for i in range(len(guessList)):\n        print(guessList[i], \"has\", commonLetters(guessList[i],hiddenWord), \"letters in common with the hidden word.\")\n",
                "id": 4,
                "key": 0
            },
            {
                "diff": 3,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student9",
                "hover": "username:student9\nedge: (4->4)\ndiff:\n--- \n+++ \n@@ -6,7 +6,7 @@\n prints how many-letters+characters each string in\n\nFROM completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function prints how many letters each string in the list has in common with the string outside the list.\n    \"\"\"\n        for i in range(len(guessList)):\n        print(guessList[i], \"has\", commonLetters(guessList[i],hiddenWord), \"letters in common with the hidden word.\")\n\n\nTO completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function prints how many characters each string in the list has in common with the string outside the list.\n    \"\"\"\n        for i in range(len(guessList)):\n        print(guessList[i], \"has\", commonLetters(guessList[i],hiddenWord), \"letters in common with the hidden word.\")\n",
                "id": 4,
                "key": 1
            },
            {
                "diff": 5,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student9",
                "hover": "username:student9\nedge: (4->1)\ndiff:\n--- \n+++ \n@@ -3,13 +3,13 @@\n \"\"\" The function-prints+shows how many characters each string-in+within the list has@@ -17,6 +17,9 @@\n common with the+characters+in+the string outside the\n\nFROM completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function prints how many characters each string in the list has in common with the string outside the list.\n    \"\"\"\n        for i in range(len(guessList)):\n        print(guessList[i], \"has\", commonLetters(guessList[i],hiddenWord), \"letters in common with the hidden word.\")\n\n\nTO completion:\ndef partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function shows how many characters each string within the list has in common with the characters in the string outside the list.\n    \"\"\"\n        partialWordle = []\n    for guess in guessList:\n        partialWordle.append(len(set(guess) & set(hiddenWord)))\n    return partialWordle\n",
                "id": 1,
                "key": 0
            }
        ]
    ]
}