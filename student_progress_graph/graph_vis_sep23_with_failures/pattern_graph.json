{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 11\n    pattern(5)\nIndentationError: expected an indented block after 'for' statement on line 6\n\n  File \"/tmp/file.py\", line 11\n    pattern(5)\nIndentationError: expected an indented block after 'for' statement on line 6\n\n  File \"/tmp/file.py\", line 11\n    pattern(5)\nIndentationError: expected an indented block after 'for' statement on line 6\n",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 1,
            "stdout_id": 4,
            "hover": "stdout:\n112233\n\n11223344\n\n1122\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 1
        },
        {
            "stderr_id": 1,
            "stdout_id": 5,
            "hover": "stdout:\n[[1, 2, 3], [1, 2, 3]]\n\n[[1, 2, 3], [1, 2, 3]]\n\n[[1, 2], [1, 2]]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 2
        },
        {
            "stderr_id": 1,
            "stdout_id": 0,
            "hover": "stdout:\n[[1, 2, 3], [1, 2, 3], [1, 2, 3]]\n\n[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]\n\n[[1, 2], [1, 2]]\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 3
        },
        {
            "stderr_id": 1,
            "stdout_id": 6,
            "hover": "stdout:\n[[1], [1, 2], [1, 2, 3]]\n\n[[1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]\n\n[[1], [1, 2]]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 4
        },
        {
            "stderr_id": 1,
            "stdout_id": 9,
            "hover": "stdout:\n[1, 1, 1, 2, 2, 2, 3, 3, 3]\n\n[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]\n\n[1, 1, 2, 2]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 5
        },
        {
            "stderr_id": 2,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 7\n    print(pattern(3))\nIndentationError: expected an indented block after 'for' statement on line 6\n\n  File \"/tmp/file.py\", line 7\n    print(pattern(4))\nIndentationError: expected an indented block after 'for' statement on line 6\n\n  File \"/tmp/file.py\", line 7\n    print(pattern(2))\nIndentationError: expected an indented block after 'for' statement on line 6\n",
            "color": "red",
            "id": 6
        },
        {
            "stderr_id": 1,
            "stdout_id": 1,
            "hover": "stdout:\n[1, 2, 3]\n\n[1, 2, 3, 4]\n\n[1, 2]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 7
        },
        {
            "stderr_id": 1,
            "stdout_id": 2,
            "hover": "stdout:\n[[1], [2, 2], [3, 3, 3]]\n\n[[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n[[1], [2, 2]]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 8
        },
        {
            "stderr_id": 3,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 8\n    pattern(5)\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 8\n    pattern(5)\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 8\n    pattern(5)\nIndentationError: expected an indented block after 'for' statement on line 5\n",
            "color": "blue",
            "id": 9
        },
        {
            "stderr_id": 1,
            "stdout_id": 8,
            "hover": "stdout:\n[1, 1, 1, 2, 2, 2, 3, 3, 3]\n\n[1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\n\n[1, 1, 1, 2, 2, 2]\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 10
        },
        {
            "stderr_id": 1,
            "stdout_id": 7,
            "hover": "stdout:\n[[0, 1, 2], [0, 1, 2], [0, 1, 2]]\n\n[[0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3]]\n\n[[0, 1], [0, 1]]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 11
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student17",
                "hover": "username:student17\nedge: (0->1)\ndiff:\n\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    count to the letter of the input\n    \"\"\"\n        for i in range(1, value + 1):\n        for j in range(1, i + 1):\n            print(j, end=\" \")\n        print(\"\\r\")\n\n\npattern(5)\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    count to the letter of the input\n    \"\"\"\n        if value == 0:\n        return \"\"\n    else:\n        return pattern(value - 1) + str(value) + str(value)\n\nprint(pattern(3))\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 11,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student17",
                "hover": "username:student17\nedge: (1->2)\ndiff:\n--- \n+++ \n@@ -1,11 +1,13 @@\n def pattern(value): \"\"\"-count-to-the-letter-of-the-input+if+given+2+output+two+lists+1,2+and+1,2 \"\"\"\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    count to the letter of the input\n    \"\"\"\n        if value == 0:\n        return \"\"\n    else:\n        return pattern(value - 1) + str(value) + str(value)\n\nprint(pattern(3))\n\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    if given 2 output two lists 1,2 and 1,2\n    \"\"\"\n        if value == 2:\n        return [[1,2],[1,2]]\n    else:\n        return [[1,2,3],[1,2,3]]\n",
                "id": 2,
                "key": 0
            }
        ],
        [
            {
                "diff": 4,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student17",
                "hover": "username:student17\nedge: (2->3)\ndiff:\n--- \n+++ \n@@ -10,4 +10,16 @@\n 1,2 and 1,2+if+given+3+out+put+3+lists+1,2,3+and+1,2,3+and+1,2,3 \"\"\"\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    if given 2 output two lists 1,2 and 1,2\n    \"\"\"\n        if value == 2:\n        return [[1,2],[1,2]]\n    else:\n        return [[1,2,3],[1,2,3]]\n\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    if given 2 output two lists 1,2 and 1,2\nif given 3 out put 3 lists 1,2,3 and 1,2,3 and 1,2,3\n    \"\"\"\n        return [[i for i in range(1, value + 1)] for j in range(1, value + 1)]\n\n\nprint(pattern(2))\nprint(pattern(3))\n\n",
                "id": 3,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 8,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student25",
                "hover": "username:student25\nedge: (4->3)\ndiff:\n--- \n+++ \n@@ -9,9 +9,10 @@\n integer and creates-a+one list-with+including+the numbers 1 to@@ -26,9 +27,7 @@\n for the given-value-and-returns,+value, appending each list\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    This function takes a given integer and creates a list with numbers 1 to that given value. It creates this list repeated for the given value and returns, appending each list to one list. It returns the list of lists.\n    \"\"\"\n        list_of_lists = []\n    for i in range(1, value+1):\n        list_of_lists.append([j for j in range(1, i+1)])\n    return list_of_lists\n\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    This function takes a given integer and creates one list including the numbers 1 to that given value. It creates this list repeated for the given value, appending each list to one list. It returns the list of lists.\n    \"\"\"\n        pattern_list = []\n    for i in range(value):\n        pattern_list.append(list(range(1, value + 1)))\n    return pattern_list\n",
                "id": 3,
                "key": 0
            },
            {
                "diff": 9,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student4",
                "hover": "username:student4\nedge: (4->3)\ndiff:\n--- \n+++ \n@@ -1,18 +1,9 @@\n def pattern(value): \"\"\"-uses-the-given-number-to-produce+creates a-given-number-of-lists,-each+list containing elements counting@@ -22,5 +13,17 @@\n given number from-one+1,+duplicates+this+list+by+the+given+number+into+a+list+of+lists \"\"\"\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    uses the given number to produce a given number of lists, each containing elements counting up to the given number from one\n    \"\"\"\n        if value == 0:\n        return []\n    else:\n        return pattern(value-1) + [[i for i in range(1, value+1)]]\n\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    creates a list containing elements counting up to the given number from 1, duplicates this list by the given number into a list of lists\n    \"\"\"\n        return [[i for i in range(1, value + 1)] for j in range(value)]\n",
                "id": 3,
                "key": 1
            },
            {
                "diff": 12,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student3",
                "hover": "username:student3\nedge: (4->7)\ndiff:\n--- \n+++ \n@@ -8,22 +8,11 @@\n 1 input (value).-Produce+create list of-list-that-have-value-number+ascending+numbers of-list-contain-value-number-ascending-from-1-to value \"\"\"\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    create function which take 1 input (value). Produce list of list that have value number of list contain value number ascending from 1 to value\n    \"\"\"\n        return [[i for i in range(1, j+1)] for j in range(1, value+1)]\n\nprint(pattern(5))\n\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    create function which take 1 input (value). create list of ascending numbers of value\n    \"\"\"\n        return [i for i in range(1,value+1)]\n",
                "id": 7,
                "key": 0
            },
            {
                "diff": 2,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student41",
                "hover": "username:student41\nedge: (4->4)\ndiff:\n--- \n+++ \n@@ -20,8 +20,10 @@\n to the value.-Each-list+All+of+the+lists within the output\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    Returns a list of lists. The number of lists in the output list should be equal to the value. Each list within the output list should have each integer greater than zero up to, and including, the value inputted.\n    \"\"\"\n        output = []\n    for i in range(value):\n        output.append(list(range(1, i+2)))\n    return output\n\nprint(pattern(5))\n\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    Returns a list of lists. The number of lists in the output list should be equal to the value. All of the lists within the output list should have each integer greater than zero up to, and including, the value inputted.\n    \"\"\"\n        return [[x for x in range(1,y+1)] for y in range(1,value+1)]\n\nprint(pattern(3))",
                "id": 4,
                "key": 0
            },
            {
                "diff": 6,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student41",
                "hover": "username:student41\nedge: (4->11)\ndiff:\n--- \n+++ \n@@ -30,16 +30,12 @@\n list should have-each+every integer-greater-than+between zero-up-to, and-including, the-value-inputted.+inputted+value. \"\"\"\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    Returns a list of lists. The number of lists in the output list should be equal to the value. All of the lists within the output list should have each integer greater than zero up to, and including, the value inputted.\n    \"\"\"\n        return [[x for x in range(1,y+1)] for y in range(1,value+1)]\n\nprint(pattern(3))\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    Returns a list of lists. The number of lists in the output list should be equal to the value. All of the lists within the output list should have every integer between zero and the inputted value.\n    \"\"\"\n        return [[i for i in range(value)] for j in range(value)]\n",
                "id": 11,
                "key": 0
            }
        ],
        [
            {
                "diff": 10,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student26",
                "hover": "username:student26\nedge: (5->6)\ndiff:\n--- \n+++ \n@@ -3,10 +3,11 @@\n \"\"\" Generate a-sequence+set of numbers-ranging+counting+up from 1 to@@ -14,9 +15,9 @@\n given number and-repeat-the-sequence+print+each+set the given number\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    Generate a sequence of numbers ranging from 1 to the given number and repeat the sequence the given number of times\n    \"\"\"\n        return [i for i in range(1, value + 1) for _ in range(value)]\n\n\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    Generate a set of numbers counting up from 1 to the given number and print each set the given number of times\n    \"\"\"\n        for i in range(1, value + 1):\n        for j in range(i):\n            print(i, end=\" \")\n        print()\n\n",
                "id": 6,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 1,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student3",
                "hover": "username:student3\nedge: (7->8)\ndiff:\n--- \n+++ \n@@ -14,5 +14,14 @@\n ascending numbers of+value.+insert+that+list value+times+into+a+new+list \"\"\"\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    create function which take 1 input (value). create list of ascending numbers of value\n    \"\"\"\n        return [i for i in range(1,value+1)]\n\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    create function which take 1 input (value). create list of ascending numbers of value. insert that list value times into a new list\n    \"\"\"\n        return [[i]*i for i in range(1, value+1)]\n\nprint(pattern(5))\n",
                "id": 8,
                "key": 0
            },
            {
                "diff": 5,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student3",
                "hover": "username:student3\nedge: (7->10)\ndiff:\n--- \n+++ \n@@ -17,5 +17,6 @@\n value start from-1+1.+insert \"\"\"\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    create function which take 1 input (value). create list of ascending numbers of value start from 1\n    \"\"\"\n        return [i for i in range(1, value + 1)]\n\n\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    create function which take 1 input (value). create list of ascending numbers of value start from 1. insert \n    \"\"\"\n        list_pattern = []\n    for i in range(1, value+1):\n        list_pattern.append(i)\n        list_pattern.append(i)\n        list_pattern.append(i)\n    return list_pattern\n\nprint(pattern(3))\n",
                "id": 10,
                "key": 0
            }
        ],
        [
            {
                "diff": 13,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student3",
                "hover": "username:student3\nedge: (8->9)\ndiff:\n--- \n+++ \n@@ -15,13 +15,4 @@\n numbers of value.-insert-that-list-value-times-into-a-new-list \"\"\"\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    create function which take 1 input (value). create list of ascending numbers of value. insert that list value times into a new list\n    \"\"\"\n        return [[i]*i for i in range(1, value+1)]\n\nprint(pattern(5))\n\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    create function which take 1 input (value). create list of ascending numbers of value. \n    \"\"\"\n        for i in range(value):\n        print(str(i+1)*(i+1))\n\npattern(5)\n",
                "id": 9,
                "key": 0
            }
        ],
        [
            {
                "diff": 3,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student3",
                "hover": "username:student3\nedge: (9->7)\ndiff:\n--- \n+++ \n@@ -14,5 +14,8 @@\n ascending numbers of-value.+value+start+from+1 \"\"\"\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    create function which take 1 input (value). create list of ascending numbers of value. \n    \"\"\"\n        for i in range(value):\n        print(str(i+1)*(i+1))\n\npattern(5)\n\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    create function which take 1 input (value). create list of ascending numbers of value start from 1\n    \"\"\"\n        return [i for i in range(1, value + 1)]\n\n",
                "id": 7,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 7,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student41",
                "hover": "username:student41\nedge: (11->3)\ndiff:\n--- \n+++ \n@@ -33,8 +33,11 @@\n every integer between-zero+one and+one+more+than the inputted value.\n\nFROM completion:\ndef pattern(value):\n    \"\"\"\n    Returns a list of lists. The number of lists in the output list should be equal to the value. All of the lists within the output list should have every integer between zero and the inputted value.\n    \"\"\"\n        return [[i for i in range(value)] for j in range(value)]\n\n\nTO completion:\ndef pattern(value):\n    \"\"\"\n    Returns a list of lists. The number of lists in the output list should be equal to the value. All of the lists within the output list should have every integer between one and one more than the inputted value.\n    \"\"\"\n        return [[i for i in range(1, value + 1)] for i in range(value)]\n",
                "id": 3,
                "key": 0
            }
        ]
    ]
}