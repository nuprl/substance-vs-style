{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 17,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    total += int(line.split(\"\t\")[2])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 16,
            "stdout_id": 7,
            "hover": "stdout:\n36.5\n\n10.0\n\n0.0\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 15,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 11, in readingIceCream\n    total += int(line[index + 1:])\nValueError: invalid literal for int() with base 10: '\tice cream\t3'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t10\"]))\n  File \"/tmp/file.py\", line 11, in readingIceCream\n    total += int(line[index + 1:])\nValueError: invalid literal for int() with base 10: 'y\tfrozen yogurt\t10'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t0\"]))\n  File \"/tmp/file.py\", line 11, in readingIceCream\n    total += int(line[index + 1:])\nValueError: invalid literal for int() with base 10: 'y\tfrozen yogurt\t0'\n",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 16,
            "stdout_id": 2,
            "hover": "stdout:\n0\n\n0\n\n0\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 3
        },
        {
            "stderr_id": 18,
            "stdout_id": 6,
            "hover": "stdout:\n\n10.0\n\n0.0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    total += float(line[line.rfind(\"t\")+1:])\nValueError: could not convert string to float: '\tice cream\t3'\n\n\n",
            "color": "blue",
            "id": 4
        },
        {
            "stderr_id": 20,
            "stdout_id": 6,
            "hover": "stdout:\n\n10.0\n\n0.0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 11, in readingIceCream\n    total += float(line[:i][::-1])\nValueError: could not convert string to float: '\tice cream\t3'\n\n\n",
            "color": "blue",
            "id": 5
        },
        {
            "stderr_id": 2,
            "stdout_id": 6,
            "hover": "stdout:\n\n10.0\n\n0.0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 11, in readingIceCream\n    total += float(line)\nValueError: could not convert string to float: '\tice cream\t3'\n\n\n",
            "color": "blue",
            "id": 6
        },
        {
            "stderr_id": 13,
            "stdout_id": 6,
            "hover": "stdout:\n\n10.0\n\n0.0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 12, in readingIceCream\n    total += float(line[index + 1:])\nValueError: could not convert string to float: '\tice cream\t3'\n\n\n",
            "color": "red",
            "id": 7
        },
        {
            "stderr_id": 21,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    total += int(line.split('\t')[-1])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "grey",
            "id": 8
        },
        {
            "stderr_id": 16,
            "stdout_id": 4,
            "hover": "stdout:\n34\n\n10\n\n0\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 9
        },
        {
            "stderr_id": 12,
            "stdout_id": 6,
            "hover": "stdout:\n\n10.0\n\n0.0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    total += float(line[line.rfind('t') + 1:])\nValueError: could not convert string to float: '\tice cream\t3'\n\n\n",
            "color": "grey",
            "id": 10
        },
        {
            "stderr_id": 5,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    sum += int(line.split('t')[-1])\nValueError: invalid literal for int() with base 10: '\tice cream\t3'\n\n\n",
            "color": "blue",
            "id": 11
        },
        {
            "stderr_id": 1,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    total += int(line.split('t')[-1])\nValueError: invalid literal for int() with base 10: '\tice cream\t3'\n\n\n",
            "color": "grey",
            "id": 12
        },
        {
            "stderr_id": 14,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    iceCream.append(float(line.split(\"\t\")[1]))\nValueError: could not convert string to float: 'ice cream'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t10\"]))\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    iceCream.append(float(line.split(\"\t\")[1]))\nValueError: could not convert string to float: 'frozen yogurt'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t0\"]))\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    iceCream.append(float(line.split(\"\t\")[1]))\nValueError: could not convert string to float: 'frozen yogurt'\n",
            "color": "blue",
            "id": 13
        },
        {
            "stderr_id": 22,
            "stdout_id": 6,
            "hover": "stdout:\n\n10.0\n\n0.0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    newList.append(float(line[line.rfind(\"t\")+1:]))\nValueError: could not convert string to float: '\tice cream\t3'\n\n\n",
            "color": "red",
            "id": 14
        },
        {
            "stderr_id": 25,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    total += float(line)\nValueError: could not convert string to float: 'peppermin'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t10\"]))\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    total += float(line)\nValueError: could not convert string to float: 'sal'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t0\"]))\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    total += float(line)\nValueError: could not convert string to float: 'sal'\n",
            "color": "blue",
            "id": 15
        },
        {
            "stderr_id": 4,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 11, in readingIceCream\n    line = float(line)\nValueError: could not convert string to float: 'peppermin'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t10\"]))\n  File \"/tmp/file.py\", line 11, in readingIceCream\n    line = float(line)\nValueError: could not convert string to float: 'sal'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t0\"]))\n  File \"/tmp/file.py\", line 11, in readingIceCream\n    line = float(line)\nValueError: could not convert string to float: 'sal'\n",
            "color": "blue",
            "id": 16
        },
        {
            "stderr_id": 26,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 9, in readingIceCream\n    total += float(line)\nValueError: could not convert string to float: 'peppermin'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t10\"]))\n  File \"/tmp/file.py\", line 9, in readingIceCream\n    total += float(line)\nValueError: could not convert string to float: 'sal'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t0\"]))\n  File \"/tmp/file.py\", line 9, in readingIceCream\n    total += float(line)\nValueError: could not convert string to float: 'sal'\n",
            "color": "red",
            "id": 17
        },
        {
            "stderr_id": 23,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    count += int(line.split('\t')[1])\nValueError: invalid literal for int() with base 10: 'ice cream'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t10\"]))\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    count += int(line.split('\t')[1])\nValueError: invalid literal for int() with base 10: 'frozen yogurt'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t0\"]))\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    count += int(line.split('\t')[1])\nValueError: invalid literal for int() with base 10: 'frozen yogurt'\n",
            "color": "grey",
            "id": 18
        },
        {
            "stderr_id": 7,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    count += int(line.split('\t')[2])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "blue",
            "id": 19
        },
        {
            "stderr_id": 9,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    total += float(line)\nValueError: could not convert string to float: 'peppermint\tice cream\t3'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t10\"]))\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    total += float(line)\nValueError: could not convert string to float: 'salty\tfrozen yogurt\t10'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t0\"]))\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    total += float(line)\nValueError: could not convert string to float: 'salty\tfrozen yogurt\t0'\n",
            "color": "grey",
            "id": 20
        },
        {
            "stderr_id": 24,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    total += int(line.split()[-1])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "blue",
            "id": 21
        },
        {
            "stderr_id": 8,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    return int(line.split(\" \")[1])\nValueError: invalid literal for int() with base 10: 'cream\t3'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t10\"]))\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    return int(line.split(\" \")[1])\nValueError: invalid literal for int() with base 10: 'yogurt\t10'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t0\"]))\n  File \"/tmp/file.py\", line 7, in readingIceCream\n    return int(line.split(\" \")[1])\nValueError: invalid literal for int() with base 10: 'yogurt\t0'\n",
            "color": "grey",
            "id": 22
        },
        {
            "stderr_id": 16,
            "stdout_id": 5,
            "hover": "stdout:\nNone\n\nNone\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 23
        },
        {
            "stderr_id": 11,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 10, in readingIceCream\n    return int(line[0]) * int(line[-1])\nValueError: invalid literal for int() with base 10: 'peppermint\tice'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t10\"]))\n  File \"/tmp/file.py\", line 10, in readingIceCream\n    return int(line[0]) * int(line[-1])\nValueError: invalid literal for int() with base 10: 'salty\tfrozen'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t0\"]))\n  File \"/tmp/file.py\", line 10, in readingIceCream\n    return int(line[0]) * int(line[-1])\nValueError: invalid literal for int() with base 10: 'salty\tfrozen'\n",
            "color": "red",
            "id": 24
        },
        {
            "stderr_id": 3,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    count += int(line[-1])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "grey",
            "id": 25
        },
        {
            "stderr_id": 10,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 9, in readingIceCream\n    sum += int(line[second + 1:])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "grey",
            "id": 26
        },
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\n\n10\n\n0\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 12, in readingIceCream\n    sum += int(line[i+1:])\nValueError: invalid literal for int() with base 10: '2.5'\n\n\n",
            "color": "blue",
            "id": 27
        },
        {
            "stderr_id": 16,
            "stdout_id": 3,
            "hover": "stdout:\n36.5\n\n10\n\n0\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 28
        },
        {
            "stderr_id": 19,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(readingIceCream([\"peppermint\tice cream\t3\",\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    line = line[2]\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t10\"]))\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    line = line[2]\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(readingIceCream([\"salty\tfrozen yogurt\t0\"]))\n  File \"/tmp/file.py\", line 8, in readingIceCream\n    line = line[2]\nIndexError: list index out of range\n",
            "color": "grey",
            "id": 29
        },
        {
            "stderr_id": 6,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 6\n    print(readingIceCream([\"peppermint\tice cream\t3\",\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(readingIceCream([\"salty\tfrozen yogurt\t10\"]))\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(readingIceCream([\"salty\tfrozen yogurt\t0\"]))\nIndentationError: expected an indented block after 'for' statement on line 5\n",
            "color": "blue",
            "id": 30
        }
    ],
    "adjacency": [
        [
            {
                "diff": 16,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student27",
                "hover": "username:student27\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -47,4 +47,11 @@\n of each string.+The+value+can+be+integers+or+floats. \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Calculate the total value of a list of ice cream. The input will be a list of strings, and each string contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each string.\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += int(line.split(\"\\t\")[2])\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Calculate the total value of a list of ice cream. The input will be a list of strings, and each string contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each string. The value can be integers or floats.\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += float(line.split(\"\\t\")[2])\n    return total\n",
                "id": 1,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 20,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student29",
                "hover": "username:student29\nedge: (2->3)\ndiff:\n--- \n+++ \n@@ -9,25 +9,50 @@\n through the string-until-after+and+keep+track+of the-2nd+number+of \"\\\"-character.+characters.+When+the+number+of+\"\\\"+is+2,+isolate+the+rest+of+the+string. Then-return+isolate the-integer-following-the-\"t\"-character.+remainder+of+that+string,+starting+at+index+1.+Convert+this+string+to+a+float. Keep track of the-integer+float for each entry\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    For each list entry, parse through the string until after the 2nd \"\\\" character. Then return the integer following the \"t\" character. Keep track of the integer for each entry and add them all together, returning the sum for each list\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        index = line.find(\"\\\\\")\n        index = line.find(\"\\\\\", index + 1)\n        index = line.find(\"t\", index + 1)\n        total += int(line[index + 1:])\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    For each list entry, parse through the string and keep track of the number of \"\\\" characters. When the number of \"\\\" is 2, isolate the rest of the string. Then isolate the remainder of that string, starting at index 1. Convert this string to a float. Keep track of the float for each entry and add them all together, returning the sum for each list\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        count = 0\n        for char in line:\n            if char == \"\\\\\":\n                count += 1\n            if count == 2:\n                line = line[line.index(\"\\\\\")+1:]\n                line = line[line.index(\"\\\\\")+1:]\n                line = line[1:]\n                total += float(line)\n                break\n    return total\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student29",
                "hover": "username:student29\nedge: (3->3)\ndiff:\n--- \n+++ \n@@ -19,10 +19,8 @@\n \"\\\" characters. When-the-number-of-\"\\\"+that+count is 2, isolate\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    For each list entry, parse through the string and keep track of the number of \"\\\" characters. When the number of \"\\\" is 2, isolate the rest of the string. Then isolate the remainder of that string, starting at index 1. Convert this string to a float. Keep track of the float for each entry and add them all together, returning the sum for each list\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        count = 0\n        for char in line:\n            if char == \"\\\\\":\n                count += 1\n            if count == 2:\n                line = line[line.index(\"\\\\\")+1:]\n                line = line[line.index(\"\\\\\")+1:]\n                line = line[1:]\n                total += float(line)\n                break\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    For each list entry, parse through the string and keep track of the number of \"\\\" characters. When that count is 2, isolate the rest of the string. Then isolate the remainder of that string, starting at index 1. Convert this string to a float. Keep track of the float for each entry and add them all together, returning the sum for each list\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        count = 0\n        for char in line:\n            if char == \"\\\\\":\n                count += 1\n            if count == 2:\n                line = line[line.index(char):]\n                line = line[1:]\n                total += float(line)\n    return total\n\n",
                "id": 3,
                "key": 0
            },
            {
                "diff": 18,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student29",
                "hover": "username:student29\nedge: (3->3)\ndiff:\n--- \n+++ \n@@ -10,14 +10,12 @@\n the string and-keep-track-of-the-number-of+increase+count+after+each \"\\\"-characters.+character. When that count\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    For each list entry, parse through the string and keep track of the number of \"\\\" characters. When that count is 2, isolate the rest of the string. Then isolate the remainder of that string, starting at index 1. Convert this string to a float. Keep track of the float for each entry and add them all together, returning the sum for each list\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        count = 0\n        for char in line:\n            if char == \"\\\\\":\n                count += 1\n            if count == 2:\n                line = line[line.index(char):]\n                line = line[1:]\n                total += float(line)\n    return total\n\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    For each list entry, parse through the string and increase count after each \"\\\" character. When that count is 2, isolate the rest of the string. Then isolate the remainder of that string, starting at index 1. Convert this string to a float. Keep track of the float for each entry and add them all together, returning the sum for each list\n\n    \"\"\"\n        count = 0\n    total = 0\n    for line in lines:\n        for char in line:\n            if char == \"\\\\\":\n                count += 1\n            if count == 2:\n                line = line[line.index(\"\\\\\")+1:]\n                line = line[line.index(\"\\\\\")+1:]\n                total += float(line)\n                count = 0\n    return total\n",
                "id": 3,
                "key": 1
            },
            {
                "diff": 3,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student78",
                "hover": "username:student78\nedge: (3->3)\ndiff:\n--- \n+++ \n@@ -11,19 +11,26 @@\n string by \\.+for+each+new+string,+if+it+starts+with+t,+eliminate+the+t.+next find the sting that contains a-number-and-eliminate-the-'t'-in-it,+number, convert it to\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    given a list of strings, split each string by \\. find the sting that contains a number and\neliminate the 't' in it, convert it to a float, and add it to running total. output this total\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split('\\\\')\n        for item in line:\n            if item.isdigit():\n                item = item.replace('t', '')\n                total += float(item)\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    given a list of strings, split each string by \\. for each new string, if it starts with t, eliminate the t. next find the sting that contains a number, convert it to a float, and add it to running total. output this total\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split(\"\\\\\")\n        for item in line:\n            if item[0] == \"t\":\n                item = item[1:]\n            if item.isdigit():\n                total += float(item)\n    return total\n",
                "id": 3,
                "key": 2
            },
            {
                "diff": 21,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student29",
                "hover": "username:student29\nedge: (3->4)\ndiff:\n--- \n+++ \n@@ -1,66 +1,53 @@\n def readingIceCream(lines): \"\"\"-For+Starting+at+the+end+of each-list-entry,+string+input, parse-through+backwards+until+you+reach+the+\"t\"+character.+Isolate the string-and-increase-count-after-each-\"\\\"-character.-When-that-count-is-2,-isolate+from the-rest+\"t\"+character+until+the+end of the-string.-Then-isolate-the-remainder-of+entry.+Convert that-string,-starting-at-index-1.-Convert-this string to a-float.-Keep-track+float,+then+add+all of the-float+floats for each entry+together and-add-them-all-together,-returning+return the-sum-for-each-list+total. \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    For each list entry, parse through the string and increase count after each \"\\\" character. When that count is 2, isolate the rest of the string. Then isolate the remainder of that string, starting at index 1. Convert this string to a float. Keep track of the float for each entry and add them all together, returning the sum for each list\n\n    \"\"\"\n        count = 0\n    total = 0\n    for line in lines:\n        for char in line:\n            if char == \"\\\\\":\n                count += 1\n            if count == 2:\n                line = line[line.index(\"\\\\\")+1:]\n                line = line[line.index(\"\\\\\")+1:]\n                total += float(line)\n                count = 0\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Starting at the end of each string input, parse backwards until you reach the \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += float(line[line.rfind(\"t\")+1:])\n    return total\n",
                "id": 4,
                "key": 0
            },
            {
                "diff": 5,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student49",
                "hover": "username:student49\nedge: (3->16)\ndiff:\n--- \n+++ \n@@ -18,11 +18,33 @@\n type cast the-values+value to-floats+float.+Then+move+to+the+next+string+in+the+list+and+repeat.+Once+the+end+at+the+end+of+the+list and add+all+removed values together. \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Given a list of strings remove anything past the last t in the string type cast the values to floats and add values together.\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split()\n        if line[0] == 't':\n            total += float(line[1])\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Given a list of strings remove anything past the last t in the string type cast the value to float. Then move to the next string in the list and repeat. Once the end at the end of the list and add all removed values together.\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split(' ')\n        line = line[0]\n        line = line.split('t')\n        line = line[0]\n        line = float(line)\n        total += line\n    return total\n",
                "id": 16,
                "key": 0
            },
            {
                "diff": 6,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student62",
                "hover": "username:student62\nedge: (3->19)\ndiff:\n--- \n+++ \n@@ -10,14 +10,11 @@\n number directly after+the+second '\\t' to-count-if-it-is-an-integer,+count, returns sum \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds number directly after '\\t' to count if it is an integer, returns sum\n    \"\"\"\n        count = 0\n    for line in lines:\n        if line[0] == '\\t':\n            try:\n                count += int(line[1:])\n            except ValueError:\n                pass\n    return count\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds number directly after the second '\\t' to count, returns sum\n    \"\"\"\n        count = 0\n    for line in lines:\n        count += int(line.split('\\t')[2])\n    return count\n",
                "id": 19,
                "key": 0
            },
            {
                "diff": 19,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student78",
                "hover": "username:student78\nedge: (3->30)\ndiff:\n--- \n+++ \n@@ -11,38 +11,6 @@\n string by \\.-for-each-new-string,-if-it-starts-with-t,-eliminate-the-t.-next-find-the-sting-that-contains-a-number,-convert-it-to-a-float,-and-add-it-to-running-total. output this-total \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    given a list of strings, split each string by \\. for each new string, if it starts with t, eliminate the t. next find the sting that contains a number, convert it to a float, and add it to running total. output this total\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split(\"\\\\\")\n        for item in line:\n            if item[0] == \"t\":\n                item = item[1:]\n            if item.isdigit():\n                total += float(item)\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    given a list of strings, split each string by \\. output this \n    \"\"\"\n        for line in lines:\n        print(line.split('\\\\'))\n",
                "id": 30,
                "key": 0
            }
        ],
        [
            {
                "diff": 31,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student29",
                "hover": "username:student29\nedge: (4->5)\ndiff:\n--- \n+++ \n@@ -7,8 +7,8 @@\n end of each-string-input,+list+entry, parse backwards until\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Starting at the end of each string input, parse backwards until you reach the \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += float(line[line.rfind(\"t\")+1:])\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Starting at the end of each list entry, parse backwards until you reach the \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line[::-1]\n        for i in range(len(line)):\n            if line[i] == \"t\":\n                total += float(line[:i][::-1])\n                break\n    return total\n",
                "id": 5,
                "key": 0
            }
        ],
        [
            {
                "diff": 11,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student29",
                "hover": "username:student29\nedge: (5->6)\ndiff:\n--- \n+++ \n@@ -1,14 +1,18 @@\n def readingIceCream(lines): \"\"\"-Starting+For+each+list+entry,+start at the end of-each-list-entry,+the+corresponding+string, parse backwards until\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Starting at the end of each list entry, parse backwards until you reach the \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line[::-1]\n        for i in range(len(line)):\n            if line[i] == \"t\":\n                total += float(line[:i][::-1])\n                break\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    For each list entry, start at the end of the corresponding string, parse backwards until you reach the \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line[::-1]\n        line = line[:line.find(\"t\")]\n        line = line[::-1]\n        total += float(line)\n    return total\n",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student29",
                "hover": "username:student29\nedge: (6->7)\ndiff:\n--- \n+++ \n@@ -19,6 +19,7 @@\n you reach the+first \"t\" character. Isolate\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    For each list entry, start at the end of the corresponding string, parse backwards until you reach the \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line[::-1]\n        line = line[:line.find(\"t\")]\n        line = line[::-1]\n        total += float(line)\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    For each list entry, start at the end of the corresponding string, parse backwards until you reach the first \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.strip()\n        index = len(line) - 1\n        while line[index] != \"t\":\n            index -= 1\n        total += float(line[index + 1:])\n    return total\n",
                "id": 7,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 13,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student32",
                "hover": "username:student32\nedge: (8->9)\ndiff:\n--- \n+++ \n@@ -22,4 +22,12 @@\n in the element.+the+sum+should+not+be+limited+to+integers \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. \n    \"\"\"\n        total = 0\n    for line in lines:\n        if '\\t' in line:\n            total += int(line.split('\\t')[-1])\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. the sum should not be limited to integers\n    \"\"\"\n        total = 0\n    for line in lines:\n        for word in line.split():\n            if word.isdigit():\n                total += int(word)\n    return total\n",
                "id": 9,
                "key": 0
            }
        ],
        [
            {
                "diff": 29,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student32",
                "hover": "username:student32\nedge: (9->1)\ndiff:\n--- \n+++ \n@@ -25,9 +25,8 @@\n the sum should-not-be-limited-to-integers+include+numbers+with+decimals \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. the sum should not be limited to integers\n    \"\"\"\n        total = 0\n    for line in lines:\n        for word in line.split():\n            if word.isdigit():\n                total += int(word)\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. the sum should include numbers with decimals\n\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split('\\t')\n        total += float(line[-1])\n    return total\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 28,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student34",
                "hover": "username:student34\nedge: (10->11)\ndiff:\n--- \n+++ \n@@ -2,9 +2,10 @@\n readingIceCream(lines): \"\"\" Convert-all+the+numbers that-appears+appear after the last@@ -16,14 +17,13 @@\n the list into-a-float,+integers, and then find the sum of-the-floats+those+integers \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Convert all that appears after the last t of each object in the list into a float, and then find the sum of the floats\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += float(line[line.rfind('t') + 1:])\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Convert the numbers that appear after the last t of each object in the list into integers, and then find the sum of those integers\n    \"\"\"\n        sum = 0\n    for line in lines:\n        sum += int(line.split('t')[-1])\n    return sum\n",
                "id": 11,
                "key": 0
            }
        ],
        [
            {
                "diff": 30,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student34",
                "hover": "username:student34\nedge: (11->12)\ndiff:\n--- \n+++ \n@@ -2,10 +2,8 @@\n readingIceCream(lines): \"\"\" Convert-the-numbers-that-appear+what+appears after the last@@ -17,7 +15,7 @@\n the list into-integers,+numbers, and then find@@ -25,5 +23,5 @@\n sum of those-integers+numbers \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Convert the numbers that appear after the last t of each object in the list into integers, and then find the sum of those integers\n    \"\"\"\n        sum = 0\n    for line in lines:\n        sum += int(line.split('t')[-1])\n    return sum\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Convert what appears after the last t of each object in the list into numbers, and then find the sum of those numbers\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += int(line.split('t')[-1])\n    return total\n",
                "id": 12,
                "key": 0
            }
        ],
        [
            {
                "diff": 25,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student34",
                "hover": "username:student34\nedge: (12->13)\ndiff:\n--- \n+++ \n@@ -2,12 +2,16 @@\n readingIceCream(lines): \"\"\" Convert-what+all+that appears after the-last-t+\"ice+cream\\t\"+or+\"frozen+yogurt\\t\" of each object@@ -15,13 +19,20 @@\n the list into-numbers,+a+float,+make+a+new+list+of+those+floats, and-then find the sum of-those-numbers+that+list \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Convert what appears after the last t of each object in the list into numbers, and then find the sum of those numbers\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += int(line.split('t')[-1])\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Convert all that appears after the \"ice cream\\t\" or \"frozen yogurt\\t\" of each object in the list into a float, make a new list of those floats, and find the sum of that list\n    \"\"\"\n        iceCream = []\n    for line in lines:\n        if \"ice cream\" in line or \"frozen yogurt\" in line:\n            iceCream.append(float(line.split(\"\\t\")[1]))\n    return sum(iceCream)\n",
                "id": 13,
                "key": 0
            },
            {
                "diff": 10,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student49",
                "hover": "username:student49\nedge: (12->15)\ndiff:\n--- \n+++ \n@@ -15,14 +15,21 @@\n in the string,-type+and+store+in+a+new+list.+Type cast+the+new+list to-an-integer+floats and-then add-them+values together. \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Given a list of strings remove anything past the last t in the string, type cast to an integer and then add them together. \n    \"\"\"\n        total = 0\n    for line in lines:\n        total += int(line.split('t')[-1])\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Given a list of strings remove anything past the last t in the string, and store in a new list. Type cast the new list to floats and add values together.\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split(\"t\")[0]\n        total += float(line)\n    return total\n",
                "id": 15,
                "key": 0
            }
        ],
        [
            {
                "diff": 12,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student34",
                "hover": "username:student34\nedge: (13->14)\ndiff:\n--- \n+++ \n@@ -7,11 +7,8 @@\n appears after the-\"ice-cream\\t\"-or-\"frozen-yogurt\\t\"+final+\"t\" of each object\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Convert all that appears after the \"ice cream\\t\" or \"frozen yogurt\\t\" of each object in the list into a float, make a new list of those floats, and find the sum of that list\n    \"\"\"\n        iceCream = []\n    for line in lines:\n        if \"ice cream\" in line or \"frozen yogurt\" in line:\n            iceCream.append(float(line.split(\"\\t\")[1]))\n    return sum(iceCream)\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Convert all that appears after the final \"t\" of each object in the list into a float, make a new list of those floats, and find the sum of that list\n    \"\"\"\n        newList = []\n    for line in lines:\n        newList.append(float(line[line.rfind(\"t\")+1:]))\n    return sum(newList)\n",
                "id": 14,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 27,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student49",
                "hover": "username:student49\nedge: (15->3)\ndiff:\n--- \n+++ \n@@ -14,18 +14,11 @@\n t in the-string,-and-store-in-a-new-list.-Type+string+type cast the-new-list+values to floats and\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Given a list of strings remove anything past the last t in the string, and store in a new list. Type cast the new list to floats and add values together.\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split(\"t\")[0]\n        total += float(line)\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Given a list of strings remove anything past the last t in the string type cast the values to floats and add values together.\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split()\n        if line[0] == 't':\n            total += float(line[1])\n    return total\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 22,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student49",
                "hover": "username:student49\nedge: (16->17)\ndiff:\n--- \n+++ \n@@ -14,22 +14,23 @@\n t in the-string+string, type cast the value to float.-Then-move+Move to the next string in the-list+list,+if+exists and repeat. Once@@ -44,7 +45,11 @@\n and add all-removed values+that+were+cast+to+float together. \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Given a list of strings remove anything past the last t in the string type cast the value to float. Then move to the next string in the list and repeat. Once the end at the end of the list and add all removed values together.\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split(' ')\n        line = line[0]\n        line = line.split('t')\n        line = line[0]\n        line = float(line)\n        total += line\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Given a list of strings remove anything past the last t in the string, type cast the value to float. Move to the next string in the list, if exists and repeat. Once the end at the end of the list and add all values that were cast to float together.\n    \"\"\"\n        total = 0\n    for line in lines:\n        if \"t\" in line:\n            line = line[:line.index(\"t\")]\n            total += float(line)\n    return total\n",
                "id": 17,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 17,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student62",
                "hover": "username:student62\nedge: (18->3)\ndiff:\n--- \n+++ \n@@ -12,7 +12,12 @@\n after '\\t' to-count,+count+if+it+is+an+integer, returns sum \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds number directly after '\\t' to count, returns sum\n    \"\"\"\n        count = 0\n    for line in lines:\n        count += int(line.split('\\t')[1])\n    return count\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds number directly after '\\t' to count if it is an integer, returns sum\n    \"\"\"\n        count = 0\n    for line in lines:\n        if line[0] == '\\t':\n            try:\n                count += int(line[1:])\n            except ValueError:\n                pass\n    return count\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 23,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student62",
                "hover": "username:student62\nedge: (19->1)\ndiff:\n--- \n+++ \n@@ -7,7 +7,7 @@\n in list, adds-number+float directly after the\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds number directly after the second '\\t' to count, returns sum\n    \"\"\"\n        count = 0\n    for line in lines:\n        count += int(line.split('\\t')[2])\n    return count\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds float directly after the second '\\t' to count, returns sum\n    \"\"\"\n        count = 0\n    for line in lines:\n        count += float(line.split('\\t')[2])\n    return count\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 14,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student66",
                "hover": "username:student66\nedge: (20->21)\ndiff:\n--- \n+++ \n@@ -1,17 +1,26 @@\n def readingIceCream(lines): \"\"\"-return+take the-sum+integer+at+the+end of-the-float-in each item in the array list+and+sum+all+of+the+values+return+the+sum \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    return the sum of the float in each item in the array list\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += float(line)\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    take the integer at the end of each item in the array list and sum all of the values return the sum\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += int(line.split()[-1])\n    return total\n",
                "id": 21,
                "key": 0
            }
        ],
        [
            {
                "diff": 26,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student66",
                "hover": "username:student66\nedge: (21->1)\ndiff:\n--- \n+++ \n@@ -3,7 +3,7 @@\n \"\"\" take the-integer+float at the end\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    take the integer at the end of each item in the array list and sum all of the values return the sum\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += int(line.split()[-1])\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    take the float at the end of each item in the array list and sum all of the values return the sum\n    \"\"\"\n        total = 0\n    for line in lines:\n        total += float(line.split()[-1])\n    return total\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 9,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student67",
                "hover": "username:student67\nedge: (22->23)\ndiff:\n--- \n+++ \n@@ -1,7 +1,19 @@\n def readingIceCream(lines): \"\"\"-Returns+Multiplies+the+number+of+letters+in+the+word+before+the+first+\\+by the number after\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Returns the number after t.\n    \"\"\"\n        for line in lines:\n        if \"t\" in line:\n            return int(line.split(\" \")[1])\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Multiplies the number of letters in the word before the first \\ by the number after t.\n    \"\"\"\n        for line in lines:\n        line = line.strip()\n        line = line.split(\" \")\n        print(len(line[0]) * int(line[1]))\n",
                "id": 23,
                "key": 0
            }
        ],
        [
            {
                "diff": 0,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student67",
                "hover": "username:student67\nedge: (23->24)\ndiff:\n--- \n+++ \n@@ -17,5 +17,9 @@\n the number after-t.+t+and+returns+that+value. \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Multiplies the number of letters in the word before the first \\ by the number after t.\n    \"\"\"\n        for line in lines:\n        line = line.strip()\n        line = line.split(\" \")\n        print(len(line[0]) * int(line[1]))\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Multiplies the number of letters in the word before the first \\ by the number after t and returns that value.\n    \"\"\"\n        for line in lines:\n        line = line.strip()\n        if line == \"\":\n            continue\n        line = line.split(\" \")\n        return int(line[0]) * int(line[-1])\n",
                "id": 24,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 24,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student68",
                "hover": "username:student68\nedge: (25->1)\ndiff:\n--- \n+++ \n@@ -20,7 +20,7 @@\n should be a-number+double and add it\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    given an array of strings, parse each string by '\\t' and grab the last value that should be a number and add it to a count value. return the count value\n    \"\"\"\n        count = 0\n    for line in lines:\n        line = line.split('\\t')\n        count += int(line[-1])\n    return count\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    given an array of strings, parse each string by '\\t' and grab the last value that should be a double and add it to a count value. return the count value\n    \"\"\"\n        count = 0\n    for line in lines:\n        count += float(line.split('\\t')[-1])\n    return count\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 2,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student70",
                "hover": "username:student70\nedge: (26->27)\ndiff:\n--- \n+++ \n@@ -34,12 +34,12 @@\n convert it into-an-integer,+a+number, then add that-integer+number to the sum.\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into an integer, then add that integer to the sum. Return the sum at the end of the list.\n    \"\"\"\n        sum = 0\n    for line in lines:\n        first = line.find(\"\\t\")\n        second = line.find(\"\\t\", first + 1)\n        sum += int(line[second + 1:])\n    return sum\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into a number, then add that number to the sum. Return the sum at the end of the list.\n    \"\"\"\n        sum = 0\n    for line in lines:\n        count = 0\n        for i in range(len(line)):\n            if line[i] == \"\\t\":\n                count += 1\n            if count == 2:\n                sum += int(line[i+1:])\n                break\n    return sum\n",
                "id": 27,
                "key": 0
            }
        ],
        [
            {
                "diff": 15,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student70",
                "hover": "username:student70\nedge: (27->28)\ndiff:\n--- \n+++ \n@@ -29,17 +29,32 @@\n rest of the+string.+If+this+remaining+portion+of+the string-and+contains+\".\", convert it into a-number,-then-add-that-number+float.+Otherwise,+convert+it+into+an+integer.+Add+this+float+or+integer to the sum.\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into a number, then add that number to the sum. Return the sum at the end of the list.\n    \"\"\"\n        sum = 0\n    for line in lines:\n        count = 0\n        for i in range(len(line)):\n            if line[i] == \"\\t\":\n                count += 1\n            if count == 2:\n                sum += int(line[i+1:])\n                break\n    return sum\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string. If this remaining portion of the string contains \".\", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Return the sum at the end of the list.\n    \"\"\"\n        sum = 0\n    for line in lines:\n        line = line.strip()\n        line = line[line.find(\"\\t\")+1:]\n        line = line[line.find(\"\\t\")+1:]\n        if \".\" in line:\n            sum += float(line)\n        else:\n            sum += int(line)\n    return sum\n",
                "id": 28,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 7,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student78",
                "hover": "username:student78\nedge: (29->3)\ndiff:\n--- \n+++ \n@@ -9,24 +9,16 @@\n split each string-on+by+\\.+find the-'\\'-character.-in-the-new-list-of-3-strings,-take-the-string-in-the-3rd-position,+sting+that+contains+a+number+and eliminate the 't'\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    given a list of strings, split each string on the '\\' character. in the new list of 3 strings, take the string in the 3rd position, eliminate the 't' in it, convert it to a float, and add it to running total. output this total\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split('\\\\')\n        line = line[2]\n        line = line.replace('t', '')\n        line = float(line)\n        total += line\n    return total\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    given a list of strings, split each string by \\. find the sting that contains a number and\neliminate the 't' in it, convert it to a float, and add it to running total. output this total\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split('\\\\')\n        for item in line:\n            if item.isdigit():\n                item = item.replace('t', '')\n                total += float(item)\n    return total\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 4,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student78",
                "hover": "username:student78\nedge: (30->3)\ndiff:\n--- \n+++ \n@@ -11,6 +11,38 @@\n string by \\.+for+each+new+string,+if+it+starts+with+t,+eliminate+the+t.+next+find+the+sting+that+contains+a+number,+convert+it+to+a+float,+and+add+it+to+running+total. output this+total \"\"\"\n\nFROM completion:\ndef readingIceCream(lines):\n    \"\"\"\n    given a list of strings, split each string by \\. output this \n    \"\"\"\n        for line in lines:\n        print(line.split('\\\\'))\n\n\nTO completion:\ndef readingIceCream(lines):\n    \"\"\"\n    given a list of strings, split each string by \\. for each new string, if it starts with t, eliminate the t. next find the sting that contains a number, convert it to a float, and add it to running total. output this total\n    \"\"\"\n        total = 0\n    for line in lines:\n        line = line.split(\"\\\\\")\n        for i in line:\n            if i[0] == \"t\":\n                i = i[1:]\n            if i.isdigit():\n                total += float(i)\n    return total\n",
                "id": 3,
                "key": 0
            }
        ]
    ]
}