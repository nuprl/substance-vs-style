{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 5,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    wins = nominations[i][\"Wins\"]\nKeyError: 'Wins'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    wins = nominations[i][\"Wins\"]\nKeyError: 'Wins'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    wins = nominations[i][\"Wins\"]\nKeyError: 'Wins'\n",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 12,
            "stdout_id": 6,
            "hover": "stdout:\n[{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.6428571428571429}, {'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544}, {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}]\n\n[{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.2894736842105263}, {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.2682926829268293}, {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22448979591836735}]\n\n[{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544}, {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22448979591836735}]\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 1
        },
        {
            "stderr_id": 9,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    i[\"success\"] = i[\"wins\"] / i[\"nominations\"]\nKeyError: 'nominations'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    i[\"success\"] = i[\"wins\"] / i[\"nominations\"]\nKeyError: 'nominations'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    i[\"success\"] = i[\"wins\"] / i[\"nominations\"]\nKeyError: 'nominations'\n",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 13,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 11\n    sortBySuccessRate(nominations)\nIndentationError: expected an indented block after 'for' statement on line 8\n\n  File \"/tmp/file.py\", line 11\n    sortBySuccessRate(nominations)\nIndentationError: expected an indented block after 'for' statement on line 8\n\n  File \"/tmp/file.py\", line 11\n    sortBySuccessRate(nominations)\nIndentationError: expected an indented block after 'for' statement on line 8\n",
            "color": "red",
            "id": 3
        },
        {
            "stderr_id": 7,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 8\n    newList.append([nominations[i]['film'], nominations[i]['year'], nominations[i]['category'], nominations[i]['won'], nominations[i]['name'], nominations\n                   ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 8\n    newList.append([nominations[i]['film'], nominations[i]['year'], nominations[i]['category'], nominations[i]['won'], nominations[i]['name'], nominations\n                   ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 8\n    newList.append([nominations[i]['film'], nominations[i]['year'], nominations[i]['category'], nominations[i]['won'], nominations[i]['name'], nominations\n                   ^\nSyntaxError: '[' was never closed\n",
            "color": "grey",
            "id": 4
        },
        {
            "stderr_id": 16,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n  File \"/tmp/file.py\", line 7, in sortBySuccessRate\n    success = nominations[i]['wins']/nominations[i]['nominations']\nKeyError: 'nominations'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n  File \"/tmp/file.py\", line 7, in sortBySuccessRate\n    success = nominations[i]['wins']/nominations[i]['nominations']\nKeyError: 'nominations'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\n  File \"/tmp/file.py\", line 7, in sortBySuccessRate\n    success = nominations[i]['wins']/nominations[i]['nominations']\nKeyError: 'nominations'\n",
            "color": "blue",
            "id": 5
        },
        {
            "stderr_id": 11,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 8\n    newList.append([nominations[i]['film'], nominations[i]['year'], nominations[i]['category'], nominations[i]['nominees'], nominations[i]['wins\n                                                                                                                                           ^\nSyntaxError: unterminated string literal (detected at line 8)\n\n  File \"/tmp/file.py\", line 8\n    newList.append([nominations[i]['film'], nominations[i]['year'], nominations[i]['category'], nominations[i]['nominees'], nominations[i]['wins\n                                                                                                                                           ^\nSyntaxError: unterminated string literal (detected at line 8)\n\n  File \"/tmp/file.py\", line 8\n    newList.append([nominations[i]['film'], nominations[i]['year'], nominations[i]['category'], nominations[i]['nominees'], nominations[i]['wins\n                                                                                                                                           ^\nSyntaxError: unterminated string literal (detected at line 8)\n",
            "color": "blue",
            "id": 6
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 8\n    newList.append({'actor':nominations[i]['actor'], 'film':nominations[i]['film'], 'category':nominations[i]['category'], 'year':\n                   ^\nSyntaxError: '{' was never closed\n\n  File \"/tmp/file.py\", line 8\n    newList.append({'actor':nominations[i]['actor'], 'film':nominations[i]['film'], 'category':nominations[i]['category'], 'year':\n                   ^\nSyntaxError: '{' was never closed\n\n  File \"/tmp/file.py\", line 8\n    newList.append({'actor':nominations[i]['actor'], 'film':nominations[i]['film'], 'category':nominations[i]['category'], 'year':\n                   ^\nSyntaxError: '{' was never closed\n",
            "color": "red",
            "id": 7
        },
        {
            "stderr_id": 17,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n  File \"/tmp/file.py\", line 7, in sortBySuccessRate\n    success.append(nominations[i][1]/nominations[i][2])\nKeyError: 1\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n  File \"/tmp/file.py\", line 7, in sortBySuccessRate\n    success.append(nominations[i][1]/nominations[i][2])\nKeyError: 1\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\n  File \"/tmp/file.py\", line 7, in sortBySuccessRate\n    success.append(nominations[i][1]/nominations[i][2])\nKeyError: 1\n",
            "color": "grey",
            "id": 8
        },
        {
            "stderr_id": 12,
            "stdout_id": 5,
            "hover": "stdout:\n[{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, {'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'success': 0.35}]\n\n[{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29}, {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27}, {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\n\n[{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'success': 0.35}, {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 9
        },
        {
            "stderr_id": 15,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    sortBySuccessRate(nominations)\nNameError: name 'nominations' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    sortBySuccessRate(nominations)\nNameError: name 'nominations' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    sortBySuccessRate(nominations)\nNameError: name 'nominations' is not defined\n",
            "color": "red",
            "id": 10
        },
        {
            "stderr_id": 3,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    nom[\"success\"] = nom[\"wins\"] / nom[\"nominations\"]\nKeyError: 'nominations'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    nom[\"success\"] = nom[\"wins\"] / nom[\"nominations\"]\nKeyError: 'nominations'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    nom[\"success\"] = nom[\"wins\"] / nom[\"nominations\"]\nKeyError: 'nominations'\n",
            "color": "grey",
            "id": 11
        },
        {
            "stderr_id": 4,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    nominations[key][\"success\"] = nominations[key][\"wins\"] / nominations[key][\"nominations\"]\nTypeError: list indices must be integers or slices, not dict\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    nominations[key][\"success\"] = nominations[key][\"wins\"] / nominations[key][\"nominations\"]\nTypeError: list indices must be integers or slices, not dict\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 8, in <module>\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    nominations[key][\"success\"] = nominations[key][\"wins\"] / nominations[key][\"nominations\"]\nTypeError: list indices must be integers or slices, not dict\n",
            "color": "blue",
            "id": 12
        },
        {
            "stderr_id": 18,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n  File \"/tmp/file.py\", line 7, in sortBySuccessRate\n    losses = nominee[\"losses\"]\nKeyError: 'losses'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n  File \"/tmp/file.py\", line 7, in sortBySuccessRate\n    losses = nominee[\"losses\"]\nKeyError: 'losses'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\n  File \"/tmp/file.py\", line 7, in sortBySuccessRate\n    losses = nominee[\"losses\"]\nKeyError: 'losses'\n",
            "color": "red",
            "id": 13
        },
        {
            "stderr_id": 1,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n  File \"/tmp/file.py\", line 5, in sortBySuccessRate\n    return sorted(nominations, key=lambda x: x['successRate'], reverse=True)\n  File \"/tmp/file.py\", line 5, in <lambda>\n    return sorted(nominations, key=lambda x: x['successRate'], reverse=True)\nKeyError: 'successRate'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n  File \"/tmp/file.py\", line 5, in sortBySuccessRate\n    return sorted(nominations, key=lambda x: x['successRate'], reverse=True)\n  File \"/tmp/file.py\", line 5, in <lambda>\n    return sorted(nominations, key=lambda x: x['successRate'], reverse=True)\nKeyError: 'successRate'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\n  File \"/tmp/file.py\", line 5, in sortBySuccessRate\n    return sorted(nominations, key=lambda x: x['successRate'], reverse=True)\n  File \"/tmp/file.py\", line 5, in <lambda>\n    return sorted(nominations, key=lambda x: x['successRate'], reverse=True)\nKeyError: 'successRate'\n",
            "color": "red",
            "id": 14
        },
        {
            "stderr_id": 12,
            "stdout_id": 1,
            "hover": "stdout:\n[{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'successRate': 0.35}, {'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'successRate': 0.35443037974683544}, {'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'successRate': 0.6428571428571429}]\n\n[{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'successRate': 0.22448979591836735}, {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'successRate': 0.2682926829268293}, {'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'successRate': 0.2894736842105263}]\n\n[{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'successRate': 0.35443037974683544}, {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'successRate': 0.22448979591836735}]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 15
        },
        {
            "stderr_id": 12,
            "stdout_id": 8,
            "hover": "stdout:\n[{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'successRate': 35.0}, {'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'successRate': 35.44}, {'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'successRate': 64.29}]\n\n[{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'successRate': 22.45}, {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'successRate': 26.83}, {'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'successRate': 28.95}]\n\n[{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'successRate': 35.44}, {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'successRate': 22.45}]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 16
        },
        {
            "stderr_id": 12,
            "stdout_id": 0,
            "hover": "stdout:\n[{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, {'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'success': 0.35}, {'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}]\n\n[{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}, {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27}, {'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29}]\n\n[{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'success': 0.35}, {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 17
        },
        {
            "stderr_id": 19,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    for key, value in nominations.items():\nAttributeError: 'list' object has no attribute 'items'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    for key, value in nominations.items():\nAttributeError: 'list' object has no attribute 'items'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    for key, value in nominations.items():\nAttributeError: 'list' object has no attribute 'items'\n",
            "color": "grey",
            "id": 18
        },
        {
            "stderr_id": 12,
            "stdout_id": 7,
            "hover": "stdout:\n[{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, {'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544}, {'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.6428571428571429}]\n\n[{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22448979591836735}, {'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.2682926829268293}, {'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.2894736842105263}]\n\n[{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544}, {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22448979591836735}]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 19
        },
        {
            "stderr_id": 10,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 11\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \nIndentationError: expected an indented block after 'for' statement on line 10\n\n  File \"/tmp/file.py\", line 11\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\nIndentationError: expected an indented block after 'for' statement on line 10\n\n  File \"/tmp/file.py\", line 11\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\nIndentationError: expected an indented block after 'for' statement on line 10\n",
            "color": "grey",
            "id": 20
        },
        {
            "stderr_id": 12,
            "stdout_id": 4,
            "hover": "stdout:\n[{'nominee': 'Krauss', 'wins': 27, 'noms': 42}, {'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79}, {'nominee': 'Jones', 'wins': 28, 'noms': 80}]\n\n[{'nominee': 'Thomas', 'wins': 11, 'noms': 38}, {'nominee': 'Swift', 'wins': 11, 'noms': 41}, {'nominee': 'Babyface', 'wins': 11, 'noms': 49}]\n\n[{'nominee': 'Babyface', 'wins': 11, 'noms': 49}, {'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79}]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 21
        },
        {
            "stderr_id": 2,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 13\n    sortBySuccessRate(nominations)\nIndentationError: expected an indented block after 'for' statement on line 10\n\n  File \"/tmp/file.py\", line 13\n    sortBySuccessRate(nominations)\nIndentationError: expected an indented block after 'for' statement on line 10\n\n  File \"/tmp/file.py\", line 13\n    sortBySuccessRate(nominations)\nIndentationError: expected an indented block after 'for' statement on line 10\n",
            "color": "red",
            "id": 22
        },
        {
            "stderr_id": 14,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 15\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \nIndentationError: expected an indented block after 'for' statement on line 14\n\n  File \"/tmp/file.py\", line 15\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\nIndentationError: expected an indented block after 'for' statement on line 14\n\n  File \"/tmp/file.py\", line 15\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\nIndentationError: expected an indented block after 'for' statement on line 14\n",
            "color": "blue",
            "id": 23
        },
        {
            "stderr_id": 12,
            "stdout_id": 2,
            "hover": "stdout:\nNone\n\nNone\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 24
        },
        {
            "stderr_id": 6,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    noms = i[\"nominations\"]\nKeyError: 'nominations'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    noms = i[\"nominations\"]\nKeyError: 'nominations'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\n  File \"/tmp/file.py\", line 6, in sortBySuccessRate\n    noms = i[\"nominations\"]\nKeyError: 'nominations'\n",
            "color": "grey",
            "id": 25
        },
        {
            "stderr_id": 8,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 9\n    print(sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \nIndentationError: expected an indented block after 'for' statement on line 8\n\n  File \"/tmp/file.py\", line 9\n    print(sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\nIndentationError: expected an indented block after 'for' statement on line 8\n\n  File \"/tmp/file.py\", line 9\n    print(sortBySuccessRate([{'nominee': 'Beyonc\u00c3\u00a9', 'wins': 28, 'noms': 79},\nIndentationError: expected an indented block after 'for' statement on line 8\n",
            "color": "red",
            "id": 26
        }
    ],
    "adjacency": [
        [
            {
                "diff": 18,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student23",
                "hover": "username:student23\n\ndiff:\n--- \n+++ \n@@ -55,5 +55,8 @@\n by the highest-success.+success+within+each+dictionary. \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a list of dictionaries that have the nominee, the amount of wins, and the amount of noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success.\n    \"\"\"\n        for i in range(len(nominations)):\n        wins = nominations[i][\"Wins\"]\n        noms = nominations[i][\"Nominations\"]\n        success = wins/noms\n        nominations[i][\"Success\"] = success\n    nominations.sort(key = lambda x: x[\"Success\"], reverse = True)\n    return nominations\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a list of dictionaries that have the nominee, the amount of wins, and the amount of noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success within each dictionary.\n    \"\"\"\n        for i in range(len(nominations)):\n        wins = nominations[i][\"Wins\"]\n        noms = nominations[i][\"Nominations\"]\n        success = wins / noms\n        nominations[i][\"Success\"] = success\n    nominations.sort(key=lambda x: x[\"Success\"], reverse=True)\n    return nominations\n",
                "id": 0,
                "key": 0
            },
            {
                "diff": 4,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student23",
                "hover": "username:student23\n\ndiff:\n--- \n+++ \n@@ -12,15 +12,11 @@\n that have the+keys: nominee, the-amount-of wins, and-the-amount-of noms. A new\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a list of dictionaries that have the nominee, the amount of wins, and the amount of noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success within each dictionary.\n    \"\"\"\n        for i in range(len(nominations)):\n        wins = nominations[i][\"Wins\"]\n        noms = nominations[i][\"Nominations\"]\n        success = wins / noms\n        nominations[i][\"Success\"] = success\n    nominations.sort(key=lambda x: x[\"Success\"], reverse=True)\n    return nominations\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a list of dictionaries that have the keys:  nominee, the wins, and noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success within each dictionary.\n    \"\"\"\n        for i in nominations:\n        i[\"success\"] = i[\"wins\"] / i[\"noms\"]\n    return sorted(nominations, key=lambda x: x[\"success\"], reverse=True)\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student33",
                "hover": "username:student33\n\ndiff:\n--- \n+++ \n@@ -39,7 +39,12 @@\n with the output-value.+value+truncated+to+two+decimal+places. It then sorts@@ -53,5 +58,13 @@\n \"success,\" highest to-lowest.+lowest,+returning+the+dictionaries+each+on+a+separate+line. \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries. The function divides the value for \"wins\" in the dictionary by the value for \"noms\" in the dictionary, adding a new entry to that dictionary called \"success\" with the output value. It then sorts the dictionary entries by the value in \"success,\" highest to lowest. \n    \"\"\"\n        for i in nominations:\n        i[\"success\"] = i[\"wins\"] / i[\"noms\"]\n    return sorted(nominations, key=lambda x: x[\"success\"], reverse=True)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries. The function divides the value for \"wins\" in the dictionary by the value for \"noms\" in the dictionary, adding a new entry to that dictionary called \"success\" with the output value truncated to two decimal places. It then sorts the dictionary entries by the value in \"success,\" highest to lowest, returning the dictionaries each on a separate line. \n    \"\"\"\n        for i in nominations:\n        i[\"success\"] = round(i[\"wins\"] / i[\"noms\"], 2)\n    sortedList = sorted(nominations, key=lambda i: i[\"success\"], reverse=True)\n    for i in sortedList:\n        print(i)\n\nsortBySuccessRate(nominations)\n",
                "id": 3,
                "key": 0
            },
            {
                "diff": 24,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student40",
                "hover": "username:student40\n\ndiff:\n--- \n+++ \n@@ -23,6 +23,15 @@\n within key 'noms'.+this+number+will+be+rounded+to+two+decimal+values. the new number\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    the input is a list of dictionaries. the function will divide the value within key 'wins' by the value within key 'noms'. the new number will be stores as a new key, 'success'. the function will then return a list that reorders the dictionaries within the original list, in order of highest success value to lowest success value.\n    \"\"\"\n        for i in nominations:\n        i['success'] = i['wins']/i['noms']\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    the input is a list of dictionaries. the function will divide the value within key 'wins' by the value within key 'noms'. this number will be rounded to two decimal values. the new number will be stores as a new key, 'success'. the function will then return a list that reorders the dictionaries within the original list, in order of highest success value to lowest success value.\n    \"\"\"\n        for i in nominations:\n        i['success'] = round(i['wins'] / i['noms'], 2)\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n",
                "id": 9,
                "key": 0
            },
            {
                "diff": 8,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student63",
                "hover": "username:student63\n\ndiff:\n--- \n+++ \n@@ -46,7 +46,13 @@\n of the key-'noms'.+'noms',+rounded+to+the+second+decimal+place. The outputted list\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms'. The outputted list will also be arranged in descending order based on the value of 'success'.\n    \"\"\"\n        for i in range(len(nominations)):\n        nominations[i]['success'] = nominations[i]['wins'] / nominations[i]['noms']\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms', rounded to the second decimal place. The outputted list will also be arranged in descending order based on the value of 'success'.  \n    \"\"\"\n        for i in range(len(nominations)):\n        nominations[i]['success'] = round(nominations[i]['wins'] / nominations[i]['noms'], 2)\n    return sorted(nominations, key = lambda x: x['success'], reverse = True)\n",
                "id": 9,
                "key": 1
            },
            {
                "diff": 14,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student64",
                "hover": "username:student64\n\ndiff:\n--- \n+++ \n@@ -29,6 +29,13 @@\n divided by 'noms.'+Round+success+to+nearest+2+decimal+places. Sort by success\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    For each dictionary in list, create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Sort by success in descending order.\n    \"\"\"\n        for nom in nominations:\n        nom['success'] = nom['wins'] / nom['noms']\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    For each dictionary in list, create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Round success to nearest 2 decimal places. Sort by success in descending order. \n    \"\"\"\n        for dictionary in nominations:\n        wins = dictionary['wins']\n        noms = dictionary['noms']\n        success = round(wins / noms, 2)\n        dictionary['success'] = success\n    sorted_nominations = sorted(nominations, key=lambda x: x['success'], reverse=True)\n    return sorted_nominations\n",
                "id": 9,
                "key": 2
            },
            {
                "diff": 15,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student79",
                "hover": "username:student79\n\ndiff:\n--- \n+++ \n@@ -50,4 +50,20 @@\n to decreasing success.+use+two+decimal+places+for+the+success+rate+and+use+different+lines+to+put+each+dictionary \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by the value of noms. you are then going to sort the dictionary according to decreasing success.\n    \"\"\"\n        for i in nominations:\n        i[\"success\"] = i[\"wins\"]/i[\"noms\"]\n    return sorted(nominations, key = lambda x: x[\"success\"], reverse = True)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by the value of noms. you are then going to sort the dictionary according to decreasing success. use two decimal places for the success rate and use different lines to put each dictionary\n    \"\"\"\n        for nomination in nominations:\n        nomination[\"success\"] = nomination[\"wins\"] / nomination[\"noms\"]\n    nominations.sort(key=lambda x: x[\"success\"], reverse=True)\n    for nomination in nominations:\n        print(nomination)\n",
                "id": 26,
                "key": 0
            }
        ],
        [
            {
                "diff": 2,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student33",
                "hover": "username:student33\n\ndiff:\n--- \n+++ \n@@ -13,21 +13,17 @@\n function divides the-integer-in-the-third-place+value+for+\"wins\" in the dictionary by the-integer-in-the-fourth-place+value+for+\"noms\" in the dictionary,\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries. The function divides the integer in the third place in the dictionary by the integer in the fourth place in the dictionary, adding a new entry to that dictionary called \"success\" with the output value. It then sorts the dictionary entries by the value in \"success,\" highest to lowest. \n    \"\"\"\n        for i in nominations:\n        i[\"success\"] = i[\"wins\"] / i[\"nominations\"]\n    return sorted(nominations, key=lambda x: x[\"success\"], reverse=True)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries. The function divides the value for \"wins\" in the dictionary by the value for \"noms\" in the dictionary, adding a new entry to that dictionary called \"success\" with the output value. It then sorts the dictionary entries by the value in \"success,\" highest to lowest. \n    \"\"\"\n        for i in nominations:\n        i[\"success\"] = i[\"wins\"] / i[\"noms\"]\n    return sorted(nominations, key=lambda x: x[\"success\"], reverse=True)\n",
                "id": 1,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 20,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student35",
                "hover": "username:student35\n\ndiff:\n--- \n+++ \n@@ -14,7 +14,11 @@\n through the dictioanries-backwards.+backwards+using+a+for+loop. A new variable@@ -23,7 +27,14 @@\n created which computes-(wins/noms).+(wins/noms)+during+each+loop+run+for+every+dictionary. A new list\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a list of dictionaries. The function iterates through the dictioanries backwards. A new variable 'success' is created which computes (wins/noms). A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.\n    \"\"\"\n        newList = []\n    for i in range(len(nominations)-1, -1, -1):\n        success = nominations[i]['wins']/nominations[i]['nominations']\n        newList.append([nominations[i]['film'], nominations[i]['year'], nominations[i]['category'], nominations[i]['won'], nominations[i]['name'], nominations\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a list of dictionaries. The function iterates through the dictioanries backwards using a for loop. A new variable 'success' is created which computes (wins/noms) during each loop run for every dictionary. A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.\n    \"\"\"\n        newList = []\n    for i in range(len(nominations)-1, -1, -1):\n        success = nominations[i]['wins']/nominations[i]['nominations']\n        newList.append(nominations[i])\n        newList[len(newList)-1]['success'] = success\n    return newList\n",
                "id": 5,
                "key": 0
            }
        ],
        [
            {
                "diff": 0,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student35",
                "hover": "username:student35\n\ndiff:\n\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a list of dictionaries. The function iterates through the dictioanries backwards using a for loop. A new variable 'success' is created which computes (wins/noms) during each loop run for every dictionary. A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.\n    \"\"\"\n        newList = []\n    for i in range(len(nominations)-1, -1, -1):\n        success = nominations[i]['wins']/nominations[i]['nominations']\n        newList.append(nominations[i])\n        newList[len(newList)-1]['success'] = success\n    return newList\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a list of dictionaries. The function iterates through the dictioanries backwards using a for loop. A new variable 'success' is created which computes (wins/noms) during each loop run for every dictionary. A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.\n    \"\"\"\n        newList = []\n    for i in range(len(nominations)-1, -1, -1):\n        success = nominations[i]['wins']/nominations[i]['nominations']\n        newList.append([nominations[i]['film'], nominations[i]['year'], nominations[i]['category'], nominations[i]['nominees'], nominations[i]['wins",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 11,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student35",
                "hover": "username:student35\n\ndiff:\n--- \n+++ \n@@ -28,6 +28,13 @@\n which computes (wins/noms)+(noms+is+the+key+in+the+dictionary) during each loop\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a list of dictionaries. The function iterates through the dictioanries backwards using a for loop. A new variable 'success' is created which computes (wins/noms) during each loop run for every dictionary. A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.\n    \"\"\"\n        newList = []\n    for i in range(len(nominations)-1, -1, -1):\n        success = nominations[i]['wins']/nominations[i]['nominations']\n        newList.append([nominations[i]['film'], nominations[i]['year'], nominations[i]['category'], nominations[i]['nominees'], nominations[i]['wins\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a list of dictionaries. The function iterates through the dictioanries backwards using a for loop. A new variable 'success' is created which computes (wins/noms) (noms is the key in the dictionary) during each loop run for every dictionary. A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.\n    \"\"\"\n        newList = []\n    for i in range(len(nominations)-1,-1,-1):\n        success = (nominations[i]['wins']/nominations[i]['noms'])\n        newList.append({'actor':nominations[i]['actor'], 'film':nominations[i]['film'], 'category':nominations[i]['category'], 'year':",
                "id": 7,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 17,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student40",
                "hover": "username:student40\n\ndiff:\n--- \n+++ \n@@ -1,27 +1,38 @@\n def sortBySuccessRate(nominations): \"\"\"+the+input+is+a+list+of+dictionaries. the function will divide the-number-of-wins+value+within+key+'wins' by the+value+within+key+'noms'.+the+new number-of-noms.-this will be-defined-by-the+stores+as+a new-variable+key, 'success'. the function@@ -31,13 +42,21 @@\n a list that-orders+reorders the-input+dictionaries+within+the+original+list, in-increasing order of+highest success-values+value+to+lowest+success+value. \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    the function will divide the number of wins by the number of noms. this will be defined by the new variable 'success'. the function will then return a list that orders the input in increasing order of success values\n    \"\"\"\n        success = []\n    for i in range(len(nominations)):\n        success.append(nominations[i][1]/nominations[i][2])\n    return [x for _,x in sorted(zip(success,nominations))]\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    the input is a list of dictionaries. the function will divide the value within key 'wins' by the value within key 'noms'. the new number will be stores as a new key, 'success'. the function will then return a list that reorders the dictionaries within the original list, in order of highest success value to lowest success value.\n    \"\"\"\n        for i in nominations:\n        i['success'] = i['wins']/i['noms']\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n",
                "id": 1,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 6,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student44",
                "hover": "username:student44\n\ndiff:\n--- \n+++ \n@@ -34,7 +34,7 @@\n the value of-'sucess'+'success' and print the\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    For every dictionary in the array,\ncalculate the 'success' by dividing the value of wins by noms and add it into the dictionary. \nSort the array in descending order of the value of 'sucess' and print the array. \n    \"\"\"\n        for i in nominations:\n        i['success'] = i['wins'] / i['nominations']\n    nominations.sort(key=lambda x: x['success'], reverse=True)\n    print(nominations)\n\nsortBySuccessRate(nominations)\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    For every dictionary in the array,\ncalculate the 'success' by dividing the value of wins by noms and add it into the dictionary. \nSort the array in descending order of the value of 'success' and print the array. \n    \"\"\"\n        for i in nominations:\n        i['success'] = i['wins'] / i['nominations']\n    nominations.sort(key=lambda x: x['success'], reverse=True)\n    print(nominations)\n\nsortBySuccessRate(nominations)",
                "id": 10,
                "key": 0
            }
        ],
        [
            {
                "diff": 22,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student50",
                "hover": "username:student50\n\ndiff:\n--- \n+++ \n@@ -10,9 +10,7 @@\n element in the-list-of-dictionaries+dictionary called \"success\". Calculate\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    Add a new part to each element in the list of dictionaries called \"success\". Calculate success by dividing wins by noms. Return in reverse alphabetical order.\n    \"\"\"\n        for nom in nominations:\n        nom[\"success\"] = nom[\"wins\"] / nom[\"nominations\"]\n    return sorted(nominations, key=lambda k: k[\"success\"], reverse=True)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    Add a new part to each element in the dictionary called \"success\". Calculate success by dividing wins by noms. Return in reverse alphabetical order.\n    \"\"\"\n        for key in nominations:\n        nominations[key][\"success\"] = nominations[key][\"wins\"] / nominations[key][\"nominations\"]\n    return sorted(nominations.items(), key = lambda x: x[0], reverse = True)\n",
                "id": 12,
                "key": 0
            },
            {
                "diff": 28,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student79",
                "hover": "username:student79\n\ndiff:\n--- \n+++ \n@@ -34,6 +34,9 @@\n wins divided by+the+value+of noms. you are\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by noms. you are then going to sort the dictionary according to decreasing success.\n    \"\"\"\n        for nom in nominations:\n        nom[\"success\"] = nom[\"wins\"] / nom[\"nominations\"]\n    return sorted(nominations, key=lambda x: x[\"success\"], reverse=True)\n\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by the value of noms. you are then going to sort the dictionary according to decreasing success.\n    \"\"\"\n        for i in nominations:\n        i[\"success\"] = i[\"wins\"]/i[\"noms\"]\n    return sorted(nominations, key = lambda x: x[\"success\"], reverse = True)\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 3,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student50",
                "hover": "username:student50\n\ndiff:\n--- \n+++ \n@@ -4,12 +4,10 @@\n Add a new-part+element to each-element-in-the+nominee's dictionary called \"success\".@@ -17,12 +15,17 @@\n success by dividing+the+number+of wins by-noms.+the+number+of+losses. Return in reverse-alphabetical order. \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    Add a new part to each element in the dictionary called \"success\". Calculate success by dividing wins by noms. Return in reverse alphabetical order.\n    \"\"\"\n        for key in nominations:\n        nominations[key][\"success\"] = nominations[key][\"wins\"] / nominations[key][\"nominations\"]\n    return sorted(nominations.items(), key = lambda x: x[0], reverse = True)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    Add a new element to each nominee's dictionary called \"success\". Calculate success by dividing the number of wins by the number of losses. Return in reverse order.\n    \"\"\"\n        for nominee in nominations:\n        wins = nominee[\"wins\"]\n        losses = nominee[\"losses\"]\n        success = wins / losses\n        nominee[\"success\"] = success\n    return sorted(nominations, key=lambda x: x[\"success\"], reverse=True)\n",
                "id": 13,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 19,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student59",
                "hover": "username:student59\n\ndiff:\n--- \n+++ \n@@ -19,4 +19,8 @@\n in the input+for+the+key+'nominee' \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    takes a list of dictionaries as an input. returns an ordered list of the dictionaries in the input\n    \"\"\"\n        return sorted(nominations, key=lambda x: x['successRate'], reverse=True)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    takes a list of dictionaries as an input. returns an ordered list of the dictionaries in the input for the key 'nominee'\n    \"\"\"\n        return sorted(nominations, key=lambda x: x['successRate'], reverse=True)\n",
                "id": 14,
                "key": 0
            }
        ],
        [
            {
                "diff": 27,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student60",
                "hover": "username:student60\n\ndiff:\n--- \n+++ \n@@ -70,4 +70,21 @@\n wins to nominations.+This+function+rounds+every+decimal+to+2+decimal+places.+This+functions+output+is+a+single+2d+list. \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. \n    \"\"\"\n        for i in range(len(nominations)):\n        wins = nominations[i]['wins']\n        noms = nominations[i]['noms']\n        nominations[i]['successRate'] = wins / noms\n    return nominations\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions output is a single 2d list. \n    \"\"\"\n        for i in range(len(nominations)):\n        nominations[i]['successRate'] = round((nominations[i]['wins']/nominations[i]['noms'])*100, 2)\n    return nominations\n",
                "id": 16,
                "key": 0
            }
        ],
        [
            {
                "diff": 25,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student60",
                "hover": "username:student60\n\ndiff:\n--- \n+++ \n@@ -87,4 +87,49 @@\n single 2d list.+As+an+example.+Given+[{'nominee':+'Beyonc\u00e9',+'wins':+28,+'noms':+79},+{'nominee':+'Babyface','wins':+11,+'noms':+49}]+as+a+parameter+this+function+outputs+[{'nominee':+'Thomas',+'wins':+11,+'noms':+38,+'success':+0.29},+{'nominee':+'Swift',+'wins':+11,+'noms':+41,+'success':+0.27},+{'nominee':+'Babyface',+'wins':+11,+'noms':+49,+'success':+0.22}] \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions output is a single 2d list. \n    \"\"\"\n        for i in range(len(nominations)):\n        nominations[i]['successRate'] = round((nominations[i]['wins']/nominations[i]['noms'])*100, 2)\n    return nominations\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions output is a single 2d list.\n\nAs an example. Given  [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}] as a parameter this function outputs [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\n    \"\"\"\n        for i in range(len(nominations)):\n        nominations[i]['success'] = round(nominations[i]['wins'] / nominations[i]['noms'], 2)\n    return nominations\n",
                "id": 17,
                "key": 0
            }
        ],
        [
            {
                "diff": 21,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student69",
                "hover": "username:student69\n\ndiff:\n--- \n+++ \n@@ -49,4 +49,20 @@\n 2 decimal places.+Sort+each+dictionary+in+the+list+alphabetically+based+on+the+'nominee'+key.+then+reverse+the+order. \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list, rounded to 2 decimal places.\n    \"\"\"\n        for i in nominations:\n        i['success'] = round(i['wins'] / i['noms'], 2)\n    return nominations\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list, rounded to 2 decimal places. Sort each dictionary in the list alphabetically based on the 'nominee' key. then reverse the order.\n    \"\"\"\n        for i in nominations:\n        i['success'] = round(i['wins']/i['noms'], 2)\n    return sorted(nominations, key=lambda x: x['nominee'])[::-1]\n\nprint(sortBySuccessRate(nominations))\n",
                "id": 9,
                "key": 0
            }
        ],
        [
            {
                "diff": 7,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student64",
                "hover": "username:student64\n\ndiff:\n--- \n+++ \n@@ -1,7 +1,12 @@\n def sortBySuccessRate(nominations): \"\"\"-Create+For+each+dictionary+in+list,+create a new dictionary\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    Create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Sort by success in descending order.\n    \"\"\"\n        newDict = {}\n    for key, value in nominations.items():\n        newDict[key] = value\n        newDict[key]['success'] = value['wins'] / value['noms']\n    sortedDict = sorted(newDict.items(), key=lambda x: x[1]['success'], reverse=True)\n    return sortedDict\n\nprint(sortBySuccessRate(nominations))\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    For each dictionary in list, create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Sort by success in descending order.\n    \"\"\"\n        for nom in nominations:\n        nom['success'] = nom['wins'] / nom['noms']\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 23,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student69",
                "hover": "username:student69\n\ndiff:\n--- \n+++ \n@@ -43,5 +43,10 @@\n dictionary in the-list.+list,+rounded+to+2+decimal+places. \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list.\n    \"\"\"\n        for i in nominations:\n        i['success'] = i['wins'] / i['noms']\n    return nominations\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list, rounded to 2 decimal places.\n    \"\"\"\n        for i in nominations:\n        i['success'] = round(i['wins'] / i['noms'], 2)\n    return nominations\n",
                "id": 17,
                "key": 0
            }
        ],
        [
            {
                "diff": 5,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student75",
                "hover": "username:student75\n\ndiff:\n--- \n+++ \n@@ -42,9 +42,5 @@\n least amount of-'noms',-indent-after-each-{}+'noms' \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', indent after each {}\n    \"\"\"\n        sortedNominations = sorted(nominations, key=lambda k: (k['wins'], k['noms']))\n    for i in sortedNominations:\n        print(i)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms'\n    \"\"\"\n        # sort by wins\n    sortedNominations = sorted(nominations, key=lambda k: k['wins'])\n    # sort by noms\n    sortedNominations = sorted(sortedNominations, key=lambda k: k['noms'])\n    return sortedNominations\n",
                "id": 21,
                "key": 0
            }
        ],
        [
            {
                "diff": 12,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student75",
                "hover": "username:student75\n\ndiff:\n--- \n+++ \n@@ -42,5 +42,9 @@\n least amount of+'noms',+indent+after+each 'noms' \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms'\n    \"\"\"\n        # sort by wins\n    sortedNominations = sorted(nominations, key=lambda k: k['wins'])\n    # sort by noms\n    sortedNominations = sorted(sortedNominations, key=lambda k: k['noms'])\n    return sortedNominations\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', indent after each 'noms'\n    \"\"\"\n        sortedNominations = sorted(nominations, key=lambda x: (x['wins'], x['noms']))\n    for i in sortedNominations:\n        print(i)\n\nsortBySuccessRate(nominations)\n",
                "id": 22,
                "key": 0
            }
        ],
        [
            {
                "diff": 16,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student75",
                "hover": "username:student75\n\ndiff:\n--- \n+++ \n@@ -43,8 +43,11 @@\n amount of 'noms',-indent-after+print each-'noms'+'nominee'+on+its+own+line \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', indent after each 'noms'\n    \"\"\"\n        sortedNominations = sorted(nominations, key=lambda x: (x['wins'], x['noms']))\n    for i in sortedNominations:\n        print(i)\n\nsortBySuccessRate(nominations)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', print each 'nominee' on its own line\n    \"\"\"\n        # sort by wins\n    sorted_nominations = sorted(nominations, key=lambda k: k['wins'])\n    # sort by noms\n    sorted_nominations = sorted(sorted_nominations, key=lambda k: k['noms'])\n    # print each nominee on its own line\n    for nominee in sorted_nominations:\n        print(nominee['nominee'])\n",
                "id": 23,
                "key": 0
            },
            {
                "diff": 13,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student75",
                "hover": "username:student75\n\ndiff:\n--- \n+++ \n@@ -42,5 +42,5 @@\n least amount of-'noms'.+'noms', \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms'.\n    \"\"\"\n        sortedNominations = sorted(nominations, key=lambda x: (x['wins'], x['noms']))\n    for i in sortedNominations:\n        print(i)\n\nsortBySuccessRate(nominations)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', \n    \"\"\"\n        sortedNominations = sorted(nominations, key=lambda k: (k['wins'], k['noms']))\n    for i in sortedNominations:\n        print(i)\n\nsortBySuccessRate(nominations)",
                "id": 22,
                "key": 0
            }
        ],
        [
            {
                "diff": 26,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student75",
                "hover": "username:student75\n\ndiff:\n--- \n+++ \n@@ -42,12 +42,5 @@\n least amount of-'noms',-print-each-'nominee'-on-its-own-line+'noms' \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', print each 'nominee' on its own line\n    \"\"\"\n        # sort by wins\n    sorted_nominations = sorted(nominations, key=lambda k: k['wins'])\n    # sort by noms\n    sorted_nominations = sorted(sorted_nominations, key=lambda k: k['noms'])\n    # print each nominee on its own line\n    for nominee in sorted_nominations:\n        print(nominee['nominee'])\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms'\n    \"\"\"\n        print(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\",
                "id": 24,
                "key": 0
            }
        ],
        [
            {
                "diff": 10,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student75",
                "hover": "username:student75\n\ndiff:\n--- \n+++ \n@@ -42,5 +42,5 @@\n least amount of-'noms'+'noms'. \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms'\n    \"\"\"\n        print(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms'.\n    \"\"\"\n        sortedNominations = sorted(nominations, key=lambda x: (x['wins'], x['noms']))\n    for i in sortedNominations:\n        print(i)\n\nsortBySuccessRate(nominations)\n",
                "id": 22,
                "key": 0
            }
        ],
        [
            {
                "diff": 0,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student79",
                "hover": "username:student79\n\ndiff:\n\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by noms. you are then going to sort the dictionary according to decreasing success.\n    \"\"\"\n        for i in nominations:\n        noms = i[\"nominations\"]\n        wins = i[\"wins\"]\n        i[\"success\"] = wins/noms\n    return sorted(nominations, key=lambda x: x[\"success\"], reverse=True)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by noms. you are then going to sort the dictionary according to decreasing success.\n    \"\"\"\n        for nom in nominations:\n        nom[\"success\"] = nom[\"wins\"] / nom[\"nominations\"]\n    return sorted(nominations, key=lambda x: x[\"success\"], reverse=True)\n\n",
                "id": 11,
                "key": 0
            }
        ],
        [
            {
                "diff": 9,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student79",
                "hover": "username:student79\n\ndiff:\n--- \n+++ \n@@ -57,13 +57,12 @@\n for the success-rate and-use-different-lines-to put each dictionary+on+a+separate+line. \"\"\"\n\nFROM completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by the value of noms. you are then going to sort the dictionary according to decreasing success. use two decimal places for the success rate and use different lines to put each dictionary\n    \"\"\"\n        for nomination in nominations:\n        nomination[\"success\"] = nomination[\"wins\"] / nomination[\"noms\"]\n    nominations.sort(key=lambda x: x[\"success\"], reverse=True)\n    for nomination in nominations:\n        print(nomination)\n\n\nTO completion:\ndef sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by the value of noms. you are then going to sort the dictionary according to decreasing success. use two decimal places for the success and put each dictionary on a separate line.\n    \"\"\"\n        for i in nominations:\n        i['success'] = round(i['wins']/i['noms'],2)\n    nominations.sort(key=lambda x: x['success'], reverse=True)\n    for i in nominations:\n        print(i)\n",
                "id": 26,
                "key": 0
            }
        ]
    ]
}