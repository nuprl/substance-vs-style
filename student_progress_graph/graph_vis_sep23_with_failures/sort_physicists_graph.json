{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 7,
            "hover": "stdout:\n_no_stdout_\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 0
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n['Peiris', 'Ghez', 'Strickland']\n\n['Peiris', 'Ghez', 'Strickland']\n\n['Ghez']\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 1
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\n['Ghez', 'Peiris', 'Strickland']\n\n['Ghez', 'Peiris', 'Strickland']\n\n['Ghez']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 5,
            "stdout_id": 1,
            "hover": "stdout:\n\n\nNone\n\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 12, in sort_physicists\n    del output_\nUnboundLocalError: local variable 'output_' referenced before assignment\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 12, in sort_physicists\n    del output_\nUnboundLocalError: local variable 'output_' referenced before assignment\n\n",
            "color": "red",
            "id": 3
        },
        {
            "stderr_id": 6,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 5, in sort_physicists\n    return [name[0] for name in scientists if 'Physics' in name[1]]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [name[0] for name in scientists if 'Physics' in name[1]]\nTypeError: argument of type 'int' is not iterable\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 5, in sort_physicists\n    return [name[0] for name in scientists if 'Physics' in name[1]]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [name[0] for name in scientists if 'Physics' in name[1]]\nTypeError: argument of type 'int' is not iterable\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]))\n  File \"/tmp/file.py\", line 5, in sort_physicists\n    return [name[0] for name in scientists if 'Physics' in name[1]]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [name[0] for name in scientists if 'Physics' in name[1]]\nTypeError: argument of type 'int' is not iterable\n",
            "color": "grey",
            "id": 4
        },
        {
            "stderr_id": 4,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 11, in sort_physicists\n    physicists.sort(key=lambda x: int(x.split()[0]))\n  File \"/tmp/file.py\", line 11, in <lambda>\n    physicists.sort(key=lambda x: int(x.split()[0]))\nValueError: invalid literal for int() with base 10: 'Ghez'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 11, in sort_physicists\n    physicists.sort(key=lambda x: int(x.split()[0]))\n  File \"/tmp/file.py\", line 11, in <lambda>\n    physicists.sort(key=lambda x: int(x.split()[0]))\nValueError: invalid literal for int() with base 10: 'Ghez'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]))\n  File \"/tmp/file.py\", line 11, in sort_physicists\n    physicists.sort(key=lambda x: int(x.split()[0]))\n  File \"/tmp/file.py\", line 11, in <lambda>\n    physicists.sort(key=lambda x: int(x.split()[0]))\nValueError: invalid literal for int() with base 10: 'Ghez'\n",
            "color": "blue",
            "id": 5
        },
        {
            "stderr_id": 0,
            "stdout_id": 5,
            "hover": "stdout:\n[['Peiris', 48, 'Physics'], ['Ghez', 56, 'Physics'], ['Strickland', 62, 'Physics'], ['Youyou', 91, 'Chemistry']]\n\n[['Peiris', 48, 'Physics'], ['Ghez', 56, 'Physics'], ['Strickland', 62, 'Physics']]\n\n[['Ghez', 56, 'Physics'], ['Taylor', 59, 'Computer Science'], ['Tu', 91, 'Chemistry']]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 6
        },
        {
            "stderr_id": 0,
            "stdout_id": 4,
            "hover": "stdout:\n[['Ghez', 56, 'Physics'], ['Peiris', 48, 'Physics'], ['Strickland', 62, 'Physics'], ['Youyou', 91, 'Chemistry']]\n\n[['Ghez', 56, 'Physics'], ['Peiris', 48, 'Physics'], ['Strickland', 62, 'Physics']]\n\n[['Ghez', 56, 'Physics'], ['Taylor', 59, 'Computer Science'], ['Tu', 91, 'Chemistry']]\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 7
        },
        {
            "stderr_id": 7,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 5, in sort_physicists\n    return sorted(scientists, key=lambda x: int(x.split()[-1]))\n  File \"/tmp/file.py\", line 5, in <lambda>\n    return sorted(scientists, key=lambda x: int(x.split()[-1]))\nAttributeError: 'list' object has no attribute 'split'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 5, in sort_physicists\n    return sorted(scientists, key=lambda x: int(x.split()[-1]))\n  File \"/tmp/file.py\", line 5, in <lambda>\n    return sorted(scientists, key=lambda x: int(x.split()[-1]))\nAttributeError: 'list' object has no attribute 'split'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]))\n  File \"/tmp/file.py\", line 5, in sort_physicists\n    return sorted(scientists, key=lambda x: int(x.split()[-1]))\n  File \"/tmp/file.py\", line 5, in <lambda>\n    return sorted(scientists, key=lambda x: int(x.split()[-1]))\nAttributeError: 'list' object has no attribute 'split'\n",
            "color": "grey",
            "id": 8
        },
        {
            "stderr_id": 1,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 9\n    sort_physicists(scientists)\nIndentationError: expected an indented block after 'if' statement on line 6\n\n  File \"/tmp/file.py\", line 9\n    sort_physicists(scientists)\nIndentationError: expected an indented block after 'if' statement on line 6\n\n  File \"/tmp/file.py\", line 9\n    sort_physicists(scientists)\nIndentationError: expected an indented block after 'if' statement on line 6\n",
            "color": "grey",
            "id": 9
        },
        {
            "stderr_id": 2,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 9, in sort_physicists\n    A.sort(key = lambda x: scientists[x][1])\n  File \"/tmp/file.py\", line 9, in <lambda>\n    A.sort(key = lambda x: scientists[x][1])\nTypeError: list indices must be integers or slices, not str\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 9, in sort_physicists\n    A.sort(key = lambda x: scientists[x][1])\n  File \"/tmp/file.py\", line 9, in <lambda>\n    A.sort(key = lambda x: scientists[x][1])\nTypeError: list indices must be integers or slices, not str\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]))\n  File \"/tmp/file.py\", line 9, in sort_physicists\n    A.sort(key = lambda x: scientists[x][1])\n  File \"/tmp/file.py\", line 9, in <lambda>\n    A.sort(key = lambda x: scientists[x][1])\nTypeError: list indices must be integers or slices, not str\n",
            "color": "red",
            "id": 10
        },
        {
            "stderr_id": 3,
            "stdout_id": 0,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 9, in sort_physicists\n    physicists.sort(key=lambda x: int(x.split(\" \")[-1]))\n  File \"/tmp/file.py\", line 9, in <lambda>\n    physicists.sort(key=lambda x: int(x.split(\" \")[-1]))\nValueError: invalid literal for int() with base 10: 'Ghez'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]))\n  File \"/tmp/file.py\", line 9, in sort_physicists\n    physicists.sort(key=lambda x: int(x.split(\" \")[-1]))\n  File \"/tmp/file.py\", line 9, in <lambda>\n    physicists.sort(key=lambda x: int(x.split(\" \")[-1]))\nValueError: invalid literal for int() with base 10: 'Ghez'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]))\n  File \"/tmp/file.py\", line 9, in sort_physicists\n    physicists.sort(key=lambda x: int(x.split(\" \")[-1]))\n  File \"/tmp/file.py\", line 9, in <lambda>\n    physicists.sort(key=lambda x: int(x.split(\" \")[-1]))\nValueError: invalid literal for int() with base 10: 'Ghez'\n",
            "color": "blue",
            "id": 11
        },
        {
            "stderr_id": 0,
            "stdout_id": 6,
            "hover": "stdout:\n[['Peiris', 48, 'Physics'], ['Ghez', 56, 'Physics'], ['Strickland', 62, 'Physics']]\n\n[['Peiris', 48, 'Physics'], ['Ghez', 56, 'Physics'], ['Strickland', 62, 'Physics']]\n\n[['Ghez', 56, 'Physics']]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 12
        }
    ],
    "adjacency": [
        [
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student12",
                "hover": "username:student12\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -40,4 +40,8 @@\n the big list.+Return+this+sorted+list \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Create a list of the 0th element in the list within the list if the 2nd element says \"Physics\". Sort the list from least to greatest by looking at the 1st value in the list within the big list.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[1] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Create a list of the 0th element in the list within the list if the 2nd element says \"Physics\". Sort the list from least to greatest by looking at the 1st value in the list within the big list. Return this sorted list\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[1] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: x[1])\n    return physicists\n",
                "id": 0,
                "key": 0
            },
            {
                "diff": 1,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student12",
                "hover": "username:student12\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -8,8 +8,7 @@\n the 0th element-in-the+each list within the@@ -34,7 +33,7 @@\n 1st value in-the+each list within the@@ -43,5 +42,5 @@\n Return this sorted-list+list. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Create a list of the 0th element in the list within the list if the 2nd element says \"Physics\". Sort the list from least to greatest by looking at the 1st value in the list within the big list. Return this sorted list\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[1] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: x[1])\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Create a list of the 0th element each list within the list if the 2nd element says \"Physics\". Sort the list from least to greatest by looking at the 1st value in each list within the big list. Return this sorted list.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[1] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n",
                "id": 0,
                "key": 1
            },
            {
                "diff": 11,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student38",
                "hover": "username:student38\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -2,7 +2,6 @@\n sort_physicists(scientists): \"\"\" If-first position in list@@ -18,6 +17,8 @@\n If position in+list+in scientists has \"Ghez\",@@ -29,6 +30,8 @@\n If position in+list+in scientists has \"Strickland\",\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    If first position in list in scientists has \"Peiris\", add 'Peiris' to new list. If position in scientists has \"Ghez\", add 'Ghez' to new list. If position in scientists has \"Strickland\", add 'Strickland' to new list. \n    \"\"\"\n        new_list = []\n    for scientist in scientists:\n        if scientist == \"Peiris\":\n            new_list.append(scientist)\n        elif scientist == \"Ghez\":\n            new_list.append(scientist)\n        elif scientist == \"Strickland\":\n            new_list.append(scientist)\n    return new_list\n\nprint(sort_physicists(physicists))\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    If position in list in scientists has \"Peiris\", add 'Peiris' to new list. If position in list in scientists has \"Ghez\", add 'Ghez' to new list. If position in list in scientists has \"Strickland\", add 'Strickland' to new list. \n    \"\"\"\n        new_list = []\n    for name in scientists:\n        if name == \"Peiris\":\n            new_list.append(name)\n        elif name == \"Ghez\":\n            new_list.append(name)\n        elif name == \"Strickland\":\n            new_list.append(name)\n    return new_list\n",
                "id": 0,
                "key": 2
            },
            {
                "diff": 2,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student12",
                "hover": "username:student12\nedge: (0->1)\ndiff:\n--- \n+++ \n@@ -1,7 +1,7 @@\n def sort_physicists(scientists): \"\"\"-Create+Return a list of@@ -10,9 +10,8 @@\n element each list-within-the-list+of+scientists if the 2nd@@ -20,7 +19,7 @@\n says \"Physics\". Sort-the+this list from least@@ -37,7 +36,7 @@\n list within the-big+scientists list. Return this\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Create a list of the 0th element each list within the list if the 2nd element says \"Physics\". Sort the list from least to greatest by looking at the 1st value in each list within the big list. Return this sorted list.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[1] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Return a list of the 0th element each list of scientists if the 2nd element says \"Physics\". Sort this list from least to greatest by looking at the 1st value in each list within the scientists list. Return this sorted list.\n    \"\"\"\n        return sorted([i[0] for i in scientists if i[2] == \"Physics\"], key=lambda x: x[1])\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 14,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student54",
                "hover": "username:student54\nedge: (0->11)\ndiff:\n--- \n+++ \n@@ -1,11 +1,18 @@\n def sort_physicists(scientists): \"\"\"-If+Check+that the+inner list contains-\"Physics\",+\"Physics\"+at+index+2.+If+so, return the string@@ -19,7 +26,7 @@\n new list based-off+on the integer at\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    If the list contains \"Physics\", return the string at index 0. Sort these into a new list based off the integer at index 1.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[0] == \"Physics\":\n            physicists.append(scientist)\n    physicists.sort(key=lambda x: x[1])\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Check that the inner list contains \"Physics\" at index 2. If so, return the string at index 0. Sort these into a new list based on the integer at index 1.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: int(x.split(\" \")[-1]))\n    return physicists\n",
                "id": 11,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 3,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student19",
                "hover": "username:student19\nedge: (2->3)\ndiff:\n--- \n+++ \n@@ -56,11 +56,58 @@\n smaller list is-appended+added to an output list.+The+corresponding+number+is+also+recorded.+If+the+number+for+an+item+which+is+being+added+is+less+than+the+corresponding+number+for+the+first+item+in+the+output+list,+it+is+added+to+the+beginning+of+the+output+list.+Otherwise,+it+is+added+to+the+end. After all small\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is appended to an output list. After all small lists have been checked, it outputs the output list.\n    \"\"\"\n        output = []\n    for i in scientists:\n        if i[2] == 'Physics':\n            output.append(i[0])\n    return output\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is added to an output list. The corresponding number is also recorded. If the number for an item which is being added is less than the corresponding number for the first item in the output list, it is added to the beginning of the output list. Otherwise, it is added to the end. After all small lists have been checked, it outputs the output list.\n    \"\"\"\n        output_list = []\n    for i in range(len(scientists)):\n        if scientists[i][2] == 'Physics':\n            output_list.append(scientists[i][0])\n            if len(output_list) > 1:\n                if scientists[i][1] < scientists[i-1][1]:\n                    output_list.insert(0, output_list[-1])\n                    del output_",
                "id": 3,
                "key": 0
            },
            {
                "diff": 5,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student20",
                "hover": "username:student20\nedge: (2->5)\ndiff:\n--- \n+++ \n@@ -23,4 +23,24 @@\n a new list.+Then+sort+the+list+in+order+of+magnitude+of+the+integer+in+the+first+index+of+each+list+in+scientists. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    For each list in scientists, if \"Physics\" is in the list, take the first string and add it to a new list.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if \"Physics\" in scientist:\n            physicists.append(scientist[0])\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    For each list in scientists, if \"Physics\" is in the list, take the first string and add it to a new list.\n\nThen sort the list in order of magnitude of the integer in the first index of each list in scientists.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if \"Physics\" in scientist:\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: int(x.split()[0]))\n    return physicists\n\n",
                "id": 5,
                "key": 0
            },
            {
                "diff": 10,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student36",
                "hover": "username:student36\nedge: (2->1)\ndiff:\n--- \n+++ \n@@ -18,7 +18,7 @@\n return just the-names+names, in order of\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return just the names in order of what year they graduated from lowest to highest\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return just the names, in order of what year they graduated from lowest to highest\n    \"\"\"\n        return [name for name, year, subject in sorted(scientists, key=lambda x: x[1]) if subject == \"Physics\"]\n\n",
                "id": 1,
                "key": 0
            },
            {
                "diff": 17,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student57",
                "hover": "username:student57\nedge: (2->1)\ndiff:\n--- \n+++ \n@@ -29,15 +29,19 @@\n in a new-list-where+list.+however, if multiple values are to be-added,+added+to+the+new+list, list in order\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    when given a list of lists, if last index of list in lists is equal to \"Physics\", return the first value in list of lists in a new list where if multiple values are to be added, list in order of ascending order of the second value in list of lists.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[-1] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: x.split()[-1])\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    when given a list of lists, if last index of list in lists is equal to \"Physics\", return the first value in list of lists in a new list. however, if multiple values are to be added to the new list, list in order of ascending order of the second value in list of lists.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[-1] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: x[1])\n    return physicists\n\nprint(sort_physicists(scientists))\n",
                "id": 1,
                "key": 1
            },
            {
                "diff": 22,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student77",
                "hover": "username:student77\nedge: (2->1)\ndiff:\n--- \n+++ \n@@ -29,23 +29,45 @@\n Then sort the-list-into-ascending-order+scientists based on the-number+numbers given in the set of+lists+from+smallest+to+largest.+For+example,+if+the+scientist+has+the+smallest+number+attached+to+them+in+the+set+of lists,-but-don't-return+they+should+be+placed+first+in the-number.+output+list. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number given in the set of lists, but don't return the number.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the scientists based on the numbers given in the set of lists from smallest to largest. For example, if the scientist has the smallest number attached to them in the set of lists, they should be placed first in the output list.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: x[1])\n    return physicists\n",
                "id": 1,
                "key": 2
            },
            {
                "diff": 13,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student43",
                "hover": "username:student43\nedge: (2->10)\ndiff:\n--- \n+++ \n@@ -35,14 +35,37 @@\n false, do nothing.+Now+reorder+each+element+in+A,+according+to+each+element's+corresponding+list+in+scientists's+second+entry+value,+the+order+should+be+from+smallest+numerical+value+to+the+largest+numerical+value. Return list-A-if-all-lists-in-scientists-are-checked+A. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Create an empty list A. Loop through each list in scientists: check if the third element in the list is Physics. If true, append the 1st element to list A. If false, do nothing. Return list A if all lists in scientists are checked\n    \"\"\"\n        A = []\n    for i in range(len(scientists)):\n        if scientists[i][2] == 'Physics':\n            A.append(scientists[i][0])\n    return A\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Create an empty list A. Loop through each list in scientists: check if the third element in the list is Physics. If true, append the 1st element to list A. If false, do nothing. Now reorder each element in A, according to each element's corresponding list in scientists's second entry value, the order should be from smallest numerical value to the largest numerical value.  Return list A.\n    \"\"\"\n        A = []\n    for i in scientists:\n        if i[2] == 'Physics':\n            A.append(i[0])\n    A.sort(key = lambda x: scientists[x][1])\n    return A\n\nprint(sort_physicists(scientists))\n",
                "id": 10,
                "key": 0
            },
            {
                "diff": 16,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student57",
                "hover": "username:student57\nedge: (2->2)\ndiff:\n--- \n+++ \n@@ -30,4 +30,26 @@\n a new list+where+if+multiple+values+are+to+be+added,+list+in+order+of+ascending+order+of+the+second+value+in+list+of+lists. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    when given a list of lists, if last index of list in lists is equal to \"Physics\", return the first value in list of lists in a new list\n    \"\"\"\n        return [scientist[0] for scientist in scientists if scientist[-1] == \"Physics\"]\n\nprint(sort_physicists(scientists))\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    when given a list of lists, if last index of list in lists is equal to \"Physics\", return the first value in list of lists in a new list where if multiple values are to be added, list in order of ascending order of the second value in list of lists.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[-1] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: x.split()[-1])\n    return physicists\n",
                "id": 2,
                "key": 0
            },
            {
                "diff": 18,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student77",
                "hover": "username:student77\nedge: (2->2)\ndiff:\n--- \n+++ \n@@ -26,4 +26,11 @@\n in a list.+Then+sort+the+list+into+alphabetical+order. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list.\n    \"\"\"\n        return [scientist for scientist, number, subject in scientists if subject == \"Physics\"]\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into alphabetical order.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n",
                "id": 2,
                "key": 1
            },
            {
                "diff": 21,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student77",
                "hover": "username:student77\nedge: (2->2)\ndiff:\n--- \n+++ \n@@ -36,7 +36,13 @@\n based on the-number,+number+given+in+the+set+of+lists, but don't return\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number, but don't return the number.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number given in the set of lists, but don't return the number.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n",
                "id": 2,
                "key": 2
            },
            {
                "diff": 19,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student77",
                "hover": "username:student77\nedge: (2->12)\ndiff:\n--- \n+++ \n@@ -31,6 +31,10 @@\n the list into-alphabetical-order.+ascending+order+based+on+the+number. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into alphabetical order.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist)\n    physicists.sort(key=lambda x: x[1])\n    return physicists\n",
                "id": 12,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 4,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student20",
                "hover": "username:student20\nedge: (4->2)\ndiff:\n--- \n+++ \n@@ -1,19 +1,26 @@\n def sort_physicists(scientists): \"\"\"-Return-a+For+each list-of+in+scientists,+if+\"Physics\"+is+in+the+list,+take the first string-in-the-list-of-lists-that-contain-'Physics'+and+add+it+to+a+new+list. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Return a list of the first string in the list of lists that contain 'Physics'\n    \"\"\"\n        return [name[0] for name in scientists if 'Physics' in name[1]]\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    For each list in scientists, if \"Physics\" is in the list, take the first string and add it to a new list.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if \"Physics\" in scientist:\n            physicists.append(scientist[0])\n    return physicists\n",
                "id": 2,
                "key": 0
            }
        ],
        [
            {
                "diff": 6,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student20",
                "hover": "username:student20\nedge: (5->6)\ndiff:\n--- \n+++ \n@@ -6,41 +6,20 @@\n list in scientists,-if-\"Physics\"-is+check+index+1+for+the+integer,+which+you+will+store in-the-list,-take-the-first-string-and-add-it-to a-new-list.-Then-sort-the-list-in-order-of-magnitude-of-the-integer-in-the-first-index-of-each-list-in-scientists.+variable+'age'.+Return+'age'. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    For each list in scientists, if \"Physics\" is in the list, take the first string and add it to a new list.\n\nThen sort the list in order of magnitude of the integer in the first index of each list in scientists.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if \"Physics\" in scientist:\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: int(x.split()[0]))\n    return physicists\n\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    For each list in scientists, check index 1 for the integer, which you will store in a variable 'age'. Return 'age'.\n    \"\"\"\n        return sorted(scientists, key=lambda x: x[1])\n\nprint(sort_physicists(scientists))\n",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 7,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student20",
                "hover": "username:student20\nedge: (6->7)\ndiff:\n--- \n+++ \n@@ -1,25 +1,19 @@\n def sort_physicists(scientists): \"\"\"-For+Sort+the+lists+in+scientists+by+the+magnitude+of+the+first+index+in each-list-in-scientists,-check-index-1-for-the-integer,-which-you-will-store-in-a-variable-'age'.-Return-'age'.+list. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    For each list in scientists, check index 1 for the integer, which you will store in a variable 'age'. Return 'age'.\n    \"\"\"\n        return sorted(scientists, key=lambda x: x[1])\n\nprint(sort_physicists(scientists))\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Sort the lists in scientists by the magnitude of the first index in each list.\n    \"\"\"\n        return sorted(scientists, key=lambda x: x[0])\n",
                "id": 7,
                "key": 0
            },
            {
                "diff": 9,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student36",
                "hover": "username:student36\nedge: (6->2)\ndiff:\n--- \n+++ \n@@ -16,10 +16,12 @@\n is \"Physics\" return+just the names-based-on+in+order+of what year they\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return the names based on what year they graduated from lowest to highest\n    \"\"\"\n        return sorted(scientists, key=lambda x: x[1])\n\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return just the names in order of what year they graduated from lowest to highest\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n",
                "id": 2,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 8,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student36",
                "hover": "username:student36\nedge: (8->6)\ndiff:\n--- \n+++ \n@@ -1,20 +1,29 @@\n def sort_physicists(scientists): \"\"\"+The+internal+lists+contain+name,+year+graduated+and+subject. If the-list-contains+subject+is \"Physics\" return the-first-string-in-order-of-the-numbers+names+based+on+what+year+they+graduated from lowest to\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    If the list contains \"Physics\" return the first string in order of the numbers from lowest to highest\n    \"\"\"\n        return sorted(scientists, key=lambda x: int(x.split()[-1]))\n\nprint(sort_physicists(scientists))\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return the names based on what year they graduated from lowest to highest\n    \"\"\"\n        return sorted(scientists, key=lambda x: x[1])\n\n",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 12,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student43",
                "hover": "username:student43\nedge: (9->2)\ndiff:\n--- \n+++ \n@@ -1,6 +1,11 @@\n def sort_physicists(scientists): \"\"\"+Create+an+empty+list+A. Loop through each@@ -19,15 +24,25 @@\n Physics. If true,-return+append the 1st element-in-the-list.+to+list+A. If false, do nothing.+Return+list+A+if+all+lists+in+scientists+are+checked \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Loop through each list in scientists: check if the third element in the list is Physics. If true, return the 1st element in the list. If false, do nothing.\n    \"\"\"\n        for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            print(scientist[0])\n\nsort_physicists(scientists)\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Create an empty list A. Loop through each list in scientists: check if the third element in the list is Physics. If true, append the 1st element to list A. If false, do nothing. Return list A if all lists in scientists are checked\n    \"\"\"\n        A = []\n    for i in range(len(scientists)):\n        if scientists[i][2] == 'Physics':\n            A.append(scientists[i][0])\n    return A\n",
                "id": 2,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 15,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student54",
                "hover": "username:student54\nedge: (11->1)\ndiff:\n--- \n+++ \n@@ -7,18 +7,24 @@\n inner list contains+the+string \"Physics\" at index 2. If so,-return+append the string at index-0.+0+to+a+new+list. Sort these into\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Check that the inner list contains \"Physics\" at index 2. If so, return the string at index 0. Sort these into a new list based on the integer at index 1.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: int(x.split(\" \")[-1]))\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Check that the inner list contains the string \"Physics\" at index 2. If so, append the string at index 0 to a new list. Sort these into a new list based on the integer at index 1.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort(key=lambda x: x[1])\n    return physicists\n\nprint(sort_physicists(scientists))\n",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 20,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student77",
                "hover": "username:student77\nedge: (12->2)\ndiff:\n--- \n+++ \n@@ -36,5 +36,10 @@\n based on the+number,+but+don't+return+the number. \"\"\"\n\nFROM completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist)\n    physicists.sort(key=lambda x: x[1])\n    return physicists\n\n\nTO completion:\ndef sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the list into ascending order based on the number, but don't return the number.\n    \"\"\"\n        physicists = []\n    for scientist in scientists:\n        if scientist[2] == \"Physics\":\n            physicists.append(scientist[0])\n    physicists.sort()\n    return physicists\n",
                "id": 2,
                "key": 0
            }
        ]
    ]
}