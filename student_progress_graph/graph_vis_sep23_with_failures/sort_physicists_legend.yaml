"edges":
  !!int "0": |-
    ---
    +++
    @@ -40,4 +40,8 @@
     the big list.+Return+this+sorted+list """
  !!int "1": |-
    ---
    +++
    @@ -8,8 +8,7 @@
     the 0th element-in-the+each list within the@@ -34,7 +33,7 @@
     1st value in-the+each list within the@@ -43,5 +42,5 @@
     Return this sorted-list+list. """
  !!int "2": |-
    ---
    +++
    @@ -1,7 +1,7 @@
     def sort_physicists(scientists): """-Create+Return a list of@@ -10,9 +10,8 @@
     element each list-within-the-list+of+scientists if the 2nd@@ -20,7 +19,7 @@
     says "Physics". Sort-the+this list from least@@ -37,7 +36,7 @@
     list within the-big+scientists list. Return this
  !!int "3": |-
    ---
    +++
    @@ -56,11 +56,58 @@
     smaller list is-appended+added to an output list.+The+corresponding+number+is+also+recorded.+If+the+number+for+an+item+which+is+being+added+is+less+than+the+corresponding+number+for+the+first+item+in+the+output+list,+it+is+added+to+the+beginning+of+the+output+list.+Otherwise,+it+is+added+to+the+end. After all small
  !!int "4": |-
    ---
    +++
    @@ -1,19 +1,26 @@
     def sort_physicists(scientists): """-Return-a+For+each list-of+in+scientists,+if+"Physics"+is+in+the+list,+take the first string-in-the-list-of-lists-that-contain-'Physics'+and+add+it+to+a+new+list. """
  !!int "5": |-
    ---
    +++
    @@ -23,4 +23,24 @@
     a new list.+Then+sort+the+list+in+order+of+magnitude+of+the+integer+in+the+first+index+of+each+list+in+scientists. """
  !!int "6": |-
    ---
    +++
    @@ -6,41 +6,20 @@
     list in scientists,-if-"Physics"-is+check+index+1+for+the+integer,+which+you+will+store in-the-list,-take-the-first-string-and-add-it-to a-new-list.-Then-sort-the-list-in-order-of-magnitude-of-the-integer-in-the-first-index-of-each-list-in-scientists.+variable+'age'.+Return+'age'. """
  !!int "7": |-
    ---
    +++
    @@ -1,25 +1,19 @@
     def sort_physicists(scientists): """-For+Sort+the+lists+in+scientists+by+the+magnitude+of+the+first+index+in each-list-in-scientists,-check-index-1-for-the-integer,-which-you-will-store-in-a-variable-'age'.-Return-'age'.+list. """
  !!int "8": |-
    ---
    +++
    @@ -1,20 +1,29 @@
     def sort_physicists(scientists): """+The+internal+lists+contain+name,+year+graduated+and+subject. If the-list-contains+subject+is "Physics" return the-first-string-in-order-of-the-numbers+names+based+on+what+year+they+graduated from lowest to
  !!int "9": |-
    ---
    +++
    @@ -16,10 +16,12 @@
     is "Physics" return+just the names-based-on+in+order+of what year they
  !!int "10": |-
    ---
    +++
    @@ -18,7 +18,7 @@
     return just the-names+names, in order of
  !!int "11": |-
    ---
    +++
    @@ -2,7 +2,6 @@
     sort_physicists(scientists): """ If-first position in list@@ -18,6 +17,8 @@
     If position in+list+in scientists has "Ghez",@@ -29,6 +30,8 @@
     If position in+list+in scientists has "Strickland",
  !!int "12": |-
    ---
    +++
    @@ -1,6 +1,11 @@
     def sort_physicists(scientists): """+Create+an+empty+list+A. Loop through each@@ -19,15 +24,25 @@
     Physics. If true,-return+append the 1st element-in-the-list.+to+list+A. If false, do nothing.+Return+list+A+if+all+lists+in+scientists+are+checked """
  !!int "13": |-
    ---
    +++
    @@ -35,14 +35,37 @@
     false, do nothing.+Now+reorder+each+element+in+A,+according+to+each+element's+corresponding+list+in+scientists's+second+entry+value,+the+order+should+be+from+smallest+numerical+value+to+the+largest+numerical+value. Return list-A-if-all-lists-in-scientists-are-checked+A. """
  !!int "14": |-
    ---
    +++
    @@ -1,11 +1,18 @@
     def sort_physicists(scientists): """-If+Check+that the+inner list contains-"Physics",+"Physics"+at+index+2.+If+so, return the string@@ -19,7 +26,7 @@
     new list based-off+on the integer at
  !!int "15": |-
    ---
    +++
    @@ -7,18 +7,24 @@
     inner list contains+the+string "Physics" at index 2. If so,-return+append the string at index-0.+0+to+a+new+list. Sort these into
  !!int "16": |-
    ---
    +++
    @@ -30,4 +30,26 @@
     a new list+where+if+multiple+values+are+to+be+added,+list+in+order+of+ascending+order+of+the+second+value+in+list+of+lists. """
  !!int "17": |-
    ---
    +++
    @@ -29,15 +29,19 @@
     in a new-list-where+list.+however, if multiple values are to be-added,+added+to+the+new+list, list in order
  !!int "18": |-
    ---
    +++
    @@ -26,4 +26,11 @@
     in a list.+Then+sort+the+list+into+alphabetical+order. """
  !!int "19": |-
    ---
    +++
    @@ -31,6 +31,10 @@
     the list into-alphabetical-order.+ascending+order+based+on+the+number. """
  !!int "20": |-
    ---
    +++
    @@ -36,5 +36,10 @@
     based on the+number,+but+don't+return+the number. """
  !!int "21": |-
    ---
    +++
    @@ -36,7 +36,13 @@
     based on the-number,+number+given+in+the+set+of+lists, but don't return
  !!int "22": |-
    ---
    +++
    @@ -29,23 +29,45 @@
     Then sort the-list-into-ascending-order+scientists based on the-number+numbers given in the set of+lists+from+smallest+to+largest.+For+example,+if+the+scientist+has+the+smallest+number+attached+to+them+in+the+set+of lists,-but-don't-return+they+should+be+placed+first+in the-number.+output+list. """
"nodes":
  !!int "0":
    "stderr":
    - ""
    - ""
    - ""
    "stderr_id": !!int |-
      0
    "stdout":
    - |
      []
    - |
      []
    - |
      []
    "stdout_id": !!int |-
      7
  !!int "1":
    "stderr":
    - ""
    - ""
    - ""
    "stderr_id": !!int |-
      0
    "stdout":
    - |
      ['Peiris', 'Ghez', 'Strickland']
    - |
      ['Peiris', 'Ghez', 'Strickland']
    - |
      ['Ghez']
    "stdout_id": !!int |-
      3
  !!int "2":
    "stderr":
    - ""
    - ""
    - ""
    "stderr_id": !!int |-
      0
    "stdout":
    - |
      ['Ghez', 'Peiris', 'Strickland']
    - |
      ['Ghez', 'Peiris', 'Strickland']
    - |
      ['Ghez']
    "stdout_id": !!int |-
      2
  !!int "3":
    "stderr":
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 13, in <module>
          print(sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]))
        File "/tmp/file.py", line 12, in sort_physicists
          del output_
      UnboundLocalError: local variable 'output_' referenced before assignment
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 13, in <module>
          print(sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]))
        File "/tmp/file.py", line 12, in sort_physicists
          del output_
      UnboundLocalError: local variable 'output_' referenced before assignment
    - ""
    "stderr_id": !!int |-
      5
    "stdout":
    - ""
    - ""
    - |
      None
    "stdout_id": !!int |-
      1
  !!int "4":
    "stderr":
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 6, in <module>
          print(sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]))
        File "/tmp/file.py", line 5, in sort_physicists
          return [name[0] for name in scientists if 'Physics' in name[1]]
        File "/tmp/file.py", line 5, in <listcomp>
          return [name[0] for name in scientists if 'Physics' in name[1]]
      TypeError: argument of type 'int' is not iterable
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 6, in <module>
          print(sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]))
        File "/tmp/file.py", line 5, in sort_physicists
          return [name[0] for name in scientists if 'Physics' in name[1]]
        File "/tmp/file.py", line 5, in <listcomp>
          return [name[0] for name in scientists if 'Physics' in name[1]]
      TypeError: argument of type 'int' is not iterable
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 6, in <module>
          print(sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]))
        File "/tmp/file.py", line 5, in sort_physicists
          return [name[0] for name in scientists if 'Physics' in name[1]]
        File "/tmp/file.py", line 5, in <listcomp>
          return [name[0] for name in scientists if 'Physics' in name[1]]
      TypeError: argument of type 'int' is not iterable
    "stderr_id": !!int |-
      6
    "stdout":
    - ""
    - ""
    - ""
    "stdout_id": !!int |-
      0
  !!int "5":
    "stderr":
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 13, in <module>
          print(sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]))
        File "/tmp/file.py", line 11, in sort_physicists
          physicists.sort(key=lambda x: int(x.split()[0]))
        File "/tmp/file.py", line 11, in <lambda>
          physicists.sort(key=lambda x: int(x.split()[0]))
      ValueError: invalid literal for int() with base 10: 'Ghez'
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 13, in <module>
          print(sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]))
        File "/tmp/file.py", line 11, in sort_physicists
          physicists.sort(key=lambda x: int(x.split()[0]))
        File "/tmp/file.py", line 11, in <lambda>
          physicists.sort(key=lambda x: int(x.split()[0]))
      ValueError: invalid literal for int() with base 10: 'Ghez'
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 13, in <module>
          print(sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]))
        File "/tmp/file.py", line 11, in sort_physicists
          physicists.sort(key=lambda x: int(x.split()[0]))
        File "/tmp/file.py", line 11, in <lambda>
          physicists.sort(key=lambda x: int(x.split()[0]))
      ValueError: invalid literal for int() with base 10: 'Ghez'
    "stderr_id": !!int |-
      4
    "stdout":
    - ""
    - ""
    - ""
    "stdout_id": !!int |-
      0
  !!int "6":
    "stderr":
    - ""
    - ""
    - ""
    "stderr_id": !!int |-
      0
    "stdout":
    - |
      [['Peiris', 48, 'Physics'], ['Ghez', 56, 'Physics'], ['Strickland', 62, 'Physics'], ['Youyou', 91, 'Chemistry']]
    - |
      [['Peiris', 48, 'Physics'], ['Ghez', 56, 'Physics'], ['Strickland', 62, 'Physics']]
    - |
      [['Ghez', 56, 'Physics'], ['Taylor', 59, 'Computer Science'], ['Tu', 91, 'Chemistry']]
    "stdout_id": !!int |-
      5
  !!int "7":
    "stderr":
    - ""
    - ""
    - ""
    "stderr_id": !!int |-
      0
    "stdout":
    - |
      [['Ghez', 56, 'Physics'], ['Peiris', 48, 'Physics'], ['Strickland', 62, 'Physics'], ['Youyou', 91, 'Chemistry']]
    - |
      [['Ghez', 56, 'Physics'], ['Peiris', 48, 'Physics'], ['Strickland', 62, 'Physics']]
    - |
      [['Ghez', 56, 'Physics'], ['Taylor', 59, 'Computer Science'], ['Tu', 91, 'Chemistry']]
    "stdout_id": !!int |-
      4
  !!int "8":
    "stderr":
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 6, in <module>
          print(sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]))
        File "/tmp/file.py", line 5, in sort_physicists
          return sorted(scientists, key=lambda x: int(x.split()[-1]))
        File "/tmp/file.py", line 5, in <lambda>
          return sorted(scientists, key=lambda x: int(x.split()[-1]))
      AttributeError: 'list' object has no attribute 'split'
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 6, in <module>
          print(sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]))
        File "/tmp/file.py", line 5, in sort_physicists
          return sorted(scientists, key=lambda x: int(x.split()[-1]))
        File "/tmp/file.py", line 5, in <lambda>
          return sorted(scientists, key=lambda x: int(x.split()[-1]))
      AttributeError: 'list' object has no attribute 'split'
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 6, in <module>
          print(sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]))
        File "/tmp/file.py", line 5, in sort_physicists
          return sorted(scientists, key=lambda x: int(x.split()[-1]))
        File "/tmp/file.py", line 5, in <lambda>
          return sorted(scientists, key=lambda x: int(x.split()[-1]))
      AttributeError: 'list' object has no attribute 'split'
    "stderr_id": !!int |-
      7
    "stdout":
    - ""
    - ""
    - ""
    "stdout_id": !!int |-
      0
  !!int "9":
    "stderr":
    - |2
        File "/tmp/file.py", line 9
          sort_physicists(scientists)
      IndentationError: expected an indented block after 'if' statement on line 6
    - |2
        File "/tmp/file.py", line 9
          sort_physicists(scientists)
      IndentationError: expected an indented block after 'if' statement on line 6
    - |2
        File "/tmp/file.py", line 9
          sort_physicists(scientists)
      IndentationError: expected an indented block after 'if' statement on line 6
    "stderr_id": !!int |-
      1
    "stdout":
    - ""
    - ""
    - ""
    "stdout_id": !!int |-
      0
  !!int "10":
    "stderr":
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 11, in <module>
          print(sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]))
        File "/tmp/file.py", line 9, in sort_physicists
          A.sort(key = lambda x: scientists[x][1])
        File "/tmp/file.py", line 9, in <lambda>
          A.sort(key = lambda x: scientists[x][1])
      TypeError: list indices must be integers or slices, not str
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 11, in <module>
          print(sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]))
        File "/tmp/file.py", line 9, in sort_physicists
          A.sort(key = lambda x: scientists[x][1])
        File "/tmp/file.py", line 9, in <lambda>
          A.sort(key = lambda x: scientists[x][1])
      TypeError: list indices must be integers or slices, not str
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 11, in <module>
          print(sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]))
        File "/tmp/file.py", line 9, in sort_physicists
          A.sort(key = lambda x: scientists[x][1])
        File "/tmp/file.py", line 9, in <lambda>
          A.sort(key = lambda x: scientists[x][1])
      TypeError: list indices must be integers or slices, not str
    "stderr_id": !!int |-
      2
    "stdout":
    - ""
    - ""
    - ""
    "stdout_id": !!int |-
      0
  !!int "11":
    "stderr":
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 11, in <module>
          print(sort_physicists([["Youyou",91,"Chemistry"],["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]))
        File "/tmp/file.py", line 9, in sort_physicists
          physicists.sort(key=lambda x: int(x.split(" ")[-1]))
        File "/tmp/file.py", line 9, in <lambda>
          physicists.sort(key=lambda x: int(x.split(" ")[-1]))
      ValueError: invalid literal for int() with base 10: 'Ghez'
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 11, in <module>
          print(sort_physicists([["Ghez",56,"Physics"],["Peiris",48,"Physics"],["Strickland",62,"Physics"]]))
        File "/tmp/file.py", line 9, in sort_physicists
          physicists.sort(key=lambda x: int(x.split(" ")[-1]))
        File "/tmp/file.py", line 9, in <lambda>
          physicists.sort(key=lambda x: int(x.split(" ")[-1]))
      ValueError: invalid literal for int() with base 10: 'Ghez'
    - |
      Traceback (most recent call last):
        File "/tmp/file.py", line 11, in <module>
          print(sort_physicists([["Taylor",59,"Computer Science"],["Tu",91,"Chemistry"],["Ghez",56,"Physics"]]))
        File "/tmp/file.py", line 9, in sort_physicists
          physicists.sort(key=lambda x: int(x.split(" ")[-1]))
        File "/tmp/file.py", line 9, in <lambda>
          physicists.sort(key=lambda x: int(x.split(" ")[-1]))
      ValueError: invalid literal for int() with base 10: 'Ghez'
    "stderr_id": !!int |-
      3
    "stdout":
    - ""
    - ""
    - ""
    "stdout_id": !!int |-
      0
  !!int "12":
    "stderr":
    - ""
    - ""
    - ""
    "stderr_id": !!int |-
      0
    "stdout":
    - |
      [['Peiris', 48, 'Physics'], ['Ghez', 56, 'Physics'], ['Strickland', 62, 'Physics']]
    - |
      [['Peiris', 48, 'Physics'], ['Ghez', 56, 'Physics'], ['Strickland', 62, 'Physics']]
    - |
      [['Ghez', 56, 'Physics']]
    "stdout_id": !!int |-
      6
"student_color":
  "student12": |-
    #d83034
  "student19": |-
    #f9e858
  "student20": |-
    #008dff
  "student36": |-
    #4ecb8d
  "student38": |-
    #c701ff
  "student43": |-
    #ffcd8e
  "student54": |-
    #003a7d
  "student57": |-
    #Ff73b6
  "student77": |-
    #ff7f50
