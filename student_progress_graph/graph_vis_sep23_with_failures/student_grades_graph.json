{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 5,
            "stdout_id": 3,
            "hover": "stdout:\n{'Alice': 20, 'Bob': 11}\n\n{'Alice': 20}\n\n{'Sam': 21, 'Ari': 67, 'Chris': 23}\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 0
        },
        {
            "stderr_id": 5,
            "stdout_id": 1,
            "hover": "stdout:\n{'Alice': [], 'Bob': []}\n\n{'Alice': []}\n\n{'Sam': [], 'Ari': [], 'Chris': []}\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 1
        },
        {
            "stderr_id": 0,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}))\n  File \"/tmp/file.py\", line 9, in student_grades\n    if grade in students[student]:\nTypeError: argument of type 'int' is not iterable\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}))\n  File \"/tmp/file.py\", line 9, in student_grades\n    if grade in students[student]:\nTypeError: argument of type 'int' is not iterable\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}))\n  File \"/tmp/file.py\", line 9, in student_grades\n    if grade in students[student]:\nTypeError: argument of type 'int' is not iterable\n",
            "color": "red",
            "id": 2
        },
        {
            "stderr_id": 1,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}))\n  File \"/tmp/file.py\", line 9, in student_grades\n    if student in grade:\nTypeError: argument of type 'int' is not iterable\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}))\n  File \"/tmp/file.py\", line 9, in student_grades\n    if student in grade:\nTypeError: argument of type 'int' is not iterable\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}))\n  File \"/tmp/file.py\", line 9, in student_grades\n    if student in grade:\nTypeError: argument of type 'int' is not iterable\n",
            "color": "grey",
            "id": 3
        },
        {
            "stderr_id": 3,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 6\n    print(student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}))\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}))\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}))\nIndentationError: expected an indented block after 'for' statement on line 5\n",
            "color": "red",
            "id": 4
        },
        {
            "stderr_id": 10,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 12\n    if student[1] >= grade[1] and student[1] <= grade\n                                                     ^\nSyntaxError: expected ':'\n\n  File \"/tmp/file.py\", line 12\n    if student[1] >= grade[1] and student[1] <= grade\n                                                     ^\nSyntaxError: expected ':'\n\n  File \"/tmp/file.py\", line 12\n    if student[1] >= grade[1] and student[1] <= grade\n                                                     ^\nSyntaxError: expected ':'\n",
            "color": "grey",
            "id": 5
        },
        {
            "stderr_id": 5,
            "stdout_id": 0,
            "hover": "stdout:\nNone\n\nNone\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 6
        },
        {
            "stderr_id": 2,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 10\n    students = [\nIndentationError: expected an indented block after 'if' statement on line 7\n\n  File \"/tmp/file.py\", line 10\n    students = [\nIndentationError: expected an indented block after 'if' statement on line 7\n\n  File \"/tmp/file.py\", line 10\n    students = [\nIndentationError: expected an indented block after 'if' statement on line 7\n",
            "color": "red",
            "id": 7
        },
        {
            "stderr_id": 7,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 8\n    elif grades[i] >= 80:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 6\n\n  File \"/tmp/file.py\", line 8\n    elif grades[i] >= 80:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 6\n\n  File \"/tmp/file.py\", line 8\n    elif grades[i] >= 80:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 6\n",
            "color": "grey",
            "id": 8
        },
        {
            "stderr_id": 8,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 9\n    elif grade >= 80:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 7\n\n  File \"/tmp/file.py\", line 9\n    elif grade >= 80:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 7\n\n  File \"/tmp/file.py\", line 9\n    elif grade >= 80:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 7\n",
            "color": "red",
            "id": 9
        },
        {
            "stderr_id": 9,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}))\n  File \"/tmp/file.py\", line 7, in student_grades\n    grades_dict[student] = grades[student]\nKeyError: 'Alice'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}))\n  File \"/tmp/file.py\", line 7, in student_grades\n    grades_dict[student] = grades[student]\nKeyError: 'Alice'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}))\n  File \"/tmp/file.py\", line 7, in student_grades\n    grades_dict[student] = grades[student]\nKeyError: 'Sam'\n",
            "color": "grey",
            "id": 10
        },
        {
            "stderr_id": 4,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 15\n    print(student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}))\nIndentationError: expected an indented block after 'elif' statement on line 14\n\n  File \"/tmp/file.py\", line 15\n    print(student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}))\nIndentationError: expected an indented block after 'elif' statement on line 14\n\n  File \"/tmp/file.py\", line 15\n    print(student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}))\nIndentationError: expected an indented block after 'elif' statement on line 14\n",
            "color": "blue",
            "id": 11
        },
        {
            "stderr_id": 6,
            "stdout_id": 2,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}))\n  File \"/tmp/file.py\", line 15, in student_grades\n    grades_\nNameError: name 'grades_' is not defined. Did you mean: 'grades'?\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}))\n  File \"/tmp/file.py\", line 15, in student_grades\n    grades_\nNameError: name 'grades_' is not defined. Did you mean: 'grades'?\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}))\n  File \"/tmp/file.py\", line 15, in student_grades\n    grades_\nNameError: name 'grades_' is not defined. Did you mean: 'grades'?\n",
            "color": "red",
            "id": 12
        }
    ],
    "adjacency": [
        [
            {
                "diff": 6,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student11",
                "hover": "username:student11\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -27,5 +27,9 @@\n from grades to+update+the+values+in students. \"\"\"\n\nFROM completion:\ndef student_grades(students, grades):\n    \"\"\"\n    by comparing two dictionaries: students and grades. If the values from students equals to the keys from grades, then sign the values from grades to students.\n    \"\"\"\n        for student in students:\n        for grade in grades:\n            if student == grade:\n                students[student] = grades[grade]\n    return students\n\nprint(student_grades(students, grades))\n\nTO completion:\ndef student_grades(students, grades):\n    \"\"\"\n    by comparing two dictionaries: students and grades. If the values from students equals to the keys from grades, then sign the values from grades to update the values in students.\n    \"\"\"\n        for student in students:\n        for grade in grades:\n            if student == grade:\n                students[student] = grades[grade]\n    return students\n\nprint(student_grades(students, grades))",
                "id": 0,
                "key": 0
            },
            {
                "diff": 0,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student11",
                "hover": "username:student11\nedge: (0->0)\ndiff:\n\n\nFROM completion:\ndef student_grades(students, grades):\n    \"\"\"\n    by comparing two dictionaries: students and grades. If the values from students equals to the keys from grades, then sign the values from grades to update the values in students.\n    \"\"\"\n        for student in students:\n        for grade in grades:\n            if student == grade:\n                students[student] = grades[grade]\n    return students\n\nprint(student_grades(students, grades))\n\nTO completion:\ndef student_grades(students, grades):\n    \"\"\"\n    by comparing two dictionaries: students and grades. If the values from students equals to the keys from grades, then sign the values from grades to update the values in students.\n    \"\"\"\n        for student in students:\n        for grade in grades:\n            if student == grade:\n                students[student] = grades[grade]\n    return students\n\nprint(student_grades(students, grades))\n",
                "id": 0,
                "key": 1
            }
        ],
        [
            {
                "diff": 1,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student16",
                "hover": "username:student16\nedge: (1->2)\ndiff:\n--- \n+++ \n@@ -30,4 +30,29 @@\n scores correspond to.+If+the+score+they+received+exists+in+the+second+dictionary,+use+the+letter+grade+list+from+the+second+dictionary+for+the+student+in+the+output \"\"\"\n\nFROM completion:\ndef student_grades(students, grades):\n    \"\"\"\n    return the grades a student receives in form of a dictionary based on the dictionary of scores they each received, and the letter grades the scores correspond to.\n    \"\"\"\n        student_grades = {}\n    for student in students:\n        student_grades[student] = []\n        for grade in grades:\n            if student in grades[grade]:\n                student_grades[student].append(grade)\n    return student_grades\n\n\nTO completion:\ndef student_grades(students, grades):\n    \"\"\"\n    return the grades a student receives in form of a dictionary based on the dictionary of scores they each received, and the letter grades the scores correspond to. If the score they received exists in the second dictionary, use the letter grade list from the second dictionary for the student in the output\n    \"\"\"\n        student_grades = {}\n    for student in students:\n        student_grades[student] = []\n        for grade in grades:\n            if grade in students[student]:\n                student_grades[student].append(grades[grade])\n    return student_grades\n\nprint(student_grades(students, grades))",
                "id": 2,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 3,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student2",
                "hover": "username:student2\nedge: (3->4)\ndiff:\n--- \n+++ \n@@ -5,26 +5,12 @@\n This function prints-a-new-dictionary+an+output containing+all the strings that appear-in-the-first-dictionary-the-lists-of-stings-that-appear-in-the-second-dictionary \"\"\"\n\nFROM completion:\ndef student_grades(students, grades):\n    \"\"\"\n    This function prints a new dictionary containing the strings that appear in the first dictionary the lists of stings that appear in the second dictionary\n    \"\"\"\n        new_dict = {}\n    for student in students:\n        new_dict[student] = []\n        for grade in grades:\n            if student in grade:\n                new_dict[student].append(grade)\n    return new_dict\n\nprint(student_grades(students, grades))\n\nTO completion:\ndef student_grades(students, grades):\n    \"\"\"\n    This function prints an output containing all the strings that appear\n    \"\"\"\n        for i in range(len(students)):\n        print(students[i], \":\", grades[i])\n\n",
                "id": 4,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 4,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student5",
                "hover": "username:student5\nedge: (5->6)\ndiff:\n--- \n+++ \n@@ -7,8 +7,8 @@\n student_grades will take-the-input+two+inputs of students and\n\nFROM completion:\ndef student_grades(students, grades):\n    \"\"\"\n    the function student_grades will take the input of students and grades. Students will have a name and then a score. Grades will have a number and a range of letter grades. The function should return the name of a student with the range of letter grade they got based on their score. \n    \"\"\"\n        # create an empty dictionary to store the student name and score\n    student_grades = {}\n    # create a for loop to go through the students list\n    for student in students:\n        # create a for loop to go through the grades list\n        for grade in grades:\n            # create an if statement to check if the student score is within the range of the letter grade\n            if student[1] >= grade[1] and student[1] <= grade\n\nTO completion:\ndef student_grades(students, grades):\n    \"\"\"\n    the function student_grades will take two inputs of students and grades. Students will have a name and then a score. Grades will have a number and a range of letter grades. The function should return the name of a student with the range of letter grade they got based on their score. \n    \"\"\"\n        # Create a dictionary with the students and their grades\n    student_grades = dict(zip(students, grades))\n    # Create a dictionary with the grades and their letter grades\n    grade_letter = {\n        'A': [90, 100],\n        'B': [80, 90],\n        'C': [70, 80],\n        'D': [60, 70],\n        'F': [0, 60]\n    }\n",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 7,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student5",
                "hover": "username:student5\nedge: (6->7)\ndiff:\n--- \n+++ \n@@ -8,8 +8,7 @@\n will take two-inputs-of+inputs: students and grades.@@ -27,12 +26,21 @@\n have a number+corresponding+to+the+students+scores and a range of letter-grades.+grades+tied+to+the+number. The function should\n\nFROM completion:\ndef student_grades(students, grades):\n    \"\"\"\n    the function student_grades will take two inputs of students and grades. Students will have a name and then a score. Grades will have a number and a range of letter grades. The function should return the name of a student with the range of letter grade they got based on their score. \n    \"\"\"\n        # Create a dictionary with the students and their grades\n    student_grades = dict(zip(students, grades))\n    # Create a dictionary with the grades and their letter grades\n    grade_letter = {\n        'A': [90, 100],\n        'B': [80, 90],\n        'C': [70, 80],\n        'D': [60, 70],\n        'F': [0, 60]\n    }\n\n\nTO completion:\ndef student_grades(students, grades):\n    \"\"\"\n    the function student_grades will take two inputs: students and grades. Students will have a name and then a score. Grades will have a number corresponding to the students scores and a range of letter grades tied to the number. The function should return the name of a student with the range of letter grade they got based on their score. \n    \"\"\"\n        for student in students:\n        for grade in grades:\n            if student[1] == grade[0]:\n                print(f\"{student[0]} got a {grade[1]}\")\n\nstudents = [\n    (\"John\", \"A\"),\n    (\"Bob\", \"C\"),\n    (\"Sally\", \"B\")\n]\n\ngrades = [\n    (90, \"A\"),\n    (80, \"B\"),\n   ",
                "id": 7,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 5,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student61",
                "hover": "username:student61\nedge: (8->9)\ndiff:\n--- \n+++ \n@@ -15,13 +15,12 @@\n based on that-number,+number the grades are returned-in-a-letter-format+from+the+brackets \"\"\"\n\nFROM completion:\ndef student_grades(students, grades):\n    \"\"\"\n    Function takes in names of students with a number and based on that number, the grades are returned in a letter format\n    \"\"\"\n        for i in range(len(students)):\n        if grades[i] >= 90:\n            print(students[i], \"got an A\")\n        elif grades[i] >= 80:\n            print(students[i], \"got a B\")\n        elif grades[i] >= 70:\n            print(students[i], \"got a C\")\n        elif grades[i] >= 60:\n            print\n\nTO completion:\ndef student_grades(students, grades):\n    \"\"\"\n    Function takes in names of students with a number and based on that number the grades are returned from the brackets\n    \"\"\"\n        for name in students:\n        grade = grades[name]\n        if grade >= 90:\n            print(name, \"got an A\")\n        elif grade >= 80:\n            print(name, \"got a B\")\n        elif grade >= 70:\n            print(name, \"got a C\")\n        elif grade >= 60:\n            print(name, \"got a D\")\n        else:\n            print(name, \"",
                "id": 9,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 2,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student74",
                "hover": "username:student74\nedge: (10->11)\ndiff:\n--- \n+++ \n@@ -9,7 +9,7 @@\n number. Then, the-numbers+students are assigned a@@ -32,5 +32,5 @@\n students should be-ignored+ignored. \"\"\"\n\nFROM completion:\ndef student_grades(students, grades):\n    \"\"\"\n    Assigns students to a number. Then, the numbers are assigned a letter grade. The code should keep track of the letter grade for each student. Any unassigned students should be ignored \n    \"\"\"\n        grades_dict = {}\n    for student in students:\n        grades_dict[student] = grades[student]\n    return grades_dict\n\n\nTO completion:\ndef student_grades(students, grades):\n    \"\"\"\n    Assigns students to a number. Then, the students are assigned a letter grade. The code should keep track of the letter grade for each student. Any unassigned students should be ignored.\n    \"\"\"\n        student_grades = {}\n    for student in students:\n        if student in grades:\n            if grades[student] >= 90:\n                student_grades[student] = 'A'\n            elif grades[student] >= 80:\n                student_grades[student] = 'B'\n            elif grades[student] >= 70:\n                student_grades[student] = 'C'\n            elif grades[student] >= 60:\n",
                "id": 11,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student74",
                "hover": "username:student74\nedge: (11->12)\ndiff:\n--- \n+++ \n@@ -2,8 +2,8 @@\n student_grades(students, grades): \"\"\"-Assigns students+correspond to a number.\n\nFROM completion:\ndef student_grades(students, grades):\n    \"\"\"\n    Assigns students to a number. Then, the students are assigned a letter grade. The code should keep track of the letter grade for each student. Any unassigned students should be ignored.\n    \"\"\"\n        student_grades = {}\n    for student in students:\n        if student in grades:\n            if grades[student] >= 90:\n                student_grades[student] = 'A'\n            elif grades[student] >= 80:\n                student_grades[student] = 'B'\n            elif grades[student] >= 70:\n                student_grades[student] = 'C'\n            elif grades[student] >= 60:\n\n\nTO completion:\ndef student_grades(students, grades):\n    \"\"\"\n    students correspond to a number. Then, the students are assigned a letter grade. The code should keep track of the letter grade for each student. Any unassigned students should be ignored.\n    \"\"\"\n        # create a dictionary to store the grades\n    grades_dict = {}\n    # loop through the students\n    for student in students:\n        # check if the student is in the grades dictionary\n        if student in grades_dict:\n            # if so, add the grade to the list of grades\n            grades_dict[student].append(grades[student])\n        else:\n            # if not, create a new list with the grade\n            grades_",
                "id": 12,
                "key": 0
            }
        ],
        []
    ]
}