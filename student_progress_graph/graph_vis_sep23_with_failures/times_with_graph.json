{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 6,
            "stdout_id": 1,
            "hover": "stdout:\n{30: [['Alice', 'Bob', 'Carol']]}\n\n{30: [['Alice', 'Bob', 'Carol']], 20: [['Alice', 'Bob']]}\n\n{10: [['Alice', 'Bob']], 5: [['Carol']]}\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 6,
            "stdout_id": 4,
            "hover": "stdout:\n{30: [30]}\n\n{30: [30], 20: [20]}\n\n{10: [10], 5: [5]}\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 1
        },
        {
            "stderr_id": 15,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    if meeting[1] not in times_with:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    if meeting[1] not in times_with:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    if meeting[1] not in times_with:\nTypeError: unhashable type: 'list'\n",
            "color": "blue",
            "id": 2
        },
        {
            "stderr_id": 14,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if person not in times_dict:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if person not in times_dict:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if person not in times_dict:\nTypeError: unhashable type: 'list'\n",
            "color": "blue",
            "id": 3
        },
        {
            "stderr_id": 16,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if name not in times_dict:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if name not in times_dict:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if name not in times_dict:\nTypeError: unhashable type: 'list'\n",
            "color": "red",
            "id": 4
        },
        {
            "stderr_id": 11,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if name in times:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if name in times:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if name in times:\nTypeError: unhashable type: 'list'\n",
            "color": "grey",
            "id": 5
        },
        {
            "stderr_id": 7,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 12\n    times[meetings[i][k]] +=\n                            ^\nSyntaxError: invalid syntax\n\n  File \"/tmp/file.py\", line 12\n    times[meetings[i][k]] +=\n                            ^\nSyntaxError: invalid syntax\n\n  File \"/tmp/file.py\", line 12\n    times[meetings[i][k]] +=\n                            ^\nSyntaxError: invalid syntax\n",
            "color": "red",
            "id": 6
        },
        {
            "stderr_id": 6,
            "stdout_id": 11,
            "hover": "stdout:\n{30: ['Alice', 'Bob', 'Carol']}\n\n{30: ['Alice', 'Bob', 'Carol'], 20: ['Alice', 'Bob']}\n\n{10: ['Alice', 'Bob'], 5: ['Carol']}\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 7
        },
        {
            "stderr_id": 10,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if time in times:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if time in times:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if time in times:\nTypeError: unhashable type: 'list'\n",
            "color": "blue",
            "id": 8
        },
        {
            "stderr_id": 8,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if person not in times:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if person not in times:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if person not in times:\nTypeError: unhashable type: 'list'\n",
            "color": "blue",
            "id": 9
        },
        {
            "stderr_id": 13,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if person not in times_with:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if person not in times_with:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if person not in times_with:\nTypeError: unhashable type: 'list'\n",
            "color": "red",
            "id": 10
        },
        {
            "stderr_id": 3,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 14, in times_with\n    d[name] = num\nUnboundLocalError: local variable 'num' referenced before assignment\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 14, in times_with\n    d[name] = num\nUnboundLocalError: local variable 'num' referenced before assignment\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 16, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 14, in times_with\n    d[name] = num\nUnboundLocalError: local variable 'num' referenced before assignment\n",
            "color": "blue",
            "id": 11
        },
        {
            "stderr_id": 5,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 11, in times_with\n    times[name] = meeting[name]\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 11, in times_with\n    times[name] = meeting[name]\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 11, in times_with\n    times[name] = meeting[name]\nIndexError: list index out of range\n",
            "color": "red",
            "id": 12
        },
        {
            "stderr_id": 1,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    if meeting[1] in times_with:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    if meeting[1] in times_with:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 12, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    if meeting[1] in times_with:\nTypeError: unhashable type: 'list'\n",
            "color": "grey",
            "id": 13
        },
        {
            "stderr_id": 2,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    times[meeting[1]] = meeting[0]\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    times[meeting[1]] = meeting[0]\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    times[meeting[1]] = meeting[0]\nTypeError: unhashable type: 'list'\n",
            "color": "blue",
            "id": 14
        },
        {
            "stderr_id": 6,
            "stdout_id": 0,
            "hover": "stdout:\n{'Alice': 30, 'Bob': 30, 'Carol': 30}\n\n{'Alice': 20, 'Bob': 20, 'Carol': 30}\n\n{'Alice': 10, 'Bob': 10, 'Carol': 5}\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 15
        },
        {
            "stderr_id": 0,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    if meetings[i][1][j] in times_with_dict:\nNameError: name 'times_with_dict' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    if meetings[i][1][j] in times_with_dict:\nNameError: name 'times_with_dict' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 7, in times_with\n    if meetings[i][1][j] in times_with_dict:\nNameError: name 'times_with_dict' is not defined\n",
            "color": "grey",
            "id": 16
        },
        {
            "stderr_id": 6,
            "stdout_id": 8,
            "hover": "stdout:\n{'Alice': 30, 'Bob': 30, 'Carol': 30}\n\n{'Alice': 50, 'Bob': 50, 'Carol': 30}\n\n{'Alice': 10, 'Bob': 10, 'Carol': 5}\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 17
        },
        {
            "stderr_id": 4,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if name in times_with:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if name in times_with:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if name in times_with:\nTypeError: unhashable type: 'list'\n",
            "color": "grey",
            "id": 18
        },
        {
            "stderr_id": 9,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if person in times_with:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if person in times_with:\nTypeError: unhashable type: 'list'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 13, in <module>\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\n  File \"/tmp/file.py\", line 8, in times_with\n    if person in times_with:\nTypeError: unhashable type: 'list'\n",
            "color": "grey",
            "id": 19
        },
        {
            "stderr_id": 6,
            "stdout_id": 9,
            "hover": "stdout:\n{'Alice': 1, 'Bob': 1, 'Carol': 1}\n\n{'Alice': 2, 'Bob': 2, 'Carol': 1}\n\n{'Alice': 1, 'Bob': 1, 'Carol': 1}\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 20
        },
        {
            "stderr_id": 6,
            "stdout_id": 6,
            "hover": "stdout:\n[[0, ['Alice', 'Bob', 'Carol']]]\n\n[[1, ['Alice', 'Bob', 'Carol']], [0, ['Alice', 'Bob']]]\n\n[[1, ['Alice', 'Bob']], [0, ['Carol']]]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 21
        },
        {
            "stderr_id": 6,
            "stdout_id": 10,
            "hover": "stdout:\nNone\n\nNone\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 22
        },
        {
            "stderr_id": 6,
            "stdout_id": 2,
            "hover": "stdout:\n['30:30']\n\n['30:30', '20:20']\n\n['10:10', '5:5']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 23
        },
        {
            "stderr_id": 6,
            "stdout_id": 5,
            "hover": "stdout:\n{'Alice': [30], 'Bob': [30], 'Carol': [30]}\n\n{'Alice': [30, 20], 'Bob': [30, 20], 'Carol': [30]}\n\n{'Alice': [10], 'Bob': [10], 'Carol': [5]}\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 24
        },
        {
            "stderr_id": 12,
            "stdout_id": 3,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 6\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']] ]))\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]))\nIndentationError: expected an indented block after 'for' statement on line 5\n\n  File \"/tmp/file.py\", line 6\n    print(times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]))\nIndentationError: expected an indented block after 'for' statement on line 5\n",
            "color": "blue",
            "id": 25
        },
        {
            "stderr_id": 6,
            "stdout_id": 7,
            "hover": "stdout:\n{}\n\n{}\n\n{}\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 26
        }
    ],
    "adjacency": [
        [
            {
                "diff": 15,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student23",
                "hover": "username:student23\n\ndiff:\n--- \n+++ \n@@ -29,13 +29,19 @@\n dictionary where the-age-given+key is the+name+and+appends+the value-for+which+is the-names-given+age+that+is+given. \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of the age as an integer, and names as a string. The output creates a dictionary where the age given is the value for the names given \n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        if meeting[0] in times:\n            times[meeting[0]].append(meeting[1])\n        else:\n            times[meeting[0]] = [meeting[1]]\n    return times\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of the age as an integer, and names as a string. The output creates a dictionary where the key is the name and appends the value which is the age that is given. \n    \"\"\"\n        dictionary = {}\n    for meeting in meetings:\n        for person in meeting:\n            if type(person) == int:\n                if meeting[0] in dictionary:\n                    dictionary[meeting[0]].append(person)\n                else:\n                    dictionary[meeting[0]] = [person]\n    return dictionary\n\nprint(times_with([['Melinda', 32], ['Melinda', 32], ['Melinda', 32], ['",
                "id": 1,
                "key": 0
            }
        ],
        [
            {
                "diff": 19,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student23",
                "hover": "username:student23\n\ndiff:\n--- \n+++ \n@@ -13,8 +13,6 @@\n consisting of the-age-as an integer, and@@ -40,7 +38,7 @@\n which is the-age+integar that is given.\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of the age as an integer, and names as a string. The output creates a dictionary where the key is the name and appends the value which is the age that is given. \n    \"\"\"\n        dictionary = {}\n    for meeting in meetings:\n        for person in meeting:\n            if type(person) == int:\n                if meeting[0] in dictionary:\n                    dictionary[meeting[0]].append(person)\n                else:\n                    dictionary[meeting[0]] = [person]\n    return dictionary\n\nprint(times_with([['Melinda', 32], ['Melinda', 32], ['Melinda', 32], ['\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of the an integer, and names as a string. The output creates a dictionary where the key is the name and appends the value which is the integar that is given. \n    \"\"\"\n        times_with = {}\n    for meeting in meetings:\n        if meeting[1] not in times_with:\n            times_with[meeting[1]] = [meeting[0]]\n        else:\n            times_with[meeting[1]].append(meeting[0])\n    return times_with\n",
                "id": 2,
                "key": 0
            }
        ],
        [
            {
                "diff": 18,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student23",
                "hover": "username:student23\n\ndiff:\n--- \n+++ \n@@ -12,7 +12,6 @@\n list, consisting of-the an integer, and@@ -32,7 +31,10 @@\n the name and-appends+updates+the+dictionary+with the value which\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of the an integer, and names as a string. The output creates a dictionary where the key is the name and appends the value which is the integar that is given. \n    \"\"\"\n        times_with = {}\n    for meeting in meetings:\n        if meeting[1] not in times_with:\n            times_with[meeting[1]] = [meeting[0]]\n        else:\n            times_with[meeting[1]].append(meeting[0])\n    return times_with\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of an integer, and names as a string. The output creates a dictionary where the key is the name and updates the dictionary with the value which is the integar that is given. \n    \"\"\"\n        times_with = {}\n    for meeting in meetings:\n        if meeting[1] not in times_with:\n            times_with[meeting[1]] = meeting[0]\n        else:\n            times_with[meeting[1]] += meeting[0]\n    return times_with\n",
                "id": 2,
                "key": 0
            },
            {
                "diff": 5,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student23",
                "hover": "username:student23\n\ndiff:\n--- \n+++ \n@@ -13,12 +13,20 @@\n consisting of an-integer,+integer+in+the+outer+list, and names as a-string.+string+in+the+inner+list. The output creates\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of an integer, and names as a string. The output creates a dictionary where the key is the name and updates the dictionary with the value which is the integar that is given. \n    \"\"\"\n        times_with = {}\n    for meeting in meetings:\n        if meeting[1] not in times_with:\n            times_with[meeting[1]] = meeting[0]\n        else:\n            times_with[meeting[1]] += meeting[0]\n    return times_with\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of an integer in the outer list, and names as a string in the inner list. The output creates a dictionary where the key is the name and updates the dictionary with the value which is the integar that is given. \n    \"\"\"\n        times_dict = {}\n    for meeting in meetings:\n        for person in meeting[1:]:\n            if person not in times_dict:\n                times_dict[person] = meeting[0]\n            else:\n                times_dict[person] += meeting[0]\n    return times_dict\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 11,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student23",
                "hover": "username:student23\n\ndiff:\n--- \n+++ \n@@ -37,7 +37,7 @@\n key is the-name+string and updates the@@ -48,7 +48,7 @@\n which is the-integar+integer that is given.\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of an integer in the outer list, and names as a string in the inner list. The output creates a dictionary where the key is the name and updates the dictionary with the value which is the integar that is given. \n    \"\"\"\n        times_dict = {}\n    for meeting in meetings:\n        for person in meeting[1:]:\n            if person not in times_dict:\n                times_dict[person] = meeting[0]\n            else:\n                times_dict[person] += meeting[0]\n    return times_dict\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of an integer in the outer list, and names as a string in the inner list. The output creates a dictionary where the key is the string and updates the dictionary with the value which is the integer that is given. \n    \"\"\"\n        times_dict = {}\n    for meeting in meetings:\n        for name in meeting[1:]:\n            if name not in times_dict:\n                times_dict[name] = meeting[0]\n            else:\n                times_dict[name] += meeting[0]\n    return times_dict\n",
                "id": 4,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 17,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student35",
                "hover": "username:student35\n\ndiff:\n--- \n+++ \n@@ -24,7 +24,23 @@\n list of lists.-The+A+dictionary+is+made+where+the+keys+are+string+names+and+the+values+are+their+corresponding+numbers.The number provided in@@ -67,22 +83,4 @@\n was initially assigned.-The-output-is-a-dictionary-where-the-keys-are-string-names-and-the-values-are-their-corresponding-numbers. \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. The output is a dictionary where the keys are string names and the values are their corresponding numbers.\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        for name in meeting[1:]:\n            if name in times:\n                times[name] += meeting[0]\n            else:\n                times[name] = meeting[0]\n    return times\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. A dictionary is made where the keys are string names and the values are their corresponding numbers.The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. \n    \"\"\"\n        times = {}\n    for i in range(len(meetings)):\n        for j in range(len(meetings[i])):\n            if type(meetings[i][j]) == int:\n                num = meetings[i][j]\n                for k in range(j+1, len(meetings[i])):\n                    if meetings[i][k] in times:\n                        times[meetings[i][k]] +=",
                "id": 6,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 16,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student40",
                "hover": "username:student40\n\ndiff:\n--- \n+++ \n@@ -36,6 +36,13 @@\n to each key.+each+string+will+be+its+own+key. if a key\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    the input will consist of a list of lists. an empty dictionary will be made. the strings will be keys in the dictionary and the numbers will be the values that correspond to each key. if a key appears twice, then the values will be added and will correspond to only one key.\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        if meeting[0] not in times:\n            times[meeting[0]] = meeting[1]\n        else:\n            times[meeting[0]] += meeting[1]\n    return times\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    the input will consist of a list of lists. an empty dictionary will be made. the strings will be keys in the dictionary and the numbers will be the values that correspond to each key. each string will be its own key. if a key appears twice, then the values will be added and will correspond to only one key.\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        for time in meeting:\n            if time in times:\n                times[time] += 1\n            else:\n                times[time] = 1\n    return times\n",
                "id": 8,
                "key": 0
            },
            {
                "diff": 12,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student50",
                "hover": "username:student50\n\ndiff:\n--- \n+++ \n@@ -14,11 +14,11 @@\n a dictionary with-a+each name-corresponding+pointing to-the+one number. If a\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    Input is an array containing a number and names. Return a dictionary with a name corresponding to the number. If a name in the list of names appears next to more than one number, add the two numbers together when returning a number.\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        if meeting[0] in times:\n            times[meeting[0]] += meeting[1]\n        else:\n            times[meeting[0]] = meeting[1]\n    return times\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    Input is an array containing a number and names. Return a dictionary with each name pointing to one number. If a name in the list of names appears next to more than one number, add the two numbers together when returning a number.\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        if meeting[0] in times:\n            times[meeting[0]] += meeting[1]\n        else:\n            times[meeting[0]] = meeting[1]\n    return times\n",
                "id": 7,
                "key": 0
            },
            {
                "diff": 7,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student50",
                "hover": "username:student50\n\ndiff:\n--- \n+++ \n@@ -13,35 +13,39 @@\n Return a dictionary-with+where each-name-pointing-to-one-number.-If-a name in the list of names-appears-next+points to+the+number.+If+there+are+several+lists+of+names+and+several+numbers,+if+names+appear+in more than one-number,+list, add the-two+corresponding numbers-together-when-returning-a-number.+together. \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    Input is an array containing a number and names. Return a dictionary with each name pointing to one number. If a name in the list of names appears next to more than one number, add the two numbers together when returning a number.\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        if meeting[0] in times:\n            times[meeting[0]] += meeting[1]\n        else:\n            times[meeting[0]] = meeting[1]\n    return times\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    Input is an array containing a number and names. Return a dictionary where each name in the list of names points to the number. If there are several lists of names and several numbers, if names appear in more than one list, add the corresponding numbers together.\n    \"\"\"\n        d = {}\n    for meeting in meetings:\n        if type(meeting) == int:\n            num = meeting\n        else:\n            for name in meeting:\n                if name in d:\n                    d[name] += num\n                else:\n                    d[name] = num\n    return d\n",
                "id": 11,
                "key": 0
            },
            {
                "diff": 3,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student79",
                "hover": "username:student79\n\ndiff:\n--- \n+++ \n@@ -44,6 +44,10 @@\n inner most lists+with+the+corresponding+number and return that\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists and return that dictionary.\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        times[meeting[0]] = meeting[1]\n    return times\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists with the corresponding number and return that dictionary.\n    \"\"\"\n        pass\n",
                "id": 22,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student40",
                "hover": "username:student40\n\ndiff:\n--- \n+++ \n@@ -16,32 +16,27 @@\n will be made.+each+string+within the-strings+list will be-keys-in-the-dictionary-and+a+key. the numbers+outside+of+each+list will be the-values-that-correspond-to+value+for each-key.-each-string-will-be-its-own key. if a\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    the input will consist of a list of lists. an empty dictionary will be made. the strings will be keys in the dictionary and the numbers will be the values that correspond to each key. each string will be its own key. if a key appears twice, then the values will be added and will correspond to only one key.\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        for time in meeting:\n            if time in times:\n                times[time] += 1\n            else:\n                times[time] = 1\n    return times\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    the input will consist of a list of lists. an empty dictionary will be made. each string within the list will be a  key. the numbers outside of each list will be the value for each key. if a key appears twice, then the values will be added and will correspond to only one key.\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        for person in meeting[1:]:\n            if person not in times:\n                times[person] = meeting[0]\n            else:\n                times[person] += meeting[0]\n    return times\n",
                "id": 9,
                "key": 0
            }
        ],
        [
            {
                "diff": 0,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student40",
                "hover": "username:student40\n\ndiff:\n\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    the input will consist of a list of lists. an empty dictionary will be made. each string within the list will be a  key. the numbers outside of each list will be the value for each key. if a key appears twice, then the values will be added and will correspond to only one key.\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        for person in meeting[1:]:\n            if person not in times:\n                times[person] = meeting[0]\n            else:\n                times[person] += meeting[0]\n    return times\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    the input will consist of a list of lists. an empty dictionary will be made. each string within the list will be a  key. the numbers outside of each list will be the value for each key. if a key appears twice, then the values will be added and will correspond to only one key.\n    \"\"\"\n        times_with = {}\n    for meeting in meetings:\n        for person in meeting:\n            if person not in times_with:\n                times_with[person] = 1\n            else:\n                times_with[person] += 1\n    return times_with\n\nprint(times_with(meetings))\n",
                "id": 10,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 20,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student50",
                "hover": "username:student50\n\ndiff:\n--- \n+++ \n@@ -2,18 +2,15 @@\n times_with(meetings): \"\"\" Input-is-an-array-containing-a-number-and-names.+contains+lists+of+names+with+numbers+besides+them. Return-a-dictionary-where each name in@@ -21,31 +18,35 @@\n list of names-points-to+with the-number.+number+as+a+dictionary. If-there-are-several-lists-of-names-and-several-numbers,-if-names-appear+a+name+appears in more than one-list,+list+of+names, add the-corresponding-numbers-together.+number+besides+the+list+together+and+return+that+number+in+the+dictionary. \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    Input is an array containing a number and names. Return a dictionary where each name in the list of names points to the number. If there are several lists of names and several numbers, if names appear in more than one list, add the corresponding numbers together.\n    \"\"\"\n        d = {}\n    for meeting in meetings:\n        if type(meeting) == int:\n            num = meeting\n        else:\n            for name in meeting:\n                if name in d:\n                    d[name] += num\n                else:\n                    d[name] = num\n    return d\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    Input contains lists of names with numbers besides them. Return each name in the list of names with the number as a dictionary. If a name appears in more than one list of names, add the number besides the list together and return that number in the dictionary.\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        for name in meeting:\n            if name in times:\n                times[name] += meeting[name]\n            else:\n                times[name] = meeting[name]\n    return times\n",
                "id": 12,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 9,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student59",
                "hover": "username:student59\n\ndiff:\n--- \n+++ \n@@ -54,5 +54,13 @@\n place from the-list+list.+returns+a+dictionary+of+keys+and+their+values \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    takes a list of lists as an input. creates an empty dictionary. for each list in the inputted list, takes each value in the [1] place and make it a key and add it to the created dictionary, then make the value of that key the value in the [0] place from the list\n    \"\"\"\n        times_with = {}\n    for meeting in meetings:\n        if meeting[1] in times_with:\n            times_with[meeting[1]] += meeting[0]\n        else:\n            times_with[meeting[1]] = meeting[0]\n    return times_with\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    takes a list of lists as an input. creates an empty dictionary. for each list in the inputted list, takes each value in the [1] place and make it a key and add it to the created dictionary, then make the value of that key the value in the [0] place from the list. returns a dictionary of keys and their values\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        times[meeting[1]] = meeting[0]\n    return times\n",
                "id": 14,
                "key": 0
            }
        ],
        [
            {
                "diff": 27,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student59",
                "hover": "username:student59\n\ndiff:\n--- \n+++ \n@@ -9,58 +9,38 @@\n as an input.-creates-an-empty-dictionary. for each list-in+inside the inputted list,-takes-each+there+is+a value-in+and+a+list+of+names.+returns+a+dictionary+of the-[1]-place-and-make-it-a-key-and-add-it-to-the-created-dictionary,-then-make+names+with the value of-that-key the value in the-[0]-place+list+they+came from-the-list.-returns-a-dictionary-of-keys-and-their-values \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    takes a list of lists as an input. creates an empty dictionary. for each list in the inputted list, takes each value in the [1] place and make it a key and add it to the created dictionary, then make the value of that key the value in the [0] place from the list. returns a dictionary of keys and their values\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        times[meeting[1]] = meeting[0]\n    return times\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    takes a list of lists as an input. for each list inside the inputted list, there is a value and a list of names. returns a dictionary of the names with the value of the value in the list they came from\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        for name in meeting[1]:\n            times[name] = meeting[0]\n    return times\n",
                "id": 15,
                "key": 0
            }
        ],
        [
            {
                "diff": 25,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student69",
                "hover": "username:student69\n\ndiff:\n--- \n+++ \n@@ -51,4 +51,19 @@\n is a value.+if+the+name+appears+more+than+once,+add+the+new+number+to+the+previous+number \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. \n    \"\"\"\n        return {name: time for time, names in meetings for name in names}\n\nprint(times_with([[1, [\"A\", \"B\", \"C\"]], [2, [\"A\", \"B\", \"D\"]]]))\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. if the name appears more than once, add the new number to the previous number\n    \"\"\"\n        times_dict = {}\n    for meeting in meetings:\n        for name in meeting[1]:\n            if name in times_dict:\n                times_dict[name] += meeting[0]\n            else:\n                times_dict[name] = meeting[0]\n    return times_dict\n\nprint(times_with([[1, [\"A\", \"B\"]], [2, [\"A\", \"C\"]]]))\n",
                "id": 17,
                "key": 0
            }
        ],
        [
            {
                "diff": 26,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student60",
                "hover": "username:student60\n\ndiff:\n--- \n+++ \n@@ -56,4 +56,38 @@\n added to that.+The+function+then+would+return+a+dictionary+containing+the+total+value+assigned+to+every+string.+Given+[+[30,+['Alice',+'Bob',+'Carol']]+],+the+function+would+return+{+'Alice':+30,+'Bob':+30,+'Carol':+30+} \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. \n    \"\"\"\n        for i in range(len(meetings)):\n        for j in range(len(meetings[i][1])):\n            if meetings[i][1][j] in times_with_dict:\n                times_with_dict[meetings[i][1][j]] += meetings[i][0]\n            else:\n                times_with_dict[meetings[i][1][j]] = meetings[i][0]\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. The function then would return a dictionary containing the total value assigned to every string. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would return { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\n\n    \"\"\"\n        dic = {}\n    for i in meetings:\n        for j in i[1]:\n            if j in dic:\n                dic[j] += i[0]\n            else:\n                dic[j] = i[0]\n    return dic\n",
                "id": 17,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 4,
                "color": "#Ff73b6",
                "arrow_color": "#Ff73b6",
                "username": "student63",
                "hover": "username:student63\n\ndiff:\n--- \n+++ \n@@ -36,10 +36,12 @@\n the dictionary has-one-of+a+name+from the-names+name+lists as the key,@@ -62,6 +64,12 @@\n list that the+list+of+names+that+has+the name is found\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has one of the names as the key, and the value is the sum of the numbers that are the first entry of each list that the name is found in. \n    \"\"\"\n        times_with = {}\n    for meeting in meetings:\n        for name in meeting[1:]:\n            if name in times_with:\n                times_with[name] += meeting[0]\n            else:\n                times_with[name] = meeting[0]\n    return times_with\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has a name from the name lists as the key, and the value is the sum of the numbers that are the first entry of each list that the list of names that has the name is found in. \n    \"\"\"\n        times_with = {}\n    for meeting in meetings:\n        for name in meeting[1]:\n            if name not in times_with:\n                times_with[name] = meeting[0]\n            else:\n                times_with[name] += meeting[0]\n    return times_with\n\nprint(times_with([[10, [\"A\", \"B\", \"C\"]], [20, [\"A\", \"B\", \"D",
                "id": 17,
                "key": 0
            }
        ],
        [
            {
                "diff": 23,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student64",
                "hover": "username:student64\n\ndiff:\n--- \n+++ \n@@ -1,12 +1,20 @@\n def times_with(meetings): \"\"\"-In+For+each+meeting+in+meetings,+look+at+index+1+for list-inside of-meetings,-create+persons.+Create a new dictionary@@ -19,10 +27,12 @@\n the value as-number-outside+index+0 of-lists.+list+of+persons. For next list\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    In list inside of meetings, create a new dictionary with the key as name and the value as number outside of lists. For next list of lists, add number to keys in dictionary. If keys do not already exist, create new key.\n    \"\"\"\n        times_with = {}\n    for meeting in meetings:\n        for person in meeting:\n            if person in times_with:\n                times_with[person] += 1\n            else:\n                times_with[person] = 1\n    return times_with\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    For each meeting in meetings, look at index 1 for list of persons. Create a new dictionary with the key as name and the value as index 0 of list of persons. For next list of lists, add number to keys in dictionary. If keys do not already exist, create new key.\n    \"\"\"\n        times_with = {}\n    for meeting in meetings:\n        for person in meeting[1]:\n            if person in times_with:\n                times_with[person] += 1\n            else:\n                times_with[person] = 1\n    return times_with\n",
                "id": 20,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 24,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student75",
                "hover": "username:student75\n\ndiff:\n--- \n+++ \n@@ -17,5 +17,5 @@\n and output of-val1,2,3:val1+val:val1 \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1,2,3:val1\n    \"\"\"\n        #print(meetings)\n    times = []\n    for meeting in meetings:\n        times.append(meeting[0])\n    times.sort()\n    #print(times)\n    #print(meetings)\n    for meeting in meetings:\n        meeting[0] = times.index(meeting[0])\n    #print(meetings)\n    return meetings\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val:val1\n    \"\"\"\n        #print(meetings)\n    #print(meetings[0])\n    #print(meetings[0][0])\n    #print(meetings[0][1])\n    #print(meetings[0][1][0])\n    #print(meetings[0][1][1])\n    #print(meetings[0][1][2])\n    #print(meetings[0][1][3])\n    #",
                "id": 22,
                "key": 0
            }
        ],
        [
            {
                "diff": 10,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student75",
                "hover": "username:student75\n\ndiff:\n--- \n+++ \n@@ -17,5 +17,7 @@\n and output of-val:val1+val1:val1,+val2:val1,+val3:val1 \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val:val1\n    \"\"\"\n        #print(meetings)\n    #print(meetings[0])\n    #print(meetings[0][0])\n    #print(meetings[0][1])\n    #print(meetings[0][1][0])\n    #print(meetings[0][1][1])\n    #print(meetings[0][1][2])\n    #print(meetings[0][1][3])\n    #\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1:val1, val2:val1, val3:val1\n    \"\"\"\n        return [str(meetings[0]) + \":\" + str(meetings[0]) for meetings in meetings]\n",
                "id": 23,
                "key": 0
            },
            {
                "diff": 2,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student79",
                "hover": "username:student79\n\ndiff:\n--- \n+++ \n@@ -49,7 +49,5 @@\n corresponding number and-return-that-dictionary.+return. \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists with the corresponding number and return that dictionary.\n    \"\"\"\n        pass\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists with the corresponding number and return.\n    \"\"\"\n        # create an empty dictionary\n    # loop through the list\n    # create a key with the name and the value with the number\n    # return the dictionary\n    pass\n",
                "id": 22,
                "key": 0
            },
            {
                "diff": 6,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student79",
                "hover": "username:student79\n\ndiff:\n--- \n+++ \n@@ -24,6 +24,10 @@\n next to them+in+an+outer+list they will have\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists with the corresponding number and return.\n    \"\"\"\n        # create an empty dictionary\n    # loop through the list\n    # create a key with the name and the value with the number\n    # return the dictionary\n    pass\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them in an outer list they will have an integer. your goal is to create a dictionary with the names in the inner most lists with the corresponding number and return.\n    \"\"\"\n        # your code here\n    pass\n\n",
                "id": 22,
                "key": 1
            },
            {
                "diff": 21,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student79",
                "hover": "username:student79\n\ndiff:\n--- \n+++ \n@@ -42,12 +42,15 @@\n dictionary with the+keys+of names in the inner most lists+and with the corresponding\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them in an outer list they will have an integer. your goal is to create a dictionary with the names in the inner most lists with the corresponding number and return.\n    \"\"\"\n        # your code here\n    pass\n\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them in an outer list they will have an integer. your goal is to create a dictionary with the keys of names in the inner most lists and with the corresponding number and return.\n    \"\"\"\n        # create a dictionary\n    # loop through the list\n    # check if the name is in the dictionary\n    # if it is, add the number to the value\n    # if it is not, add the name as a key and the number as a value\n    # return the dictionary\n    times = {}\n    for meeting in meetings:\n        if meeting[0] in times:\n            times[meeting[0]] += meeting[1]\n       ",
                "id": 22,
                "key": 2
            }
        ],
        [
            {
                "diff": 14,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student75",
                "hover": "username:student75\n\ndiff:\n--- \n+++ \n@@ -17,7 +17,5 @@\n and output of-val1:val1,-val2:val1,-val3:val1+val(1,2,3):val0 \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1:val1, val2:val1, val3:val1\n    \"\"\"\n        return [str(meetings[0]) + \":\" + str(meetings[0]) for meetings in meetings]\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val(1,2,3):val0\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        time = meeting[0]\n        people = meeting[1]\n        for person in people:\n            if person in times:\n                times[person].append(time)\n            else:\n                times[person] = [time]\n    return times\n",
                "id": 24,
                "key": 0
            }
        ],
        [
            {
                "diff": 22,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student75",
                "hover": "username:student75\n\ndiff:\n--- \n+++ \n@@ -17,5 +17,8 @@\n and output of-val(1,2,3):val0+val(1,2,3):val0,+print+without+\"[]\" \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val(1,2,3):val0\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        time = meeting[0]\n        people = meeting[1]\n        for person in people:\n            if person in times:\n                times[person].append(time)\n            else:\n                times[person] = [time]\n    return times\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val(1,2,3):val0, print without \"[]\"\n    \"\"\"\n        for meeting in meetings:\n        print(str(meeting[1]).replace(\"'\", \"\").replace(\"[\", \"\").replace(\"]\", \"\") + \":\" + str(meeting[0]))\n",
                "id": 25,
                "key": 0
            }
        ],
        [
            {
                "diff": 13,
                "color": "#8a2be2",
                "arrow_color": "#8a2be2",
                "username": "student75",
                "hover": "username:student75\n\ndiff:\n--- \n+++ \n@@ -17,8 +17,9 @@\n and output of-val(1,2,3):val0,-print-without-\"[]\"+val1:val0,+increase+val1+++1 \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val(1,2,3):val0, print without \"[]\"\n    \"\"\"\n        for meeting in meetings:\n        print(str(meeting[1]).replace(\"'\", \"\").replace(\"[\", \"\").replace(\"]\", \"\") + \":\" + str(meeting[0]))\n\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1:val0, increase val1 + 1\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        for person in meeting[1]:\n            if person not in times:\n                times[person] = 0\n            times[person] += meeting[0]\n    return times\n",
                "id": 17,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student79",
                "hover": "username:student79\n\ndiff:\n--- \n+++ \n@@ -45,19 +45,7 @@\n most lists and-add-to-the-list-if-the-same-name-already-has-a-value-in-the+return+that dictionary. \"\"\"\n\nFROM completion:\ndef times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists and add to the list if the same name already has a value in the dictionary.\n    \"\"\"\n        times_with = {}\n    for meeting in meetings:\n        for person in meeting:\n            if type(person) == str:\n                if person in times_with:\n                    times_with[person] += 1\n                else:\n                    times_with[person] = 1\n    return times_with\n\nprint(times_with([[\"sam\", 3], [\"dean\", 3], [\"carl\", 2], [\"dean\", 2],\n\nTO completion:\ndef times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists and return that dictionary.\n    \"\"\"\n        times = {}\n    for meeting in meetings:\n        times[meeting[0]] = meeting[1]\n    return times\n",
                "id": 7,
                "key": 0
            }
        ]
    ]
}