{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 18,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 7\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\nIndentationError: expected an indented block after 'if' statement on line 6\n\n  File \"/tmp/file.py\", line 7\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\nIndentationError: expected an indented block after 'if' statement on line 6\n\n  File \"/tmp/file.py\", line 7\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\nIndentationError: expected an indented block after 'if' statement on line 6\n",
            "color": "grey",
            "id": 0
        },
        {
            "stderr_id": 10,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 9\n    topScores([[60, \"Fred\"], [80, \"Barney\"], [90, \"Wilma\"], [70, \"Betty\"]])\nIndentationError: expected an indented block after 'if' statement on line 6\n\n  File \"/tmp/file.py\", line 9\n    topScores([[60, \"Fred\"], [80, \"Barney\"], [90, \"Wilma\"], [70, \"Betty\"]])\nIndentationError: expected an indented block after 'if' statement on line 6\n\n  File \"/tmp/file.py\", line 9\n    topScores([[60, \"Fred\"], [80, \"Barney\"], [90, \"Wilma\"], [70, \"Betty\"]])\nIndentationError: expected an indented block after 'if' statement on line 6\n",
            "color": "red",
            "id": 1
        },
        {
            "stderr_id": 20,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\n  File \"/tmp/file.py\", line 7, in topScores\n    if i[1] > 76:\nTypeError: '>' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\n  File \"/tmp/file.py\", line 7, in topScores\n    if i[1] > 76:\nTypeError: '>' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\n  File \"/tmp/file.py\", line 7, in topScores\n    if i[1] > 76:\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
            "color": "grey",
            "id": 2
        },
        {
            "stderr_id": 15,
            "stdout_id": 25,
            "hover": "stdout:\n['Rachel', 'Penelope', 'Alex']\n\n['Kip', 'Sam', 'Ben', 'Alex', 'Ro', 'Ira']\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 3
        },
        {
            "stderr_id": 15,
            "stdout_id": 18,
            "hover": "stdout:\n['Rachel', 'Penelope', 'Alex']\n\n['Sam', 'Ro', 'Kip', 'Ira', 'Ben', 'Alex']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 4
        },
        {
            "stderr_id": 15,
            "stdout_id": 19,
            "hover": "stdout:\n['Penelope', 'Alex', 'Rachel']\n\n['Ben', 'Alex', 'Ro', 'Ira', 'Kip', 'Sam']\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 5
        },
        {
            "stderr_id": 15,
            "stdout_id": 21,
            "hover": "stdout:\n['Penelope', 'Alex']\n\n['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 6
        },
        {
            "stderr_id": 11,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\n  File \"/tmp/file.py\", line 6, in topScores\n    top = math.ceil(len(lst) / 2)\nNameError: name 'math' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\n  File \"/tmp/file.py\", line 6, in topScores\n    top = math.ceil(len(lst) / 2)\nNameError: name 'math' is not defined\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 11, in <module>\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\n  File \"/tmp/file.py\", line 6, in topScores\n    top = math.ceil(len(lst) / 2)\nNameError: name 'math' is not defined\n",
            "color": "blue",
            "id": 7
        },
        {
            "stderr_id": 1,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\n  File \"/tmp/file.py\", line 7, in topScores\n    lst[i].sort(reverse=True)\nTypeError: '<' not supported between instances of 'int' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\n  File \"/tmp/file.py\", line 7, in topScores\n    lst[i].sort(reverse=True)\nTypeError: '<' not supported between instances of 'int' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 10, in <module>\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\n  File \"/tmp/file.py\", line 7, in topScores\n    lst[i].sort(reverse=True)\nTypeError: '<' not supported between instances of 'int' and 'str'\n",
            "color": "blue",
            "id": 8
        },
        {
            "stderr_id": 15,
            "stdout_id": 20,
            "hover": "stdout:\n['Penelope', 'Alex', 'Rachel']\n\n['Ben', 'Alex', 'Ro', 'Ira']\n\n['Bob', 'Rachel']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 9
        },
        {
            "stderr_id": 15,
            "stdout_id": 6,
            "hover": "stdout:\n[[100, 'Penelope'], [99, 'Alex'], [80, 'Rachel']]\n\n[[100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [95, 'Ira'], [92, 'Kip']]\n\n[[65, 'Bob'], [65, 'Rachel']]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 10
        },
        {
            "stderr_id": 15,
            "stdout_id": 26,
            "hover": "stdout:\n['Penelope', 'Alex', 'Rachel']\n\n['Ben', 'Alex', 'Ro', 'Ira']\n\n['Rachel', 'Bob']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 11
        },
        {
            "stderr_id": 8,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\n  File \"/tmp/file.py\", line 8, in topScores\n    lst[i] = sorted(lst[i], reverse=True)\nTypeError: '<' not supported between instances of 'int' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\n  File \"/tmp/file.py\", line 8, in topScores\n    lst[i] = sorted(lst[i], reverse=True)\nTypeError: '<' not supported between instances of 'int' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\n  File \"/tmp/file.py\", line 8, in topScores\n    lst[i] = sorted(lst[i], reverse=True)\nTypeError: '<' not supported between instances of 'int' and 'str'\n",
            "color": "red",
            "id": 12
        },
        {
            "stderr_id": 24,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\n  File \"/tmp/file.py\", line 6, in topScores\n    if score >= 80:\nTypeError: '>=' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\n  File \"/tmp/file.py\", line 6, in topScores\n    if score >= 80:\nTypeError: '>=' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 9, in <module>\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\n  File \"/tmp/file.py\", line 6, in topScores\n    if score >= 80:\nTypeError: '>=' not supported between instances of 'str' and 'int'\n",
            "color": "grey",
            "id": 13
        },
        {
            "stderr_id": 15,
            "stdout_id": 10,
            "hover": "stdout:\n['Penelope', 'Alex', 'Rachel']\n\n['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 14
        },
        {
            "stderr_id": 15,
            "stdout_id": 7,
            "hover": "stdout:\nNone\n\nNone\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 15
        },
        {
            "stderr_id": 6,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 12\n    if lst[i][1] > 80 and lst[i][1] > highestScore\n                                                  ^\nSyntaxError: expected ':'\n\n  File \"/tmp/file.py\", line 12\n    if lst[i][1] > 80 and lst[i][1] > highestScore\n                                                  ^\nSyntaxError: expected ':'\n\n  File \"/tmp/file.py\", line 12\n    if lst[i][1] > 80 and lst[i][1] > highestScore\n                                                  ^\nSyntaxError: expected ':'\n",
            "color": "red",
            "id": 16
        },
        {
            "stderr_id": 15,
            "stdout_id": 5,
            "hover": "stdout:\n[[100, 'Penelope'], [99, 'Alex'], [80, 'Rachel']]\n\n[[100, 'Ben'], [99, 'Alex'], [97, 'Ro']]\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 17
        },
        {
            "stderr_id": 3,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 13\n    newLst[i] = str(newLst[\n                          ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 13\n    newLst[i] = str(newLst[\n                          ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 13\n    newLst[i] = str(newLst[\n                          ^\nSyntaxError: '[' was never closed\n",
            "color": "blue",
            "id": 18
        },
        {
            "stderr_id": 14,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\n  File \"/tmp/file.py\", line 5, in topScores\n    return [x for x in lst if int(x.split()[1]) > 80]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [x for x in lst if int(x.split()[1]) > 80]\nAttributeError: 'list' object has no attribute 'split'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\n  File \"/tmp/file.py\", line 5, in topScores\n    return [x for x in lst if int(x.split()[1]) > 80]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [x for x in lst if int(x.split()[1]) > 80]\nAttributeError: 'list' object has no attribute 'split'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\n  File \"/tmp/file.py\", line 5, in topScores\n    return [x for x in lst if int(x.split()[1]) > 80]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [x for x in lst if int(x.split()[1]) > 80]\nAttributeError: 'list' object has no attribute 'split'\n",
            "color": "grey",
            "id": 19
        },
        {
            "stderr_id": 15,
            "stdout_id": 27,
            "hover": "stdout:\n['Matt', 'Rachel', 'Pete']\n\n['Matt', 'Sam', 'Hans']\n\n['Bob', 'Rachel', 'Alex']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 20
        },
        {
            "stderr_id": 15,
            "stdout_id": 11,
            "hover": "stdout:\n['Rachel', 'Penelope', 'Alex']\n\n['Sam', 'Ro', 'Kip', 'Ira']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 21
        },
        {
            "stderr_id": 15,
            "stdout_id": 15,
            "hover": "stdout:\n['Alex', 'Penelope', 'Rachel']\n\n['Ben', 'Ira', 'Kip', 'Ro', 'Sam']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 22
        },
        {
            "stderr_id": 15,
            "stdout_id": 22,
            "hover": "stdout:\n['Rachel', 'Penelope', 'Alex']\n\n['Sam', 'Ro', 'Kip', 'Ira', 'Ben']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 23
        },
        {
            "stderr_id": 2,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\n  File \"/tmp/file.py\", line 7, in topScores\n    i.sort(reverse=True)\nTypeError: '<' not supported between instances of 'int' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\n  File \"/tmp/file.py\", line 7, in topScores\n    i.sort(reverse=True)\nTypeError: '<' not supported between instances of 'int' and 'str'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\n  File \"/tmp/file.py\", line 7, in topScores\n    i.sort(reverse=True)\nTypeError: '<' not supported between instances of 'int' and 'str'\n",
            "color": "blue",
            "id": 24
        },
        {
            "stderr_id": 5,
            "stdout_id": 4,
            "hover": "stdout:\nNone\n\n\nNone\n\nstderr:\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\n  File \"/tmp/file.py\", line 14, in topScores\n    return new\nNameError: name 'new' is not defined\n\n",
            "color": "blue",
            "id": 25
        },
        {
            "stderr_id": 7,
            "stdout_id": 4,
            "hover": "stdout:\nNone\n\n\nNone\n\nstderr:\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 15, in <module>\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\n  File \"/tmp/file.py\", line 14, in topScores\n    new_\nNameError: name 'new_' is not defined\n\n",
            "color": "blue",
            "id": 26
        },
        {
            "stderr_id": 16,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\n  File \"/tmp/file.py\", line 5, in topScores\n    return [x[0] for x in sorted(lst, key=lambda x: x[1], reverse=True) if x[1] > 80]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [x[0] for x in sorted(lst, key=lambda x: x[1], reverse=True) if x[1] > 80]\nTypeError: '>' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\n  File \"/tmp/file.py\", line 5, in topScores\n    return [x[0] for x in sorted(lst, key=lambda x: x[1], reverse=True) if x[1] > 80]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [x[0] for x in sorted(lst, key=lambda x: x[1], reverse=True) if x[1] > 80]\nTypeError: '>' not supported between instances of 'str' and 'int'\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 6, in <module>\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\n  File \"/tmp/file.py\", line 5, in topScores\n    return [x[0] for x in sorted(lst, key=lambda x: x[1], reverse=True) if x[1] > 80]\n  File \"/tmp/file.py\", line 5, in <listcomp>\n    return [x[0] for x in sorted(lst, key=lambda x: x[1], reverse=True) if x[1] > 80]\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
            "color": "grey",
            "id": 27
        },
        {
            "stderr_id": 15,
            "stdout_id": 24,
            "hover": "stdout:\n['Penelope', 'Alex']\n\n['Kip', 'Ben', 'Alex', 'Ro', 'Ira']\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 28
        },
        {
            "stderr_id": 15,
            "stdout_id": 13,
            "hover": "stdout:\n['Rachel', 'Alex', 'Penelope']\n\n['Sam', 'Kip', 'Ira', 'Ro', 'Alex', 'Ben']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 29
        },
        {
            "stderr_id": 21,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 12\n    top_scores.append(lst[i][1\n                            ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 12\n    top_scores.append(lst[i][1\n                            ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 12\n    top_scores.append(lst[i][1\n                            ^\nSyntaxError: '[' was never closed\n",
            "color": "grey",
            "id": 30
        },
        {
            "stderr_id": 9,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\n  File \"/tmp/file.py\", line 11, in topScores\n    if lst[i][0] - lst[i+1][0] < 10:\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\n  File \"/tmp/file.py\", line 11, in topScores\n    if lst[i][0] - lst[i+1][0] < 10:\nIndexError: list index out of range\n\nTraceback (most recent call last):\n  File \"/tmp/file.py\", line 14, in <module>\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\n  File \"/tmp/file.py\", line 11, in topScores\n    if lst[i][0] - lst[i+1][0] < 10:\nIndexError: list index out of range\n",
            "color": "blue",
            "id": 31
        },
        {
            "stderr_id": 15,
            "stdout_id": 12,
            "hover": "stdout:\n['Pete', 'Matt', 'Rachel', 'Alex', 'Penelope']\n\n['Hans', 'Matt', 'Sam', 'Kip', 'Ira', 'Ro', 'Alex', 'Ben']\n\n['Alex', 'Bob', 'Rachel']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 32
        },
        {
            "stderr_id": 15,
            "stdout_id": 23,
            "hover": "stdout:\n['Penelope', 'Alex', 'Rachel', 'Matt', 'Pete']\n\n['Ben', 'Alex', 'Ro', 'Ira', 'Kip', 'Sam', 'Matt', 'Hans']\n\n['Bob', 'Rachel', 'Alex']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 33
        },
        {
            "stderr_id": 15,
            "stdout_id": 0,
            "hover": "stdout:\n[[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex']]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 34
        },
        {
            "stderr_id": 4,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 14\n    if len(l\n          ^\nSyntaxError: '(' was never closed\n\n  File \"/tmp/file.py\", line 14\n    if len(l\n          ^\nSyntaxError: '(' was never closed\n\n  File \"/tmp/file.py\", line 14\n    if len(l\n          ^\nSyntaxError: '(' was never closed\n",
            "color": "blue",
            "id": 35
        },
        {
            "stderr_id": 12,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 10\n    return [lst[0][1], lst[1][\n                             ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 10\n    return [lst[0][1], lst[1][\n                             ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 10\n    return [lst[0][1], lst[1][\n                             ^\nSyntaxError: '[' was never closed\n",
            "color": "blue",
            "id": 36
        },
        {
            "stderr_id": 15,
            "stdout_id": 2,
            "hover": "stdout:\nNone\n\n['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\n\nNone\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 37
        },
        {
            "stderr_id": 15,
            "stdout_id": 28,
            "hover": "stdout:\n['Matt', 'Rachel', 'Penelope', 'Pete', 'Alex']\n\n['Kip', 'Matt', 'Sam', 'Ben', 'Alex', 'Ro', 'Hans', 'Ira']\n\n['Bob', 'Rachel', 'Alex']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 38
        },
        {
            "stderr_id": 15,
            "stdout_id": 9,
            "hover": "stdout:\n['Pete', 'Matt', 'Rachel', 'Alex', 'Penelope']\n\n['Kip', 'Ira', 'Ro', 'Alex', 'Ben']\n\n['Alex', 'Bob', 'Rachel']\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 39
        },
        {
            "stderr_id": 0,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 14\n    newLst.append(lst[i][1\n                        ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 14\n    newLst.append(lst[i][1\n                        ^\nSyntaxError: '[' was never closed\n\n  File \"/tmp/file.py\", line 14\n    newLst.append(lst[i][1\n                        ^\nSyntaxError: '[' was never closed\n",
            "color": "blue",
            "id": 40
        },
        {
            "stderr_id": 15,
            "stdout_id": 17,
            "hover": "stdout:\n[80, 50, 100, 76, 99]\n\n[80, 97, 76, 92, 95, 65, 100, 99]\n\n[65, 65, 33]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 41
        },
        {
            "stderr_id": 15,
            "stdout_id": 1,
            "hover": "stdout:\n[['Penelope', 100], ['Alex', 99], ['Rachel', 80], ['Matt', 76], ['Pete', 50]]\n\n[['Ben', 100], ['Alex', 99], ['Ro', 97], ['Ira', 95], ['Kip', 92], ['Sam', 80], ['Matt', 76], ['Hans', 65]]\n\n[['Bob', 65], ['Rachel', 65], ['Alex', 33]]\n\nstderr:\n_no_stderr_",
            "color": "blue",
            "id": 42
        },
        {
            "stderr_id": 19,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 12\n    if\n      ^\nSyntaxError: invalid syntax\n\n  File \"/tmp/file.py\", line 12\n    if\n      ^\nSyntaxError: invalid syntax\n\n  File \"/tmp/file.py\", line 12\n    if\n      ^\nSyntaxError: invalid syntax\n",
            "color": "blue",
            "id": 43
        },
        {
            "stderr_id": 15,
            "stdout_id": 14,
            "hover": "stdout:\n[[50, 'Pete'], [76, 'Matt'], [80, 'Rachel'], [99, 'Alex'], [100, 'Penelope']]\n\n[[65, 'Hans'], [76, 'Matt'], [80, 'Sam'], [92, 'Kip'], [95, 'Ira'], [97, 'Ro'], [99, 'Alex'], [100, 'Ben']]\n\n[[33, 'Alex'], [65, 'Bob'], [65, 'Rachel']]\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 44
        },
        {
            "stderr_id": 26,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 7\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\nIndentationError: expected an indented block after 'for' statement on line 6\n\n  File \"/tmp/file.py\", line 7\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\nIndentationError: expected an indented block after 'for' statement on line 6\n\n  File \"/tmp/file.py\", line 7\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\nIndentationError: expected an indented block after 'for' statement on line 6\n",
            "color": "grey",
            "id": 45
        },
        {
            "stderr_id": 25,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 12\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\nIndentationError: expected an indented block after 'for' statement on line 11\n\n  File \"/tmp/file.py\", line 12\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\nIndentationError: expected an indented block after 'for' statement on line 11\n\n  File \"/tmp/file.py\", line 12\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\nIndentationError: expected an indented block after 'for' statement on line 11\n",
            "color": "blue",
            "id": 46
        },
        {
            "stderr_id": 23,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 8\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\nIndentationError: expected an indented block after 'if' statement on line 7\n\n  File \"/tmp/file.py\", line 8\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\nIndentationError: expected an indented block after 'if' statement on line 7\n\n  File \"/tmp/file.py\", line 8\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\nIndentationError: expected an indented block after 'if' statement on line 7\n",
            "color": "blue",
            "id": 47
        },
        {
            "stderr_id": 13,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 11\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\nIndentationError: expected an indented block after 'if' statement on line 10\n\n  File \"/tmp/file.py\", line 11\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\nIndentationError: expected an indented block after 'if' statement on line 10\n\n  File \"/tmp/file.py\", line 11\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\nIndentationError: expected an indented block after 'if' statement on line 10\n",
            "color": "red",
            "id": 48
        },
        {
            "stderr_id": 27,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 14\n    print(topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]))\nIndentationError: expected an indented block after 'for' statement on line 13\n\n  File \"/tmp/file.py\", line 14\n    print(topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]))\nIndentationError: expected an indented block after 'for' statement on line 13\n\n  File \"/tmp/file.py\", line 14\n    print(topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]))\nIndentationError: expected an indented block after 'for' statement on line 13\n",
            "color": "blue",
            "id": 49
        },
        {
            "stderr_id": 22,
            "stdout_id": 16,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 11\n    for i in range(len(l\n                      ^\nSyntaxError: '(' was never closed\n\n  File \"/tmp/file.py\", line 11\n    for i in range(len(l\n                      ^\nSyntaxError: '(' was never closed\n\n  File \"/tmp/file.py\", line 11\n    for i in range(len(l\n                      ^\nSyntaxError: '(' was never closed\n",
            "color": "blue",
            "id": 50
        }
    ],
    "adjacency": [
        [
            {
                "diff": 55,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student14",
                "hover": "username:student14\n\ndiff:\n--- \n+++ \n@@ -1,14 +1,16 @@\n def topScores(lst): \"\"\"-output+if the-first-four-names-with+string+contains a number above-80+80,+print+its+paired+name \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    output the first four names with a number above 80\n    \"\"\"\n        for i in range(len(lst)):\n        if lst[i][1] > 80:\n            print(lst[i][0])\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    if the string contains a number above 80, print its paired name\n    \"\"\"\n        for i in range(len(lst)):\n        if int(lst[i][1]) > 80:\n            print(lst[i][0])\n",
                "id": 0,
                "key": 0
            },
            {
                "diff": 58,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student14",
                "hover": "username:student14\n\ndiff:\n--- \n+++ \n@@ -3,14 +3,23 @@\n \"\"\" if the+first+item+in+the string-contains-a-number-above+is+equal+to+or+greater+than 80, print-its-paired-name+the+second+item+in+the+string \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    if the string contains a number above 80, print its paired name\n    \"\"\"\n        for i in range(len(lst)):\n        if int(lst[i][1]) > 80:\n            print(lst[i][0])\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    if the first item in the string is equal to or greater than 80, print the second item in the string\n    \"\"\"\n        for i in lst:\n        if i[0] >= 80:\n            print(i[1])\n\ntopScores([[60, \"Fred\"], [80, \"Barney\"], [90, \"Wilma\"], [70, \"Betty\"]])\n",
                "id": 1,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 45,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student15",
                "hover": "username:student15\n\ndiff:\n--- \n+++ \n@@ -9,6 +9,9 @@\n if the number+in+index+0 is greater than\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in lst, if the number is greater than 76, adds the name to a list. Returns the list.\n    \"\"\"\n        top_scores = []\n    for i in lst:\n        if i[1] > 76:\n            top_scores.append(i[0])\n    return top_scores\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in lst, if the number in index 0 is greater than 76, adds the name to a list. Returns the list.\n    \"\"\"\n        topScores = []\n    for i in lst:\n        if i[0] > 76:\n            topScores.append(i[1])\n    return topScores\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 29,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student15",
                "hover": "username:student15\n\ndiff:\n--- \n+++ \n@@ -22,6 +22,11 @@\n to a list.+Sorts+in+reverse+alphabetical+order. Returns the list.\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in lst, if the number in index 0 is greater than 76, adds the name to a list. Returns the list.\n    \"\"\"\n        topScores = []\n    for i in lst:\n        if i[0] > 76:\n            topScores.append(i[1])\n    return topScores\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in lst, if the number in index 0 is greater than 76, adds the name to a list. Sorts in reverse alphabetical order. Returns the list. \n    \"\"\"\n        topScores = []\n    for i in lst:\n        if i[0] > 76:\n            topScores.append(i[1])\n    topScores.sort(reverse = True)\n    return topScores\n",
                "id": 4,
                "key": 0
            },
            {
                "diff": 2,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student31",
                "hover": "username:student31\n\ndiff:\n--- \n+++ \n@@ -39,5 +39,12 @@\n a minimum of-80.+80,+sorted+from+highest+corresponding+score+to+lowest. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Returns a list of the names whose corresponding scores were the highest, and were a minimum of 80.\n    \"\"\"\n        topScores = []\n    for i in lst:\n        if i[0] >= 80:\n            topScores.append(i[1])\n    return topScores\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Returns a list of the names whose corresponding scores were the highest, and were a minimum of 80, sorted from highest corresponding score to lowest.\n    \"\"\"\n        # Create a list of the names whose corresponding scores were the highest, and were a minimum of 80\n    top_scores = [i[1] for i in lst if i[0] >= 80]\n    # Sort the list from highest corresponding score to lowest\n    top_scores.sort(key=lambda x: x[0], reverse=True)\n    return top_scores\n",
                "id": 4,
                "key": 1
            },
            {
                "diff": 25,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student53",
                "hover": "username:student53\n\ndiff:\n--- \n+++ \n@@ -30,4 +30,30 @@\n this new list+in+the+order+of+the+highest+zeroth+index.+If+the+list+is+larger+than+4+items,+then+return+only+4+items+with+the+highest+zeroth+index. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    taken lst, loop each list and if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i[1])\n    return new_lst\n\nprint(topScores([[80, \"John\"], [90, \"Sam\"], [70, \"Jane\"], [60, \"Joe\"]]))\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    taken lst, loop each list and if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list in the order of the highest zeroth index. If the list is larger than 4 items, then return only 4 items with the highest zeroth index. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i[1])\n    new_lst.sort(reverse=True)\n    if len(new_lst) > 4:\n        return new_lst[:4]\n    else:\n        return new_lst\n",
                "id": 21,
                "key": 0
            },
            {
                "diff": 4,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student55",
                "hover": "username:student55\n\ndiff:\n--- \n+++ \n@@ -33,23 +33,31 @@\n This function returns+all the name+of+the+students+with+grades+higher+or+equal+to+80.+The+order+of+the+return+is from the highest grade to the-lowest,-if-only-the-grades-are-higher-or-equal-than-80.+lowest+one. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns the name from the highest grade to the lowest, if only the grades are higher or equal than 80.\n    \"\"\"\n        # your code here\n    return [i[1] for i in lst if i[0] >= 80]\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns all the name of the students with grades higher or equal to 80. The order of the return is from the highest grade to the lowest one.\n    \"\"\"\n        # your code here\n    return [name for grade, name in sorted(lst, key=lambda x: x[0], reverse=True) if grade >= 80]\n",
                "id": 5,
                "key": 0
            }
        ],
        [
            {
                "diff": 43,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student15",
                "hover": "username:student15\n\ndiff:\n--- \n+++ \n@@ -25,8 +25,14 @@\n Sorts in reverse-alphabetical-order.+numerical+order+by+the+number+in+index+0. Returns the list.\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in lst, if the number in index 0 is greater than 76, adds the name to a list. Sorts in reverse alphabetical order. Returns the list. \n    \"\"\"\n        topScores = []\n    for i in lst:\n        if i[0] > 76:\n            topScores.append(i[1])\n    topScores.sort(reverse = True)\n    return topScores\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in lst, if the number in index 0 is greater than 76, adds the name to a list. Sorts in reverse numerical order by the number in index 0. Returns the list. \n    \"\"\"\n        top = []\n    for i in lst:\n        if i[0] > 76:\n            top.append(i[1])\n    top.sort(reverse = True)\n    return top\n",
                "id": 4,
                "key": 0
            },
            {
                "diff": 27,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student15",
                "hover": "username:student15\n\ndiff:\n--- \n+++ \n@@ -18,7 +18,9 @@\n 76, adds the-name+[num,+name]+list to a list.@@ -33,7 +35,15 @@\n in index 0.+Adds+the+names+to+a+second+list. Returns the+second list. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in lst, if the number in index 0 is greater than 76, adds the name to a list. Sorts in reverse numerical order by the number in index 0. Returns the list. \n    \"\"\"\n        top = []\n    for i in lst:\n        if i[0] > 76:\n            top.append(i[1])\n    top.sort(reverse = True)\n    return top\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in lst, if the number in index 0 is greater than 76, adds the [num, name] list to a list. Sorts in reverse numerical order by the number in index 0. Adds the names to a second list. Returns the second list. \n    \"\"\"\n        topScores = []\n    names = []\n    for i in lst:\n        if i[0] > 76:\n            topScores.append(i)\n    topScores.sort(reverse = True)\n    for i in topScores:\n        names.append(i[1])\n    return names\n",
                "id": 5,
                "key": 0
            },
            {
                "diff": 9,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student31",
                "hover": "username:student31\n\ndiff:\n--- \n+++ \n@@ -22,7 +22,17 @@\n a string name.-Returns+Sorts+this+list+from+highest+integer+score+to+lowest,+and+returns a list of@@ -32,19 +42,8 @@\n corresponding scores were-the-highest,-and-were a minimum of-80,-sorted-from-highest-corresponding-score-to-lowest.+80. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Returns a list of the names whose corresponding scores were the highest, and were a minimum of 80, sorted from highest corresponding score to lowest.\n    \"\"\"\n        # Create a list of the names whose corresponding scores were the highest, and were a minimum of 80\n    top_scores = [i[1] for i in lst if i[0] >= 80]\n    # Sort the list from highest corresponding score to lowest\n    top_scores.sort(key=lambda x: x[0], reverse=True)\n    return top_scores\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Sorts this list from highest integer score to lowest, and returns a list of the names whose corresponding scores were a minimum of 80.\n    \"\"\"\n        lst.sort(key=lambda x: x[0], reverse=True)\n    return [x[1] for x in lst if x[0] >= 80]\n",
                "id": 5,
                "key": 1
            }
        ],
        [
            {
                "diff": 53,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student15",
                "hover": "username:student15\n\ndiff:\n--- \n+++ \n@@ -15,7 +15,7 @@\n is greater than-76,+80, adds the [num,\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in lst, if the number in index 0 is greater than 76, adds the [num, name] list to a list. Sorts in reverse numerical order by the number in index 0. Adds the names to a second list. Returns the second list. \n    \"\"\"\n        topScores = []\n    names = []\n    for i in lst:\n        if i[0] > 76:\n            topScores.append(i)\n    topScores.sort(reverse = True)\n    for i in topScores:\n        names.append(i[1])\n    return names\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in lst, if the number in index 0 is greater than 80, adds the [num, name] list to a list. Sorts in reverse numerical order by the number in index 0. Adds the names to a second list. Returns the second list. \n    \"\"\"\n        top = []\n    names = []\n    for i in lst:\n        if i[0] > 80:\n            top.append(i)\n    top.sort(reverse = True)\n    for i in top:\n        names.append(i[1])\n    return names\n",
                "id": 6,
                "key": 0
            },
            {
                "diff": 11,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student31",
                "hover": "username:student31\n\ndiff:\n--- \n+++ \n@@ -45,5 +45,12 @@\n a minimum of-80.+80,+with+a+maximum+list+length+of+5. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Sorts this list from highest integer score to lowest, and returns a list of the names whose corresponding scores were a minimum of 80.\n    \"\"\"\n        lst.sort(key=lambda x: x[0], reverse=True)\n    return [x[1] for x in lst if x[0] >= 80]\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Sorts this list from highest integer score to lowest, and returns a list of the names whose corresponding scores were a minimum of 80, with a maximum list length of 5.\n    \"\"\"\n        lst.sort(key=lambda x: x[0], reverse=True)\n    return [x[1] for x in lst if x[0] >= 80][:5]\n",
                "id": 14,
                "key": 0
            },
            {
                "diff": 46,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student55",
                "hover": "username:student55\n\ndiff:\n--- \n+++ \n@@ -33,11 +33,10 @@\n This function returns-all the-name+names of-the+5 students with grades\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns all the name of the students with grades higher or equal to 80. The order of the return is from the highest grade to the lowest one.\n    \"\"\"\n        # your code here\n    return [name for grade, name in sorted(lst, key=lambda x: x[0], reverse=True) if grade >= 80]\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns the names of 5 students with grades higher or equal to 80. The order of the return is from the highest grade to the lowest one.\n    \"\"\"\n        return [name for grade, name in sorted(lst, reverse=True) if grade >= 80][:5]\n",
                "id": 14,
                "key": 1
            }
        ],
        [
            {
                "diff": 35,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student15",
                "hover": "username:student15\n\ndiff:\n--- \n+++ \n@@ -5,27 +5,10 @@\n each list in-lst,-if+list,+sorts the-number-in-index-0-is-greater-than-80,-adds-the-[num,-name]-list-to-a-list.-Sorts-in+listsin reverse numerical order@@ -35,9 +18,28 @@\n in index 0.+Divides+the+length+of+the+list+by+2,+rounding+up+to+create+number+\"top\". Adds the+top+\"top\" names+in+the+list to a second\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in lst, if the number in index 0 is greater than 80, adds the [num, name] list to a list. Sorts in reverse numerical order by the number in index 0. Adds the names to a second list. Returns the second list. \n    \"\"\"\n        top = []\n    names = []\n    for i in lst:\n        if i[0] > 80:\n            top.append(i)\n    top.sort(reverse = True)\n    for i in top:\n        names.append(i[1])\n    return names\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\". Adds the top \"top\" names in the list to a second list. Returns the second list.\n    \"\"\"\n        lst.sort(key=lambda x: x[0], reverse=True)\n    top = math.ceil(len(lst) / 2)\n    topList = []\n    for i in range(top):\n        topList.append(lst[i][1])\n    return topList\n",
                "id": 7,
                "key": 0
            },
            {
                "diff": 30,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student55",
                "hover": "username:student55\n\ndiff:\n--- \n+++ \n@@ -48,6 +48,8 @@\n grades are higher+or+equal than 80. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns the name from the highest grade to the lowest, if only the grades are higher than 80.\n    \"\"\"\n        # create a list of tuples\n    lst = [(x[0], x[1]) for x in lst]\n    # sort the list of tuples\n    lst.sort(reverse=True)\n    # create a list of names\n    lst = [x[1] for x in lst if x[0] > 80]\n    # return the list\n    return lst\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns the name from the highest grade to the lowest, if only the grades are higher or equal than 80.\n    \"\"\"\n        # your code here\n    return [i[1] for i in lst if i[0] >= 80]\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student15",
                "hover": "username:student15\n\ndiff:\n--- \n+++ \n@@ -1,6 +1,10 @@\n def topScores(lst): \"\"\"+Does+not+use+math. For each list\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\". Adds the top \"top\" names in the list to a second list. Returns the second list.\n    \"\"\"\n        lst.sort(key=lambda x: x[0], reverse=True)\n    top = math.ceil(len(lst) / 2)\n    topList = []\n    for i in range(top):\n        topList.append(lst[i][1])\n    return topList\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Does not use math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\". Adds the top \"top\" names in the list to a second list. Returns the second list.\n    \"\"\"\n        top = []\n    for i in range(len(lst)):\n        lst[i].sort(reverse=True)\n        top.append(lst[i][:int(len(lst[i])/2 + 0.5)])\n    return top\n",
                "id": 8,
                "key": 0
            }
        ],
        [
            {
                "diff": 62,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student15",
                "hover": "username:student15\n\ndiff:\n--- \n+++ \n@@ -1,9 +1,7 @@\n def topScores(lst): \"\"\"-Does-not-use+Imports math. For each\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Does not use math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\". Adds the top \"top\" names in the list to a second list. Returns the second list.\n    \"\"\"\n        top = []\n    for i in range(len(lst)):\n        lst[i].sort(reverse=True)\n        top.append(lst[i][:int(len(lst[i])/2 + 0.5)])\n    return top\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Imports math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\". Adds the top \"top\" names in the list to a second list. Returns the second list.\n    \"\"\"\n        import math\n    lst.sort(key=lambda x: x[0], reverse=True)\n    top = math.ceil(len(lst)/2)\n    topScores = []\n    for i in range(top):\n        topScores.append(lst[i][1])\n    return topScores\n",
                "id": 9,
                "key": 0
            }
        ],
        [
            {
                "diff": 56,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student15",
                "hover": "username:student15\n\ndiff:\n--- \n+++ \n@@ -33,7 +33,22 @@\n to create number-\"top\".+\"top\",+if+the+number+of+the+length+of+the+list+is+even,+adds+one+to+top. Adds the top\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Imports math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\". Adds the top \"top\" names in the list to a second list. Returns the second list.\n    \"\"\"\n        import math\n    lst.sort(key=lambda x: x[0], reverse=True)\n    top = math.ceil(len(lst)/2)\n    topScores = []\n    for i in range(top):\n        topScores.append(lst[i][1])\n    return topScores\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Imports math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\", if the number of the length of the list is even, adds one to top. Adds the top \"top\" names in the list to a second list. Returns the second list.\n    \"\"\"\n        import math\n    lst.sort(key=lambda x: x[0], reverse=True)\n    top = math.ceil(len(lst) / 2)\n    if len(lst) % 2 == 0:\n        top += 1\n    return lst[:top]\n",
                "id": 10,
                "key": 0
            },
            {
                "diff": 40,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student15",
                "hover": "username:student15\n\ndiff:\n--- \n+++ \n@@ -64,9 +64,5 @@\n Returns the second-list,-but-only-the-names.+list. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Imports math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\", if the number of the length of the list is even, adds one to top. Adds the top \"top\" names in the list to a second list. Returns the second list, but only the names.\n    \"\"\"\n        import math\n    lst.sort(key=lambda x: x[0], reverse=True)\n    top = math.ceil(len(lst)/2)\n    topList = []\n    for i in range(top):\n        topList.append(lst[i][1])\n    return topList\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Imports math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\", if the number of the length of the list is even, adds one to top. Adds the top \"top\" names in the list to a second list. Returns the second list.\n    \"\"\"\n        import math\n    lst.sort(reverse=True)\n    top = math.ceil(len(lst)/2)\n    topList = []\n    for i in range(top):\n        topList.append(lst[i][1])\n    return topList\n",
                "id": 11,
                "key": 0
            }
        ],
        [
            {
                "diff": 51,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student15",
                "hover": "username:student15\n\ndiff:\n--- \n+++ \n@@ -64,5 +64,9 @@\n Returns the second-list.+list,+but+only+the+names. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Imports math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\", if the number of the length of the list is even, adds one to top. Adds the top \"top\" names in the list to a second list. Returns the second list.\n    \"\"\"\n        import math\n    lst.sort(key=lambda x: x[0], reverse=True)\n    top = math.ceil(len(lst) / 2)\n    if len(lst) % 2 == 0:\n        top += 1\n    return lst[:top]\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Imports math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\", if the number of the length of the list is even, adds one to top. Adds the top \"top\" names in the list to a second list. Returns the second list, but only the names.\n    \"\"\"\n        import math\n    lst.sort(key=lambda x: x[0], reverse=True)\n    top = math.ceil(len(lst)/2)\n    topList = []\n    for i in range(top):\n        topList.append(lst[i][1])\n    return topList\n",
                "id": 9,
                "key": 0
            }
        ],
        [
            {
                "diff": 37,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student15",
                "hover": "username:student15\n\ndiff:\n--- \n+++ \n@@ -1,8 +1,6 @@\n def topScores(lst): \"\"\"-Imports-math. For each list@@ -10,7 +8,8 @@\n list, sorts the-listsin+lists+in reverse numerical order@@ -20,49 +19,51 @@\n in index 0.-Divides-the-length-of-the-list-by-2,-rounding-up-to-create-number-\"top\",-if-the-number-of+If the length of the list is-even,+5, adds-one-to-top.-Adds the top-\"top\"+3 names-in-the-list to a second list.-Returns+If the+length+of+the+list+is+8,+adds+the+top+5+names+to+a second list.+If+the+length+of+the+list+is+3,+adds+none+of+the+names \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Imports math. For each list in list, sorts the listsin reverse numerical order by the number in index 0. Divides the length of the list by 2, rounding up to create number \"top\", if the number of the length of the list is even, adds one to top. Adds the top \"top\" names in the list to a second list. Returns the second list.\n    \"\"\"\n        import math\n    lst.sort(reverse=True)\n    top = math.ceil(len(lst)/2)\n    topList = []\n    for i in range(top):\n        topList.append(lst[i][1])\n    return topList\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    For each list in list, sorts the lists in reverse numerical order by the number in index 0. If the length of the list is 5, adds the top 3 names to a second list. If the length of the list is 8, adds the top 5 names to a second list. If the length of the list is 3, adds none of the names\n\n\n    \"\"\"\n        for i in range(len(lst)):\n        lst[i] = sorted(lst[i], reverse=True)\n    top_scores = []\n    for i in range(len(lst)):\n        if len(lst[i]) == 5:\n            top_scores.append(lst[i][0:3])\n        elif len(lst[i]) == 8:\n            top",
                "id": 12,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 16,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student24",
                "hover": "username:student24\n\ndiff:\n--- \n+++ \n@@ -1,18 +1,28 @@\n def topScores(lst): \"\"\"-Return-the-name-of-a-person-in+Check+each+list+inside the list-who-scored-80+given,+and+if+the+list[0]+is+greater+than or-above.+equal+to+80,+return+a+list+of+that+list[1] \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Return the name of a person in the list who scored 80 or above.\n    \"\"\"\n        for name, score in lst:\n        if score >= 80:\n            return name\n    return None\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Check each list inside the list given, and if the list[0] is greater than or equal to 80, return a list of that list[1]\n    \"\"\"\n        return [lst[i][1] for i in range(len(lst)) if lst[i][0] >= 80]\n",
                "id": 3,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 33,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student39",
                "hover": "username:student39\n\ndiff:\n--- \n+++ \n@@ -30,4 +30,6 @@\n the highest scores+above+80 \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    The goal for the function topScores is when provided a list including a numerical scores and names is to return the names of those who have the highest scores \n    \"\"\"\n        # The first step is to sort the list in descending order\n    lst.sort(reverse = True)\n    # The next step is to create a list that will contain the names of the top scorers\n    top_scorers = []\n    # The next step is to create a variable that will contain the highest score\n    top_score = lst[0][0]\n    # The next step is to create a for loop that will go through the\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    The goal for the function topScores is when provided a list including a numerical scores and names is to return the names of those who have the highest scores above 80\n    \"\"\"\n        #create a list to store the names of the people with the highest scores\n    topScores = []\n    #create a variable to store the highest score\n    highestScore = 0\n    #loop through the list\n    for i in range(len(lst)):\n        #if the score is greater than 80 and greater than the current highest score\n        if lst[i][1] > 80 and lst[i][1] > highestScore",
                "id": 16,
                "key": 0
            },
            {
                "diff": 28,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student45",
                "hover": "username:student45\n\ndiff:\n--- \n+++ \n@@ -89,4 +89,6 @@\n 1 to finalLst.+Return+finalLst. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse=True)\n    if len(newLst) > 5:\n        newLst = newLst[:5]\n    finalLst = []\n    for i in newLst:\n        finalLst.append(i[1])\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. Return finalLst.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse=True)\n    if len(newLst) > 5:\n        newLst = newLst[:5]\n    finalLst = []\n    for i in newLst:\n        finalLst.append(i[1])\n",
                "id": 15,
                "key": 0
            },
            {
                "diff": 54,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student45",
                "hover": "username:student45\n\ndiff:\n--- \n+++ \n@@ -45,7 +45,11 @@\n newLst. Then sort-newLst.+newLst+from+highest+to+lowest. If there are\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. Return finalLst.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse=True)\n    if len(newLst) > 5:\n        newLst = newLst[:5]\n    finalLst = []\n    for i in newLst:\n        finalLst.append(i[1])\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. Return finalLst.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse = True)\n    if len(newLst) > 5:\n        newLst = newLst[:5]\n    finalLst = []\n    for i in newLst:\n        finalLst.append(i[1])\n",
                "id": 15,
                "key": 1
            },
            {
                "diff": 20,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student45",
                "hover": "username:student45\n\ndiff:\n--- \n+++ \n@@ -93,6 +93,9 @@\n 1 to finalLst.-Return+When+that's+finished,+return finalLst. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. Return finalLst.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse = True)\n    if len(newLst) > 5:\n        newLst = newLst[:5]\n    finalLst = []\n    for i in newLst:\n        finalLst.append(i[1])\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. When that's finished, return finalLst.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse=True)\n    if len(newLst) > 5:\n        newLst = newLst[:5]\n    finalLst = []\n    for i in newLst:\n        finalLst.append(i[1])\n",
                "id": 15,
                "key": 2
            },
            {
                "diff": 39,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student45",
                "hover": "username:student45\n\ndiff:\n--- \n+++ \n@@ -93,9 +93,9 @@\n 1 to finalLst.-When-that's-finished,-return+The+output+should+be finalLst. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. When that's finished, return finalLst.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse=True)\n    if len(newLst) > 5:\n        newLst = newLst[:5]\n    finalLst = []\n    for i in newLst:\n        finalLst.append(i[1])\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. The output should be finalLst.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse=True)\n    if len(newLst) > 5:\n        newLst = newLst[:5]\n    finalLst = []\n    for i in newLst:\n        finalLst.append(i[1])\n",
                "id": 15,
                "key": 3
            },
            {
                "diff": 19,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student45",
                "hover": "username:student45\n\ndiff:\n--- \n+++ \n@@ -93,9 +93,6 @@\n 1 to finalLst.-The-output-should-be+Output finalLst. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. The output should be finalLst.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse=True)\n    if len(newLst) > 5:\n        newLst = newLst[:5]\n    finalLst = []\n    for i in newLst:\n        finalLst.append(i[1])\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. Output finalLst.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse = True)\n    if len(newLst) > 5:\n        newLst = newLst[:5]\n    finalLst = []\n    for i in newLst:\n        finalLst.append(i[1])\n",
                "id": 15,
                "key": 4
            },
            {
                "diff": 31,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student65",
                "hover": "username:student65\n\ndiff:\n--- \n+++ \n@@ -13,6 +13,14 @@\n 2 as inputs.+First,+sort+the+lists+by+the+first+entry. If the first@@ -47,22 +55,4 @@\n at the end.-The-final-list-should-be-ordered-by-names-with-the-largest-score-to-names-with-the-smallest-score. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    This function has a list of lists of length 2 as inputs. If the first entry in the list (the score) is greater than or equal to 80, add the second entry in the list (the name) to a list to be output at the end. The final list should be ordered by names with the largest score to names with the smallest score.\n    \"\"\"\n        # Your code here\n    pass\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    This function has a list of lists of length 2 as inputs. First, sort the lists by the first entry. If the first entry in the list (the score) is greater than or equal to 80, add the second entry in the list (the name) to a list to be output at the end. \n    \"\"\"\n        lst.sort()\n    output = []\n    for i in lst:\n        if i[0] >= 80:\n            output.append(i[1])\n    return output\n",
                "id": 29,
                "key": 0
            },
            {
                "diff": 50,
                "color": "#00ced1",
                "arrow_color": "#00ced1",
                "username": "student9",
                "hover": "username:student9\n\ndiff:\n--- \n+++ \n@@ -6,7 +6,8 @@\n finds the highest-value+three+values in the list,\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    The function finds the highest value in the list, and prints the string next to it in order from highest number to lowest number.\n    \"\"\"\n        #The function finds the highest value in the list, and prints the string next to it in order from highest number to lowest number.\n    #The function finds the highest value in the list, and prints the string next to it in order from highest number to lowest number.\n    #The function finds the highest value in the list, and prints the string next to it in order from highest number to lowest number.\n    #The function finds the highest value in the list, and\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    The function finds the highest three values in the list, and prints the string next to it in order from highest number to lowest number.\n    \"\"\"\n        #creates a list of the top three scores\n    topScores = []\n    for i in range(3):\n        topScores.append(max(lst))\n        lst.remove(max(lst))\n    #prints the top three scores in order from highest to lowest\n    for i in range(3):\n        print(topScores[i], \":\", lst[i])\n",
                "id": 46,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 38,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student45",
                "hover": "username:student45\n\ndiff:\n--- \n+++ \n@@ -32,6 +32,9 @@\n add the list+at+index+1 to a new@@ -42,13 +45,22 @@\n newLst. Then sort-newLst-and+newLst.+If+there+are+more+than+five+lists+in+newLst, remove-all-but+any+lists+after the-three+five lists with the@@ -57,4 +69,12 @@\n at index 0.+Then+convert+the+lists+in+newLst+to+strings. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list to a new list of lists called newLst. Then sort newLst and remove all but the three lists with the highest values at index 0.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse=True)\n    return newLst[:3]\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then convert the lists in newLst to strings.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse=True)\n    if len(newLst) > 5:\n        newLst = newLst[:5]\n    for i in range(len(newLst)):\n        newLst[i] = str(newLst[",
                "id": 18,
                "key": 0
            }
        ],
        [
            {
                "diff": 24,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student45",
                "hover": "username:student45\n\ndiff:\n--- \n+++ \n@@ -70,11 +70,23 @@\n index 0. Then-convert+make+a+new+list+called+finalLst.+For+each+list+in+newLst,+add the-lists-in-newLst+value+at+index+1 to-strings.+finalLst. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then convert the lists in newLst to strings.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse=True)\n    if len(newLst) > 5:\n        newLst = newLst[:5]\n    for i in range(len(newLst)):\n        newLst[i] = str(newLst[\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst.\n    \"\"\"\n        newLst = []\n    for i in lst:\n        if i[0] >= 80:\n            newLst.append(i)\n    newLst.sort(reverse=True)\n    if len(newLst) > 5:\n        newLst = newLst[:5]\n    finalLst = []\n    for i in newLst:\n        finalLst.append(i[1])\n",
                "id": 15,
                "key": 0
            }
        ],
        [
            {
                "diff": 10,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student53",
                "hover": "username:student53\n\ndiff:\n--- \n+++ \n@@ -3,15 +3,31 @@\n \"\"\" taken lst,+loop+each+list+and+if+the+zeroth+index+is+less+than+or+equal+to+80,+add+the+1st+index+into+a+list+and return-the+this+new list-of-strings-whose-integer-is-greater-than-80 \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    taken lst, return the list of strings whose integer is greater than 80\n    \"\"\"\n        return [x for x in lst if int(x.split()[1]) > 80]\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    taken lst, loop each list and if the zeroth index is less than or equal to 80, add the 1st index into a list and return this new list \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] <= 80:\n            new_lst.append(i[1])\n    return new_lst\n\nprint(topScores([[80, \"bob\"], [90, \"sally\"], [100, \"joe\"], [70, \"jane\"]]))\n",
                "id": 20,
                "key": 0
            }
        ],
        [
            {
                "diff": 7,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student53",
                "hover": "username:student53\n\ndiff:\n--- \n+++ \n@@ -12,7 +12,7 @@\n zeroth index is-less+more than or equal\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    taken lst, loop each list and if the zeroth index is less than or equal to 80, add the 1st index into a list and return this new list \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] <= 80:\n            new_lst.append(i[1])\n    return new_lst\n\nprint(topScores([[80, \"bob\"], [90, \"sally\"], [100, \"joe\"], [70, \"jane\"]]))\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    taken lst, loop each list and if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i[1])\n    return new_lst\n\nprint(topScores([[80, \"John\"], [90, \"Sam\"], [70, \"Jane\"], [60, \"Joe\"]]))\n",
                "id": 3,
                "key": 0
            }
        ],
        [
            {
                "diff": 59,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student53",
                "hover": "username:student53\n\ndiff:\n--- \n+++ \n@@ -30,26 +30,29 @@\n this new list-in+by+sorting+from the-order+highest+0th+index of the-highest-zeroth-index.+original+list. If the list is larger than-4+5 items, then return only-4+5 items with the\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    taken lst, loop each list and if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list in the order of the highest zeroth index. If the list is larger than 4 items, then return only 4 items with the highest zeroth index. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i[1])\n    new_lst.sort(reverse=True)\n    if len(new_lst) > 4:\n        return new_lst[:4]\n    else:\n        return new_lst\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    taken lst, loop each list and if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list by sorting from the highest 0th index of the original list. If the list is larger than 5 items, then return only 5 items with the highest zeroth index. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i[1])\n    new_lst.sort()\n    if len(new_lst) > 5:\n        return new_lst[-5:]\n    else:\n        return new_lst\n",
                "id": 22,
                "key": 0
            }
        ],
        [
            {
                "diff": 60,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student53",
                "hover": "username:student53\n\ndiff:\n--- \n+++ \n@@ -3,10 +3,15 @@\n \"\"\" taken lst,-loop-each+sort+the list-and+be+the+highest+0th+index+then if the zeroth\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    taken lst, loop each list and if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list by sorting from the highest 0th index of the original list. If the list is larger than 5 items, then return only 5 items with the highest zeroth index. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i[1])\n    new_lst.sort()\n    if len(new_lst) > 5:\n        return new_lst[-5:]\n    else:\n        return new_lst\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    taken lst, sort the list be the highest 0th index then if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list by sorting from the highest 0th index of the original list. If the list is larger than 5 items, then return only 5 items with the highest zeroth index. \n    \"\"\"\n        lst.sort(reverse=True)\n    new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i[1])\n    new_lst.sort(reverse=True)\n    if len(new_lst) > 5:\n        return new_lst[:5]\n    else:\n        return new_lst\n",
                "id": 23,
                "key": 0
            }
        ],
        [
            {
                "diff": 65,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student53",
                "hover": "username:student53\n\ndiff:\n--- \n+++ \n@@ -3,15 +3,25 @@\n \"\"\" taken lst,+loop+through+each+list+and sort the list-be+in+the+order+of the highest 0th-index-then+index.+Given+new+list if the zeroth\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    taken lst, sort the list be the highest 0th index then if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list by sorting from the highest 0th index of the original list. If the list is larger than 5 items, then return only 5 items with the highest zeroth index. \n    \"\"\"\n        lst.sort(reverse=True)\n    new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i[1])\n    new_lst.sort(reverse=True)\n    if len(new_lst) > 5:\n        return new_lst[:5]\n    else:\n        return new_lst\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    taken lst, loop through each list and sort the list in the order of the highest 0th index. Given new list if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list by sorting from the highest 0th index of the original list. If the list is larger than 5 items, then return only 5 items with the highest zeroth index. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        i.sort(reverse=True)\n        if i[0] >= 80:\n            new_lst.append(i[1])\n    new_lst.sort(reverse=True)\n    if len(new_lst) > 5:\n        return new_lst[:5]\n    else:\n        return new_lst\n\nprint(",
                "id": 24,
                "key": 0
            }
        ],
        [
            {
                "diff": 15,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student53",
                "hover": "username:student53\n\ndiff:\n--- \n+++ \n@@ -1,60 +1,59 @@\n def topScores(lst): \"\"\"-taken-lst,-loop+Loop through each+lst+and+take+the+nested+list+with+a+0th+index+larger+than+or+equal+to+80.+Append+to+a+new list and sort the+new list in the order of the-highest+largest 0th-index.-Given-new-list-if+index+in the-zeroth-index-is-more-than-or-equal-to-80,-add+nested+list.+Add the 1st index into a+new list and return this new-list-by-sorting-from-the-highest-0th-index-of-the-original list. If the\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    taken lst, loop through each list and sort the list in the order of the highest 0th index. Given new list if the zeroth index is more than or equal to 80, add the 1st index into a list and return this new list by sorting from the highest 0th index of the original list. If the list is larger than 5 items, then return only 5 items with the highest zeroth index. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        i.sort(reverse=True)\n        if i[0] >= 80:\n            new_lst.append(i[1])\n    new_lst.sort(reverse=True)\n    if len(new_lst) > 5:\n        return new_lst[:5]\n    else:\n        return new_lst\n\nprint(\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Loop through each lst and take the nested list with a 0th index larger than or equal to 80. Append to a new list and sort the new list in the order of the largest 0th index in the nested list. Add the 1st index into a new list and return this new list. If the list is larger than 5 items, then return only 5 items with the highest zeroth index. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i)\n    new_lst.sort(reverse=True)\n    new_lst2 = []\n    for i in new_lst:\n        new_lst2.append(i[1])\n    if len(new_lst2) > 5:\n        return new",
                "id": 25,
                "key": 0
            }
        ],
        [
            {
                "diff": 0,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student53",
                "hover": "username:student53\n\ndiff:\n--- \n+++ \n@@ -53,7 +53,6 @@\n and return this-new list. If the@@ -62,15 +61,17 @@\n larger than 5-items,+items then-return-only+take+then+eliminate+the+last+elements+to+make 5-items-with-the-highest-zeroth-index.+total+items. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Loop through each lst and take the nested list with a 0th index larger than or equal to 80. Append to a new list and sort the new list in the order of the largest 0th index in the nested list. Add the 1st index into a new list and return this new list. If the list is larger than 5 items, then return only 5 items with the highest zeroth index. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i)\n    new_lst.sort(reverse=True)\n    new_lst2 = []\n    for i in new_lst:\n        new_lst2.append(i[1])\n    if len(new_lst2) > 5:\n        return new\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Loop through each lst and take the nested list with a 0th index larger than or equal to 80. Append to a new list and sort the new list in the order of the largest 0th index in the nested list. Add the 1st index into a new list and return this list. If the list is larger than 5 items then take then eliminate the last elements to make 5 total items. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i)\n    new_lst.sort(reverse = True)\n    new_lst2 = []\n    for i in new_lst:\n        new_lst2.append(i[1])\n    if len(new_lst2) > 5:\n        new_",
                "id": 26,
                "key": 0
            }
        ],
        [
            {
                "diff": 44,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student53",
                "hover": "username:student53\n\ndiff:\n--- \n+++ \n@@ -20,7 +20,9 @@\n equal to 80.-Append+Define+and+append to a new@@ -48,6 +50,8 @@\n index into a+another+defined new list and\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Loop through each lst and take the nested list with a 0th index larger than or equal to 80. Append to a new list and sort the new list in the order of the largest 0th index in the nested list. Add the 1st index into a new list and return this list. If the list is larger than 5 items then take then eliminate the last elements to make 5 total items. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i)\n    new_lst.sort(reverse = True)\n    new_lst2 = []\n    for i in new_lst:\n        new_lst2.append(i[1])\n    if len(new_lst2) > 5:\n        new_\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Loop through each lst and take the nested list with a 0th index larger than or equal to 80. Define and append to a new list and sort the new list in the order of the largest 0th index in the nested list. Add the 1st index into a another defined new list and return this list. If the list is larger than 5 items then take then eliminate the last elements to make 5 total items. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i)\n    new_lst.sort(reverse = True)\n    new_lst2 = []\n    for i in new_lst:\n        new_lst2.append(i[1])\n    if len(new_lst2) > 5:\n        new_",
                "id": 26,
                "key": 0
            },
            {
                "diff": 21,
                "color": "#ff7f50",
                "arrow_color": "#ff7f50",
                "username": "student53",
                "hover": "username:student53\n\ndiff:\n--- \n+++ \n@@ -1,81 +1,44 @@\n def topScores(lst): \"\"\"-Loop-through-each-lst-and-take+if+0th+index+of the nested list-with-a-0th-index-larger+of+lst+is+greater than or equal to-80.-Define-and-append-to+80,+return a-new list-and-sort+of the-new-list+1st+index in the order-of+from the largest 0th index-in-the-nested-list.-Add-the-1st-index-into+integer.+Return+up+to a-another-defined-new list-and-return-this-list.-If-the-list-is-larger-than+of 5-items-then-take-then-eliminate-the-last-elements-to-make-5-total items. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Loop through each lst and take the nested list with a 0th index larger than or equal to 80. Define and append to a new list and sort the new list in the order of the largest 0th index in the nested list. Add the 1st index into a another defined new list and return this list. If the list is larger than 5 items then take then eliminate the last elements to make 5 total items. \n    \"\"\"\n        new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n            new_lst.append(i)\n    new_lst.sort(reverse = True)\n    new_lst2 = []\n    for i in new_lst:\n        new_lst2.append(i[1])\n    if len(new_lst2) > 5:\n        new_\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    if 0th index of the nested list of lst is greater than or equal to 80, return a list of the 1st index in the order from the largest 0th index integer. Return up to a list of 5 items. \n    \"\"\"\n        return [x[1] for x in sorted(lst, key=lambda x: x[0], reverse=True) if x[0] >= 80][:5]\n",
                "id": 14,
                "key": 0
            }
        ],
        [
            {
                "diff": 12,
                "color": "#7fff00",
                "arrow_color": "#7fff00",
                "username": "student55",
                "hover": "username:student55\n\ndiff:\n--- \n+++ \n@@ -5,18 +5,33 @@\n a function that-gets+runs+through a list of lists+with+2+elements.+The+first+element+is+the+grade+and+the+second+element+is+the+name of-grades-and-names-of-students,-and+the+student.+This+function returns the name\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Write a function that gets a list of lists of grades and names of students, and returns the name from the highest grade to the lowest, if only the grades are higher than 80.\n    \"\"\"\n        return [x[0] for x in sorted(lst, key=lambda x: x[1], reverse=True) if x[1] > 80]\n\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns the name from the highest grade to the lowest, if only the grades are higher than 80.\n    \"\"\"\n        # create a list of tuples\n    lst = [(x[0], x[1]) for x in lst]\n    # sort the list of tuples\n    lst.sort(reverse=True)\n    # create a list of names\n    lst = [x[1] for x in lst if x[0] > 80]\n    # return the list\n    return lst\n",
                "id": 6,
                "key": 0
            }
        ],
        [
            {
                "diff": 17,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student65",
                "hover": "username:student65\n\ndiff:\n--- \n+++ \n@@ -25,6 +25,9 @@\n is greater than+or+equal+to 80, add the@@ -44,4 +47,22 @@\n at the end.+The+final+list+should+be+ordered+by+names+with+the+largest+score+to+names+with+the+smallest+score. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    This function has a list of lists of length 2 as inputs. If the first entry in the list (the score) is greater than 80, add the second entry in the list (the name) to a list to be output at the end.\n    \"\"\"\n        output = []\n    for i in lst:\n        if i[0] > 80:\n            output.append(i[1])\n    return output\n\nprint(topScores([[90, 'John'], [80, 'Bob'], [85, 'Alice'], [70, 'James']]))\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    This function has a list of lists of length 2 as inputs. If the first entry in the list (the score) is greater than or equal to 80, add the second entry in the list (the name) to a list to be output at the end. The final list should be ordered by names with the largest score to names with the smallest score.\n    \"\"\"\n        # Your code here\n    pass\n",
                "id": 15,
                "key": 0
            }
        ],
        [
            {
                "diff": 42,
                "color": "#ffd700",
                "arrow_color": "#ffd700",
                "username": "student65",
                "hover": "username:student65\n\ndiff:\n--- \n+++ \n@@ -20,7 +20,10 @@\n by the first-entry.+entry+in+descending+order. If the first\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    This function has a list of lists of length 2 as inputs. First, sort the lists by the first entry. If the first entry in the list (the score) is greater than or equal to 80, add the second entry in the list (the name) to a list to be output at the end. \n    \"\"\"\n        lst.sort()\n    output = []\n    for i in lst:\n        if i[0] >= 80:\n            output.append(i[1])\n    return output\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    This function has a list of lists of length 2 as inputs. First, sort the lists by the first entry in descending order. If the first entry in the list (the score) is greater than or equal to 80, add the second entry in the list (the name) to a list to be output at the end. \n    \"\"\"\n        lst.sort(reverse=True)\n    output = []\n    for i in lst:\n        if i[0] >= 80:\n            output.append(i[1])\n    return output\n\nprint(topScores([[80, \"John\"], [90, \"Jane\"], [70, \"Joe\"], [60, \"Jack\"]]))\n",
                "id": 5,
                "key": 0
            }
        ],
        [
            {
                "diff": 47,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -27,7 +27,6 @@\n names of people-in from oldest to\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people in from oldest to youngest, as long as there is less than a 10-year gap between the two. \n\n    \"\"\"\n        # Initialize a list to store the names of people who are eligible to be in the top scores list.\n    top_scores = []\n    # Iterate through the list of lists.\n    for i in range(len(lst)):\n        # If the list is empty, add the first person to the list.\n        if len(top_scores) == 0:\n            top_scores.append(lst[i][1\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people from oldest to youngest, as long as there is less than a 10-year gap between the two. \n\n    \"\"\"\n        # Create a list of names\n    names = []\n    # Iterate through the list of lists\n    for i in range(len(lst)):\n        # If the difference between the current age and the next age is less than 10, append the name to the list\n        if lst[i][0] - lst[i+1][0] < 10:\n            names.append(lst[i][1])\n    return names",
                "id": 31,
                "key": 0
            }
        ],
        [
            {
                "diff": 13,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -30,18 +30,5 @@\n from oldest to-youngest,-as-long-as-there-is-less-than-a-10-year-gap-between-the-two.+youngest \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people from oldest to youngest, as long as there is less than a 10-year gap between the two. \n\n    \"\"\"\n        # Create a list of names\n    names = []\n    # Iterate through the list of lists\n    for i in range(len(lst)):\n        # If the difference between the current age and the next age is less than 10, append the name to the list\n        if lst[i][0] - lst[i+1][0] < 10:\n            names.append(lst[i][1])\n    return names\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people from oldest to youngest\n    \"\"\"\n        lst.sort(key=lambda x: x[0])\n    return [x[1] for x in lst]\n",
                "id": 32,
                "key": 0
            }
        ],
        [
            {
                "diff": 22,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -28,7 +28,7 @@\n of people from+youngest+to oldest-to-youngest \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people from oldest to youngest\n    \"\"\"\n        lst.sort(key=lambda x: x[0])\n    return [x[1] for x in lst]\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people from youngest to oldest\n    \"\"\"\n        lst.sort(key=lambda x: x[0])\n    return [x[1] for x in lst]\n",
                "id": 32,
                "key": 0
            },
            {
                "diff": 49,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -27,8 +27,11 @@\n names of people+sorted+by+age from+oldest+to youngest-to-oldest \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people from youngest to oldest\n    \"\"\"\n        lst.sort(key=lambda x: x[0])\n    return [x[1] for x in lst]\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people sorted by age from oldest to youngest\n    \"\"\"\n        lst.sort(key=lambda x: x[0], reverse=True)\n    return [x[1] for x in lst]\n",
                "id": 33,
                "key": 0
            }
        ],
        [
            {
                "diff": 18,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -33,5 +33,52 @@\n from oldest to-youngest+youngest.+The+returned+list+will+be+at+most+5+names+long+is+the+original+list+of+lists+has+more+than+5+items,+if+the+original+list+of+lists+has+between+4+and+5+items,+the+returned+list+will+have+3+names,+else,+the+returned+list+will+be+empty. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people sorted by age from oldest to youngest\n    \"\"\"\n        lst.sort(key=lambda x: x[0], reverse=True)\n    return [x[1] for x in lst]\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people sorted by age from oldest to youngest. The returned list will be at most 5 names long is the original list of lists has more than 5 items, if the original list of lists has between 4 and 5 items, the returned list will have 3 names, else, the returned list will be empty. \n    \"\"\"\n        if len(lst) > 5:\n        lst = lst[:5]\n    elif len(lst) < 5 and len(lst) > 3:\n        lst = lst[:3]\n    else:\n        lst = []\n    return lst\n",
                "id": 34,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people sorted by age from oldest to youngest. The returned list will be at most 5 names long is the original list of lists has more than 5 items, if the original list of lists has between 4 and 5 items, the returned list will have 3 names, else, the returned list will be empty. \n    \"\"\"\n        if len(lst) > 5:\n        lst = lst[:5]\n    elif len(lst) < 5 and len(lst) > 3:\n        lst = lst[:3]\n    else:\n        lst = []\n    return lst\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people sorted by age from oldest to youngest. The returned list will be at most 5 names long is the original list of lists has more than 5 items, if the original list of lists has between 4 and 5 items, the returned list will have 3 names, else, the returned list will be empty. \n    \"\"\"\n        #sort the list of lists by age\n    lst.sort(key=lambda x: x[0])\n    #reverse the list of lists\n    lst.reverse()\n    #create a list to hold the names of the people\n    names = []\n    #iterate through the list of lists\n    for i in range(len(lst)):\n        #if the list of lists has more than 5 items\n        if len(l",
                "id": 35,
                "key": 0
            }
        ],
        [
            {
                "diff": 3,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -44,7 +44,7 @@\n 5 names long-is+if the original list\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people sorted by age from oldest to youngest. The returned list will be at most 5 names long is the original list of lists has more than 5 items, if the original list of lists has between 4 and 5 items, the returned list will have 3 names, else, the returned list will be empty. \n    \"\"\"\n        #sort the list of lists by age\n    lst.sort(key=lambda x: x[0])\n    #reverse the list of lists\n    lst.reverse()\n    #create a list to hold the names of the people\n    names = []\n    #iterate through the list of lists\n    for i in range(len(lst)):\n        #if the list of lists has more than 5 items\n        if len(l\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people sorted by age from oldest to youngest. The returned list will be at most 5 names long if the original list of lists has more than 5 items, if the original list of lists has between 4 and 5 items, the returned list will have 3 names, else, the returned list will be empty. \n    \"\"\"\n        lst.sort(key=lambda x: x[0])\n    lst.reverse()\n    if len(lst) > 5:\n        return [lst[0][1], lst[1][1], lst[2][1], lst[3][1], lst[4][1]]\n    elif len(lst) == 5:\n        return [lst[0][1], lst[1][",
                "id": 36,
                "key": 0
            }
        ],
        [
            {
                "diff": 32,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -21,6 +21,7 @@\n respectively. Returns a+new list of the@@ -39,8 +40,6 @@\n list will be-at-most 5 names long@@ -48,13 +47,14 @@\n the original list-of-lists has more than 5-items,+items;+3+names+long if the original@@ -66,15 +66,8 @@\n 4 and 5-items,-the-returned-list-will-have-3-names,-else,+items;+else the returned list\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people sorted by age from oldest to youngest. The returned list will be at most 5 names long if the original list of lists has more than 5 items, if the original list of lists has between 4 and 5 items, the returned list will have 3 names, else, the returned list will be empty. \n    \"\"\"\n        lst.sort(key=lambda x: x[0])\n    lst.reverse()\n    if len(lst) > 5:\n        return [lst[0][1], lst[1][1], lst[2][1], lst[3][1], lst[4][1]]\n    elif len(lst) == 5:\n        return [lst[0][1], lst[1][\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a new list of the names of people sorted by age from oldest to youngest. The returned list will be 5 names long if the original list has more than 5 items; 3 names long if the original list of lists has between 4 and 5 items; else the returned list will be empty. \n    \"\"\"\n        names = []\n    ages = []\n    for i in lst:\n        ages.append(i[0])\n        names.append(i[1])\n    ages, names = (list(t) for t in zip(*sorted(zip(ages, names), reverse=True)))\n    if len(lst) > 5:\n        return names[:5]\n    elif len(lst) > 3:\n        return",
                "id": 37,
                "key": 0
            }
        ],
        [
            {
                "diff": 5,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -52,6 +52,11 @@\n than 5 items;+The+returned+list+will+be 3 names long@@ -59,19 +64,25 @@\n the original list-of-lists has between 4 and 5 items;-else-the+The returned list will be-empty.+empty+if+the+original+list+has+less+than+4+items \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a new list of the names of people sorted by age from oldest to youngest. The returned list will be 5 names long if the original list has more than 5 items; 3 names long if the original list of lists has between 4 and 5 items; else the returned list will be empty. \n    \"\"\"\n        names = []\n    ages = []\n    for i in lst:\n        ages.append(i[0])\n        names.append(i[1])\n    ages, names = (list(t) for t in zip(*sorted(zip(ages, names), reverse=True)))\n    if len(lst) > 5:\n        return names[:5]\n    elif len(lst) > 3:\n        return\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a new list of the names of people sorted by age from oldest to youngest. The returned list will be 5 names long if the original list has more than 5 items; The returned list will be 3 names long if the original list has between 4 and 5 items; The returned list will be empty if the original list has less than 4 items\n    \"\"\"\n        new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][1])\n    return new_lst\n",
                "id": 38,
                "key": 0
            }
        ],
        [
            {
                "diff": 57,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -51,38 +51,5 @@\n more than 5-items;-The-returned-list-will-be-3-names-long-if-the-original-list-has-between-4-and-5-items;-The-returned-list-will-be-empty-if-the-original-list-has-less-than-4-items+items. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a new list of the names of people sorted by age from oldest to youngest. The returned list will be 5 names long if the original list has more than 5 items; The returned list will be 3 names long if the original list has between 4 and 5 items; The returned list will be empty if the original list has less than 4 items\n    \"\"\"\n        new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][1])\n    return new_lst\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a new list of the names of people sorted by age from oldest to youngest. The returned list will be 5 names long if the original list has more than 5 items.\n    \"\"\"\n        lst.sort(key=lambda x: x[0])\n    return [i[1] for i in lst[-5:]]\n",
                "id": 39,
                "key": 0
            },
            {
                "diff": 61,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -25,8 +25,6 @@\n will be created-and-returned of the names\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created and returned of the names of people sorted by age from oldest to youngest.  \n    \"\"\"\n        new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][1])\n    return new_lst\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created of the names of people sorted by age from oldest to youngest.  \n    \"\"\"\n        newList = []\n    for i in range(len(lst)):\n        newList.append(lst[i][1])\n    return newList\n",
                "id": 38,
                "key": 0
            },
            {
                "diff": 36,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -1,35 +1,13 @@\n def topScores(lst): \"\"\"-Iterates-through+Creates a-list-of-lists,-with-each-list-housing-the-age-and-name-of-a-person-respectively.-A new list-will-be-created of the names-of-people sorted by age\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created of the names of people sorted by age from oldest to youngest.  \n    \"\"\"\n        newList = []\n    for i in range(len(lst)):\n        newList.append(lst[i][1])\n    return newList\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Creates a new list of the names sorted by age from oldest to youngest.  \n    \"\"\"\n        # Sort the list by age.\n    lst.sort(key=lambda x: x[1], reverse=True)\n    # Create a new list of names sorted by age.\n    newList = []\n    for i in range(len(lst)):\n        newList.append(lst[i][0])\n    return newList\n",
                "id": 41,
                "key": 0
            }
        ],
        [
            {
                "diff": 48,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -19,10 +19,14 @@\n a person respectively.-Returns-a+A new list+will+be+created+and+returned of the names@@ -35,21 +39,55 @@\n oldest to youngest.-The-returned-list-will-be-5-names-long-if+If the original list-has+is+less+than+4+items+long,+the+new+list+will+return+empty.+If+the+original+list+is+between+4+and+5+items+long,+the+new+list+will+return+3+names.+If+the+original+list+is more than 5-items.+items+long,+the+new+list+will+return+5+names. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a new list of the names of people sorted by age from oldest to youngest. The returned list will be 5 names long if the original list has more than 5 items.\n    \"\"\"\n        lst.sort(key=lambda x: x[0])\n    return [i[1] for i in lst[-5:]]\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created and returned of the names of people sorted by age from oldest to youngest. If the original list is less than 4 items long, the new list will return empty. If the original list is between 4 and 5 items long, the new list will return 3 names. If the original list is more than 5 items long, the new list will return 5 names. \n    \"\"\"\n        newLst = []\n    if len(lst) < 4:\n        return newLst\n    elif len(lst) >= 4 and len(lst) <= 5:\n        for i in range(3):\n            newLst.append(lst[i][1])\n        return newLst\n    else:\n        for i in range(5):\n            newLst.append(lst[i][1",
                "id": 40,
                "key": 0
            }
        ],
        [
            {
                "diff": 26,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -39,55 +39,4 @@\n oldest to youngest.-If-the-original-list-is-less-than-4-items-long,-the-new-list-will-return-empty.-If-the-original-list-is-between-4-and-5-items-long,-the-new-list-will-return-3-names.-If-the-original-list-is-more-than-5-items-long,-the-new-list-will-return-5-names. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created and returned of the names of people sorted by age from oldest to youngest. If the original list is less than 4 items long, the new list will return empty. If the original list is between 4 and 5 items long, the new list will return 3 names. If the original list is more than 5 items long, the new list will return 5 names. \n    \"\"\"\n        newLst = []\n    if len(lst) < 4:\n        return newLst\n    elif len(lst) >= 4 and len(lst) <= 5:\n        for i in range(3):\n            newLst.append(lst[i][1])\n        return newLst\n    else:\n        for i in range(5):\n            newLst.append(lst[i][1\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created and returned of the names of people sorted by age from oldest to youngest.  \n    \"\"\"\n        new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][1])\n    return new_lst\n",
                "id": 38,
                "key": 0
            }
        ],
        [
            {
                "diff": 14,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -1,18 +1,40 @@\n def topScores(lst): \"\"\"-Creates+Iterates+through a+list+of+lists,+with+each+list+housing+the+age+and+name+of+a+person+respectively.+A new list-of+will+be+created+sorting the names-sorted+of+people by-age+their+age, from oldest to-youngest.+youngest \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Creates a new list of the names sorted by age from oldest to youngest.  \n    \"\"\"\n        # Sort the list by age.\n    lst.sort(key=lambda x: x[1], reverse=True)\n    # Create a new list of names sorted by age.\n    newList = []\n    for i in range(len(lst)):\n        newList.append(lst[i][0])\n    return newList\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created sorting the names of people by their age, from oldest to youngest\n    \"\"\"\n        newLst = []\n    for i in range(len(lst)):\n        newLst.append([lst[i][1], lst[i][0]])\n    newLst.sort(key = lambda x: x[1], reverse = True)\n    return newLst\n",
                "id": 42,
                "key": 0
            }
        ],
        [
            {
                "diff": 6,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -27,9 +27,7 @@\n created sorting the-names-of-people+namess by their age,\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created sorting the names of people by their age, from oldest to youngest\n    \"\"\"\n        newLst = []\n    for i in range(len(lst)):\n        newLst.append([lst[i][1], lst[i][0]])\n    newLst.sort(key = lambda x: x[1], reverse = True)\n    return newLst\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created sorting the namess by their age, from oldest to youngest\n    \"\"\"\n        #Create a new list to hold the sorted names\n    sortedNames = []\n    #Iterate through the list of lists\n    for i in range(len(lst)):\n        #Iterate through the list of lists again\n        for j in range(len(lst)):\n            #If the first list's first element is greater than the second list's first element, then add the second list's second element to the sortedNames list\n            if",
                "id": 43,
                "key": 0
            }
        ],
        [
            {
                "diff": 52,
                "color": "#ff4500",
                "arrow_color": "#ff4500",
                "username": "student7",
                "hover": "username:student7\n\ndiff:\n--- \n+++ \n@@ -27,7 +27,7 @@\n created sorting the-namess+names by their age,\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created sorting the namess by their age, from oldest to youngest\n    \"\"\"\n        #Create a new list to hold the sorted names\n    sortedNames = []\n    #Iterate through the list of lists\n    for i in range(len(lst)):\n        #Iterate through the list of lists again\n        for j in range(len(lst)):\n            #If the first list's first element is greater than the second list's first element, then add the second list's second element to the sortedNames list\n            if\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. A new list will be created sorting the names by their age, from oldest to youngest\n    \"\"\"\n        lst.sort(key=lambda x: x[0])\n    return lst\n",
                "id": 44,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 66,
                "color": "#00ced1",
                "arrow_color": "#00ced1",
                "username": "student9",
                "hover": "username:student9\n\ndiff:\n--- \n+++ \n@@ -6,7 +6,7 @@\n finds the highest-number+value in the list,\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    The function finds the highest number in the list, and prints the string next to it in order from highest number to lowest number.\n    \"\"\"\n        lst.sort(reverse=True)\n    for i in range(len(lst)):\n        print(lst[i][1])\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    The function finds the highest value in the list, and prints the string next to it in order from highest number to lowest number.\n    \"\"\"\n        #The function finds the highest value in the list, and prints the string next to it in order from highest number to lowest number.\n    #The function finds the highest value in the list, and prints the string next to it in order from highest number to lowest number.\n    #The function finds the highest value in the list, and prints the string next to it in order from highest number to lowest number.\n    #The function finds the highest value in the list, and",
                "id": 15,
                "key": 0
            }
        ],
        [
            {
                "diff": 63,
                "color": "#00ced1",
                "arrow_color": "#00ced1",
                "username": "student9",
                "hover": "username:student9\n\ndiff:\n--- \n+++ \n@@ -3,27 +3,34 @@\n \"\"\" The function-finds+reads the-highest-three values in the-list,-and-prints+list.+The+values+that+are the-string-next-to-it-in-order+over+80+are+ordered from highest-number to-lowest-number.+lowest.+The+strings+are+printed+in+the+order+of+their+corresponding+values. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    The function finds the highest three values in the list, and prints the string next to it in order from highest number to lowest number.\n    \"\"\"\n        #creates a list of the top three scores\n    topScores = []\n    for i in range(3):\n        topScores.append(max(lst))\n        lst.remove(max(lst))\n    #prints the top three scores in order from highest to lowest\n    for i in range(3):\n        print(topScores[i], \":\", lst[i])\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    The function reads the values in the list. The values that are the over 80 are ordered from highest to lowest. The strings are printed in the order of their corresponding values.\n    \"\"\"\n        lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    for i in range(len(lst)):\n        if lst[i][1] >= 80:\n            print(lst[i][0], lst[i][1])\n",
                "id": 47,
                "key": 0
            }
        ],
        [
            {
                "diff": 64,
                "color": "#00ced1",
                "arrow_color": "#00ced1",
                "username": "student9",
                "hover": "username:student9\n\ndiff:\n--- \n+++ \n@@ -13,7 +13,6 @@\n values that are-the over 80 are\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    The function reads the values in the list. The values that are the over 80 are ordered from highest to lowest. The strings are printed in the order of their corresponding values.\n    \"\"\"\n        lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    for i in range(len(lst)):\n        if lst[i][1] >= 80:\n            print(lst[i][0], lst[i][1])\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    The function reads the values in the list. The values that are over 80 are ordered from highest to lowest. The strings are printed in the order of their corresponding values.\n    \"\"\"\n        # The list is sorted from highest to lowest\n    lst.sort(reverse=True)\n    # The list is iterated through\n    for i in range(len(lst)):\n        # The values that are over 80 are printed\n        if lst[i] > 80:\n            print(lst[i])\n",
                "id": 48,
                "key": 0
            },
            {
                "diff": 23,
                "color": "#00ced1",
                "arrow_color": "#00ced1",
                "username": "student9",
                "hover": "username:student9\n\ndiff:\n--- \n+++ \n@@ -13,8 +13,9 @@\n numbers that are-over-80+greater+than+76 are ordered from\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    The function reads the numbers in the list. The numbers that are over 80 are ordered from highest to lowest. The strings are printed in the order of their corresponding numbers.\n    \"\"\"\n        lst.sort(reverse=True)\n    for i in range(len(lst)):\n        if lst[i] > 80:\n            print(lst[i])\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    The function reads the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The strings are printed in the order of their corresponding numbers.\n    \"\"\"\n        # Create a list of numbers that are greater than 76\n    new_lst = []\n    for i in lst:\n        if i > 76:\n            new_lst.append(i)\n    # Sort the list from highest to lowest\n    new_lst.sort(reverse=True)\n    # Print the strings in the order of their corresponding numbers\n    for i in new_lst:\n        print(lst.index",
                "id": 49,
                "key": 0
            }
        ],
        [
            {
                "diff": 41,
                "color": "#00ced1",
                "arrow_color": "#00ced1",
                "username": "student9",
                "hover": "username:student9\n\ndiff:\n--- \n+++ \n@@ -5,12 +5,12 @@\n function reads the-values+numbers in the list. The-values+numbers that are over@@ -31,5 +31,5 @@\n of their corresponding-values.+numbers. \"\"\"\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    The function reads the values in the list. The values that are over 80 are ordered from highest to lowest. The strings are printed in the order of their corresponding values.\n    \"\"\"\n        # The list is sorted from highest to lowest\n    lst.sort(reverse=True)\n    # The list is iterated through\n    for i in range(len(lst)):\n        # The values that are over 80 are printed\n        if lst[i] > 80:\n            print(lst[i])\n\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    The function reads the numbers in the list. The numbers that are over 80 are ordered from highest to lowest. The strings are printed in the order of their corresponding numbers.\n    \"\"\"\n        lst.sort(reverse=True)\n    for i in range(len(lst)):\n        if lst[i] > 80:\n            print(lst[i])\n",
                "id": 47,
                "key": 0
            }
        ],
        [
            {
                "diff": 1,
                "color": "#00ced1",
                "arrow_color": "#00ced1",
                "username": "student9",
                "hover": "username:student9\n\ndiff:\n\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    The function reads the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The strings are printed in the order of their corresponding numbers.\n    \"\"\"\n        # Create a list of numbers that are greater than 76\n    new_lst = []\n    for i in lst:\n        if i > 76:\n            new_lst.append(i)\n    # Sort the list from highest to lowest\n    new_lst.sort(reverse=True)\n    # Print the strings in the order of their corresponding numbers\n    for i in new_lst:\n        print(lst.index\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    The function reads the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The strings are printed in the order of their corresponding numbers.\n    \"\"\"\n        for i in range(len(lst)):\n        if lst[i][1] > 76:\n            lst[i] = (lst[i][0], lst[i][1])\n        else:\n            lst[i] = (lst[i][0], 0)\n    lst.sort(key = lambda x: x[1], reverse = True)\n    for i in range(len(l",
                "id": 50,
                "key": 0
            }
        ],
        [
            {
                "diff": 34,
                "color": "#00ced1",
                "arrow_color": "#00ced1",
                "username": "student9",
                "hover": "username:student9\n\ndiff:\n--- \n+++ \n@@ -25,6 +25,7 @@\n The strings are+then printed in the\n\nFROM completion:\ndef topScores(lst):\n    \"\"\"\n    The function reads the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The strings are printed in the order of their corresponding numbers.\n    \"\"\"\n        for i in range(len(lst)):\n        if lst[i][1] > 76:\n            lst[i] = (lst[i][0], lst[i][1])\n        else:\n            lst[i] = (lst[i][0], 0)\n    lst.sort(key = lambda x: x[1], reverse = True)\n    for i in range(len(l\n\nTO completion:\ndef topScores(lst):\n    \"\"\"\n    The function reads the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The strings are then printed in the order of their corresponding numbers.\n    \"\"\"\n        # The list is sorted from highest to lowest.\n    lst.sort(reverse=True)\n    # The list is looped through.\n    for i in range(len(lst)):\n        # The numbers that are greater than 76 are printed.\n        if lst[i] > 76:\n            print(lst[i])\n",
                "id": 48,
                "key": 0
            }
        ]
    ]
}