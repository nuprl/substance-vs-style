{
    "directed": true,
    "multigraph": true,
    "graph": [],
    "nodes": [
        {
            "stderr_id": 0,
            "stdout_id": 1,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 14\n    lexicon = {\n              ^\nSyntaxError: '{' was never closed\n\n  File \"/tmp/file.py\", line 14\n    lexicon = {\n              ^\nSyntaxError: '{' was never closed\n\n  File \"/tmp/file.py\", line 14\n    lexicon = {\n              ^\nSyntaxError: '{' was never closed\n",
            "color": "red",
            "id": 0
        },
        {
            "stderr_id": 3,
            "stdout_id": 0,
            "hover": "stdout:\nje aime mes trois chats\n\nje aime mes trois marmots\n\nfive six seven eight\n\nstderr:\n_no_stderr_",
            "color": "grey",
            "id": 1
        },
        {
            "stderr_id": 3,
            "stdout_id": 2,
            "hover": "stdout:\nje aime mes trois chats\n\nje aime mes trois UNK\n\nUNK UNK UNK UNK\n\nstderr:\n_no_stderr_",
            "color": "green",
            "id": 2
        },
        {
            "stderr_id": 8,
            "stdout_id": 1,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 13\n    else:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 10\n\n  File \"/tmp/file.py\", line 13\n    else:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 10\n\n  File \"/tmp/file.py\", line 13\n    else:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 10\n",
            "color": "grey",
            "id": 3
        },
        {
            "stderr_id": 7,
            "stdout_id": 1,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 9\n    else:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 7\n\n  File \"/tmp/file.py\", line 9\n    else:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 7\n\n  File \"/tmp/file.py\", line 9\n    else:\n    ^\nIndentationError: expected an indented block after 'if' statement on line 7\n",
            "color": "blue",
            "id": 4
        },
        {
            "stderr_id": 3,
            "stdout_id": 3,
            "hover": "stdout:\n['je', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK']\n\n['je', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK']\n\n['UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK', 'UNK']\n\nstderr:\n_no_stderr_",
            "color": "red",
            "id": 5
        },
        {
            "stderr_id": 2,
            "stdout_id": 1,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 14\n    print translate(lexicon, \"I am a boy\")\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n\n  File \"/tmp/file.py\", line 14\n    print translate(lexicon, \"I am a boy\")\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n\n  File \"/tmp/file.py\", line 14\n    print translate(lexicon, \"I am a boy\")\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n",
            "color": "grey",
            "id": 6
        },
        {
            "stderr_id": 6,
            "stdout_id": 1,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 11\n    print translate(lexicon, \"bear eat princess\")\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n\n  File \"/tmp/file.py\", line 11\n    print translate(lexicon, \"bear eat princess\")\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n\n  File \"/tmp/file.py\", line 11\n    print translate(lexicon, \"bear eat princess\")\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n",
            "color": "red",
            "id": 7
        },
        {
            "stderr_id": 4,
            "stdout_id": 1,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 13\n    print translate(lexicon, \"I like my three cats\")\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n\n  File \"/tmp/file.py\", line 13\n    print translate(lexicon, \"I like my three cats\")\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n\n  File \"/tmp/file.py\", line 13\n    print translate(lexicon, \"I like my three cats\")\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n",
            "color": "blue",
            "id": 8
        },
        {
            "stderr_id": 5,
            "stdout_id": 1,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 19\n    \"four\n    ^\nSyntaxError: unterminated string literal (detected at line 19)\n\n  File \"/tmp/file.py\", line 19\n    \"four\n    ^\nSyntaxError: unterminated string literal (detected at line 19)\n\n  File \"/tmp/file.py\", line 19\n    \"four\n    ^\nSyntaxError: unterminated string literal (detected at line 19)\n",
            "color": "blue",
            "id": 9
        },
        {
            "stderr_id": 1,
            "stdout_id": 1,
            "hover": "stdout:\n_no_stdout_\nstderr:\n  File \"/tmp/file.py\", line 12\n    print translate(lexicon, \"I like my three cats\")\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n\n  File \"/tmp/file.py\", line 12\n    print translate(lexicon, \"I like my three cats\")\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n\n  File \"/tmp/file.py\", line 12\n    print translate(lexicon, \"I like my three cats\")\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n",
            "color": "red",
            "id": 10
        }
    ],
    "adjacency": [
        [
            {
                "diff": 7,
                "color": "#d83034",
                "arrow_color": "#d83034",
                "username": "student23",
                "hover": "username:student23\nedge: (0->0)\ndiff:\n--- \n+++ \n@@ -13,7 +13,7 @@\n the English words-into.+into a different language.\n\nFROM completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary of words, translating the English words into. a different language. THe function then takes in a sentence and uses the dictionary to replace the English words with the translated word from a different language. \n    \"\"\"\n        words = sentence.split()\n    translated_words = []\n    for word in words:\n        if word in lexicon:\n            translated_words.append(lexicon[word])\n        else:\n            translated_words.append(word)\n    return \" \".join(translated_words)\n\nlexicon = {\n    \"merry\":\"god\",\n    \"christmas\":\"jul\",\n    \"and\":\"och\",\n   \n\nTO completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary of words, translating the English words into a different language. THe function then takes in a sentence and uses the dictionary to replace the English words with the translated word from a different language. \n    \"\"\"\n        words = sentence.split()\n    translated_words = []\n    for word in words:\n        if word in lexicon:\n            translated_words.append(lexicon[word])\n        else:\n            translated_words.append(word)\n    return \" \".join(translated_words)\n\nlexicon = {\n    \"merry\":\"god\",\n    \"christmas\":\"jul\",\n    \"and\":\"och\",\n   ",
                "id": 0,
                "key": 0
            }
        ],
        [
            {
                "diff": 9,
                "color": "#f9e858",
                "arrow_color": "#f9e858",
                "username": "student50",
                "hover": "username:student50\nedge: (1->2)\ndiff:\n--- \n+++ \n@@ -41,4 +41,18 @@\n in the sentence.+If+the+english+word+is+not+present+in+the+dictionary,+replace+it+with+\"UNK\" \"\"\"\n\nFROM completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    A dictionary contains english words and words of another language will be inputted. Another input is a sentence that will be translated into the other language. Replace the english words with the words of the other language in the sentence.\n    \"\"\"\n        words = sentence.split()\n    translated_words = []\n    for word in words:\n        if word in lexicon:\n            translated_words.append(lexicon[word])\n        else:\n            translated_words.append(word)\n    return \" \".join(translated_words)\n\n\nTO completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    A dictionary contains english words and words of another language will be inputted. Another input is a sentence that will be translated into the other language. Replace the english words with the words of the other language in the sentence. If the english word is not present in the dictionary, replace it with \"UNK\"\n    \"\"\"\n        words = sentence.split()\n    translated_words = []\n    for word in words:\n        if word in lexicon:\n            translated_words.append(lexicon[word])\n        else:\n            translated_words.append(\"UNK\")\n    return \" \".join(translated_words)\n",
                "id": 2,
                "key": 0
            },
            {
                "diff": 2,
                "color": "#008dff",
                "arrow_color": "#008dff",
                "username": "student59",
                "hover": "username:student59\nedge: (1->2)\ndiff:\n--- \n+++ \n@@ -16,5 +16,26 @@\n of the inputted+string.+if+a+word+in+the+inputted string+is+not+in+the+inputted+dictionary,+the+translated+version+of+that+word+is+'UNK' \"\"\"\n\nFROM completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    takes a dictionary and a string as inputs. returns a translated version of the inputted string\n    \"\"\"\n        words = sentence.split()\n    translated = []\n    for word in words:\n        translated.append(lexicon.get(word, word))\n    return \" \".join(translated)\n\n\nTO completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    takes a dictionary and a string as inputs. returns a translated version of the inputted string. if a word in the inputted string is not in the inputted dictionary, the translated version of that word is 'UNK'\n    \"\"\"\n        words = sentence.split()\n    translated = []\n    for word in words:\n        if word in lexicon:\n            translated.append(lexicon[word])\n        else:\n            translated.append('UNK')\n    return ' '.join(translated)\n",
                "id": 2,
                "key": 1
            },
            {
                "diff": 4,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student75",
                "hover": "username:student75\nedge: (1->8)\ndiff:\n--- \n+++ \n@@ -21,29 +21,27 @@\n and output french-as-input=output def translate(lexicon,sentence): defines-{\"one\"=\"un\",-\"two\"=\"deux\",-\"three\"=\"trois\",-\"four=\"quatre\",-\"I\"=\"je\",-\"you\"=\"tu\",-\"and\"=\"et\",-\"cats\"=\"chats\",-\"love\"=\"aime\",-\"like\"=aime\",-\"my\"=\"mes\"},+{\"one\":\"un\",+\"two\":\"deux\",+\"three\":\"trois\",+\"four:\"quatre\",+\"I\":\"je\",+\"you\":\"tu\",+\"and\":\"et\",+\"cats\":\"chats\",+\"love\":\"aime\",+\"like\":aime\",+\"my\":\"mes\"}, this program will run the phrase-input=\"I+\"I like my three@@ -52,6 +50,8 @@\n def translate and-output={}+output+the+french translation \"\"\"\n\nFROM completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation\n    \"\"\"\n        translation = []\n    for word in sentence.split():\n        if word in lexicon:\n            translation.append(lexicon[word])\n        else:\n            translation.append(word)\n    return \" \".join(translation)\n\n\nTO completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french\ndef translate(lexicon,sentence): defines {\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four:\"quatre\", \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\", \"like\":aime\", \"my\":\"mes\"}, this program will run the phrase \"I like\nmy three cats\" through def translate and output the french translation\n    \"\"\"\n        words = sentence.split(' ')\n    translation = []\n    for word in words:\n        translation.append(lexicon[word])\n    return ' '.join(translation)\n\nprint translate(lexicon, \"I like my three cats\")\n",
                "id": 8,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 0,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student60",
                "hover": "username:student60\nedge: (3->4)\ndiff:\n\n\nFROM completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then prints the string in french. If a word in the function is not in the dictionary, the function prints 'UNK' for that word. \n    \"\"\"\n        #split the sentence into a list of words\n    words = sentence.split(' ')\n    #iterate through the list of words\n    for word in words:\n        #if the word is in the dictionary, print the french translation\n        if word in lexicon:\n            print(lexicon[word],end=' ')\n        #if the word is not in the dictionary, print 'UNK'\n        else:\n            print('UNK\n\nTO completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then prints the string in french. If a word in the function is not in the dictionary, the function prints 'UNK' for that word. \n    \"\"\"\n        words = sentence.split()\n    for word in words:\n        if word in lexicon:\n            print(lexicon[word],end=\" \")\n        else:\n            print(\"UNK\",end=\" \")\n    print()\n",
                "id": 4,
                "key": 0
            }
        ],
        [
            {
                "diff": 0,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student60",
                "hover": "username:student60\nedge: (4->4)\ndiff:\n\n\nFROM completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then prints the string in french. If a word in the function is not in the dictionary, the function prints 'UNK' for that word. \n    \"\"\"\n        words = sentence.split()\n    for word in words:\n        if word in lexicon:\n            print(lexicon[word],end=\" \")\n        else:\n            print(\"UNK\",end=\" \")\n    print()\n\n\nTO completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then prints the string in french. If a word in the function is not in the dictionary, the function prints 'UNK' for that word. \n    \"\"\"\n        words = sentence.split()\n    for word in words:\n        if word in lexicon:\n            print(lexicon[word], end = \" \")\n        else:\n            print(\"UNK\", end = \" \")\n    print()\n",
                "id": 4,
                "key": 0
            },
            {
                "diff": 5,
                "color": "#4ecb8d",
                "arrow_color": "#4ecb8d",
                "username": "student60",
                "hover": "username:student60\nedge: (4->2)\ndiff:\n--- \n+++ \n@@ -24,7 +24,7 @@\n The function then-prints+returns the string in@@ -42,7 +42,7 @@\n dictionary, the function-prints+returns 'UNK' for that\n\nFROM completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then prints the string in french. If a word in the function is not in the dictionary, the function prints 'UNK' for that word. \n    \"\"\"\n        words = sentence.split()\n    for word in words:\n        if word in lexicon:\n            print(lexicon[word], end = \" \")\n        else:\n            print(\"UNK\", end = \" \")\n    print()\n\n\nTO completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then returns the string in french. If a word in the function is not in the dictionary, the function returns 'UNK' for that word. \n    \"\"\"\n        words = sentence.split()\n    translation = []\n    for word in words:\n        if word in lexicon:\n            translation.append(lexicon[word])\n        else:\n            translation.append('UNK')\n    return ' '.join(translation)\n",
                "id": 2,
                "key": 0
            }
        ],
        [
            {
                "diff": 6,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student64",
                "hover": "username:student64\nedge: (5->5)\ndiff:\n--- \n+++ \n@@ -3,7 +3,7 @@\n \"\"\" For each-word+string in sentence, find\n\nFROM completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    For each word in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.\n    \"\"\"\n        translated = []\n    for word in sentence:\n        if word in lexicon:\n            translated.append(lexicon[word])\n        else:\n            translated.append('UNK')\n    return translated\n\n\nTO completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    For each string in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.\n    \"\"\"\n        translated_sentence = []\n    for word in sentence:\n        if word in lexicon:\n            translated_sentence.append(lexicon[word])\n        else:\n            translated_sentence.append('UNK')\n    return translated_sentence\n",
                "id": 5,
                "key": 0
            },
            {
                "diff": 10,
                "color": "#c701ff",
                "arrow_color": "#c701ff",
                "username": "student64",
                "hover": "username:student64\nedge: (5->5)\ndiff:\n--- \n+++ \n@@ -2,8 +2,8 @@\n translate(lexicon,sentence): \"\"\" For-each-string+every+word in sentence, find\n\nFROM completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    For each string in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.\n    \"\"\"\n        translated_sentence = []\n    for word in sentence:\n        if word in lexicon:\n            translated_sentence.append(lexicon[word])\n        else:\n            translated_sentence.append('UNK')\n    return translated_sentence\n\n\nTO completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    For every word in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.\n    \"\"\"\n        new_sentence = []\n    for word in sentence:\n        if word in lexicon:\n            new_sentence.append(lexicon[word])\n        else:\n            new_sentence.append('UNK')\n    return new_sentence\n",
                "id": 5,
                "key": 1
            }
        ],
        [
            {
                "diff": 3,
                "color": "#ffcd8e",
                "arrow_color": "#ffcd8e",
                "username": "student69",
                "hover": "username:student69\nedge: (6->7)\ndiff:\n--- \n+++ \n@@ -12,18 +12,19 @@\n and add each-group-of-strings+word to a list.+For+every+word+in+the+list, if the word-in-the-list matches a key\n\nFROM completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    Enter a string. Separate the string on spaces and add each group of strings to a list. if the word in the list matches a key in the dictionary, print the value of that key.\n    \"\"\"\n        words = sentence.split(\" \")\n    translated_words = []\n    for word in words:\n        if word in lexicon:\n            translated_words.append(lexicon[word])\n        else:\n            translated_words.append(word)\n    return \" \".join(translated_words)\n\nprint translate(lexicon, \"I am a boy\")\n\nTO completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    Enter a string. Separate the string on spaces and add each word to a list. For every word in the list, if the word matches a key in the dictionary, print the value of that key.\n    \"\"\"\n        words = sentence.split()\n    translation = []\n    for word in words:\n        translation.append(lexicon.get(word, word))\n    return \" \".join(translation)\n\nprint translate(lexicon, \"bear eat princess\")",
                "id": 7,
                "key": 0
            }
        ],
        [],
        [
            {
                "diff": 1,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student75",
                "hover": "username:student75\nedge: (8->9)\ndiff:\n--- \n+++ \n@@ -21,27 +21,30 @@\n and output french+as+input=english,+output=french def translate(lexicon,sentence): defines-{\"one\":\"un\",-\"two\":\"deux\",-\"three\":\"trois\",-\"four:\"quatre\",-\"I\":\"je\",-\"you\":\"tu\",-\"and\":\"et\",-\"cats\":\"chats\",-\"love\":\"aime\",-\"like\":aime\",-\"my\":\"mes\"},+{\"one\"=\"un\",+\"two\"=\"deux\",+\"three\"=\"trois\",+\"four=\"quatre\",+\"I\"=\"je\",+\"you\"=\"tu\",+\"and\"=\"et\",+\"cats\"=\"chats\",+\"love\"=\"aime\",+\"like\"=aime\",+\"my\"=\"mes\"}, this program will run the phrase-\"I+input=\"I like my three@@ -50,8 +53,6 @@\n def translate and-output-the-french+output={} translation \"\"\"\n\nFROM completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french\ndef translate(lexicon,sentence): defines {\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four:\"quatre\", \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\", \"like\":aime\", \"my\":\"mes\"}, this program will run the phrase \"I like\nmy three cats\" through def translate and output the french translation\n    \"\"\"\n        words = sentence.split(' ')\n    translation = []\n    for word in words:\n        translation.append(lexicon[word])\n    return ' '.join(translation)\n\nprint translate(lexicon, \"I like my three cats\")\n\n\nTO completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=english, output=french\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation\n    \"\"\"\n        words = sentence.split(\" \")\n    translation = []\n    for word in words:\n        if word in lexicon:\n            translation.append(lexicon[word])\n        else:\n            translation.append(word)\n    return \" \".join(translation)\n\nlexicon = {\n    \"one\" : \"un\",\n    \"two\" : \"deux\",\n    \"three\" : \"trois\",\n    \"four",
                "id": 9,
                "key": 0
            }
        ],
        [
            {
                "diff": 8,
                "color": "#003a7d",
                "arrow_color": "#003a7d",
                "username": "student75",
                "hover": "username:student75\nedge: (9->10)\ndiff:\n--- \n+++ \n@@ -22,8 +22,7 @@\n output french as-input=english,-output=french+input=output def translate(lexicon,sentence): defines\n\nFROM completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=english, output=french\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation\n    \"\"\"\n        words = sentence.split(\" \")\n    translation = []\n    for word in words:\n        if word in lexicon:\n            translation.append(lexicon[word])\n        else:\n            translation.append(word)\n    return \" \".join(translation)\n\nlexicon = {\n    \"one\" : \"un\",\n    \"two\" : \"deux\",\n    \"three\" : \"trois\",\n    \"four\n\nTO completion:\ndef translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation\n    \"\"\"\n        words = sentence.split(' ')\n    translation = []\n    for word in words:\n        translation.append(lexicon[word])\n    return translation\n\nprint translate(lexicon, \"I like my three cats\")\n",
                "id": 10,
                "key": 0
            }
        ],
        []
    ]
}