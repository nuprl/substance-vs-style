breakout_edges:
  student29: &id002 !Edge
    _edge_tags:
    - 0
    attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
      \        if num % i == 0:\n            return False\n    return True\n"
    completion_to: "try:\n        num = int(num)\n        if num > 1:\n          \
      \  for i in range(2, num):\n                if (num % i) == 0:\n           \
      \         return False\n            else:\n                return True\n   \
      \     else:\n            return False\n    except ValueError:\n        return\
      \ False\n\n"
    diff: "--- \n+++ \n@@ -2,19 +2,30 @@\n check_prime(num): \"\"\" Convert-each+the\
      \ input to an integer.-If-that+Then+check+if+the integer is+a prime+number+and\
      \ return-\"True\".-Else,-return+\"True\"+if+it+is+prime+and \"False\"+if+it's+not\
      \ \"\"\""
    node_from: &id001 !Node
      _node_tags: null
      id: 2
      stderr:
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      stdout:
      - ''
      - ''
      - ''
      - ''
    node_to: !Node
      _node_tags: null
      id: 5
      stderr:
      - ''
      - ''
      - ''
      - ''
      stdout:
      - 'True

        '
      - 'False

        '
      - 'False

        '
      - 'True

        '
    prompt_from: "def check_prime(num):\n    \"\"\"\n    Convert each input to an\
      \ integer. If that integer is prime return \"True\". Else, return \"False\"\n\
      \    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    Convert the input to an integer.\
      \ Then check if the integer is a prime number and return \"True\" if it is prime\
      \ and \"False\" if it's not\n    \"\"\"\n    "
    state: success
    total_attempts: 3
    username: student29
  student32: null
  student34: null
  student49: &id005 !Edge
    _edge_tags:
    - m1
    attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
      \        if num % i == 0:\n            return False\n    return True\n"
    completion_to: "num = int(num)\n    if num > 1:\n        for i in range(2, num):\n\
      \            if (num % i) == 0:\n                return False\n        else:\n\
      \            return True\n    else:\n        return False\n\n"
    diff: "--- \n+++ \n@@ -1,18 +1,13 @@\n def check_prime(num): \"\"\"-given-a-string-type-cast-it-into+typecast+num+as\
      \ an integer, if-the-integer+num is only divisible"
    node_from: &id004 !Node
      _node_tags: null
      id: 2
      stderr:
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      stdout:
      - ''
      - ''
      - ''
      - ''
    node_to: !Node
      _node_tags: null
      id: 5
      stderr:
      - ''
      - ''
      - ''
      - ''
      stdout:
      - 'True

        '
      - 'False

        '
      - 'False

        '
      - 'True

        '
    prompt_from: "def check_prime(num):\n    \"\"\"\n    given a string type cast\
      \ it into an integer, if the integer is only divisible by itself and 1, return\
      \ True otherwise return False\n    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    typecast num as an integer,\
      \ if num is only divisible by itself and 1, return True otherwise return False\n\
      \    \"\"\"\n    "
    state: success
    total_attempts: 3
    username: student49
  student66: &id008 !Edge
    _edge_tags:
    - m1
    attempt_id: 5
    clues:
    - 1
    - 2
    - 3
    completion_from: "if num % 4 == 0 or num % 3 == 0:\n        return False\n   \
      \ else:\n        return True\n\n"
    completion_to: "num = int(num)\n    if num % 4 == 0 or num % 3 == 0:\n       \
      \ return False\n    else:\n        return True\n\n"
    diff: "--- \n+++ \n@@ -3,7 +3,7 @@\n \"\"\" change the-string+input into an integer"
    node_from: &id007 !Node
      _node_tags: null
      id: 3
      stderr:
      - 'TypeError: not all arguments converted during string formatting'
      - 'TypeError: not all arguments converted during string formatting'
      - 'TypeError: not all arguments converted during string formatting'
      - 'TypeError: not all arguments converted during string formatting'
      stdout:
      - ''
      - ''
      - ''
      - ''
    node_to: !Node
      _node_tags: null
      id: 5
      stderr:
      - ''
      - ''
      - ''
      - ''
      stdout:
      - 'True

        '
      - 'False

        '
      - 'False

        '
      - 'True

        '
    prompt_from: "def check_prime(num):\n    \"\"\"\n    change the string into an\
      \ integer if the number is not divisible buy 4 or 3 return true else return\
      \ false\n    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    change the input into an integer\
      \ if the number is not divisible buy 4 or 3 return true else return false\n\
      \    \"\"\"\n    "
    state: success
    total_attempts: 6
    username: student66
  student67: null
  student68: null
  student70: &id011 !Edge
    _edge_tags:
    - m1
    attempt_id: 4
    clues:
    - 1
    - 3
    completion_from: "if num == 2:\n        return True\n    if num < 2 or num % 2\
      \ == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n\
      \        if num % i == 0:\n            return False\n    return True\n\n"
    completion_to: "num = int(num)\n    if num > 1:\n        for i in range(2, num):\n\
      \            if (num % i) == 0:\n                return False\n            \
      \    break\n        else:\n            return True\n    else:\n        return\
      \ False\n\n"
    diff: "--- \n+++ \n@@ -1,13 +1,20 @@\n def check_prime(num): \"\"\"-treat+create+a+new+variable+that+saves\
      \ the input num as an-integer.+integer+using+int(). return whether this"
    node_from: &id010 !Node
      _node_tags: null
      id: 4
      stderr:
      - 'TypeError: ''<'' not supported between instances of ''str'' and ''int'''
      - 'TypeError: ''<'' not supported between instances of ''str'' and ''int'''
      - 'TypeError: ''<'' not supported between instances of ''str'' and ''int'''
      - 'TypeError: ''<'' not supported between instances of ''str'' and ''int'''
      stdout:
      - ''
      - ''
      - ''
      - ''
    node_to: !Node
      _node_tags: null
      id: 5
      stderr:
      - ''
      - ''
      - ''
      - ''
      stdout:
      - 'True

        '
      - 'False

        '
      - 'False

        '
      - 'True

        '
    prompt_from: "def check_prime(num):\n    \"\"\"\n    treat the input num as an\
      \ integer. return whether this integer is prime.\n    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    create a new variable that\
      \ saves the input num as an integer using int(). return whether this integer\
      \ is prime.\n    \"\"\"\n    "
    state: success
    total_attempts: 5
    username: student70
cycle_summary:
  student29:
  - !Edge
    _edge_tags:
    - a1
    attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
      \        if num % i == 0:\n            return False\n    return True\n"
    completion_to: "if num == 1:\n        return False\n    for i in range(2, num):\n\
      \        if num % i == 0:\n            return False\n    return True\n"
    diff: "--- \n+++ \n@@ -1,10 +1,15 @@\n def check_prime(num): \"\"\"+Convert+each+input+to+an+integer.\
      \ If-the-input-number+that+integer is prime return"
    node_from: *id001
    node_to: *id001
    prompt_from: "def check_prime(num):\n    \"\"\"\n    If the input number is prime\
      \ return \"True\". Else, return \"False\"\n    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    Convert each input to an integer.\
      \ If that integer is prime return \"True\". Else, return \"False\"\n    \"\"\
      \"\n    "
    state: neutral
    total_attempts: 3
    username: student29
  - *id002
  student32: []
  student34:
  - !Edge
    _edge_tags:
    - l3
    attempt_id: 1
    clues:
    - 2
    - 3
    completion_from: "for i in range(2,num):\n        if num % i == 0:\n         \
      \   return False\n    return True\n"
    completion_to: "if num == 1:\n        return False\n    for i in range(2,num):\n\
      \        if num % i == 0:\n            return False\n    return True\n"
    diff: "--- \n+++ \n@@ -3,21 +3,23 @@\n \"\"\" if num-is-divisible-by+cannot+produce\
      \ an integer+when+divided+by+integers other than 1 or-itself-it-is-false,+itself,+return+true.+If\
      \ otherwise-it-is-true+return+false. \"\"\""
    node_from: &id003 !Node
      _node_tags: null
      id: 2
      stderr:
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      stdout:
      - ''
      - ''
      - ''
      - ''
    node_to: *id003
    prompt_from: "def check_prime(num):\n    \"\"\"\n    if num is divisible by an\
      \ integer other than 1 or itself it is false, otherwise it is true\n    \"\"\
      \"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    if num cannot produce an integer\
      \ when divided by integers other than 1 or itself, return true. If otherwise\
      \ return false.\n    \"\"\"\n    "
    state: fail
    total_attempts: 2
    username: student34
  student49:
  - !Edge
    _edge_tags:
    - a1
    attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
      \        if num % i == 0:\n            return False\n    return True\n"
    completion_to: "if num == 1:\n        return False\n    for i in range(2, num):\n\
      \        if num % i == 0:\n            return False\n    return True\n"
    diff: "--- \n+++ \n@@ -2,6 +2,12 @@\n check_prime(num): \"\"\" given+a+string+type+cast+it+into\
      \ an integer, if"
    node_from: *id004
    node_to: *id004
    prompt_from: "def check_prime(num):\n    \"\"\"\n    given an integer, if the\
      \ integer is only divisible by itself and 1, return True otherwise return False\n\
      \    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    given a string type cast it\
      \ into an integer, if the integer is only divisible by itself and 1, return\
      \ True otherwise return False\n    \"\"\"\n    "
    state: neutral
    total_attempts: 3
    username: student49
  - *id005
  student66:
  - !Edge
    _edge_tags:
    - m2
    attempt_id: 1
    clues:
    - 2
    - 3
    completion_from: "for i in range(2, num):\n        if num % i == 0:\n        \
      \    return False\n    return True\n"
    completion_to: "if num == 1:\n        return False\n    for i in range(2, num):\n\
      \        if num % i == 0:\n            return False\n    return True\n\n"
    diff: "--- \n+++ \n@@ -8,4 +8,7 @@\n prime return true+else+return+false \"\"\""
    node_from: &id006 !Node
      _node_tags: null
      id: 2
      stderr:
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      stdout:
      - ''
      - ''
      - ''
      - ''
    node_to: *id006
    prompt_from: "def check_prime(num):\n    \"\"\"\n    if the number is prime return\
      \ true\n    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    if the number is prime return\
      \ true else return false\n    \"\"\"\n    "
    state: neutral
    total_attempts: 6
    username: student66
  - !Edge
    _edge_tags:
    - a1
    attempt_id: 3
    clues:
    - 1
    - 2
    - 3
    completion_from: "if num % 4 == 0 or num % 3 == 0:\n        return False\n   \
      \ else:\n        return True\n\n"
    completion_to: "if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n\
      \        return True\n\n"
    diff: "--- \n+++ \n@@ -1,6 +1,12 @@\n def check_prime(num): \"\"\"+change+the+string+into+an+in\
      \ if the number"
    node_from: *id007
    node_to: *id007
    prompt_from: "def check_prime(num):\n    \"\"\"\n    if the number is not divisible\
      \ buy 4 or 3 return true else return false\n    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    change the string into an in\
      \ if the number is not divisible buy 4 or 3 return true else return false\n\
      \    \"\"\"\n    "
    state: neutral
    total_attempts: 6
    username: student66
  - !Edge
    _edge_tags:
    - m1
    attempt_id: 4
    clues:
    - 1
    - 2
    - 3
    completion_from: "if num % 4 == 0 or num % 3 == 0:\n        return False\n   \
      \ else:\n        return True\n\n"
    completion_to: "if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n\
      \        return True\n\n"
    diff: "--- \n+++ \n@@ -6,7 +6,7 @@\n string into an-in+integer if the number"
    node_from: *id007
    node_to: *id007
    prompt_from: "def check_prime(num):\n    \"\"\"\n    change the string into an\
      \ in if the number is not divisible buy 4 or 3 return true else return false\n\
      \    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    change the string into an integer\
      \ if the number is not divisible buy 4 or 3 return true else return false\n\
      \    \"\"\"\n    "
    state: neutral
    total_attempts: 6
    username: student66
  - *id008
  student67: []
  student68:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    completion_from: "num = int(num)\n    if num % 2 == 0 and num > 2:\n        return\
      \ False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num\
      \ % i == 0:\n            return False\n    return True\n"
    completion_to: "if num == 1:\n        return False\n    elif num == 2:\n     \
      \   return True\n    else:\n        for i in range(2, num):\n            if\
      \ num % i == 0:\n                return False\n        return True\n"
    diff: "--- \n+++ \n@@ -24,5 +24,5 @@\n if not, return-false+false. \"\"\""
    node_from: !Node
      _node_tags: null
      id: 1
      stderr:
      - 'NameError: name ''math'' is not defined'
      - ''
      - 'NameError: name ''math'' is not defined'
      - 'NameError: name ''math'' is not defined'
      stdout:
      - ''
      - 'False

        '
      - ''
      - ''
    node_to: &id009 !Node
      _node_tags: null
      id: 2
      stderr:
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      - 'TypeError: ''str'' object cannot be interpreted as an integer'
      stdout:
      - ''
      - ''
      - ''
      - ''
    prompt_from: "def check_prime(num):\n    \"\"\"\n    given a string, first cast\
      \ the string into an integer and return true if that number is a prime number.\
      \ if not, return false\n    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    given a string, first cast\
      \ the string into an integer and return true if that number is a prime number.\
      \ if not, return false. \n    \"\"\"\n    "
    state: neutral
    total_attempts: 6
    username: student68
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 3
    clues:
    - 1
    - 2
    - 3
    completion_from: "if num == 1:\n        return False\n    elif num == 2:\n   \
      \     return True\n    else:\n        for i in range(2, num):\n            if\
      \ num % i == 0:\n                return False\n        return True\n"
    completion_to: "if num == 1:\n        return False\n    for i in range(2, num):\n\
      \        if num % i == 0:\n            return False\n    return True\n"
    diff: "--- \n+++ \n@@ -10,8 +10,7 @@\n string into an-integer-and+integer. return\
      \ true if"
    node_from: *id009
    node_to: *id009
    prompt_from: "def check_prime(num):\n    \"\"\"\n    given a string, first cast\
      \ the string into an integer and return true if that number is a prime number.\
      \ if not, return false. \n    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    given a string, first cast\
      \ the string into an integer. return true if that number is a prime number.\
      \ if not, return false. \n    \"\"\"\n    "
    state: neutral
    total_attempts: 6
    username: student68
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 4
    clues:
    - 1
    - 2
    - 3
    completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
      \        if num % i == 0:\n            return False\n    return True\n"
    completion_to: "if num == 1:\n        return False\n    for i in range(2, num):\n\
      \        if num % i == 0:\n            return False\n    return True\n"
    diff: "--- \n+++ \n@@ -3,14 +3,13 @@\n \"\"\" given a-string,-first-cast+character,+convert\
      \ the-string+character into-an-integer.+a+number. return true if"
    node_from: *id009
    node_to: *id009
    prompt_from: "def check_prime(num):\n    \"\"\"\n    given a string, first cast\
      \ the string into an integer. return true if that number is a prime number.\
      \ if not, return false. \n    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    given a character, convert\
      \ the character into a number. return true if that number is a prime number.\
      \ if not, return false. \n    \"\"\"\n    "
    state: neutral
    total_attempts: 6
    username: student68
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 5
    clues:
    - 1
    - 2
    - 3
    completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
      \        if num % i == 0:\n            return False\n    return True\n"
    completion_to: "if num == 1:\n        return False\n    for i in range(2, num):\n\
      \        if num % i == 0:\n            return False\n    return True\n"
    diff: ''
    node_from: *id009
    node_to: *id009
    prompt_from: "def check_prime(num):\n    \"\"\"\n    given a character, convert\
      \ the character into a number. return true if that number is a prime number.\
      \ if not, return false. \n    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    given a character, convert\
      \ the character into a number. return true if that number is a prime number.\
      \ if not, return false. \n    \"\"\"\n    "
    state: fail
    total_attempts: 6
    username: student68
  student70:
  - !Edge
    _edge_tags:
    - a1
    attempt_id: 3
    clues:
    - 1
    - 3
    completion_from: "if num < 2:\n        return False\n    for i in range(2, num):\n\
      \        if num % i == 0:\n            return False\n    return True\n\n"
    completion_to: "if num == 2:\n        return True\n    if num < 2 or num % 2 ==\
      \ 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n\
      \        if num % i == 0:\n            return False\n    return True\n\n"
    diff: "--- \n+++ \n@@ -1,14 +1,13 @@\n def check_prime(num): \"\"\"-save+treat\
      \ the input num-to+as an-integer-variable.+integer. return whether this"
    node_from: *id010
    node_to: *id010
    prompt_from: "def check_prime(num):\n    \"\"\"\n    save the input num to an\
      \ integer variable. return whether this integer is prime.\n    \"\"\"\n    "
    prompt_to: "def check_prime(num):\n    \"\"\"\n    treat the input num as an integer.\
      \ return whether this integer is prime.\n    \"\"\"\n    "
    state: neutral
    total_attempts: 5
    username: student70
  - *id011
