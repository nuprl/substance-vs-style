breakout_edges:
  student19: null
  student20: &id002 !Edge
    _edge_tags:
    - a2
    attempt_id: 5
    clues:
    - 1
    - 2
    completion_from: 'return l1+l2

      '
    completion_to: 'return [x+y for x,y in zip(l1,l2)]

      '
    diff: "--- \n+++ \n@@ -2,8 +2,11 @@\n combine(l1,l2): \"\"\" Combine-all elements+sharing+the+same+index\
      \ in two lists"
    node_from: &id001 !Node
      _node_tags: null
      id: 5
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 20, 30], [40, 50, 60], [70, 80, 90]]

        '
      - '[[9, 8, 7], [0, 1, 2]]

        '
      - '[[2, 3], [1, 1], [10, 11], [4, 5], [1, 1], [14, 15], [3, 2], [77, 87]]

        '
    node_to: !Node
      _node_tags: null
      id: 7
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '[[1, 2, 3, 10, 20, 30], [4, 5, 6, 40, 50, 60], [7, 8, 9, 70, 80, 90]]

        '
      - '[[9, 8, 7, 0, 1, 2]]

        '
      - '[[2, 3, 1, 1], [1, 1, 14, 15], [10, 11, 3, 2], [4, 5, 77, 87]]

        '
    prompt_from: "def combine(l1,l2):\n    \"\"\"\n    Combine all elements in two\
      \ lists\n    \"\"\"\n    "
    prompt_to: "def combine(l1,l2):\n    \"\"\"\n    Combine elements sharing the\
      \ same index in two lists\n    \"\"\"\n    "
    state: success
    total_attempts: 6
    username: student20
  student42: null
  student43: null
  student54: &id004 !Edge
    _edge_tags:
    - m1
    - a2
    attempt_id: 3
    clues:
    - 1
    - 2
    - 3
    completion_from: 'return l1+l2

      '
    completion_to: "if len(l1) == 1:\n        return l1[0]\n    else:\n        return\
      \ [l1[0],l2[0]] + combine(l1[1:],l2[1:])\n"
    diff: "--- \n+++ \n@@ -1,11 +1,17 @@\n def combine(l1,l2): \"\"\"-Combine+Alternatively+combine+inner+lists+of\
      \ the-two-lists-into+outer+list+until+you+have one single list."
    node_from: &id003 !Node
      _node_tags: null
      id: 5
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 20, 30], [40, 50, 60], [70, 80, 90]]

        '
      - '[[9, 8, 7], [0, 1, 2]]

        '
      - '[[2, 3], [1, 1], [10, 11], [4, 5], [1, 1], [14, 15], [3, 2], [77, 87]]

        '
    node_to: !Node
      _node_tags: null
      id: 8
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '[[1, 2, 3], [10, 20, 30], [4, 5, 6], [40, 50, 60], 7, 8, 9]

        '
      - '[9, 8, 7]

        '
      - '[[2, 3], [1, 1], [1, 1], [14, 15], [10, 11], [3, 2], 4, 5]

        '
    prompt_from: "def combine(l1,l2):\n    \"\"\"\n    Combine the two lists into\
      \ one single list.\n    \"\"\"\n    "
    prompt_to: "def combine(l1,l2):\n    \"\"\"\n    Alternatively combine inner lists\
      \ of the outer list until you have one single list.\n    \"\"\"\n    "
    state: neutral
    total_attempts: 5
    username: student54
cycle_summary:
  student19: []
  student20:
  - !Edge
    _edge_tags:
    - d2
    attempt_id: 3
    clues:
    - 1
    completion_from: 'return [x for pair in zip(l1,l2) for x in pair]

      '
    completion_to: 'return l1+l2

      '
    diff: "--- \n+++ \n@@ -1,18 +1,7 @@\n def combine(l1,l2): \"\"\"-Use-zip-to-loop-through-the+Combine\
      \ two lists-and-append-them-to-each-other \"\"\""
    node_from: !Node
      _node_tags: null
      id: 1
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '[[1, 2, 3], [10, 20, 30], [4, 5, 6], [40, 50, 60], [7, 8, 9], [70, 80, 90]]

        '
      - '[[9, 8, 7], [0, 1, 2]]

        '
      - '[[2, 3], [1, 1], [1, 1], [14, 15], [10, 11], [3, 2], [4, 5], [77, 87]]

        '
    node_to: *id001
    prompt_from: "def combine(l1,l2):\n    \"\"\"\n    Use zip to loop through the\
      \ two lists and append them to each other\n    \"\"\"\n    "
    prompt_to: "def combine(l1,l2):\n    \"\"\"\n    Combine two lists\n    \"\"\"\
      \n    "
    state: neutral
    total_attempts: 6
    username: student20
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 4
    clues:
    - 1
    completion_from: 'return l1+l2

      '
    completion_to: 'return l1+l2

      '
    diff: "--- \n+++ \n@@ -2,6 +2,9 @@\n combine(l1,l2): \"\"\" Combine+all+elements+in\
      \ two lists \"\"\""
    node_from: *id001
    node_to: *id001
    prompt_from: "def combine(l1,l2):\n    \"\"\"\n    Combine two lists\n    \"\"\
      \"\n    "
    prompt_to: "def combine(l1,l2):\n    \"\"\"\n    Combine all elements in two lists\n\
      \    \"\"\"\n    "
    state: neutral
    total_attempts: 6
    username: student20
  - *id002
  student42: []
  student43: []
  student54:
  - !Edge
    _edge_tags:
    - a3
    attempt_id: 2
    clues:
    - 1
    - 3
    completion_from: 'return l1+l2

      '
    completion_to: 'return l1+l2

      '
    diff: "--- \n+++ \n@@ -4,5 +4,9 @@\n Combine the two-lists.+lists+into+one+single+list.\
      \ \"\"\""
    node_from: *id003
    node_to: *id003
    prompt_from: "def combine(l1,l2):\n    \"\"\"\n    Combine the two lists.\n  \
      \  \"\"\"\n    "
    prompt_to: "def combine(l1,l2):\n    \"\"\"\n    Combine the two lists into one\
      \ single list.\n    \"\"\"\n    "
    state: neutral
    total_attempts: 5
    username: student54
  - *id004
