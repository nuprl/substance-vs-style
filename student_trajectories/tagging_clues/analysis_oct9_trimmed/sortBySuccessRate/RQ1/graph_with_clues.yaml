!Graph
COLORS:
- '#d83034'
- '#f9e858'
- '#008dff'
- '#4ecb8d'
- '#c701ff'
- '#ffcd8e'
- '#003a7d'
- '#Ff73b6'
- '#ff7f50'
- '#7fff00'
- '#8a2be2'
- '#ffd700'
- '#ff4500'
- '#00ced1'
- '#ff1493'
- '#9400d3'
- '#00bfff'
edges:
- !Edge
  _edge_tags:
  - m5
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  - 5
  completion_from: "for i in range(len(nominations)):\n        wins = nominations[i][\"\
    Wins\"]\n        noms = nominations[i][\"Nominations\"]\n        success = wins/noms\n\
    \        nominations[i][\"Success\"] = success\n    nominations.sort(key = lambda\
    \ x: x[\"Success\"], reverse = True)\n    return nominations\n"
  completion_to: "for i in range(len(nominations)):\n        wins = nominations[i][\"\
    Wins\"]\n        noms = nominations[i][\"Nominations\"]\n        success = wins\
    \ / noms\n        nominations[i][\"Success\"] = success\n    nominations.sort(key=lambda\
    \ x: x[\"Success\"], reverse=True)\n    return nominations\n"
  diff: "--- \n+++ \n@@ -55,5 +55,8 @@\n by the highest-success.+success+within+each+dictionary.\
    \ \"\"\""
  node_from: &id001 !Node
    _node_tags: null
    id: 1
    stderr:
    - 'KeyError: ''Wins'''
    - 'KeyError: ''Wins'''
    - 'KeyError: ''Wins'''
    stdout:
    - ''
    - ''
    - ''
  node_to: *id001
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function\
    \ takes in a list of dictionaries that have the nominee, the amount of wins, and\
    \ the amount of noms. A new attribute is given to each dictionary which is the\
    \ success attribute. It is calculated by dividing wins by noms and creates a float.\
    \ The lists are then sorted by the highest success.\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes\
    \ in a list of dictionaries that have the nominee, the amount of wins, and the\
    \ amount of noms. A new attribute is given to each dictionary which is the success\
    \ attribute. It is calculated by dividing wins by noms and creates a float. The\
    \ lists are then sorted by the highest success within each dictionary.\n    \"\
    \"\"\n    "
  state: neutral
  total_attempts: 3
  username: student23
- !Edge
  _edge_tags:
  - m1
  attempt_id: 2
  clues:
  - 1
  - 2
  - 3
  - 5
  completion_from: "for i in range(len(nominations)):\n        wins = nominations[i][\"\
    Wins\"]\n        noms = nominations[i][\"Nominations\"]\n        success = wins\
    \ / noms\n        nominations[i][\"Success\"] = success\n    nominations.sort(key=lambda\
    \ x: x[\"Success\"], reverse=True)\n    return nominations\n"
  completion_to: "for i in nominations:\n        i[\"success\"] = i[\"wins\"] / i[\"\
    noms\"]\n    return sorted(nominations, key=lambda x: x[\"success\"], reverse=True)\n"
  diff: "--- \n+++ \n@@ -12,15 +12,11 @@\n that have the+keys: nominee, the-amount-of\
    \ wins, and-the-amount-of noms. A new"
  node_from: *id001
  node_to: &id002 !Node
    _node_tags: null
    id: 0
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - "[{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.6428571428571429},\
      \ {'nominee': 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544},\
      \ {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}]\n"
    - '[{''nominee'': ''Thomas'', ''wins'': 11, ''noms'': 38, ''success'': 0.2894736842105263},
      {''nominee'': ''Swift'', ''wins'': 11, ''noms'': 41, ''success'': 0.2682926829268293},
      {''nominee'': ''Babyface'', ''wins'': 11, ''noms'': 49, ''success'': 0.22448979591836735}]

      '
    - "[{'nominee': 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544},\
      \ {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22448979591836735}]\n"
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function\
    \ takes in a list of dictionaries that have the nominee, the amount of wins, and\
    \ the amount of noms. A new attribute is given to each dictionary which is the\
    \ success attribute. It is calculated by dividing wins by noms and creates a float.\
    \ The lists are then sorted by the highest success within each dictionary.\n \
    \   \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes\
    \ in a list of dictionaries that have the keys:  nominee, the wins, and noms.\
    \ A new attribute is given to each dictionary which is the success attribute.\
    \ It is calculated by dividing wins by noms and creates a float. The lists are\
    \ then sorted by the highest success within each dictionary.\n    \"\"\"\n    "
  state: fail
  total_attempts: 3
  username: student23
- !Edge
  _edge_tags:
  - a3
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  - 5
  completion_from: "for i in nominations:\n        i[\"success\"] = i[\"wins\"] /\
    \ i[\"nominations\"]\n    return sorted(nominations, key=lambda x: x[\"success\"\
    ], reverse=True)\n"
  completion_to: "for i in nominations:\n        i[\"success\"] = i[\"wins\"] / i[\"\
    noms\"]\n    return sorted(nominations, key=lambda x: x[\"success\"], reverse=True)\n"
  diff: "--- \n+++ \n@@ -13,21 +13,17 @@\n function divides the-integer-in-the-third-place+value+for+\"\
    wins\" in the dictionary by the-integer-in-the-fourth-place+value+for+\"noms\"\
    \ in the dictionary,"
  node_from: &id003 !Node
    _node_tags: null
    id: 10
    stderr:
    - 'KeyError: ''nominations'''
    - 'KeyError: ''nominations'''
    - 'KeyError: ''nominations'''
    stdout:
    - ''
    - ''
    - ''
  node_to: *id002
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function\
    \ takes in a list of dictionaries. The function divides the integer in the third\
    \ place in the dictionary by the integer in the fourth place in the dictionary,\
    \ adding a new entry to that dictionary called \"success\" with the output value.\
    \ It then sorts the dictionary entries by the value in \"success,\" highest to\
    \ lowest. \n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes\
    \ in a list of dictionaries. The function divides the value for \"wins\" in the\
    \ dictionary by the value for \"noms\" in the dictionary, adding a new entry to\
    \ that dictionary called \"success\" with the output value. It then sorts the\
    \ dictionary entries by the value in \"success,\" highest to lowest. \n    \"\"\
    \"\n    "
  state: neutral
  total_attempts: 3
  username: student33
- !Edge
  _edge_tags:
  - a4
  - a6
  attempt_id: 2
  clues:
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  completion_from: "for i in nominations:\n        i[\"success\"] = i[\"wins\"] /\
    \ i[\"noms\"]\n    return sorted(nominations, key=lambda x: x[\"success\"], reverse=True)\n"
  completion_to: "for i in nominations:\n        i[\"success\"] = round(i[\"wins\"\
    ] / i[\"noms\"], 2)\n    sortedList = sorted(nominations, key=lambda i: i[\"success\"\
    ], reverse=True)\n    for i in sortedList:\n        print(i)\n\nsortBySuccessRate(nominations)\n"
  diff: "--- \n+++ \n@@ -39,7 +39,12 @@\n with the output-value.+value+truncated+to+two+decimal+places.\
    \ It then sorts@@ -53,5 +58,13 @@\n \"success,\" highest to-lowest.+lowest,+returning+the+dictionaries+each+on+a+separate+line.\
    \ \"\"\""
  node_from: *id002
  node_to: &id015 !Node
    _node_tags: null
    id: 11
    stderr:
    - 'IndentationError: expected an indented block after ''for'' statement on line
      8'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      8'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      8'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function\
    \ takes in a list of dictionaries. The function divides the value for \"wins\"\
    \ in the dictionary by the value for \"noms\" in the dictionary, adding a new\
    \ entry to that dictionary called \"success\" with the output value. It then sorts\
    \ the dictionary entries by the value in \"success,\" highest to lowest. \n  \
    \  \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes\
    \ in a list of dictionaries. The function divides the value for \"wins\" in the\
    \ dictionary by the value for \"noms\" in the dictionary, adding a new entry to\
    \ that dictionary called \"success\" with the output value truncated to two decimal\
    \ places. It then sorts the dictionary entries by the value in \"success,\" highest\
    \ to lowest, returning the dictionaries each on a separate line. \n    \"\"\"\n\
    \    "
  state: fail
  total_attempts: 3
  username: student33
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  completion_from: "newList = []\n    for i in range(len(nominations)-1, -1, -1):\n\
    \        success = nominations[i]['wins']/nominations[i]['nominations']\n    \
    \    newList.append([nominations[i]['film'], nominations[i]['year'], nominations[i]['category'],\
    \ nominations[i]['won'], nominations[i]['name'], nominations"
  completion_to: "newList = []\n    for i in range(len(nominations)-1, -1, -1):\n\
    \        success = nominations[i]['wins']/nominations[i]['nominations']\n    \
    \    newList.append(nominations[i])\n        newList[len(newList)-1]['success']\
    \ = success\n    return newList\n"
  diff: "--- \n+++ \n@@ -14,7 +14,11 @@\n through the dictioanries-backwards.+backwards+using+a+for+loop.\
    \ A new variable@@ -23,7 +27,14 @@\n created which computes-(wins/noms).+(wins/noms)+during+each+loop+run+for+every+dictionary.\
    \ A new list"
  node_from: &id019 !Node
    _node_tags: null
    id: 9
    stderr:
    - 'SyntaxError: ''['' was never closed'
    - 'SyntaxError: ''['' was never closed'
    - 'SyntaxError: ''['' was never closed'
    stdout:
    - ''
    - ''
    - ''
  node_to: *id003
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations\
    \ is a list of dictionaries. The function iterates through the dictioanries backwards.\
    \ A new variable 'success' is created which computes (wins/noms). A new list is\
    \ made. As the input list is iterated through, the new list is appended with the\
    \ contents of the dictionary along with the corresponding success rate.\n    \"\
    \"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations\
    \ is a list of dictionaries. The function iterates through the dictioanries backwards\
    \ using a for loop. A new variable 'success' is created which computes (wins/noms)\
    \ during each loop run for every dictionary. A new list is made. As the input\
    \ list is iterated through, the new list is appended with the contents of the\
    \ dictionary along with the corresponding success rate.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student35
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues:
  - 1
  - 2
  - 3
  completion_from: "newList = []\n    for i in range(len(nominations)-1, -1, -1):\n\
    \        success = nominations[i]['wins']/nominations[i]['nominations']\n    \
    \    newList.append(nominations[i])\n        newList[len(newList)-1]['success']\
    \ = success\n    return newList\n"
  completion_to: "newList = []\n    for i in range(len(nominations)-1, -1, -1):\n\
    \        success = nominations[i]['wins']/nominations[i]['nominations']\n    \
    \    newList.append([nominations[i]['film'], nominations[i]['year'], nominations[i]['category'],\
    \ nominations[i]['nominees'], nominations[i]['wins"
  diff: ''
  node_from: *id003
  node_to: &id004 !Node
    _node_tags: null
    id: 20
    stderr:
    - 'SyntaxError: unterminated string literal (detected at line 8)'
    - 'SyntaxError: unterminated string literal (detected at line 8)'
    - 'SyntaxError: unterminated string literal (detected at line 8)'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations\
    \ is a list of dictionaries. The function iterates through the dictioanries backwards\
    \ using a for loop. A new variable 'success' is created which computes (wins/noms)\
    \ during each loop run for every dictionary. A new list is made. As the input\
    \ list is iterated through, the new list is appended with the contents of the\
    \ dictionary along with the corresponding success rate.\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations\
    \ is a list of dictionaries. The function iterates through the dictioanries backwards\
    \ using a for loop. A new variable 'success' is created which computes (wins/noms)\
    \ during each loop run for every dictionary. A new list is made. As the input\
    \ list is iterated through, the new list is appended with the contents of the\
    \ dictionary along with the corresponding success rate.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student35
- !Edge
  _edge_tags:
  - m1
  attempt_id: 3
  clues:
  - 1
  - 2
  - 3
  completion_from: "newList = []\n    for i in range(len(nominations)-1, -1, -1):\n\
    \        success = nominations[i]['wins']/nominations[i]['nominations']\n    \
    \    newList.append([nominations[i]['film'], nominations[i]['year'], nominations[i]['category'],\
    \ nominations[i]['nominees'], nominations[i]['wins"
  completion_to: "newList = []\n    for i in range(len(nominations)-1,-1,-1):\n  \
    \      success = (nominations[i]['wins']/nominations[i]['noms'])\n        newList.append({'actor':nominations[i]['actor'],\
    \ 'film':nominations[i]['film'], 'category':nominations[i]['category'], 'year':"
  diff: "--- \n+++ \n@@ -28,6 +28,13 @@\n which computes (wins/noms)+(noms+is+the+key+in+the+dictionary)\
    \ during each loop"
  node_from: *id004
  node_to: &id017 !Node
    _node_tags: null
    id: 5
    stderr:
    - 'SyntaxError: ''{'' was never closed'
    - 'SyntaxError: ''{'' was never closed'
    - 'SyntaxError: ''{'' was never closed'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations\
    \ is a list of dictionaries. The function iterates through the dictioanries backwards\
    \ using a for loop. A new variable 'success' is created which computes (wins/noms)\
    \ during each loop run for every dictionary. A new list is made. As the input\
    \ list is iterated through, the new list is appended with the contents of the\
    \ dictionary along with the corresponding success rate.\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations\
    \ is a list of dictionaries. The function iterates through the dictioanries backwards\
    \ using a for loop. A new variable 'success' is created which computes (wins/noms)\
    \ (noms is the key in the dictionary) during each loop run for every dictionary.\
    \ A new list is made. As the input list is iterated through, the new list is appended\
    \ with the contents of the dictionary along with the corresponding success rate.\n\
    \    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student35
- !Edge
  _edge_tags:
  - a1
  - m5
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  - 5
  - 6
  completion_from: "success = []\n    for i in range(len(nominations)):\n        success.append(nominations[i][1]/nominations[i][2])\n\
    \    return [x for _,x in sorted(zip(success,nominations))]\n"
  completion_to: "for i in nominations:\n        i['success'] = i['wins']/i['noms']\n\
    \    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n"
  diff: "--- \n+++ \n@@ -1,27 +1,38 @@\n def sortBySuccessRate(nominations): \"\"\"\
    +the+input+is+a+list+of+dictionaries. the function will divide the-number-of-wins+value+within+key+'wins'\
    \ by the+value+within+key+'noms'.+the+new number-of-noms.-this will be-defined-by-the+stores+as+a\
    \ new-variable+key, 'success'. the function@@ -31,13 +42,21 @@\n a list that-orders+reorders\
    \ the-input+dictionaries+within+the+original+list, in-increasing order of+highest\
    \ success-values+value+to+lowest+success+value. \"\"\""
  node_from: &id022 !Node
    _node_tags: null
    id: 19
    stderr:
    - 'KeyError: 1'
    - 'KeyError: 1'
    - 'KeyError: 1'
    stdout:
    - ''
    - ''
    - ''
  node_to: *id002
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    the function\
    \ will divide the number of wins by the number of noms. this will be defined by\
    \ the new variable 'success'. the function will then return a list that orders\
    \ the input in increasing order of success values\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    the input is a\
    \ list of dictionaries. the function will divide the value within key 'wins' by\
    \ the value within key 'noms'. the new number will be stores as a new key, 'success'.\
    \ the function will then return a list that reorders the dictionaries within the\
    \ original list, in order of highest success value to lowest success value.\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student40
- !Edge
  _edge_tags:
  - a4
  attempt_id: 2
  clues:
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  completion_from: "for i in nominations:\n        i['success'] = i['wins']/i['noms']\n\
    \    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n"
  completion_to: "for i in nominations:\n        i['success'] = round(i['wins'] /\
    \ i['noms'], 2)\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n"
  diff: "--- \n+++ \n@@ -23,6 +23,15 @@\n within key 'noms'.+this+number+will+be+rounded+to+two+decimal+values.\
    \ the new number"
  node_from: *id002
  node_to: &id009 !Node
    _node_tags: null
    id: 2
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - "[{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, {'nominee':\
      \ 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, {'nominee': 'Beyonc\xE9\
      ', 'wins': 28, 'noms': 79, 'success': 0.35}]\n"
    - '[{''nominee'': ''Thomas'', ''wins'': 11, ''noms'': 38, ''success'': 0.29},
      {''nominee'': ''Swift'', ''wins'': 11, ''noms'': 41, ''success'': 0.27}, {''nominee'':
      ''Babyface'', ''wins'': 11, ''noms'': 49, ''success'': 0.22}]

      '
    - "[{'nominee': 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'success': 0.35}, {'nominee':\
      \ 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\n"
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    the input is\
    \ a list of dictionaries. the function will divide the value within key 'wins'\
    \ by the value within key 'noms'. the new number will be stores as a new key,\
    \ 'success'. the function will then return a list that reorders the dictionaries\
    \ within the original list, in order of highest success value to lowest success\
    \ value.\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    the input is a\
    \ list of dictionaries. the function will divide the value within key 'wins' by\
    \ the value within key 'noms'. this number will be rounded to two decimal values.\
    \ the new number will be stores as a new key, 'success'. the function will then\
    \ return a list that reorders the dictionaries within the original list, in order\
    \ of highest success value to lowest success value.\n    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student40
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues:
  - 2
  - 3
  - 5
  completion_from: "for i in nominations:\n        i['success'] = i['wins'] / i['nominations']\n\
    \    nominations.sort(key=lambda x: x['success'], reverse=True)\n    print(nominations)\n\
    \nsortBySuccessRate(nominations)"
  completion_to: "for i in nominations:\n        i['success'] = i['wins'] / i['nominations']\n\
    \    nominations.sort(key=lambda x: x['success'], reverse=True)\n    print(nominations)\n\
    \nsortBySuccessRate(nominations)"
  diff: "--- \n+++ \n@@ -34,7 +34,7 @@\n the value of-'sucess'+'success' and print\
    \ the"
  node_from: &id005 !Node
    _node_tags: null
    id: 17
    stderr:
    - 'NameError: name ''nominations'' is not defined'
    - 'NameError: name ''nominations'' is not defined'
    - 'NameError: name ''nominations'' is not defined'
    stdout:
    - ''
    - ''
    - ''
  node_to: *id005
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    For every dictionary\
    \ in the array,\ncalculate the 'success' by dividing the value of wins by noms\
    \ and add it into the dictionary. \nSort the array in descending order of the\
    \ value of 'sucess' and print the array. \n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    For every dictionary\
    \ in the array,\ncalculate the 'success' by dividing the value of wins by noms\
    \ and add it into the dictionary. \nSort the array in descending order of the\
    \ value of 'success' and print the array. \n    \"\"\"\n    "
  state: fail
  total_attempts: 2
  username: student44
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues:
  - 2
  - 3
  completion_from: "for nom in nominations:\n        nom[\"success\"] = nom[\"wins\"\
    ] / nom[\"nominations\"]\n    return sorted(nominations, key=lambda k: k[\"success\"\
    ], reverse=True)\n"
  completion_to: "for key in nominations:\n        nominations[key][\"success\"] =\
    \ nominations[key][\"wins\"] / nominations[key][\"nominations\"]\n    return sorted(nominations.items(),\
    \ key = lambda x: x[0], reverse = True)\n"
  diff: "--- \n+++ \n@@ -10,9 +10,7 @@\n element in the-list-of-dictionaries+dictionary\
    \ called \"success\". Calculate"
  node_from: *id003
  node_to: &id006 !Node
    _node_tags: null
    id: 6
    stderr:
    - 'TypeError: list indices must be integers or slices, not dict'
    - 'TypeError: list indices must be integers or slices, not dict'
    - 'TypeError: list indices must be integers or slices, not dict'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    Add a new part\
    \ to each element in the list of dictionaries called \"success\". Calculate success\
    \ by dividing wins by noms. Return in reverse alphabetical order.\n    \"\"\"\n\
    \    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    Add a new part\
    \ to each element in the dictionary called \"success\". Calculate success by dividing\
    \ wins by noms. Return in reverse alphabetical order.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student50
- !Edge
  _edge_tags:
  - l3
  attempt_id: 2
  clues:
  - 2
  - 3
  completion_from: "for key in nominations:\n        nominations[key][\"success\"\
    ] = nominations[key][\"wins\"] / nominations[key][\"nominations\"]\n    return\
    \ sorted(nominations.items(), key = lambda x: x[0], reverse = True)\n"
  completion_to: "for nominee in nominations:\n        wins = nominee[\"wins\"]\n\
    \        losses = nominee[\"losses\"]\n        success = wins / losses\n     \
    \   nominee[\"success\"] = success\n    return sorted(nominations, key=lambda\
    \ x: x[\"success\"], reverse=True)\n"
  diff: "--- \n+++ \n@@ -4,12 +4,10 @@\n Add a new-part+element to each-element-in-the+nominee's\
    \ dictionary called \"success\".@@ -17,12 +15,17 @@\n success by dividing+the+number+of\
    \ wins by-noms.+the+number+of+losses. Return in reverse-alphabetical order. \"\
    \"\""
  node_from: *id006
  node_to: &id016 !Node
    _node_tags: null
    id: 4
    stderr:
    - 'KeyError: ''losses'''
    - 'KeyError: ''losses'''
    - 'KeyError: ''losses'''
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    Add a new part\
    \ to each element in the dictionary called \"success\". Calculate success by dividing\
    \ wins by noms. Return in reverse alphabetical order.\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    Add a new element\
    \ to each nominee's dictionary called \"success\". Calculate success by dividing\
    \ the number of wins by the number of losses. Return in reverse order.\n    \"\
    \"\"\n    "
  state: fail
  total_attempts: 3
  username: student50
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues:
  - 1
  - 6
  completion_from: 'return sorted(nominations, key=lambda x: x[''successRate''], reverse=True)

    '
  completion_to: 'return sorted(nominations, key=lambda x: x[''successRate''], reverse=True)

    '
  diff: "--- \n+++ \n@@ -19,4 +19,8 @@\n in the input+for+the+key+'nominee' \"\"\""
  node_from: &id007 !Node
    _node_tags: null
    id: 16
    stderr:
    - 'KeyError: ''successRate'''
    - 'KeyError: ''successRate'''
    - 'KeyError: ''successRate'''
    stdout:
    - ''
    - ''
    - ''
  node_to: *id007
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    takes a list\
    \ of dictionaries as an input. returns an ordered list of the dictionaries in\
    \ the input\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    takes a list of\
    \ dictionaries as an input. returns an ordered list of the dictionaries in the\
    \ input for the key 'nominee'\n    \"\"\"\n    "
  state: neutral
  total_attempts: 2
  username: student59
- !Edge
  _edge_tags:
  - a4
  attempt_id: 1
  clues:
  - 1
  - 3
  - 4
  - 6
  completion_from: "for i in range(len(nominations)):\n        wins = nominations[i]['wins']\n\
    \        noms = nominations[i]['noms']\n        nominations[i]['successRate']\
    \ = wins / noms\n    return nominations\n"
  completion_to: "for i in range(len(nominations)):\n        nominations[i]['successRate']\
    \ = round((nominations[i]['wins']/nominations[i]['noms'])*100, 2)\n    return\
    \ nominations\n"
  diff: "--- \n+++ \n@@ -70,4 +70,21 @@\n wins to nominations.+This+function+rounds+every+decimal+to+2+decimal+places.+This+functions+output+is+a+single+2d+list.\
    \ \"\"\""
  node_from: &id021 !Node
    _node_tags: null
    id: 15
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - "[{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'successRate': 0.35}, {'nominee':\
      \ 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'successRate': 0.35443037974683544},\
      \ {'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'successRate': 0.6428571428571429}]\n"
    - '[{''nominee'': ''Babyface'', ''wins'': 11, ''noms'': 49, ''successRate'': 0.22448979591836735},
      {''nominee'': ''Swift'', ''wins'': 11, ''noms'': 41, ''successRate'': 0.2682926829268293},
      {''nominee'': ''Thomas'', ''wins'': 11, ''noms'': 38, ''successRate'': 0.2894736842105263}]

      '
    - "[{'nominee': 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'successRate': 0.35443037974683544},\
      \ {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'successRate': 0.22448979591836735}]\n"
  node_to: &id008 !Node
    _node_tags: null
    id: 13
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - "[{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'successRate': 35.0}, {'nominee':\
      \ 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'successRate': 35.44}, {'nominee': 'Krauss',\
      \ 'wins': 27, 'noms': 42, 'successRate': 64.29}]\n"
    - '[{''nominee'': ''Babyface'', ''wins'': 11, ''noms'': 49, ''successRate'': 22.45},
      {''nominee'': ''Swift'', ''wins'': 11, ''noms'': 41, ''successRate'': 26.83},
      {''nominee'': ''Thomas'', ''wins'': 11, ''noms'': 38, ''successRate'': 28.95}]

      '
    - "[{'nominee': 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'successRate': 35.44}, {'nominee':\
      \ 'Babyface', 'wins': 11, 'noms': 49, 'successRate': 22.45}]\n"
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function\
    \ takes in a 2d list containing dictionaries at its parameter. In each dictionary\
    \ is the nominee, the number of wins they have and the amount of nominations they\
    \ have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee':\
    \ 'Beyonc\xE9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms':\
    \ 42}]. This function then returns this dictionary with an added parameter of\
    \ an average of wins to nominations. \n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes\
    \ in a 2d list containing dictionaries at its parameter. In each dictionary is\
    \ the nominee, the number of wins they have and the amount of nominations they\
    \ have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee':\
    \ 'Beyonc\xE9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms':\
    \ 42}]. This function then returns this dictionary with an added parameter of\
    \ an average of wins to nominations. This function rounds every decimal to 2 decimal\
    \ places. This functions output is a single 2d list. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student60
- !Edge
  _edge_tags:
  - m3
  attempt_id: 2
  clues:
  - 1
  - 3
  - 4
  - 6
  completion_from: "for i in range(len(nominations)):\n        nominations[i]['successRate']\
    \ = round((nominations[i]['wins']/nominations[i]['noms'])*100, 2)\n    return\
    \ nominations\n"
  completion_to: "for i in range(len(nominations)):\n        nominations[i]['success']\
    \ = round(nominations[i]['wins'] / nominations[i]['noms'], 2)\n    return nominations\n"
  diff: "--- \n+++ \n@@ -87,4 +87,49 @@\n single 2d list.+As+an+example.+Given+[{'nominee':+'Beyonc\xE9\
    ',+'wins':+28,+'noms':+79},+{'nominee':+'Babyface','wins':+11,+'noms':+49}]+as+a+parameter+this+function+outputs+[{'nominee':+'Thomas',+'wins':+11,+'noms':+38,+'success':+0.29},+{'nominee':+'Swift',+'wins':+11,+'noms':+41,+'success':+0.27},+{'nominee':+'Babyface',+'wins':+11,+'noms':+49,+'success':+0.22}]\
    \ \"\"\""
  node_from: *id008
  node_to: &id010 !Node
    _node_tags: null
    id: 18
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - "[{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, {'nominee':\
      \ 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'success': 0.35}, {'nominee': 'Krauss',\
      \ 'wins': 27, 'noms': 42, 'success': 0.64}]\n"
    - '[{''nominee'': ''Babyface'', ''wins'': 11, ''noms'': 49, ''success'': 0.22},
      {''nominee'': ''Swift'', ''wins'': 11, ''noms'': 41, ''success'': 0.27}, {''nominee'':
      ''Thomas'', ''wins'': 11, ''noms'': 38, ''success'': 0.29}]

      '
    - "[{'nominee': 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'success': 0.35}, {'nominee':\
      \ 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\n"
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function\
    \ takes in a 2d list containing dictionaries at its parameter. In each dictionary\
    \ is the nominee, the number of wins they have and the amount of nominations they\
    \ have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee':\
    \ 'Beyonc\xE9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms':\
    \ 42}]. This function then returns this dictionary with an added parameter of\
    \ an average of wins to nominations. This function rounds every decimal to 2 decimal\
    \ places. This functions output is a single 2d list. \n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes\
    \ in a 2d list containing dictionaries at its parameter. In each dictionary is\
    \ the nominee, the number of wins they have and the amount of nominations they\
    \ have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee':\
    \ 'Beyonc\xE9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms':\
    \ 42}]. This function then returns this dictionary with an added parameter of\
    \ an average of wins to nominations. This function rounds every decimal to 2 decimal\
    \ places. This functions output is a single 2d list.\n\nAs an example. Given \
    \ [{'nominee': 'Beyonc\xE9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins':\
    \ 11, 'noms': 49}] as a parameter this function outputs [{'nominee': 'Thomas',\
    \ 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11,\
    \ 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49,\
    \ 'success': 0.22}]\n    \"\"\"\n    "
  state: fail
  total_attempts: 3
  username: student60
- !Edge
  _edge_tags:
  - a4
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  completion_from: "for i in range(len(nominations)):\n        nominations[i]['success']\
    \ = nominations[i]['wins'] / nominations[i]['noms']\n    return sorted(nominations,\
    \ key=lambda x: x['success'], reverse=True)\n"
  completion_to: "for i in range(len(nominations)):\n        nominations[i]['success']\
    \ = round(nominations[i]['wins'] / nominations[i]['noms'], 2)\n    return sorted(nominations,\
    \ key = lambda x: x['success'], reverse = True)\n"
  diff: "--- \n+++ \n@@ -46,7 +46,13 @@\n of the key-'noms'.+'noms',+rounded+to+the+second+decimal+place.\
    \ The outputted list"
  node_from: *id002
  node_to: *id009
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function\
    \ takes in a list of dictionaries and outputs the same list of dictionaries with\
    \ an additional key for each dictionary called 'success', for which the value\
    \ is the result of dividing the value of the key 'wins' and the value of the key\
    \ 'noms'. The outputted list will also be arranged in descending order based on\
    \ the value of 'success'.\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes\
    \ in a list of dictionaries and outputs the same list of dictionaries with an\
    \ additional key for each dictionary called 'success', for which the value is\
    \ the result of dividing the value of the key 'wins' and the value of the key\
    \ 'noms', rounded to the second decimal place. The outputted list will also be\
    \ arranged in descending order based on the value of 'success'.  \n    \"\"\"\n\
    \    "
  state: success
  total_attempts: 2
  username: student63
- !Edge
  _edge_tags:
  - a1
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  - 5
  completion_from: "newDict = {}\n    for key, value in nominations.items():\n   \
    \     newDict[key] = value\n        newDict[key]['success'] = value['wins'] /\
    \ value['noms']\n    sortedDict = sorted(newDict.items(), key=lambda x: x[1]['success'],\
    \ reverse=True)\n    return sortedDict\n\nprint(sortBySuccessRate(nominations))"
  completion_to: "for nom in nominations:\n        nom['success'] = nom['wins'] /\
    \ nom['noms']\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n"
  diff: "--- \n+++ \n@@ -1,7 +1,12 @@\n def sortBySuccessRate(nominations): \"\"\"\
    -Create+For+each+dictionary+in+list,+create a new dictionary"
  node_from: &id020 !Node
    _node_tags: null
    id: 14
    stderr:
    - 'AttributeError: ''list'' object has no attribute ''items'''
    - 'AttributeError: ''list'' object has no attribute ''items'''
    - 'AttributeError: ''list'' object has no attribute ''items'''
    stdout:
    - ''
    - ''
    - ''
  node_to: *id002
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    Create a new\
    \ dictionary and create a new key value pair called 'success', and assign it to\
    \ the values 'wins' divided by 'noms.' Sort by success in descending order.\n\
    \    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    For each dictionary\
    \ in list, create a new dictionary and create a new key value pair called 'success',\
    \ and assign it to the values 'wins' divided by 'noms.' Sort by success in descending\
    \ order.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student64
- !Edge
  _edge_tags:
  - a4
  - a6
  attempt_id: 2
  clues:
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  completion_from: "for nom in nominations:\n        nom['success'] = nom['wins']\
    \ / nom['noms']\n    return sorted(nominations, key=lambda x: x['success'], reverse=True)\n"
  completion_to: "for dictionary in nominations:\n        wins = dictionary['wins']\n\
    \        noms = dictionary['noms']\n        success = round(wins / noms, 2)\n\
    \        dictionary['success'] = success\n    sorted_nominations = sorted(nominations,\
    \ key=lambda x: x['success'], reverse=True)\n    return sorted_nominations\n"
  diff: "--- \n+++ \n@@ -29,6 +29,13 @@\n divided by 'noms.'+Round+success+to+nearest+2+decimal+places.\
    \ Sort by success"
  node_from: *id002
  node_to: *id009
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    For each dictionary\
    \ in list, create a new dictionary and create a new key value pair called 'success',\
    \ and assign it to the values 'wins' divided by 'noms.' Sort by success in descending\
    \ order.\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    For each dictionary\
    \ in list, create a new dictionary and create a new key value pair called 'success',\
    \ and assign it to the values 'wins' divided by 'noms.' Round success to nearest\
    \ 2 decimal places. Sort by success in descending order. \n    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student64
- !Edge
  _edge_tags:
  - a4
  - a6
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  - 4
  - 6
  completion_from: "for i in nominations:\n        i['success'] = i['wins'] / i['noms']\n\
    \    return nominations\n"
  completion_to: "for i in nominations:\n        i['success'] = round(i['wins'] /\
    \ i['noms'], 2)\n    return nominations\n"
  diff: "--- \n+++ \n@@ -43,5 +43,10 @@\n dictionary in the-list.+list,+rounded+to+2+decimal+places.\
    \ \"\"\""
  node_from: &id018 !Node
    _node_tags: null
    id: 7
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - "[{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, {'nominee':\
      \ 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544}, {'nominee':\
      \ 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.6428571428571429}]\n"
    - '[{''nominee'': ''Babyface'', ''wins'': 11, ''noms'': 49, ''success'': 0.22448979591836735},
      {''nominee'': ''Swift'', ''wins'': 11, ''noms'': 41, ''success'': 0.2682926829268293},
      {''nominee'': ''Thomas'', ''wins'': 11, ''noms'': 38, ''success'': 0.2894736842105263}]

      '
    - "[{'nominee': 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544},\
      \ {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22448979591836735}]\n"
  node_to: *id010
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    Enter a list\
    \ of dictionaries. for every dictionary in the list of dictionaries, divide the\
    \ values of 'wins' by the value of 'noms'. The result is the value of the new\
    \ key 'success'. Add the 'success' key to each dictionary in the list.\n    \"\
    \"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    Enter a list of\
    \ dictionaries. for every dictionary in the list of dictionaries, divide the values\
    \ of 'wins' by the value of 'noms'. The result is the value of the new key 'success'.\
    \ Add the 'success' key to each dictionary in the list, rounded to 2 decimal places.\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student69
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues:
  - 1
  - 2
  - 3
  - 4
  - 6
  completion_from: "for i in nominations:\n        i['success'] = round(i['wins']\
    \ / i['noms'], 2)\n    return nominations\n"
  completion_to: "for i in nominations:\n        i['success'] = round(i['wins']/i['noms'],\
    \ 2)\n    return sorted(nominations, key=lambda x: x['nominee'])[::-1]\n\nprint(sortBySuccessRate(nominations))\n"
  diff: "--- \n+++ \n@@ -49,4 +49,20 @@\n 2 decimal places.+Sort+each+dictionary+in+the+list+alphabetically+based+on+the+'nominee'+key.+then+reverse+the+order.\
    \ \"\"\""
  node_from: *id010
  node_to: *id009
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    Enter a list\
    \ of dictionaries. for every dictionary in the list of dictionaries, divide the\
    \ values of 'wins' by the value of 'noms'. The result is the value of the new\
    \ key 'success'. Add the 'success' key to each dictionary in the list, rounded\
    \ to 2 decimal places.\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    Enter a list of\
    \ dictionaries. for every dictionary in the list of dictionaries, divide the values\
    \ of 'wins' by the value of 'noms'. The result is the value of the new key 'success'.\
    \ Add the 'success' key to each dictionary in the list, rounded to 2 decimal places.\
    \ Sort each dictionary in the list alphabetically based on the 'nominee' key.\
    \ then reverse the order.\n    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student69
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues:
  - 1
  completion_from: "sortedNominations = sorted(nominations, key=lambda k: (k['wins'],\
    \ k['noms']))\n    for i in sortedNominations:\n        print(i)\n"
  completion_to: "# sort by wins\n    sortedNominations = sorted(nominations, key=lambda\
    \ k: k['wins'])\n    # sort by noms\n    sortedNominations = sorted(sortedNominations,\
    \ key=lambda k: k['noms'])\n    return sortedNominations\n"
  diff: "--- \n+++ \n@@ -42,9 +42,5 @@\n least amount of-'noms',-indent-after-each-{}+'noms'\
    \ \"\"\""
  node_from: &id012 !Node
    _node_tags: null
    id: 3
    stderr:
    - 'IndentationError: expected an indented block after ''for'' statement on line
      10'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      10'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      10'
    stdout:
    - ''
    - ''
    - ''
  node_to: &id011 !Node
    _node_tags: null
    id: 8
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - "[{'nominee': 'Krauss', 'wins': 27, 'noms': 42}, {'nominee': 'Beyonc\xE9', 'wins':\
      \ 28, 'noms': 79}, {'nominee': 'Jones', 'wins': 28, 'noms': 80}]\n"
    - '[{''nominee'': ''Thomas'', ''wins'': 11, ''noms'': 38}, {''nominee'': ''Swift'',
      ''wins'': 11, ''noms'': 41}, {''nominee'': ''Babyface'', ''wins'': 11, ''noms'':
      49}]

      '
    - "[{'nominee': 'Babyface', 'wins': 11, 'noms': 49}, {'nominee': 'Beyonc\xE9',\
      \ 'wins': 28, 'noms': 79}]\n"
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
    \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\xE9\
    ',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\n\
    and prints output in order of least amount of 'wins', if the same prints based\
    \ on least amount of 'noms', indent after each {}\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
    \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\xE9\
    ',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\n\
    and prints output in order of least amount of 'wins', if the same prints based\
    \ on least amount of 'noms'\n    \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student75
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues:
  - 1
  completion_from: "# sort by wins\n    sortedNominations = sorted(nominations, key=lambda\
    \ k: k['wins'])\n    # sort by noms\n    sortedNominations = sorted(sortedNominations,\
    \ key=lambda k: k['noms'])\n    return sortedNominations\n"
  completion_to: "sortedNominations = sorted(nominations, key=lambda x: (x['wins'],\
    \ x['noms']))\n    for i in sortedNominations:\n        print(i)\n\nsortBySuccessRate(nominations)\n"
  diff: "--- \n+++ \n@@ -42,5 +42,9 @@\n least amount of+'noms',+indent+after+each\
    \ 'noms' \"\"\""
  node_from: *id011
  node_to: *id012
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
    \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\xE9\
    ',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\n\
    and prints output in order of least amount of 'wins', if the same prints based\
    \ on least amount of 'noms'\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
    \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\xE9\
    ',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\n\
    and prints output in order of least amount of 'wins', if the same prints based\
    \ on least amount of 'noms', indent after each 'noms'\n    \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student75
- !Edge
  _edge_tags:
  - 0
  attempt_id: 3
  clues:
  - 1
  completion_from: "sortedNominations = sorted(nominations, key=lambda x: (x['wins'],\
    \ x['noms']))\n    for i in sortedNominations:\n        print(i)\n\nsortBySuccessRate(nominations)\n"
  completion_to: "# sort by wins\n    sorted_nominations = sorted(nominations, key=lambda\
    \ k: k['wins'])\n    # sort by noms\n    sorted_nominations = sorted(sorted_nominations,\
    \ key=lambda k: k['noms'])\n    # print each nominee on its own line\n    for\
    \ nominee in sorted_nominations:\n        print(nominee['nominee'])\n"
  diff: "--- \n+++ \n@@ -43,8 +43,11 @@\n amount of 'noms',-indent-after+print each-'noms'+'nominee'+on+its+own+line\
    \ \"\"\""
  node_from: *id012
  node_to: &id013 !Node
    _node_tags: null
    id: 12
    stderr:
    - 'IndentationError: expected an indented block after ''for'' statement on line
      14'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      14'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      14'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
    \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\xE9\
    ',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\n\
    and prints output in order of least amount of 'wins', if the same prints based\
    \ on least amount of 'noms', indent after each 'noms'\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
    \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\xE9\
    ',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\n\
    and prints output in order of least amount of 'wins', if the same prints based\
    \ on least amount of 'noms', print each 'nominee' on its own line\n    \"\"\"\n\
    \    "
  state: neutral
  total_attempts: 7
  username: student75
- !Edge
  _edge_tags:
  - 0
  attempt_id: 4
  clues:
  - 1
  completion_from: "# sort by wins\n    sorted_nominations = sorted(nominations, key=lambda\
    \ k: k['wins'])\n    # sort by noms\n    sorted_nominations = sorted(sorted_nominations,\
    \ key=lambda k: k['noms'])\n    # print each nominee on its own line\n    for\
    \ nominee in sorted_nominations:\n        print(nominee['nominee'])\n"
  completion_to: print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
  diff: "--- \n+++ \n@@ -42,12 +42,5 @@\n least amount of-'noms',-print-each-'nominee'-on-its-own-line+'noms'\
    \ \"\"\""
  node_from: *id013
  node_to: &id014 !Node
    _node_tags: null
    id: 22
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'None

      '
    - 'None

      '
    - 'None

      '
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
    \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\xE9\
    ',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\n\
    and prints output in order of least amount of 'wins', if the same prints based\
    \ on least amount of 'noms', print each 'nominee' on its own line\n    \"\"\"\n\
    \    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
    \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\xE9\
    ',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\n\
    and prints output in order of least amount of 'wins', if the same prints based\
    \ on least amount of 'noms'\n    \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student75
- !Edge
  _edge_tags:
  - 0
  attempt_id: 5
  clues:
  - 1
  completion_from: print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
  completion_to: "sortedNominations = sorted(nominations, key=lambda x: (x['wins'],\
    \ x['noms']))\n    for i in sortedNominations:\n        print(i)\n\nsortBySuccessRate(nominations)\n"
  diff: "--- \n+++ \n@@ -42,5 +42,5 @@\n least amount of-'noms'+'noms'. \"\"\""
  node_from: *id014
  node_to: *id012
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
    \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\xE9\
    ',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\n\
    and prints output in order of least amount of 'wins', if the same prints based\
    \ on least amount of 'noms'\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
    \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\xE9\
    ',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\n\
    and prints output in order of least amount of 'wins', if the same prints based\
    \ on least amount of 'noms'.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student75
- !Edge
  _edge_tags:
  - 0
  attempt_id: 6
  clues:
  - 1
  completion_from: "sortedNominations = sorted(nominations, key=lambda x: (x['wins'],\
    \ x['noms']))\n    for i in sortedNominations:\n        print(i)\n\nsortBySuccessRate(nominations)\n"
  completion_to: "sortedNominations = sorted(nominations, key=lambda k: (k['wins'],\
    \ k['noms']))\n    for i in sortedNominations:\n        print(i)\n\nsortBySuccessRate(nominations)"
  diff: "--- \n+++ \n@@ -42,5 +42,5 @@\n least amount of-'noms'.+'noms', \"\"\""
  node_from: *id012
  node_to: *id012
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
    \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\xE9\
    ',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\n\
    and prints output in order of least amount of 'wins', if the same prints based\
    \ on least amount of 'noms'.\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
    \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\xE9\
    ',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\n\
    and prints output in order of least amount of 'wins', if the same prints based\
    \ on least amount of 'noms', \n    \"\"\"\n    "
  state: fail
  total_attempts: 7
  username: student75
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  - 5
  completion_from: "for i in nominations:\n        noms = i[\"nominations\"]\n   \
    \     wins = i[\"wins\"]\n        i[\"success\"] = wins/noms\n    return sorted(nominations,\
    \ key=lambda x: x[\"success\"], reverse=True)\n"
  completion_to: "for nom in nominations:\n        nom[\"success\"] = nom[\"wins\"\
    ] / nom[\"nominations\"]\n    return sorted(nominations, key=lambda x: x[\"success\"\
    ], reverse=True)\n\n"
  diff: ''
  node_from: *id003
  node_to: *id003
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going\
    \ to have a list of dictionaries as an input. as an output you are going to add\
    \ another variable called success to each dictionary which is the wins divided\
    \ by noms. you are then going to sort the dictionary according to decreasing success.\n\
    \    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to\
    \ have a list of dictionaries as an input. as an output you are going to add another\
    \ variable called success to each dictionary which is the wins divided by noms.\
    \ you are then going to sort the dictionary according to decreasing success.\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student79
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues:
  - 1
  - 2
  - 3
  - 5
  completion_from: "for nom in nominations:\n        nom[\"success\"] = nom[\"wins\"\
    ] / nom[\"nominations\"]\n    return sorted(nominations, key=lambda x: x[\"success\"\
    ], reverse=True)\n\n"
  completion_to: "for i in nominations:\n        i[\"success\"] = i[\"wins\"]/i[\"\
    noms\"]\n    return sorted(nominations, key = lambda x: x[\"success\"], reverse\
    \ = True)\n"
  diff: "--- \n+++ \n@@ -34,6 +34,9 @@\n wins divided by+the+value+of noms. you are"
  node_from: *id003
  node_to: *id002
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going\
    \ to have a list of dictionaries as an input. as an output you are going to add\
    \ another variable called success to each dictionary which is the wins divided\
    \ by noms. you are then going to sort the dictionary according to decreasing success.\n\
    \    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to\
    \ have a list of dictionaries as an input. as an output you are going to add another\
    \ variable called success to each dictionary which is the wins divided by the\
    \ value of noms. you are then going to sort the dictionary according to decreasing\
    \ success.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student79
- !Edge
  _edge_tags:
  - a4
  - a6
  attempt_id: 3
  clues:
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  completion_from: "for i in nominations:\n        i[\"success\"] = i[\"wins\"]/i[\"\
    noms\"]\n    return sorted(nominations, key = lambda x: x[\"success\"], reverse\
    \ = True)\n"
  completion_to: "for nomination in nominations:\n        nomination[\"success\"]\
    \ = nomination[\"wins\"] / nomination[\"noms\"]\n    nominations.sort(key=lambda\
    \ x: x[\"success\"], reverse=True)\n    for nomination in nominations:\n     \
    \   print(nomination)\n"
  diff: "--- \n+++ \n@@ -50,4 +50,20 @@\n to decreasing success.+use+two+decimal+places+for+the+success+rate+and+use+different+lines+to+put+each+dictionary\
    \ \"\"\""
  node_from: *id002
  node_to: *id015
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going\
    \ to have a list of dictionaries as an input. as an output you are going to add\
    \ another variable called success to each dictionary which is the wins divided\
    \ by the value of noms. you are then going to sort the dictionary according to\
    \ decreasing success.\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to\
    \ have a list of dictionaries as an input. as an output you are going to add another\
    \ variable called success to each dictionary which is the wins divided by the\
    \ value of noms. you are then going to sort the dictionary according to decreasing\
    \ success. use two decimal places for the success rate and use different lines\
    \ to put each dictionary\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student79
- !Edge
  _edge_tags:
  - 0
  attempt_id: 4
  clues:
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  completion_from: "for nomination in nominations:\n        nomination[\"success\"\
    ] = nomination[\"wins\"] / nomination[\"noms\"]\n    nominations.sort(key=lambda\
    \ x: x[\"success\"], reverse=True)\n    for nomination in nominations:\n     \
    \   print(nomination)\n"
  completion_to: "for i in nominations:\n        i['success'] = round(i['wins']/i['noms'],2)\n\
    \    nominations.sort(key=lambda x: x['success'], reverse=True)\n    for i in\
    \ nominations:\n        print(i)\n"
  diff: "--- \n+++ \n@@ -57,13 +57,12 @@\n for the success-rate and-use-different-lines-to\
    \ put each dictionary+on+a+separate+line. \"\"\""
  node_from: *id015
  node_to: *id015
  prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going\
    \ to have a list of dictionaries as an input. as an output you are going to add\
    \ another variable called success to each dictionary which is the wins divided\
    \ by the value of noms. you are then going to sort the dictionary according to\
    \ decreasing success. use two decimal places for the success rate and use different\
    \ lines to put each dictionary\n    \"\"\"\n    "
  prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to\
    \ have a list of dictionaries as an input. as an output you are going to add another\
    \ variable called success to each dictionary which is the wins divided by the\
    \ value of noms. you are then going to sort the dictionary according to decreasing\
    \ success. use two decimal places for the success and put each dictionary on a\
    \ separate line.\n    \"\"\"\n    "
  state: fail
  total_attempts: 5
  username: student79
nodes:
- *id002
- *id001
- *id009
- *id012
- *id016
- *id017
- *id006
- *id018
- *id011
- *id019
- *id003
- *id015
- *id013
- *id008
- *id020
- *id021
- *id007
- *id005
- *id010
- *id022
- *id004
- !Node
  _node_tags: null
  id: 21
  stderr:
  - 'KeyError: 3'
  - 'KeyError: 3'
  - 'KeyError: 3'
  stdout:
  - ''
  - ''
  - ''
- *id014
problem: sortBySuccessRate
problem_clues:
  1: input is list of dictionaries
  2: add a key success
  3: success is wins/noms
  4: round success
  5: sort by success
  6: return
student_clues_tracker:
  student23:
  - attempt_id: 0
    clues: &id023
    - 1
    - 2
    - 3
    - 5
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 5
  - attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 5
  student33:
  - attempt_id: 0
    clues: &id024
    - 1
    - 2
    - 5
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 5
  - attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
  student35:
  - attempt_id: 0
    clues: &id025
    - 1
    - 2
    - 3
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
  - attempt_id: 2
    clues:
    - 1
    - 2
    - 3
  - attempt_id: 3
    clues:
    - 1
    - 2
    - 3
  student40:
  - attempt_id: 0
    clues: &id026
    - 2
    - 3
    - 5
    - 6
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 5
    - 6
  - attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
  student44:
  - attempt_id: 0
    clues: &id027
    - 2
    - 3
    - 5
  - attempt_id: 1
    clues:
    - 2
    - 3
    - 5
  student50:
  - attempt_id: 0
    clues: &id028
    - 2
    - 3
  - attempt_id: 1
    clues:
    - 2
    - 3
  - attempt_id: 2
    clues:
    - 2
    - 3
  student59:
  - attempt_id: 0
    clues: &id029
    - 1
    - 6
  - attempt_id: 1
    clues:
    - 1
    - 6
  student60:
  - attempt_id: 0
    clues: &id030
    - 1
    - 3
    - 6
  - attempt_id: 1
    clues:
    - 1
    - 3
    - 4
    - 6
  - attempt_id: 2
    clues:
    - 1
    - 3
    - 4
    - 6
  student63:
  - attempt_id: 0
    clues: &id031
    - 1
    - 2
    - 3
    - 5
    - 6
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
  student64:
  - attempt_id: 0
    clues: &id032
    - 2
    - 3
    - 5
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 5
  - attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
  student69:
  - attempt_id: 0
    clues: &id033
    - 1
    - 2
    - 3
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 4
    - 6
  - attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 4
    - 6
  student75:
  - attempt_id: 0
    clues: &id034
    - 1
  - attempt_id: 1
    clues:
    - 1
  - attempt_id: 2
    clues:
    - 1
  - attempt_id: 3
    clues:
    - 1
  - attempt_id: 4
    clues:
    - 1
  - attempt_id: 5
    clues:
    - 1
  - attempt_id: 6
    clues:
    - 1
  student79:
  - attempt_id: 0
    clues: &id035
    - 1
    - 2
    - 3
    - 5
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 5
  - attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 5
  - attempt_id: 3
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
  - attempt_id: 4
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
student_colors: {}
student_start_node_tags:
  student23: *id023
  student33: *id024
  student35: *id025
  student40: *id026
  student44: *id027
  student50: *id028
  student59: *id029
  student60: *id030
  student63: *id031
  student64: *id032
  student69: *id033
  student75: *id034
  student79: *id035
