!Graph
COLORS:
- '#d83034'
- '#f9e858'
- '#008dff'
- '#4ecb8d'
- '#c701ff'
- '#ffcd8e'
- '#003a7d'
- '#Ff73b6'
- '#ff7f50'
- '#7fff00'
- '#8a2be2'
- '#ffd700'
- '#ff4500'
- '#00ced1'
- '#ff1493'
- '#9400d3'
- '#00bfff'
edges:
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: null
  completion_from: "# create a dictionary to store the result\n    result = {}\n \
    \   # iterate through the wordList\n    for word in wordList:\n        # iterate\
    \ through the puzzle\n        for i in range(len(puzzle)):\n            # check\
    \ if the word is in the puzzle\n            if word in puzzle[i]:\n          \
    \      # store the result in the dictionary\n                result[word] = (i,puzzle[i].index(word))"
  completion_to: "dic = {}\n    for i in range(len(puzzle)):\n        for j in range(len(wordList)):\n\
    \            if sorted(puzzle[i]) == sorted(wordList[j]):\n                dic[wordList[j]]\
    \ = i\n    return dic\n"
  diff: "--- \n+++ \n@@ -39,6 +39,15 @@\n the wordList list.+They+don't+have+to+be+in+the+same+order.\
    \ Return a dictionary"
  node_from: &id003 !Node
    _node_tags: null
    id: 11
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'None

      '
    - 'None

      '
    - 'None

      '
  node_to: &id001 !Node
    _node_tags: null
    id: 10
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '{}

      '
    - '{}

      '
    - '{''it'': 3}

      '
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will\
    \ be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have\
    \ equal length. Check if the string in the puzzle list contains all the characters\
    \ of the string in the wordList list. Return a dictionary with the string as the\
    \ key and the position of the string as the value.\n    \"\"\"\n    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will\
    \ be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have\
    \ equal length. Check if the string in the puzzle list contains all the characters\
    \ of the string in the wordList list. They don't have to be in the same order.\
    \ Return a dictionary with the string as the key and the position of the string\
    \ as the value.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student27
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues: null
  completion_from: "dic = {}\n    for i in range(len(puzzle)):\n        for j in range(len(wordList)):\n\
    \            if sorted(puzzle[i]) == sorted(wordList[j]):\n                dic[wordList[j]]\
    \ = i\n    return dic\n"
  completion_to: "#Create a dictionary to store the words and their positions\n  \
    \  wordDict = {}\n    #Iterate through the wordList\n    for word in wordList:\n\
    \        #Iterate through the puzzle\n        for i in range(len(puzzle)):\n \
    \           #Check if the word is in the puzzle\n            if word in puzzle[i]:\n\
    \                #Add the word and its position to the dictionary\n          \
    \      wordDict[word] = (i"
  diff: "--- \n+++ \n@@ -47,7 +47,10 @@\n in the same-order.+order+or+same+length.\
    \ Return a dictionary"
  node_from: *id001
  node_to: &id012 !Node
    _node_tags: null
    id: 9
    stderr:
    - 'SyntaxError: ''('' was never closed'
    - 'SyntaxError: ''('' was never closed'
    - 'SyntaxError: ''('' was never closed'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will\
    \ be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have\
    \ equal length. Check if the string in the puzzle list contains all the characters\
    \ of the string in the wordList list. They don't have to be in the same order.\
    \ Return a dictionary with the string as the key and the position of the string\
    \ as the value.\n    \"\"\"\n    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will\
    \ be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have\
    \ equal length. Check if the string in the puzzle list contains all the characters\
    \ of the string in the wordList list. They don't have to be in the same order\
    \ or same length. Return a dictionary with the string as the key and the position\
    \ of the string as the value.\n    \"\"\"\n    "
  state: fail
  total_attempts: 3
  username: student27
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: null
  completion_from: "horizontals = {}\n    for word in wordList:\n        if word in\
    \ puzzle:\n            horizontals[word] = puzzle.index(word)\n    return horizontals\n"
  completion_to: "wordDict = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n\
    \            if word in puzzle[i]:\n                wordDict[word] = i\n    return\
    \ wordDict\n"
  diff: "--- \n+++ \n@@ -10,7 +10,13 @@\n in wordList that-appears+than+can+be+made+with+the+letters\
    \ in puzzle, paired"
  node_from: *id001
  node_to: &id002 !Node
    _node_tags: null
    id: 1
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '{''tea'': 2}

      '
    - '{}

      '
    - '{''it'': 3}

      '
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Return a dictionary\
    \ of each element in wordList that appears in puzzle, paired with its index in\
    \ puzzle. Only include elements of wordlist that appear in puzzle\n    \"\"\"\n\
    \    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Return a dictionary\
    \ of each element in wordList that than can be made with the letters in puzzle,\
    \ paired with its index in puzzle. Only include elements of wordlist that appear\
    \ in puzzle\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student32
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues: null
  completion_from: "wordDict = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n\
    \            if word in puzzle[i]:\n                wordDict[word] = i\n    return\
    \ wordDict\n"
  completion_to: "#make a dictionary of each element in wordList that that can be\
    \ found with the letters in puzzle (even if the letters in an element of puzzle\
    \ need to be retordered), paired with its index in puzzle\n    #only include elements\
    \ of wordlist that appear in puzzle\n    #make a dictionary of each element in\
    \ wordList that that can be found with the letters in puzzle (even if the letters\
    \ in an element of puzzle need to be retordered), paired with its index in puzzle"
  diff: "--- \n+++ \n@@ -10,15 +10,28 @@\n in wordList that-than+that can be-made+found\
    \ with the letters in-puzzle,+puzzle+(even+if+the+letters+in+an+element+of+puzzle+need+to+be+retordered),\
    \ paired with its"
  node_from: *id002
  node_to: *id003
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Return a dictionary\
    \ of each element in wordList that than can be made with the letters in puzzle,\
    \ paired with its index in puzzle. Only include elements of wordlist that appear\
    \ in puzzle\n    \"\"\"\n    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Return a dictionary\
    \ of each element in wordList that that can be found with the letters in puzzle\
    \ (even if the letters in an element of puzzle need to be retordered), paired\
    \ with its index in puzzle. Only include elements of wordlist that appear in puzzle\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student32
- !Edge
  _edge_tags:
  - 0
  attempt_id: 3
  clues: null
  completion_from: "#make a dictionary of each element in wordList that that can be\
    \ found with the letters in puzzle (even if the letters in an element of puzzle\
    \ need to be retordered), paired with its index in puzzle\n    #only include elements\
    \ of wordlist that appear in puzzle\n    #make a dictionary of each element in\
    \ wordList that that can be found with the letters in puzzle (even if the letters\
    \ in an element of puzzle need to be retordered), paired with its index in puzzle"
  completion_to: "#make a dictionary of the letters in puzzle and their indices\n\
    \    puzzleDict = {}\n    for i in range(len(puzzle)):\n        if puzzle[i] not\
    \ in puzzleDict:\n            puzzleDict[puzzle[i]] = [i]\n        else:\n   \
    \         puzzleDict[puzzle[i]].append(i)\n    #make a dictionary of the letters\
    \ in wordList and their indices\n    wordList"
  diff: ''
  node_from: *id003
  node_to: *id003
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Return a dictionary\
    \ of each element in wordList that that can be found with the letters in puzzle\
    \ (even if the letters in an element of puzzle need to be retordered), paired\
    \ with its index in puzzle. Only include elements of wordlist that appear in puzzle\n\
    \    \"\"\"\n    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Return a dictionary\
    \ of each element in wordList that that can be found with the letters in puzzle\
    \ (even if the letters in an element of puzzle need to be retordered), paired\
    \ with its index in puzzle. Only include elements of wordlist that appear in puzzle\n\
    \    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student32
- !Edge
  _edge_tags:
  - m2
  attempt_id: 1
  clues: null
  completion_from: "horizontal = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n\
    \            if word in puzzle[i]:\n                horizontal[word] = (i,puzzle[i].index(word[0]))\n\
    \    return horizontal\n"
  completion_to: "puzzle = puzzle.split()\n    wordList = wordList.split()\n    horizontal\
    \ = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n    \
    \        if word in puzzle[i]:\n                horizontal[word] = i\n    return\
    \ horizontal\n"
  diff: "--- \n+++ \n@@ -2,7 +2,6 @@\n findHorizontals(puzzle,wordList): \"\"\" Given-a\
    \ two lists labeled@@ -21,6 +20,11 @@\n letters appear in+one+of+the+strings+in\
    \ puzzle, create a@@ -38,6 +42,8 @@\n the position of+the+string where the letters"
  node_from: &id006 !Node
    _node_tags: null
    id: 14
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '{''tea'': (2, 0)}

      '
    - '{}

      '
    - '{''it'': (3, 0)}

      '
  node_to: &id007 !Node
    _node_tags: null
    id: 2
    stderr:
    - 'AttributeError: ''list'' object has no attribute ''split'''
    - 'AttributeError: ''list'' object has no attribute ''split'''
    - 'AttributeError: ''list'' object has no attribute ''split'''
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Given a two\
    \ lists labeled puzzle and wordList, for each word in the wordList, if the same\
    \ letters appear in puzzle, create a dictionary with the corresponding word in\
    \ WordList as the key and the position of where the letters show up in puzzle\
    \ as the value. \n    \"\"\"\n    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Given two lists\
    \ labeled puzzle and wordList, for each word in the wordList, if the same letters\
    \ appear in one of the strings in puzzle, create a dictionary with the corresponding\
    \ word in WordList as the key and the position of the string where the letters\
    \ show up in puzzle as the value. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 2
  username: student49
- !Edge
  _edge_tags:
  - m3
  attempt_id: 1
  clues: null
  completion_from: "horizontalWords = {}\n    for word in wordList:\n        for i\
    \ in range(len(puzzle)):\n            if word in puzzle[i]:\n                horizontalWords[word]\
    \ = puzzle[i]\n    return horizontalWords\n"
  completion_to: "horizontalDict = {}\n    for word in wordList:\n        count =\
    \ 0\n        for row in puzzle:\n            if all(char in row for char in word):\n\
    \                count += 1\n        if count > 0:\n            horizontalDict[word]\
    \ = count\n    return horizontalDict\n"
  diff: "--- \n+++ \n@@ -1,9 +1,9 @@\n def findHorizontals(puzzle,wordList): \"\"\"\
    -check-if-any+count+how+many elements in first@@ -17,9 +17,14 @@\n second list.\
    \ If-they-do,+more+than+0, add to dictionary+with+count+as+value \"\"\""
  node_from: &id010 !Node
    _node_tags: null
    id: 7
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '{''tea'': ''teaz''}

      '
    - '{}

      '
    - '{''it'': ''it''}

      '
  node_to: &id013 !Node
    _node_tags: null
    id: 12
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '{''cat'': 1, ''tea'': 1}

      '
    - '{}

      '
    - '{''it'': 1}

      '
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    check if any\
    \ elements in first list include characters from each element in second list.\
    \ If they do, add to dictionary\n    \"\"\"\n    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    count how many\
    \ elements in first list include characters from each element in second list.\
    \ If more than 0, add to dictionary with count as value\n    \"\"\"\n    "
  state: neutral
  total_attempts: 2
  username: student62
- !Edge
  _edge_tags:
  - a5
  attempt_id: 1
  clues: null
  completion_from: "wordDict = {}\n    for word in wordList:\n        for row in range(len(puzzle)):\n\
    \            for col in range(len(puzzle[row])):\n                if puzzle[row][col]\
    \ == word[0]:\n                    if len(word) <= len(puzzle[row]) - col:\n \
    \                       if word == puzzle[row][col:col+len(word)]:\n         \
    \                   if word not in word"
  completion_to: "wordDict = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n\
    \            if word in puzzle[i]:\n                if word not in wordDict:\n\
    \                    wordDict[word] = [i]\n                else:\n           \
    \         wordDict[word].append(i)\n    return wordDict\n"
  diff: "--- \n+++ \n@@ -4,29 +4,29 @@\n if the letters-of-the-strings+contained in\
    \ the first-array-list+string are+entirely+contained+in+a+string in the+second\
    \ array-list-above+list. then create a dictionary where the-second-array-list+that\
    \ string is the@@ -35,6 +35,7 @@\n the index is-the-definition.+within+that+key\
    \ \"\"\""
  node_from: &id011 !Node
    _node_tags: null
    id: 8
    stderr:
    - 'SyntaxError: expected '':'''
    - 'SyntaxError: expected '':'''
    - 'SyntaxError: expected '':'''
    stdout:
    - ''
    - ''
    - ''
  node_to: &id009 !Node
    _node_tags: null
    id: 6
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '{''tea'': [2]}

      '
    - '{}

      '
    - '{''it'': [3]}

      '
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    if the letters\
    \ of the strings in the first array list are in the array list above then create\
    \ a dictionary where the second array list string is the key and the index is\
    \ the definition. \n    \"\"\"\n    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    if the letters\
    \ contained in the first string are entirely contained in a string in the second\
    \ array list. then create a dictionary where the that string is the key and the\
    \ index is within that key\n    \"\"\"\n    "
  state: fail
  total_attempts: 2
  username: student66
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: null
  completion_from: "horizontalWords = []\n    for i in range(len(puzzle)):\n     \
    \   for j in range(len(puzzle[i])):\n            for word in wordList:\n     \
    \           if word == puzzle[i][j:j+len(word)]:\n                    horizontalWords.append({\"\
    word\":word,\"start\":[i,j],\"end\":[i,j+len(word)-1]})\n    return horizontalWords\n"
  completion_to: "#print(puzzle)\n    #print(wordList)\n    #print(puzzle[0])\n  \
    \  #print(puzzle[0][0])\n    #print(puzzle[0][0][0])\n    #print(puzzle[0][0][0][0])\n\
    \    #print(puzzle[0][0][0][0][0])\n    #print(puzzle[0][0][0][0"
  diff: "--- \n+++ \n@@ -13,4 +13,13 @@\n the dictionary is+the+word+that+repeats+in+the+second+input+list.\
    \ \"\"\""
  node_from: &id008 !Node
    _node_tags: null
    id: 4
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[{''word'': ''tea'', ''start'': [2, 0], ''end'': [2, 2]}]

      '
    - '[]

      '
    - '[{''word'': ''it'', ''start'': [3, 0], ''end'': [3, 1]}]

      '
  node_to: *id003
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Returns a list\
    \ of dictionaries, where the name of the dictionary is \n    \"\"\"\n    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Returns a list\
    \ of dictionaries, where the name of the dictionary is the word that repeats in\
    \ the second input list.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 2
  username: student67
- !Edge
  _edge_tags:
  - d5
  attempt_id: 1
  clues: null
  completion_from: "d = {}\n    for i in range(len(puzzle)):\n        for word in\
    \ wordList:\n            if word in puzzle[i]:\n                d[word] = i\n\
    \    return d\n"
  completion_to: "d = {}\n    for string in puzzle:\n        for word in wordList:\n\
    \            if word in string:\n                if word not in d:\n         \
    \           d[word] = string.count(word)\n                else:\n            \
    \        d[word] += string.count(word)\n    return d\n"
  diff: "--- \n+++ \n@@ -39,17 +39,21 @@\n dictionary with the-index+count of the-string+number+of+times+it+appears+in+the+strings\
    \ from puzzle-where-it-appeared as-the+its value. return the"
  node_from: *id002
  node_to: &id004 !Node
    _node_tags: null
    id: 0
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '{''tea'': 1}

      '
    - '{}

      '
    - '{''it'': 1}

      '
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty\
    \ dictionary. iterate through each string of the input list puzzle. if any of\
    \ the strings in puzzle contain a string from wordList, add that string from wordList\
    \ as a key to the dictionary with the index of the string from puzzle where it\
    \ appeared as the value. return the dictionary.\n    \"\"\"\n    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty\
    \ dictionary. iterate through each string of the input list puzzle. if any of\
    \ the strings in puzzle contain a string from wordList, add that string from wordList\
    \ as a key to the dictionary with the count of the number of times it appears\
    \ in the strings from puzzle as its value. return the dictionary.\n    \"\"\"\n\
    \    "
  state: neutral
  total_attempts: 4
  username: student70
- !Edge
  _edge_tags:
  - a5
  attempt_id: 2
  clues: null
  completion_from: "d = {}\n    for string in puzzle:\n        for word in wordList:\n\
    \            if word in string:\n                if word not in d:\n         \
    \           d[word] = string.count(word)\n                else:\n            \
    \        d[word] += string.count(word)\n    return d\n"
  completion_to: "d = {}\n    for i in range(len(puzzle)):\n        for word in wordList:\n\
    \            if word in puzzle[i]:\n                d[word] = i\n    return d\n"
  diff: "--- \n+++ \n@@ -22,6 +22,10 @@\n in puzzle contain+the+same+letters+as a\
    \ string from@@ -39,21 +43,17 @@\n dictionary with the-count+index of the-number-of-times-it-appears-in-the-strings+string\
    \ from puzzle+where+it+appeared as-its+the value. return the"
  node_from: *id004
  node_to: *id002
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty\
    \ dictionary. iterate through each string of the input list puzzle. if any of\
    \ the strings in puzzle contain a string from wordList, add that string from wordList\
    \ as a key to the dictionary with the count of the number of times it appears\
    \ in the strings from puzzle as its value. return the dictionary.\n    \"\"\"\n\
    \    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty\
    \ dictionary. iterate through each string of the input list puzzle. if any of\
    \ the strings in puzzle contain the same letters as a string from wordList, add\
    \ that string from wordList as a key to the dictionary with the index of the string\
    \ from puzzle where it appeared as the value. return the dictionary.\n    \"\"\
    \"\n    "
  state: neutral
  total_attempts: 4
  username: student70
- !Edge
  _edge_tags:
  - 0
  attempt_id: 3
  clues: null
  completion_from: "d = {}\n    for i in range(len(puzzle)):\n        for word in\
    \ wordList:\n            if word in puzzle[i]:\n                d[word] = i\n\
    \    return d\n"
  completion_to: "d = {}\n    for i in range(len(puzzle)):\n        for j in range(len(wordList)):\n\
    \            if isSubstring(puzzle[i],wordList[j]):\n                d[wordList[j]]\
    \ = i\n    return d\n"
  diff: "--- \n+++ \n@@ -25,6 +25,9 @@\n the same letters+in+any+order as a string"
  node_from: *id002
  node_to: &id014 !Node
    _node_tags: null
    id: 13
    stderr:
    - 'NameError: name ''isSubstring'' is not defined'
    - 'NameError: name ''isSubstring'' is not defined'
    - 'NameError: name ''isSubstring'' is not defined'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty\
    \ dictionary. iterate through each string of the input list puzzle. if any of\
    \ the strings in puzzle contain the same letters as a string from wordList, add\
    \ that string from wordList as a key to the dictionary with the index of the string\
    \ from puzzle where it appeared as the value. return the dictionary.\n    \"\"\
    \"\n    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty\
    \ dictionary. iterate through each string of the input list puzzle. if any of\
    \ the strings in puzzle contain the same letters in any order as a string from\
    \ wordList, add that string from wordList as a key to the dictionary with the\
    \ index of the string from puzzle where it appeared as the value. return the dictionary.\n\
    \    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student70
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: null
  completion_from: "horizDict = {}\n    for word in wordList:\n        for i in range(len(puzzle)):\n\
    \            if word in puzzle[i]:\n                horizDict[word] = i\n    return\
    \ horizDict\n"
  completion_to: "horizontalDict = {}\n    for word in wordList:\n        for i in\
    \ range(len(puzzle)):\n            if checkWord(word,puzzle[i]):\n           \
    \     horizontalDict[word] = i\n    return horizontalDict\n"
  diff: "--- \n+++ \n@@ -13,6 +13,9 @@\n if the letters+(in+any+order) of each string"
  node_from: *id002
  node_to: &id005 !Node
    _node_tags: null
    id: 3
    stderr:
    - 'NameError: name ''checkWord'' is not defined'
    - 'NameError: name ''checkWord'' is not defined'
    - 'NameError: name ''checkWord'' is not defined'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that\
    \ puzzle is a list of strings, check if the letters of each string in wordList\
    \ is contained in any of the strings in puzzle. if the string in wordList is in\
    \ any of the strings in puzzle, add it to a dictionary with the key as the sting\
    \ in wordList and the output as the position of the string in puzzle\n    \"\"\
    \"\n    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that puzzle\
    \ is a list of strings, check if the letters (in any order) of each string in\
    \ wordList is contained in any of the strings in puzzle. if the string in wordList\
    \ is in any of the strings in puzzle, add it to a dictionary with the key as the\
    \ sting in wordList and the output as the position of the string in puzzle\n \
    \   \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student78
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues: null
  completion_from: "horizontalDict = {}\n    for word in wordList:\n        for i\
    \ in range(len(puzzle)):\n            if checkWord(word,puzzle[i]):\n        \
    \        horizontalDict[word] = i\n    return horizontalDict\n"
  completion_to: "horizontalWords = {}\n    for word in wordList:\n        for i in\
    \ range(len(puzzle)):\n            if word in puzzle[i]:\n                horizontalWords[word]\
    \ = (i,puzzle[i].index(word[0]))\n    return horizontalWords\n"
  diff: "--- \n+++ \n@@ -13,9 +13,6 @@\n if the letters-(in-any-order) of each string"
  node_from: *id005
  node_to: *id006
  prompt_from: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that\
    \ puzzle is a list of strings, check if the letters (in any order) of each string\
    \ in wordList is contained in any of the strings in puzzle. if the string in wordList\
    \ is in any of the strings in puzzle, add it to a dictionary with the key as the\
    \ sting in wordList and the output as the position of the string in puzzle\n \
    \   \"\"\"\n    "
  prompt_to: "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that puzzle\
    \ is a list of strings, check if the letters of each string in wordList is contained\
    \ in any of the strings in puzzle. if the string in wordList is in any of the\
    \ strings in puzzle, add it to a dictionary with the key as the sting in wordList\
    \ and the output as the position of the string in puzzle\n    \"\"\"\n    "
  state: fail
  total_attempts: 3
  username: student78
nodes:
- *id004
- *id002
- *id007
- *id005
- *id008
- !Node
  _node_tags: null
  id: 5
  stderr:
  - ''
  - ''
  - ''
  stdout:
  - '{''party'': 4}

    '
  - '{''party'': 4}

    '
  - '{}

    '
- *id009
- *id010
- *id011
- *id012
- *id001
- *id003
- *id013
- *id014
- *id006
- !Node
  _node_tags: null
  id: 15
  stderr:
  - ''
  - ''
  - ''
  stdout:
  - '{''cat'': 0, ''tea'': 2}

    '
  - '{}

    '
  - '{''it'': 3}

    '
problem: findHorizontals
problem_clues: {}
student_clues_tracker: {}
student_colors: {}
student_start_node_tags:
  student27:
  - 1
  - 2
  - 3
  - 4
  - 5
  student32:
  - 2
  - 3
  - 4
  - 5
  student49:
  - 1
  - 2
  - 3
  - 4
  - 5
  student62:
  - 2
  - 3
  - 4
  student66:
  - 2
  - 3
  - 4
  student67: null
  student70:
  - 2
  - 3
  - 4
  - 5
  student78:
  - 1
  - 2
  - 3
  - 4
  - 5
