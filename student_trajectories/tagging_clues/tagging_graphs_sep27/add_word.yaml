!Graph
problem: add_word
nodes:
- &id001 !Node
  id: 0
  stdout:
  - 'None

    '
  - 'None

    '
  - 'None

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id002 !Node
  id: 1
  stdout:
  - '{''twas'': [1], ''bright'': [1]}

    '
  - '{''one'': [1], ''three'': [3, 3, 3, 5], ''five'': [3, 5, 5, 5, 5, 5]}

    '
  - '{''i'': [1, 6], ''heard'': [1], ''a'': [1, 4], ''asked'': [6], ''laughing'':
    [7]}

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id003 !Node
  id: 2
  stdout:
  - 'bright

    '
  - 'five

    '
  - 'laughing

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- !Node
  id: 3
  stdout:
  - '{''twas'': [1], ''bright'': {1}}

    '
  - ''
  - '{''i'': [1, 6], ''heard'': [1], ''a'': [1, 4], ''asked'': [6], ''laughing'':
    {7}}

    '
  stderr:
  - ''
  - 'AttributeError: ''list'' object has no attribute ''add'''
  - ''
  _node_tags: null
edges:
- !Edge
  node_from: *id001
  node_to: *id002
  username: student10
  prompt_from: "def add_word(word, line_number, map):\n    \"\"\"\n    Function would\
    \ check if the string word is a key in the dictionary map. If word is in map,\
    \ add line_number to the list in the value side of the dictionary. If the word\
    \ is not in the dictionary, add it as a new key, and add the line_number as the\
    \ first item of a new list as a value.\n    \"\"\"\n    "
  prompt_to: "def add_word(word, line_number, map):\n    \"\"\"\n    Function would\
    \ check if the string word is a key in the dictionary map. If word is in map,\
    \ add line_number to the list in the value side of the dictionary. If the word\
    \ is not in the dictionary, add it as a new key, and add the line_number as the\
    \ first item of a new list as a value. Returns an updated map.\n    \"\"\"\n \
    \   "
  completion_from: "if word in map:\n        map[word].append(line_number)\n    else:\n\
    \        map[word] = [line_number]\n"
  completion_to: "if word in map:\n        map[word].append(line_number)\n    else:\n\
    \        map[word] = [line_number]\n    return map\n"
  diff: "--- \n+++ \n@@ -63,4 +63,8 @@\n as a value.+Returns+an+updated+map. \"\"\""
  attempt_id: 1
  total_attempts: 2
  state: success
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student17
  prompt_from: "def add_word(word, line_number, map):\n    \"\"\"\n    input: 'bright',\
    \ 1, {'twas': [1]} output: {'twas': [1], 'bright': [1]}\n    \"\"\"\n    "
  prompt_to: "def add_word(word, line_number, map):\n    \"\"\"\n    input: 'bright',\
    \ 1, {'twas': [1]} output: {'twas': [1], 'bright': [1]}\n    \"\"\"\n    "
  completion_from: "if word in map:\n        map[word].append(line_number)\n    else:\n\
    \        map[word] = [line_number]\n\n"
  completion_to: "if word in map:\n        map[word].append(line_number)\n    else:\n\
    \        map[word] = [line_number]\n"
  diff: ''
  attempt_id: 1
  total_attempts: 2
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id003
  username: student21
  prompt_from: "def add_word(word, line_number, map):\n    \"\"\"\n    if word isn't\
    \ in map, add the word and number to map, following the format in map. if the\
    \ word is in map already, add the number to the word \n    \"\"\"\n    "
  prompt_to: "def add_word(word, line_number, map):\n    \"\"\"\n    if word isn't\
    \ in map, add the word and number to map, following the format in map. if the\
    \ word is in map already, add the number to the word. return word\n    \"\"\"\n\
    \    "
  completion_from: "if word not in map:\n        map[word] = [line_number]\n    else:\n\
    \        map[word].append(line_number)\n"
  completion_to: "if word not in map:\n        map[word] = [line_number]\n    else:\n\
    \        map[word].append(line_number)\n    return word\n"
  diff: "--- \n+++ \n@@ -32,5 +32,7 @@\n number to the+word.+return word \"\"\""
  attempt_id: 1
  total_attempts: 3
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id003
  node_to: *id002
  username: student21
  prompt_from: "def add_word(word, line_number, map):\n    \"\"\"\n    if word isn't\
    \ in map, add the word and number to map, following the format in map. if the\
    \ word is in map already, add the number to the word. return word\n    \"\"\"\n\
    \    "
  prompt_to: "def add_word(word, line_number, map):\n    \"\"\"\n    if word isn't\
    \ in map, add the word and number to map, following the format in map. if the\
    \ word is in map already, add the number to the word. return map\n    \"\"\"\n\
    \    "
  completion_from: "if word not in map:\n        map[word] = [line_number]\n    else:\n\
    \        map[word].append(line_number)\n    return word\n"
  completion_to: "if word not in map:\n        map[word] = [line_number]\n    else:\n\
    \        map[word].append(line_number)\n    return map\n"
  diff: "--- \n+++ \n@@ -34,5 +34,5 @@\n the word. return-word+map \"\"\""
  attempt_id: 2
  total_attempts: 3
  state: success
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id002
  username: student25
  prompt_from: "def add_word(word, line_number, map):\n    \"\"\"\n    This function\
    \ adds the input \"word\" and \"line_number to the dictionary \"map\". \"word\"\
    \ is the key and \"line_number\" is the value. \"line_number\" will be a list\
    \ in the dictionary.\n    \"\"\"\n    "
  prompt_to: "def add_word(word, line_number, map):\n    \"\"\"\n    This function\
    \ adds the input \"word\" and \"line_number to the dictionary \"map\". \"word\"\
    \ is the key and \"line_number\" is the value. \"line_number\" will be a list\
    \ in the dictionary. The function returns the dictionary.\n    \"\"\"\n    "
  completion_from: "if word in map:\n        map[word].append(line_number)\n    else:\n\
    \        map[word] = [line_number]\n"
  completion_to: "if word in map:\n        map[word].append(line_number)\n    else:\n\
    \        map[word] = [line_number]\n    return map\n"
  diff: "--- \n+++ \n@@ -32,4 +32,9 @@\n in the dictionary.+The+function+returns+the+dictionary.\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 2
  state: success
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student3
  prompt_from: "def add_word(word, line_number, map):\n    \"\"\"\n    create a function\
    \ with 3 input word(string), line_number (int) and map (dict). In map dictionary\
    \ add new element of dictionary with key are word which given the corresponding\
    \ list of line number\n    \"\"\"\n    "
  prompt_to: "def add_word(word, line_number, map):\n    \"\"\"\n    create a function\
    \ with 3 input word(string), line_number (int) and map (dict). add new key name\
    \ word and its corresponding list of line_number into the map\n    \"\"\"\n  \
    \  "
  completion_from: "if word in map:\n        map[word].append(line_number)\n    else:\n\
    \        map[word] = [line_number]\n"
  completion_to: "if word not in map:\n        map[word] = []\n    map[word].append(line_number)\n"
  diff: "--- \n+++ \n@@ -15,24 +15,18 @@\n and map (dict).-In-map-dictionary add new-element-of-dictionary-with\
    \ key-are+name word-which-given-the+and+its corresponding list of-line-number+line_number+into+the+map\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 3
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student3
  prompt_from: "def add_word(word, line_number, map):\n    \"\"\"\n    create a function\
    \ with 3 input word(string), line_number (int) and map (dict). add new key name\
    \ word and its corresponding list of line_number into the map\n    \"\"\"\n  \
    \  "
  prompt_to: "def add_word(word, line_number, map):\n    \"\"\"\n    create a function\
    \ with 3 input word(string), line_number (int) and map (dict). In map dictionary\
    \ create new key word\n    \"\"\"\n    "
  completion_from: "if word not in map:\n        map[word] = []\n    map[word].append(line_number)\n"
  completion_to: "if word not in map:\n        map[word] = []\n    map[word].append(line_number)\n"
  diff: "--- \n+++ \n@@ -15,18 +15,11 @@\n and map (dict).-add+In+map+dictionary+create\
    \ new key-name word-and-its-corresponding-list-of-line_number-into-the-map \"\"\
    \""
  attempt_id: 2
  total_attempts: 3
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student30
  prompt_from: "def add_word(word, line_number, map):\n    \"\"\"\n    Add word and\
    \ line number to map.\n    \"\"\"\n    "
  prompt_to: "def add_word(word, line_number, map):\n    \"\"\"\n    If word is already\
    \ present in map, add line_number to the array corresponding to the \"word\" key\
    \ in map. \n\nOtherwise, add line_number as a new value to map, with word as its\
    \ corresponding key.\n    \"\"\"\n    "
  completion_from: "if word in map:\n        map[word].append(line_number)\n    else:\n\
    \        map[word] = [line_number]\n"
  completion_to: "if word in map:\n        map[word].append(line_number)\n    else:\n\
    \        map[word] = [line_number]\n"
  diff: "--- \n+++ \n@@ -3,11 +3,38 @@\n line_number, map): \"\"\"-Add+If word-and-line-number+is+already+present+in+map,+add+line_number\
    \ to+the+array+corresponding+to+the+\"word\"+key+in map.+Otherwise,+add+line_number+as+a+new+value+to+map,+with+word+as+its+corresponding+key.\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 2
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id002
  username: student4
  prompt_from: "def add_word(word, line_number, map):\n    \"\"\"\n    adds the word\
    \ and line number to a dictionary, with the word as the key and line_number as\
    \ the value \n    \"\"\"\n    "
  prompt_to: "def add_word(word, line_number, map):\n    \"\"\"\n    adds the word\
    \ and line number to a dictionary, with the word as the key and line_number as\
    \ the value, returns the appended dictionary\n    \"\"\"\n    "
  completion_from: "if word in map:\n        map[word].append(line_number)\n    else:\n\
    \        map[word] = [line_number]\n"
  completion_to: "if word in map:\n        map[word].append(line_number)\n    else:\n\
    \        map[word] = [line_number]\n    return map\n"
  diff: "--- \n+++ \n@@ -22,5 +22,9 @@\n line_number as the-value+value,+returns+the+appended+dictionary\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 2
  state: success
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id002
  username: student41
  prompt_from: "def add_word(word, line_number, map):\n    \"\"\"\n    Adds the given\
    \ word as a key with the given line number as a value to the inputted dictionary.\n\
    \    \"\"\"\n    "
  prompt_to: "def add_word(word, line_number, map):\n    \"\"\"\n    Adds the given\
    \ word as a key with the given number as a value to the inputted dictionary. Returns\
    \ the new dictionary.\n    \"\"\"\n    "
  completion_from: "if word not in map:\n        map[word] = []\n    map[word].append(line_number)\n"
  completion_to: "if word not in map:\n        map[word] = [line_number]\n    else:\n\
    \        map[word].append(line_number)\n    return map\n"
  diff: "--- \n+++ \n@@ -13,7 +13,6 @@\n with the given-line number as a@@ -22,4 +21,8\
    \ @@\n the inputted dictionary.+Returns+the+new+dictionary. \"\"\""
  attempt_id: 1
  total_attempts: 2
  state: success
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id002
  username: student51
  prompt_from: "def add_word(word, line_number, map):\n    \"\"\"\n    Add to the\
    \ dictionary with word as the key and line number as the value\n    \"\"\"\n \
    \   "
  prompt_to: "def add_word(word, line_number, map):\n    \"\"\"\n    Add to the dictionary\
    \ with word as the key and line number as the value. Return map.\n    \"\"\"\n\
    \    "
  completion_from: "if word in map:\n        map[word].append(line_number)\n    else:\n\
    \        map[word] = [line_number]\n"
  completion_to: "if word in map:\n        map[word].append(line_number)\n    else:\n\
    \        map[word] = [line_number]\n    return map\n\n"
  diff: "--- \n+++ \n@@ -17,5 +17,7 @@\n number as the-value+value.+Return+map. \"\
    \"\""
  attempt_id: 1
  total_attempts: 2
  state: success
  _edge_tags: null
student_start_node_tags: {}
