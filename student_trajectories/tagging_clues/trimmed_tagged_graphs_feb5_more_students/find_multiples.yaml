!Graph
COLORS:
- '#d83034'
- '#f9e858'
- '#008dff'
- '#4ecb8d'
- '#c701ff'
- '#ffcd8e'
- '#003a7d'
- '#Ff73b6'
- '#ff7f50'
- '#7fff00'
- '#8a2be2'
- '#ffd700'
- '#ff4500'
- '#00ced1'
- '#ff1493'
- '#9400d3'
- '#00bfff'
edges:
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: null
  completion_from: "multiples = []\n    for i in range(start,stop):\n        if i\
    \ % factor == 0:\n            multiples.append(i)\n    return multiples\n"
  completion_to: "result = []\n    i = start\n    while i < stop:\n        if i %\
    \ factor == 0:\n            result.append(i)\n        i += 1\n    return result\n"
  diff: "--- \n+++ \n@@ -5,16 +5,18 @@\n function ask for-start,+three+inputs:start,\
    \ stop,-factor-and-by+factor.+By adding up start*factor and-getting+records+all+the\
    \ sum of those"
  node_from: &id001 !Node
    _node_tags: null
    id: 4
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[20, 40, 60, 80]

      '
    - '[10, 15, 20, 25]

      '
    - '[1062, 1239, 1416, 1593, 1770, 1947]

      '
  node_to: *id001
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    a function\
    \ ask for start, stop, factor and by adding up start*factor and getting sum of\
    \ those all the way until we get the stop. Then create a list to hold those values\n\
    \    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask\
    \ for three inputs:start, stop, factor. By adding up start*factor and records\
    \ all the sum of those all the way until we get the stop. Then create a list to\
    \ hold those values\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student11
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues: null
  completion_from: "result = []\n    i = start\n    while i < stop:\n        if i\
    \ % factor == 0:\n            result.append(i)\n        i += 1\n    return result\n"
  completion_to: "multiples = []\n    for i in range(start,stop):\n        if i %\
    \ factor == 0:\n            multiples.append(i)\n    return multiples\n\nprint(find_multiples(1,10,2))\n"
  diff: "--- \n+++ \n@@ -27,7 +27,7 @@\n we get the-stop.+stop-start. Then create\
    \ a"
  node_from: *id001
  node_to: *id001
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    a function\
    \ ask for three inputs:start, stop, factor. By adding up start*factor and records\
    \ all the sum of those all the way until we get the stop. Then create a list to\
    \ hold those values\n    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask\
    \ for three inputs:start, stop, factor. By adding up start*factor and records\
    \ all the sum of those all the way until we get the stop-start. Then create a\
    \ list to hold those values\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student11
- !Edge
  _edge_tags:
  - 0
  attempt_id: 3
  clues: null
  completion_from: "multiples = []\n    for i in range(start,stop):\n        if i\
    \ % factor == 0:\n            multiples.append(i)\n    return multiples\n\nprint(find_multiples(1,10,2))\n"
  completion_to: "multiples=[]\n    sum=0\n    while sum<stop:\n        sum=sum+start*factor\n\
    \        multiples.append(sum)\n    return multiples\n\nprint(find_multiples(3,100,5))\n"
  diff: "--- \n+++ \n@@ -27,7 +27,7 @@\n we get the-stop-start.+sum==stop. Then create\
    \ a"
  node_from: *id001
  node_to: &id002 !Node
    _node_tags: null
    id: 7
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[20, 40, 60, 80, 100]

      '
    - '[50]

      '
    - '[177000]

      '
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    a function\
    \ ask for three inputs:start, stop, factor. By adding up start*factor and records\
    \ all the sum of those all the way until we get the stop-start. Then create a\
    \ list to hold those values\n    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask\
    \ for three inputs:start, stop, factor. By adding up start*factor and records\
    \ all the sum of those all the way until we get the sum==stop. Then create a list\
    \ to hold those values\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student11
- !Edge
  _edge_tags:
  - 0
  attempt_id: 4
  clues: null
  completion_from: "multiples=[]\n    sum=0\n    while sum<stop:\n        sum=sum+start*factor\n\
    \        multiples.append(sum)\n    return multiples\n\nprint(find_multiples(3,100,5))\n"
  completion_to: "result = []\n    while start*factor < stop:\n        result.append(start*factor)\n\
    \        start += 1\n    return result\n"
  diff: "--- \n+++ \n@@ -35,5 +35,5 @@\n to hold those-values+values. \"\"\""
  node_from: *id002
  node_to: &id010 !Node
    _node_tags: null
    id: 1
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[20, 40, 60, 80]

      '
    - '[]

      '
    - '[]

      '
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    a function\
    \ ask for three inputs:start, stop, factor. By adding up start*factor and records\
    \ all the sum of those all the way until we get the sum==stop. Then create a list\
    \ to hold those values\n    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask\
    \ for three inputs:start, stop, factor. By adding up start*factor and records\
    \ all the sum of those all the way until we get the sum==stop. Then create a list\
    \ to hold those values.\n    \"\"\"\n    "
  state: fail
  total_attempts: 5
  username: student11
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: null
  completion_from: "multiples = []\n    for i in range(start,stop):\n        if i\
    \ % factor == 0:\n            multiples.append(i)\n    return multiples\n"
  completion_to: "multiples = []\n    for i in range(start,stop):\n        if i %\
    \ factor == 0:\n            multiples.append(i)\n    return multiples\n"
  diff: "--- \n+++ \n@@ -10,7 +10,7 @@\n of the factor-between+in the range of"
  node_from: *id001
  node_to: *id001
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    The function\
    \ will find the multiples of the factor between the range of the start and stop\
    \ numbers.\n    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    The function\
    \ will find the multiples of the factor in the range of the start and stop numbers.\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student13
- !Edge
  _edge_tags:
  - a2
  attempt_id: 2
  clues: null
  completion_from: "multiples = []\n    for i in range(start,stop):\n        if i\
    \ % factor == 0:\n            multiples.append(i)\n    return multiples\n"
  completion_to: "multiples = []\n    for i in range(start,stop+1):\n        if i\
    \ % factor == 0:\n            multiples.append(i)\n    return multiples\n"
  diff: "--- \n+++ \n@@ -10,7 +10,7 @@\n of the factor-in+between the range of@@ -18,5\
    \ +18,11 @@\n start and stop+numbers,+including+the+start+and+stop numbers. \"\
    \"\""
  node_from: *id001
  node_to: &id009 !Node
    _node_tags: null
    id: 8
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[20, 40, 60, 80, 100]

      '
    - '[10, 15, 20, 25, 30]

      '
    - '[1062, 1239, 1416, 1593, 1770, 1947]

      '
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    The function\
    \ will find the multiples of the factor in the range of the start and stop numbers.\n\
    \    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    The function\
    \ will find the multiples of the factor between the range of the start and stop\
    \ numbers, including the start and stop numbers.\n    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student13
- !Edge
  _edge_tags:
  - a2
  attempt_id: 1
  clues: null
  completion_from: "multiples = []\n    for i in range(start,stop):\n        if i\
    \ % factor == 0:\n            multiples.append(i)\n    return multiples\n"
  completion_to: 'return range(start,stop+1,factor)

    '
  diff: "--- \n+++ \n@@ -14,4 +14,9 @@\n the stop number+and+include+the+stop+number\
    \ \"\"\""
  node_from: *id001
  node_to: &id003 !Node
    _node_tags: null
    id: 11
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'range(1, 101, 20)

      '
    - 'range(10, 31, 5)

      '
    - 'range(1000, 2001, 177)

      '
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    from the start\
    \ number inputted, count by the factor until the stop number\n    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    from the start\
    \ number inputted, count by the factor until the stop number and include the stop\
    \ number\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student16
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues: null
  completion_from: 'return range(start,stop+1,factor)

    '
  completion_to: 'return list(range(start,stop+1,factor))

    '
  diff: "--- \n+++ \n@@ -13,10 +13,13 @@\n until the stop-number-and-include+number,+including\
    \ the stop number+and+return+as+list \"\"\""
  node_from: *id003
  node_to: &id004 !Node
    _node_tags: null
    id: 5
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[1, 21, 41, 61, 81]

      '
    - '[10, 15, 20, 25, 30]

      '
    - '[1000, 1177, 1354, 1531, 1708, 1885]

      '
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    from the start\
    \ number inputted, count by the factor until the stop number and include the stop\
    \ number\n    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    from the start\
    \ number inputted, count by the factor until the stop number, including the stop\
    \ number and return as list\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student16
- !Edge
  _edge_tags:
  - 0
  attempt_id: 3
  clues: null
  completion_from: 'return list(range(start,stop+1,factor))

    '
  completion_to: 'return list(range(start,stop+1,factor))

    '
  diff: ''
  node_from: *id004
  node_to: *id004
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    from the start\
    \ number inputted, count by the factor until the stop number, including the stop\
    \ number and return as list\n    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    from the start\
    \ number inputted, count by the factor until the stop number, including the stop\
    \ number and return as list\n    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student16
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: null
  completion_from: "for i in range(start,stop,factor):\n        print(i)\n"
  completion_to: "while start < stop:\n        print(start)\n        start += factor\n\
    \nfind_multiples(start,stop,factor)"
  diff: "--- \n+++ \n@@ -4,14 +4,17 @@\n This function prints-values-from the start+value+and+adds+the+factor\
    \ until+it+reaches the stop-by-the-factor+value \"\"\""
  node_from: &id011 !Node
    _node_tags: null
    id: 2
    stderr:
    - 'IndentationError: expected an indented block after ''for'' statement on line
      5'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      5'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      5'
    stdout:
    - ''
    - ''
    - ''
  node_to: &id005 !Node
    _node_tags: null
    id: 9
    stderr:
    - 'NameError: name ''start'' is not defined'
    - 'NameError: name ''start'' is not defined'
    - 'NameError: name ''start'' is not defined'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    This function\
    \ prints values from the start until the stop by the factor\n    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    This function\
    \ prints the start value and adds the factor until it reaches the stop value\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student2
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues: null
  completion_from: "while start < stop:\n        print(start)\n        start += factor\n\
    \nfind_multiples(start,stop,factor)"
  completion_to: "while start < stop:\n        print(start)\n        start += factor\n\
    \nfind_multiples(1,10,2)\n"
  diff: "--- \n+++ \n@@ -10,6 +10,7 @@\n and adds the+value factor until it"
  node_from: *id005
  node_to: &id006 !Node
    _node_tags: null
    id: 6
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'None

      '
    - 'None

      '
    - 'None

      '
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    This function\
    \ prints the start value and adds the factor until it reaches the stop value\n\
    \    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    This function\
    \ prints the start value and adds the value factor until it reaches the stop value\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student2
- !Edge
  _edge_tags:
  - 0
  attempt_id: 3
  clues: null
  completion_from: "while start < stop:\n        print(start)\n        start += factor\n\
    \nfind_multiples(1,10,2)\n"
  completion_to: "i = start\n    while i < stop:\n        print(i)\n        i += factor\n\
    \nfind_multiples(0,100,10)\n"
  diff: ''
  node_from: *id006
  node_to: *id006
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    This function\
    \ prints the start value and adds the value factor until it reaches the stop value\n\
    \    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    This function\
    \ prints the start value and adds the value factor until it reaches the stop value\n\
    \    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student2
- !Edge
  _edge_tags:
  - a2
  attempt_id: 1
  clues: null
  completion_from: 'return [x for x in range(start,stop,factor)]

    '
  completion_to: "#create a list of numbers from start to stop\n    numbers = range(start,stop)\n\
    \    #create a list of multiples of factor\n    multiples = [x for x in numbers\
    \ if x % factor == 0]\n    #find the last number in the list\n    last_number\
    \ = multiples[-1]\n    #find the 5 closest numbers in the step size to that last\
    \ number\n    closest_numbers = [last_number +"
  diff: "--- \n+++ \n@@ -16,9 +16,21 @@\n and output a-list-based-on-those-parameters+including+the+last+number,+and+the+5+closest+numbers+in+the+step+size+to+that+last+number\
    \ \"\"\""
  node_from: &id012 !Node
    _node_tags: null
    id: 10
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[1, 21, 41, 61, 81]

      '
    - '[10, 15, 20, 25]

      '
    - '[1000, 1177, 1354, 1531, 1708, 1885]

      '
  node_to: &id007 !Node
    _node_tags: null
    id: 0
    stderr:
    - 'SyntaxError: ''['' was never closed'
    - 'SyntaxError: ''['' was never closed'
    - 'SyntaxError: ''['' was never closed'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    take in a\
    \ list of integers [start number, final number, step size] and output a list based\
    \ on those parameters\n    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    take in a list\
    \ of integers [start number, final number, step size] and output a including the\
    \ last number, and the 5 closest numbers in the step size to that last number\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student22
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues: null
  completion_from: "#create a list of numbers from start to stop\n    numbers = range(start,stop)\n\
    \    #create a list of multiples of factor\n    multiples = [x for x in numbers\
    \ if x % factor == 0]\n    #find the last number in the list\n    last_number\
    \ = multiples[-1]\n    #find the 5 closest numbers in the step size to that last\
    \ number\n    closest_numbers = [last_number +"
  completion_to: "#create a list of numbers\n    numbers = list(range(start,stop,factor))\n\
    \    #find the last number in the list\n    last_number = numbers[-1]\n    #find\
    \ the 5 closest numbers to the last number\n    closest_numbers = numbers[-5:]\n\
    \    #return the last number and the 5 closest numbers\n    return last_number,\
    \ closest_numbers\n"
  diff: ''
  node_from: *id007
  node_to: &id008 !Node
    _node_tags: null
    id: 3
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '(81, [1, 21, 41, 61, 81])

      '
    - '(25, [10, 15, 20, 25])

      '
    - '(1885, [1177, 1354, 1531, 1708, 1885])

      '
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    take in a\
    \ list of integers [start number, final number, step size] and output a including\
    \ the last number, and the 5 closest numbers in the step size to that last number\n\
    \    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    take in a list\
    \ of integers [start number, final number, step size] and output a including the\
    \ last number, and the 5 closest numbers in the step size to that last number\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student22
- !Edge
  _edge_tags:
  - 0
  attempt_id: 3
  clues: null
  completion_from: "#create a list of numbers\n    numbers = list(range(start,stop,factor))\n\
    \    #find the last number in the list\n    last_number = numbers[-1]\n    #find\
    \ the 5 closest numbers to the last number\n    closest_numbers = numbers[-5:]\n\
    \    #return the last number and the 5 closest numbers\n    return last_number,\
    \ closest_numbers\n"
  completion_to: "multiples = []\n    for i in range(start,stop+1):\n        if i\
    \ % factor == 0:\n            multiples.append(i)\n    return multiples\n"
  diff: "--- \n+++ \n@@ -7,30 +7,25 @@\n list of integers-[start-number,-final-number,-step-size]+[start,+stop,+factor]\
    \ and output a+list+starting+at+the+closest+even+number+to+the+start,+and including\
    \ the-last-number,-and-the-5-closest-numbers-in-the-step-size-to-that-last+stop\
    \ number \"\"\""
  node_from: *id008
  node_to: *id009
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    take in a\
    \ list of integers [start number, final number, step size] and output a including\
    \ the last number, and the 5 closest numbers in the step size to that last number\n\
    \    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    take in a list\
    \ of integers [start, stop, factor] and output a list starting at the closest\
    \ even number to the start, and including the stop number\n    \"\"\"\n    "
  state: success
  total_attempts: 4
  username: student22
- !Edge
  _edge_tags:
  - a2
  attempt_id: 1
  clues: null
  completion_from: "#initialize the list\n    multiples = []\n    #start the loop\n\
    \    for i in range(start,stop):\n        #check if the number is a multiple of\
    \ the factor\n        if i % factor == 0:\n            #add the number to the\
    \ list\n            multiples.append(i)\n    #return the list\n    return multiples\n"
  completion_to: "multiples = []\n    for i in range(start,stop+1):\n        if i%factor\
    \ == 0:\n            multiples.append(i)\n    return multiples\n"
  diff: "--- \n+++ \n@@ -37,5 +37,11 @@\n at the stopping-number.+number+but+including+it+in+the+list.\
    \ \"\"\""
  node_from: *id001
  node_to: *id009
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    the function\
    \ find_multiples will take the input of a starting number, a stopping number,\
    \ and a factor. The function will start counting at the starting number and count\
    \ up by the factor, stopping at the stopping number. \n    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    the function\
    \ find_multiples will take the input of a starting number, a stopping number,\
    \ and a factor. The function will start counting at the starting number and count\
    \ up by the factor, stopping at the stopping number but including it in the list.\
    \ \n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student5
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: null
  completion_from: 'return [x for x in range(start,stop) if x % factor == 0]

    '
  completion_to: 'return [x for x in range(start,stop) if x % factor == 0]

    '
  diff: "--- \n+++ \n@@ -4,10 +4,14 @@\n Function returns multiples-between+from+the\
    \ first-two-items+item+to+the+second+item in the input"
  node_from: *id001
  node_to: *id001
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    Function returns\
    \ multiples between first two items in the input in multiples of the third item\n\
    \    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    Function returns\
    \ multiples from the first item to the second item in the input in multiples of\
    \ the third item\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student61
- !Edge
  _edge_tags:
  - a2
  attempt_id: 2
  clues: null
  completion_from: 'return [x for x in range(start,stop) if x % factor == 0]

    '
  completion_to: "multiples = []\n    for i in range(start,stop+1):\n        if i\
    \ % factor == 0:\n            multiples.append(i)\n    return multiples\n"
  diff: "--- \n+++ \n@@ -12,6 +12,10 @@\n the second item+(including+the+second+item)\
    \ in the input"
  node_from: *id001
  node_to: *id009
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    Function returns\
    \ multiples from the first item to the second item in the input in multiples of\
    \ the third item\n    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    Function returns\
    \ multiples from the first item to the second item (including the second item)\
    \ in the input in multiples of the third item\n    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student61
- !Edge
  _edge_tags:
  - a2
  attempt_id: 1
  clues: null
  completion_from: 'return [x for x in range(start,stop) if x % factor == 0]

    '
  completion_to: "multiples = []\n    for i in range(start,stop+1):\n        if i\
    \ % factor == 0:\n            multiples.append(i)\n    return multiples\n"
  diff: "--- \n+++ \n@@ -12,17 +12,34 @@\n input. The first-and-second number of the\
    \ input-are+is the-bounds+starting+bound and the+second+number+is+the+the+ending+bound,+but+is+included+in+the+list+of+multiples+if+applicable.+The\
    \ last number is"
  node_from: *id001
  node_to: *id009
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    Produce a\
    \ list of multiples with the given input. The first and second number of the input\
    \ are the bounds and the last number is the multiple.\n    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    Produce a list\
    \ of multiples with the given input. The first number of the input is the starting\
    \ bound and the second number is the the ending bound, but is included in the\
    \ list of multiples if applicable. The last number is the multiple.\n    \"\"\"\
    \n    "
  state: success
  total_attempts: 2
  username: student72
- !Edge
  _edge_tags:
  - a2
  attempt_id: 1
  clues: null
  completion_from: "result = []\n    for i in range(start,stop):\n        if i % factor\
    \ == 0:\n            result.append(i)\n    return result\n\nprint(find_multiples(1,10,2))\n"
  completion_to: "# your code here\n    return [x for x in range(start,stop+1) if\
    \ x%factor==0]\n\nprint(find_multiples(1,10,2))\n"
  diff: "--- \n+++ \n@@ -23,5 +23,12 @@\n also given as-inputs+inputs.+The+end+input+should+also+be+included\
    \ \"\"\""
  node_from: *id001
  node_to: *id009
  prompt_from: "def find_multiples(start,stop,factor):\n    \"\"\"\n    the code should\
    \ increase the amount of a number by the factor given. Where to start and end\
    \ are also given as inputs\n    \"\"\"\n    "
  prompt_to: "def find_multiples(start,stop,factor):\n    \"\"\"\n    the code should\
    \ increase the amount of a number by the factor given. Where to start and end\
    \ are also given as inputs. The end input should also be included \n    \"\"\"\
    \n    "
  state: success
  total_attempts: 2
  username: student74
nodes:
- *id007
- *id010
- *id011
- *id008
- *id001
- *id004
- *id006
- *id002
- *id009
- *id005
- *id012
- *id003
problem: find_multiples
problem_clues: {}
student_clues_tracker: {}
student_colors: {}
student_start_node_tags:
  student11:
  - 0
  student13:
  - 1
  student16:
  - 0
  student2:
  - 0
  student22:
  - 0
  student5:
  - 0
  student61:
  - 1
  student72:
  - 1
  student74:
  - 0
