!Graph
COLORS:
- '#d83034'
- '#f9e858'
- '#008dff'
- '#4ecb8d'
- '#c701ff'
- '#ffcd8e'
- '#003a7d'
- '#Ff73b6'
- '#ff7f50'
- '#7fff00'
- '#8a2be2'
- '#ffd700'
- '#ff4500'
- '#00ced1'
- '#ff1493'
- '#9400d3'
- '#00bfff'
edges:
- !Edge
  _edge_tags:
  - m5
  - a4
  attempt_id: 1
  clues: null
  completion_from: "num = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            num += 1\n    return str(num*100/len(guess)) + \"\
    %\"\n"
  completion_to: "num = 0\n    for i in range(len(guess)):\n        if guess[i] ==\
    \ answers[i]:\n            num += 1\n    return str(num * 100 // len(guess)) +\
    \ \"%\"\n"
  diff: "--- \n+++ \n@@ -26,6 +26,8 @@\n the string of+integer+of num times 100"
  node_from: &id012 !Node
    _node_tags: null
    id: 12
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '75.0%

      '
    - '33.333333333333336%

      '
    - '100.0%

      '
  node_to: &id004 !Node
    _node_tags: null
    id: 8
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '75%

      '
    - '33%

      '
    - '100%

      '
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    takes in two lists.\
    \ If the lists have the same value at the same index, add one to a num variable.\
    \ return the string of num times 100 divided by the length of the first list and\
    \ concatenate a percent sign.\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    takes in two lists.\
    \ If the lists have the same value at the same index, add one to a num variable.\
    \ return the string of integer of num times 100 divided by the length of the first\
    \ list and concatenate a percent sign.\n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student0
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: null
  completion_from: "if len(guess) != len(answers):\n        print \"Error: Lists are\
    \ not of equal length.\"\n        return\n    else:\n        count = 0\n     \
    \   for i in range(len(guess)):\n            if guess[i] == answers[i]:\n    \
    \            count += 1\n        return (count/float(len(guess)))*100\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return count/len(guess)\n"
  diff: "--- \n+++ \n@@ -28,5 +28,5 @@\n the two items-match.+match \"\"\""
  node_from: &id010 !Node
    _node_tags: null
    id: 4
    stderr:
    - 'SyntaxError: Missing parentheses in call to ''print''. Did you mean print(...)?'
    - 'SyntaxError: Missing parentheses in call to ''print''. Did you mean print(...)?'
    - 'SyntaxError: Missing parentheses in call to ''print''. Did you mean print(...)?'
    stdout:
    - ''
    - ''
    - ''
  node_to: &id001 !Node
    _node_tags: null
    id: 11
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '0.75

      '
    - '0.3333333333333333

      '
    - '1.0

      '
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    User inputs two lists\
    \ of equal length. Program would compare each item against second list's corresponding\
    \ item, and would return the percentage of times the two items match.\n    \"\"\
    \"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    User inputs two lists\
    \ of equal length. Program would compare each item against second list's corresponding\
    \ item, and would return the percentage of times the two items match\n    \"\"\
    \"\n    "
  state: neutral
  total_attempts: 4
  username: student10
- !Edge
  _edge_tags:
  - a5
  attempt_id: 2
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return count/len(guess)\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(count/len(guess)*100)+\"\
    %\"\n"
  diff: "--- \n+++ \n@@ -28,5 +28,16 @@\n the two items-match+match,+as+an+integer+value+with+a+%+sign+at+the+end.\
    \ \"\"\""
  node_from: *id001
  node_to: &id002 !Node
    _node_tags: null
    id: 14
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '75.0%

      '
    - '33.33333333333333%

      '
    - '100.0%

      '
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    User inputs two lists\
    \ of equal length. Program would compare each item against second list's corresponding\
    \ item, and would return the percentage of times the two items match\n    \"\"\
    \"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    User inputs two lists\
    \ of equal length. Program would compare each item against second list's corresponding\
    \ item, and would return the percentage of times the two items match, as an integer\
    \ value with a % sign at the end.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student10
- !Edge
  _edge_tags:
  - a4
  attempt_id: 3
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(count/len(guess)*100)+\"\
    %\"\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(count/len(guess)*100)+\"\
    %\"\n"
  diff: "--- \n+++ \n@@ -32,7 +32,10 @@\n as an integer-value+with+no+decimal+spaces\
    \ with a %"
  node_from: *id002
  node_to: *id002
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    User inputs two lists\
    \ of equal length. Program would compare each item against second list's corresponding\
    \ item, and would return the percentage of times the two items match, as an integer\
    \ value with a % sign at the end.\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    User inputs two lists\
    \ of equal length. Program would compare each item against second list's corresponding\
    \ item, and would return the percentage of times the two items match, as an integer\
    \ with no decimal spaces with a % sign at the end.\n    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student10
- !Edge
  _edge_tags:
  - m3
  attempt_id: 1
  clues: null
  completion_from: "matches = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            matches += 1\n    return matches/len(guess)\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return count/len(guess)\n"
  diff: "--- \n+++ \n@@ -14,7 +14,12 @@\n and calculates the-similarity-in-percents+similarity,+then+give+the+answer+as+a+percentage\
    \ \"\"\""
  node_from: *id001
  node_to: *id001
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers\
    \ and letters of the two given strings and calculates the similarity in percents\n\
    \    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers\
    \ and letters of the two given strings and calculates the similarity, then give\
    \ the answer as a percentage\n    \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student17
- !Edge
  _edge_tags:
  - m3
  attempt_id: 2
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return count/len(guess)\n"
  completion_to: "matches = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            matches += 1\n    return matches/len(guess)*100\n"
  diff: "--- \n+++ \n@@ -16,10 +16,9 @@\n the similarity, then-give+multiply the answer-as-a-percentage+by+100\
    \ \"\"\""
  node_from: *id001
  node_to: &id003 !Node
    _node_tags: null
    id: 9
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '75.0

      '
    - '33.33333333333333

      '
    - '100.0

      '
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers\
    \ and letters of the two given strings and calculates the similarity, then give\
    \ the answer as a percentage\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers\
    \ and letters of the two given strings and calculates the similarity, then multiply\
    \ the answer by 100\n    \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student17
- !Edge
  _edge_tags:
  - l3
  attempt_id: 3
  clues: null
  completion_from: "matches = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            matches += 1\n    return matches/len(guess)*100\n"
  completion_to: "matches = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            matches += 1\n    return (matches/len(guess))*100\n"
  diff: "--- \n+++ \n@@ -15,10 +15,12 @@\n calculates the similarity,-then-multiply+lastly+turn\
    \ the answer-by-100+into+a+percent+number \"\"\""
  node_from: *id003
  node_to: *id003
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers\
    \ and letters of the two given strings and calculates the similarity, then multiply\
    \ the answer by 100\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers\
    \ and letters of the two given strings and calculates the similarity, lastly turn\
    \ the answer into a percent number\n    \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student17
- !Edge
  _edge_tags:
  - a5
  attempt_id: 4
  clues: null
  completion_from: "matches = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            matches += 1\n    return (matches/len(guess))*100\n"
  completion_to: "matches = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            matches += 1\n    percent = matches/len(guess)\n\
    \    return str(percent*100) + \"%\"\n"
  diff: "--- \n+++ \n@@ -23,4 +23,8 @@\n a percent number+with+the+percent+symbol\
    \ \"\"\""
  node_from: *id003
  node_to: *id002
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers\
    \ and letters of the two given strings and calculates the similarity, lastly turn\
    \ the answer into a percent number\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers\
    \ and letters of the two given strings and calculates the similarity, lastly turn\
    \ the answer into a percent number with the percent symbol\n    \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student17
- !Edge
  _edge_tags:
  - a4
  attempt_id: 5
  clues: null
  completion_from: "matches = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            matches += 1\n    percent = matches/len(guess)\n\
    \    return str(percent*100) + \"%\"\n"
  completion_to: "matches = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            matches += 1\n    percent = str(round((matches/len(guess))*100))\
    \ + \"%\"\n    return percent\n"
  diff: "--- \n+++ \n@@ -26,5 +26,11 @@\n with the percent-symbol+symbol,+rounding+to+the+nearest+whole+number\
    \ \"\"\""
  node_from: *id002
  node_to: *id004
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers\
    \ and letters of the two given strings and calculates the similarity, lastly turn\
    \ the answer into a percent number with the percent symbol\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers\
    \ and letters of the two given strings and calculates the similarity, lastly turn\
    \ the answer into a percent number with the percent symbol, rounding to the nearest\
    \ whole number\n    \"\"\"\n    "
  state: success
  total_attempts: 6
  username: student17
- !Edge
  _edge_tags:
  - m3
  - a5
  attempt_id: 1
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return count/len(guess)\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    percent = count/len(guess) * 100\n\
    \    return str(percent) + '%'\n"
  diff: "--- \n+++ \n@@ -22,4 +22,16 @@\n guess and answers.+Then,+multiply+100+to+the+value+and+add+'%'+at+the+end.\
    \ \"\"\""
  node_from: *id001
  node_to: *id002
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    Compare the string\
    \ in guess and answers by each index and calculate the percentage of the match\
    \ between guess and answers. \n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    Compare the string in\
    \ guess and answers by each index and calculate the percentage of the match between\
    \ guess and answers. Then, multiply 100 to the value and add '%' at the end. \n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student18
- !Edge
  _edge_tags:
  - a4
  attempt_id: 2
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    percent = count/len(guess) * 100\n\
    \    return str(percent) + '%'\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(round(count/len(guess)*100,2))\
    \ + '%'\n"
  diff: "--- \n+++ \n@@ -28,6 +28,9 @@\n to the value+while+rounding+up and add '%'"
  node_from: *id002
  node_to: &id005 !Node
    _node_tags: null
    id: 5
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '75.0%

      '
    - '33.33%

      '
    - '100.0%

      '
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    Compare the string\
    \ in guess and answers by each index and calculate the percentage of the match\
    \ between guess and answers. Then, multiply 100 to the value and add '%' at the\
    \ end. \n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    Compare the string in\
    \ guess and answers by each index and calculate the percentage of the match between\
    \ guess and answers. Then, multiply 100 to the value while rounding up and add\
    \ '%' at the end. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student18
- !Edge
  _edge_tags:
  - m4
  attempt_id: 3
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(round(count/len(guess)*100,2))\
    \ + '%'\n"
  completion_to: "percent = round(sum(1 for a, b in zip(guess, answers) if a == b)\
    \ / len(answers) * 100)\n    return str(percent) + '%'\n"
  diff: "--- \n+++ \n@@ -31,6 +31,10 @@\n while rounding up+to+the+nearest+integer\
    \ and add '%'"
  node_from: *id005
  node_to: *id004
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    Compare the string\
    \ in guess and answers by each index and calculate the percentage of the match\
    \ between guess and answers. Then, multiply 100 to the value while rounding up\
    \ and add '%' at the end. \n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    Compare the string in\
    \ guess and answers by each index and calculate the percentage of the match between\
    \ guess and answers. Then, multiply 100 to the value while rounding up to the\
    \ nearest integer and add '%' at the end. \n    \"\"\"\n    "
  state: success
  total_attempts: 4
  username: student18
- !Edge
  _edge_tags:
  - m3
  attempt_id: 1
  clues: null
  completion_from: 'return str(round(guess.count(''X'')/len(guess)*100,2))+''%''

    '
  completion_to: 'return str(100 - (guess.count(''X'')/len(guess)*100)) + ''%''

    '
  diff: "--- \n+++ \n@@ -18,10 +18,14 @@\n length of the-list-and+list, multiply by+100.+Subtract+this+number+from\
    \ 100. Return the"
  node_from: &id011 !Node
    _node_tags: null
    id: 10
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '25.0%

      '
    - '66.67%

      '
    - '0.0%

      '
  node_to: &id006 !Node
    _node_tags: null
    id: 1
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '75.0%

      '
    - '33.33333333333334%

      '
    - '100.0%

      '
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    given two lists, divide\
    \ the number of 'X' in the first list by the length of the list and multiply by\
    \ 100. Return the String of this obtained number plus the percentage sign.\n \
    \   \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    given two lists, divide\
    \ the number of 'X' in the first list by the length of the list, multiply by 100.\
    \ Subtract this number from 100. Return the String of this obtained number plus\
    \ the percentage sign.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student21
- !Edge
  _edge_tags:
  - a4
  attempt_id: 2
  clues: null
  completion_from: 'return str(100 - (guess.count(''X'')/len(guess)*100)) + ''%''

    '
  completion_to: 'return str(int(100-((guess.count(''X'')/len(guess))*100)))+''%''

    '
  diff: "--- \n+++ \n@@ -34,6 +34,9 @@\n this obtained number+as+an+integer plus the\
    \ percentage"
  node_from: *id006
  node_to: *id004
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    given two lists, divide\
    \ the number of 'X' in the first list by the length of the list, multiply by 100.\
    \ Subtract this number from 100. Return the String of this obtained number plus\
    \ the percentage sign.\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    given two lists, divide\
    \ the number of 'X' in the first list by the length of the list, multiply by 100.\
    \ Subtract this number from 100. Return the String of this obtained number as\
    \ an integer plus the percentage sign.\n    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student21
- !Edge
  _edge_tags:
  - a5
  attempt_id: 1
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return count/len(guess)\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(count/len(guess) * 100)\
    \ + \"%\"\n"
  diff: "--- \n+++ \n@@ -22,4 +22,18 @@\n the answer list.+The+percentage+is+multiplied+by+100+and+\"\
    %\"+is+added+to+the+final+result. \"\"\""
  node_from: *id001
  node_to: *id002
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    This function compares\
    \ how similar 2 lists are and returns the percent of the guess list that matches\
    \ the answer list.\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    This function compares\
    \ how similar 2 lists are and returns the percent of the guess list that matches\
    \ the answer list. The percentage is multiplied by 100 and \"%\" is added to the\
    \ final result.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student25
- !Edge
  _edge_tags:
  - a4
  attempt_id: 2
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(count/len(guess) * 100)\
    \ + \"%\"\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(round(count/len(guess)*100,2))\
    \ + \"%\"\n"
  diff: "--- \n+++ \n@@ -27,7 +27,8 @@\n is multiplied by-100+100,+rounded, and \"\
    %\" is"
  node_from: *id002
  node_to: *id005
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    This function compares\
    \ how similar 2 lists are and returns the percent of the guess list that matches\
    \ the answer list. The percentage is multiplied by 100 and \"%\" is added to the\
    \ final result.\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    This function compares\
    \ how similar 2 lists are and returns the percent of the guess list that matches\
    \ the answer list. The percentage is multiplied by 100, rounded, and \"%\" is\
    \ added to the final result.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student25
- !Edge
  _edge_tags:
  - m4
  attempt_id: 3
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(round(count/len(guess)*100,2))\
    \ + \"%\"\n"
  completion_to: "count = 0\n    for i in range(len(answers)):\n        if answers[i]\
    \ == guess[i]:\n            count += 1\n    return str(round(count/len(answers)*100))\
    \ + \"%\"\n"
  diff: "--- \n+++ \n@@ -28,7 +28,11 @@\n multiplied by 100,-rounded,+rounded+to+have+no+decimal,\
    \ and \"%\" is"
  node_from: *id005
  node_to: *id004
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    This function compares\
    \ how similar 2 lists are and returns the percent of the guess list that matches\
    \ the answer list. The percentage is multiplied by 100, rounded, and \"%\" is\
    \ added to the final result.\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    This function compares\
    \ how similar 2 lists are and returns the percent of the guess list that matches\
    \ the answer list. The percentage is multiplied by 100, rounded to have no decimal,\
    \ and \"%\" is added to the final result.\n    \"\"\"\n    "
  state: success
  total_attempts: 4
  username: student25
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: null
  completion_from: "if len(guess) != len(answers):\n        return \"Error: lists\
    \ are not the same length\"\n    else:\n        correct = 0\n        for i in\
    \ range(len(guess)):\n            if guess[i] == answers[i]:\n               \
    \ correct += 1\n        return (correct/len(guess))*100\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return count/len(guess)\n"
  diff: ''
  node_from: *id003
  node_to: *id001
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    Count how many characters\
    \ in a range of numbers match those in another range of numbers and display the\
    \ difference as a percentage\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    Count how many characters\
    \ in a range of numbers match those in another range of numbers and display the\
    \ difference as a percentage\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student26
- !Edge
  _edge_tags:
  - a5
  attempt_id: 2
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return count/len(guess)\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return (count/len(guess))*100\n"
  diff: "--- \n+++ \n@@ -20,8 +20,15 @@\n and display the+difference,+multiply+the\
    \ difference-as-a-percentage+by+100+and+display+followed+by+% \"\"\""
  node_from: *id001
  node_to: *id003
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    Count how many characters\
    \ in a range of numbers match those in another range of numbers and display the\
    \ difference as a percentage\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    Count how many characters\
    \ in a range of numbers match those in another range of numbers and display the\
    \ difference, multiply the difference by 100 and display followed by %\n    \"\
    \"\"\n    "
  state: neutral
  total_attempts: 5
  username: student26
- !Edge
  _edge_tags:
  - 0
  attempt_id: 3
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return (count/len(guess))*100\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str((count/len(guess))*100)\
    \ + \"%\"\n"
  diff: "--- \n+++ \n@@ -20,8 +20,8 @@\n and display the-difference,-multiply+difference.+Multiply\
    \ the difference by@@ -30,5 +30,5 @@\n display followed by-%+'%' \"\"\""
  node_from: *id003
  node_to: *id002
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    Count how many characters\
    \ in a range of numbers match those in another range of numbers and display the\
    \ difference, multiply the difference by 100 and display followed by %\n    \"\
    \"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    Count how many characters\
    \ in a range of numbers match those in another range of numbers and display the\
    \ difference. Multiply the difference by 100 and display followed by '%'\n   \
    \ \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student26
- !Edge
  _edge_tags:
  - a4
  attempt_id: 4
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str((count/len(guess))*100)\
    \ + \"%\"\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return round((count/len(guess))*100,0)\n"
  diff: "--- \n+++ \n@@ -20,7 +20,13 @@\n and display the-difference.+difference+rounded+to+the+nearest+whole+number.\
    \ Multiply the difference"
  node_from: *id002
  node_to: &id009 !Node
    _node_tags: null
    id: 2
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '75.0

      '
    - '33.0

      '
    - '100.0

      '
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    Count how many characters\
    \ in a range of numbers match those in another range of numbers and display the\
    \ difference. Multiply the difference by 100 and display followed by '%'\n   \
    \ \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    Count how many characters\
    \ in a range of numbers match those in another range of numbers and display the\
    \ difference rounded to the nearest whole number. Multiply the difference by 100\
    \ and display followed by '%'\n    \"\"\"\n    "
  state: fail
  total_attempts: 5
  username: student26
- !Edge
  _edge_tags:
  - a3
  - a4
  attempt_id: 1
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return count/len(guess)\n"
  completion_to: 'return round(len([i for i,j in zip(guess,answers) if i==j])/len(answers)*100)

    '
  diff: "--- \n+++ \n@@ -22,4 +22,25 @@\n guess and answers+then+divide+with+the+number+of+element+of+answers.+then+times+the+results+100+times+and+round+up+the+to+interger\
    \ \"\"\""
  node_from: *id001
  node_to: &id007 !Node
    _node_tags: null
    id: 13
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '75

      '
    - '33

      '
    - '100

      '
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    create a function\
    \ with 2 inputs: guess (list) and answers(list). find the number of the element\
    \ match in guess and answers\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    create a function with\
    \ 2 inputs: guess (list) and answers(list). find the number of the element match\
    \ in guess and answers then divide with the number of element of answers. then\
    \ times the results 100 times and round up the to interger\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student3
- !Edge
  _edge_tags:
  - a5
  attempt_id: 2
  clues: null
  completion_from: 'return round(len([i for i,j in zip(guess,answers) if i==j])/len(answers)*100)

    '
  completion_to: 'return str(round((len([i for i, j in zip(guess, answers) if i ==
    j])/len(answers))*100))+"%"

    '
  diff: "--- \n+++ \n@@ -42,5 +42,11 @@\n up the to-interger+integer.+add+percentage+sign+after+the+results\
    \ \"\"\""
  node_from: *id007
  node_to: *id004
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    create a function\
    \ with 2 inputs: guess (list) and answers(list). find the number of the element\
    \ match in guess and answers then divide with the number of element of answers.\
    \ then times the results 100 times and round up the to interger\n    \"\"\"\n\
    \    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    create a function with\
    \ 2 inputs: guess (list) and answers(list). find the number of the element match\
    \ in guess and answers then divide with the number of element of answers. then\
    \ times the results 100 times and round up the to integer. add percentage sign\
    \ after the results\n    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student3
- !Edge
  _edge_tags:
  - a4
  - a5
  - a6
  attempt_id: 1
  clues: null
  completion_from: "num = 0\n    for i in answers:\n        if i == guess:\n     \
    \       num += 1\n    return num/len(answers)\n"
  completion_to: "X = 0\n    for i in range(len(guess)):\n        if guess[i] in answers:\n\
    \            X += 1\n    Y = X/len(guess)\n    Z = str(round(Y*100)) + '%'\n \
    \   return Z\n"
  diff: "--- \n+++ \n@@ -4,19 +4,57 @@\n Take in array-A.+guess.+Create+variable+X+equal+to+0.\
    \ Iterate through array+A.+When+a+character+is+present+in+Array A,-and-record+add+1+to+X.+Create+variable+Y,+equal+to+X+divided+by\
    \ the-proportion+size of-numbers-in-it-versus-letters.+the+guess+array.+Return+variable+Z,+equal+to+Y+rounded+to+the+nearest+integer+with+'%'+appended+to+it.\
    \ \"\"\""
  node_from: &id013 !Node
    _node_tags: null
    id: 15
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '0.0

      '
    - '0.0

      '
    - '0.0

      '
  node_to: *id004
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    Take in array A. Iterate\
    \ through array A, and record the proportion of numbers in it versus letters.\n\
    \    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    Take in array guess.\
    \ Create variable X equal to 0. Iterate through array A. When a character is present\
    \ in Array A, add 1 to X. Create variable Y, equal to X divided by the size of\
    \ the guess array. Return variable Z, equal to Y rounded to the nearest integer\
    \ with '%' appended to it.\n    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student30
- !Edge
  _edge_tags:
  - a4
  - a5
  - a6
  attempt_id: 1
  clues: null
  completion_from: "correct = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            correct += 1\n    return correct/len(guess)\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(count/len(guess)*100)\
    \ + \"%\"\n"
  diff: "--- \n+++ \n@@ -17,5 +17,13 @@\n items in list-2+2,+returns+in+whole+number+format+including+percent+sign\
    \ \"\"\""
  node_from: *id001
  node_to: *id002
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    determines the percent\
    \ of items in list 1 that are identical to the items in list 2\n    \"\"\"\n \
    \   "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    determines the percent\
    \ of items in list 1 that are identical to the items in list 2, returns in whole\
    \ number format including percent sign\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student4
- !Edge
  _edge_tags:
  - m4
  attempt_id: 2
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(count/len(guess)*100)\
    \ + \"%\"\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(count/len(guess)*100)\
    \ + \"%\"\n"
  diff: "--- \n+++ \n@@ -20,8 +20,7 @@\n 2, returns in-whole-number+integer format\
    \ including percent"
  node_from: *id002
  node_to: *id002
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    determines the percent\
    \ of items in list 1 that are identical to the items in list 2, returns in whole\
    \ number format including percent sign\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    determines the percent\
    \ of items in list 1 that are identical to the items in list 2, returns in integer\
    \ format including percent sign\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student4
- !Edge
  _edge_tags:
  - m4
  attempt_id: 3
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(count/len(guess)*100)\
    \ + \"%\"\n"
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    percent = count/len(guess)\n   \
    \ return str(round(percent*100)) + \"%\"\n"
  diff: "--- \n+++ \n@@ -19,9 +19,13 @@\n list 2, returns-in-integer-format+number+rounded+to+the+nearest+whole+numbers\
    \ including percent sign"
  node_from: *id002
  node_to: *id004
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    determines the percent\
    \ of items in list 1 that are identical to the items in list 2, returns in integer\
    \ format including percent sign\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    determines the percent\
    \ of items in list 1 that are identical to the items in list 2, returns number\
    \ rounded to the nearest whole numbers including percent sign\n    \"\"\"\n  \
    \  "
  state: success
  total_attempts: 4
  username: student4
- !Edge
  _edge_tags:
  - a5
  attempt_id: 1
  clues: null
  completion_from: "correct = 1\n    for i in range(len(guess)):\n        if guess[i]\
    \ != answers[i]:\n            correct -= 1/len(guess)\n    print(\"You got\",correct*100,\"\
    % correct.\")\n"
  completion_to: "correct = 1\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            correct = correct\n        else:\n            correct\
    \ = correct - (1/len(guess))\n    print(correct*100,'%')\n"
  diff: "--- \n+++ \n@@ -53,7 +53,13 @@\n of correct responses-as+multiplied+by+100+and+followed+by\
    \ a-percentage.+percent+sign. \"\"\""
  node_from: &id008 !Node
    _node_tags: null
    id: 0
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'None

      '
    - 'None

      '
    - 'None

      '
  node_to: *id008
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    Given two lists, compares\
    \ each item in the second list to each item in the first list. For each item in\
    \ the second list that does not match the first list, it subtracts from one, one\
    \ divided by the total length of the list. Then it prints the proportion of correct\
    \ responses as a percentage.\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    Given two lists, compares\
    \ each item in the second list to each item in the first list. For each item in\
    \ the second list that does not match the first list, it subtracts from one, one\
    \ divided by the total length of the list. Then it prints the proportion of correct\
    \ responses multiplied by 100 and followed by a percent sign.\n    \"\"\"\n  \
    \  "
  state: neutral
  total_attempts: 3
  username: student41
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues: null
  completion_from: "correct = 1\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            correct = correct\n        else:\n            correct\
    \ = correct - (1/len(guess))\n    print(correct*100,'%')\n"
  completion_to: "correct = 1\n    for i in range(len(answers)):\n        if guess[i]\
    \ == answers[i]:\n            correct = correct\n        else:\n            correct\
    \ = correct - (1/len(answers))\n    print(\"You got\",correct*100,\"% correct.\"\
    )\n"
  diff: "--- \n+++ \n@@ -18,14 +18,14 @@\n the first list.-For-each+Every+time+an\
    \ item in the second list-that does not match"
  node_from: *id008
  node_to: *id008
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    Given two lists, compares\
    \ each item in the second list to each item in the first list. For each item in\
    \ the second list that does not match the first list, it subtracts from one, one\
    \ divided by the total length of the list. Then it prints the proportion of correct\
    \ responses multiplied by 100 and followed by a percent sign.\n    \"\"\"\n  \
    \  "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    Given two lists, compares\
    \ each item in the second list to each item in the first list. Every time an item\
    \ in the second list does not match the first list, it subtracts from one, one\
    \ divided by the total length of the list. Then it prints the proportion of correct\
    \ responses multiplied by 100 and followed by a percent sign.\n    \"\"\"\n  \
    \  "
  state: fail
  total_attempts: 3
  username: student41
- !Edge
  _edge_tags:
  - a5
  attempt_id: 1
  clues: null
  completion_from: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return count/len(guess)\n"
  completion_to: "if len(guess) != len(answers):\n        return \"ERROR: lists are\
    \ not the same length\"\n    else:\n        correct = 0\n        for i in range(len(guess)):\n\
    \            if guess[i] == answers[i]:\n                correct += 1\n      \
    \  return str(correct/len(guess)*100)+\"%\"\n"
  diff: "--- \n+++ \n@@ -13,4 +13,7 @@\n of matching items+in+percent+notation \"\"\
    \""
  node_from: *id001
  node_to: *id002
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    check both lists for\
    \ equality and return the percent of matching items\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    check both lists for\
    \ equality and return the percent of matching items in percent notation\n    \"\
    \"\"\n    "
  state: neutral
  total_attempts: 4
  username: student51
- !Edge
  _edge_tags:
  - a4
  attempt_id: 2
  clues: null
  completion_from: "if len(guess) != len(answers):\n        return \"ERROR: lists\
    \ are not the same length\"\n    else:\n        correct = 0\n        for i in\
    \ range(len(guess)):\n            if guess[i] == answers[i]:\n               \
    \ correct += 1\n        return str(correct/len(guess)*100)+\"%\"\n"
  completion_to: 'return round(100*len([i for i, j in zip(guess, answers) if i ==
    j])/len(answers))

    '
  diff: "--- \n+++ \n@@ -13,6 +13,12 @@\n of matching items+rounded+tot+he+nearest+whole+number\
    \ in percent notation"
  node_from: *id002
  node_to: *id007
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    check both lists for\
    \ equality and return the percent of matching items in percent notation\n    \"\
    \"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    check both lists for\
    \ equality and return the percent of matching items rounded tot he nearest whole\
    \ number in percent notation\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student51
- !Edge
  _edge_tags:
  - m5
  attempt_id: 3
  clues: null
  completion_from: 'return round(100*len([i for i, j in zip(guess, answers) if i ==
    j])/len(answers))

    '
  completion_to: "count = 0\n    for i in range(len(guess)):\n        if guess[i]\
    \ == answers[i]:\n            count += 1\n    return str(round(count/len(guess)*100))\
    \ + \"%\"\n"
  diff: "--- \n+++ \n@@ -13,13 +13,16 @@\n of matching items+as+a+string rounded-tot-he+to+the\
    \ nearest whole number-in-percent-notation+with+a+% \"\"\""
  node_from: *id007
  node_to: *id004
  prompt_from: "def percentWin(guess,answers):\n    \"\"\"\n    check both lists for\
    \ equality and return the percent of matching items rounded tot he nearest whole\
    \ number in percent notation\n    \"\"\"\n    "
  prompt_to: "def percentWin(guess,answers):\n    \"\"\"\n    check both lists for\
    \ equality and return the percent of matching items as a string rounded to the\
    \ nearest whole number with a %\n    \"\"\"\n    "
  state: success
  total_attempts: 4
  username: student51
nodes:
- *id008
- *id006
- *id009
- !Node
  _node_tags: null
  id: 3
  stderr:
  - ''
  - ''
  - ''
  stdout:
  - '75.0

    '
  - '33.33

    '
  - '100.0

    '
- *id010
- *id005
- !Node
  _node_tags: null
  id: 6
  stderr:
  - ''
  - ''
  - ''
  stdout:
  - '1.0

    '
  - '1.0

    '
  - '1.0

    '
- !Node
  _node_tags: null
  id: 7
  stderr:
  - 'TypeError: unsupported operand type(s) for +=: ''int'' and ''str'''
  - 'TypeError: unsupported operand type(s) for +=: ''int'' and ''str'''
  - 'TypeError: unsupported operand type(s) for +=: ''int'' and ''str'''
  stdout:
  - ''
  - ''
  - ''
- *id004
- *id003
- *id011
- *id001
- *id012
- *id007
- *id002
- *id013
problem: percentWin
problem_clues: {}
student_clues_tracker: {}
student_colors: {}
student_start_node_tags:
  student0:
  - 1
  - 2
  - 3
  - 5
  - 6
  student10:
  - 1
  - 2
  - 3
  - 6
  student17:
  - 2
  - 3
  student18:
  - 2
  - 3
  student21:
  - 1
  - 3
  - 5
  - 6
  student25:
  - 1
  - 2
  - 3
  - 6
  student26:
  - 2
  - 3
  student3:
  - 1
  - 2
  student30:
  - 0
  student4:
  - 2
  - 3
  student41:
  - 1
  - 2
  - 3
  student51:
  - 2
  - 3
  - 6
