!Graph
COLORS:
- '#d83034'
- '#f9e858'
- '#008dff'
- '#4ecb8d'
- '#c701ff'
- '#ffcd8e'
- '#003a7d'
- '#Ff73b6'
- '#ff7f50'
- '#7fff00'
- '#8a2be2'
- '#ffd700'
- '#ff4500'
- '#00ced1'
- '#ff1493'
- '#9400d3'
- '#00bfff'
edges:
- !Edge
  _edge_tags:
  - l2
  attempt_id: 1
  clues: null
  completion_from: "#reverse the words\n    words.reverse()\n    #sort the words\n\
    \    words.sort()\n    return words\n"
  completion_to: "words = words[::-1]\n    words.sort()\n    return words\n"
  diff: "--- \n+++ \n@@ -7,10 +7,9 @@\n of words, reverses-the-words,+them and-puts+orders\
    \ them in alphabetical"
  node_from: &id001 !Node
    _node_tags: null
    id: 5
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[''eat'', ''tree'']

      '
    - '[''ax'', ''by'', ''chaz'']

      '
    - '[''ax'', ''by'', ''chaz'']

      '
  node_to: *id001
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    takes a list of words, reverses\
    \ the words, and puts them in alphabetical order.\n    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    takes a list of words, reverses\
    \ them and orders them in alphabetical order.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student1
- !Edge
  _edge_tags:
  - m2
  attempt_id: 2
  clues: null
  completion_from: "words = words[::-1]\n    words.sort()\n    return words\n"
  completion_to: "new_words = []\n    for word in words:\n        new_words.append(word[::-1])\n\
    \    new_words.sort()\n    return new_words\n"
  diff: "--- \n+++ \n@@ -7,11 +7,15 @@\n of words, reverses-them+each+word+in+the+list,\
    \ and+alphabetically orders-them-in-alphabetical-order.+those+new+words. \"\"\""
  node_from: *id001
  node_to: &id002 !Node
    _node_tags: null
    id: 3
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[''eert'', ''tae'']

      '
    - '[''xa'', ''yb'', ''zahc'']

      '
    - '[''xa'', ''yb'', ''zahc'']

      '
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    takes a list of words, reverses\
    \ them and orders them in alphabetical order.\n    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    takes a list of words, reverses\
    \ each word in the list, and alphabetically orders those new words.\n    \"\"\"\
    \n    "
  state: success
  total_attempts: 3
  username: student1
- !Edge
  _edge_tags:
  - m3
  attempt_id: 1
  clues: null
  completion_from: "# TODO: Write your code here\n    words.reverse()\n    return\
    \ sorted(words)\n"
  completion_to: 'return sorted(words, key=lambda x: x[::-1])


    print(reverseWords(["abc", "cba", "bca", "cab"]))

    '
  diff: "--- \n+++ \n@@ -23,5 +23,9 @@\n strings in alphabetical-order.+order+in+their+reversed+forms.\
    \ \"\"\""
  node_from: *id001
  node_to: &id005 !Node
    _node_tags: null
    id: 4
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[''tree'', ''eat'']

      '
    - '[''ax'', ''by'', ''chaz'']

      '
    - '[''ax'', ''by'', ''chaz'']

      '
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    In this function your goal\
    \ is given a list of strings to reverse the strings and order the reversed strings\
    \ in alphabetical order.\n    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    In this function your goal\
    \ is given a list of strings to reverse the strings and order the reversed strings\
    \ in alphabetical order in their reversed forms.\n    \"\"\"\n    "
  state: fail
  total_attempts: 2
  username: student39
- !Edge
  _edge_tags:
  - a4
  attempt_id: 1
  clues: null
  completion_from: "words.sort()\n    for i in range(len(words)):\n        words[i]\
    \ = words[i][::-1]\n    return words\n\nprint(reverseWords([\"cat\", \"dog\",\
    \ \"bird\", \"fish\"]))\n"
  completion_to: "for i in range(len(words)):\n        words[i] = words[i][::-1]\n\
    \    words.sort()\n    return words\n"
  diff: "--- \n+++ \n@@ -8,18 +8,7 @@\n a list of-strings,-it-will-sort-the strings-alphabetically-by-the-first-character.-Then\
    \ it will make@@ -30,4 +19,18 @@\n the strings reverse.+Then+it+will+sort+the+list+alphabetically+by+the+last+character+in+each+string\
    \ \"\"\""
  node_from: &id010 !Node
    _node_tags: null
    id: 0
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[''tae'', ''eert'']

      '
    - '[''xa'', ''yb'', ''zahc'']

      '
    - '[''xa'', ''yb'', ''zahc'']

      '
  node_to: *id002
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    The function takes in a\
    \ list of strings, it will sort the strings alphabetically by the first character.\
    \ Then it will make all the character within the strings reverse. \n    \"\"\"\
    \n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    The function takes in a list\
    \ of strings it will make all the character within the strings reverse. Then it\
    \ will sort the list alphabetically by the last character in each string\n   \
    \ \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student46
- !Edge
  _edge_tags:
  - a3
  - a4
  attempt_id: 1
  clues: null
  completion_from: 'return [word[::-1] for word in words]

    '
  completion_to: 'return sorted(list(map(lambda x: x[::-1], words)))


    print(reverseWords(["abc", "def", "ghi"]))

    '
  diff: "--- \n+++ \n@@ -22,4 +22,21 @@\n in a list.+The+order+of+the+strings+in+the+return+statement+should+be+in+alphabetical+order+from+the+input.\
    \ \"\"\""
  node_from: &id003 !Node
    _node_tags: null
    id: 1
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[''tae'', ''eert'']

      '
    - '[''xa'', ''yb'', ''zahc'']

      '
    - '[''yb'', ''zahc'', ''xa'']

      '
  node_to: *id002
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    Write a function that gets\
    \ strings from a list. Reverse all the strings and returns the reversed string\
    \ in a list.\n    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    Write a function that gets\
    \ strings from a list. Reverse all the strings and returns the reversed string\
    \ in a list. The order of the strings in the return statement should be in alphabetical\
    \ order from the input.\n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student55
- !Edge
  _edge_tags:
  - m2
  attempt_id: 1
  clues: null
  completion_from: 'return [word[::-1] for word in words]

    '
  completion_to: 'return [word[::-1] for word in words]

    '
  diff: "--- \n+++ \n@@ -1,12 +1,15 @@\n def reverseWords(words): \"\"\"-Return+take\
    \ each-string+item in the list+and+return+it in reverse \"\"\""
  node_from: *id003
  node_to: *id003
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    Return each string in the\
    \ list in reverse\n    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    take each item in the list\
    \ and return it in reverse\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student58
- !Edge
  _edge_tags:
  - m5
  attempt_id: 2
  clues: null
  completion_from: 'return [word[::-1] for word in words]

    '
  completion_to: 'return [word[::-1] for word in words]

    '
  diff: "--- \n+++ \n@@ -1,15 +1,13 @@\n def reverseWords(words): \"\"\"-take+Reverse\
    \ each-item+string in the+list.+return+the list-and-return-it-in-reverse \"\"\""
  node_from: *id003
  node_to: *id003
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    take each item in the list\
    \ and return it in reverse\n    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    Reverse each string in the\
    \ list. return the list\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student58
- !Edge
  _edge_tags:
  - 0
  attempt_id: 3
  clues: null
  completion_from: 'return [word[::-1] for word in words]

    '
  completion_to: 'return [word[::-1] for word in words]

    '
  diff: "--- \n+++ \n@@ -2,6 +2,9 @@\n reverseWords(words): \"\"\" Reverse+the+characters+in\
    \ each string in"
  node_from: *id003
  node_to: *id003
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    Reverse each string in the\
    \ list. return the list\n    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    Reverse the characters in\
    \ each string in the list. return the list\n    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student58
- !Edge
  _edge_tags:
  - a3
  attempt_id: 1
  clues: null
  completion_from: 'return [word[::-1] for word in words]

    '
  completion_to: 'return [word[::-1] for word in words[::-1]]

    '
  diff: "--- \n+++ \n@@ -19,5 +19,28 @@\n of the original-string+string.+The+order+of+the+strings+in+the+outputted+list+is+also+in+the+reverse+order+that+the+strings+were+in+the+inputted+list\
    \ \"\"\""
  node_from: *id003
  node_to: &id004 !Node
    _node_tags: null
    id: 6
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[''eert'', ''tae'']

      '
    - '[''zahc'', ''yb'', ''xa'']

      '
    - '[''xa'', ''zahc'', ''yb'']

      '
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    Input: list of strings.\
    \ Output: list of strings, whose characters are in the reverse order of the original\
    \ string\n    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    Input: list of strings. Output:\
    \ list of strings, whose characters are in the reverse order of the original string.\
    \ The order of the strings in the outputted list is also in the reverse order\
    \ that the strings were in the inputted list\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student6
- !Edge
  _edge_tags:
  - m3
  attempt_id: 2
  clues: null
  completion_from: 'return [word[::-1] for word in words[::-1]]

    '
  completion_to: 'return sorted(words, key=lambda word: word[::-1])

    '
  diff: "--- \n+++ \n@@ -30,17 +30,6 @@\n outputted list is-also in-the-reverse-order-that-the-strings-were-in-the-inputted-list+alphabetical\
    \ \"\"\""
  node_from: *id004
  node_to: *id005
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    Input: list of strings.\
    \ Output: list of strings, whose characters are in the reverse order of the original\
    \ string. The order of the strings in the outputted list is also in the reverse\
    \ order that the strings were in the inputted list\n    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    Input: list of strings. Output:\
    \ list of strings, whose characters are in the reverse order of the original string.\
    \ The order of the strings in the outputted list is in alphabetical\n    \"\"\"\
    \n    "
  state: neutral
  total_attempts: 4
  username: student6
- !Edge
  _edge_tags:
  - a4
  attempt_id: 3
  clues: null
  completion_from: 'return sorted(words, key=lambda word: word[::-1])

    '
  completion_to: 'return sorted([word[::-1] for word in words])


    print(reverseWords(["abc", "cba", "bca"]))

    '
  diff: "--- \n+++ \n@@ -20,16 +20,16 @@\n the original string.-The-order-of+In the-strings+output,+arrange+each+item\
    \ in the-outputted list-is in alphabetical+order \"\"\""
  node_from: *id005
  node_to: *id002
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    Input: list of strings.\
    \ Output: list of strings, whose characters are in the reverse order of the original\
    \ string. The order of the strings in the outputted list is in alphabetical\n\
    \    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    Input: list of strings. Output:\
    \ list of strings, whose characters are in the reverse order of the original string.\
    \ In the output, arrange each item in the list in alphabetical order \n    \"\"\
    \"\n    "
  state: success
  total_attempts: 4
  username: student6
- !Edge
  _edge_tags:
  - a3
  - a4
  - a5
  attempt_id: 1
  clues: null
  completion_from: "for i in range(len(words)):\n        words[i] = words[i][::-1]\n\
    \    return words\n"
  completion_to: "for i in range(len(words)):\n        words[i] = words[i][::-1]\n\
    \    words.sort()\n    return words\n\nprint(reverseWords([\"abc\", \"cba\", \"\
    bca\", \"cab\"]))\n"
  diff: "--- \n+++ \n@@ -10,5 +10,12 @@\n in reverse alphabetical+order.+Returns+the+overall+list+in+alphabetical\
    \ order \"\"\""
  node_from: *id003
  node_to: *id002
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    Sorts each item in the list\
    \ in reverse alphabetical order\n    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    Sorts each item in the list\
    \ in reverse alphabetical order. Returns the overall list in alphabetical order\n\
    \    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student7
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: null
  completion_from: "# reverse each word\n    for i in range(len(words)):\n       \
    \ words[i] = words[i][::-1]\n    # sort the words\n    words.sort()\n    return\
    \ words\n"
  completion_to: "for word in words:\n        word = word[::-1]\n    words.sort()\n\
    \    return words\n"
  diff: ''
  node_from: &id008 !Node
    _node_tags: null
    id: 3
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[''eert'', ''tae'']

      '
    - '[''xa'', ''yb'', ''zahc'']

      '
    - '[''xa'', ''yb'', ''zahc'']

      '
  node_to: &id006 !Node
    _node_tags: null
    id: 5
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[''eat'', ''tree'']

      '
    - '[''ax'', ''by'', ''chaz'']

      '
    - '[''ax'', ''by'', ''chaz'']

      '
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    put each character in each\
    \ word in reverse order. then put each word in alphabetical order\n    \"\"\"\n\
    \    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    put each character in each\
    \ word in reverse order. then put each word in alphabetical order\n    \"\"\"\n\
    \    "
  state: neutral
  total_attempts: 4
  username: student14
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues: null
  completion_from: "for word in words:\n        word = word[::-1]\n    words.sort()\n\
    \    return words\n"
  completion_to: "words = words.split(\" \")\n    for i in range(len(words)):\n  \
    \      words[i] = words[i][::-1]\n    words.sort()\n    return \" \".join(words)\n"
  diff: ''
  node_from: *id006
  node_to: &id007 !Node
    _node_tags: null
    id: 2
    stderr:
    - 'AttributeError: ''list'' object has no attribute ''split'''
    - 'AttributeError: ''list'' object has no attribute ''split'''
    - 'AttributeError: ''list'' object has no attribute ''split'''
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    put each character in each\
    \ word in reverse order. then put each word in alphabetical order\n    \"\"\"\n\
    \    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    put each character in each\
    \ word in reverse order. then put each word in alphabetical order\n    \"\"\"\n\
    \    "
  state: neutral
  total_attempts: 4
  username: student14
- !Edge
  _edge_tags:
  - 0
  attempt_id: 3
  clues: null
  completion_from: "words = words.split(\" \")\n    for i in range(len(words)):\n\
    \        words[i] = words[i][::-1]\n    words.sort()\n    return \" \".join(words)\n"
  completion_to: "# reverse each word\n    for i in range(len(words)):\n        words[i]\
    \ = words[i][::-1]\n    # sort the words\n    words.sort()\n    return words\n"
  diff: ''
  node_from: *id007
  node_to: *id008
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    put each character in each\
    \ word in reverse order. then put each word in alphabetical order\n    \"\"\"\n\
    \    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    put each character in each\
    \ word in reverse order. then put each word in alphabetical order\n    \"\"\"\n\
    \    "
  state: success
  total_attempts: 4
  username: student14
- !Edge
  _edge_tags:
  - d4
  attempt_id: 1
  clues: null
  completion_from: "for i in range(len(words)):\n        words[i] = words[i][::-1]\n\
    \    words.sort()\n    return words\n"
  completion_to: "words = words.split()\n    words.reverse()\n    return \" \".join(words)\n"
  diff: "--- \n+++ \n@@ -5,19 +5,13 @@\n function reverses the-letters-in+positions+of\
    \ each-string.-It-then-places+string+and+reverses the-strings-in-the-list-in-alphabetical-order.+string+itself.\
    \ \"\"\""
  node_from: *id008
  node_to: *id007
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    The function reverses the\
    \ letters in each string. It then places the strings in the list in alphabetical\
    \ order.\n    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    The function reverses the\
    \ positions of each string and reverses the string itself.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student9
- !Edge
  _edge_tags:
  - d3
  attempt_id: 2
  clues: null
  completion_from: "words = words.split()\n    words.reverse()\n    return \" \".join(words)\n"
  completion_to: 'return [word[::-1] for word in words]

    '
  diff: "--- \n+++ \n@@ -5,13 +5,8 @@\n function reverses the-positions-of+letters+in\
    \ each-string-and-reverses-the-string-itself.+string. \"\"\""
  node_from: *id007
  node_to: &id009 !Node
    _node_tags: null
    id: 1
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[''tae'', ''eert'']

      '
    - '[''xa'', ''yb'', ''zahc'']

      '
    - '[''yb'', ''zahc'', ''xa'']

      '
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    The function reverses the\
    \ positions of each string and reverses the string itself.\n    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    The function reverses the\
    \ letters in each string.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student9
- !Edge
  _edge_tags:
  - a3
  - a4
  attempt_id: 3
  clues: null
  completion_from: 'return [word[::-1] for word in words]

    '
  completion_to: "words = words.split()\n    for i in range(len(words)):\n       \
    \ words[i] = words[i][::-1]\n    words.sort()\n    return words\n"
  diff: "--- \n+++ \n@@ -9,4 +9,12 @@\n in each string.+It+then+places+the+strings+in+alphabetical+order.\
    \ \"\"\""
  node_from: *id009
  node_to: *id007
  prompt_from: "def reverseWords(words):\n    \"\"\"\n    The function reverses the\
    \ letters in each string.\n    \"\"\"\n    "
  prompt_to: "def reverseWords(words):\n    \"\"\"\n    The function reverses the\
    \ letters in each string. It then places the strings in alphabetical order.\n\
    \    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student9
nodes:
- *id010
- *id003
- !Node
  _node_tags: null
  id: 2
  stderr:
  - 'AttributeError: ''list'' object has no attribute ''split'''
  - 'AttributeError: ''list'' object has no attribute ''split'''
  - 'AttributeError: ''list'' object has no attribute ''split'''
  stdout:
  - ''
  - ''
  - ''
- *id002
- *id005
- *id001
- *id004
problem: reverseWords
problem_clues: {}
student_clues_tracker: {}
student_colors: {}
student_start_node_tags:
  student1:
  - 1
  - 2
  - 3
  - 4
  student14:
  - 2
  - 3
  - 4
  student39:
  - 1
  - 2
  - 3
  - 4
  student46:
  - 1
  - 2
  - 3
  student55:
  - 1
  - 2
  - 5
  student58:
  - 2
  - 5
  student6:
  - 1
  - 2
  - 5
  student7:
  - 2
  student9:
  - 2
  - 3
  - 4
