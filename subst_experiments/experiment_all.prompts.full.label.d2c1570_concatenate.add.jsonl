{"__index_level_0__": 235, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student12", "submitted_text": "For each element in the list lst, if the element is a string, append the number num to the end of the string. If the element is an integer, add num to it. If it is any other type, do not do anything to it.\n", "prompt": "def add_int(lst, num):\n    \"\"\"\n    For each element in the list lst, if the element is a string, add the number num to the end of the string. If the element is an integer, add num to it. If it is any other type, do not do anything to it.\n\n    \"\"\"\n    ", "subset": "first_success", "original": "append"}
{"__index_level_0__": 1461, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student23", "submitted_text": "This function inputs two lists. The letter at the end of the first dictionary adds on the lowest number of the second dictionary. This keeps going and forms a new list with all the combined letters and numbers. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs two lists. The letter at the end of the first dictionary adds on the lowest number of the second dictionary. This keeps going and forms a new list with all the added letters and numbers. \n    \"\"\"\n    ", "subset": "first_failure", "original": "combined"}
{"__index_level_0__": 1583, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student0", "submitted_text": "takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of num times 100 divided by the length of the first list and concatenate a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of num times 100 divided by the length of the first list and add a percent sign.\n    \"\"\"\n    ", "subset": "first_failure", "original": "concatenate"}
{"__index_level_0__": 1747, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student73", "submitted_text": "the input generates a string where the number corresponds to how many items are in the string. each item in the string also starts with the letter 'h' and the letter 'a' is added to the letter 'h' based on the number of the input. However, only the first item in the string has the number of 'a' equal to the input, the following 'a' are added to 'h' by subtracting 1 from the input.", "prompt": "def laugh(size):\n    \"\"\"\n    the input generates a string where the number corresponds to how many items are in the string. each item in the string also starts with the letter 'h' and the letter 'a' is added to the letter 'h' based on the number of the input. However, only the first item in the string has the number of 'a' equal to the input, the following 'a' are added to 'h' by subtracting 1 from the input.\n    \"\"\"\n    ", "subset": "first_failure", "original": "added"}
{"__index_level_0__": 255, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student77", "submitted_text": "Given a list of numbers, lists, and strings as well as a number, append the number to the strings in the list, add the number to the numbers in the list, and do nothing to the lists in the list.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Given a list of numbers, lists, and strings as well as a number, add the number to the strings in the list, add the number to the numbers in the list, and do nothing to the lists in the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "append"}
{"__index_level_0__": 560, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student77", "submitted_text": "Given a list of words and a string that specifies an ending, remove the ending from the words inside the list, and instead append 's' to the new words with their original endings having been removed.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Given a list of words and a string that specifies an ending, remove the ending from the words inside the list, and instead add 's' to the new words with their original endings having been removed.\n    \"\"\"\n    ", "subset": "first_success", "original": "append"}
{"__index_level_0__": 829, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student78", "submitted_text": "given a list of strings, concatenate the strings into one long string. read through the long string and count the number of '&' found. output that number.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    given a list of strings, add the strings into one long string. read through the long string and count the number of '&' found. output that number.\n    \"\"\"\n    ", "subset": "first_success", "original": "concatenate"}
{"__index_level_0__": 985, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student77", "submitted_text": "Given two sets of lists, combine the respective places of each list into one larger list, then combine those combined lists into another set. For example, the first list of the first set should be combined with the first of the second, etc.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Given two sets of lists, add the respective places of each list into one larger list, then add those combined lists into another set. For example, the first list of the first set should be added with the first of the second, etc.\n    \"\"\"\n    ", "subset": "first_success", "original": "combined"}
{"__index_level_0__": 1371, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student79", "submitted_text": "for the function above, you use a dictionary and a sentence. for each word in the sentence you get the corresponding value from the dictionary and concatenate. if the word is not in the dictionary you concatenate the word UNK.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    for the function above, you use a dictionary and a sentence. for each word in the sentence you get the corresponding value from the dictionary and add. if the word is not in the dictionary you add the word UNK.\n    \"\"\"\n    ", "subset": "first_success", "original": "concatenate"}
{"__index_level_0__": 1539, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student79", "submitted_text": "there are two lists, both with strings. you should use a nested for loop to concatenate the two strings and then add them to a list in decreasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). \"J\" is smaller than \"Q\", which is smaller than \"A\". suit takes precedence over rank. when you concatenate the letter should be before the number. \n", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    there are two lists, both with strings. you should use a nested for loop to add the two strings and then add them to a list in decreasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). \"J\" is smaller than \"Q\", which is smaller than \"A\". suit takes precedence over rank. when you add the letter should be before the number. \n\n    \"\"\"\n    ", "subset": "last_failure", "original": "concatenate"}
{"__index_level_0__": 122, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.", "prompt": "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.\n    \"\"\"\n    ", "subset": "last_success", "original": "add"}
{"__index_level_0__": 198, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student41", "submitted_text": "Given a list, returns a list with the letter corresponding to each number in the inputted list. If there is a negative one, the corresponding letters should be printed as a separate item in the list. Otherwise, the corresponding letters should be combined as one string in the list.", "prompt": "def convert(lst):\n    \"\"\"\n    Given a list, returns a list with the letter corresponding to each number in the inputted list. If there is a negative one, the corresponding letters should be printed as a separate item in the list. Otherwise, the corresponding letters should be added as one string in the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "combined"}
{"__index_level_0__": 201, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student41", "submitted_text": "Given a list, returns a list with letters from the alphabet that correspond to the index in the inputted list, starting from zero. Letters in the returned list should be capitalized. Until a negative one is in the list, letters should be combined as one string. When a negative one is reached this combination of letters can be inserted into the list. A negative one indicates a new item in the list.", "prompt": "def convert(lst):\n    \"\"\"\n    Given a list, returns a list with letters from the alphabet that correspond to the index in the inputted list, starting from zero. Letters in the returned list should be capitalized. Until a negative one is in the list, letters should be added as one string. When a negative one is reached this combination of letters can be inserted into the list. A negative one indicates a new item in the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "combined"}
{"__index_level_0__": 203, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student51", "submitted_text": "Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. If -1, start the next character with a new string.", "prompt": "def convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. If -1, start the next character with a new string.\n    \"\"\"\n    ", "subset": "first_failure", "original": "add"}
{"__index_level_0__": 205, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student51", "submitted_text": "Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. When -1 appears make a new string and add the following characters to it. return a list of strings.", "prompt": "def convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. When -1 appears make a new string and add the following characters to it. return a list of strings.\n    \"\"\"\n    ", "subset": "last_success", "original": "add"}
{"__index_level_0__": 237, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student19", "submitted_text": "Takes an input list and an input integer. For all strings in the list, the input integer is concatenated after the end of the string. For all numbers in the list, the input integer is added to that number.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Takes an input list and an input integer. For all strings in the list, the input integer is added after the end of the string. For all numbers in the list, the input integer is added to that number.\n    \"\"\"\n    ", "subset": "last_success", "original": "concatenated"}
{"__index_level_0__": 238, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student20", "submitted_text": "Append the input num to the end of any strings, and add the input num to any numbers in a list. If there is a list within a list, ignore it.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Add the input num to the end of any strings, and add the input num to any numbers in a list. If there is a list within a list, ignore it.\n    \"\"\"\n    ", "subset": "first_success", "original": "Append"}
{"__index_level_0__": 239, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student36", "submitted_text": "Go through the list, if the input is a string concatenate the number outside of the list, if the input is a number add the number outside of the list", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Go through the list, if the input is a string add the number outside of the list, if the input is a number add the number outside of the list\n    \"\"\"\n    ", "subset": "first_failure", "original": "concatenate"}
{"__index_level_0__": 240, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student36", "submitted_text": "Go through the list, if the input is a string concatenate the number outside of the list to the string, if the input is a number add the number outside of the list to the number", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Go through the list, if the input is a string add the number outside of the list to the string, if the input is a number add the number outside of the list to the number\n    \"\"\"\n    ", "subset": "last_success", "original": "concatenate"}
{"__index_level_0__": 241, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student38", "submitted_text": "If position in lst is string, append num to string. If position in lst is integer, add num to integer. Return the new lst. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    If position in lst is string, add num to string. If position in lst is integer, add num to integer. Return the new lst. \n    \"\"\"\n    ", "subset": "first_failure", "original": "append"}
{"__index_level_0__": 244, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student38", "submitted_text": "If position in lst is string, append num to string. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Return the new lst. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    If position in lst is string, add num to string. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Return the new lst. \n    \"\"\"\n    ", "subset": "last_failure", "original": "append"}
{"__index_level_0__": 245, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student42", "submitted_text": "given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally", "prompt": "def add_int(lst, num):\n    \"\"\"\n    given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should add with a string of the number inputted. if the initial list element is a number, they should add normally\n    \"\"\"\n    ", "subset": "first_failure", "original": "concatenate"}
{"__index_level_0__": 246, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student42", "submitted_text": "given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally. if an element of the initial list is neither, leave it alone and add it to the outputted list regardless", "prompt": "def add_int(lst, num):\n    \"\"\"\n    given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should add with a string of the number inputted. if the initial list element is a number, they should add normally. if an element of the initial list is neither, leave it alone and add it to the outputted list regardless\n    \"\"\"\n    ", "subset": "last_success", "original": "concatenate"}
{"__index_level_0__": 247, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student43", "submitted_text": "Create a list A. If an element in lst is a string, then append num to the end of the element, add it to A. If an element in lst is a number, then add num to then end of the element, add it to A. If an element in lst is a list, then return the element, add it to A.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Create a list A. If an element in lst is a string, then add num to the end of the element, add it to A. If an element in lst is a number, then add num to then end of the element, add it to A. If an element in lst is a list, then return the element, add it to A.\n    \"\"\"\n    ", "subset": "first_success", "original": "append"}
{"__index_level_0__": 252, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student54", "submitted_text": "Return a new list with the integer added at each index of the old list. If it is a string, append the integer on to the end of the string to create a new string. If it is an integer, concatenate.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Return a new list with the integer added at each index of the old list. If it is a string, add the integer on to the end of the string to create a new string. If it is an integer, add.\n    \"\"\"\n    ", "subset": "last_success", "original": "concatenate"}
{"__index_level_0__": 253, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student57", "submitted_text": "given a list and an integer, within each element in the list, if it is a string, concatenate integer to end of the string, if element is an integer, add the given integer, if element is a list, do nothing", "prompt": "def add_int(lst, num):\n    \"\"\"\n    given a list and an integer, within each element in the list, if it is a string, add integer to end of the string, if element is an integer, add the given integer, if element is a list, do nothing\n    \"\"\"\n    ", "subset": "first_success", "original": "concatenate"}
{"__index_level_0__": 254, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student77", "submitted_text": "Given a list of numbers and strings as well as a number, append the number to the strings in the list, and add the number to the numbers in the list.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Given a list of numbers and strings as well as a number, add the number to the strings in the list, and add the number to the numbers in the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "append"}
{"__index_level_0__": 544, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student20", "submitted_text": "For each word in the list, remove the last instance of ending that can be found in the word and add a s to the word", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    For each word in the list, remove the last instance of ending that can be found in the word and add a s to the word\n    \"\"\"\n    ", "subset": "last_success", "original": "add"}
{"__index_level_0__": 551, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student38", "submitted_text": "Take out ending from each string in words and add 's'", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Take out ending from each string in words and add 's'\n    \"\"\"\n    ", "subset": "last_success", "original": "add"}
{"__index_level_0__": 559, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student57", "submitted_text": "when given a list of strings and a string, delete the end of each string in list by the given string and then add character \"s\" to each string in list", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    when given a list of strings and a string, delete the end of each string in list by the given string and then add character \"s\" to each string in list\n    \"\"\"\n    ", "subset": "first_success", "original": "add"}
{"__index_level_0__": 579, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student60", "submitted_text": "The function takes in an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number, casts it back into an int and returns it. Otherwise, the function just returns score + 1. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function takes in an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number, casts it back into an int and returns it. Otherwise, the function just returns score + 1. \n    \"\"\"\n    ", "subset": "last_success", "original": "adds"}
{"__index_level_0__": 906, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student10", "submitted_text": "User inputs a string s and integer i. Function would flip the first i letters of string s backwards, and then concatenate the rest of the string to the end of the backwards letters.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    User inputs a string s and integer i. Function would flip the first i letters of string s backwards, and then add the rest of the string to the end of the backwards letters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "concatenate"}
{"__index_level_0__": 907, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student10", "submitted_text": "User inputs a string s and integer i. Function would write the first i letters of string s backwards and save that as string A. All the letters which were not flipped backwards would be saved as string B. Function would add string A and B, and then return that as the output", "prompt": "def changeSection(s,i):\n    \"\"\"\n    User inputs a string s and integer i. Function would write the first i letters of string s backwards and save that as string A. All the letters which were not flipped backwards would be saved as string B. Function would add string A and B, and then return that as the output\n    \"\"\"\n    ", "subset": "last_success", "original": "add"}
{"__index_level_0__": 923, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student18", "submitted_text": "Go through each letter in the s from index 0 to i-1. Append the letter to the index of i-1-index. Then, put the rest of the letters in the s from index i to the ((length of the s)-1) at the end. ", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Go through each letter in the s from index 0 to i-1. Add the letter to the index of i-1-index. Then, put the rest of the letters in the s from index i to the ((length of the s)-1) at the end. \n    \"\"\"\n    ", "subset": "last_failure", "original": "Append"}
{"__index_level_0__": 924, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student21", "submitted_text": "given a string and a number within string length, produce a string that reverses the order of the characters up to the given number index concatenated with the rest of the original string", "prompt": "def changeSection(s,i):\n    \"\"\"\n    given a string and a number within string length, produce a string that reverses the order of the characters up to the given number index added with the rest of the original string\n    \"\"\"\n    ", "subset": "first_failure", "original": "concatenated"}
{"__index_level_0__": 929, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student21", "submitted_text": "create a new string up to the given index and after. reverse the new String up to this index and add the string after the index.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    create a new string up to the given index and after. reverse the new String up to this index and add the string after the index.\n    \"\"\"\n    ", "subset": "last_failure", "original": "add"}
{"__index_level_0__": 935, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student30", "submitted_text": "Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them before the remaining characters.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and adds them before the remaining characters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "inserts"}
{"__index_level_0__": 939, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student30", "submitted_text": "Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them at the front of the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and adds them at the front of the string.\n    \"\"\"\n    ", "subset": "last_failure", "original": "inserts"}
{"__index_level_0__": 965, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student19", "submitted_text": "Takes an input of two lists, l1 and l2, each of which also contains lists. It combines the first list in l1 with the first one in l2, then continues for all items in l1 and l2. It outputs this final list which is a combination of l1 and l2.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Takes an input of two lists, l1 and l2, each of which also contains lists. It adds the first list in l1 with the first one in l2, then continues for all items in l1 and l2. It outputs this final list which is a combination of l1 and l2.\n    \"\"\"\n    ", "subset": "last_success", "original": "combines"}
{"__index_level_0__": 1030, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student51", "submitted_text": "check each character in the string and add it to a new string. If the character is ^ then add _ instead. Return the new string.", "prompt": "def reduce(val):\n    \"\"\"\n    check each character in the string and add it to a new string. If the character is ^ then add _ instead. Return the new string.\n    \"\"\"\n    ", "subset": "first_success", "original": "add"}
{"__index_level_0__": 1131, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student45", "submitted_text": "Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and insert sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and add sep.\n    \"\"\"\n    ", "subset": "first_failure", "original": "insert"}
{"__index_level_0__": 1360, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student64", "submitted_text": "For each word in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    For each word in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, add 'UNK' to new string.\n    \"\"\"\n    ", "subset": "first_failure", "original": "append"}
{"__index_level_0__": 1362, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student64", "submitted_text": "For every word in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    For every word in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, add 'UNK' to new string.\n    \"\"\"\n    ", "subset": "last_failure", "original": "append"}
{"__index_level_0__": 1467, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student23", "submitted_text": "This function inputs two lists. The letter that comes first within the alphabet in the first list adds on the lowest number of the second list and then the letters in the alphabet. This keeps going and forms a new list with all the combined letters and numbers. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs two lists. The letter that comes first within the alphabet in the first list adds on the lowest number of the second list and then the letters in the alphabet. This keeps going and forms a new list with all the added letters and numbers. \n    \"\"\"\n    ", "subset": "last_failure", "original": "combined"}
{"__index_level_0__": 1468, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student33", "submitted_text": "The function takes a series of input strings and another series of input strings, and then splices each string from the first series with each string from the second series", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes a series of input strings and another series of input strings, and then adds each string from the first series with each string from the second series\n    \"\"\"\n    ", "subset": "first_failure", "original": "splices"}
{"__index_level_0__": 1469, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student33", "submitted_text": "The function takes a series of input strings \"suits\" and another series of input strings \"vals\". It sorts each series first into alphabetical order followed by in order of increasing numerical value. Then it splices each string from the first series with each string from the second series", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes a series of input strings \"suits\" and another series of input strings \"vals\". It sorts each series first into alphabetical order followed by in order of increasing numerical value. Then it adds each string from the first series with each string from the second series\n    \"\"\"\n    ", "subset": "last_success", "original": "splices"}
{"__index_level_0__": 1470, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student35", "submitted_text": "From the first list of parameters, the function takes the last element first and goes backwards towards the first element. It attaches these elements with the inputs given in the second list. A new list is made which is appended continuously with these new attachments. This goes on until the elements of the first list are exhausted.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    From the first list of parameters, the function takes the last element first and goes backwards towards the first element. It adds these elements with the inputs given in the second list. A new list is made which is appended continuously with these new attachments. This goes on until the element of the first list are exhausted.\n    \"\"\"\n    ", "subset": "first_failure", "original": "attaches"}
{"__index_level_0__": 1473, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student35", "submitted_text": "From the first list of parameters, the function takes the last element first and goes backwards towards the first element. It attaches these elements with the inputs given in the second list. A new list is made which is appended continuously with these new attachments. No function is called for this but rather the two stings which are to be attached are concatenated. During concatenation, the element of the first list is put first and the element of the second list is put second. The suit comes first and then the val for every concatenation. And the suits list starts from backwards. This goes on until the elements of the first list are exhausted.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    From the first list of parameters, the function takes the last element first and goes backwards towards the first element. It adds these elements with the inputs given in the second list. A new list is made which is appended continuously with these new attachments. No function is called for this but rather the two stings which are to be attached are added. During concatenation, the element of the first list is put first and the element of the second list is put second. The suit comes first and then the val for every concatenation. And the suits list starts from backwards. This goes on until the elements of the first list are exhausted.\n    \"\"\"\n    ", "subset": "last_failure", "original": "concatenated"}
{"__index_level_0__": 1474, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student40", "submitted_text": "when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be added with each string in the other list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "combined"}
{"__index_level_0__": 1478, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student40", "submitted_text": "when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second. the new strings in the new list will appear in alphabetical order. if multiple strings have the same first letter, then they will appear in numerical order.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be added with each string in the other list, with letters appearing first and numbers appearing second. the new strings in the new list will appear in alphabetical order. if multiple strings have the same first letter, then they will appear in numerical order.\n    \"\"\"\n    ", "subset": "last_success", "original": "combined"}
{"__index_level_0__": 1479, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student44", "submitted_text": "For every value in the first array, starting from the last one, \nconcatenate with each value in the second array. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    For every value in the first array, starting from the last one, \nadd with each value in the second array. \n    \"\"\"\n    ", "subset": "first_failure", "original": "concatenate"}
{"__index_level_0__": 1482, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student44", "submitted_text": "Starting with the first value in the second array,\nconcatenate it with each value of the first array starting with its last one. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    Starting with the first value in the second array,\nadd it with each value of the first array starting with its last one. \n    \"\"\"\n    ", "subset": "last_failure", "original": "concatenate"}
{"__index_level_0__": 1483, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student50", "submitted_text": "There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of strings. Add the first element with the first list with the first element in the second list and add that to a new list, which will be returned. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order.\n    \"\"\"\n    ", "subset": "first_failure", "original": "adding"}
{"__index_level_0__": 1487, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student50", "submitted_text": "There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Reorder the new list to make it in alphabetical and numerical order, then return", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of strings. Add the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, add them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Reorder the new list to make it in alphabetical and numerical order, then return\n    \"\"\"\n    ", "subset": "last_success", "original": "adding"}
{"__index_level_0__": 1501, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student64", "submitted_text": "For each character in suits, create a list that appends each of the suits with each of the values in vals.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that adds each of the suits with each of the values in vals.\n    \"\"\"\n    ", "subset": "first_failure", "original": "appends"}
{"__index_level_0__": 1508, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student64", "submitted_text": "For each character in suits, create a list that appends each of the suits with each of the values in vals. Sort each card in deck by alphabetical order of suit character.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a list that adds each of the suits with each of the values in vals. Sort each card in deck by alphabetical order of suit character.\n    \"\"\"\n    ", "subset": "last_success", "original": "appends"}
{"__index_level_0__": 1512, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student71", "submitted_text": "Sorts out each list by numerical or alphabetical order then combines each element of list A to list B, iterating through each list by numerical and alphabetical order. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    Sorts out each list by numerical or alphabetical order then adds each element of list A to list B, iterating through each list by numerical and alphabetical order. \n    \"\"\"\n    ", "subset": "first_failure", "original": "combines"}
{"__index_level_0__": 1535, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student76", "submitted_text": "Going from last to first in the first set of brackets adds each of the inputs in the second brackets to the end of the input from the first bracket one time and does so for all inputs in the first brackets", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    Going from last to first in the first set of brackets adds each of the inputs in the second brackets to the end of the input from the first bracket one time and does so for all inputs in the first brackets\n    \"\"\"\n    ", "subset": "first_failure", "original": "adds"}
{"__index_level_0__": 1536, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student79", "submitted_text": "there are two lists, both with strings. you should use a nested for loop to concatenate the two strings and then add them to a list in increasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). suit takes precedence over rank.\n", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    there are two lists, both with strings. you should use a nested for loop to add the two strings and then add them to a list in increasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). suit takes precedence over rank.\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "concatenate"}
{"__index_level_0__": 1584, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student0", "submitted_text": "takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of integer of num times 100 divided by the length of the first list and concatenate a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of integer of num times 100 divided by the length of the first list and add a percent sign.\n    \"\"\"\n    ", "subset": "last_success", "original": "concatenate"}
{"__index_level_0__": 1587, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student3", "submitted_text": "create a function with 2 inputs: guess (list) and answers(list). find the number of the element match in guess and answers then divide with the number of element of answers. then times the results 100 times and round up the to integer. add percentage sign after the results", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    create a function with 2 inputs: guess (list) and answers(list). find the number of the element match in guess and answers then divide with the number of element of answers. then times the results 100 times and round up the to integer. add percentage sign after the results\n    \"\"\"\n    ", "subset": "last_success", "original": "add"}
{"__index_level_0__": 1605, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student18", "submitted_text": "Compare the string in guess and answers by each index and calculate the percentage of the match between guess and answers. Then, multiply 100 to the value while rounding up to the nearest integer and add '%' at the end. ", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Compare the string in guess and answers by each index and calculate the percentage of the match between guess and answers. Then, multiply 100 to the value while rounding up to the nearest integer and add '%' at the end. \n    \"\"\"\n    ", "subset": "last_success", "original": "add"}
{"__index_level_0__": 1612, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student25", "submitted_text": "This function compares how similar 2 lists are and returns the percent of the guess list that matches the answer list. The percentage is multiplied by 100, rounded to have no decimal, and \"%\" is added to the final result.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    This function compares how similar 2 lists are and returns the percent of the guess list that matches the answer list. The percentage is multiplied by 100, rounded to have no decimal, and \"%\" is added to the final result.\n    \"\"\"\n    ", "subset": "last_success", "original": "added"}
{"__index_level_0__": 1698, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student5", "submitted_text": "the function laugh will take the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of \"ha\"s left to produce. and add a space in between the ha's but not at the very end. \n\n", "prompt": "def laugh(size):\n    \"\"\"\n    the function laugh will take the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of \"ha\"s left to produce. and add a space in between the ha's but not at the very end. \n\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "add"}
{"__index_level_0__": 1738, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student37", "submitted_text": "Write a function which takes an integer size as an input, creates an empty string called laugh, and the uses a for loop to append an h followed by i number a's for each 0<i<=size starting with i = size, append a space before each h except the first h in the string", "prompt": "def laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty string called laugh, and the uses a for loop to add an h followed by i number a's for each 0<i<=size starting with i = size, add a space before each h except the first h in the string\n    \"\"\"\n    ", "subset": "last_success", "original": "append"}
{"__index_level_0__": 1739, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student61", "submitted_text": "function adds 'a' to every 'h' based on input and will lower amount of 'a'. Function also adds a space between every 'ha' except the last one", "prompt": "def laugh(size):\n    \"\"\"\n    function adds 'a' to every 'h' based on input and will lower amount of 'a'. Function also adds a space between every 'ha' except the last one\n    \"\"\"\n    ", "subset": "first_success", "original": "adds"}
{"__index_level_0__": 1741, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student61", "submitted_text": "function adds 'a' to every 'h' based on input and will lower amount of 'a'. Function also adds a space between every 'ha'", "prompt": "def laugh(size):\n    \"\"\"\n    function adds 'a' to every 'h' based on input and will lower amount of 'a'. Function also adds a space between every 'ha'\n    \"\"\"\n    ", "subset": "last_failure", "original": "adds"}
