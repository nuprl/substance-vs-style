{"__index_level_0__": 0, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student1", "submitted_text": "takes a list of strings, integers, and floats and returns the sum of all the integers and floats.", "prompt": "def add_up(arr):\n    \"\"\"\n    takes a list of strings, integers, and floats and returns the sum of all the integers and floats.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 76, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student27", "submitted_text": "The input will be a list of integers. Return 0 if the list is empty. Otherwise, subtract the sum of all the integers with odd positions from the sum of all the integers with even positions.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    The input will be a list of integers. Return 0 if the list is empty. Otherwise, subtract the sum of all the integers with odd positions from the sum of all the integers with even positions.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 235, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student12", "submitted_text": "For each element in the list lst, if the element is a string, append the number num to the end of the string. If the element is an integer, add num to it. If it is any other type, do not do anything to it.\n", "prompt": "def add_int(lst, num):\n    \"\"\"\n    For each element in the list lst, if the element is a string, append the number num to the end of the string. If the element is an integer, add num to it. If it is any other type, do not do anything to it.\n\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 256, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student27", "submitted_text": "Convert the input into integers and check if it is a prime number.", "prompt": "def check_prime(num):\n    \"\"\"\n    Convert the input into integers and check if it is a prime number.\n    \"\"\"\n    ", "subset": "first_success", "original": "integers"}
{"__index_level_0__": 290, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student0", "submitted_text": "takes in a list of numbers. returns the list of numbers without odd integer numbers.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers. returns the list of numbers without odd integer.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer numbers"}
{"__index_level_0__": 446, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student23", "submitted_text": "This function takes in a list within a list, consisting of the age as an integer, and names as a string. The output creates a dictionary where the age given is the value for the names given ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of the age as an integer, and names as a string. The output creates a dictionary where the age given is the value for the names given \n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 947, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student27", "submitted_text": "The input will be a list of lists, call it \"mat\" and two integers, call them \"i\" and \"n\". For each list in mat, replace the integer at position i with the integer n.", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    The input will be a list of lists, call it \"mat\" and two integers, call them \"i\" and \"n\". For each list in mat, replace the integer at position i with the integer n.\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 986, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student0", "submitted_text": "takes in an integer. return a matrix of the integer size by the integer size with values of its row index plus one.", "prompt": "def pattern(value):\n    \"\"\"\n    takes in an integer. return a matrix of the integer size by the integer size with values of its row index plus one.\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 1065, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student0", "submitted_text": "takes in a string, an integer, and a dictionary.\nreturns the dictionary that adds the string as a key and integer as the value", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    takes in a string, an integer, and a dictionary.\nreturns the dictionary that adds the string as a key and integer as the value\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 1645, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student1", "submitted_text": "takes a list of integers, and a value and raises all the integers in the list to the power of that value.", "prompt": "def exp(lst, val):\n    \"\"\"\n    takes a list of integers, and a value and raises all the integers in the list to the power of that value.\n    \"\"\"\n    ", "subset": "first_success", "original": "integers"}
{"__index_level_0__": 113, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student78", "submitted_text": "given a list, convert each item in the list to an integer. subract the second integer from the first and then with that total, add the next integer. with that total subtract the next integer. repeat this until all integers in the list have been either added or subtracted and output the final total. if the list is blank, output 0.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    given a list, convert each item in the list to an integer. subract the second integer from the first and then with that total, add the next integer. with that total subtract the next integer. repeat this until all integers in the list have been either added or subtracted and output the final total. if the list is blank, output 0.\n    \"\"\"\n    ", "subset": "first_success", "original": "integers"}
{"__index_level_0__": 289, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student78", "submitted_text": "given a sting, convert it to an int. divide the number by each number counting up starting at 2. if the output is another int and is not the same number as the original int, output False. If the output is the same as the original int output True.", "prompt": "def check_prime(num):\n    \"\"\"\n    given a sting, convert it to an integer. divide the number by each number counting up starting at 2. if the output is another integer and is not the same number as the original integer, output False. If the output is the same as the original integer output True.\n    \"\"\"\n    ", "subset": "first_success", "original": "int"}
{"__index_level_0__": 490, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student79", "submitted_text": "you are going to have a nested list as an input. the inner most lists are going to have strings. next to them in an outer list they will have an integer. your goal is to create a dictionary with the keys of names in the inner most lists and with the corresponding number and return.", "prompt": "def times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them in an outer list they will have an integer. your goal is to create a dictionary with the keys of names in the inner most lists and with the corresponding number and return.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 2, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student1", "submitted_text": "takes a list of strings, integers, and floats and returns the sum of all the ints and floats.", "prompt": "def add_up(arr):\n    \"\"\"\n    takes a list of strings, integers, and floats and returns the sum of all the integers and floats.\n    \"\"\"\n    ", "subset": "last_failure", "original": "ints"}
{"__index_level_0__": 3, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student6", "submitted_text": "Input: list of items, that may be a combination of strings and integers. Function takes the sum of the integers and outputs it", "prompt": "def add_up(arr):\n    \"\"\"\n    Input: list of items, that may be a combination of strings and integers. Function takes the sum of the integers and outputs it\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 5, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student6", "submitted_text": "Input: list of strings. Function checks each item in the list to check if it is a number character. If it is a number, convert it to an integer and it adds it to a new list. If it is not a number integer it ignores it. Outputs the sum of each ingter in the new list. If the original list contains no integers, return 0", "prompt": "def add_up(arr):\n    \"\"\"\n    Input: list of strings. Function checks each item in the list to check if it is a number character. If it is a number, convert it to an integer and it adds it to a new list. If it is not a integer it ignores it. Outputs the sum of each integer in the new list. If the original list contains no integers, return 0\n    \"\"\"\n    ", "subset": "last_failure", "original": "integers"}
{"__index_level_0__": 6, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student7", "submitted_text": "sums the total of integers and floats in an array. strings are ignored, empty spots count as 0", "prompt": "def add_up(arr):\n    \"\"\"\n    sums the total of integers and floats in an array. strings are ignored, empty spots count as 0\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 11, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student7", "submitted_text": "iterates through the column and rows and sums the total of integers and floats. strings are ignored, empty spots count as 0", "prompt": "def add_up(arr):\n    \"\"\"\n    iterates through the column and rows and sums the total of integers and floats. strings are ignored, empty spots count as 0\n    \"\"\"\n    ", "subset": "last_success", "original": "integers"}
{"__index_level_0__": 32, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student24", "submitted_text": "For items in the list, if the item is an integer add them together. Return the sum of those integers.", "prompt": "def add_up(arr):\n    \"\"\"\n    For items in the list, if the item is an integer add them together. Return the sum of those integers.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 33, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student24", "submitted_text": "For items in the list inside the list add each item together. If the item is not an integer, ignore any errors. Return the sum of the integers in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    For items in the list inside the list add each item together. If the item is not an integer, ignore any errors. Return the sum of the integers in the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "integers"}
{"__index_level_0__": 34, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student28", "submitted_text": "This function takes one paramater, arr. arr can consist of a string and integers or it can be empty. The code adds up all the integers in arr. And it only returns the sum of all the integers in arr.", "prompt": "def add_up(arr):\n    \"\"\"\n    This function takes one parameter, arr. arr can consist of a string and integers or it can be empty. The code adds up all the integers in arr. And it only returns the sum of all the integers in arr.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 38, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student39", "submitted_text": "For this function your goal is to add up the numbers given to in the input list. Only add up the integers and not numbers represented as a string. ", "prompt": "def add_up(arr):\n    \"\"\"\n    For this function your goal is to add up the numbers given to in the input list. Only add up the integers and not numbers represented as a string. \n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 43, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student46", "submitted_text": "Takes in an array, outputs all integers added together that are in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes in an array, outputs all integers added together that are in the array.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 56, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student53", "submitted_text": "loop through each list in arr and then loop again for each element and if the element is an integer or float add them to a new list and return the sum of that new list.  ", "prompt": "def add_up(arr):\n    \"\"\"\n    loop through each list in arr and then loop again for each element and if the element is an integer or float add them to a new list and return the sum of that new list.  \n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 58, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student53", "submitted_text": "loop through each list in arr and then loop again for each elemtn and if the element is an integer or float add them and return the sum. ", "prompt": "def add_up(arr):\n    \"\"\"\n    loop through each list in arr and then loop again for each elemtn and if the element is an integer or float add them and return the sum. \n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 65, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that gets a list. The function runs through a list of lists. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should avoid strings if they are elements in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that gets a list. The function runs through a list of lists. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should avoid strings if they are elements in the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 69, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student58", "submitted_text": "Return the sum of the integers in the list. Ignore the string.", "prompt": "def add_up(arr):\n    \"\"\"\n    Return the sum of the integers in the list. Ignore the string.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integers"}
{"__index_level_0__": 77, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student27", "submitted_text": "The input will be a list of strings. Return 0 if the list is empty. Otherwise, convert the strings into integers, then subtract the sum of all the integers with odd positions from the sum of all the integers with even positions. ", "prompt": "def subtract_add(lst):\n    \"\"\"\n    The input will be a list of strings. Return 0 if the list is empty. Otherwise, convert the strings into integers, then subtract the sum of all the integers with odd positions from the sum of all the integers with even positions. \n    \"\"\"\n    ", "subset": "last_success", "original": "integers"}
{"__index_level_0__": 78, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student29", "submitted_text": "For each list entry, convert the input to an integer. Multiply list entries that correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    For each list entry, convert the input to an integer. Multiply list entries that correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 80, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student29", "submitted_text": "For each list entry, convert the input to an integer. Multiply list entries that don't correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    For each list entry, convert the input to an integer. Multiply list entries that don't correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 84, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student32", "submitted_text": "Turns all the elements in lst into integers, then finds the sum of all the elements in the list excluding the last one. Then it subtracts the last element from the sum.\n\nIf the list is empty, it returns 0", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Turns all the elements in lst into integers, then finds the sum of all the elements in the list excluding the last one. Then it subtracts the last element from the sum.\n\nIf the list is empty, it returns 0\n    \"\"\"\n    ", "subset": "last_failure", "original": "integers"}
{"__index_level_0__": 85, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student34", "submitted_text": "Find the sum of the items in the list with positions that produce an integer when divided by two, then find the sum of the items in the list with positions that do not produce an integer when divided by two. Then take the first sum and subtract the second sum from it. If there are no items in the list output 0", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Find the sum of the items in the list with positions that produce an integer when divided by two, then find the sum of the items in the list with positions that do not produce an integer when divided by two. Then take the first sum and subtract the second sum from it. If there are no items in the list output 0\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 86, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student49", "submitted_text": "Given a list of integers, take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Given a list of integers, take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 87, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student49", "submitted_text": "Given a list of strings, type cast to integers and then take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Given a list of strings, type cast to integers and then take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output\n    \"\"\"\n    ", "subset": "last_success", "original": "integers"}
{"__index_level_0__": 94, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student62", "submitted_text": "turn each element into int, add first element to count. if index of element is odd when int, subtract from count. if index of element is even when int, add to count.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    turn each element into integer, add first element to count. if index of element is odd when integer, subtract from count. if index of element is even when integer, add to count.\n    \"\"\"\n    ", "subset": "last_failure", "original": "int"}
{"__index_level_0__": 100, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student66", "submitted_text": "Change the first two items into integers Subtract the second item in the array list from the first item. change the third and forth items into integers then subtract the forth item from the third item then add the two sums. if there are just two items in list change those two items into integers subtract the second one from the first one and return the product. if there are no items then return zero", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Change the first two items into integers Subtract the second items in the array list from the first item. change the third and forth items into integers then subtract the forth item from the third item then add the two sums. if there are just two items in list change those two items into integers subtract the second one from the first one and return the product. if there are no items then return zero\n    \"\"\"\n    ", "subset": "last_success", "original": "integers"}
{"__index_level_0__": 103, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student67", "submitted_text": "Converts all items to integer. Subtracts the second number from the first one, stores that value. Then adds that value to the next number, etc. Returns the final value.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Converts all items to integer. Subtracts the second number from the first one, stores that value. Then adds that value to the next number, etc. Returns the final value.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 104, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student68", "submitted_text": "given an array of characters containing integers, convert the characters into integers. Starting from the front of the array, subtract the first two numbers and store that in a count variable. then add the next number to the count. alternate between subtracting and adding until you get to the end of the array. return the count\n", "prompt": "def subtract_add(lst):\n    \"\"\"\n    given an array of characters containing integers, convert the characters into integers. Starting from the front of the array, subtract the first two numbers and store that in a count variable. then add the next number to the count. alternate between subtracting and adding until you get to the end of the array. return the count\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 107, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student68", "submitted_text": "Given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count. If the given array is empty, return 0. \n", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count. If the given array is empty, return 0. \n\n    \"\"\"\n    ", "subset": "last_success", "original": "integers"}
{"__index_level_0__": 112, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student70", "submitted_text": "Create a variable for the result. Treat all elements as integers. If the list contains 0 elements, return 0. If the list contains 1 element, return that element. If the list contains 2 or more elements: subtract the second element from the first and save the result, then add the third element to that result, and continue on alternating subtraction and addition until the end of the list.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Create a variable for the result. Treat all elements as integers. If the list contains 0 elements, return 0. If the list contains 1 element, return that element. If the list contains 2 or more elements: subtract the second element from the first and save the result, then add the third element to that result, and continue on alternating subtraction and addition until the end of the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integers"}
{"__index_level_0__": 139, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student10", "submitted_text": "User inputs a list of integers from 0-25. Function converts integers into letters by matching the number with the corresponding letter of the alphabet. Function would return a list of letters. When the user inputs -1, function should end current string in list and start a new string. ", "prompt": "def convert(lst):\n    \"\"\"\n    User inputs a list of integers from 0-25. Function converts integers into letters by matching the number with the corresponding letter of the alphabet. Function would return a list of letters. When the user inputs -1, function should end current string in list and start a new string. \n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 141, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student10", "submitted_text": "User inputs a list of numbers ranging from -1 to 25, and function outputs a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current string in list and start a new string. Function should return a list of the letters.", "prompt": "def convert(lst):\n    \"\"\"\n    User inputs a list of numbers ranging from -1 to 25, and function outputs a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current string in list and start a new string. Function should return a list of the letters.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integers"}
{"__index_level_0__": 188, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student25", "submitted_text": "This function converts integers to its corresponding letter in the alphabet.", "prompt": "def convert(lst):\n    \"\"\"\n    This function converts integers to its corresponding letter in the alphabet.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 236, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student19", "submitted_text": "Takes an input list (which can have both strings and integers) and an integer. Adds the input integer to each item in the input list. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Takes an input list (which can have both strings and integers) and an integer. Adds the input integer to each item in the input list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 237, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student19", "submitted_text": "Takes an input list and an input integer. For all strings in the list, the input integer is concatenated after the end of the string. For all numbers in the list, the input integer is added to that number.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Takes an input list and an input integer. For all strings in the list, the input integer is concatenated after the end of the string. For all numbers in the list, the input integer is added to that number.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 241, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student38", "submitted_text": "If position in lst is string, append num to string. If position in lst is integer, add num to integer. Return the new lst. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    If position in lst is string, append num to string. If position in lst is integer, add num to integer. Return the new lst. \n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 244, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student38", "submitted_text": "If position in lst is string, append num to string. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Return the new lst. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    If position in lst is string, append num to string. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Return the new lst. \n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 248, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student54", "submitted_text": "Return a new list with the integer added at each index of the old list.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Return a new list with the integer added at each index of the old list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 252, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student54", "submitted_text": "Return a new list with the integer added at each index of the old list. If it is a string, append the integer on to the end of the string to create a new string. If it is an integer, concatenate.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Return a new list with the integer added at each index of the old list. If it is a string, append the integer on to the end of the string to create a new string. If it is an integer, concatenate.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 253, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student57", "submitted_text": "given a list and an integer, within each element in the list, if it is a string, concatenate integer to end of the string, if element is an integer, add the given integer, if element is a list, do nothing", "prompt": "def add_int(lst, num):\n    \"\"\"\n    given a list and an integer, within each element in the list, if it is a string, concatenate integer to end of the string, if element is an integer, add the given integer, if element is a list, do nothing\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 259, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student29", "submitted_text": "Convert the input to an integer. Then check if the integer is a prime number and return \"True\" if it is prime and \"False\" if it's not", "prompt": "def check_prime(num):\n    \"\"\"\n    Convert the input to an integer. Then check if the integer is a prime number and return \"True\" if it is prime and \"False\" if it's not\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 262, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student32", "submitted_text": "Turns num into int. Return a bool indicating if num is a prime number.", "prompt": "def check_prime(num):\n    \"\"\"\n    Turns num into integer. Return a bool indicating if num is a prime number.\n    \"\"\"\n    ", "subset": "last_success", "original": "int"}
{"__index_level_0__": 263, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student34", "submitted_text": "if num is divisible by an integer other than 1 or itself it is false, otherwise it is true", "prompt": "def check_prime(num):\n    \"\"\"\n    if num is divisible by an integer other than 1 or itself it is false, otherwise it is true\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 264, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student34", "submitted_text": "if num cannot produce an integer when divided by integers other than 1 or itself, return true. If otherwise return false.", "prompt": "def check_prime(num):\n    \"\"\"\n    if num cannot produce an integer when divided by integers other than 1 or itself, return true. If otherwise return false.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integers"}
{"__index_level_0__": 265, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student49", "submitted_text": "given an integer, if the integer is only divisible by itself and 1, return True otherwise return False", "prompt": "def check_prime(num):\n    \"\"\"\n    given an integer, if the integer is only divisible by itself and 1, return True otherwise return False\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 267, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student49", "submitted_text": "typecast num as an integer, if num is only divisible by itself and 1, return True otherwise return False", "prompt": "def check_prime(num):\n    \"\"\"\n    typecast num as an integer, if num is only divisible by itself and 1, return True otherwise return False\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 268, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student56", "submitted_text": "changes the string into an integer and checks if the integers are a prime number, if they are then 'True' is returned, if they are not then 'False' is returned", "prompt": "def check_prime(num):\n    \"\"\"\n    changes the string into an integer and checks if the integers are a prime number, if they are then 'True' is returned, if they are not then 'False' is returned\n    \"\"\"\n    ", "subset": "first_success", "original": "integers"}
{"__index_level_0__": 269, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student62", "submitted_text": "change input to integer. if prime number, return True, if not a prime number, return False", "prompt": "def check_prime(num):\n    \"\"\"\n    change input to integer. if prime number, return True, if not a prime number, return False\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 275, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student66", "submitted_text": "change the input into an integer if the number is not divisible buy 4 or 3 return true else return false", "prompt": "def check_prime(num):\n    \"\"\"\n    change the input into an integer if the number is not divisible buy 4 or 3 return true else return false\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 277, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student67", "submitted_text": "Converts input into an integer. Returns 'True' if input is a prime number.", "prompt": "def check_prime(num):\n    \"\"\"\n    Converts input into an integer. Returns 'True' if input is a prime number.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 278, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student68", "submitted_text": "given a string, convert into an integer and return true if it's a prime number. if not, return false", "prompt": "def check_prime(num):\n    \"\"\"\n    given a string, convert into an integer and return true if it's a prime number. if not, return false\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 288, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student70", "submitted_text": "create a new variable that saves the input num as an integer using int(). return whether this integer is prime.", "prompt": "def check_prime(num):\n    \"\"\"\n    create a new variable that saves the input num as an integer using int(). return whether this integer is prime.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 296, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student3", "submitted_text": "remove odd interger number\n", "prompt": "def remove_odd(lst):\n    \"\"\"\n    remove odd integer\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "interger number"}
{"__index_level_0__": 300, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student3", "submitted_text": "remove int element which are odd", "prompt": "def remove_odd(lst):\n    \"\"\"\n    remove integer element which are odd\n    \"\"\"\n    ", "subset": "last_failure", "original": "int"}
{"__index_level_0__": 301, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student4", "submitted_text": "deletes odd whole numbers from the list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    deletes odd integers from the list\n    \"\"\"\n    ", "subset": "first_failure", "original": "whole numbers"}
{"__index_level_0__": 307, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student4", "submitted_text": "for values with the int type in the given list, deletes ints that are odd from the list, returns the appended list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    for values with the integer type in the given list, deletes integers that are odd from the list, returns the appended list\n    \"\"\"\n    ", "subset": "last_failure", "original": "ints"}
{"__index_level_0__": 308, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student10", "submitted_text": "Function removes all odd integers from list. Function would keep all values if they have decimal points. Returns list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Function removes all odd integers from list. Function would keep all values if they have decimal points. Returns list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 310, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student10", "submitted_text": "Function removes all odd integers from list . Returns list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Function removes all odd integers from list . Returns list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integers"}
{"__index_level_0__": 324, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student21", "submitted_text": "remove only the odd integers from given list ", "prompt": "def remove_odd(lst):\n    \"\"\"\n    remove only the odd integers from given list \n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 329, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student21", "submitted_text": "if the value in the list is an integer, evaluate if it is odd and remove from the list if it is odd.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    if the value in the list is an integer, evaluate if it is odd and remove from the list if it is odd.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 330, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student25", "submitted_text": "This function removes odd integers from the given list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    This function removes odd integers from the given list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 334, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student25", "submitted_text": "This function removes odd integers from the input \"lst\" and returns a list including all of the original numbers except for the odd integers. All floats in the given list remain in the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    This function removes odd integers from the input \"lst\" and returns a list including all of the original numbers except for the odd integers. All floats in the given list remain in the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integers"}
{"__index_level_0__": 339, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student30", "submitted_text": "Removes odd integers from lst.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Removes odd integers from lst.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integers"}
{"__index_level_0__": 340, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student41", "submitted_text": "For every whole number in the inputted list, if that item is not divisible by two it is removed from the list. It returns the list with the remaining values.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For every integer in the inputted list, if that item is not divisible by two it is removed from the list. It returns the list with the remaining values.\n    \"\"\"\n    ", "subset": "first_failure", "original": "whole number"}
{"__index_level_0__": 345, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student48", "submitted_text": "remove odd whole numbers from the list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    remove odd integers from the list\n    \"\"\"\n    ", "subset": "last_failure", "original": "whole numbers"}
{"__index_level_0__": 346, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student51", "submitted_text": "For each object in the list, remove it if it is an odd integer. Return the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For each object in the list, remove it if it is an odd integer. Return the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 349, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student51", "submitted_text": "For each object in the list, if it is and integer then check if it is odd and if it is odd then remove it. Return the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For each object in the list, if it is and integer then check if it is odd and if it is odd then remove it. Return the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 398, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student31", "submitted_text": "Takes a dictionary where the keys are strings, and the entries are integers. then, sums all of the entries whose strings are names of planets, and returns this sum. ", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Takes a dictionary where the keys are strings, and the entries are integers. then, sums all of the entries whose strings are names of planets, and returns this sum. \n    \"\"\"\n    ", "subset": "first_success", "original": "integers"}
{"__index_level_0__": 401, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student46", "submitted_text": "The function will take in a dictionary where the keys are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    The function will take in a dictionary where the keys are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 403, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student46", "submitted_text": "The function will take in a dictionary where the keys are strings and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    The function will take in a dictionary where the keys are strings and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.\n    \"\"\"\n    ", "subset": "last_success", "original": "integers"}
{"__index_level_0__": 408, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student47", "submitted_text": "\"go through the 0 index of the planets if they are 'Venus' and 'Mercury', add up the integers that are associated with them\"", "prompt": "def planets_mass(planets):\n    \"\"\"\n    \"go through the 0 index of the planets if they are 'Venus' and 'Mercury', add up the integers that are associated with them\"\n    \"\"\"\n    ", "subset": "last_failure", "original": "integers"}
{"__index_level_0__": 416, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student58", "submitted_text": "return the sum of the integers. If the integer corresponds to strings 'Pluto' or 'Sun', ignore the integer", "prompt": "def planets_mass(planets):\n    \"\"\"\n    return the sum of the integers. If the integer corresponds to strings 'Pluto' or 'Sun', ignore the integer\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 420, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student58", "submitted_text": "If planets = 'Sun' or 'Pluto', return 0. Else add the integer to x. Return x", "prompt": "def planets_mass(planets):\n    \"\"\"\n    If planets = 'Sun' or 'Pluto', return 0. Else add the integer to x. Return x\n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 438, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student37", "submitted_text": "Write a function which takes a dictionary of integers mapped to strings and a second dictionary of integers mapped to lists (size 2) of strings and maps takes the integers from the first list and constructs a new dictionary where the string mapped to each integer in the first list is mapped to the list the integer is mapped to in the second dictionary", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Write a function which takes a dictionary of integers mapped to strings and a second dictionary of integers mapped to lists (size 2) of strings and maps takes the integers from the first list and constructs a new dictionary where the string mapped to each integer in the first list is mapped to the list the integer is mapped to in the second dictionary\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 441, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student72", "submitted_text": "Return a dictionary with the key being the string from the first dictionary in the input. Go through the next dictionary in the input and find what the integer in the first dictionary in the input corresopnds to. Return that as what corresponds to the string in the ouput.", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Return a dictionary with the key being the string from the first dictionary in the input. Go through the next dictionary in the input and find what the integer in the first dictionary in the input corresopnds to. Return that as what corresponds to the string in the ouput.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 451, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student23", "submitted_text": "This function takes in a list within a list, consisting of an integer in the outer list, and names as a string in the inner list. The output creates a dictionary where the key is the string and updates the dictionary with the value which is the integer that is given. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of an integer in the outer list, and names as a string in the inner list. The output creates a dictionary where the key is the string and updates the dictionary with the value which is the integer that is given. \n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 453, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student33", "submitted_text": "The function takes in some number of lists that each consist of an integer and another list of strings \"names\". For each list, the function creates a dictionary entry with each string in \"names\" and the integer in that list. The function returns the dictionary. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function takes in some number of lists that each consist of an integer and another list of strings \"names\". For each list, the function creates a dictionary entry with each string in \"names\" and the integer in that list. The function returns the dictionary. \n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 468, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student60", "submitted_text": "This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a integer and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the integer to every string in the list. If the string appears multiple times, the number is added to that. \n    \"\"\"\n    ", "subset": "first_failure", "original": "int"}
{"__index_level_0__": 469, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student60", "submitted_text": "This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. The function then would return a dictionary containing the total value assigned to every string. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would return { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\n", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a integer and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the integer to every string in the list. If the string appears multiple times, the number is added to that. The function then would return a dictionary containing the total value assigned to every string. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would return { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\n\n    \"\"\"\n    ", "subset": "last_success", "original": "int"}
{"__index_level_0__": 485, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student79", "submitted_text": "you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists and add to the list if the same name already has a value in the dictionary.", "prompt": "def times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists and add to the list if the same name already has a value in the dictionary.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 534, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student57", "submitted_text": "given a string and an integer, if given string is either \"Sat\" or \"Sun\", return \"weekend\". if string is a weekday (i.e. \"Mon\" or \"Tue\"), take into account the integer. if integer is from 9-23, return \"weekday\". if integer is from 0-8, return \"sleeping\". if integer is more than 24, return an error statement stating there are only 24 hours in a day where midnight starts at 0.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    given a string and an integer, if given string is either \"Sat\" or \"Sun\", return \"weekend\". if string is a weekday (i.e. \"Mon\" or \"Tue\"), take into account the integer. if integer is from 9-23, return \"weekday\". if integer is from 0-8, return \"sleeping\". if integer is more than 24, return an error statement stating there are only 24 hours in a day where midnight starts at 0.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 535, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student57", "submitted_text": "given a string and an integer, if given string is either \"Sat\" or \"Sun\", return \"weekend\". if string is \"Mon\", \"Tue\", \"Wed\", \"Thu\" or \"Fri\", take into account the integer. if integer is from 9-23, return \"weekday\". if integer is from 0-8, return \"sleeping\". if integer is more than 24, return an error statement stating there are only 24 hours in a day where midnight starts at 0.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    given a string and an integer, if given string is either \"Sat\" or \"Sun\", return \"weekend\". if string is \"Mon\", \"Tue\", \"Wed\", \"Thu\" or \"Fri\", take into account the integer. if integer is from 9-23, return \"weekday\". if integer is from 0-8, return \"sleeping\". if integer is more than 24, return an error statement stating there are only 24 hours in a day where midnight starts at 0.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 565, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student23", "submitted_text": "This function takes in a number and adds one if the number is greater than 9. If the number is negative it turns into a positive number. If it is a single-digit number it adds the integer zero to the end of the number and returns an integer. Then the output is returned with the updated number.", "prompt": "def increaseScore(score):\n    \"\"\"\n    This function takes in a number and adds one if the number is greater than 9. If the number is negative it turns into a positive number. If it is a single-digit number it adds the integer zero to the end of the number and returns an integer. Then the output is returned with the updated number.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 566, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student33", "submitted_text": "The function takes an integer as input. If the integer is negative, the function returns it as positive. If the integer only has one digit, the function returns a value of 10. If the integer is positive and two or more digits, the function returns the integer plus one. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function takes an integer as input. If the integer is negative, the function returns it as positive. If the integer only has one digit, the function returns a value of 10. If the integer is positive and two or more digits, the function returns the integer plus one. \n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 567, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student33", "submitted_text": "The function takes an integer as input. If the integer is negative, the function returns the absolute value of the integer. If the integer only has one digit, the function returns a value of 10. If the integer is positive and two or more digits, the function returns the integer plus one. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function takes an integer as input. If the integer is negative, the function returns the absolute value of the integer. If the integer only has one digit, the function returns a value of 10. If the integer is positive and two or more digits, the function returns the integer plus one. \n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 573, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student50", "submitted_text": "The input is an integer. If the number is negative, make it positive. Otherwise, add one.", "prompt": "def increaseScore(score):\n    \"\"\"\n    The input is an integer. If the number is negative, make it positive. Otherwise, add one.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 574, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student50", "submitted_text": "The input is an integer. If the number is below 10, make it 10. Else, add one to it.", "prompt": "def increaseScore(score):\n    \"\"\"\n    The input is an integer. If the number is below 10, make it 10. Else, add one to it.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 575, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student59", "submitted_text": "takes an integer and returns an integer whose one's place digit is one more than before. if the inputted integer is negative, returns the absolute value of the integer", "prompt": "def increaseScore(score):\n    \"\"\"\n    takes an integer and returns an integer whose one's place digit is one more than before. if the inputted integer is negative, returns the absolute value of the integer\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 576, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student59", "submitted_text": "takes an integer as the input. if the inputted integer is negative, returns the absolute value of the integer. if the inputted integer is positive and is greater than 9, returns an integer whose one's place digit is one more than before. for all other case, returns an integer that adds a zero in the one's place", "prompt": "def increaseScore(score):\n    \"\"\"\n    takes an integer as the input. if the inputted integer is negative, returns the absolute value of the integer. if the inputted integer is positive and is greater than 9, returns an integer whose one's place digit is one more than before. for all other case, returns an integer that adds a zero in the one's place\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 577, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student60", "submitted_text": "The function takes in an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number and returns it. Otherwise, the function just returns score + 1. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function takes in an integer score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number and returns it. Otherwise, the function just returns score + 1. \n    \"\"\"\n    ", "subset": "first_failure", "original": "int"}
{"__index_level_0__": 579, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student60", "submitted_text": "The function takes in an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number, casts it back into an int and returns it. Otherwise, the function just returns score + 1. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function takes in an integer score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number, casts it back into an integer and returns it. Otherwise, the function just returns score + 1. \n    \"\"\"\n    ", "subset": "last_success", "original": "int"}
{"__index_level_0__": 583, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student69", "submitted_text": "Enter an integer. if the integer is negative, multiply the integer by -1. if the integer is greater than 9, add 1. if the integer is less than 10, multiply bny 10.\n", "prompt": "def increaseScore(score):\n    \"\"\"\n    Enter an integer. if the integer is negative, multiply the integer by -1. if the integer is greater than 9, add 1. if the integer is less than 10, multiply bny 10.\n\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 585, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student75", "submitted_text": "def increaseScore(score): takes input '-10' and outputs its positive integer", "prompt": "def increaseScore(score):\n    \"\"\"\n    def increaseScore(score): takes input '-10' and outputs its positive integer\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 586, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student75", "submitted_text": "def increaseScore(score): takes input '-10' and outputs its positive integer\ndef increaseScore(score): inputs '1' and adds 9\ndef increaseScore(score): adds 1 to each input '10', '15', '20'", "prompt": "def increaseScore(score):\n    \"\"\"\n    def increaseScore(score): takes input '-10' and outputs its positive integer\ndef increaseScore(score): inputs '1' and adds 9\ndef increaseScore(score): adds 1 to each input '10', '15', '20'\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 587, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student76", "submitted_text": "Takes the absolute value of an integer if it is negative, multiplies an integer by 10 if it is positive and less than 10 and adds 1 to an integer if it is equal to 10 or greater than 10", "prompt": "def increaseScore(score):\n    \"\"\"\n    Takes the absolute value of an integer if it is negative, multiplies an integer by 10 if it is positive and less than 10 and adds 1 to an integer if it is equal to 10 or greater than 10\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 706, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student27", "submitted_text": "Calculate the total value of a list of ice cream. The input will be a list of strings, and each string contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each string. The value can be integers or floats.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Calculate the total value of a list of ice cream. The input will be a list of strings, and each string contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each string. The value can be integers or floats.\n    \"\"\"\n    ", "subset": "last_success", "original": "integers"}
{"__index_level_0__": 707, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "For each list entry, parse through the string until after the 2nd \"\\\" character. Then return the integer following the \"t\" character. Keep track of the integer for each entry and add them all together, returning the sum for each list\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    For each list entry, parse through the string until after the 2nd \"\\\" character. Then return the integer following the \"t\" character. Keep track of the integer for each entry and add them all together, returning the sum for each list\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 723, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student49", "submitted_text": "Given a list of strings remove anything past the last t in the string, type cast to an integer and then add them together. ", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings remove anything past the last t in the string, type cast to an integer and then add them together. \n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 742, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student70", "submitted_text": "Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into an integer, then add that integer to the sum. Return the sum at the end of the list.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into an integer, then add that integer to the sum. Return the sum at the end of the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 744, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student70", "submitted_text": "Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string. If this remaining portion of the string contains \".\", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Return the sum at the end of the list.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string. If this remaining portion of the string contains \".\", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Return the sum at the end of the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 796, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student31", "submitted_text": "Takes a list of strings and a single string called the answer. Then, for each string in the list of strings, compares it to the answer and creates an integer score for that string. For every time the string in the list of strings has the same letter in the same place as the answer, adds two to the score. For every time the string in the list of strings has the same letter in a different place as the answer, adds one to the score. Then, adds that score to a list and starts a new score at 0 for the next string in the list of strings. Continue until all the strings in the list of strings have been compared with the answer, and then return the list of scores. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Takes a list of strings and a single string called the answer. Then, for each string in the list of strings, compares it to the answer and creates an integer score for that string. For every time the string in the list of strings has the same letter in the same place as the answer, adds two to the score. For every time the string in the list of strings has the same letter in a different place as the answer, adds one to the score. Then, adds that score to a list and starts a new score at 0 for the next string in the list of strings. Continue until all the strings in the list of strings have been compared with the answer, and then return the list of scores. \n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 808, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student58", "submitted_text": "Cross reference the string with the list to return a list of integers representing identical characters", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Cross reference the string with the list to return a list of integers representing identical characters\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 814, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student34", "submitted_text": "Count how many times \"&\" appears in each item and make a new list where you the items correspond with each integer. Then find the sum of the new list. ", "prompt": "def andCount(andGrid):\n    \"\"\"\n    Count how many times \"&\" appears in each item and make a new list where you the items correspond with each integer. Then find the sum of the new list. \n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 906, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student10", "submitted_text": "User inputs a string s and integer i. Function would flip the first i letters of string s backwards, and then concatenate the rest of the string to the end of the backwards letters.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    User inputs a string s and integer i. Function would flip the first i letters of string s backwards, and then concatenate the rest of the string to the end of the backwards letters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 907, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student10", "submitted_text": "User inputs a string s and integer i. Function would write the first i letters of string s backwards and save that as string A. All the letters which were not flipped backwards would be saved as string B. Function would add string A and B, and then return that as the output", "prompt": "def changeSection(s,i):\n    \"\"\"\n    User inputs a string s and integer i. Function would write the first i letters of string s backwards and save that as string A. All the letters which were not flipped backwards would be saved as string B. Function would add string A and B, and then return that as the output\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 935, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student30", "submitted_text": "Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them before the remaining characters.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them before the remaining characters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 939, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student30", "submitted_text": "Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them at the front of the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them at the front of the string.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 940, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student41", "submitted_text": "Segments the inputted string up to the given integer. Then prints the letters in the segmented string in reverse order. Then prints the segment of the string after the given integer.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Segments the inputted string up to the given integer. Then prints the letters in the segmented string in reverse order. Then prints the segment of the string after the given integer.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 942, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student41", "submitted_text": "Prints each letter in the section of the string up to the given integer in reverse order. Then prints the rest of the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Prints each letter in the section of the string up to the given integer in reverse order. Then prints the rest of the string.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 948, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student29", "submitted_text": "For each entry, replace the integer corresponding to the 2nd parameter index with the third parameter integer. return a list with all the altered entries", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    For each entry, replace the integer corresponding to the 2nd parameter index with the third parameter integer. return a list with all the altered entries\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 952, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student49", "submitted_text": "Given a list of lists and 2 integers, go through each list and replace the number in the spot of the first integer with the number of the second integer", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    Given a list of lists and 2 integers, go through each list and replace the number in the spot of the first integer with the number of the second integer\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 953, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student56", "submitted_text": "\niterates through a list of lists and at the position inputed as i, an integer is replaced with the inputed value of n", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    \niterates through a list of lists and at the position inputed as i, an integer is replaced with the inputed value of n\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 954, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student62", "submitted_text": "the first integer input corresponds to index. for each element in list, replace the inputted index of list with the second integer input", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    the first integer input corresponds to index. for each element in list, replace the inputted index of list with the second integer input\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 955, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student66", "submitted_text": "replace the index of the fist integer with the second integer within the array list", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    replace the index of the fist integer with the second integer within the array list\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 960, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student68", "submitted_text": "given a list of integer lists and two integers (one represents an index and the other represents a value), in each integer list replace the number at the index correlating with the first input integer with the second input integer. ", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    given a list of integer lists and two integers (one represents an index and the other represents a value), in each integer list replace the number at the index correlating with the first input integer with the second input integer. \n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 961, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student70", "submitted_text": "For each list in the input list mat, replace the integer at index i with input integer n and return the changed list of lists.", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    For each list in the input list mat, replace the integer at index i with input integer n and return the changed list of lists.\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 995, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student10", "submitted_text": "User inputs an int. Function returns a list length value, with each item of the list being another list, containing all numbers from 1 to value.", "prompt": "def pattern(value):\n    \"\"\"\n    User inputs an integer. Function returns a list length value, with each item of the list being another list, containing all numbers from 1 to value.\n    \"\"\"\n    ", "subset": "first_success", "original": "int"}
{"__index_level_0__": 1000, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student18", "submitted_text": "Create a list that has a list of an integer from 1 to value for value amount of times.", "prompt": "def pattern(value):\n    \"\"\"\n    Create a list that has a list of an integer from 1 to value for value amount of times.\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 1002, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student25", "submitted_text": "This function takes a given integer and creates a list with numbers 1 to that given value. It creates this list repeated for the given value and returns, appending each list to one list. It returns the list of lists.", "prompt": "def pattern(value):\n    \"\"\"\n    This function takes a given integer and creates a list with numbers 1 to that given value. It creates this list repeated for the given value and returns, appending each list to one list. It returns the list of lists.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1003, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student25", "submitted_text": "This function takes a given integer and creates one list including the numbers 1 to that given value. It creates this list repeated for the given value, appending each list to one list. It returns the list of lists.", "prompt": "def pattern(value):\n    \"\"\"\n    This function takes a given integer and creates one list including the numbers 1 to that given value. It creates this list repeated for the given value, appending each list to one list. It returns the list of lists.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 1006, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student30", "submitted_text": "Create an array containing value number of smaller arrays. Each smaller array contains value number of integers, ranging from 1 to value in order.", "prompt": "def pattern(value):\n    \"\"\"\n    Create an array containing value number of smaller arrays. Each smaller array contains value number of integers, ranging from 1 to value in order.\n    \"\"\"\n    ", "subset": "first_success", "original": "integers"}
{"__index_level_0__": 1007, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student41", "submitted_text": "Returns a list of lists. The number of lists in the output list should be equal to the value. Each list within the output list should have each integer greater than zero up to, and including, the value inputted.", "prompt": "def pattern(value):\n    \"\"\"\n    Returns a list of lists. The number of lists in the output list should be equal to the value. Each list within the output list should have each integer greater than zero up to, and including, the value inputted.\n    \"\"\"", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1010, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student41", "submitted_text": "Returns a list of lists. The number of lists in the output list should be equal to the value. All of the lists within the output list should have every integer between one and one more than the inputted value.", "prompt": "def pattern(value):\n    \"\"\"\n    Returns a list of lists. The number of lists in the output list should be equal to the value. All of the lists within the output list should have every integer between one and one more than the inputted value.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 1012, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student51", "submitted_text": "return a list of size value where each object is a list containing all integer values starting at one and up to value", "prompt": "def pattern(value):\n    \"\"\"\n    return a list of size value where each object is a list containing all integer values starting at one and up to value\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 1036, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student5", "submitted_text": "the function fib(n) should take an int as a input and return a Boolean expression declaring wither the input only contains 1, 2, or 3", "prompt": "def fib(n):\n    \"\"\"\n    the function fib(n) should take an integer as a input and return a Boolean expression declaring wither the input only contains 1, 2, or 3\n    \"\"\"\n    ", "subset": "first_failure", "original": "int"}
{"__index_level_0__": 1060, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student37", "submitted_text": "Write a function which takes an integer and returns True if the integer is contained on the list of numbers in the fibonacci sequence and False if it is not", "prompt": "def fib(n):\n    \"\"\"\n    Write a function which takes an integer and returns True if the integer is contained on the list of numbers in the fibonacci sequence and False if it is not\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1061, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student37", "submitted_text": "Write a function which takes an integer and then uses a for loop to produce numbers in the fibonacci sequence stored in the variable x. At the end of each loop, if x equals the input integer, return True, if x is greater than the input integer, return False", "prompt": "def fib(n):\n    \"\"\"\n    Write a function which takes an integer and then uses a for loop to produce numbers in the fibonacci sequence stored in the variable x. At the end of each loop, if x equals the input integer, return True, if x is greater than the input integer, return False\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 1062, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student72", "submitted_text": "Return True if the number is an integer in the Fibonnaci sequence. Else, return False.", "prompt": "def fib(n):\n    \"\"\"\n    Return True if the number is an integer in the Fibonnaci sequence. Else, return False.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1066, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student3", "submitted_text": "create a function with 3 input word(string), line_number (int) and map (dict). In map dictionary add new element of dictionary with key are word which given the corresponding list of line number", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    create a function with 3 input word(string), line_number (integer) and map (dict). In map dictionary add new element of dictionary with key are word which given the corresponding list of line number\n    \"\"\"\n    ", "subset": "first_failure", "original": "int"}
{"__index_level_0__": 1068, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student3", "submitted_text": "create a function with 3 input word(string), line_number (int) and map (dict). In map dictionary create new key word", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    create a function with 3 input word(string), line_number (integer) and map (dict). In map dictionary create new key word\n    \"\"\"\n    ", "subset": "last_failure", "original": "int"}
{"__index_level_0__": 1181, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student33", "submitted_text": "The function takes in a list of dictionaries. The function divides the integer in the third place in the dictionary by the integer in the fourth place in the dictionary, adding a new entry to that dictionary called \"success\" with the output value. It then sorts the dictionary entries by the value in \"success,\" highest to lowest. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries. The function divides the integer in the third place in the dictionary by the integer in the fourth place in the dictionary, adding a new entry to that dictionary called \"success\" with the output value. It then sorts the dictionary entries by the value in \"success,\" highest to lowest. \n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1264, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student54", "submitted_text": "If the list contains \"Physics\", return the string at index 0. Sort these into a new list based off the integer at index 1.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    If the list contains \"Physics\", return the string at index 0. Sort these into a new list based off the integer at index 1.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1266, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student54", "submitted_text": "Check that the inner list contains the string \"Physics\" at index 2. If so, append the string at index 0 to a new list. Sort these into a new list based on the integer at index 1.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Check that the inner list contains the string \"Physics\" at index 2. If so, append the string at index 0 to a new list. Sort these into a new list based on the integer at index 1.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 1295, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student22", "submitted_text": "take in a list of integers [start number, final number, step size] and output a list based on those parameters", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    take in a list of integers [start number, final number, step size] and output a list based on those parameters\n    \"\"\"\n    ", "subset": "first_failure", "original": "integers"}
{"__index_level_0__": 1298, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student22", "submitted_text": "take in a list of integers [start, stop, factor] and output a list starting at the closest even number to the start, and including the stop number", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    take in a list of integers [start, stop, factor] and output a list starting at the closest even number to the start, and including the stop number\n    \"\"\"\n    ", "subset": "last_success", "original": "integers"}
{"__index_level_0__": 1299, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student37", "submitted_text": "Write a function which takes three integers, start, stop, and factor, and checks each integer between start and stop inclusively and adds the number to the list Nums if the number is evenly divisible by factor", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    Write a function which takes three integers, start, stop, and factor, and checks each integer between start and stop inclusively and adds the number to the list Nums if the number is evenly divisible by factor\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 1305, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student73", "submitted_text": "The start integer is the first given input, the stop integer is the second input, and the factor is the number that is continuously added to the start integer until the integer either equals the stop integer or is close to the stop integer without going over. Each time the factor is added give the item in a list. ", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    The start integer is the first given input, the stop integer is the second input, and the factor is the number that is continuously added to the start integer until the integer either equals the stop integer or is close to the stop integer without going over. Each time the factor is added give the item in a list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1312, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student33", "submitted_text": "The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\"", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\"\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1313, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student33", "submitted_text": "The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\", truncated to two decimal places.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\", truncated to two decimal places.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 1323, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student59", "submitted_text": "takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an integer that is the sales tax times the sum of all goods' quantity*price", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an integer that is the sales tax times the sum of all goods' quantity*price\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1336, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student69", "submitted_text": "Enter a list where the 0th index is a list of lists and the 1st index is an integer. every element in the list of lists is a list with a string in the 0th index, integer in the 1st index and integer in the second index. multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Enter a list where the 0th index is a list of lists and the 1st index is an integer. every element in the list of lists is a list with a string in the 0th index, integer in the 1st index and integer in the second index. multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1338, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student69", "submitted_text": "Enter a list where the 0th index is a list of lists and the 1st index is an integer. for every list in the 0th index, for every list multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Enter a list where the 0th index is a list of lists and the 1st index is an integer. for every list in the 0th index, for every list multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list\n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 1374, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student6", "submitted_text": "Input of a nested list. Inner lists contain a string 'Name' and an integer. Outer is a list of all inner lists. Outputs a list containing each 'Name' in an order based on the number associated with each name in the inner list", "prompt": "def topScores(lst):\n    \"\"\"\n    Input of a nested list. Inner lists contain a string 'Name' and an integer. Outer is a list of all inner lists. Outputs a list containing each 'Name' in an order based on the number associated with each name in the inner list\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1422, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student28", "submitted_text": "Write a code that has one parameter, 1st is a list. 1st consists of an integer representing a test score and it consists of a string that represents a name. The code should only list out the names of the people with the highest test scores.  ", "prompt": "def topScores(lst):\n    \"\"\"\n    Write a code that has one parameter, 1st is a list. 1st consists of an integer representing a test score and it consists of a string that represents a name. The code should only list out the names of the people with the highest test scores.  \n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1423, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student31", "submitted_text": "Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Returns a list of the names whose corresponding scores were the highest, and were a minimum of 80.", "prompt": "def topScores(lst):\n    \"\"\"\n    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Returns a list of the names whose corresponding scores were the highest, and were a minimum of 80.\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1426, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student31", "submitted_text": "Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Sorts this list from highest integer score to lowest, and returns a list of the names whose corresponding scores were a minimum of 80, with a maximum list length of 5.", "prompt": "def topScores(lst):\n    \"\"\"\n    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Sorts this list from highest integer score to lowest, and returns a list of the names whose corresponding scores were a minimum of 80, with a maximum list length of 5.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 1437, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student46", "submitted_text": "The function takes in a list of two item lists, where the first item is an integer and the second is a string. Eliminate any lists that integers are below 80, then order up to the largest five integers and output the strings associated with them.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function takes in a list of two item lists, where the first item is an integer and the second is a string. Eliminate any lists that integers are below 80, then order up to the largest five integers and output the strings associated with them.\n    \"\"\"\n    ", "subset": "first_success", "original": "integers"}
{"__index_level_0__": 1440, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "taken lst, return the list of strings whose integer is greater than 80", "prompt": "def topScores(lst):\n    \"\"\"\n    taken lst, return the list of strings whose integer is greater than 80\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1450, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "if 0th index of the nested list of lst is greater than or equal to 80, return a list of the 1st index in the order from the largest 0th index integer. Return up to a list of 5 items. ", "prompt": "def topScores(lst):\n    \"\"\"\n    if 0th index of the nested list of lst is greater than or equal to 80, return a list of the 1st index in the order from the largest 0th index integer. Return up to a list of 5 items. \n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 1584, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student0", "submitted_text": "takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of integer of num times 100 divided by the length of the first list and concatenate a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of integer of num times 100 divided by the length of the first list and concatenate a percent sign.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 1587, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student3", "submitted_text": "create a function with 2 inputs: guess (list) and answers(list). find the number of the element match in guess and answers then divide with the number of element of answers. then times the results 100 times and round up the to integer. add percentage sign after the results", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    create a function with 2 inputs: guess (list) and answers(list). find the number of the element match in guess and answers then divide with the number of element of answers. then times the results 100 times and round up the to integer. add percentage sign after the results\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 1591, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student4", "submitted_text": "determines the percent of items in list 1 that are identical to the items in list 2, returns number rounded to the nearest whole numbers including percent sign", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    determines the percent of items in list 1 that are identical to the items in list 2, returns number rounded to the nearest integers including percent sign\n    \"\"\"\n    ", "subset": "last_success", "original": "whole numbers"}
{"__index_level_0__": 1595, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student10", "submitted_text": "User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match, as an integer with no decimal spaces with a % sign at the end.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match, as an integer with no decimal spaces with a % sign at the end.\n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 1601, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student17", "submitted_text": "matches the numbers and letters of the two given strings and calculates the similarity, lastly turn the answer into a percent number with the percent symbol, rounding to the nearest whole number", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers and letters of the two given strings and calculates the similarity, lastly turn the answer into a percent number with the percent symbol, rounding to the nearest integer\n    \"\"\"\n    ", "subset": "last_success", "original": "whole number"}
{"__index_level_0__": 1605, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student18", "submitted_text": "Compare the string in guess and answers by each index and calculate the percentage of the match between guess and answers. Then, multiply 100 to the value while rounding up to the nearest integer and add '%' at the end. ", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Compare the string in guess and answers by each index and calculate the percentage of the match between guess and answers. Then, multiply 100 to the value while rounding up to the nearest integer and add '%' at the end. \n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 1608, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student21", "submitted_text": "given two lists, divide the number of 'X' in the first list by the length of the list, multiply by 100. Subtract this number from 100. Return the String of this obtained number as an integer plus the percentage sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    given two lists, divide the number of 'X' in the first list by the length of the list, multiply by 100. Subtract this number from 100. Return the String of this obtained number as an integer plus the percentage sign.\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
{"__index_level_0__": 1617, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student26", "submitted_text": "Count how many characters in a range of numbers match those in another range of numbers and display the difference rounded to the nearest whole number. Multiply the difference by 100 and display followed by '%'", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Count how many characters in a range of numbers match those in another range of numbers and display the difference rounded to the nearest integer. Multiply the difference by 100 and display followed by '%'\n    \"\"\"\n    ", "subset": "last_failure", "original": "whole number"}
{"__index_level_0__": 1628, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student51", "submitted_text": "check both lists for equality and return the percent of matching items as a string rounded to the nearest whole number with a %", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    check both lists for equality and return the percent of matching items as a string rounded to the nearest integer with a %\n    \"\"\"\n    ", "subset": "last_success", "original": "whole number"}
{"__index_level_0__": 1646, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student6", "submitted_text": "Input of a list of integers, and another integer. Outputs the list of integers expatiated by the second inputted integer", "prompt": "def exp(lst, val):\n    \"\"\"\n    Input of a list of integers, and another integer. Outputs the list of integers expatiated by the second inputted integer\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 1656, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student28", "submitted_text": "Write a code that takes in two parameters, The first parameter is 1st is a list of integers. And the second parameter is val which is a value that represents a power. For each integer in 1st val will take the power of that value.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Write a code that takes in two parameters, The first parameter is 1st is a list of integers. And the second parameter is val which is a value that represents a power. For each integer in 1st val will take the power of that value.\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 1657, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student31", "submitted_text": "Takes a list of integers and a separate single integer, creates a new list and adds each integer from the original to it after raising them to the power of the separate, second integer argument. Then, returns this new list.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Takes a list of integers and a separate single integer, creates a new list and adds each integer from the original to it after raising them to the power of the separate, second integer argument. Then, returns this new list.\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 1660, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student45", "submitted_text": "Takes a list of integers, which we will call lst, and an integer, which we will call val. Returns a new list containing each value of lst raised to the power of val.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Takes a list of integers, which we will call lst, and an integer, which we will call val. Returns a new list containing each value of lst raised to the power of val.\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 1661, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student46", "submitted_text": "A function that takes in a list of multiple integers and one other integer on the outside, then has all the integers within the list be put to the power of whatever number was outside the list.", "prompt": "def exp(lst, val):\n    \"\"\"\n    A function that takes in a list of multiple integers and one other integer on the outside, then has all the integers within the list be put to the power of whatever number was outside the list.\n    \"\"\"\n    ", "subset": "first_success", "original": "integers"}
{"__index_level_0__": 1664, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student53", "submitted_text": "raise each integer in lst to val and return corresponding list", "prompt": "def exp(lst, val):\n    \"\"\"\n    raise each integer in lst to val and return corresponding list\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 1665, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student55", "submitted_text": "Write a function that gets a list of numbers and an integer separated by a comma.\nThe list of numbers should be the base and the integer should the the exponent. Compute all the elements from the list and returns the lists of the results.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Write a function that gets a list of numbers and an integer separated by a comma.\nThe list of numbers should be the base and the integer should the the exponent. Compute all the elements from the list and returns the lists of the results.\n    \"\"\"\n    ", "subset": "first_success", "original": "integer"}
{"__index_level_0__": 1695, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student5", "submitted_text": "the function laugh will take the input of an int and should output a string with the ha as many times as the input but also the number of a's is based on the number it is currently working with\n", "prompt": "def laugh(size):\n    \"\"\"\n    the function laugh will take the input of an integer and should output a string with the ha as many times as the input but also the number of a's is based on the number it is currently working with\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "int"}
{"__index_level_0__": 1698, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student5", "submitted_text": "the function laugh will take the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of \"ha\"s left to produce. and add a space in between the ha's but not at the very end. \n\n", "prompt": "def laugh(size):\n    \"\"\"\n    the function laugh will take the input of an integer and should output a string with \"ha\" as many times as the input integer. However each respective \"ha\" has as many a's as the current number of \"ha\"s left to produce. and add a space in between the ha's but not at the very end. \n\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "int"}
{"__index_level_0__": 1717, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student11", "submitted_text": "a function have initial input as 'ha' when  input of size(int) is 1, when size+= 1 from 1, 'ha' will gain one more 'a'", "prompt": "def laugh(size):\n    \"\"\"\n    a function have initial input as 'ha' when  input of size(integer) is 1, when size+= 1 from 1, 'ha' will gain one more 'a'\n    \"\"\"\n    ", "subset": "first_failure", "original": "int"}
{"__index_level_0__": 1718, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student11", "submitted_text": "a function have initial input as 'ha' when  input of size(int) is 1, when size+= 1 from 1, 'ha' will gain one more 'a' and have another 'ha' with the original length of 'a'", "prompt": "def laugh(size):\n    \"\"\"\n    a function have initial input as 'ha' when  input of size(integer) is 1, when size+= 1 from 1, 'ha' will gain one more 'a' and have another 'ha' with the original length of 'a'\n    \"\"\"\n    ", "subset": "last_failure", "original": "int"}
{"__index_level_0__": 1731, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student22", "submitted_text": "take in an integer and write a decreasing amount of 'a's next to an 'h'", "prompt": "def laugh(size):\n    \"\"\"\n    take in an integer and write a decreasing amount of 'a's next to an 'h'\n    \"\"\"\n    ", "subset": "last_failure", "original": "integer"}
{"__index_level_0__": 1732, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student37", "submitted_text": "Write a function which takes an integer size as an input, and uses a for loop to print an h followed by size a's and then a space, and then an h followed by size-1 a's and then a space, etc. until it prints a h followed by one a", "prompt": "def laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, and uses a for loop to print an h followed by size a's and then a space, and then an h followed by size-1 a's and then a space, etc. until it prints a h followed by one a\n    \"\"\"\n    ", "subset": "first_failure", "original": "integer"}
{"__index_level_0__": 1738, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student37", "submitted_text": "Write a function which takes an integer size as an input, creates an empty string called laugh, and the uses a for loop to append an h followed by i number a's for each 0<i<=size starting with i = size, append a space before each h except the first h in the string", "prompt": "def laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty string called laugh, and the uses a for loop to append an h followed by i number a's for each 0<i<=size starting with i = size, append a space before each h except the first h in the string\n    \"\"\"\n    ", "subset": "last_success", "original": "integer"}
