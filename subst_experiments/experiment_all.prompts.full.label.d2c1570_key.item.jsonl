{"__index_level_0__": 351, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student12", "submitted_text": "Using the dictionary provided, replace each letter (which is the key in the dictionary)in the list with the value. If the letter is not found in the dictionary's keys, replace that letter with None. Return the resulting list.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Using the dictionary provided, replace each letter (which is the item in the dictionary)in the list with the value. If the letter is not found in the dictionary's items, replace that letter with None. Return the resulting list.\n    \"\"\"\n    ", "subset": "first_success", "original": "keys"}
{"__index_level_0__": 750, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student27", "submitted_text": "The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. Return a dictionary with the string as the key and the position of the string as the value.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. Return a dictionary with the string as the item and the position of the string as the value.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1065, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student0", "submitted_text": "takes in a string, an integer, and a dictionary.\nreturns the dictionary that adds the string as a key and integer as the value", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    takes in a string, an integer, and a dictionary.\nreturns the dictionary that adds the string as a item and integer as the value\n    \"\"\"\n    ", "subset": "first_success", "original": "key"}
{"__index_level_0__": 1091, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student27", "submitted_text": "Check if \"aspen\" is one of the keys in a dict. Return \"Yup\" if it is a key, \"Nope\" if it is not a key.", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    Check if \"aspen\" is one of the items in a dict. Return \"Yup\" if it is a item, \"Nope\" if it is not a item.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1141, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student27", "submitted_text": "The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Return the updated list.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    The input will be a list of dictionaries and a string. Remove all dictionaries where the item \"author\" does not match the string. Return the updated list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1178, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student23", "submitted_text": "This function takes in a list of dictionaries that have the nominee, the amount of wins, and the amount of noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a list of dictionaries that have the nominee, the amount of wins, and the amount of noms. A new item is given to each dictionary which is the success item. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success.\n    \"\"\"\n    ", "subset": "first_failure", "original": "attribute"}
{"__index_level_0__": 368, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student77", "submitted_text": "Given a dictionary with key/value pairs and a list of either strings or numbers, return the values in the dictionary if they are included in the list, and return None if they are not.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Given a dictionary with item/value pairs and a list of either strings or numbers, return the values in the dictionary if they are included in the list, and return None if they are not.\n    \"\"\"\n    ", "subset": "first_success", "original": "key"}
{"__index_level_0__": 424, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student65", "submitted_text": "This function takes the input of a dictionary. If the key is the name of a planet, its value is added to the total mass. Otherwise, 0 is added. The function returns the total mass of all planets in the dictionary.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    This function takes the input of a dictionary. If the item is the name of a planet, its value is added to the total mass. Otherwise, 0 is added. The function returns the total mass of all planets in the dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 490, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student79", "submitted_text": "you are going to have a nested list as an input. the inner most lists are going to have strings. next to them in an outer list they will have an integer. your goal is to create a dictionary with the keys of names in the inner most lists and with the corresponding number and return.", "prompt": "def times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them in an outer list they will have an integer. your goal is to create a dictionary with the items of names in the inner most lists and with the corresponding number and return.\n    \"\"\"\n    ", "subset": "last_failure", "original": "keys"}
{"__index_level_0__": 780, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student78", "submitted_text": "given that puzzle is a list of strings, check if the letters of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that puzzle is a list of strings, check if the letters of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the item as the sting in wordList and the output as the position of the string in puzzle\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 1090, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student52", "submitted_text": "Add word as one of the key of map, add line_number as the value of key into map. Return map.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Add word as one of the item of map, add line_number as the value of item into map. Return map.\n    \"\"\"\n    ", "subset": "first_success", "original": "key"}
{"__index_level_0__": 1119, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student78", "submitted_text": "given a dictionary, if one of the keys is 'Aspen', output 'Yup', if not, output 'Nope'", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    given a dictionary, if one of the items is 'Aspen', output 'Yup', if not, output 'Nope'\n    \"\"\"\n    ", "subset": "first_success", "original": "keys"}
{"__index_level_0__": 1177, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student78", "submitted_text": "if books is a list of dictionaries, output a list of dictionaries where the associated data to the key 'author' is equal to the input writer", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    if books is a list of dictionaries, output a list of dictionaries where the associated data to the item 'author' is equal to the input writer\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 1223, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student79", "submitted_text": "you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by the value of noms. you are then going to sort the dictionary according to decreasing success. use two decimal places for the success and put each dictionary on a separate line.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a list of dictionaries as an input. as an output you are going to add another item called success to each dictionary which is the wins divided by the value of noms. you are then going to sort the dictionary according to decreasing success. use two decimal places for the success and put each dictionary on a separate line.\n    \"\"\"\n    ", "subset": "last_failure", "original": "variable"}
{"__index_level_0__": 352, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student19", "submitted_text": "Takes an input dictionary and an input list. Checks each item in the input list. If an item is a key in the input dictionary and has a value, a that value is appended to an output list. Otherwise, if the item is not a valid key in the input dictionary, the value None is instead appended.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Takes an input dictionary and an input list. Checks each item in the input list. If an item is a item in the input dictionary and has a value, a that value is appended to an output list. Otherwise, if the item is not a valid item in the input dictionary, the value None is instead appended.\n    \"\"\"\n    ", "subset": "first_success", "original": "key"}
{"__index_level_0__": 353, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student20", "submitted_text": "Create a list using the values of the keys", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Create a list using the values of the items\n    \"\"\"\n    ", "subset": "first_failure", "original": "keys"}
{"__index_level_0__": 354, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student20", "submitted_text": "Take the values that can be accessed in dt using the keys in the lst, and create a new list with the values. If the key in lst does not exist in dt, add None to the list.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Take the values that can be accessed in dt using the items in the lst, and create a new list with the values. If the item in lst does not exist in dt, add None to the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 355, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student36", "submitted_text": "Using the objects in dt, return their associated keys in dt", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Using the objects in dt, return their associated items in dt\n    \"\"\"\n    ", "subset": "first_failure", "original": "keys"}
{"__index_level_0__": 358, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student38", "submitted_text": "If position in lst is a key in the dictionary, add the value to new list. If not, add None to new list. Return the new list. ", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    If position in lst is a item in the dictionary, add the value to new list. If not, add None to new list. Return the new list. \n    \"\"\"\n    ", "subset": "first_success", "original": "key"}
{"__index_level_0__": 360, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student42", "submitted_text": "given a dictionary and a list, return a new list where each element in the new list is what the elements of the original list map to in the dictionary. if an element of the list doesnt appear as a key in the dictionary, it should show up in the output list as None", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a list, return a new list where each element in the new list is what the elements of the original list map to in the dictionary. if an element of the list doesnt appear as a item in the dictionary, it should show up in the output list as None\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 361, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student43", "submitted_text": "Return the value stored in the key in dt corresponding to the keys in lst. If you can find it, then return the value, if not, then return None.\n", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Return the value stored in the item in dt corresponding to the items in lst. If you can find it, then return the value, if not, then return None.\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "keys"}
{"__index_level_0__": 363, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student54", "submitted_text": "Find the key in the list. If found, return the value of that key. If not found, return None.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Find the item in the list. If found, return the value of that item. If not found, return None.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 365, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student54", "submitted_text": "Find the keys in the list. If found, return the value of that key in a new list. If not found, return None in the new list.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Find the items in the list. If found, return the value of that item in a new list. If not found, return None in the new list.\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 366, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student57", "submitted_text": "given a dictionary and a list, if key exists in dictionary, return all values in key value pair in a list. if key does not exist, return None", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a list, if item exists in dictionary, return all values in item value pair in a list. if item does not exist, return None\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 367, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student57", "submitted_text": "given a dictionary and a list, if key exists in dictionary, return values as well as None (if key does not exist) in a list. ", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a list, if item exists in dictionary, return values as well as None (if item does not exist) in a list. \n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 385, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student7", "submitted_text": "Sums the total mass of planets for each key-value pair, with the key being the planet and the value being the mass. The Sun and Pluto are not considered planets.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Sums the total mass of planets for each item-value pair, with the item being the planet and the value being the mass. The Sun and Pluto are not considered planets.\n    \"\"\"\n    ", "subset": "first_success", "original": "key"}
{"__index_level_0__": 394, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student24", "submitted_text": "For each item in dictionary, add the values from that name if the name is in the dictionary for planets. Return the sum of those values.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    For each item in dictionary, add the values from that name if the name is in the dictionary for planets. Return the sum of those values.\n    \"\"\"\n    ", "subset": "first_failure", "original": "item"}
{"__index_level_0__": 396, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student24", "submitted_text": "For each item in the dictionary, add the values from that name in planets if the name is in a different dictionary and and in planets. Return the sum of those values.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    For each item in the dictionary, add the values from that name in planets if the name is in a different dictionary and and in planets. Return the sum of those values.\n    \"\"\"\n    ", "subset": "last_failure", "original": "item"}
{"__index_level_0__": 398, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student31", "submitted_text": "Takes a dictionary where the keys are strings, and the entries are integers. then, sums all of the entries whose strings are names of planets, and returns this sum. ", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Takes a dictionary where the items are strings, and the entries are integers. then, sums all of the entries whose items are names of planets, and returns this sum. \n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 400, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student45", "submitted_text": "Takes a dictionary which we will call planets. If the dictionary key is 'Venus' or 'Mercury', add the value at that key to the sum. Return the sum.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Takes a dictionary which we will call planets. If the dictionary item is 'Venus' or 'Mercury', add the value at that item to the sum. Return the sum.\n    \"\"\"\n    ", "subset": "first_success", "original": "key"}
{"__index_level_0__": 401, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student46", "submitted_text": "The function will take in a dictionary where the keys are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    The function will take in a dictionary where the items are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.\n    \"\"\"\n    ", "subset": "first_failure", "original": "keys"}
{"__index_level_0__": 403, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student46", "submitted_text": "The function will take in a dictionary where the keys are strings and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    The function will take in a dictionary where the items are strings and integers are stored inside them. It will remove any items that are not associated with planets, then it will take all the integers stored inside and add them together and output that.\n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 409, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student53", "submitted_text": "loop through planets and if the element is == 'Venus' or 'Mercury' add value to a new list and return the sum of the new list. ", "prompt": "def planets_mass(planets):\n    \"\"\"\n    loop through planets and if the item is == 'Venus' or 'Mercury' add value to a new list and return the sum of the new list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "element"}
{"__index_level_0__": 410, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student53", "submitted_text": "loop through planets and if the key == 'Venus' or 'Mercury' add the values together and return this value", "prompt": "def planets_mass(planets):\n    \"\"\"\n    loop through planets and if the item == 'Venus' or 'Mercury' add the values together and return this value\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 411, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student55", "submitted_text": "Write a function that gets a dictionary of planets and their masses. All the planets masses in a dictionary using the name of the planet as the key. The function should return the sum of all the planets' masses.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Write a function that gets a dictionary of planets and their masses. All the planets masses in a dictionary using the name of the planet as the item. The function should return the sum of all the planets' masses.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 415, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student55", "submitted_text": "Write a function that gets a dictionary. The key of the dictionary is the name of the planet and the value is the mass. The function should sum up the masses of only the planets and returns the total. The sun and pluto are not planets.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Write a function that gets a dictionary. The item of the dictionary is the name of the planet and the value is the mass. The function should sum up the masses of only the planets and returns the total. The sun and pluto are not planets.\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 421, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student65", "submitted_text": "This function takes a dictionary. If an entry is a planet, then it adds the key to the total mass. The output is the total mass of all planets in the dictionary.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    This function takes a dictionary. If an item is a planet, then it adds the item to the total mass. The output is the total mass of all planets in the dictionary.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 430, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student8", "submitted_text": "The function returns a dictionary whose keys are keys from the first given dictionary and whose corresponding values are obtained by taking the values from the first given dictionary, matching it to a key in the second given dictionary, and taking the value at that corresponding key.\n", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    The function returns a dictionary whose items are items from the first given dictionary and whose corresponding values are obtained by taking the values from the first given dictionary, matching it to a item in the second given dictionary, and taking the value at that corresponding item.\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 431, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student11", "submitted_text": "by comparing two dictionaries: students and grades. If the values from students equals to the keys from grades, then sign the values from grades to students.", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    by comparing two dictionaries: students and grades. If the values from students equals to the items from grades, then sign the values from grades to students.\n    \"\"\"\n    ", "subset": "first_failure", "original": "keys"}
{"__index_level_0__": 433, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student11", "submitted_text": "by comparing two dictionaries: students and grades. If the values from students equals to the keys from grades, then sign the values from grades to update the values in students.", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    by comparing two dictionaries: students and grades. If the values from students equals to the items from grades, then sign the values from grades to update the values in students.\n    \"\"\"\n    ", "subset": "last_failure", "original": "keys"}
{"__index_level_0__": 437, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student22", "submitted_text": "takes in 2 dictionaries and uses the first one's values for the second one's key, and outputs a dictionary matching those up", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    takes in 2 dictionaries and uses the first one's values for the second one's item, and outputs a dictionary matching those up\n    \"\"\"\n    ", "subset": "first_success", "original": "key"}
{"__index_level_0__": 441, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student72", "submitted_text": "Return a dictionary with the key being the string from the first dictionary in the input. Go through the next dictionary in the input and find what the integer in the first dictionary in the input corresopnds to. Return that as what corresponds to the string in the ouput.", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Return a dictionary with the item being the string from the first dictionary in the input. Go through the next dictionary in the input and find what the integer in the first dictionary in the input corresopnds to. Return that as what corresponds to the string in the ouput.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 442, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student73", "submitted_text": "The values of the first dictionary become the keys of the second dictionary. the output is a dictionary that adds the key of the first dictionary with the corresponding value of the second dictionary. if the second dictionary has key value pairs that don't correspond with the first dictionary, do not add them to the output dictionary. ", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    The values of the first dictionary become the items of the second dictionary. the output is a dictionary that adds the item of the first dictionary with the corresponding value of the second dictionary. if the second dictionary has item value pairs that don't correspond with the first dictionary, do not add them to the output dictionary. \n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 451, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student23", "submitted_text": "This function takes in a list within a list, consisting of an integer in the outer list, and names as a string in the inner list. The output creates a dictionary where the key is the string and updates the dictionary with the value which is the integer that is given. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of an integer in the outer list, and names as a string in the inner list. The output creates a dictionary where the item is the string and updates the dictionary with the value which is the integer that is given. \n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 454, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student35", "submitted_text": "The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. The output is a dictionary where the keys are string names and the values are their corresponding numbers.", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. The output is a dictionary where the items are string names and the values are their corresponding numbers.\n    \"\"\"\n    ", "subset": "first_failure", "original": "keys"}
{"__index_level_0__": 455, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student35", "submitted_text": "The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. A dictionary is made where the keys are string names and the values are their corresponding numbers.The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. A dictionary is made where the items are string names and the values are their corresponding numbers.The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. \n    \"\"\"\n    ", "subset": "last_failure", "original": "keys"}
{"__index_level_0__": 456, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student40", "submitted_text": "the input will consist of a list of lists. an empty dictionary will be made. the strings will be keys in the dictionary and the numbers will be the values that correspond to each key. if a key appears twice, then the values will be added and will correspond to only one key.", "prompt": "def times_with(meetings):\n    \"\"\"\n    the input will consist of a list of lists. an empty dictionary will be made. the strings will be items in the dictionary and the numbers will be the values that correspond to each item. if a item appears twice, then the values will be added and will correspond to only one item.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 459, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student40", "submitted_text": "the input will consist of a list of lists. an empty dictionary will be made. each string within the list will be a  key. the numbers outside of each list will be the value for each key. if a key appears twice, then the values will be added and will correspond to only one key.", "prompt": "def times_with(meetings):\n    \"\"\"\n    the input will consist of a list of lists. an empty dictionary will be made. each string within the list will be a  item. the numbers outside of each list will be the value for each item. if a item appears twice, then the values will be added and will correspond to only one item.\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 460, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student44", "submitted_text": "Make a dictionary with keys: Alice, Bob, and Carol. \nFor every array in the array, add the value stored in index 0 to the keys that are stored in index 1. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    Make a dictionary with items: Alice, Bob, and Carol. \nFor every array in the array, add the value stored in index 0 to the items that are stored in index 1. \n    \"\"\"\n    ", "subset": "first_success", "original": "keys"}
{"__index_level_0__": 465, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student59", "submitted_text": "takes a list of lists as an input. creates an empty dictionary. for each list in the inputted list, takes each value in the [1] place and make it a key and add it to the created dictionary, then make the value of that key the value in the [0] place from the list", "prompt": "def times_with(meetings):\n    \"\"\"\n    takes a list of lists as an input. creates an empty dictionary. for each list in the inputted list, takes each value in the [1] place and make it a item and add it to the created dictionary, then make the value of that item the value in the [0] place from the list\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 470, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student63", "submitted_text": "The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has one of the names as the key, and the value is the sum of the numbers that are the first entry of each list that the name is found in. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has one of the names as the item, and the value is the sum of the numbers that are the first entry of each list that the name is found in. \n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 471, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student63", "submitted_text": "The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has a name from the name lists as the key, and the value is the sum of the numbers that are the first entry of each list that the list of names that has the name is found in. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has a name from the name lists as the item, and the value is the sum of the numbers that are the first entry of each list that the list of names that has the name is found in. \n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 472, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student64", "submitted_text": "In list inside of meetings, create a new dictionary with the key as name and the value as number outside of lists. For next list of lists, add number to keys in dictionary. If keys do not already exist, create new key.", "prompt": "def times_with(meetings):\n    \"\"\"\n    In list inside of meetings, create a new dictionary with the item as name and the value as number outside of lists. For next list of lists, add number to items in dictionary. If items do not already exist, create new item.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 473, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student64", "submitted_text": "For each meeting in meetings, look at index 1 for list of persons. Create a new dictionary with the key as name and the value as index 0 of list of persons. For next list of lists, add number to keys in dictionary. If keys do not already exist, create new key.", "prompt": "def times_with(meetings):\n    \"\"\"\n    For each meeting in meetings, look at index 1 for list of persons. Create a new dictionary with the item as name and the value as index 0 of list of persons. For next list of lists, add number to items in dictionary. If items do not already exist, create new item.\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 474, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student69", "submitted_text": "Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a item and the number is a value. \n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 475, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student69", "submitted_text": "Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. if the name appears more than once, add the new number to the previous number", "prompt": "def times_with(meetings):\n    \"\"\"\n    Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a item and the number is a value. if the name appears more than once, add the new number to the previous number\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 476, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student71", "submitted_text": "\nTurns list of names into dictionary keys. Takes in meeting number as a dictionary value, and iterates through list of names and adds any additional meeting output numbers to each dictionary keys", "prompt": "def times_with(meetings):\n    \"\"\"\n    \nTurns list of names into dictionary items. Takes in meeting number as a dictionary value, and iterates through list of names and adds any additional meeting output numbers to each dictionary items\n    \"\"\"\n    ", "subset": "first_failure", "original": "keys"}
{"__index_level_0__": 613, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student15", "submitted_text": "Has a list of all months in order. Index 0 of the list is '0', and the rest of the indexes corresponding to the correct month. Has a dictionary matching a season to a month. \nfor each key, value in the dictionary, if the inputted month is in the list of values, returns the key that is matched with that value.", "prompt": "def getSeason(month):\n    \"\"\"\n    Has a list of all months in order. Index 0 of the list is '0', and the rest of the indexes corresponding to the correct month. Has a dictionary matching a season to a month. \nfor each item, value in the dictionary, if the inputted month is in the list of values, returns the item that is matched with that value.\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 752, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student27", "submitted_text": "The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. They don't have to be in the same order or same length. Return a dictionary with the string as the key and the position of the string as the value.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. They don't have to be in the same order or same length. Return a dictionary with the string as the item and the position of the string as the value.\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 754, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student29", "submitted_text": "For each string within the list, parse the string until the previous letters make up a complete word. Return that word as the key and its index as its value in a dictionary. Else, return an empty dictionary", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    For each string within the list, parse the string until the previous letters make up a complete word. Return that word as the item and its index as its value in a dictionary. Else, return an empty dictionary\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 760, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student49", "submitted_text": "Given a two lists labeled puzzle and wordList, for each word in the wordList, if the same letters appear in puzzle, create a dictionary with the corresponding word in WordList as the key and the position of where the letters show up in puzzle as the value. ", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Given a two lists labeled puzzle and wordList, for each word in the wordList, if the same letters appear in puzzle, create a dictionary with the corresponding word in WordList as the item and the position of where the letters show up in puzzle as the value. \n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 763, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student56", "submitted_text": "compares first list to second list and counts if the first list's values' letters match a value in the second list. If they match perfectly, returns 3 as a count\nreturns dictionary with keys as the second list, and values as the counts", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    compares first list to second list and counts if the first list's values' letters match a value in the second list. If they match perfectly, returns 3 as a count\nreturns dictionary with items as the second list, and values as the counts\n    \"\"\"\n    ", "subset": "first_failure", "original": "keys"}
{"__index_level_0__": 767, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student66", "submitted_text": "if the letters of the strings in the first array list are in the array list above then create a dictionary where the second array list string is the key and the index is the definition. ", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    if the letters of the strings in the first array list are in the array list above then create a dictionary where the second array list string is the item and the index is the definition. \n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 768, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student66", "submitted_text": "if the letters contained in the first string are entirely contained in a string in the second array list. then create a dictionary where the that string is the key and the index is within that key", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    if the letters contained in the first string are entirely contained in a string in the second array list. then create a dictionary where the that string is the item and the index is within that item\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 774, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student70", "submitted_text": "create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a item to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 777, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student70", "submitted_text": "create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain the same letters in any order as a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain the same letters in any order as a string from wordList, add that string from wordList as a item to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 778, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student78", "submitted_text": "given that puzzle is a list of strings, check if the letters of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that puzzle is a list of strings, check if the letters of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the item as the sting in wordList and the output as the position of the string in puzzle\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1066, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student3", "submitted_text": "create a function with 3 input word(string), line_number (int) and map (dict). In map dictionary add new element of dictionary with key are word which given the corresponding list of line number", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    create a function with 3 input word(string), line_number (int) and map (dict). In map dictionary add new element of dictionary with item are word which given the corresponding list of line number\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1068, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student3", "submitted_text": "create a function with 3 input word(string), line_number (int) and map (dict). In map dictionary create new key word", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    create a function with 3 input word(string), line_number (int) and map (dict). In map dictionary create new item word\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 1069, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student4", "submitted_text": "adds the word and line number to a dictionary, with the word as the key and line_number as the value ", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    adds the word and line number to a dictionary, with the word as the item and line_number as the value \n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1070, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student4", "submitted_text": "adds the word and line number to a dictionary, with the word as the key and line_number as the value, returns the appended dictionary", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    adds the word and line number to a dictionary, with the word as the item and line_number as the value, returns the appended dictionary\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1071, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student10", "submitted_text": "Function would check if the string word is a key in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new list as a value.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Function would check if the string word is a item in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new item, and add the line_number as the first item of a new list as a value.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1072, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student10", "submitted_text": "Function would check if the string word is a key in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new list as a value. Returns an updated map.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Function would check if the string word is a item in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new item, and add the line_number as the first item of a new list as a value. Returns an updated map.\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1075, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student18", "submitted_text": "If the word already exist in the map, add the line_number at the very end of the list for the word in the map. If word does not exist in the map, create the word as a category at the end of the map and add line_number in the list for the word. ", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    If the word already exist in the map, add the line_number at the very end of the list for the word in the map. If word does not exist in the map, create the word as a item at the end of the map and add line_number in the list for the word. \n    \"\"\"\n    ", "subset": "first_failure", "original": "category"}
{"__index_level_0__": 1079, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student25", "submitted_text": "This function adds the input \"word\" and \"line_number to the dictionary \"map\". \"word\" is the key and \"line_number\" is the value. \"line_number\" will be a list in the dictionary.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    This function adds the input \"word\" and \"line_number to the dictionary \"$map\". \"word\" is the item and \"line_number\" is the value. \"line_number\" will be a list in the dictionary.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1080, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student25", "submitted_text": "This function adds the input \"word\" and \"line_number to the dictionary \"map\". \"word\" is the key and \"line_number\" is the value. \"line_number\" will be a list in the dictionary. The function returns the dictionary.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    This function adds the input \"word\" and \"line_number to the dictionary \"map\". \"word\" is the item and \"line_number\" is the value. \"line_number\" will be a list in the dictionary. The function returns the dictionary.\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1084, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student30", "submitted_text": "If word is already present in map, add line_number to the array corresponding to the \"word\" key in map. \n\nOtherwise, add line_number as a new value to map, with word as its corresponding key.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    If word is already present in map, add line_number to the array corresponding to the \"word\" item in map. \n\nOtherwise, add line_number as a new value to map, with word as its corresponding item.\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 1085, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student41", "submitted_text": "Adds the given word as a key with the given line number as a value to the inputted dictionary.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Adds the given word as a item with the given line number as a value to the inputted dictionary.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1086, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student41", "submitted_text": "Adds the given word as a key with the given number as a value to the inputted dictionary. Returns the new dictionary.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Adds the given word as a item with the given number as a value to the inputted dictionary. Returns the new dictionary.\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1088, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student51", "submitted_text": "Add to the dictionary with word as the key and line number as the value", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Add to the dictionary with word as the item and line number as the value\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1089, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student51", "submitted_text": "Add to the dictionary with word as the key and line number as the value. Return map.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Add to the dictionary with word as the item and line number as the value. Return map.\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1094, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student27", "submitted_text": "A dict object contains keys and values. Check if \"Aspen\" is one of the keys in a dict. Return \"Yup\" if it is a key, \"Nope\" if it is not a key.", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    A dict object contains items and values. Check if \"Aspen\" is one of the items in a dict. Return \"Yup\" if it is a item, \"Nope\" if it is not a item.\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1095, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student29", "submitted_text": "Return \"Yup\" if any of the dictionary keys are \"Aspen\", return \"Nope\" otherwise", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    Return \"Yup\" if any of the dictionary items are \"Aspen\", return \"Nope\" otherwise\n    \"\"\"\n    ", "subset": "first_success", "original": "keys"}
{"__index_level_0__": 1097, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student34", "submitted_text": "If \"Aspen\" appears as an item in the dictionary, output the string \"Yup\", and if it does not appear output the string \"Nope\"", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If \"Aspen\" appears as an item in the dictionary, output the string \"Yup\", and if it does not appear output the string \"Nope\"\n    \"\"\"\n    ", "subset": "first_failure", "original": "item"}
{"__index_level_0__": 1106, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student56", "submitted_text": "checks if all the keys in the dictionary are aspen trees", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    checks if all the items in the dictionary are aspen trees\n    \"\"\"\n    ", "subset": "first_failure", "original": "keys"}
{"__index_level_0__": 1107, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student62", "submitted_text": "if \"Aspen\" is a key in the dictionary, return \"Yup\". If \"Aspen is not a key in the dictionary, return \"Nope\"", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    if \"Aspen\" is a item in the dictionary, return \"Yup\". If \"Aspen is not a item in the dictionary, return \"Nope\"\n    \"\"\"\n    ", "subset": "first_success", "original": "key"}
{"__index_level_0__": 1108, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student66", "submitted_text": "if the sting Aspen or Beech appears as a key in the dictionary then return Yup as a string if they do not appear then return Nope as a string", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    if the sting Aspen or Beech appears as a item in the dictionary then return Yup as a string if they do not appear then return Nope as a string\n    \"\"\"\n    ", "subset": "first_success", "original": "key"}
{"__index_level_0__": 1114, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student68", "submitted_text": "given an array formatted so that there is a String treename key and a number associated with that key, check if there is value that has a treename \"Aspen\" whose number is greater than 0. return \"Yup\" if it passes the check and \"Nope\" if it doesn't ", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    given an array formatted so that there is a String treename item and a number associated with that item, check if there is value that has a treename \"Aspen\" whose number is greater than 0. return \"Yup\" if it passes the check and \"Nope\" if it doesn't \n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1117, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student68", "submitted_text": "given a dictionary check if there is a key, \"Aspen\". return \"Yup\" if it passes the check and \"Nope\" if it doesn't ", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    given a dictionary check if there is a item, \"Aspen\". return \"Yup\" if it passes the check and \"Nope\" if it doesn't \n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1142, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student27", "submitted_text": "The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Sort the dictionaries by \"year\" in an ascending order. Return the updated list.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    The input will be a list of dictionaries and a string. Remove all dictionaries where the item \"author\" does not match the string. Sort the dictionaries by \"year\" in an ascending order. Return the updated list.\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1153, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student49", "submitted_text": "Given a list of dictionaries and a string, return a list of the dictionaries where the string is the value of the author key.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Given a list of dictionaries and a string, return a list of the dictionaries where the string is the value of the author item.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1155, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student49", "submitted_text": "Given a list of dictionaries and a string, return a list of the dictionaries where the string is the value of the author key and each dictionary in the list is sorted by ascending the values in the year key.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Given a list of dictionaries and a string, return a list of the dictionaries where the string is the value of the author item and each dictionary in the list is sorted by ascending the values in the year item.\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1161, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student66", "submitted_text": "Sort the array list by the key year with smallest number first in the array list first remove the book 'The Voyage Out' unless there are two dictionaries within the array list then remove the other dictionary.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Sort the array list by the item year with smallest number first in the array list first remove the book 'The Voyage Out' unless there are two dictionaries within the array list then remove the other dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 1167, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student68", "submitted_text": "given a dictionary list and a string, return all the dictionaries whose 'author' key value equals the input string ", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    given a dictionary list and a string, return all the dictionaries whose 'author' item value equals the input string \n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1169, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student68", "submitted_text": "given a dictionary list and a string, return all the dictionaries whose 'author' key value equals the input string in the order from lowest to highest value of their 'year' key value ", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    given a dictionary list and a string, return all the dictionaries whose 'author' item value equals the input string in the order from lowest to highest value of their 'year' item value \n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1170, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student70", "submitted_text": "return all the entries in the dictionary where the value for the 'author' key is equal to the input writer.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    return all the entries in the dictionary where the value for the 'author' item is equal to the input writer.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1174, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student70", "submitted_text": "return all the entries in the input list where the value for the 'author' key is equal to the input writer. Sort the entries in order of increasing year.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    return all the entries in the input list where the value for the 'author' item is equal to the input writer. Sort the entries in order of increasing year.\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1175, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student78", "submitted_text": "if books is a list of dictionaries, output a list of dictionaries where the input writer matches the key author", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    if books is a list of dictionaries, output a list of dictionaries where the input writer matches the item author\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1180, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student23", "submitted_text": "This function takes in a list of dictionaries that have the keys:  nominee, the wins, and noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success within each dictionary.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a list of dictionaries that have the items:  nominee, the wins, and noms. A new item is given to each dictionary which is the success item. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success within each dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "attribute"}
{"__index_level_0__": 1181, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student33", "submitted_text": "The function takes in a list of dictionaries. The function divides the integer in the third place in the dictionary by the integer in the fourth place in the dictionary, adding a new entry to that dictionary called \"success\" with the output value. It then sorts the dictionary entries by the value in \"success,\" highest to lowest. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries. The function divides the integer in the third place in the dictionary by the integer in the fourth place in the dictionary, adding a new item to that dictionary called \"success\" with the output value. It then sorts the dictionary entries by the value in \"success,\" highest to lowest. \n    \"\"\"\n    ", "subset": "first_failure", "original": "entry"}
{"__index_level_0__": 1183, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student33", "submitted_text": "The function takes in a list of dictionaries. The function divides the value for \"wins\" in the dictionary by the value for \"noms\" in the dictionary, adding a new entry to that dictionary called \"success\" with the output value truncated to two decimal places. It then sorts the dictionary entries by the value in \"success,\" highest to lowest, returning the dictionaries each on a separate line. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries. The function divides the value for \"wins\" in the dictionary by the value for \"noms\" in the dictionary, adding a new item to that dictionary called \"success\" with the output value truncated to two decimal places. It then sorts the dictionary entries by the value in \"success,\" highest to lowest, returning the dictionaries each on a separate line. \n    \"\"\"\n    ", "subset": "last_failure", "original": "entry"}
{"__index_level_0__": 1184, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student35", "submitted_text": "The nominations is a list of dictionaries. The function iterates through the dictioanries backwards. A new variable 'success' is created which computes (wins/noms). A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a list of dictionaries. The function iterates through the dictioanries backwards. A new item 'success' is created which computes (wins/noms). A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.\n    \"\"\"\n    ", "subset": "first_failure", "original": "variable"}
{"__index_level_0__": 1187, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student35", "submitted_text": "The nominations is a list of dictionaries. The function iterates through the dictioanries backwards using a for loop. A new variable 'success' is created which computes (wins/noms) (noms is the key in the dictionary) during each loop run for every dictionary. A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a list of dictionaries. The function iterates through the dictioanries backwards using a for loop. A new item 'success' is created which computes (wins/noms) (noms is the item in the dictionary) during each loop run for every dictionary. A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 1188, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student40", "submitted_text": "the function will divide the number of wins by the number of noms. this will be defined by the new variable 'success'. the function will then return a list that orders the input in increasing order of success values", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    the function will divide the number of wins by the number of noms. this will be defined by the new item 'success'. the function will then return a list that orders the input in increasing order of success values\n    \"\"\"\n    ", "subset": "first_failure", "original": "variable"}
{"__index_level_0__": 1190, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student40", "submitted_text": "the input is a list of dictionaries. the function will divide the value within key 'wins' by the value within key 'noms'. this number will be rounded to two decimal values. the new number will be stores as a new key, 'success'. the function will then return a list that reorders the dictionaries within the original list, in order of highest success value to lowest success value.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    the input is a list of dictionaries. the function will divide the value within item 'wins' by the value within item 'noms'. this number will be rounded to two decimal values. the new number will be stores as a new item, 'success'. the function will then return a list that reorders the dictionaries within the original list, in order of highest success value to lowest success value.\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1193, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student50", "submitted_text": "Add a new part to each element in the list of dictionaries called \"success\". Calculate success by dividing wins by noms. Return in reverse alphabetical order.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Add a new item to each element in the list of dictionaries called \"success\". Calculate success by dividing wins by noms. Return in reverse alphabetical order.\n    \"\"\"\n    ", "subset": "first_failure", "original": "part"}
{"__index_level_0__": 1195, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student50", "submitted_text": "Add a new element to each nominee's dictionary called \"success\". Calculate success by dividing the number of wins by the number of losses. Return in reverse order.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Add a new item to each nominee's dictionary called \"success\". Calculate success by dividing the number of wins by the number of losses. Return in reverse order.\n    \"\"\"\n    ", "subset": "last_failure", "original": "element"}
{"__index_level_0__": 1199, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student60", "submitted_text": "This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added item of an average of wins to nominations. \n    \"\"\"\n    ", "subset": "first_failure", "original": "parameter"}
{"__index_level_0__": 1201, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student60", "submitted_text": "This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions output is a single 2d list.\n\nAs an example. Given  [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}] as a parameter this function outputs [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added item of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions output is a single 2d list.\n\nAs an example. Given  [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}] as a parameter this function outputs [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\n    \"\"\"\n    ", "subset": "last_failure", "original": "parameter"}
{"__index_level_0__": 1202, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student63", "submitted_text": "The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms'. The outputted list will also be arranged in descending order based on the value of 'success'.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional item for each dictionary called 'success', for which the value is the result of dividing the value of the item 'wins' and the value of the item 'noms'. The outputted list will also be arranged in descending order based on the value of 'success'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1203, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student63", "submitted_text": "The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms', rounded to the second decimal place. The outputted list will also be arranged in descending order based on the value of 'success'.  ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional item for each dictionary called 'success', for which the value is the result of dividing the value of the item 'wins' and the value of the item 'noms', rounded to the second decimal place. The outputted list will also be arranged in descending order based on the value of 'success'.  \n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1204, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student64", "submitted_text": "Create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Sort by success in descending order.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Create a new dictionary and create a new item value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Sort by success in descending order.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1206, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student64", "submitted_text": "For each dictionary in list, create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Round success to nearest 2 decimal places. Sort by success in descending order. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    For each dictionary in list, create a new dictionary and create a new item value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Round success to nearest 2 decimal places. Sort by success in descending order. \n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1207, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student69", "submitted_text": "Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new item 'success'. Add the 'success' item to each dictionary in the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1209, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student69", "submitted_text": "Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list, rounded to 2 decimal places. Sort each dictionary in the list alphabetically based on the 'nominee' key. then reverse the order.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new item 'success'. Add the 'success' item to each dictionary in the list, rounded to 2 decimal places. Sort each dictionary in the list alphabetically based on the 'nominee' item. then reverse the order.\n    \"\"\"\n    ", "subset": "last_success", "original": "key"}
{"__index_level_0__": 1210, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student71", "submitted_text": "Access each list from a list of list, and their respective 'wins' and 'noms'. Divide 'wins' with 'noms' to create a new key 'success'. Arrange the list of list from the highest 'success' key. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Access each list from a list of list, and their respective 'wins' and 'noms'. Divide 'wins' with 'noms' to create a new item 'success'. Arrange the list of list from the highest 'success' item. \n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1218, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student76", "submitted_text": "takes the information in the dictionary and positions the different lists based on a new variable called 'success' which is inputted at the end and is the number of 'wins' divided by the number of 'noms'", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    takes the information in the dictionary and positions the different lists based on a new item called 'success' which is inputted at the end and is the number of 'wins' divided by the number of 'noms'\n    \"\"\"\n    ", "subset": "first_failure", "original": "variable"}
{"__index_level_0__": 1219, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student79", "submitted_text": "you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by noms. you are then going to sort the dictionary according to decreasing success.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a list of dictionaries as an input. as an output you are going to add another item called success to each dictionary which is the wins divided by noms. you are then going to sort the dictionary according to decreasing success.\n    \"\"\"\n    ", "subset": "first_failure", "original": "variable"}
{"__index_level_0__": 1228, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student8", "submitted_text": "Finds a dictionary in the given list with a key of \"origin\" that has the same given string as its value, then takes that dictionary and saves the value stored in \n\nReturns a list that ", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    Finds a dictionary in the given list with a item of \"origin\" that has the same given string as its value, then takes that dictionary and saves the value stored in \n\nReturns a list that \n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1229, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student11", "submitted_text": "this function will find the start from a key called 'origin' from input list of dictionary named flights. After find this it will find the value from key named 'dest' from same dictionary, and save this by create an output call x. Then find x in flight to see if it's in one of the dictionary's key 'origin'", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    this function will find the start from a item called 'origin' from input list of dictionary named flights. After find this it will find the value from item named 'dest' from same dictionary, and save this by create an output call x. Then find x in flight to see if it's in one of the dictionary's item 'origin'\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1235, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student22", "submitted_text": "takes in a list of dictionaries and outputs a list of values that can be made with two key value pair matches", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    takes in a list of dictionaries and outputs a list of values that can be made with two item value pair matches\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1348, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student35", "submitted_text": "lexicon is a dictionary in which keys are English words and their corresponding values are the translations to some other language. The function is supposed to convert the sentence provided to the other language. For this, the function is supposed to compare each word of the sentence with the dictionary keys and find the value of that key. If a word does not match with any key, the value 'UNK' is assigned. After all the values are derived, a new string is made with those values.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    lexicon is a dictionary in which items are English words and their corresponding values are the translations to some other language. The function is supposed to convert the sentence provided to the other language. For this, the function is supposed to compare each word of the sentence with the dictionary items and find the value of that item. If a word does not match with any item, the value 'UNK' is assigned. After all the values are derived, a new string is made with those values.\n    \"\"\"\n    ", "subset": "first_success", "original": "key"}
{"__index_level_0__": 1349, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student40", "submitted_text": "the function will use the dictionary provided. the string provided will correspond to the keys of the dictionary. the function will return a new string that contains values that correspond to the keys. if a key is not in the string, then the return value will be 'UNK'", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    the function will use the dictionary provided. the string provided will correspond to the items of the dictionary. the function will return a new string that contains values that correspond to the items. if a item is not in the string, then the return value will be 'UNK'\n    \"\"\"\n    ", "subset": "first_success", "original": "key"}
{"__index_level_0__": 1350, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student44", "submitted_text": "Separate the string in the second argument between the white spaces and for each smaller string, search if there's a key that matches in the dictionary in the first argument. If there is a matching key, output its value. If there is no key found, output UNK. For each output, separate by a white space. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Separate the string in the second argument between the white spaces and for each smaller string, search if there's a item that matches in the dictionary in the first argument. If there is a matching item, output its value. If there is no item found, output UNK. For each output, separate by a white space. \n    \"\"\"\n    ", "subset": "first_success", "original": "key"}
{"__index_level_0__": 1359, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student63", "submitted_text": "The function takes in a dictionary and a string for which each word in the string is a key in the dictionary. It outputs a string that substitutes the original word for the dictionary value associated with that key. If a word in the original string is not found in the dictionary, the substituted word will be 'UNK'.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    The function takes in a dictionary and a string for which each word in the string is a item in the dictionary. It outputs a string that substitutes the original word for the dictionary value associated with that item. If a word in the original string is not found in the dictionary, the substituted word will be 'UNK'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1360, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student64", "submitted_text": "For each word in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    For each word in sentence, find item in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key value"}
{"__index_level_0__": 1362, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student64", "submitted_text": "For every word in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    For every word in sentence, find item in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.\n    \"\"\"\n    ", "subset": "last_failure", "original": "key value"}
{"__index_level_0__": 1363, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student69", "submitted_text": "Enter a string. Separate the string on spaces and add each group of strings to a list. if the word in the list matches a key in the dictionary, print the value of that key.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Enter a string. Separate the string on spaces and add each group of strings to a list. if the word in the list matches a item in the dictionary, print the value of that item.\n    \"\"\"\n    ", "subset": "first_failure", "original": "key"}
{"__index_level_0__": 1364, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student69", "submitted_text": "Enter a string. Separate the string on spaces and add each word to a list. For every word in the list, if the word matches a key in the dictionary, print the value of that key.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Enter a string. Separate the string on spaces and add each word to a list. For every word in the list, if the word matches a item in the dictionary, print the value of that item.\n    \"\"\"\n    ", "subset": "last_failure", "original": "key"}
{"__index_level_0__": 1365, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student71", "submitted_text": "Takes in a given dictionary in which keys are English words and values are French translations and English sentence. Output is the French translation of the English sentence. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Takes in a given dictionary in which items are English words and values are French translations and English sentence. Output is the French translation of the English sentence. \n    \"\"\"\n    ", "subset": "first_failure", "original": "keys"}
