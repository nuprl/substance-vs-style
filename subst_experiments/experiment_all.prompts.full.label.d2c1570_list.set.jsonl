{"__index_level_0__": 0, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student1", "submitted_text": "takes a list of strings, integers, and floats and returns the sum of all the integers and floats.", "prompt": "def add_up(arr):\n    \"\"\"\n    takes a set of strings, integers, and floats and returns the sum of all the integers and floats.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 76, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student27", "submitted_text": "The input will be a list of integers. Return 0 if the list is empty. Otherwise, subtract the sum of all the integers with odd positions from the sum of all the integers with even positions.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    The input will be a set of integers. Return 0 if the set is empty. Otherwise, subtract the sum of all the integers with odd positions from the sum of all the integers with even positions.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 114, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers and returns a list with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new string", "prompt": "def convert(lst):\n    \"\"\"\n    takes a set of numbers and returns a set with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new string\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 208, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student3", "submitted_text": "change the order of the first and third element of the list", "prompt": "def order_strings(lst):\n    \"\"\"\n    change the order of the first and third element of the set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 235, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student12", "submitted_text": "For each element in the list lst, if the element is a string, append the number num to the end of the string. If the element is an integer, add num to it. If it is any other type, do not do anything to it.\n", "prompt": "def add_int(lst, num):\n    \"\"\"\n    For each element in the set lst, if the element is a string, append the number num to the end of the string. If the element is an integer, add num to it. If it is any other type, do not do anything to it.\n\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 290, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student0", "submitted_text": "takes in a list of numbers. returns the list of numbers without odd integer numbers.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    takes in a set of numbers. returns the set of numbers without odd integer numbers.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 351, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student12", "submitted_text": "Using the dictionary provided, replace each letter (which is the key in the dictionary)in the list with the value. If the letter is not found in the dictionary's keys, replace that letter with None. Return the resulting list.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Using the dictionary provided, replace each letter (which is the key in the dictionary)in the set with the value. If the letter is not found in the dictionary's keys, replace that letter with None. Return the resulting set.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 369, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student12", "submitted_text": "Return true if the list contains the letter Q or U, else return false", "prompt": "def has_qu(lst):\n    \"\"\"\n    Return true if the set contains the letter Q or U, else return false\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 425, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student2", "submitted_text": "This function prints a new dictionary containing the strings that appear in the first dictionary the lists of stings that appear in the second dictionary", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    This function prints a new dictionary containing the strings that appear in the first dictionary the sets of stings that appear in the second dictionary\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 446, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student23", "submitted_text": "This function takes in a list within a list, consisting of the age as an integer, and names as a string. The output creates a dictionary where the age given is the value for the names given ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a set within a set, consisting of the age as an integer, and names as a string. The output creates a dictionary where the age given is the value for the names given \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 491, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student2", "submitted_text": "this function returns a list for the amount of times the string 'Meep' appears followed by the amount of times the string 'Morp' appears", "prompt": "def meeps_morps(items):\n    \"\"\"\n    this function returns a set for the amount of times the string 'Meep' appears followed by the amount of times the string 'Morp' appears\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 539, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student12", "submitted_text": "Modify each word in the list by taking the ending substring and replacing it with the letter s", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Modify each word in the set by taking the ending substring and replacing it with the letter s\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 648, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student2", "submitted_text": "This function pints a list containing strings of every value from the input", "prompt": "def assessVowels(s):\n    \"\"\"\n    This function pints a set containing strings of every value from the input\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 676, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student23", "submitted_text": "This function takes an array of letters either X, O, or an empty value. If the input gets all values X that are across, vertical, or diagonal. It is considered as True.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    This function takes an set of letters either X, O, or an empty value. If the input gets all values X that are across, vertical, or diagonal. It is considered as True.\n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 705, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student27", "submitted_text": "Calculate the total value of a list of ice cream. The input will be a list of strings, and each string contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each string.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Calculate the total value of a set of ice cream. The input will be a set of strings, and each string contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each string.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 750, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student27", "submitted_text": "The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. Return a dictionary with the string as the key and the position of the string as the value.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" set and a \"wordList\" set. They consist of strings and have equal length. Check if the string in the puzzle set contains all the characters of the string in the wordList set. Return a dictionary with the string as the key and the position of the string as the value.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 783, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student7", "submitted_text": "Iterates through a guess list\n\n0 \n1\n2\n3...1  letter in the right place\n4... 2 letters in the right place \n6 ... 3 letters in the right place", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Iterates through a guess set\n\n0 \n1\n2\n3...1  letter in the right place\n4... 2 letters in the right place \n6 ... 3 letters in the right place\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 811, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student27", "submitted_text": "There will be a list of strings. Count and return the number of \"&\" within those strings.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    There will be a set of strings. Count and return the number of \"&\" within those strings.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 830, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student12", "submitted_text": "For each letter in sentence s, replace the letter with the character c if the index of the letter is in list l", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    For each letter in sentence s, replace the letter with the character c if the index of the letter is in set l\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 947, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student27", "submitted_text": "The input will be a list of lists, call it \"mat\" and two integers, call them \"i\" and \"n\". For each list in mat, replace the integer at position i with the integer n.", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    The input will be a set of sets, call it \"mat\" and two integers, call them \"i\" and \"n\". For each set in mat, replace the integer at position i with the integer n.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 963, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student12", "submitted_text": "Combine each of the respective lists inside each list provided", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Combine each of the respective sets inside each set provided\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1120, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student1", "submitted_text": "takes a string, list of characters, and a single character called the sep, where every time sometime from the list of characters shows up in the string, it will be replaced by the sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    takes a string, set of characters, and a single character called the sep, where every time sometime from the set of characters shows up in the string, it will be replaced by the sep.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1141, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student27", "submitted_text": "The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Return the updated list.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    The input will be a set of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Return the updated set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1178, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student23", "submitted_text": "This function takes in a list of dictionaries that have the nominee, the amount of wins, and the amount of noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a set of dictionaries that have the nominee, the amount of wins, and the amount of noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The sets are then sorted by the highest success.\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 1225, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student5", "submitted_text": "this function will take a list of flights and the starting city and return the possible layovers with the staring city", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    this function will take a set of flights and the starting city and return the possible layovers with the staring city\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1241, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student12", "submitted_text": "Create a list of the 0th element in the list within the list if the 2nd element says \"Physics\". Sort the list from least to greatest by looking at the 1st value in the list within the big list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Create a set of the 0th element in the set within the set if the 2nd element says \"Physics\". Sort the set from least to greatest by looking at the 1st value in the set within the big set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1308, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student23", "submitted_text": "This function takes in a list of the item purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the lists are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function takes in a set of the item purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the sets are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 1372, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student1", "submitted_text": "takes a list of list, which contains a score and a name, and returns the top score.", "prompt": "def topScores(lst):\n    \"\"\"\n    takes a set of set, which contains a score and a name, and returns the top score.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1461, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student23", "submitted_text": "This function inputs two lists. The letter at the end of the first dictionary adds on the lowest number of the second dictionary. This keeps going and forms a new list with all the combined letters and numbers. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs two sets. The letter at the end of the first dictionary adds on the lowest number of the second dictionary. This keeps going and forms a new set with all the combined letters and numbers. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1540, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student1", "submitted_text": "takes a list of words, reverses the words, and puts them in alphabetical order.", "prompt": "def reverseWords(words):\n    \"\"\"\n    takes a set of words, reverses the words, and puts them in alphabetical order.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1583, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student0", "submitted_text": "takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of num times 100 divided by the length of the first list and concatenate a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    takes in two sets. If the sets have the same value at the same index, add one to a num variable. return the string of num times 100 divided by the length of the first set and concatenate a percent sign.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1630, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student2", "submitted_text": "This function determines if all the lists contain the same amount of strings", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    This function determines if all the sets contain the same amount of strings\n    \"\"\"\n    ", "subset": "first_success", "original": "lists"}
{"__index_level_0__": 1645, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student1", "submitted_text": "takes a list of integers, and a value and raises all the integers in the list to the power of that value.", "prompt": "def exp(lst, val):\n    \"\"\"\n    takes a set of integers, and a value and raises all the integers in the set to the power of that value.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 75, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student65", "submitted_text": "For each list in an array, this function takes each entry in the list and adds them to the total if the entry is a number. Otherwise, it adds 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    For each set in an set, this function takes each entry in the set and adds them to the total if the entry is a number. Otherwise, it adds 0.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 113, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student78", "submitted_text": "given a list, convert each item in the list to an integer. subract the second integer from the first and then with that total, add the next integer. with that total subtract the next integer. repeat this until all integers in the list have been either added or subtracted and output the final total. if the list is blank, output 0.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    given a set, convert each item in the set to an integer. subract the second integer from the first and then with that total, add the next integer. with that total subtract the next integer. repeat this until all integers in the set have been either added or subtracted and output the final total. if the set is blank, output 0.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 206, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student52", "submitted_text": "If there is \"0\" in lst, then put \"A\" into new list; If there is \"1\" in lst, then put \"B\" into new list; If there is \"2\" in lst, then put \"C\" into new list; If there is \"4\" in lst, then put \"D\" into new list. Return new list.", "prompt": "def convert(lst):\n    \"\"\"\n    If there is \"0\" in lst, then put \"A\" into new set; If there is \"1\" in lst, then put \"B\" into new set; If there is \"2\" in lst, then put \"C\" into new set; If there is \"4\" in lst, then put \"D\" into new set. Return new set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 255, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student77", "submitted_text": "Given a list of numbers, lists, and strings as well as a number, append the number to the strings in the list, add the number to the numbers in the list, and do nothing to the lists in the list.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Given a set of numbers, sets, and strings as well as a number, append the number to the strings in the set, add the number to the numbers in the set, and do nothing to the sets in the set.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 368, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student77", "submitted_text": "Given a dictionary with key/value pairs and a list of either strings or numbers, return the values in the dictionary if they are included in the list, and return None if they are not.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Given a dictionary with key/value pairs and a set of either strings or numbers, return the values in the dictionary if they are included in the set, and return None if they are not.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 382, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student77", "submitted_text": "Given a list of letters, return \"True\" if the list has the letter \"Q\" or \"U\" or both, and \"False\" if the list does not.", "prompt": "def has_qu(lst):\n    \"\"\"\n    Given a set of letters, return \"True\" if the set has the letter \"Q\" or \"U\" or both, and \"False\" if the set does not.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 490, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student79", "submitted_text": "you are going to have a nested list as an input. the inner most lists are going to have strings. next to them in an outer list they will have an integer. your goal is to create a dictionary with the keys of names in the inner most lists and with the corresponding number and return.", "prompt": "def times_with(meetings):\n    \"\"\"\n    you are going to have a nested set as an input. the inner most sets are going to have strings. next to them in an outer set they will have an integer. your goal is to create a dictionary with the keys of names in the inner most sets and with the corresponding number and return.\n    \"\"\"\n    ", "subset": "last_failure", "original": "lists"}
{"__index_level_0__": 560, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student77", "submitted_text": "Given a list of words and a string that specifies an ending, remove the ending from the words inside the list, and instead append 's' to the new words with their original endings having been removed.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Given a set of words and a string that specifies an ending, remove the ending from the words inside the set, and instead append 's' to the new words with their original endings having been removed.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 675, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student74", "submitted_text": "puts all the vowels of a string in a list, including capital and lower case letters", "prompt": "def assessVowels(s):\n    \"\"\"\n    puts all the vowels of a string in a set, including capital and lower case letters\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 704, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student79", "submitted_text": "you will have a list of lists consisting of X and O as strings. if in a single list all the elements are X you return true, else you return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    you will have a set of sets consisting of X and O as strings. if in a single set all the elements are X you return true, else you return false.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 749, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student78", "submitted_text": "given a list of strings, split each string by \\. for each new string, if it starts with t, eliminate the t. next find the sting that contains a number, convert it to a float, and add it to running total. output this total", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given a set of strings, split each string by \\. for each new string, if it starts with t, eliminate the t. next find the sting that contains a number, convert it to a float, and add it to running total. output this total\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 780, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student78", "submitted_text": "given that puzzle is a list of strings, check if the letters of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that puzzle is a set of strings, check if the letters of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 810, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student65", "submitted_text": "For each word in guessList, this function returns a list of scores compared to the hiddenWord. For every letter in the right place it adds 2 points, and for every letter which is in hiddenWord but not in the right place it adds 1 point.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    For each word in guessList, this function returns a set of scores compared to the hiddenWord. For every letter in the right place it adds 2 points, and for every letter which is in hiddenWord but not in the right place it adds 1 point.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 829, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student78", "submitted_text": "given a list of strings, concatenate the strings into one long string. read through the long string and count the number of '&' found. output that number.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    given a set of strings, concatenate the strings into one long string. read through the long string and count the number of '&' found. output that number.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 857, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student77", "submitted_text": "Given a string, a letter, and locations specified in a list, remove the letters in the string in the locations specified in the list, and replace them with the letter. If the location is outside the range of the list, do nothing.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Given a string, a letter, and locations specified in a set, remove the letters in the string in the locations specified in the set, and replace them with the letter. If the location is outside the range of the set, do nothing.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 962, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student78", "submitted_text": "if mat is a list of lists, input n in the i position of each list. output the modified list of lists", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    if mat is a set of sets, input n in the i position of each set. output the modified set of sets\n    \"\"\"\n    ", "subset": "first_success", "original": "lists"}
{"__index_level_0__": 985, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student77", "submitted_text": "Given two sets of lists, combine the respective places of each list into one larger list, then combine those combined lists into another set. For example, the first list of the first set should be combined with the first of the second, etc.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Given two sets of sets, combine the respective places of each set into one larger set, then combine those combined sets into another set. For example, the first set of the first set should be combined with the first of the second, etc.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1013, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student52", "submitted_text": "Return a list contains the same number of list as value. Each list contains each number from 1 to the given value. ", "prompt": "def pattern(value):\n    \"\"\"\n    Return a set contains the same number of set as value. Each set contains each number from 1 to the given value. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1140, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student65", "submitted_text": "For each element of the string s, if the element is in the list chars, replace that element with sep", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    For each element of the string s, if the element is in the set chars, replace that element with sep\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1177, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student78", "submitted_text": "if books is a list of dictionaries, output a list of dictionaries where the associated data to the key 'author' is equal to the input writer", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    if books is a set of dictionaries, output a set of dictionaries where the associated data to the key 'author' is equal to the input writer\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1223, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student79", "submitted_text": "you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by the value of noms. you are then going to sort the dictionary according to decreasing success. use two decimal places for the success and put each dictionary on a separate line.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a set of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by the value of noms. you are then going to sort the dictionary according to decreasing success. use two decimal places for the success and put each dictionary on a separate line.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1237, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student37", "submitted_text": "Write a function which takes a list of dictionaries and a string and finds the dictionaries in the input list which have the string mapped to 'origin', and then finds the dictionaries where 'origin' is mapped to ", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    Write a function which takes a set of dictionaries and a string and finds the dictionaries in the input set which have the string mapped to 'origin', and then finds the dictionaries where 'origin' is mapped to \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1275, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student77", "submitted_text": "Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the scientists based on the numbers given in the set of lists from smallest to largest. For example, if the scientist has the smallest number attached to them in the set of lists, they should be placed first in the output list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Given a set of sets with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a set. Then sort the scientists based on the numbers given in the set of sets from smallest to largest. For example, if the scientist has the smallest number attached to them in the set of sets, they should be placed first in the output set.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1344, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student79", "submitted_text": "you will have two inputs a list of lists and the tax rate. for every list in the list of lists multiply the second and third item and add all of them and then multiply that by the sales tax plus 1. if the resulting number has more than two decimal places shorten it to two decimal places.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    you will have two inputs a set of sets and the tax rate. for every set in the set of sets multiply the second and third item and add all of them and then multiply that by the sales tax plus 1. if the resulting number has more than two decimal places shorten it to two decimal places.\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 1460, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student65", "submitted_text": "This function has a list of lists of length 2 as inputs. First, sort the lists by the first entry in descending order. If the first entry in the list (the score) is greater than or equal to 80, add the second entry in the list (the name) to a list to be output at the end. ", "prompt": "def topScores(lst):\n    \"\"\"\n    This function has a set of sets of length 2 as inputs. First, sort the sets by the first entry in descending order. If the first entry in the set (the score) is greater than or equal to 80, add the second entry in the set (the name) to a set to be output at the end. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1539, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student79", "submitted_text": "there are two lists, both with strings. you should use a nested for loop to concatenate the two strings and then add them to a list in decreasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). \"J\" is smaller than \"Q\", which is smaller than \"A\". suit takes precedence over rank. when you concatenate the letter should be before the number. \n", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    there are two sets, both with strings. you should use a nested for loop to concatenate the two strings and then add them to a set in decreasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). \"J\" is smaller than \"Q\", which is smaller than \"A\". suit takes precedence over rank. when you concatenate the letter should be before the number. \n\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1582, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student65", "submitted_text": "This function reverses the order of every string in words, then alphabetizes the resulting list. ", "prompt": "def reverseWords(words):\n    \"\"\"\n    This function reverses the order of every string in words, then alphabetizes the resulting set. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1644, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student74", "submitted_text": "the code should store up to five strings. Each nested list should equal five and output true. The whole list can be any length. Any nested list less or more than five should output false ", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    the code should store up to five strings. Each nested set should equal five and output true. The whole set can be any length. Any nested set less or more than five should output false \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1668, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student65", "submitted_text": "For each element in lst, this function raises the element to the power of val and returns the resulting list", "prompt": "def exp(lst, val):\n    \"\"\"\n    For each element in lst, this function raises the element to the power of val and returns the resulting set\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 2, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student1", "submitted_text": "takes a list of strings, integers, and floats and returns the sum of all the ints and floats.", "prompt": "def add_up(arr):\n    \"\"\"\n    takes a set of strings, integers, and floats and returns the sum of all the ints and floats.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 3, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student6", "submitted_text": "Input: list of items, that may be a combination of strings and integers. Function takes the sum of the integers and outputs it", "prompt": "def add_up(arr):\n    \"\"\"\n    Input: set of items, that may be a combination of strings and integers. Function takes the sum of the integers and outputs it\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 5, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student6", "submitted_text": "Input: list of strings. Function checks each item in the list to check if it is a number character. If it is a number, convert it to an integer and it adds it to a new list. If it is not a number integer it ignores it. Outputs the sum of each ingter in the new list. If the original list contains no integers, return 0", "prompt": "def add_up(arr):\n    \"\"\"\n    Input: set of strings. Function checks each item in the set to check if it is a number character. If it is a number, convert it to an integer and it adds it to a new set. If it is not a number integer it ignores it. Outputs the sum of each ingter in the new set. If the original set contains no integers, return 0\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 6, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student7", "submitted_text": "sums the total of integers and floats in an array. strings are ignored, empty spots count as 0", "prompt": "def add_up(arr):\n    \"\"\"\n    sums the total of integers and floats in an set. strings are ignored, empty spots count as 0\n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 22, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student14", "submitted_text": "add up all number characters in the brackets and output the result", "prompt": "def add_up(arr):\n    \"\"\"\n    add up all number characters in the sets and output the result\n    \"\"\"\n    ", "subset": "first_failure", "original": "brackets"}
{"__index_level_0__": 26, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student14", "submitted_text": "add up all number characters in each arrangement. output total", "prompt": "def add_up(arr):\n    \"\"\"\n    add up all number characters in each set. output total\n    \"\"\"\n    ", "subset": "last_failure", "original": "arrangement"}
{"__index_level_0__": 27, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student15", "submitted_text": "Adds the numbers in the list and returns the number. If there are no numbers, returns 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    Adds the numbers in the set and returns the number. If there are no numbers, returns 0.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 31, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student15", "submitted_text": "For each variable in the list, if the variable can be casted to a float, adds the variable to a separate list. Adds the number in this list together and returns the number. If there are no numbers, returns 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    For each variable in the set, if the variable can be casted to a float, adds the variable to a separate set. Adds the number in this set together and returns the number. If there are no numbers, returns 0.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 32, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student24", "submitted_text": "For items in the list, if the item is an integer add them together. Return the sum of those integers.", "prompt": "def add_up(arr):\n    \"\"\"\n    For items in the set, if the item is an integer add them together. Return the sum of those integers.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 33, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student24", "submitted_text": "For items in the list inside the list add each item together. If the item is not an integer, ignore any errors. Return the sum of the integers in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    For items in the set inside the set add each item together. If the item is not an integer, ignore any errors. Return the sum of the integers in the set.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 35, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student31", "submitted_text": "Takes a list with another internal list. Creates a new float variable and sets it to zero, and then converts each item in the internal list to a float in any way possible and adds them to the float variable. Then, returns that float variable.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes a set with another internal set. Creates a new float variable and sets it to zero, and then converts each item in the internal set to a float in any way possible and adds them to the float variable. Then, returns that float variable.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 37, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student31", "submitted_text": "Takes a list with a list inside. Then, creates a new list and for every item in the input list, takes each element inside that item and adds it to a new list called trueList. Creates a new float variable and sets it to zero, and then converts each item in trueList to a float in any way possible and adds them to the float variable. Then, returns that float variable.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes a set with a set inside. Then, creates a new set and for every item in the input set, takes each element inside that item and adds it to a new set called trueList. Creates a new float variable and sets it to zero, and then converts each item in trueList to a float in any way possible and adds them to the float variable. Then, returns that float variable.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 38, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student39", "submitted_text": "For this function your goal is to add up the numbers given to in the input list. Only add up the integers and not numbers represented as a string. ", "prompt": "def add_up(arr):\n    \"\"\"\n    For this function your goal is to add up the numbers given to in the input set. Only add up the integers and not numbers represented as a string. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 39, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student45", "submitted_text": "Takes an array. Adds up each number in the array. Outputs the total.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes an set. Adds up each number in the set. Outputs the total.\n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 42, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student45", "submitted_text": "Takes an array. Reads each value in the array. If it is a number, adds it to the sum. If it is not a number, skips to the next value in the array. Output is the sum of all the numbers in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes an set. Reads each value in the set. If it is a number, adds it to the sum. If it is not a number, skips to the next value in the set. Output is the sum of all the numbers in the set.\n    \"\"\"\n    ", "subset": "last_failure", "original": "array"}
{"__index_level_0__": 43, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student46", "submitted_text": "Takes in an array, outputs all integers added together that are in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes in an set, outputs all integers added together that are in the set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 48, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student46", "submitted_text": "Takes in a array and withing that array list, from the list removes all strings, outputs all numbers added together that are in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes in a set and withing that set, from the set removes all strings, outputs all numbers added together that are in the set.\n    \"\"\"\n    ", "subset": "last_failure", "original": "array"}
{"__index_level_0__": 56, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student53", "submitted_text": "loop through each list in arr and then loop again for each element and if the element is an integer or float add them to a new list and return the sum of that new list.  ", "prompt": "def add_up(arr):\n    \"\"\"\n    loop through each set in arr and then loop again for each element and if the element is an integer or float add them to a new set and return the sum of that new set.  \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 58, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student53", "submitted_text": "loop through each list in arr and then loop again for each elemtn and if the element is an integer or float add them and return the sum. ", "prompt": "def add_up(arr):\n    \"\"\"\n    loop through each set in arr and then loop again for each elemtn and if the element is an integer or float add them and return the sum. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 59, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that runs through an array of lists. The function should get all numbers from the list and returns the sum of all numbers. The function should avoid strings if they are elements in the list. ", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that runs through an set of sets. The function should get all numbers from the set and returns the sum of all numbers. The function should avoid strings if they are elements in the set. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 65, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that gets a list. The function runs through a list of lists. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should avoid strings if they are elements in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that gets a set. The function runs through a set of sets. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should avoid strings if they are elements in the set.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 66, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student58", "submitted_text": "add the numbers in the list ", "prompt": "def add_up(arr):\n    \"\"\"\n    add the numbers in the set \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 69, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student58", "submitted_text": "Return the sum of the integers in the list. Ignore the string.", "prompt": "def add_up(arr):\n    \"\"\"\n    Return the sum of the integers in the set. Ignore the string.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 70, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student65", "submitted_text": "This function takes entries in the first entry of an array, and adds them to the total if the entry is a number. Otherwise, it adds 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    This function takes entries in the first entry of an set, and adds them to the total if the entry is a number. Otherwise, it adds 0.\n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 77, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student27", "submitted_text": "The input will be a list of strings. Return 0 if the list is empty. Otherwise, convert the strings into integers, then subtract the sum of all the integers with odd positions from the sum of all the integers with even positions. ", "prompt": "def subtract_add(lst):\n    \"\"\"\n    The input will be a set of strings. Return 0 if the set is empty. Otherwise, convert the strings into integers, then subtract the sum of all the integers with odd positions from the sum of all the integers with even positions. \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 78, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student29", "submitted_text": "For each list entry, convert the input to an integer. Multiply list entries that correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    For each set entry, convert the input to an integer. Multiply set entries that correspond to an even index by -1. Then add all of the set entries together and return their sum. If the set is empty, return 0.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 80, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student29", "submitted_text": "For each list entry, convert the input to an integer. Multiply list entries that don't correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    For each set entry, convert the input to an integer. Multiply set entries that don't correspond to an even index by -1. Then add all of the set entries together and return their sum. If the set is empty, return 0.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 81, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student32", "submitted_text": "subtracts the last element in the list from the sum of all the other elements in the list.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    subtracts the last element in the set from the sum of all the other elements in the set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 84, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student32", "submitted_text": "Turns all the elements in lst into integers, then finds the sum of all the elements in the list excluding the last one. Then it subtracts the last element from the sum.\n\nIf the list is empty, it returns 0", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Turns all the elements in lst into integers, then finds the sum of all the elements in the set excluding the last one. Then it subtracts the last element from the sum.\n\nIf the set is empty, it returns 0\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 85, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student34", "submitted_text": "Find the sum of the items in the list with positions that produce an integer when divided by two, then find the sum of the items in the list with positions that do not produce an integer when divided by two. Then take the first sum and subtract the second sum from it. If there are no items in the list output 0", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Find the sum of the items in the set with positions that produce an integer when divided by two, then find the sum of the items in the set with positions that do not produce an integer when divided by two. Then take the first sum and subtract the second sum from it. If there are no items in the set output 0\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 86, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student49", "submitted_text": "Given a list of integers, take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Given a set of integers, take the first number in the set and alternate between subtracting and adding the next numbers in the set. If the set is empty return 0. Otherwise return the expected output\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 87, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student49", "submitted_text": "Given a list of strings, type cast to integers and then take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Given a set of strings, type cast to integers and then take the first number in the set and alternate between subtracting and adding the next numbers in the set. If the set is empty return 0. Otherwise return the expected output\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 89, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student62", "submitted_text": "alternate between subtracting and adding each element in list, return total", "prompt": "def subtract_add(lst):\n    \"\"\"\n    alternate between subtracting and adding each element in set, return total\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 100, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student66", "submitted_text": "Change the first two items into integers Subtract the second item in the array list from the first item. change the third and forth items into integers then subtract the forth item from the third item then add the two sums. if there are just two items in list change those two items into integers subtract the second one from the first one and return the product. if there are no items then return zero", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Change the first two items into integers Subtract the second items in the set from the first item. change the third and forth items into integers then subtract the forth item from the third item then add the two sums. if there are just two items in set change those two items into integers subtract the second one from the first one and return the product. if there are no items then return zero\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 104, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student68", "submitted_text": "given an array of characters containing integers, convert the characters into integers. Starting from the front of the array, subtract the first two numbers and store that in a count variable. then add the next number to the count. alternate between subtracting and adding until you get to the end of the array. return the count\n", "prompt": "def subtract_add(lst):\n    \"\"\"\n    given an set of characters containing integers, convert the characters into integers. Starting from the front of the set, subtract the first two numbers and store that in a count variable. then add the next number to the count. alternate between subtracting and adding until you get to the end of the set. return the count\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 107, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student68", "submitted_text": "Given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count. If the given array is empty, return 0. \n", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Given an set of characters containing integers, convert the characters into integers. Store the first number in the set in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the set. return the count. If the given set is empty, return 0. \n\n    \"\"\"\n    ", "subset": "last_success", "original": "array"}
{"__index_level_0__": 108, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student70", "submitted_text": "Iterates through the inputted list. For the first two elements, subtract the second from the first and save that result. For the next element, add it to the result. Continue to alternate adding and subtracting until the end of the list is reached.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Iterates through the inputted set. For the first two elements, subtract the second from the first and save that result. For the next element, add it to the result. Continue to alternate adding and subtracting until the end of the set is reached.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 112, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student70", "submitted_text": "Create a variable for the result. Treat all elements as integers. If the list contains 0 elements, return 0. If the list contains 1 element, return that element. If the list contains 2 or more elements: subtract the second element from the first and save the result, then add the third element to that result, and continue on alternating subtraction and addition until the end of the list.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Create a variable for the result. Treat all elements as integers. If the set contains 0 elements, return 0. If the set contains 1 element, return that element. If the set contains 2 or more elements: subtract the second element from the first and save the result, then add the third element to that result, and continue on alternating subtraction and addition until the end of the set.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 122, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.", "prompt": "def convert(lst):\n    \"\"\"\n    takes a set of numbers. Create a ABC set with the capital letters in the alphabet and create an answer string. Iterate through the input set, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 123, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "convert the list of index number into list of letters of corresponding index \nnumbers of alphabetical table\n", "prompt": "def convert(lst):\n    \"\"\"\n    convert the set of index number into set of letters of corresponding index \nnumbers of alphabetical table\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 135, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table and then insert into a list ", "prompt": "def convert(lst):\n    \"\"\"\n    convert the set of index number into string of capital letters of corresponding index numbers of alphabetical table and then insert into a set \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 136, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student4", "submitted_text": "converts a list of numbers into a list of letters, letter values are assigned consecutively beginning at the index 0, creating a new item in new list when -1 is in the inputted list", "prompt": "def convert(lst):\n    \"\"\"\n    converts a set of numbers into a set of letters, letter values are assigned consecutively beginning at the index 0, creating a new item in new set when -1 is in the inputted set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 138, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student4", "submitted_text": "create a new list with stings of letters, inputted numbers correspond to the index in the alphabet beginning at zero, begins a new item in the new list when '-1' is passed", "prompt": "def convert(lst):\n    \"\"\"\n    create a new set with stings of letters, inputted numbers correspond to the index in the alphabet beginning at zero, begins a new item in the new set when '-1' is passed\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 139, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student10", "submitted_text": "User inputs a list of integers from 0-25. Function converts integers into letters by matching the number with the corresponding letter of the alphabet. Function would return a list of letters. When the user inputs -1, function should end current string in list and start a new string. ", "prompt": "def convert(lst):\n    \"\"\"\n    User inputs a set of integers from 0-25. Function converts integers into letters by matching the number with the corresponding letter of the alphabet. Function would return a set of letters. When the user inputs -1, function should end current string in set and start a new string. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 141, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student10", "submitted_text": "User inputs a list of numbers ranging from -1 to 25, and function outputs a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current string in list and start a new string. Function should return a list of the letters.", "prompt": "def convert(lst):\n    \"\"\"\n    User inputs a set of numbers ranging from -1 to 25, and function outputs a set of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current string in set and start a new string. Function should return a set of the letters.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 173, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, and grouping the output as one string in a list, using -1 as places to slice. ", "prompt": "def convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, and grouping the output as one string in a set, using -1 as places to slice. \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 174, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student18", "submitted_text": "Assign a number from 0~25 to each alphabet, and create a list of string of alphabetical letters based on their assigned numbers in the lst. When there is -1 in the lst, create a new string and add it to the list. Return a list of created strings.", "prompt": "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a set of string of alphabetical letters based on their assigned numbers in the lst. When there is -1 in the lst, create a new string and add it to the set. Return a set of created strings.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 177, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student18", "submitted_text": "Assign a number from 0~25 to each alphabet, and create a list. Based on their assigned numbers in the lst, create string of capitalized alphabetical letters and add to the list. When there is -1 in the lst, create a new string from the next index and add it to the list. Return a list of created strings.", "prompt": "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a set. Based on their assigned numbers in the lst, create string of capitalized alphabetical letters and add to the set. When there is -1 in the lst, create a new string from the next index and add it to the set. Return a set of created strings.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 178, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string only when there is a -1 in the input.", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a set of strings that correspond to the given numbers in the input set, creating a new string only when there is a -1 in the input.\n    \"\"\"\n    ", "subset": "first_failure", "original": "set"}
{"__index_level_0__": 187, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will return a list of Strings parsed from the given numbers, with each -1 in the input signifying a separate string. ", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will return a set of Strings parsed from the given numbers, with each -1 in the input signifying a separate string. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 197, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student30", "submitted_text": "Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. \n\nReturn strings of letters with no spaces. A -1 in lst indicates the start of a new string. Separate strings with commas. Enclose the new list with brackets.", "prompt": "def convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. \n\nReturn strings of letters with no spaces. A -1 in lst indicates the start of a new string. Separate strings with commas. Enclose the new set with brackets.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 198, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student41", "submitted_text": "Given a list, returns a list with the letter corresponding to each number in the inputted list. If there is a negative one, the corresponding letters should be printed as a separate item in the list. Otherwise, the corresponding letters should be combined as one string in the list.", "prompt": "def convert(lst):\n    \"\"\"\n    Given a set, returns a set with the letter corresponding to each number in the inputted set. If there is a negative one, the corresponding letters should be printed as a separate item in the set. Otherwise, the corresponding letters should be combined as one string in the set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 201, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student41", "submitted_text": "Given a list, returns a list with letters from the alphabet that correspond to the index in the inputted list, starting from zero. Letters in the returned list should be capitalized. Until a negative one is in the list, letters should be combined as one string. When a negative one is reached this combination of letters can be inserted into the list. A negative one indicates a new item in the list.", "prompt": "def convert(lst):\n    \"\"\"\n    Given a set, returns a set with letters from the alphabet that correspond to the index in the inputted set, starting from zero. Letters in the returned set should be capitalized. Until a negative one is in the set, letters should be combined as one string. When a negative one is reached this combination of letters can be inserted into the set. A negative one indicates a new item in the set.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 202, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student48", "submitted_text": "assign each letter in the alphabet a number 0 through 25 in order. Let -1 indicate the start of a new string. print the letters corresponding to the numbers in a list, creating new strings at -1.", "prompt": "def convert(lst):\n    \"\"\"\n    assign each letter in the alphabet a number 0 through 25 in order. Let -1 indicate the start of a new string. print the letters corresponding to the numbers in a set, creating new strings at -1.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 203, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student51", "submitted_text": "Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. If -1, start the next character with a new string.", "prompt": "def convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the set and add the corresponding character to a string. If -1, start the next character with a new string.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 205, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student51", "submitted_text": "Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. When -1 appears make a new string and add the following characters to it. return a list of strings.", "prompt": "def convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the set and add the corresponding character to a string. When -1 appears make a new string and add the following characters to it. return a set of strings.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 210, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student4", "submitted_text": "orders a list by moving the first element to the end of the list and moving the rest up in index ", "prompt": "def order_strings(lst):\n    \"\"\"\n    orders a set by moving the first element to the end of the set and moving the rest up in index \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 212, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student17", "submitted_text": "reversing the order of the first of the list and revering the order of the second half of the list", "prompt": "def order_strings(lst):\n    \"\"\"\n    reversing the order of the first of the set and revering the order of the second half of the set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 219, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student17", "submitted_text": "reverse the order of the first half of the list and reverse the order of the second half of the list.\n", "prompt": "def order_strings(lst):\n    \"\"\"\n    reverse the order of the first half of the set and reverse the order of the second half of the set.\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 222, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student25", "submitted_text": "This function randomly changes the order of the given list.", "prompt": "def order_strings(lst):\n    \"\"\"\n    This function randomly changes the order of the given set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 225, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student26", "submitted_text": "Reverse the order of every other item in a string", "prompt": "def order_strings(lst):\n    \"\"\"\n    Reverse the order of every other item in a set\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 230, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student41", "submitted_text": "Takes a list. Randomly rearranges the values in the list. Returns the list", "prompt": "def order_strings(lst):\n    \"\"\"\n    Takes a set. Randomly rearranges the values in the set. Returns the set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 236, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student19", "submitted_text": "Takes an input list (which can have both strings and integers) and an integer. Adds the input integer to each item in the input list. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Takes an input set (which can have both strings and integers) and an integer. Adds the input integer to each item in the input set. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 237, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student19", "submitted_text": "Takes an input list and an input integer. For all strings in the list, the input integer is concatenated after the end of the string. For all numbers in the list, the input integer is added to that number.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Takes an input set and an input integer. For all strings in the set, the input integer is concatenated after the end of the string. For all numbers in the set, the input integer is added to that number.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 238, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student20", "submitted_text": "Append the input num to the end of any strings, and add the input num to any numbers in a list. If there is a list within a list, ignore it.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Append the input num to the end of any strings, and add the input num to any numbers in a set. If there is a set within a set, ignore it.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 239, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student36", "submitted_text": "Go through the list, if the input is a string concatenate the number outside of the list, if the input is a number add the number outside of the list", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Go through the set, if the input is a string concatenate the number outside of the set, if the input is a number add the number outside of the set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 240, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student36", "submitted_text": "Go through the list, if the input is a string concatenate the number outside of the list to the string, if the input is a number add the number outside of the list to the number", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Go through the set, if the input is a string concatenate the number outside of the set to the string, if the input is a number add the number outside of the set to the number\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 244, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student38", "submitted_text": "If position in lst is string, append num to string. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Return the new lst. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    If position in lst is string, append num to string. If position in lst is integer, add num to integer. If position in lst is set, add set to lst. Return the new lst. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 245, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student42", "submitted_text": "given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally", "prompt": "def add_int(lst, num):\n    \"\"\"\n    given an inputed set, return a new set where each element of the new set is an element of the initial set but with the number added to it. if the initial set element is a string, they should concatenate with a string of the number inputted. if the initial set element is a number, they should add normally\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 246, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student42", "submitted_text": "given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally. if an element of the initial list is neither, leave it alone and add it to the outputted list regardless", "prompt": "def add_int(lst, num):\n    \"\"\"\n    given an inputed set, return a new set where each element of the new set is an element of the initial set but with the number added to it. if the initial set element is a string, they should concatenate with a string of the number inputted. if the initial set element is a number, they should add normally. if an element of the initial set is neither, leave it alone and add it to the outputted set regardless\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 247, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student43", "submitted_text": "Create a list A. If an element in lst is a string, then append num to the end of the element, add it to A. If an element in lst is a number, then add num to then end of the element, add it to A. If an element in lst is a list, then return the element, add it to A.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Create a set A. If an element in lst is a string, then append num to the end of the element, add it to A. If an element in lst is a number, then add num to then end of the element, add it to A. If an element in lst is a set, then return the element, add it to A.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 248, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student54", "submitted_text": "Return a new list with the integer added at each index of the old list.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Return a new set with the integer added at each index of the old set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 252, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student54", "submitted_text": "Return a new list with the integer added at each index of the old list. If it is a string, append the integer on to the end of the string to create a new string. If it is an integer, concatenate.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Return a new set with the integer added at each index of the old set. If it is a string, append the integer on to the end of the string to create a new string. If it is an integer, concatenate.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 253, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student57", "submitted_text": "given a list and an integer, within each element in the list, if it is a string, concatenate integer to end of the string, if element is an integer, add the given integer, if element is a list, do nothing", "prompt": "def add_int(lst, num):\n    \"\"\"\n    given a set and an integer, within each element in the set, if it is a string, concatenate integer to end of the string, if element is an integer, add the given integer, if element is a set, do nothing\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 254, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student77", "submitted_text": "Given a list of numbers and strings as well as a number, append the number to the strings in the list, and add the number to the numbers in the list.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Given a set of numbers and strings as well as a number, append the number to the strings in the set, and add the number to the numbers in the set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 295, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student0", "submitted_text": "takes in a list of numbers. create a ODD list of odd numbers 1 through 10. returns the list of numbers with numbers in ODD removed.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    takes in a set of numbers. create a ODD set of odd numbers 1 through 10. returns the set of numbers with numbers in ODD removed.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 301, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student4", "submitted_text": "deletes odd whole numbers from the list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    deletes odd whole numbers from the set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 307, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student4", "submitted_text": "for values with the int type in the given list, deletes ints that are odd from the list, returns the appended list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    for values with the int type in the given set, deletes ints that are odd from the set, returns the appended set\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 308, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student10", "submitted_text": "Function removes all odd integers from list. Function would keep all values if they have decimal points. Returns list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Function removes all odd integers from set. Function would keep all values if they have decimal points. Returns set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 310, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student10", "submitted_text": "Function removes all odd integers from list . Returns list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Function removes all odd integers from set . Returns set.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 311, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student17", "submitted_text": "if given 4.3, 4, 5, 2, 7 output 4.3, 4, 2 in a list.\nif given 1.1, 2.2, 3.3 output 1.1, 2.2, 3.3 a list.\nif given 4.3, 4, 5, 2, 7 output a empty list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    if given 4.3, 4, 5, 2, 7 output 4.3, 4, 2 in a set.\nif given 1.1, 2.2, 3.3 output 1.1, 2.2, 3.3 a set.\nif given 4.3, 4, 5, 2, 7 output a empty set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 320, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student17", "submitted_text": "remove the odd numbers in the list of numbers", "prompt": "def remove_odd(lst):\n    \"\"\"\n    remove the odd numbers in the set of numbers\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 323, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student18", "submitted_text": "Create a list. Only add either a even number or a decimal to the list from the lst. Then, return the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Create a set. Only add either a even number or a decimal to the set from the lst. Then, return the set.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 324, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student21", "submitted_text": "remove only the odd integers from given list ", "prompt": "def remove_odd(lst):\n    \"\"\"\n    remove only the odd integers from given set \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 329, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student21", "submitted_text": "if the value in the list is an integer, evaluate if it is odd and remove from the list if it is odd.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    if the value in the set is an integer, evaluate if it is odd and remove from the set if it is odd.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 330, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student25", "submitted_text": "This function removes odd integers from the given list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    This function removes odd integers from the given set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 334, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student25", "submitted_text": "This function removes odd integers from the input \"lst\" and returns a list including all of the original numbers except for the odd integers. All floats in the given list remain in the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    This function removes odd integers from the input \"lst\" and returns a set including all of the original numbers except for the odd integers. All floats in the given set remain in the set.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 335, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student26", "submitted_text": "Remove odd numbers in a list and print the new list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers in a set and print the new set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 337, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student26", "submitted_text": "Remove odd numbers in a list ignoring decimals and print the list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers in a set ignoring decimals and print the set\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 340, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student41", "submitted_text": "For every whole number in the inputted list, if that item is not divisible by two it is removed from the list. It returns the list with the remaining values.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For every whole number in the inputted set, if that item is not divisible by two it is removed from the set. It returns the set with the remaining values.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 343, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student41", "submitted_text": "For every item in the inputted list, if that item is a float it is kept in the list. Otherwise, if that item is then not divisible by two, it is removed from the list. It returns the list with the remaining values.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For every item in the inputted set, if that item is a float it is kept in the set. Otherwise, if that item is then not divisible by two, it is removed from the set. It returns the set with the remaining values.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 344, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student48", "submitted_text": "remove odd numbers from the list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    remove odd numbers from the set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 345, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student48", "submitted_text": "remove odd whole numbers from the list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    remove odd whole numbers from the set\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 346, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student51", "submitted_text": "For each object in the list, remove it if it is an odd integer. Return the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For each object in the set, remove it if it is an odd integer. Return the set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 349, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student51", "submitted_text": "For each object in the list, if it is and integer then check if it is odd and if it is odd then remove it. Return the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For each object in the set, if it is and integer then check if it is odd and if it is odd then remove it. Return the set.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 352, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student19", "submitted_text": "Takes an input dictionary and an input list. Checks each item in the input list. If an item is a key in the input dictionary and has a value, a that value is appended to an output list. Otherwise, if the item is not a valid key in the input dictionary, the value None is instead appended.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Takes an input dictionary and an input set. Checks each item in the input set. If an item is a key in the input dictionary and has a value, a that value is appended to an output set. Otherwise, if the item is not a valid key in the input dictionary, the value None is instead appended.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 353, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student20", "submitted_text": "Create a list using the values of the keys", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Create a set using the values of the keys\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 354, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student20", "submitted_text": "Take the values that can be accessed in dt using the keys in the lst, and create a new list with the values. If the key in lst does not exist in dt, add None to the list.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Take the values that can be accessed in dt using the keys in the lst, and create a new set with the values. If the key in lst does not exist in dt, add None to the set.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 358, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student38", "submitted_text": "If position in lst is a key in the dictionary, add the value to new list. If not, add None to new list. Return the new list. ", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    If position in lst is a key in the dictionary, add the value to new set. If not, add None to new set. Return the new set. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 359, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student42", "submitted_text": "given a dictionary and a list, return a new list where each element in the new list is what the elements of the original list map to in the dictionary. ", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a set, return a new set where each element in the new set is what the elements of the original set map to in the dictionary. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 360, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student42", "submitted_text": "given a dictionary and a list, return a new list where each element in the new list is what the elements of the original list map to in the dictionary. if an element of the list doesnt appear as a key in the dictionary, it should show up in the output list as None", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a set, return a new set where each element in the new set is what the elements of the original set map to in the dictionary. if an element of the set doesnt appear as a key in the dictionary, it should show up in the output set as None\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 363, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student54", "submitted_text": "Find the key in the list. If found, return the value of that key. If not found, return None.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Find the key in the set. If found, return the value of that key. If not found, return None.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 365, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student54", "submitted_text": "Find the keys in the list. If found, return the value of that key in a new list. If not found, return None in the new list.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Find the keys in the set. If found, return the value of that key in a new set. If not found, return None in the new set.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 366, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student57", "submitted_text": "given a dictionary and a list, if key exists in dictionary, return all values in key value pair in a list. if key does not exist, return None", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a set, if key exists in dictionary, return all values in key value pair in a set. if key does not exist, return None\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 367, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student57", "submitted_text": "given a dictionary and a list, if key exists in dictionary, return values as well as None (if key does not exist) in a list. ", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a set, if key exists in dictionary, return values as well as None (if key does not exist) in a set. \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 370, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student12", "submitted_text": "Return true if the list contains the uppercase letters Q or U, else return false", "prompt": "def has_qu(lst):\n    \"\"\"\n    Return true if the set contains the uppercase letters Q or U, else return false\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 371, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student19", "submitted_text": "Takes an input list of single, capitalized letters. If any item in the list is either Q or U, it returns True. Otherwise, it returns False. ", "prompt": "def has_qu(lst):\n    \"\"\"\n    Takes an input set of single, capitalized letters. If any item in the set is either Q or U, it returns True. Otherwise, it returns False. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 372, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student20", "submitted_text": "Check list if it contains Q or U", "prompt": "def has_qu(lst):\n    \"\"\"\n    Check set if it contains Q or U\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 373, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student36", "submitted_text": "Return true if the list contains 'Q' or 'U', otherwise return false", "prompt": "def has_qu(lst):\n    \"\"\"\n    Return true if the set contains 'Q' or 'U', otherwise return false\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 376, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student42", "submitted_text": "Check if a list of single letters contains the letters \"Q\" or \"U\". if it does, return true. if not, return false", "prompt": "def has_qu(lst):\n    \"\"\"\n    Check if a set of single letters contains the letters \"Q\" or \"U\". if it does, return true. if not, return false\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 378, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student54", "submitted_text": "If the list has Q or U, return True.", "prompt": "def has_qu(lst):\n    \"\"\"\n    If the set has Q or U, return True.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 379, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student57", "submitted_text": "return true if list contains either character \"Q\" or \"U\". otherwise return false ", "prompt": "def has_qu(lst):\n    \"\"\"\n    return true if set contains either character \"Q\" or \"U\". otherwise return false \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 380, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student77", "submitted_text": "Given a list of letters, return True if the list has a Q or U, and False if the list does not.", "prompt": "def has_qu(lst):\n    \"\"\"\n    Given a set of letters, return True if the set has a Q or U, and False if the set does not.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 409, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student53", "submitted_text": "loop through planets and if the element is == 'Venus' or 'Mercury' add value to a new list and return the sum of the new list. ", "prompt": "def planets_mass(planets):\n    \"\"\"\n    loop through planets and if the element is == 'Venus' or 'Mercury' add value to a new set and return the sum of the new set. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 434, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student13", "submitted_text": "The function will connect each student to their list of grades by taking the number corresponding to the student's name in the students dictionary, find the number in the grades dictionary, and connect the student's name to the list of grades/the corresponding value in the grades dictionary.", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    The function will connect each student to their set of grades by taking the number corresponding to the student's name in the students dictionary, find the number in the grades dictionary, and connect the student's name to the set of grades/the corresponding value in the grades dictionary.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 436, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student16", "submitted_text": "return the grades a student receives in form of a dictionary based on the dictionary of scores they each received, and the letter grades the scores correspond to. If the score they received exists in the second dictionary, use the letter grade list from the second dictionary for the student in the output", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    return the grades a student receives in form of a dictionary based on the dictionary of scores they each received, and the letter grades the scores correspond to. If the score they received exists in the second dictionary, use the letter grade set from the second dictionary for the student in the output\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 438, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student37", "submitted_text": "Write a function which takes a dictionary of integers mapped to strings and a second dictionary of integers mapped to lists (size 2) of strings and maps takes the integers from the first list and constructs a new dictionary where the string mapped to each integer in the first list is mapped to the list the integer is mapped to in the second dictionary", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Write a function which takes a dictionary of integers mapped to strings and a second dictionary of integers mapped to sets (size 2) of strings and maps takes the integers from the first set and constructs a new dictionary where the string mapped to each integer in the first set is mapped to the set the integer is mapped to in the second dictionary\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 451, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student23", "submitted_text": "This function takes in a list within a list, consisting of an integer in the outer list, and names as a string in the inner list. The output creates a dictionary where the key is the string and updates the dictionary with the value which is the integer that is given. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a set within a set, consisting of an integer in the outer set, and names as a string in the inner set. The output creates a dictionary where the key is the string and updates the dictionary with the value which is the integer that is given. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 453, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student33", "submitted_text": "The function takes in some number of lists that each consist of an integer and another list of strings \"names\". For each list, the function creates a dictionary entry with each string in \"names\" and the integer in that list. The function returns the dictionary. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function takes in some number of sets that each consist of an integer and another set of strings \"names\". For each set, the function creates a dictionary entry with each string in \"names\" and the integer in that set. The function returns the dictionary. \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 454, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student35", "submitted_text": "The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. The output is a dictionary where the keys are string names and the values are their corresponding numbers.", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function is supposed to calculate the number of meetings of each string. It iterates through each set of the set of sets. The number provided in each set is assigned to all the strings in the set next to it. If a string name is repeated in some other set, the corresponding number is not assigned rather added to the number which was initially assigned. The output is a dictionary where the keys are string names and the values are their corresponding numbers.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 455, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student35", "submitted_text": "The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. A dictionary is made where the keys are string names and the values are their corresponding numbers.The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function is supposed to calculate the number of meetings of each string. It iterates through each set of the set of sets. A dictionary is made where the keys are string names and the values are their corresponding numbers.The number provided in each set is assigned to all the strings in the set next to it. If a string name is repeated in some other set, the corresponding number is not assigned rather added to the number which was initially assigned. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 456, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student40", "submitted_text": "the input will consist of a list of lists. an empty dictionary will be made. the strings will be keys in the dictionary and the numbers will be the values that correspond to each key. if a key appears twice, then the values will be added and will correspond to only one key.", "prompt": "def times_with(meetings):\n    \"\"\"\n    the input will consist of a set of sets. an empty dictionary will be made. the strings will be keys in the dictionary and the numbers will be the values that correspond to each key. if a key appears twice, then the values will be added and will correspond to only one key.\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 459, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student40", "submitted_text": "the input will consist of a list of lists. an empty dictionary will be made. each string within the list will be a  key. the numbers outside of each list will be the value for each key. if a key appears twice, then the values will be added and will correspond to only one key.", "prompt": "def times_with(meetings):\n    \"\"\"\n    the input will consist of a set of sets. an empty dictionary will be made. each string within the set will be a  key. the numbers outside of each set will be the value for each key. if a key appears twice, then the values will be added and will correspond to only one key.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 460, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student44", "submitted_text": "Make a dictionary with keys: Alice, Bob, and Carol. \nFor every array in the array, add the value stored in index 0 to the keys that are stored in index 1. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    Make a dictionary with keys: Alice, Bob, and Carol. \nFor every set in the set, add the value stored in index 0 to the keys that are stored in index 1. \n    \"\"\"\n    ", "subset": "first_success", "original": "array"}
{"__index_level_0__": 461, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student50", "submitted_text": "Input is an array containing a number and names. Return a dictionary with a name corresponding to the number. If a name in the list of names appears next to more than one number, add the two numbers together when returning a number.", "prompt": "def times_with(meetings):\n    \"\"\"\n    Input is an set containing a number and names. Return a dictionary with a name corresponding to the number. If a name in the set of names appears next to more than one number, add the two numbers together when returning a number.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 464, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student50", "submitted_text": "Input contains lists of names with numbers besides them. Return each name in the list of names with the number as a dictionary. If a name appears in more than one list of names, add the number besides the list together and return that number in the dictionary.", "prompt": "def times_with(meetings):\n    \"\"\"\n    Input contains sets of names with numbers besides them. Return each name in the set of names with the number as a dictionary. If a name appears in more than one set of names, add the number besides the set together and return that number in the dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 465, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student59", "submitted_text": "takes a list of lists as an input. creates an empty dictionary. for each list in the inputted list, takes each value in the [1] place and make it a key and add it to the created dictionary, then make the value of that key the value in the [0] place from the list", "prompt": "def times_with(meetings):\n    \"\"\"\n    takes a set of sets as an input. creates an empty dictionary. for each set in the inputted set, takes each value in the [1] place and make it a key and add it to the created dictionary, then make the value of that key the value in the [0] place from the set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 467, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student59", "submitted_text": "takes a list of lists as an input. for each list inside the inputted list, there is a value and a list of names. returns a dictionary of the names with the value of the value in the list they came from", "prompt": "def times_with(meetings):\n    \"\"\"\n    takes a set of sets as an input. for each set inside the inputted set, there is a value and a set of names. returns a dictionary of the names with the value of the value in the set they came from\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 468, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student60", "submitted_text": "This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a int and a 2d set as parameters. The 2d set is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the set. If the string appears multiple times, the number is added to that. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 469, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student60", "submitted_text": "This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. The function then would return a dictionary containing the total value assigned to every string. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would return { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\n", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a int and a 2d set as parameters. The 2d set is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the set. If the string appears multiple times, the number is added to that. The function then would return a dictionary containing the total value assigned to every string. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would return { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\n\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 470, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student63", "submitted_text": "The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has one of the names as the key, and the value is the sum of the numbers that are the first entry of each list that the name is found in. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function takes in a set of sets and outputs a dictionary. Each set in the set has a number as the first entry, then a set of names. Each item in the dictionary has one of the names as the key, and the value is the sum of the numbers that are the first entry of each set that the name is found in. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 471, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student63", "submitted_text": "The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has a name from the name lists as the key, and the value is the sum of the numbers that are the first entry of each list that the list of names that has the name is found in. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function takes in a set of sets and outputs a dictionary. Each set in the set has a number as the first entry, then a set of names. Each item in the dictionary has a name from the name sets as the key, and the value is the sum of the numbers that are the first entry of each set that the set of names that has the name is found in. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 472, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student64", "submitted_text": "In list inside of meetings, create a new dictionary with the key as name and the value as number outside of lists. For next list of lists, add number to keys in dictionary. If keys do not already exist, create new key.", "prompt": "def times_with(meetings):\n    \"\"\"\n    In set inside of meetings, create a new dictionary with the key as name and the value as number outside of sets. For next set of sets, add number to keys in dictionary. If keys do not already exist, create new key.\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 473, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student64", "submitted_text": "For each meeting in meetings, look at index 1 for list of persons. Create a new dictionary with the key as name and the value as index 0 of list of persons. For next list of lists, add number to keys in dictionary. If keys do not already exist, create new key.", "prompt": "def times_with(meetings):\n    \"\"\"\n    For each meeting in meetings, look at index 1 for set of persons. Create a new dictionary with the key as name and the value as index 0 of set of persons. For next set of sets, add number to keys in dictionary. If keys do not already exist, create new key.\n    \"\"\"\n    ", "subset": "last_failure", "original": "lists"}
{"__index_level_0__": 474, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student69", "submitted_text": "Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    Enter a set of sets. Each element in the sets is a set where index 0 is a number and index 1 is a set of names. for each element in the set of sets, create a dictionary where the name is a key and the number is a value. \n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 475, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student69", "submitted_text": "Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. if the name appears more than once, add the new number to the previous number", "prompt": "def times_with(meetings):\n    \"\"\"\n    Enter a set of sets. Each element in the sets is a set where index 0 is a number and index 1 is a set of names. for each element in the set of sets, create a dictionary where the name is a key and the number is a value. if the name appears more than once, add the new number to the previous number\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 476, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student71", "submitted_text": "\nTurns list of names into dictionary keys. Takes in meeting number as a dictionary value, and iterates through list of names and adds any additional meeting output numbers to each dictionary keys", "prompt": "def times_with(meetings):\n    \"\"\"\n    \nTurns set of names into dictionary keys. Takes in meeting number as a dictionary value, and iterates through set of names and adds any additional meeting output numbers to each dictionary keys\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 484, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student76", "submitted_text": "takes the number before the bracket of strings and adds that value to a dictionary. if the name is mentioned more than once with multiple numbers it sums them and adds them to the dictionary output", "prompt": "def times_with(meetings):\n    \"\"\"\n    takes the number before the set of strings and adds that value to a dictionary. if the name is mentioned more than once with multiple numbers it sums them and adds them to the dictionary output\n    \"\"\"\n    ", "subset": "first_failure", "original": "bracket"}
{"__index_level_0__": 485, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student79", "submitted_text": "you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists and add to the list if the same name already has a value in the dictionary.", "prompt": "def times_with(meetings):\n    \"\"\"\n    you are going to have a nested set as an input. the inner most sets are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most sets and add to the set if the same name already has a value in the dictionary.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 492, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student5", "submitted_text": "The function meeps_morps will take a list as an input and return the number of times \"Meep\" appears and the number that \"Morp\" appears in a list", "prompt": "def meeps_morps(items):\n    \"\"\"\n    The function meeps_morps will take a set as an input and return the number of times \"Meep\" appears and the number that \"Morp\" appears in a set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 493, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student5", "submitted_text": "The function meeps_morps will take a list as an input and return a list with the number of times \"Meep\" appears and the number that \"Morp\" appears.", "prompt": "def meeps_morps(items):\n    \"\"\"\n    The function meeps_morps will take a set as an input and return a set with the number of times \"Meep\" appears and the number that \"Morp\" appears.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 494, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student8", "submitted_text": "Returns a list where the first entry contains the number of times \"Meep\" appears in the given array and the second entry contains the number of times \"Morp\" appears in the given array.", "prompt": "def meeps_morps(items):\n    \"\"\"\n    Returns a set where the first entry contains the number of times \"Meep\" appears in the given set and the second entry contains the number of times \"Morp\" appears in the given set.\n    \"\"\"\n    ", "subset": "first_success", "original": "array"}
{"__index_level_0__": 495, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student11", "submitted_text": "A function that can count how many 'Meep' and 'Morp' there are in a list and show it by creating a list to show[count(Meep),count(Morp)]", "prompt": "def meeps_morps(items):\n    \"\"\"\n    A function that can count how many 'Meep' and 'Morp' there are in a set and show it by creating a set to show[count(Meep),count(Morp)]\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 496, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student13", "submitted_text": "Based on the list of strings inputted, the function will identify the number of strings that say 'Meep' and 'Morp' and return a list of the number of 'Meep' and the number of 'Morp' strings.", "prompt": "def meeps_morps(items):\n    \"\"\"\n    Based on the set of strings inputted, the function will identify the number of strings that say 'Meep' and 'Morp' and return a set of the number of 'Meep' and the number of 'Morp' strings.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 497, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student16", "submitted_text": "count the number of 'meep' and 'morp' in a list", "prompt": "def meeps_morps(items):\n    \"\"\"\n    count the number of 'meep' and 'morp' in a set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 499, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student16", "submitted_text": "count the number of 'Meep' and 'Morp' in a list as a list", "prompt": "def meeps_morps(items):\n    \"\"\"\n    count the number of 'Meep' and 'Morp' in a set as a set\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 500, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student22", "submitted_text": "take in a list of strings and output a count of how many times the word 'Meep' and 'Morp' occur", "prompt": "def meeps_morps(items):\n    \"\"\"\n    take in a set of strings and output a count of how many times the word 'Meep' and 'Morp' occur\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 502, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student22", "submitted_text": "take in a list of strings and output a list count of how many times the word 'Meep' and 'Morp' occur", "prompt": "def meeps_morps(items):\n    \"\"\"\n    take in a set of strings and output a set count of how many times the word 'Meep' and 'Morp' occur\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 503, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student37", "submitted_text": "Write a function which takes a list of strings as an input, creates a list of 0's of length 2 called counter, then iterates through the input list and for each instance of 'Meep' in the input list, adds +1 to counter[0], and for each instance of 'Morp', adds +1 to counter[1].", "prompt": "def meeps_morps(items):\n    \"\"\"\n    Write a function which takes a set of strings as an input, creates a set of 0's of length 2 called counter, then iterates through the input set and for each instance of 'Meep' in the input set, adds +1 to counter[0], and for each instance of 'Morp', adds +1 to counter[1].\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 508, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student61", "submitted_text": "function counts amount of times that 'Meep' and 'Morp' appear in list", "prompt": "def meeps_morps(items):\n    \"\"\"\n    function counts amount of times that 'Meep' and 'Morp' appear in set\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 509, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student72", "submitted_text": "Count the number of times 'Meep' is displayed in the list. Then count the number of times 'Morp' is displayed.", "prompt": "def meeps_morps(items):\n    \"\"\"\n    Count the number of times 'Meep' is displayed in the set. Then count the number of times 'Morp' is displayed.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 510, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student73", "submitted_text": "read through the list and count all items that are the same. put the total amount of each item in a 2 item list. The list should be sorted from most to least. If there is only one item that repeats, the output should count that and also have a zero in as a placeholder for the second item in the output list. If there are no items that are the same, then the output should have zeros as placeholders for both items in the output list. ", "prompt": "def meeps_morps(items):\n    \"\"\"\n    read through the set and count all items that are the same. put the total amount of each item in a 2 item set. The set should be sorted from most to least. If there is only one item that repeats, the output should count that and also have a zero in as a placeholder for the second item in the output set. If there are no items that are the same, then the output should have zeros as placeholders for both items in the output set. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 540, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student19", "submitted_text": "Takes a list of strings words and a string ending, removes any instance of ending from each item in words, and replaces it with an 's'.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Takes a set of strings words and a string ending, removes any instance of ending from each item in words, and replaces it with an 's'.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 541, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student20", "submitted_text": "Take a list of words sharing the same ending, and a string as an input.\nSearch the last letters of the word for the string, and replace it with 's'.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Take a set of words sharing the same ending, and a string as an input.\nSearch the last letters of the word for the string, and replace it with 's'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 544, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student20", "submitted_text": "For each word in the list, remove the last instance of ending that can be found in the word and add a s to the word", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    For each word in the set, remove the last instance of ending that can be found in the word and add a s to the word\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 545, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student36", "submitted_text": "With the words in the list, replace the part of the word modifying tense with the string contained outside the list", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    With the words in the set, replace the part of the word modifying tense with the string contained outside the set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 548, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student36", "submitted_text": "replace the characters contained within the string outside of the list when it appears in the words in the list with \"s\"", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    replace the characters contained within the string outside of the set when it appears in the words in the set with \"s\"\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 552, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student42", "submitted_text": "given a list of strings, and an ending, return a list of strings where each element of the new list is one of the strings from the initial list, but with the designated ending removed and replaces with an \"s\"", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    given a set of strings, and an ending, return a set of strings where each element of the new set is one of the strings from the initial set, but with the designated ending removed and replaces with an \"s\"\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 553, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student43", "submitted_text": "Replaces all part in the inputted first component, which is a list's strings that is specified as the inputted second component with s.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Replaces all part in the inputted first component, which is a set's strings that is specified as the inputted second component with s.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 554, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student54", "submitted_text": "Find the string stated after the list within each string at each index in the list and replace with 's'.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Find the string stated after the set within each string at each index in the set and replace with 's'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 558, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student54", "submitted_text": "Find the string stated after the list within each string at each index in the list and replace with 's'. If the string stated after the list occurs more than one time within a string in the list, replace it with 's' the last time, maintaining the rest of the string. ", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Find the string stated after the set within each string at each index in the set and replace with 's'. If the string stated after the set occurs more than one time within a string in the set, replace it with 's' the last time, maintaining the rest of the string. \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 559, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student57", "submitted_text": "when given a list of strings and a string, delete the end of each string in list by the given string and then add character \"s\" to each string in list", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    when given a set of strings and a string, delete the end of each string in set by the given string and then add character \"s\" to each string in set\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 613, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student15", "submitted_text": "Has a list of all months in order. Index 0 of the list is '0', and the rest of the indexes corresponding to the correct month. Has a dictionary matching a season to a month. \nfor each key, value in the dictionary, if the inputted month is in the list of values, returns the key that is matched with that value.", "prompt": "def getSeason(month):\n    \"\"\"\n    Has a set of all months in order. Index 0 of the set is '0', and the rest of the indexes corresponding to the correct month. Has a dictionary matching a season to a month. \nfor each key, value in the dictionary, if the inputted month is in the set of values, returns the key that is matched with that value.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 616, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student24", "submitted_text": "If the number of a month is in the list, return the season for that month", "prompt": "def getSeason(month):\n    \"\"\"\n    If the number of a month is in the set, return the season for that month\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 654, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student2", "submitted_text": "This function prints a list of vowels ", "prompt": "def assessVowels(s):\n    \"\"\"\n    This function prints a set of vowels \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 655, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student5", "submitted_text": "the function assessVowels will take input of a string and return a list of all the vowels in that string in the case they were originally written. ", "prompt": "def assessVowels(s):\n    \"\"\"\n    the function assessVowels will take input of a string and return a set of all the vowels in that string in the case they were originally written. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 657, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student5", "submitted_text": "the function assessVowels will take input of a string and return a list of all the vowels in that string. include both capital and lower case letters. ", "prompt": "def assessVowels(s):\n    \"\"\"\n    the function assessVowels will take input of a string and return a set of all the vowels in that string. include both capital and lower case letters. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 658, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student8", "submitted_text": "Returns a list of all vowels (capitalized or non-capitalized) from the given string.", "prompt": "def assessVowels(s):\n    \"\"\"\n    Returns a set of all vowels (capitalized or non-capitalized) from the given string.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 659, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student11", "submitted_text": "A function that can help find out all 'a', 'e','i','o','u','A','E','I','O','U' a string has, and form a list with all those letters it has.", "prompt": "def assessVowels(s):\n    \"\"\"\n    A function that can help find out all 'a', 'e','i','o','u','A','E','I','O','U' a string has, and form a set with all those letters it has.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 660, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student13", "submitted_text": "Given a string of characters, the function extracts the vowels in the string and returns them in a list.", "prompt": "def assessVowels(s):\n    \"\"\"\n    Given a string of characters, the function extracts the vowels in the string and returns them in a set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 662, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student13", "submitted_text": "Given a string of characters, the functions should then extract the vowels in the string and returns them in a list, making sure to account for both uppercase and lowercase versions of the vowels. ", "prompt": "def assessVowels(s):\n    \"\"\"\n    Given a string of characters, the functions should then extract the vowels in the string and returns them in a set, making sure to account for both uppercase and lowercase versions of the vowels. \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 663, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student16", "submitted_text": "return a list of strings with all vowels used in the input", "prompt": "def assessVowels(s):\n    \"\"\"\n    return a set of strings with all vowels used in the input\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 665, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student16", "submitted_text": "return a list of strings with all vowels used in the input in the same order including capitalizations (repetitions ok)", "prompt": "def assessVowels(s):\n    \"\"\"\n    return a set of strings with all vowels used in the input in the same order including capitalizations (repetitions ok)\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 666, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student22", "submitted_text": "takes in a string and returns a list of vowels ", "prompt": "def assessVowels(s):\n    \"\"\"\n    takes in a string and returns a set of vowels \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 667, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student22", "submitted_text": "takes in a string and checks for uppercase and lowercase vowels and returns a list of those uppercase and lowercase vowels, if any", "prompt": "def assessVowels(s):\n    \"\"\"\n    takes in a string and checks for uppercase and lowercase vowels and returns a set of those uppercase and lowercase vowels, if any\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 668, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student37", "submitted_text": "Write a function which takes a string as an input and returns a list of each vowel present in the string, case sensitive", "prompt": "def assessVowels(s):\n    \"\"\"\n    Write a function which takes a string as an input and returns a set of each vowel present in the string, case sensitive\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 669, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student37", "submitted_text": "Write a function which takes a string as an input and returns a list of each vowel present in the string, where capitalized vowels are present in the return list as capitalized and lower case vowels as lower case", "prompt": "def assessVowels(s):\n    \"\"\"\n    Write a function which takes a string as an input and returns a set of each vowel present in the string, where capitalized vowels are present in the return set as capitalized and lower case vowels as lower case\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 671, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student72", "submitted_text": "Return a list of the vowels in the input.", "prompt": "def assessVowels(s):\n    \"\"\"\n    Return a set of the vowels in the input.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 672, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student72", "submitted_text": "Return a list of both the uppercase and lowercase vowels in the input.", "prompt": "def assessVowels(s):\n    \"\"\"\n    Return a set of both the uppercase and lowercase vowels in the input.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 673, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student73", "submitted_text": "if the input string has any of these letters [a, A, e, E, i, I, o, O, u, U], extract them from the string and make a list. if the input doesn't consist of these letters, make an empty list", "prompt": "def assessVowels(s):\n    \"\"\"\n    if the input string has any of these letters [a, A, e, E, i, I, o, O, u, U], extract them from the string and make a set. if the input doesn't consist of these letters, make an empty set\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 674, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student74", "submitted_text": "puts all the vowels of a string in a list", "prompt": "def assessVowels(s):\n    \"\"\"\n    puts all the vowels of a string in a set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 677, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student33", "submitted_text": "The function takes in 5 lists consisting of 5 strings and one additional string \"target\". If any of the lists consists of all 5 strings with the same content as \"target,\" the function returns True. Otherwise, the function returns False. ", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    The function takes in 5 sets consisting of 5 strings and one additional string \"target\". If any of the sets consists of all 5 strings with the same content as \"target,\" the function returns True. Otherwise, the function returns False. \n    \"\"\"\n    ", "subset": "first_success", "original": "lists"}
{"__index_level_0__": 678, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student35", "submitted_text": "'board' is a list of lists with string values. 'letter' is a string value. The function checks if there is any list inside the list of lists in which all the values are the exact same as that of 'letter'. If so, it returns True otherwise False.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    'board' is a set of sets with string values. 'letter' is a string value. The function checks if there is any set inside the set of sets in which all the values are the exact same as that of 'letter'. If so, it returns True otherwise False.\n    \"\"\"\n    ", "subset": "first_success", "original": "lists"}
{"__index_level_0__": 679, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student35", "submitted_text": "'board' is a list of lists with string values. 'letter' is a string value. The function checks if there is any list inside the list of lists in which all the values match with letter. If so, it returns True otherwise False.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    'board' is a set of sets with string values. 'letter' is a string value. The function checks if there is any set inside the set of sets in which all the values match with letter. If so, it returns True otherwise False.\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 680, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student40", "submitted_text": "if one of the lists within the list contains strings that all contain the same value, the function will return 'True'. otherwise, the function will return 'False'. ", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    if one of the sets within the set contains strings that all contain the same value, the function will return 'True'. otherwise, the function will return 'False'. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 681, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student44", "submitted_text": "Return true if there is an index that has the same value for all the arrays in the array or there is an array with all the same values.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Return true if there is an index that has the same value for all the sets in the set or there is an set with all the same values.\n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 683, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student44", "submitted_text": "Return true if there is an index that contains the same value in all the arrays in the array or there is an array with all the same values.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Return true if there is an index that contains the same value in all the sets in the set or there is an set with all the same values.\n    \"\"\"\n    ", "subset": "last_failure", "original": "array"}
{"__index_level_0__": 684, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student50", "submitted_text": "If all elements of a row or all elements of a column in a 2D array are the same, return true. Else, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    If all elements of a row or all elements of a column in a 2D set are the same, return true. Else, return false.\n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 689, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student50", "submitted_text": "Iterate through a 2D array. If a row or column of an array contain all the same element, return true. For example, if the row length is 5, check all 5 elements in the list. Else, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Iterate through a 2D set. If a row or column of an set contain all the same element, return true. For example, if the row length is 5, check all 5 elements in the set. Else, return false.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 690, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student59", "submitted_text": "takes a list of lists and a string as inputs. if the string appears in the same index in each list or appears for every value in a list, returns True. for all other cases, returns False", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    takes a set of sets and a string as inputs. if the string appears in the same index in each set or appears for every value in a set, returns True. for all other cases, returns False\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 691, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student60", "submitted_text": "This function takes in a 2d list as its parameter. Each list in the 2d list contains either '', 'X', 'O'. If the 'X' or the 'O' next to each other 5 times, True is returned. Otherwise False is returned. It's similar to game of 4 in a row. ", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    This function takes in a 2d set as its parameter. Each set in the 2d set contains either '', 'X', 'O'. If the 'X' or the 'O' next to each other 5 times, True is returned. Otherwise False is returned. It's similar to game of 4 in a row. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 692, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student63", "submitted_text": "The function will take in a list of lists and a character and will output a True or False. If the list has any lists in it for which all of the entries are the inputted letter, the function return True, if there are no lists in the list for which every entry is the inputted letter, the function returns False.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    The function will take in a set of sets and a character and will output a True or False. If the set has any sets in it for which all of the entries are the inputted letter, the function return True, if there are no sets in the set for which every entry is the inputted letter, the function returns False.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 693, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student64", "submitted_text": "In list of lists, if every character in list is equal to letter, return true. Otherwise, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    In set of sets, if every character in set is equal to letter, return true. Otherwise, return false.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 697, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student64", "submitted_text": "In list of lists, if each character in list is equal to letter, return true. Otherwise, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    In set of sets, if each character in set is equal to letter, return true. Otherwise, return false.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 698, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student69", "submitted_text": "Enter a list of lists of strings. if any list has five consecutive 'X' values, return true. else return false", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Enter a set of sets of strings. if any set has five consecutive 'X' values, return true. else return false\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 699, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student69", "submitted_text": "Enter a list where the 0th index is a list of lists of strings, and the 1st index is a character. if any list in the 0th index has five consecutive values of the character entered in the 1st index, return true. else return false", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Enter a set where the 0th index is a set of sets of strings, and the 1st index is a character. if any set in the 0th index has five consecutive values of the character entered in the 1st index, return true. else return false\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 702, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student76", "submitted_text": "Looks through a list of lists and if one list contains only 'X' it returns True if not it returns False", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Looks through a set of sets and if one set contains only 'X' it returns True if not it returns False\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 703, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student76", "submitted_text": "Looks through a dictionary and if one list inside the dictionary contains only 'X' it returns True if not it returns False", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Looks through a dictionary and if one set inside the dictionary contains only 'X' it returns True if not it returns False\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 706, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student27", "submitted_text": "Calculate the total value of a list of ice cream. The input will be a list of strings, and each string contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each string. The value can be integers or floats.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Calculate the total value of a set of ice cream. The input will be a set of strings, and each string contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each string. The value can be integers or floats.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 707, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "For each list entry, parse through the string until after the 2nd \"\\\" character. Then return the integer following the \"t\" character. Keep track of the integer for each entry and add them all together, returning the sum for each list\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    For each set entry, parse through the string until after the 2nd \"\\\" character. Then return the integer following the \"t\" character. Keep track of the integer for each entry and add them all together, returning the sum for each set\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 714, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "For each list entry, start at the end of the corresponding string, parse backwards until you reach the first \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    For each set entry, start at the end of the corresponding string, parse backwards until you reach the first \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 715, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student32", "submitted_text": "Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. ", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the numbers in each element in the set following the last instance of '/t' in the element. \n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 717, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student32", "submitted_text": "Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. the sum should include numbers with decimals\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the numbers in each element in the set following the last instance of '/t' in the element. the sum should include numbers with decimals\n\n    \"\"\"\n    ", "subset": "last_success", "original": "array"}
{"__index_level_0__": 718, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student34", "submitted_text": "Convert all that appears after the last t of each object in the list into a float, and then find the sum of the floats", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Convert all that appears after the last t of each object in the set into a float, and then find the sum of the floats\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 722, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student34", "submitted_text": "Convert all that appears after the final \"t\" of each object in the list into a float, make a new list of those floats, and find the sum of that list", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Convert all that appears after the final \"t\" of each object in the set into a float, make a new set of those floats, and find the sum of that set\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 723, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student49", "submitted_text": "Given a list of strings remove anything past the last t in the string, type cast to an integer and then add them together. ", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Given a set of strings remove anything past the last t in the string, type cast to an integer and then add them together. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 727, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student49", "submitted_text": "Given a list of strings remove anything past the last t in the string, type cast the value to float. Move to the next string in the list, if exists and repeat. Once the end at the end of the list and add all values that were cast to float together.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Given a set of strings remove anything past the last t in the string, type cast the value to float. Move to the next string in the set, if exists and repeat. Once the end at the end of the set and add all values that were cast to float together.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 729, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student62", "submitted_text": "for each element in list, adds number directly after '\\t' to count, returns sum", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    for each element in set, adds number directly after '\\t' to count, returns sum\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 732, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student62", "submitted_text": "for each element in list, adds float directly after the second '\\t' to count, returns sum", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    for each element in set, adds float directly after the second '\\t' to count, returns sum\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 733, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student66", "submitted_text": "return the sum of the float in each item in the array list", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    return the sum of the float in each item in the set\n    \"\"\"\n    ", "subset": "first_failure", "original": "array list"}
{"__index_level_0__": 735, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student66", "submitted_text": "take the float at the end of each item in the array list and sum all of the values return the sum", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    take the float at the end of each item in the set and sum all of the values return the sum\n    \"\"\"\n    ", "subset": "last_success", "original": "array list"}
{"__index_level_0__": 740, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student68", "submitted_text": "given an array of strings, parse each string by '\\t' and grab the last value that should be a number and add it to a count value. return the count value", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given an set of strings, parse each string by '\\t' and grab the last value that should be a number and add it to a count value. return the count value\n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 741, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student68", "submitted_text": "given an array of strings, parse each string by '\\t' and grab the last value that should be a double and add it to a count value. return the count value", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given an set of strings, parse each string by '\\t' and grab the last value that should be a double and add it to a count value. return the count value\n    \"\"\"\n    ", "subset": "last_success", "original": "array"}
{"__index_level_0__": 742, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student70", "submitted_text": "Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into an integer, then add that integer to the sum. Return the sum at the end of the list.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input set. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into an integer, then add that integer to the sum. Return the sum at the end of the set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 744, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student70", "submitted_text": "Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string. If this remaining portion of the string contains \".\", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Return the sum at the end of the list.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input set. After the second time \"\\t\" appears in the string, save the rest of the string. If this remaining portion of the string contains \".\", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Return the sum at the end of the set.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 745, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student78", "submitted_text": "given a list of strings, split each string on the '\\' character. in the new list of 3 strings, take the string in the 3rd position, eliminate the 't' in it, convert it to a float, and add it to running total. output this total", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given a set of strings, split each string on the '\\' character. in the new set of 3 strings, take the string in the 3rd position, eliminate the 't' in it, convert it to a float, and add it to running total. output this total\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 752, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student27", "submitted_text": "The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. They don't have to be in the same order or same length. Return a dictionary with the string as the key and the position of the string as the value.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" set and a \"wordList\" set. They consist of strings and have equal length. Check if the string in the puzzle set contains all the characters of the string in the wordList set. They don't have to be in the same order or same length. Return a dictionary with the string as the key and the position of the string as the value.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 754, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student29", "submitted_text": "For each string within the list, parse the string until the previous letters make up a complete word. Return that word as the key and its index as its value in a dictionary. Else, return an empty dictionary", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    For each string within the set, parse the string until the previous letters make up a complete word. Return that word as the key and its index as its value in a dictionary. Else, return an empty dictionary\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 760, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student49", "submitted_text": "Given a two lists labeled puzzle and wordList, for each word in the wordList, if the same letters appear in puzzle, create a dictionary with the corresponding word in WordList as the key and the position of where the letters show up in puzzle as the value. ", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Given a two sets labeled puzzle and wordList, for each word in the wordList, if the same letters appear in puzzle, create a dictionary with the corresponding word in WordList as the key and the position of where the letters show up in puzzle as the value. \n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 763, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student56", "submitted_text": "compares first list to second list and counts if the first list's values' letters match a value in the second list. If they match perfectly, returns 3 as a count\nreturns dictionary with keys as the second list, and values as the counts", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    compares first set to second set and counts if the first set's values' letters match a value in the second set. If they match perfectly, returns 3 as a count\nreturns dictionary with keys as the second set, and values as the counts\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 764, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student62", "submitted_text": "check if any elements in first list include characters from each element in second list. If they do, add to dictionary", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    check if any elements in first set include characters from each element in second set. If they do, add to dictionary\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 767, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student66", "submitted_text": "if the letters of the strings in the first array list are in the array list above then create a dictionary where the second array list string is the key and the index is the definition. ", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    if the letters of the strings in the first set are in the set above then create a dictionary where the second set string is the key and the index is the definition. \n    \"\"\"\n    ", "subset": "first_failure", "original": "array list"}
{"__index_level_0__": 768, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student66", "submitted_text": "if the letters contained in the first string are entirely contained in a string in the second array list. then create a dictionary where the that string is the key and the index is within that key", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    if the letters contained in the first string are entirely contained in a string in the second set. then create a dictionary where the that string is the key and the index is within that key\n    \"\"\"\n    ", "subset": "last_failure", "original": "array list"}
{"__index_level_0__": 773, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student68", "submitted_text": "given two arrays of strings, for each word in the second array, count how many strings in the first array contain all the characters in the word in the second array. ", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    given two sets of strings, for each word in the second set, count how many strings in the first set contain all the characters in the word in the second set. \n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 774, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student70", "submitted_text": "create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each string of the input set puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 777, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student70", "submitted_text": "create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain the same letters in any order as a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each string of the input set puzzle. if any of the strings in puzzle contain the same letters in any order as a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 778, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student78", "submitted_text": "given that puzzle is a list of strings, check if the letters of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that puzzle is a set of strings, check if the letters of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 790, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student9", "submitted_text": "The function shows how many characters, including ''', each string within the list has in common with the characters in the string outside the list.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function shows how many characters, including ''', each string within the set has in common with the characters in the string outside the set.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 793, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student15", "submitted_text": "For each word in the guessList, if it has a letter in the hiddenWord and the letter is in the correct spot, add 2. If it has a letter in the hiddenWord and the letter is not in the correct spot, add 1. Return a list of the total point scores for each word in guessList.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    For each word in the guessList, if it has a letter in the hiddenWord and the letter is in the correct spot, add 2. If it has a letter in the hiddenWord and the letter is not in the correct spot, add 1. Return a set of the total point scores for each word in guessList.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 794, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student24", "submitted_text": "For each word in guessList, if the character of the hiddenWord[i] matches the same position and are the same word, add 2. If the word in guessList and the hiddenWord have the same characters but not in the same position, add 1. Return a list with the score for each word in a list. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    For each word in guessList, if the character of the hiddenWord[i] matches the same position and are the same word, add 2. If the word in guessList and the hiddenWord have the same characters but not in the same position, add 1. Return a set with the score for each word in a set. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 796, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student31", "submitted_text": "Takes a list of strings and a single string called the answer. Then, for each string in the list of strings, compares it to the answer and creates an integer score for that string. For every time the string in the list of strings has the same letter in the same place as the answer, adds two to the score. For every time the string in the list of strings has the same letter in a different place as the answer, adds one to the score. Then, adds that score to a list and starts a new score at 0 for the next string in the list of strings. Continue until all the strings in the list of strings have been compared with the answer, and then return the list of scores. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Takes a set of strings and a single string called the answer. Then, for each string in the set of strings, compares it to the answer and creates an integer score for that string. For every time the string in the set of strings has the same letter in the same place as the answer, adds two to the score. For every time the string in the set of strings has the same letter in a different place as the answer, adds one to the score. Then, adds that score to a set and starts a new score at 0 for the next string in the set of strings. Continue until all the strings in the set of strings have been compared with the answer, and then return the set of scores. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 798, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student45", "submitted_text": "Takes two parameters: a list of strings which we will call guessList and a string which we will call hiddenWord. Makes a new list called scores. For each string in guessList, we will compare each character to the characters in hiddenWord. Make a variable called score. If the letter at each index in the string is the same as the letter at that index in hiddenWord, add 2 to score. If the letter is the same as a letter at a different index in hiddenWord, add 1 to score. Add score to scores. Return scores. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Takes two parameters: a set of strings which we will call guessList and a string which we will call hiddenWord. Makes a new set called scores. For each string in guessList, we will compare each character to the characters in hiddenWord. Make a variable called score. If the letter at each index in the string is the same as the letter at that index in hiddenWord, add 2 to score. If the letter is the same as a letter at a different index in hiddenWord, add 1 to score. Add score to scores. Return scores. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 807, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student55", "submitted_text": "Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function returns a list of the total points from each word in the list.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function that gets a set of strings and the hidden word (a string separated by a comma). From the set of strings, compare each letter from the strings in the set with the hidden word. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function returns a set of the total points from each word in the set.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 808, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student58", "submitted_text": "Cross reference the string with the list to return a list of integers representing identical characters", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Cross reference the string with the set to return a set of integers representing identical characters\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 812, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student29", "submitted_text": "For each entry in the list, loop through each character in the string and count how many \"&\" are in each entry. Then add up the number of \"&\" in each entry and return the total number of \"&\" in the list", "prompt": "def andCount(andGrid):\n    \"\"\"\n    For each entry in the set, loop through each character in the string and count how many \"&\" are in each entry. Then add up the number of \"&\" in each entry and return the total number of \"&\" in the set\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 813, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student32", "submitted_text": "Returns the sum of the number of times '&' is found within each string of each element of the array", "prompt": "def andCount(andGrid):\n    \"\"\"\n    Returns the sum of the number of times '&' is found within each string of each element of the set\n    \"\"\"\n    ", "subset": "first_success", "original": "array"}
{"__index_level_0__": 814, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student34", "submitted_text": "Count how many times \"&\" appears in each item and make a new list where you the items correspond with each integer. Then find the sum of the new list. ", "prompt": "def andCount(andGrid):\n    \"\"\"\n    Count how many times \"&\" appears in each item and make a new set where you the items correspond with each integer. Then find the sum of the new set. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 815, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student49", "submitted_text": "Given a list of strings, count how many times the & operator appears in the list.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    Given a set of strings, count how many times the & operator appears in the set.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 816, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student56", "submitted_text": "iterates through values in list, checking if they are equal to -, if the values are not, the count goes up by 1 and the count is returned", "prompt": "def andCount(andGrid):\n    \"\"\"\n    iterates through values in set, checking if they are equal to -, if the values are not, the count goes up by 1 and the count is returned\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 817, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student62", "submitted_text": "for each element in list, counts number of '&', returns sum.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    for each element in set, counts number of '&', returns sum.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 818, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student66", "submitted_text": "count the number of and symbols in the array lists return the total\n", "prompt": "def andCount(andGrid):\n    \"\"\"\n    count the number of and symbols in the set return the total\n\n    \"\"\"\n    ", "subset": "first_success", "original": "array lists"}
{"__index_level_0__": 819, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student67", "submitted_text": "Reads list, and if list has '&' and majority '-', returns the lowest number of dashes in an item times 3. If the majority of the input in an item is '&', returns the highest number of & times 2. Returns 0 if there aren't both & and -.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    Reads set, and if set has '&' and majority '-', returns the lowest number of dashes in an item times 3. If the majority of the input in an item is '&', returns the highest number of & times 2. Returns 0 if there aren't both & and -.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 826, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student67", "submitted_text": "If '&' and '-' is in an item of the list, and if there are more '-' than '&', returns number of '-' times 3. Otherwise returns the number of '&' times 2. ", "prompt": "def andCount(andGrid):\n    \"\"\"\n    If '&' and '-' is in an item of the set, and if there are more '-' than '&', returns number of '-' times 3. Otherwise returns the number of '&' times 2. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 827, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student68", "submitted_text": "given an array of strings, the function will return the number of times the character '&' appears in the array of strings", "prompt": "def andCount(andGrid):\n    \"\"\"\n    given an set of strings, the function will return the number of times the character '&' appears in the set of strings\n    \"\"\"\n    ", "subset": "first_success", "original": "array"}
{"__index_level_0__": 828, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student70", "submitted_text": "Iterate through each string in the input list. If a character in the current string is \"&\", add 1 to the count. Return the count at the end of the list.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    Iterate through each string in the input set. If a character in the current string is \"&\", add 1 to the count. Return the count at the end of the set.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 831, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student19", "submitted_text": "Takes an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Takes an input string, single character, and set of index numbers. Every character in the input string at one of these input indexes is replaced with the input character.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 832, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student19", "submitted_text": "Takes an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character. If an index is greater than the length of the string - 1, it is ignored.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Takes an input string, single character, and set of index numbers. Every character in the input string at one of these input indexes is replaced with the input character. If an index is greater than the length of the string - 1, it is ignored.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 838, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student36", "submitted_text": "Insert the character contained in the second string into the character indexes of the first string contained in the list", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Insert the character contained in the second string into the character indexes of the first string contained in the set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 845, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student42", "submitted_text": "given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and return the new string ", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a string, a character, and a set of indexes, replace the listed indexes in the string with the given character and return the new string \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 846, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student42", "submitted_text": "given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and return the new string. if an index is outside the range of the list, ignore it.  ", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a string, a character, and a set of indexes, replace the listed indexes in the string with the given character and return the new string. if an index is outside the range of the set, ignore it.  \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 851, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student57", "submitted_text": "given a string and a character and a list, replace string at specified index in list with given character", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a string and a character and a set, replace string at specified index in set with given character\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 855, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student57", "submitted_text": "given a string and a character and a list, replace string at specified index in list with given character if given index is not in the length of the string, ignore index", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a string and a character and a set, replace string at specified index in set with given character if given index is not in the length of the string, ignore index\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 856, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student77", "submitted_text": "Given a string, a letter, and locations specified in a list, remove the letters in the string in the locations specified in the list, and replace them with the letter.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Given a string, a letter, and locations specified in a set, remove the letters in the string in the locations specified in the set, and replace them with the letter.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 883, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student59", "submitted_text": "takes a string. capitalizes random letters in each word of that string and adds the new words to a list. returns this new list of words", "prompt": "def altText(s):\n    \"\"\"\n    takes a string. capitalizes random letters in each word of that string and adds the new words to a set. returns this new set of words\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 948, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student29", "submitted_text": "For each entry, replace the integer corresponding to the 2nd parameter index with the third parameter integer. return a list with all the altered entries", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    For each entry, replace the integer corresponding to the 2nd parameter index with the third parameter integer. return a set with all the altered entries\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 950, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student32", "submitted_text": "If the input i is 0, then I is set \nFirst, it multiplies the first element of each array in mat with the the input i. Then it replaces the second element of each array in mat with the input n.", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    If the input i is 0, then I is set \nFirst, it multiplies the first element of each set in mat with the the input i. Then it replaces the second element of each set in mat with the input n.\n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 951, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student34", "submitted_text": "replace the value with position i in each list with n", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    replace the value with position i in each set with n\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 952, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student49", "submitted_text": "Given a list of lists and 2 integers, go through each list and replace the number in the spot of the first integer with the number of the second integer", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    Given a set of sets and 2 integers, go through each set and replace the number in the spot of the first integer with the number of the second integer\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 953, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student56", "submitted_text": "\niterates through a list of lists and at the position inputed as i, an integer is replaced with the inputed value of n", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    \niterates through a set of sets and at the position inputed as i, an integer is replaced with the inputed value of n\n    \"\"\"\n    ", "subset": "first_success", "original": "lists"}
{"__index_level_0__": 954, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student62", "submitted_text": "the first integer input corresponds to index. for each element in list, replace the inputted index of list with the second integer input", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    the first integer input corresponds to index. for each element in set, replace the inputted index of set with the second integer input\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 955, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student66", "submitted_text": "replace the index of the fist integer with the second integer within the array list", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    replace the index of the fist integer with the second integer within the set\n    \"\"\"\n    ", "subset": "first_success", "original": "array list"}
{"__index_level_0__": 959, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student67", "submitted_text": "Replaces the first item of the last list with the sum of i and n. ", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    Replaces the first item of the last set with the sum of i and n. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 960, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student68", "submitted_text": "given a list of integer lists and two integers (one represents an index and the other represents a value), in each integer list replace the number at the index correlating with the first input integer with the second input integer. ", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    given a set of integer sets and two integers (one represents an index and the other represents a value), in each integer set replace the number at the index correlating with the first input integer with the second input integer. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 961, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student70", "submitted_text": "For each list in the input list mat, replace the integer at index i with input integer n and return the changed list of lists.", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    For each set in the input set mat, replace the integer at index i with input integer n and return the changed set of sets.\n    \"\"\"\n    ", "subset": "first_success", "original": "lists"}
{"__index_level_0__": 964, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student19", "submitted_text": "Takes an input of two lists, each with the same number of items. Combines the first item in each list into a new list, does this for every item in both lists, then compiles these lists into one last list, and outputs the last list.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Takes an input of two sets, each with the same number of items. Combines the first item in each set into a new set, does this for every item in both sets, then compiles these sets into one last set, and outputs the last set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 965, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student19", "submitted_text": "Takes an input of two lists, l1 and l2, each of which also contains lists. It combines the first list in l1 with the first one in l2, then continues for all items in l1 and l2. It outputs this final list which is a combination of l1 and l2.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Takes an input of two sets, l1 and l2, each of which also contains sets. It combines the first set in l1 with the first one in l2, then continues for all items in l1 and l2. It outputs this final set which is a combination of l1 and l2.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 966, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student20", "submitted_text": "Combine all elements within two lists", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Combine all elements within two sets\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 971, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student20", "submitted_text": "Combine elements sharing the same index in two lists", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Combine elements sharing the same index in two sets\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 972, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student36", "submitted_text": "combine the first half of the lists with the second half of the lists", "prompt": "def combine(l1,l2):\n    \"\"\"\n    combine the first half of the sets with the second half of the sets\n    \"\"\"\n    ", "subset": "first_success", "original": "lists"}
{"__index_level_0__": 973, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student38", "submitted_text": "Combine lists from 11 to lists from 12", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Combine sets from 11 to sets from 12\n    \"\"\"\n    ", "subset": "first_success", "original": "lists"}
{"__index_level_0__": 974, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student42", "submitted_text": "given two lists of lists, l1 and l2, return a list l3 where each element of l3 is a list that is the combination of the respective elements of l1 and l2, so the first element of l3 would be a list containing the elements of the first element of l1 and the first elements of l2, and so forth. ", "prompt": "def combine(l1,l2):\n    \"\"\"\n    given two sets of sets, l1 and l2, return a set l3 where each element of l3 is a set that is the combination of the respective elements of l1 and l2, so the first element of l3 would be a set containing the elements of the first element of l1 and the first elements of l2, and so forth. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 975, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student42", "submitted_text": "given two lists of lists, l1 and l2, return a list l3 where each element of l3 is a list that is the combination of the respective elements of l1 and l2, so the first element of l3 would be a list containing the elements of the first element of l1 and the first elements of l2, and so forth. since the elements of l1 and l2 are lists, assemble a new list from the elements of those lists, instead of simply trying to append one element onto the other", "prompt": "def combine(l1,l2):\n    \"\"\"\n    given two sets of sets, l1 and l2, return a set l3 where each element of l3 is a set that is the combination of the respective elements of l1 and l2, so the first element of l3 would be a set containing the elements of the first element of l1 and the first elements of l2, and so forth. since the elements of l1 and l2 are sets, assemble a new set from the elements of those sets, instead of simply trying to append one element onto the other\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 976, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student43", "submitted_text": "Split the n number of inputted lists into two parts, part a and part b, according to their position in the input. Combine the 1st list in part a with the first list in part b, combine the 2nd list in part a with the second list in part b. More generally, combine the ith list in part a with the ith list in part b. ", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Split the n number of inputted sets into two parts, part a and part b, according to their position in the input. Combine the 1st set in part a with the first set in part b, combine the 2nd set in part a with the second set in part b. More generally, combine the ith set in part a with the ith set in part b. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 978, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student43", "submitted_text": "Count the number of elements in the inputted list, store this number as n. Divide n by 2 store it as m, then combine the 1st element in the list with the 1+m th element in the list, return it as a single element. Then combine the 2nd element in the list with the 2+m th element in the list, return it as a single element. Loop through every  element in the list.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Count the number of elements in the inputted set, store this number as n. Divide n by 2 store it as m, then combine the 1st element in the set with the 1+m th element in the set, return it as a single element. Then combine the 2nd element in the set with the 2+m th element in the set, return it as a single element. Loop through every  element in the set.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 979, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student54", "submitted_text": "Combine the two lists, alternating the lists inside.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Combine the two sets, alternating the sets inside.\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 984, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student57", "submitted_text": "when given two list of lists, combine lists in list by their index, creating one list of lists", "prompt": "def combine(l1,l2):\n    \"\"\"\n    when given two set of sets, combine sets in set by their index, creating one set of sets\n    \"\"\"\n    ", "subset": "first_success", "original": "lists"}
{"__index_level_0__": 987, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student3", "submitted_text": "create function which take 1 input (value). Produce list of list that have value number of list contain value number ascending from 1 to value", "prompt": "def pattern(value):\n    \"\"\"\n    create function which take 1 input (value). Produce set of set that have value number of set contain value number ascending from 1 to value\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 992, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student3", "submitted_text": "create function which take 1 input (value). create list of ascending numbers of value start from 1. insert ", "prompt": "def pattern(value):\n    \"\"\"\n    create function which take 1 input (value). create set of ascending numbers of value start from 1. insert\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 993, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student4", "submitted_text": "uses the given number to produce a given number of lists, each containing elements counting up to the given number from one", "prompt": "def pattern(value):\n    \"\"\"\n    uses the given number to produce a given number of sets, each containing elements counting up to the given number from one\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 994, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student4", "submitted_text": "creates a list containing elements counting up to the given number from 1, duplicates this list by the given number into a list of lists", "prompt": "def pattern(value):\n    \"\"\"\n    creates a set containing elements counting up to the given number from 1, duplicates this set by the given number into a set of sets\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 995, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student10", "submitted_text": "User inputs an int. Function returns a list length value, with each item of the list being another list, containing all numbers from 1 to value.", "prompt": "def pattern(value):\n    \"\"\"\n    User inputs an int. Function returns a set length value, with each item of the set being another set, containing all numbers from 1 to value.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 999, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student17", "submitted_text": "if given 2 output two lists 1,2 and 1,2\nif given 3 out put 3 lists 1,2,3 and 1,2,3 and 1,2,3", "prompt": "def pattern(value):\n    \"\"\"\n    if given 2 output two sets 1,2 and 1,2\nif given 3 out put 3 sets 1,2,3 and 1,2,3 and 1,2,3\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 1000, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student18", "submitted_text": "Create a list that has a list of an integer from 1 to value for value amount of times.", "prompt": "def pattern(value):\n    \"\"\"\n    Create a set that has a set of an integer from 1 to value for value amount of times.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1001, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student21", "submitted_text": "product a list of numbers counting up from 1 to the given value. add this list to a list value number of times.", "prompt": "def pattern(value):\n    \"\"\"\n    product a set of numbers counting up from 1 to the given value. add this set to a set value number of times.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1002, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student25", "submitted_text": "This function takes a given integer and creates a list with numbers 1 to that given value. It creates this list repeated for the given value and returns, appending each list to one list. It returns the list of lists.", "prompt": "def pattern(value):\n    \"\"\"\n    This function takes a given integer and creates a set with numbers 1 to that given value. It creates this set repeated for the given value and returns, appending each set to one set. It returns the set of sets.\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 1003, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student25", "submitted_text": "This function takes a given integer and creates one list including the numbers 1 to that given value. It creates this list repeated for the given value, appending each list to one list. It returns the list of lists.", "prompt": "def pattern(value):\n    \"\"\"\n    This function takes a given integer and creates one set including the numbers 1 to that given value. It creates this set repeated for the given value, appending each set to one set. It returns the set of sets.\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 1004, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student26", "submitted_text": "Generate a sequence of numbers ranging from 1 to the given number and repeat the sequence the given number of times", "prompt": "def pattern(value):\n    \"\"\"\n    Generate a set of numbers ranging from 1 to the given number and repeat the set the given number of times\n    \"\"\"\n    ", "subset": "first_failure", "original": "sequence"}
{"__index_level_0__": 1005, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student26", "submitted_text": "Generate a set of numbers counting up from 1 to the given number and print each set the given number of times", "prompt": "def pattern(value):\n    \"\"\"\n    Generate a set of numbers counting up from 1 to the given number and print each set the given number of times\n    \"\"\"\n    ", "subset": "last_failure", "original": "set"}
{"__index_level_0__": 1006, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student30", "submitted_text": "Create an array containing value number of smaller arrays. Each smaller array contains value number of integers, ranging from 1 to value in order.", "prompt": "def pattern(value):\n    \"\"\"\n    Create an set containing value number of smaller sets. Each smaller set contains value number of integers, ranging from 1 to value in order.\n    \"\"\"\n    ", "subset": "first_success", "original": "array"}
{"__index_level_0__": 1007, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student41", "submitted_text": "Returns a list of lists. The number of lists in the output list should be equal to the value. Each list within the output list should have each integer greater than zero up to, and including, the value inputted.", "prompt": "def pattern(value):\n    \"\"\"\n    Returns a set of sets. The number of sets in the output set should be equal to the value. Each set within the output set should have each integer greater than zero up to, and including, the value inputted.\n    \"\"\"", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1010, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student41", "submitted_text": "Returns a list of lists. The number of lists in the output list should be equal to the value. All of the lists within the output list should have every integer between one and one more than the inputted value.", "prompt": "def pattern(value):\n    \"\"\"\n    Returns a set of sets. The number of sets in the output set should be equal to the value. All of the sets within the output set should have every integer between one and one more than the inputted value.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1011, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student48", "submitted_text": "Make a list of lists. The numbers in the inner lists should be counting up to the number in value. The number of inner lists should be the same amount as value.", "prompt": "def pattern(value):\n    \"\"\"\n    Make a set of sets. The numbers in the inner sets should be counting up to the number in value. The number of inner sets should be the same amount as value.\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 1012, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student51", "submitted_text": "return a list of size value where each object is a list containing all integer values starting at one and up to value", "prompt": "def pattern(value):\n    \"\"\"\n    return a set of size value where each object is a set containing all integer values starting at one and up to value\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1059, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student22", "submitted_text": "check to see if the number is part of the list [1,13,21] and return a boolean value ", "prompt": "def fib(n):\n    \"\"\"\n    check to see if the number is part of the set [1,13,21] and return a boolean value \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1060, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student37", "submitted_text": "Write a function which takes an integer and returns True if the integer is contained on the list of numbers in the fibonacci sequence and False if it is not", "prompt": "def fib(n):\n    \"\"\"\n    Write a function which takes an integer and returns True if the integer is contained on the set of numbers in the fibonacci sequence and False if it is not\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1066, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student3", "submitted_text": "create a function with 3 input word(string), line_number (int) and map (dict). In map dictionary add new element of dictionary with key are word which given the corresponding list of line number", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    create a function with 3 input word(string), line_number (int) and map (dict). In map dictionary add new element of dictionary with key are word which given the corresponding set of line number\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1071, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student10", "submitted_text": "Function would check if the string word is a key in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new list as a value.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Function would check if the string word is a key in the dictionary map. If word is in map, add line_number to the set in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new set as a value.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1072, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student10", "submitted_text": "Function would check if the string word is a key in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new list as a value. Returns an updated map.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Function would check if the string word is a key in the dictionary map. If word is in map, add line_number to the set in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new set as a value. Returns an updated map.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1075, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student18", "submitted_text": "If the word already exist in the map, add the line_number at the very end of the list for the word in the map. If word does not exist in the map, create the word as a category at the end of the map and add line_number in the list for the word. ", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    If the word already exist in the map, add the line_number at the very end of the set for the word in the map. If word does not exist in the map, create the word as a category at the end of the map and add line_number in the set for the word. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1079, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student25", "submitted_text": "This function adds the input \"word\" and \"line_number to the dictionary \"map\". \"word\" is the key and \"line_number\" is the value. \"line_number\" will be a list in the dictionary.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    This function adds the input \"word\" and \"line_number to the dictionary \"$map\". \"word\" is the key and \"line_number\" is the value. \"line_number\" will be a set in the dictionary.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1080, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student25", "submitted_text": "This function adds the input \"word\" and \"line_number to the dictionary \"map\". \"word\" is the key and \"line_number\" is the value. \"line_number\" will be a list in the dictionary. The function returns the dictionary.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    This function adds the input \"word\" and \"line_number to the dictionary \"map\". \"word\" is the key and \"line_number\" is the value. \"line_number\" will be a set in the dictionary. The function returns the dictionary.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1084, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student30", "submitted_text": "If word is already present in map, add line_number to the array corresponding to the \"word\" key in map. \n\nOtherwise, add line_number as a new value to map, with word as its corresponding key.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    If word is already present in map, add line_number to the set corresponding to the \"word\" key in map. \n\nOtherwise, add line_number as a new value to map, with word as its corresponding key.\n    \"\"\"\n    ", "subset": "last_failure", "original": "array"}
{"__index_level_0__": 1121, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student6", "submitted_text": "Three total inputs: a string, a list of punctuation characters, and another punctuation character that was not in the first list. Function checks if each of the characters in the list is contained in the string. Creates a new string where any characters that were in the list are replaces with the character in the third input", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Three total inputs: a string, a set of punctuation characters, and another punctuation character that was not in the first set. Function checks if each of the characters in the set is contained in the string. Creates a new string where any characters that were in the set are replaces with the character in the third input\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1122, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student7", "submitted_text": "Takes a string and a list of characters within that string. Characters found within the string are replaced with the wanted separating character ", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Takes a string and a set of characters within that string. Characters found within the string are replaced with the wanted separating character\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1123, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student9", "submitted_text": "The function replaces every item in the list that appears in the first string with the second string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    The function replaces every item in the set that appears in the first string with the second string.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1125, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student15", "submitted_text": "removes everything in the list and replaces it with what is after the list.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    removes everything in the set and replaces it with what is after the set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1126, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student15", "submitted_text": "for every character in the list, looks through the string and if the character is in the string, replaces it with sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    for every character in the set, looks through the string and if the character is in the string, replaces it with sep.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1128, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student28", "submitted_text": "Write a code that takes three parameters. The first parameter is a string s. The second parameter are a list of characters included in the string. And the third parameter is a single character. The code should replace the characters in the string with the last parameter of the single character.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Write a code that takes three parameters. The first parameter is a string s. The second parameter are a set of characters included in the string. And the third parameter is a single character. The code should replace the characters in the string with the last parameter of the single character.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1129, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student31", "submitted_text": "Takes a string, a list of strings with length 1, and a separate string with length one called the replacement. Then, for each string in the list of strings, replaces any instance of them in the first string with the replacement string. Then returns this modified string. ", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Takes a string, a set of strings with length 1, and a separate string with length one called the replacement. Then, for each string in the set of strings, replaces any instance of them in the first string with the replacement string. Then returns this modified string. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1130, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student39", "submitted_text": "The goal for function multisplit(s,chars,sep) is to substitute the grammatical markers or items given to you in a list (chars) and substitute the items in this given list with the string given to you in sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    The goal for function multisplit(s,chars,sep) is to substitute the grammatical markers or items given to you in a set (chars) and substitute the items in this given set with the string given to you in sep.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1131, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student45", "submitted_text": "Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and insert sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Takes three inputs: a string which we will call s, a set of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and insert sep.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1133, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student45", "submitted_text": "Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and replace the character from s at the index where we split with sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Takes three inputs: a string which we will call s, a set of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and replace the character from s at the index where we split with sep.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1134, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student46", "submitted_text": "The function takes in first a string, second a list of characters and third a single character. It then replaces all instances of the characters within list of characters, with the single character in the string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    The function takes in first a string, second a set of characters and third a single character. It then replaces all instances of the characters within set of characters, with the single character in the string.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1137, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student55", "submitted_text": "Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a comma and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Write a function that gets a string, a set of characthers, and a separator element. The function should get only the first string separated by a comma and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.\n    \"\"\"\n    ", "subset": "first_failure", "original": "collection"}
{"__index_level_0__": 1138, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student55", "submitted_text": "Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a double quotes or simple quotes and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Write a function that gets a string, a set of characthers, and a separator element. The function should get only the first string separated by a double quotes or simple quotes and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.\n    \"\"\"\n    ", "subset": "last_success", "original": "collection"}
{"__index_level_0__": 1139, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student58", "submitted_text": "use the string and the list to return a string", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    use the string and the set to return a string\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1142, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student27", "submitted_text": "The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Sort the dictionaries by \"year\" in an ascending order. Return the updated list.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    The input will be a set of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Sort the dictionaries by \"year\" in an ascending order. Return the updated set.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1148, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student29", "submitted_text": "Check the second parameter of the input for the string of author name. Then return a list with all input entries where the author value corresponds to that parameter, sorted in order according to the year value", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Check the second parameter of the input for the string of author name. Then return a set with all input entries where the author value corresponds to that parameter, sorted in order according to the year value\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1149, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student32", "submitted_text": "Sort the elements of the array by the year value in its dictionary, from highest to lowest. Then removes the last element in the array and returns the rest", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Sort the elements of the set by the year value in its dictionary, from highest to lowest. Then removes the last element in the set and returns the rest\n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 1151, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student32", "submitted_text": "Returns the list with the a\n\nSort the elements of the array by the year value in its dictionary, from lowest to highest. Then removes the last element in the array and returns the rest", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Returns the set with the a\n\nSort the elements of the set by the year value in its dictionary, from lowest to highest. Then removes the last element in the set and returns the rest\n    \"\"\"\n    ", "subset": "last_failure", "original": "array"}
{"__index_level_0__": 1152, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student34", "submitted_text": "if writer is the same as the value for 'author' for an object in books, add the definition to a new list. Order the new list in ascending order based on the value of 'year'", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    if writer is the same as the value for 'author' for an object in books, add the definition to a new set. Order the new set in ascending order based on the value of 'year'\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1153, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student49", "submitted_text": "Given a list of dictionaries and a string, return a list of the dictionaries where the string is the value of the author key.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Given a set of dictionaries and a string, return a set of the dictionaries where the string is the value of the author key.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1155, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student49", "submitted_text": "Given a list of dictionaries and a string, return a list of the dictionaries where the string is the value of the author key and each dictionary in the list is sorted by ascending the values in the year key.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Given a set of dictionaries and a string, return a set of the dictionaries where the string is the value of the author key and each dictionary in the set is sorted by ascending the values in the year key.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1156, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student56", "submitted_text": "iterates through a list of dictionaries and adds the dictionaries with a given writer to a new list, returns the new list", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    iterates through a set of dictionaries and adds the dictionaries with a given writer to a new set, returns the new set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1159, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student62", "submitted_text": "iterate through each element in list, remove element from list if it does not have the same 'author' as the string provided by user", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    iterate through each element in set, remove element from set if it does not have the same 'author' as the string provided by user\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1160, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student66", "submitted_text": "Sort the array list by year with the oldest book first remove the book 'The Voyage Out' unless there are two dictionaries within the array list then remove the other dictionary", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Sort the set by year with the oldest book first remove the book 'The Voyage Out' unless there are two dictionaries within the set then remove the other dictionary\n    \"\"\"\n    ", "subset": "first_failure", "original": "array list"}
{"__index_level_0__": 1161, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student66", "submitted_text": "Sort the array list by the key year with smallest number first in the array list first remove the book 'The Voyage Out' unless there are two dictionaries within the array list then remove the other dictionary.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Sort the set by the key year with smallest number first in the set first remove the book 'The Voyage Out' unless there are two dictionaries within the set then remove the other dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "array list"}
{"__index_level_0__": 1162, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student67", "submitted_text": "Returns a list of dictionaries of the specified author.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Returns a set of dictionaries of the specified author.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1167, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student68", "submitted_text": "given a dictionary list and a string, return all the dictionaries whose 'author' key value equals the input string ", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    given a dictionary set and a string, return all the dictionaries whose 'author' key value equals the input string \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1169, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student68", "submitted_text": "given a dictionary list and a string, return all the dictionaries whose 'author' key value equals the input string in the order from lowest to highest value of their 'year' key value ", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    given a dictionary set and a string, return all the dictionaries whose 'author' key value equals the input string in the order from lowest to highest value of their 'year' key value \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1174, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student70", "submitted_text": "return all the entries in the input list where the value for the 'author' key is equal to the input writer. Sort the entries in order of increasing year.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    return all the entries in the input set where the value for the 'author' key is equal to the input writer. Sort the entries in order of increasing year.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1175, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student78", "submitted_text": "if books is a list of dictionaries, output a list of dictionaries where the input writer matches the key author", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    if books is a set of dictionaries, output a set of dictionaries where the input writer matches the key author\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1180, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student23", "submitted_text": "This function takes in a list of dictionaries that have the keys:  nominee, the wins, and noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success within each dictionary.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a set of dictionaries that have the keys:  nominee, the wins, and noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The sets are then sorted by the highest success within each dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "lists"}
{"__index_level_0__": 1181, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student33", "submitted_text": "The function takes in a list of dictionaries. The function divides the integer in the third place in the dictionary by the integer in the fourth place in the dictionary, adding a new entry to that dictionary called \"success\" with the output value. It then sorts the dictionary entries by the value in \"success,\" highest to lowest. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a set of dictionaries. The function divides the integer in the third place in the dictionary by the integer in the fourth place in the dictionary, adding a new entry to that dictionary called \"success\" with the output value. It then sorts the dictionary entries by the value in \"success,\" highest to lowest. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1183, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student33", "submitted_text": "The function takes in a list of dictionaries. The function divides the value for \"wins\" in the dictionary by the value for \"noms\" in the dictionary, adding a new entry to that dictionary called \"success\" with the output value truncated to two decimal places. It then sorts the dictionary entries by the value in \"success,\" highest to lowest, returning the dictionaries each on a separate line. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a set of dictionaries. The function divides the value for \"wins\" in the dictionary by the value for \"noms\" in the dictionary, adding a new entry to that dictionary called \"success\" with the output value truncated to two decimal places. It then sorts the dictionary entries by the value in \"success,\" highest to lowest, returning the dictionaries each on a separate line. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1184, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student35", "submitted_text": "The nominations is a list of dictionaries. The function iterates through the dictioanries backwards. A new variable 'success' is created which computes (wins/noms). A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a set of dictionaries. The function iterates through the dictioanries backwards. A new variable 'success' is created which computes (wins/noms). A new set is made. As the input set is iterated through, the new set is appended with the contents of the dictionary along with the corresponding success rate.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1187, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student35", "submitted_text": "The nominations is a list of dictionaries. The function iterates through the dictioanries backwards using a for loop. A new variable 'success' is created which computes (wins/noms) (noms is the key in the dictionary) during each loop run for every dictionary. A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a set of dictionaries. The function iterates through the dictioanries backwards using a for loop. A new variable 'success' is created which computes (wins/noms) (noms is the key in the dictionary) during each loop run for every dictionary. A new set is made. As the input set is iterated through, the new set is appended with the contents of the dictionary along with the corresponding success rate.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1188, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student40", "submitted_text": "the function will divide the number of wins by the number of noms. this will be defined by the new variable 'success'. the function will then return a list that orders the input in increasing order of success values", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    the function will divide the number of wins by the number of noms. this will be defined by the new variable 'success'. the function will then return a set that orders the input in increasing order of success values\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1190, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student40", "submitted_text": "the input is a list of dictionaries. the function will divide the value within key 'wins' by the value within key 'noms'. this number will be rounded to two decimal values. the new number will be stores as a new key, 'success'. the function will then return a list that reorders the dictionaries within the original list, in order of highest success value to lowest success value.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    the input is a set of dictionaries. the function will divide the value within key 'wins' by the value within key 'noms'. this number will be rounded to two decimal values. the new number will be stores as a new key, 'success'. the function will then return a set that reorders the dictionaries within the original set, in order of highest success value to lowest success value.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1191, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student44", "submitted_text": "For every dictionary in the array,\ncalculate the 'success' by dividing the value of wins by noms and add it into the dictionary. \nSort the array in descending order of the value of 'sucess' and print the array. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    For every dictionary in the set,\ncalculate the 'success' by dividing the value of wins by noms and add it into the dictionary. \nSort the set in descending order of the value of 'sucess' and print the set. \n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 1192, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student44", "submitted_text": "For every dictionary in the array,\ncalculate the 'success' by dividing the value of wins by noms and add it into the dictionary. \nSort the array in descending order of the value of 'success' and print the array. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    For every dictionary in the set,\ncalculate the 'success' by dividing the value of wins by noms and add it into the dictionary. \nSort the set in descending order of the value of 'success' and print the set. \n    \"\"\"\n    ", "subset": "last_failure", "original": "array"}
{"__index_level_0__": 1193, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student50", "submitted_text": "Add a new part to each element in the list of dictionaries called \"success\". Calculate success by dividing wins by noms. Return in reverse alphabetical order.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Add a new part to each element in the set of dictionaries called \"success\". Calculate success by dividing wins by noms. Return in reverse alphabetical order.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1196, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student59", "submitted_text": "takes a list of dictionaries as an input. returns an ordered list of the dictionaries in the input", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    takes a set of dictionaries as an input. returns an ordered set of the dictionaries in the input\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1199, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student60", "submitted_text": "This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a 2d set containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1201, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student60", "submitted_text": "This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions output is a single 2d list.\n\nAs an example. Given  [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}] as a parameter this function outputs [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a 2d set containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions output is a single 2d set.\n\nAs an example. Given  [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}] as a parameter this function outputs [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1202, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student63", "submitted_text": "The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms'. The outputted list will also be arranged in descending order based on the value of 'success'.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a set of dictionaries and outputs the same set of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms'. The outputted set will also be arranged in descending order based on the value of 'success'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1203, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student63", "submitted_text": "The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms', rounded to the second decimal place. The outputted list will also be arranged in descending order based on the value of 'success'.  ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a set of dictionaries and outputs the same set of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms', rounded to the second decimal place. The outputted set will also be arranged in descending order based on the value of 'success'.  \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1206, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student64", "submitted_text": "For each dictionary in list, create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Round success to nearest 2 decimal places. Sort by success in descending order. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    For each dictionary in set, create a new dictionary and create a new key value pair called 'success', and assign it to the values 'wins' divided by 'noms.' Round success to nearest 2 decimal places. Sort by success in descending order. \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1207, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student69", "submitted_text": "Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Enter a set of dictionaries. for every dictionary in the set of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1209, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student69", "submitted_text": "Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list, rounded to 2 decimal places. Sort each dictionary in the list alphabetically based on the 'nominee' key. then reverse the order.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Enter a set of dictionaries. for every dictionary in the set of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the set, rounded to 2 decimal places. Sort each dictionary in the set alphabetically based on the 'nominee' key. then reverse the order.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1210, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student71", "submitted_text": "Access each list from a list of list, and their respective 'wins' and 'noms'. Divide 'wins' with 'noms' to create a new key 'success'. Arrange the list of list from the highest 'success' key. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Access each set from a set of set, and their respective 'wins' and 'noms'. Divide 'wins' with 'noms' to create a new key 'success'. Arrange the set of set from the highest 'success' key. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1218, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student76", "submitted_text": "takes the information in the dictionary and positions the different lists based on a new variable called 'success' which is inputted at the end and is the number of 'wins' divided by the number of 'noms'", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    takes the information in the dictionary and positions the different sets based on a new variable called 'success' which is inputted at the end and is the number of 'wins' divided by the number of 'noms'\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 1219, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student79", "submitted_text": "you are going to have a list of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by noms. you are then going to sort the dictionary according to decreasing success.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going to have a set of dictionaries as an input. as an output you are going to add another variable called success to each dictionary which is the wins divided by noms. you are then going to sort the dictionary according to decreasing success.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1227, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student5", "submitted_text": "this function will take a list of flights and the origin city and return the possible layovers with the staring city. Each item in the list of flights will first state the origin city and then state the destination city. If there is a flight with a destination city the same as the same as a flight with the origin city then add it the the output list. ", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    this function will take a set of flights and the origin city and return the possible layovers with the staring city. Each item in the set of flights will first state the origin city and then state the destination city. If there is a flight with a destination city the same as the same as a flight with the origin city then add it the the output set. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1228, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student8", "submitted_text": "Finds a dictionary in the given list with a key of \"origin\" that has the same given string as its value, then takes that dictionary and saves the value stored in \n\nReturns a list that ", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    Finds a dictionary in the given set with a key of \"origin\" that has the same given string as its value, then takes that dictionary and saves the value stored in \n\nReturns a set that \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1229, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student11", "submitted_text": "this function will find the start from a key called 'origin' from input list of dictionary named flights. After find this it will find the value from key named 'dest' from same dictionary, and save this by create an output call x. Then find x in flight to see if it's in one of the dictionary's key 'origin'", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    this function will find the start from a key called 'origin' from input set of dictionary named flights. After find this it will find the value from key named 'dest' from same dictionary, and save this by create an output call x. Then find x in flight to see if it's in one of the dictionary's key 'origin'\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1235, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student22", "submitted_text": "takes in a list of dictionaries and outputs a list of values that can be made with two key value pair matches", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    takes in a set of dictionaries and outputs a set of values that can be made with two key value pair matches\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1236, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student22", "submitted_text": "takes in a list of dictionaries and a string, uses that string as the value for 'origin', finds a corresponding 'dest' and does that twice. if it can do it twice, output the corresponding 'dest', if not output an empty string\n", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    takes in a set of dictionaries and a string, uses that string as the value for 'origin', finds a corresponding 'dest' and does that twice. if it can do it twice, output the corresponding 'dest', if not output an empty string\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1244, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student12", "submitted_text": "Return a list of the 0th element each list of scientists if the 2nd element says \"Physics\". Sort this list from least to greatest by looking at the 1st value in each list within the scientists list. Return this sorted list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Return a set of the 0th element each set of scientists if the 2nd element says \"Physics\". Sort this set from least to greatest by looking at the 1st value in each set within the scientists set. Return this sorted set.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1245, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student19", "submitted_text": "Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is appended to an output list. After all small lists have been checked, it outputs the output list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Takes an input set, which is comprised of smaller sets. Each of these smaller sets has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller set is equal to 'Physics', the first item in that smaller set is appended to an output set. After all small sets have been checked, it outputs the output set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1246, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student19", "submitted_text": "Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is added to an output list. The corresponding number is also recorded. If the number for an item which is being added is less than the corresponding number for the first item in the output list, it is added to the beginning of the output list. Otherwise, it is added to the end. After all small lists have been checked, it outputs the output list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Takes an input set, which is comprised of smaller sets. Each of these smaller sets has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller set is equal to 'Physics', the first item in that smaller set is added to an output set. The corresponding number is also recorded. If the number for an item which is being added is less than the corresponding number for the first item in the output set, it is added to the beginning of the output set. Otherwise, it is added to the end. After all small sets have been checked, it outputs the output set.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1247, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student20", "submitted_text": "Return a list of the first string in the list of lists that contain 'Physics'", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Return a set of the first string in the set of sets that contain 'Physics'\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 1253, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student36", "submitted_text": "If the list contains \"Physics\" return the first string in order of the numbers from lowest to highest", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    If the set contains \"Physics\" return the first string in order of the numbers from lowest to highest\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1256, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student36", "submitted_text": "The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return just the names, in order of what year they graduated from lowest to highest", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    The internal sets contain name, year graduated and subject. If the subject is \"Physics\" return just the names, in order of what year they graduated from lowest to highest\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 1259, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student38", "submitted_text": "If position in list in scientists has \"Peiris\", add 'Peiris' to new list. If position in list in scientists has \"Ghez\", add 'Ghez' to new list. If position in list in scientists has \"Strickland\", add 'Strickland' to new list. ", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    If position in set in scientists has \"Peiris\", add 'Peiris' to new set. If position in set in scientists has \"Ghez\", add 'Ghez' to new set. If position in set in scientists has \"Strickland\", add 'Strickland' to new set. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1260, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student42", "submitted_text": "given a list of lists, where each sublist is the name of a scientist, their age, and their field indexed in that order, return a list that contains only the names of scientists whose field is \"Physics\", such that the scientist's name who has the smallest age appears first in the output list. ", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    given a set of sets, where each sublist is the name of a scientist, their age, and their field indexed in that order, return a set that contains only the names of scientists whose field is \"Physics\", such that the scientist's name who has the smallest age appears first in the output set. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1261, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student43", "submitted_text": "Loop through each list in scientists: check if the third element in the list is Physics. If true, return the 1st element in the list. If false, do nothing.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Loop through each set in scientists: check if the third element in the set is Physics. If true, return the 1st element in the set. If false, do nothing.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1263, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student43", "submitted_text": "Create an empty list A. Loop through each list in scientists: check if the third element in the list is Physics. If true, append the 1st element to list A. If false, do nothing. Now reorder each element in A, according to each element's corresponding list in scientists's second entry value, the order should be from smallest numerical value to the largest numerical value.  Return list A.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Create an empty set A. Loop through each set in scientists: check if the third element in the set is Physics. If true, append the 1st element to set A. If false, do nothing. Now reorder each element in A, according to each element's corresponding set in scientists's second entry value, the order should be from smallest numerical value to the largest numerical value.  Return set A.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1264, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student54", "submitted_text": "If the list contains \"Physics\", return the string at index 0. Sort these into a new list based off the integer at index 1.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    If the set contains \"Physics\", return the string at index 0. Sort these into a new set based off the integer at index 1.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1266, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student54", "submitted_text": "Check that the inner list contains the string \"Physics\" at index 2. If so, append the string at index 0 to a new list. Sort these into a new list based on the integer at index 1.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Check that the inner set contains the string \"Physics\" at index 2. If so, append the string at index 0 to a new set. Sort these into a new set based on the integer at index 1.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1267, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student57", "submitted_text": "when given a list of lists, if last index of list in lists is equal to \"Physics\", return the first value in list of lists in a new list", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    when given a set of sets, if last index of set in sets is equal to \"Physics\", return the first value in set of sets in a new set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1269, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student57", "submitted_text": "when given a list of lists, if last index of list in lists is equal to \"Physics\", return the first value in list of lists in a new list. however, if multiple values are to be added to the new list, list in order of ascending order of the second value in list of lists.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    when given a set of sets, if last index of set in sets is equal to \"Physics\", return the first value in set of sets in a new set. however, if multiple values are to be added to the new set, list in order of ascending order of the second value in set of sets.\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 1270, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student77", "submitted_text": "Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Given a set of sets with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1281, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student5", "submitted_text": "the function find_multiples will take the input of a starting number, a stopping number, and a factor. The function will start counting at the starting number and count up by the factor, stopping at the stopping number but including it in the list. ", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    the function find_multiples will take the input of a starting number, a stopping number, and a factor. The function will start counting at the starting number and count up by the factor, stopping at the stopping number but including it in the set. \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1282, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student8", "submitted_text": "Finds multiples of the last number in the given list between the first number in the given list and the second number in the given list, inclusive.", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    Finds multiples of the last number in the given set between the first number in the given set and the second number in the given set, inclusive.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1283, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student11", "submitted_text": "a function ask for start, stop, factor and by adding up start*factor and getting sum of those all the way until we get the stop. Then create a list to hold those values", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask for start, stop, factor and by adding up start*factor and getting sum of those all the way until we get the stop. Then create a set to hold those values\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1287, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student11", "submitted_text": "a function ask for three inputs:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we get the sum==stop. Then create a list to hold those values.", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    a function ask for three inputs:start, stop, factor. By adding up start*factor and records all the sum of those all the way until we get the sum==stop. Then create a set to hold those values.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1294, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student16", "submitted_text": "from the start number inputted, count by the factor until the stop number, including the stop number and return as list", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    from the start number inputted, count by the factor until the stop number, including the stop number and return as set\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1295, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student22", "submitted_text": "take in a list of integers [start number, final number, step size] and output a list based on those parameters", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    take in a set of integers [start number, final number, step size] and output a set based on those parameters\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1298, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student22", "submitted_text": "take in a list of integers [start, stop, factor] and output a list starting at the closest even number to the start, and including the stop number", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    take in a set of integers [start, stop, factor] and output a set starting at the closest even number to the start, and including the stop number\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1299, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student37", "submitted_text": "Write a function which takes three integers, start, stop, and factor, and checks each integer between start and stop inclusively and adds the number to the list Nums if the number is evenly divisible by factor", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    Write a function which takes three integers, start, stop, and factor, and checks each integer between start and stop inclusively and adds the number to the set Nums if the number is evenly divisible by factor\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1303, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student72", "submitted_text": "Produce a list of multiples with the given input. The first and second number of the input are the bounds and the last number is the multiple.", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    Produce a set of multiples with the given input. The first and second number of the input are the bounds and the last number is the multiple.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1304, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student72", "submitted_text": "Produce a list of multiples with the given input. The first number of the input is the starting bound and the second number is the the ending bound, but is included in the list of multiples if applicable. The last number is the multiple.", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    Produce a set of multiples with the given input. The first number of the input is the starting bound and the second number is the the ending bound, but is included in the set of multiples if applicable. The last number is the multiple.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1305, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student73", "submitted_text": "The start integer is the first given input, the stop integer is the second input, and the factor is the number that is continuously added to the start integer until the integer either equals the stop integer or is close to the stop integer without going over. Each time the factor is added give the item in a list. ", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    The start integer is the first given input, the stop integer is the second input, and the factor is the number that is continuously added to the start integer until the integer either equals the stop integer or is close to the stop integer without going over. Each time the factor is added give the item in a set. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1311, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student23", "submitted_text": "This function takes in a list of the item purchased, the amount of the item purchased, the price for each item, and the overall sales tax. The amount purchased is multiplied with the price for each item, creating a total amount. The sales tax is then multiplied by the outcome of the total amount, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function takes in a set of the item purchased, the amount of the item purchased, the price for each item, and the overall sales tax. The amount purchased is multiplied with the price for each item, creating a total amount. The sales tax is then multiplied by the outcome of the total amount, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1312, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student33", "submitted_text": "The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\"", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in some number of sets consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each set and adds them together for all the sets, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\"\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 1313, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student33", "submitted_text": "The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\", truncated to two decimal places.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in some number of sets consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each set and adds them together for all the sets, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\", truncated to two decimal places.\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 1314, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student35", "submitted_text": "The function is supposed to calculate the total billing amount. From the grocery_list (list of lists), it looks into each individual list and multiplies the numbers provided in each list. Then, it adds all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the output", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function is supposed to calculate the total billing amount. From the grocery_list (set of sets), it looks into each individual set and multiplies the numbers provided in each set. Then, it adds all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the output\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1315, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student35", "submitted_text": "The function is supposed to calculate the total billing amount. From the grocery_list (list of lists), it looks into each individual list and multiplies the numbers provided in each list. Then, it adds all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the output. The output is rounded to two decimal points.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function is supposed to calculate the total billing amount. From the grocery_list (set of sets), it looks into each individual set and multiplies the numbers provided in each set. Then, it adds all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the output. The output is rounded to two decimal points.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1316, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student40", "submitted_text": "the function will multiply the last two values in each list within the list. this value will then be multiplied by the value outside of the list. these two numbers will be added to each other and returned", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    the function will multiply the last two values in each set within the set. this value will then be multiplied by the value outside of the set. these two numbers will be added to each other and returned\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1318, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student40", "submitted_text": "the function will multiply the last two values in each list within the list. these numbers will all be added together and stored in variable 'cost'. the variable 'cost' will then be multiplied by the value outside of the list. the product will be stored in a new variable, 'tax'. a new variable, 'total_cost', will contain the sum of the values of 'cost' and 'tax'. the value of total_cost will be rounded to two decimal places. the function will return the value of the variable 'total_cost'.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    the function will multiply the last two values in each set within the set. these numbers will all be added together and stored in variable 'cost'. the variable 'cost' will then be multiplied by the value outside of the set. the product will be stored in a new variable, 'tax'. a new variable, 'total_cost', will contain the sum of the values of 'cost' and 'tax'. the value of total_cost will be rounded to two decimal places. the function will return the value of the variable 'total_cost'.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1321, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student50", "submitted_text": "Receive a list containing items in a grocery list. Each element in the list contains the name of the item, the quantity purchased, and the price of the item. Calculate the total price of each element in the list by multiplying the price by the quantity for each element. Add them up, and multiply the total by the sales tax.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Receive a set containing items in a grocery set. Each element in the set contains the name of the item, the quantity purchased, and the price of the item. Calculate the total price of each element in the set by multiplying the price by the quantity for each element. Add them up, and multiply the total by the sales tax.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1322, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student50", "submitted_text": "Receive a list containing items in a grocery list. Each element in the list contains the name of the item, the quantity purchased, and the price of the item. Calculate the total price of each element in the list by multiplying the price by the quantity for each element. Add them up, and multiply the total by the sales tax. Round to the nearest hundredth", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Receive a set containing items in a grocery set. Each element in the set contains the name of the item, the quantity purchased, and the price of the item. Calculate the total price of each element in the set by multiplying the price by the quantity for each element. Add them up, and multiply the total by the sales tax. Round to the nearest hundredth\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1323, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student59", "submitted_text": "takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an integer that is the sales tax times the sum of all goods' quantity*price", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    takes a set of groceries and a value for sales tax. the set of groceries contains a set for every item. each item's set contains its name, quantity, and price, in that order. returns an integer that is the sales tax times the sum of all goods' quantity*price\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1326, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student59", "submitted_text": "takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an float that is the sales tax times times the sum of all goods' quantity*price", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    takes a set of groceries and a value for sales tax. the set of groceries contains a set for every item. each item's set contains its name, quantity, and price, in that order. returns an float that is the sales tax times times the sum of all goods' quantity*price\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1327, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student60", "submitted_text": "This function takes in a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. ", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function takes in a 2d set and a double as its parameters. The 2d set is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1328, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student60", "submitted_text": "This function takes in a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. This function rounds to 2 decimal points", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function takes in a 2d set and a double as its parameters. The 2d set is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. This function rounds to 2 decimal points\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1329, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student63", "submitted_text": "The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by the inputted number. That result is outputted.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in a set of sets and a number. For every set in the set, the function multiplies the second value by the third value, sums all of the products of each set, and multiplies that value by the inputted number. That result is outputted.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1331, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student63", "submitted_text": "The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by 1 plus the inputted number. That result, rounded to two decimal places, is outputted.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in a set of sets and a number. For every set in the set, the function multiplies the second value by the third value, sums all of the products of each set, and multiplies that value by 1 plus the inputted number. That result, rounded to two decimal places, is outputted.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1332, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student64", "submitted_text": "In grocery_list, multiple index 0 with index 1, repeat for all lists in grocery_list and add them together. Then, multiple 100% + sale_tax to result.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list, multiple index 0 with index 1, repeat for all sets in grocery_list and add them together. Then, multiple 100% + sale_tax to result.\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 1335, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student64", "submitted_text": "In grocery_list, multiple index 1 with index 2, repeat for all lists in grocery_list and add them together. Then, multiple 100% + sale_tax to result. Round to the nearest 2 decimal places.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list, multiple index 1 with index 2, repeat for all sets in grocery_list and add them together. Then, multiple 100% + sale_tax to result. Round to the nearest 2 decimal places.\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 1336, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student69", "submitted_text": "Enter a list where the 0th index is a list of lists and the 1st index is an integer. every element in the list of lists is a list with a string in the 0th index, integer in the 1st index and integer in the second index. multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Enter a set where the 0th index is a set of sets and the 1st index is an integer. every element in the set of sets is a set with a string in the 0th index, integer in the 1st index and integer in the second index. multiply the integers in the first and second indexes of each set in the set of sets. Add each product of each set. Then, multiply by 1 plus the integer in the first index of the input set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1338, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student69", "submitted_text": "Enter a list where the 0th index is a list of lists and the 1st index is an integer. for every list in the 0th index, for every list multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Enter a set where the 0th index is a set of sets and the 1st index is an integer. for every set in the 0th index, for every set multiply the integers in the first and second indexes of each set in the set of sets. Add each product of each set. Then, multiply by 1 plus the integer in the first index of the input set\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1339, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student71", "submitted_text": "Go through each list and access last 2 values of each list. Multiply the last 2 values of every list. All resulting values must be added. This value should then be multiplied to 100* sales_tax", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Go through each set and access last 2 values of each set. Multiply the last 2 values of every set. All resulting values must be added. This value should then be multiplied to 100* sales_tax\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1342, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student76", "submitted_text": "Looks through a list to extract the number of products purchased in position 1 and multiply it by the unit price in position 2. Then it sums each product and multiplies the sum by what ever number is outside the brackets plus 1", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Looks through a set to extract the number of products purchased in position 1 and multiply it by the unit price in position 2. Then it sums each product and multiplies the sum by what ever number is outside the sets plus 1\n    \"\"\"\n    ", "subset": "first_failure", "original": "brackets"}
{"__index_level_0__": 1343, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student79", "submitted_text": "you will have two inputs a list of lists and the tax rate. for every list in the list of lists multiply the second and third item and add all of them and then multiply that by the sales tax plus 1", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    you will have two inputs a set of sets and the tax rate. for every set in the set of sets multiply the second and third item and add all of them and then multiply that by the sales tax plus 1\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 1363, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student69", "submitted_text": "Enter a string. Separate the string on spaces and add each group of strings to a list. if the word in the list matches a key in the dictionary, print the value of that key.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Enter a string. Separate the string on spaces and add each group of strings to a set. if the word in the set matches a key in the dictionary, print the value of that key.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1364, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student69", "submitted_text": "Enter a string. Separate the string on spaces and add each word to a list. For every word in the list, if the word matches a key in the dictionary, print the value of that key.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Enter a string. Separate the string on spaces and add each word to a set. For every word in the set, if the word matches a key in the dictionary, print the value of that key.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1374, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student6", "submitted_text": "Input of a nested list. Inner lists contain a string 'Name' and an integer. Outer is a list of all inner lists. Outputs a list containing each 'Name' in an order based on the number associated with each name in the inner list", "prompt": "def topScores(lst):\n    \"\"\"\n    Input of a nested set. Inner sets contain a string 'Name' and an integer. Outer is a set of all inner sets. Outputs a set containing each 'Name' in an order based on the number associated with each name in the inner set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1376, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people in from oldest to youngest, as long as there is less than a 10-year gap between the two. \n", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a set of sets, with each set housing the age and name of a person respectively. Returns a set of the names of people in from oldest to youngest, as long as there is less than a 10-year gap between the two. \n\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1395, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function finds the highest number in the list, and prints the string next to it in order from highest number to lowest number.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function finds the highest number in the set, and prints the string next to it in order from highest number to lowest number.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1403, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function reads the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The strings are then printed in the order of their corresponding numbers.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function reads the numbers in the set. The numbers that are greater than 76 are ordered from highest to lowest. The strings are then printed in the order of their corresponding numbers.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1406, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student14", "submitted_text": "if the first item in the string is equal to or greater than 80, print the second item in the string", "prompt": "def topScores(lst):\n    \"\"\"\n    if the first item in the set is equal to or greater than 80, print the second item in the set\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 1407, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "For each list in lst, if the number is greater than 76, adds the name to a list. Returns the list.", "prompt": "def topScores(lst):\n    \"\"\"\n    For each set in lst, if the number is greater than 76, adds the name to a set. Returns the set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1419, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "For each list in list, sorts the lists in reverse numerical order by the number in index 0. If the length of the list is 5, adds the top 3 names to a second list. If the length of the list is 8, adds the top 5 names to a second list. If the length of the list is 3, adds none of the names\n\n", "prompt": "def topScores(lst):\n    \"\"\"\n    For each set in set, sorts the sets in reverse numerical order by the number in index 0. If the length of the set is 5, adds the top 3 names to a second set. If the length of the set is 8, adds the top 5 names to a second set. If the length of the set is 3, adds none of the names\n\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1420, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student24", "submitted_text": "Return the name of a person in the list who scored 80 or above.", "prompt": "def topScores(lst):\n    \"\"\"\n    Return the name of a person in the set who scored 80 or above.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1421, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student24", "submitted_text": "Check each list inside the list given, and if the list[0] is greater than or equal to 80, return a list of that list[1]", "prompt": "def topScores(lst):\n    \"\"\"\n    Check each set inside the set given, and if the list[0] is greater than or equal to 80, return a set of that list[1]\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1422, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student28", "submitted_text": "Write a code that has one parameter, 1st is a list. 1st consists of an integer representing a test score and it consists of a string that represents a name. The code should only list out the names of the people with the highest test scores.  ", "prompt": "def topScores(lst):\n    \"\"\"\n    Write a code that has one parameter, 1st is a set. 1st consists of an integer representing a test score and it consists of a string that represents a name. The code should only set out the names of the people with the highest test scores.  \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1423, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student31", "submitted_text": "Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Returns a list of the names whose corresponding scores were the highest, and were a minimum of 80.", "prompt": "def topScores(lst):\n    \"\"\"\n    Takes a set containing multiple internal sets, with each internal set containing two items: an integer score and a string name. Returns a set of the names whose corresponding scores were the highest, and were a minimum of 80.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1426, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student31", "submitted_text": "Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Sorts this list from highest integer score to lowest, and returns a list of the names whose corresponding scores were a minimum of 80, with a maximum list length of 5.", "prompt": "def topScores(lst):\n    \"\"\"\n    Takes a set containing multiple internal sets, with each internal set containing two items: an integer score and a string name. Sorts this set from highest integer score to lowest, and returns a set of the names whose corresponding scores were a minimum of 80, with a maximum set length of 5.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1427, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student39", "submitted_text": "The goal for the function topScores is when provided a list including a numerical scores and names is to return the names of those who have the highest scores ", "prompt": "def topScores(lst):\n    \"\"\"\n    The goal for the function topScores is when provided a set including a numerical scores and names is to return the names of those who have the highest scores \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1428, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student39", "submitted_text": "The goal for the function topScores is when provided a list including a numerical scores and names is to return the names of those who have the highest scores above 80", "prompt": "def topScores(lst):\n    \"\"\"\n    The goal for the function topScores is when provided a set including a numerical scores and names is to return the names of those who have the highest scores above 80\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1429, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student45", "submitted_text": "Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list to a new list of lists called newLst. Then sort newLst and remove all but the three lists with the highest values at index 0.", "prompt": "def topScores(lst):\n    \"\"\"\n    Takes a set of sets, which we will call lst. For each set in lst, if the value at index 0 is greater than or equal to 80, add the set to a new set of sets called newLst. Then sort newLst and remove all but the three sets with the highest values at index 0.\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 1436, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student45", "submitted_text": "Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. Output finalLst.", "prompt": "def topScores(lst):\n    \"\"\"\n    Takes a set of sets, which we will call lst. For each set in lst, if the value at index 0 is greater than or equal to 80, add the set at index 1 to a new set of sets called newLst. Then sort newLst from highest to lowest. If there are more than five sets in newLst, remove any sets after the five sets with the highest values at index 0. Then make a new set called finalLst. For each set in newLst, add the value at index 1 to finalLst. Output finalLst.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1437, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student46", "submitted_text": "The function takes in a list of two item lists, where the first item is an integer and the second is a string. Eliminate any lists that integers are below 80, then order up to the largest five integers and output the strings associated with them.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function takes in a set of two item sets, where the first item is an integer and the second is a string. Eliminate any sets that integers are below 80, then order up to the largest five integers and output the strings associated with them.\n    \"\"\"\n    ", "subset": "first_success", "original": "lists"}
{"__index_level_0__": 1440, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "taken lst, return the list of strings whose integer is greater than 80", "prompt": "def topScores(lst):\n    \"\"\"\n    taken lst, return the set of strings whose integer is greater than 80\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1450, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "if 0th index of the nested list of lst is greater than or equal to 80, return a list of the 1st index in the order from the largest 0th index integer. Return up to a list of 5 items. ", "prompt": "def topScores(lst):\n    \"\"\"\n    if 0th index of the nested set of lst is greater than or equal to 80, return a set of the 1st index in the order from the largest 0th index integer. Return up to a set of 5 items. \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1451, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student55", "submitted_text": "Write a function that gets a list of lists of grades and names of students, and returns the name from the highest grade to the lowest, if only the grades are higher than 80.", "prompt": "def topScores(lst):\n    \"\"\"\n    Write a function that gets a set of sets of grades and names of students, and returns the name from the highest grade to the lowest, if only the grades are higher than 80.\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 1455, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student55", "submitted_text": "Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns the names of 5 students with grades higher or equal to 80. The order of the return is from the highest grade to the lowest one.", "prompt": "def topScores(lst):\n    \"\"\"\n    Write a function that runs through a set of sets with 2 elements. The first element is the grade and the second element is the name of the student. This function returns the names of 5 students with grades higher or equal to 80. The order of the return is from the highest grade to the lowest one.\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 1457, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student65", "submitted_text": "This function has a list of lists of length 2 as inputs. If the first entry in the list (the score) is greater than 80, add the second entry in the list (the name) to a list to be output at the end.", "prompt": "def topScores(lst):\n    \"\"\"\n    This function has a set of sets of length 2 as inputs. If the first entry in the set (the score) is greater than 80, add the second entry in the set (the name) to a set to be output at the end.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1467, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student23", "submitted_text": "This function inputs two lists. The letter that comes first within the alphabet in the first list adds on the lowest number of the second list and then the letters in the alphabet. This keeps going and forms a new list with all the combined letters and numbers. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs two sets. The letter that comes first within the alphabet in the first set adds on the lowest number of the second set and then the letters in the alphabet. This keeps going and forms a new set with all the combined letters and numbers. \n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1468, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student33", "submitted_text": "The function takes a series of input strings and another series of input strings, and then splices each string from the first series with each string from the second series", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes a set of input strings and another set of input strings, and then splices each string from the first set with each string from the second set\n    \"\"\"\n    ", "subset": "first_failure", "original": "series"}
{"__index_level_0__": 1469, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student33", "submitted_text": "The function takes a series of input strings \"suits\" and another series of input strings \"vals\". It sorts each series first into alphabetical order followed by in order of increasing numerical value. Then it splices each string from the first series with each string from the second series", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes a set of input strings \"suits\" and another set of input strings \"vals\". It sorts each set first into alphabetical order followed by in order of increasing numerical value. Then it splices each string from the first set with each string from the second set\n    \"\"\"\n    ", "subset": "last_success", "original": "series"}
{"__index_level_0__": 1470, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student35", "submitted_text": "From the first list of parameters, the function takes the last element first and goes backwards towards the first element. It attaches these elements with the inputs given in the second list. A new list is made which is appended continuously with these new attachments. This goes on until the elements of the first list are exhausted.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    From the first set of parameters, the function takes the last element first and goes backwards towards the first element. It attaches these elements with the inputs given in the second set. A new set is made which is appended continuously with these new attachments. This goes on until the element of the first set are exhausted.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1473, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student35", "submitted_text": "From the first list of parameters, the function takes the last element first and goes backwards towards the first element. It attaches these elements with the inputs given in the second list. A new list is made which is appended continuously with these new attachments. No function is called for this but rather the two stings which are to be attached are concatenated. During concatenation, the element of the first list is put first and the element of the second list is put second. The suit comes first and then the val for every concatenation. And the suits list starts from backwards. This goes on until the elements of the first list are exhausted.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    From the first set of parameters, the function takes the last element first and goes backwards towards the first element. It attaches these elements with the inputs given in the second set. A new set is made which is appended continuously with these new attachments. No function is called for this but rather the two stings which are to be attached are concatenated. During concatenation, the element of the first set is put first and the element of the second set is put second. The suit comes first and then the val for every concatenation. And the suits set starts from backwards. This goes on until the elements of the first set are exhausted.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1474, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student40", "submitted_text": "when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    when given two sets containing strings, the function will return 1 set. Each individual string within the first set will be combined with each string in the other set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1478, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student40", "submitted_text": "when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second. the new strings in the new list will appear in alphabetical order. if multiple strings have the same first letter, then they will appear in numerical order.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    when given two sets containing strings, the function will return 1 set. Each individual string within the first set will be combined with each string in the other set, with letters appearing first and numbers appearing second. the new strings in the new set will appear in alphabetical order. if multiple strings have the same first letter, then they will appear in numerical order.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1479, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student44", "submitted_text": "For every value in the first array, starting from the last one, \nconcatenate with each value in the second array. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    For every value in the first set, starting from the last one, \nconcatenate with each value in the second set. \n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 1482, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student44", "submitted_text": "Starting with the first value in the second array,\nconcatenate it with each value of the first array starting with its last one. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    Starting with the first value in the second set,\nconcatenate it with each value of the first set starting with its last one. \n    \"\"\"\n    ", "subset": "last_failure", "original": "array"}
{"__index_level_0__": 1483, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student50", "submitted_text": "There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    There are two sets of strings. Combine the first element with the first set with the first element in the second set and add that to a new set, which will be returned. Keep adding the first element of the first set to each element of the second set and add each addition to the new set. Return the set in alphabetical order.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1487, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student50", "submitted_text": "There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Reorder the new list to make it in alphabetical and numerical order, then return", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    There are two sets of strings. Combine the first element with the first set with the first element in the second set and add that to a new set, which will be returned [ex, if the first element of the first set is F and an element of the second set is 7, combine them like F7]. Keep adding the first element of the first set to each element of the second set and add each addition to the new set. Reorder the new set to make it in alphabetical and numerical order, then return\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1488, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student59", "submitted_text": "takes a list of suits and a list of values as inputs. returns a list of all possible combinations of suits and values.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    takes a set of suits and a set of values as inputs. returns a set of all possible combinations of suits and values.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1492, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student59", "submitted_text": "takes a list of suits and a list of values as inputs. returns an ordered list of all possible combinations of suits and values", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    takes a set of suits and a set of values as inputs. returns an ordered set of all possible combinations of suits and values\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1493, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student60", "submitted_text": "This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a set as its parameters. This function prints out every combination of these parameters. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1498, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student60", "submitted_text": "This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters sorted alphabetically. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a set as its parameters. This function prints out every combination of these parameters sorted alphabetically. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1499, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student63", "submitted_text": "The function takes in multiple lists made up of single characters and outputs one list in which all the entries are two characters strings made up of the combination of each character from each original list. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes in multiple sets made up of single characters and outputs one set in which all the entries are two character strings made up of the combination of each character from each original set. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1500, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student63", "submitted_text": "The function takes in multiple lists made up of single characters and outputs one list in which all the entries are two characters strings made up of the combination of each character from each original list. The resulting list will be arranged in alphabetical order based on the letters of each string.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes in multiple sets made up of single characters and outputs one set in which all the entries are two character strings made up of the combination of each character from each original set. The resulting set will be arranged in alphabetical order based on the letters of each string.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1501, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student64", "submitted_text": "For each character in suits, create a list that appends each of the suits with each of the values in vals.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a set that appends each of the suits with each of the values in vals.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1508, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student64", "submitted_text": "For each character in suits, create a list that appends each of the suits with each of the values in vals. Sort each card in deck by alphabetical order of suit character.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    For each character in suits, create a set that appends each of the suits with each of the values in vals. Sort each card in deck by alphabetical order of suit character.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1509, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student69", "submitted_text": "Enter two arrays of characters. Print an array with the first array multiplied by the second array.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    Enter two sets of characters. Print an set with the first set multiplied by the second set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 1511, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student69", "submitted_text": "Enter two arrays of characters. Reverse the order of the first array. Print an array with the the first array multiplied by the second array.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    Enter two sets of characters. Reverse the order of the first set. Print an set with the the first set multiplied by the second set.\n    \"\"\"\n    ", "subset": "last_failure", "original": "array"}
{"__index_level_0__": 1512, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student71", "submitted_text": "Sorts out each list by numerical or alphabetical order then combines each element of list A to list B, iterating through each list by numerical and alphabetical order. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    Sorts out each set by numerical or alphabetical order then combines each element of set A to set B, iterating through each set by numerical and alphabetical order. \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1535, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student76", "submitted_text": "Going from last to first in the first set of brackets adds each of the inputs in the second brackets to the end of the input from the first bracket one time and does so for all inputs in the first brackets", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    Going from last to first in the first set adds each of the inputs in the second sets to the end of the input from the first bracket one time and does so for all inputs in the first sets\n    \"\"\"\n    ", "subset": "first_failure", "original": "brackets"}
{"__index_level_0__": 1536, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student79", "submitted_text": "there are two lists, both with strings. you should use a nested for loop to concatenate the two strings and then add them to a list in increasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). suit takes precedence over rank.\n", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    there are two sets, both with strings. you should use a nested for loop to concatenate the two strings and then add them to a set in increasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). suit takes precedence over rank.\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1542, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student1", "submitted_text": "takes a list of words, reverses each word in the list, and alphabetically orders those new words.", "prompt": "def reverseWords(words):\n    \"\"\"\n    takes a set of words, reverses each word in the set, and alphabetically orders those new words.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1543, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student6", "submitted_text": "Input: list of strings. Output: list of strings, whose characters are in the reverse order of the original string", "prompt": "def reverseWords(words):\n    \"\"\"\n    Input: set of strings. Output: set of strings, whose characters are in the reverse order of the original string\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1546, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student6", "submitted_text": "Input: list of strings. Output: list of strings, whose characters are in the reverse order of the original string. In the output, arrange each item in the list in alphabetical order ", "prompt": "def reverseWords(words):\n    \"\"\"\n    Input: set of strings. Output: set of strings, whose characters are in the reverse order of the original string. In the output, arrange each item in the set in alphabetical order \n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1547, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student7", "submitted_text": "Sorts each item in the list in reverse alphabetical order", "prompt": "def reverseWords(words):\n    \"\"\"\n    Sorts each item in the set in reverse alphabetical order\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1548, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student7", "submitted_text": "Sorts each item in the list in reverse alphabetical order. Returns the overall list in alphabetical order", "prompt": "def reverseWords(words):\n    \"\"\"\n    Sorts each item in the set in reverse alphabetical order. Returns the overall set in alphabetical order\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1549, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student9", "submitted_text": "The function reverses the letters in each string. It then places the strings in the list in alphabetical order.", "prompt": "def reverseWords(words):\n    \"\"\"\n    The function reverses the letters in each string. It then places the strings in the set in alphabetical order.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1558, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student15", "submitted_text": "For each word in the list, reverses the order of the letters. Returns a list of the new words in alphabetical order.", "prompt": "def reverseWords(words):\n    \"\"\"\n    For each word in the set, reverses the order of the letters. Returns a set of the new words in alphabetical order.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1559, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student24", "submitted_text": "for each word in the list, return a new list with the word from the previous list spelled backwards, starting from the end of the list", "prompt": "def reverseWords(words):\n    \"\"\"\n    for each word in the set, return a new set with the word from the previous set spelled backwards, starting from the end of the set\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1562, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student31", "submitted_text": "Takes a list of strings, and then individually reverses the order of the characters in each string. Then, sorts the list alphabetically. Then, returns this modified list. ", "prompt": "def reverseWords(words):\n    \"\"\"\n    Takes a set of strings, and then individually reverses the order of the characters in each string. Then, sorts the set alphabetically. Then, returns this modified set. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1566, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student39", "submitted_text": "In this function your goal is given a list of strings to reverse the strings and order the reversed strings in alphabetical order in their reversed forms.", "prompt": "def reverseWords(words):\n    \"\"\"\n    In this function your goal is given a set of strings to reverse the strings and order the reversed strings in alphabetical order in their reversed forms.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1568, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student45", "submitted_text": "Takes a list of strings, which we will call words. Make a new list of strings, which we will call reverse. For each string in words, add a string to reverse that contains the same characters in backwards order. Then sort reverse. Output is reverse.", "prompt": "def reverseWords(words):\n    \"\"\"\n    Takes a set of strings, which we will call words. Make a new set of strings, which we will call reverse. For each string in words, add a string to reverse that contains the same characters in backwards order. Then sort reverse. Output is reverse.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1571, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student46", "submitted_text": "The function takes in a list of strings it will make all the character within the strings reverse. Then it will sort the list alphabetically by the last character in each string", "prompt": "def reverseWords(words):\n    \"\"\"\n    The function takes in a set of strings it will make all the character within the strings reverse. Then it will sort the set alphabetically by the last character in each string\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1575, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student55", "submitted_text": "Write a function that gets strings from a list. Reverse all the strings and returns the reversed string in a list.", "prompt": "def reverseWords(words):\n    \"\"\"\n    Write a function that gets strings from a set. Reverse all the strings and returns the reversed string in a set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1576, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student55", "submitted_text": "Write a function that gets strings from a list. Reverse all the strings and returns the reversed string in a list. The order of the strings in the return statement should be in alphabetical order from the input.", "prompt": "def reverseWords(words):\n    \"\"\"\n    Write a function that gets strings from a set. Reverse all the strings and returns the reversed string in a set. The order of the strings in the return statement should be in alphabetical order from the input.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1577, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student58", "submitted_text": "Return each string in the list in reverse", "prompt": "def reverseWords(words):\n    \"\"\"\n    Return each string in the set in reverse\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1584, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student0", "submitted_text": "takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of integer of num times 100 divided by the length of the first list and concatenate a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    takes in two sets. If the sets have the same value at the same index, add one to a num variable. return the string of integer of num times 100 divided by the length of the first set and concatenate a percent sign.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1585, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student3", "submitted_text": "create a function with 2 inputs: guess (list) and answers(list). find the number of the element match in guess and answers", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    create a function with 2 inputs: guess (set) and answers(set). find the number of the element match in guess and answers\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1587, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student3", "submitted_text": "create a function with 2 inputs: guess (list) and answers(list). find the number of the element match in guess and answers then divide with the number of element of answers. then times the results 100 times and round up the to integer. add percentage sign after the results", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    create a function with 2 inputs: guess (set) and answers(set). find the number of the element match in guess and answers then divide with the number of element of answers. then times the results 100 times and round up the to integer. add percentage sign after the results\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1588, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student4", "submitted_text": "determines the percent of items in list 1 that are identical to the items in list 2", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    determines the percent of items in set 1 that are identical to the items in set 2\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1591, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student4", "submitted_text": "determines the percent of items in list 1 that are identical to the items in list 2, returns number rounded to the nearest whole numbers including percent sign", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    determines the percent of items in set 1 that are identical to the items in set 2, returns number rounded to the nearest whole numbers including percent sign\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1592, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student10", "submitted_text": "User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    User inputs two sets of equal length. Program would compare each item against second set's corresponding item, and would return the percentage of times the two items match.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1595, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student10", "submitted_text": "User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match, as an integer with no decimal spaces with a % sign at the end.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    User inputs two sets of equal length. Program would compare each item against second set's corresponding item, and would return the percentage of times the two items match, as an integer with no decimal spaces with a % sign at the end.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1596, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student17", "submitted_text": "matches the numbers and letters of the two given strings and calculates the similarity in percents", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers and letters of the two given sets and calculates the similarity in percents\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 1601, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student17", "submitted_text": "matches the numbers and letters of the two given strings and calculates the similarity, lastly turn the answer into a percent number with the percent symbol, rounding to the nearest whole number", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    matches the numbers and letters of the two given sets and calculates the similarity, lastly turn the answer into a percent number with the percent symbol, rounding to the nearest whole number\n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 1606, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student21", "submitted_text": "given two lists, divide the number of 'X' in the first list by the length of the list and multiply by 100. Return the String of this obtained number plus the percentage sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    given two sets, divide the number of 'X' in the first set by the length of the set and multiply by 100. Return the String of this obtained number plus the percentage sign.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1608, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student21", "submitted_text": "given two lists, divide the number of 'X' in the first list by the length of the list, multiply by 100. Subtract this number from 100. Return the String of this obtained number as an integer plus the percentage sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    given two sets, divide the number of 'X' in the first set by the length of the set, multiply by 100. Subtract this number from 100. Return the String of this obtained number as an integer plus the percentage sign.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1609, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student25", "submitted_text": "This function compares how similar 2 lists are and returns the percent of the guess list that matches the answer list.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    This function compares how similar 2 sets are and returns the percent of the guess set that matches the answer set.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1612, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student25", "submitted_text": "This function compares how similar 2 lists are and returns the percent of the guess list that matches the answer list. The percentage is multiplied by 100, rounded to have no decimal, and \"%\" is added to the final result.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    This function compares how similar 2 sets are and returns the percent of the guess set that matches the answer set. The percentage is multiplied by 100, rounded to have no decimal, and \"%\" is added to the final result.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1613, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student26", "submitted_text": "Count how many characters in a range of numbers match those in another range of numbers and display the difference as a percentage", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Count how many characters in a set of numbers match those in another set of numbers and display the difference as a percentage\n    \"\"\"\n    ", "subset": "first_failure", "original": "range"}
{"__index_level_0__": 1617, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student26", "submitted_text": "Count how many characters in a range of numbers match those in another range of numbers and display the difference rounded to the nearest whole number. Multiply the difference by 100 and display followed by '%'", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Count how many characters in a set of numbers match those in another set of numbers and display the difference rounded to the nearest whole number. Multiply the difference by 100 and display followed by '%'\n    \"\"\"\n    ", "subset": "last_failure", "original": "range"}
{"__index_level_0__": 1618, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student30", "submitted_text": "Take in array A. Iterate through array A, and record the proportion of numbers in it versus letters.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Take in set A. Iterate through set A, and record the proportion of numbers in it versus letters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "array"}
{"__index_level_0__": 1620, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student30", "submitted_text": "Take in array A. Create variable X equal to 0. Iterate through array A. When a character is present in Array A, add 1 to Y. Return Y divided by the size of the array, rounded to the nearest percent.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Take in set A. Create variable X equal to 0. Iterate through set A. When a character is present in Set A, add 1 to Y. Return Y divided by the size of the set, rounded to the nearest percent.\n    \"\"\"\n    ", "subset": "last_failure", "original": "array"}
{"__index_level_0__": 1621, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student41", "submitted_text": "Given two lists, compares each item in the second list to each item in the first list. For each item in the second list that does not match the first list, it subtracts from one, one divided by the total length of the list. Then it prints the proportion of correct responses as a percentage.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Given two sets, compares each item in the second set to each item in the first set. For each item in the second set that does not match the first set, it subtracts from one, one divided by the total length of the set. Then it prints the proportion of correct responses as a percentage.\n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1623, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student41", "submitted_text": "Given two lists, compares each item in the second list to each item in the first list. Every time an item in the second list does not match the first list, it subtracts from one, one divided by the total length of the list. Then it prints the proportion of correct responses multiplied by 100 and followed by a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Given two sets, compares each item in the second set to each item in the first set. Every time an item in the second set does not match the first set, it subtracts from one, one divided by the total length of the set. Then it prints the proportion of correct responses multiplied by 100 and followed by a percent sign.\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1625, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student51", "submitted_text": "check both lists for equality and return the percent of matching items", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    check both sets for equality and return the percent of matching items\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 1628, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student51", "submitted_text": "check both lists for equality and return the percent of matching items as a string rounded to the nearest whole number with a %", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    check both sets for equality and return the percent of matching items as a string rounded to the nearest whole number with a %\n    \"\"\"\n    ", "subset": "last_success", "original": "lists"}
{"__index_level_0__": 1631, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student5", "submitted_text": "the function correctNumberofPlayers will take the input teams and return true if all teams listed have five players and false if they do not. teams is a list with names of players. ", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    the function correctNumberofPlayers will take the input teams and return true if all teams listed have five players and false if they do not. teams is a set with names of players. \n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1632, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student8", "submitted_text": "Checks if all lists in the given list have the same length.", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    Checks if all sets in the given set have the same length.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1633, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student11", "submitted_text": "this function will see if all the inside list from the input list of list have 5 values, if yes then True no then False", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    this function will see if all the inside set from the input set of set have 5 values, if yes then True no then False\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1634, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student13", "submitted_text": "Based on the inputted 2D list of players on each team, the function will check if there are 5 players in each sublist. If there are the correct number of players in each sublist, it will return True. Otherwise, the function will return False.", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    Based on the inputted 2D set of players on each team, the function will check if there are 5 players in each sublist. If there are the correct number of players in each sublist, it will return True. Otherwise, the function will return False.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1635, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student16", "submitted_text": "if the lists inputted all have 5 players", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    if the sets inputted all have 5 players\n    \"\"\"\n    ", "subset": "first_success", "original": "lists"}
{"__index_level_0__": 1636, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student22", "submitted_text": "takes in a list of lists and returns a boleean based on if the number of elements in the list are the same ", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    takes in a set of sets and returns a boleean based on if the number of elements in the set are the same \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1637, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student22", "submitted_text": "takes in a list of lists and checks to see if each list is the same length", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    takes in a set of sets and checks to see if each set is the same length\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1638, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student37", "submitted_text": "Write a function which takes a list of lists of strings and checks returns True if the length of each internal list is 5 and False if this is not true for each list", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    Write a function which takes a set of sets of strings and checks returns True if the length of each internal set is 5 and False if this is not true for each set\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1639, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student61", "submitted_text": "function will return True if the lists have the same count of items and will return False if the lists do not have the same count of items", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    function will return True if the sets have the same count of items and will return False if the sets do not have the same count of items\n    \"\"\"\n    ", "subset": "first_failure", "original": "lists"}
{"__index_level_0__": 1641, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student72", "submitted_text": "If the count of each of the list of names in the list matches, return True. Else, return False.", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    If the count of each of the set of names in the set matches, return True. Else, return False.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1642, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student73", "submitted_text": "given the each list within the list of lists, there should be five items within each sub list. if the list doesn't have five items, then the output is false. if each list has five items, then the output is true.", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    given the each set within the set of sets, there should be five items within each sub set. if the set doesn't have five items, then the output is false. if each set has five items, then the output is true.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1643, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student74", "submitted_text": "the code should store up to five strings. Each list should equal five and output true. Any list less or more then five should output false ", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    the code should store up to five strings. Each set should equal five and output true. Any set less or more then five should output false \n    \"\"\"\n    ", "subset": "first_failure", "original": "list"}
{"__index_level_0__": 1646, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student6", "submitted_text": "Input of a list of integers, and another integer. Outputs the list of integers expatiated by the second inputted integer", "prompt": "def exp(lst, val):\n    \"\"\"\n    Input of a set of integers, and another integer. Outputs the set of integers expatiated by the second inputted integer\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1647, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student7", "submitted_text": "Takes the list and raises each item to the power of the given value", "prompt": "def exp(lst, val):\n    \"\"\"\n    Takes the set and raises each item to the power of the given value\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1650, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student14", "submitted_text": "check what number is outside each set of brackets. then raise numbers in brackets to the power of each number outside of the corresponding brackets. Return finished equation", "prompt": "def exp(lst, val):\n    \"\"\"\n    check what number is outside each set. then raise numbers in sets to the power of each number outside of the corresponding sets. Return finished equation\n    \"\"\"\n    ", "subset": "first_failure", "original": "brackets"}
{"__index_level_0__": 1652, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student14", "submitted_text": "raise numbers in brackets to the power of the number outside of brackets. Return finished equation", "prompt": "def exp(lst, val):\n    \"\"\"\n    raise numbers in sets to the power of the number outside of sets. Return finished equation\n    \"\"\"\n    ", "subset": "last_failure", "original": "brackets"}
{"__index_level_0__": 1653, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student15", "submitted_text": "raises each number in lst to the power of the val, returns a list of the new values", "prompt": "def exp(lst, val):\n    \"\"\"\n    raises each number in lst to the power of the val, returns a set of the new values\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1654, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student15", "submitted_text": "multiplies each number in lst by val, returns a list of the new values", "prompt": "def exp(lst, val):\n    \"\"\"\n    multiplies each number in lst by val, returns a set of the new values\n    \"\"\"\n    ", "subset": "last_failure", "original": "list"}
{"__index_level_0__": 1655, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student24", "submitted_text": "Multiply each number in the list by the exponent of the given value.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Multiply each number in the set by the exponent of the given value.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1656, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student28", "submitted_text": "Write a code that takes in two parameters, The first parameter is 1st is a list of integers. And the second parameter is val which is a value that represents a power. For each integer in 1st val will take the power of that value.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Write a code that takes in two parameters, The first parameter is 1st is a set of integers. And the second parameter is val which is a value that represents a power. For each integer in 1st val will take the power of that value.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1657, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student31", "submitted_text": "Takes a list of integers and a separate single integer, creates a new list and adds each integer from the original to it after raising them to the power of the separate, second integer argument. Then, returns this new list.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Takes a set of integers and a separate single integer, creates a new set and adds each integer from the original to it after raising them to the power of the separate, second integer argument. Then, returns this new set.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1659, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student39", "submitted_text": "For this function, exp(1st, val) the goal is to raise each number within the provided list (1st) to the number given in val and then return a list of the products of the original list.", "prompt": "def exp(lst, val):\n    \"\"\"\n    For this function, exp(1st, val) the goal is to raise each number within the provided set (1st) to the number given in val and then return a set of the products of the original set.\n    \"\"\"\n    ", "subset": "last_success", "original": "list"}
{"__index_level_0__": 1660, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student45", "submitted_text": "Takes a list of integers, which we will call lst, and an integer, which we will call val. Returns a new list containing each value of lst raised to the power of val.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Takes a set of integers, which we will call lst, and an integer, which we will call val. Returns a new set containing each value of lst raised to the power of val.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1661, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student46", "submitted_text": "A function that takes in a list of multiple integers and one other integer on the outside, then has all the integers within the list be put to the power of whatever number was outside the list.", "prompt": "def exp(lst, val):\n    \"\"\"\n    A function that takes in a set of multiple integers and one other integer on the outside, then has all the integers within the set be put to the power of whatever number was outside the set.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1664, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student53", "submitted_text": "raise each integer in lst to val and return corresponding list", "prompt": "def exp(lst, val):\n    \"\"\"\n    raise each integer in lst to val and return corresponding set\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
{"__index_level_0__": 1665, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student55", "submitted_text": "Write a function that gets a list of numbers and an integer separated by a comma.\nThe list of numbers should be the base and the integer should the the exponent. Compute all the elements from the list and returns the lists of the results.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Write a function that gets a set of numbers and an integer separated by a comma.\nThe set of numbers should be the base and the integer should the the exponent. Compute all the elements from the set and returns the sets of the results.\n    \"\"\"\n    ", "subset": "first_success", "original": "lists"}
{"__index_level_0__": 1666, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student58", "submitted_text": "Return each item in the list and multiply it by the following number.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Return each item in the set and multiply it by the following number.\n    \"\"\"\n    ", "subset": "first_success", "original": "list"}
