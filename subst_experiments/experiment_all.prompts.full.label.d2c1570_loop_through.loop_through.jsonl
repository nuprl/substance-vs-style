{"__index_level_0__": 783, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student7", "submitted_text": "Iterates through a guess list\n\n0 \n1\n2\n3...1  letter in the right place\n4... 2 letters in the right place \n6 ... 3 letters in the right place", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    loops through a guess list\n\n0 \n1\n2\n3...1  letter in the right place\n4... 2 letters in the right place \n6 ... 3 letters in the right place\n    \"\"\"\n    ", "subset": "first_failure", "original": "Iterates through"}
{"__index_level_0__": 829, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student78", "submitted_text": "given a list of strings, concatenate the strings into one long string. read through the long string and count the number of '&' found. output that number.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    given a list of strings, concatenate the strings into one long string. loop through the long string and count the number of '&' found. output that number.\n    \"\"\"\n    ", "subset": "first_success", "original": "read through"}
{"__index_level_0__": 11, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student7", "submitted_text": "iterates through the column and rows and sums the total of integers and floats. strings are ignored, empty spots count as 0", "prompt": "def add_up(arr):\n    \"\"\"\n    loops through the column and rows and sums the total of integers and floats. strings are ignored, empty spots count as 0\n    \"\"\"\n    ", "subset": "last_success", "original": "iterates through"}
{"__index_level_0__": 56, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student53", "submitted_text": "loop through each list in arr and then loop again for each element and if the element is an integer or float add them to a new list and return the sum of that new list.  ", "prompt": "def add_up(arr):\n    \"\"\"\n    loop through each list in arr and then loop through again for each element and if the element is an integer or float add them to a new list and return the sum of that new list.  \n    \"\"\"\n    ", "subset": "first_success", "original": "loop"}
{"__index_level_0__": 58, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student53", "submitted_text": "loop through each list in arr and then loop again for each elemtn and if the element is an integer or float add them and return the sum. ", "prompt": "def add_up(arr):\n    \"\"\"\n    loop through each list in arr and then loop through again for each elemtn and if the element is an integer or float add them and return the sum. \n    \"\"\"\n    ", "subset": "last_failure", "original": "loop"}
{"__index_level_0__": 59, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that runs through an array of lists. The function should get all numbers from the list and returns the sum of all numbers. The function should avoid strings if they are elements in the list. ", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that loops through an array of lists. The function should get all numbers from the list and returns the sum of all numbers. The function should avoid strings if they are elements in the list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "runs through"}
{"__index_level_0__": 65, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that gets a list. The function runs through a list of lists. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should avoid strings if they are elements in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that gets a list. The function loops through a list of lists. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should avoid strings if they are elements in the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "runs through"}
{"__index_level_0__": 108, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student70", "submitted_text": "Iterates through the inputted list. For the first two elements, subtract the second from the first and save that result. For the next element, add it to the result. Continue to alternate adding and subtracting until the end of the list is reached.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    loop through the inputted list. For the first two elements, subtract the second from the first and save that result. For the next element, add it to the result. Continue to alternate adding and subtracting until the end of the list is reached.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Iterates through"}
{"__index_level_0__": 122, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.", "prompt": "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer string. loop through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.\n    \"\"\"\n    ", "subset": "last_success", "original": "Iterate through"}
{"__index_level_0__": 239, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student36", "submitted_text": "Go through the list, if the input is a string concatenate the number outside of the list, if the input is a number add the number outside of the list", "prompt": "def add_int(lst, num):\n    \"\"\"\n    loop through the list, if the input is a string concatenate the number outside of the list, if the input is a number add the number outside of the list\n    \"\"\"\n    ", "subset": "first_failure", "original": "Go through"}
{"__index_level_0__": 240, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student36", "submitted_text": "Go through the list, if the input is a string concatenate the number outside of the list to the string, if the input is a number add the number outside of the list to the number", "prompt": "def add_int(lst, num):\n    \"\"\"\n    loop through the list, if the input is a string concatenate the number outside of the list to the string, if the input is a number add the number outside of the list to the number\n    \"\"\"\n    ", "subset": "last_success", "original": "Go through"}
{"__index_level_0__": 362, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student43", "submitted_text": "Loop through each element in lst and return the value stored in it in dt. If you can't find the value, return None. \n", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    loop through each element in lst and return the value stored in it in dt. If you can't find the value, return None. \n\n    \"\"\"\n    ", "subset": "last_success", "original": "Loop through"}
{"__index_level_0__": 408, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student47", "submitted_text": "\"go through the 0 index of the planets if they are 'Venus' and 'Mercury', add up the integers that are associated with them\"", "prompt": "def planets_mass(planets):\n    \"\"\"\n    \"loop through the 0 index of the planets if they are 'Venus' and 'Mercury', add up the integers that are associated with them\"\n    \"\"\"\n    ", "subset": "last_failure", "original": "go through"}
{"__index_level_0__": 409, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student53", "submitted_text": "loop through planets and if the element is == 'Venus' or 'Mercury' add value to a new list and return the sum of the new list. ", "prompt": "def planets_mass(planets):\n    \"\"\"\n    loop through planets and if the element is == 'Venus' or 'Mercury' add value to a new list and return the sum of the new list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "loop through"}
{"__index_level_0__": 410, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student53", "submitted_text": "loop through planets and if the key == 'Venus' or 'Mercury' add the values together and return this value", "prompt": "def planets_mass(planets):\n    \"\"\"\n    loop through planets and if the key == 'Venus' or 'Mercury' add the values together and return this value\n    \"\"\"\n    ", "subset": "last_success", "original": "loop through"}
{"__index_level_0__": 441, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student72", "submitted_text": "Return a dictionary with the key being the string from the first dictionary in the input. Go through the next dictionary in the input and find what the integer in the first dictionary in the input corresopnds to. Return that as what corresponds to the string in the ouput.", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Return a dictionary with the key being the string from the first dictionary in the input. loop through the next dictionary in the input and find what the integer in the first dictionary in the input corresopnds to. Return that as what corresponds to the string in the ouput.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Go through"}
{"__index_level_0__": 454, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student35", "submitted_text": "The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. The output is a dictionary where the keys are string names and the values are their corresponding numbers.", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function is supposed to calculate the number of meetings of each string. It loops through each list of the list of lists. The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. The output is a dictionary where the keys are string names and the values are their corresponding numbers.\n    \"\"\"\n    ", "subset": "first_failure", "original": "iterates through"}
{"__index_level_0__": 455, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student35", "submitted_text": "The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. A dictionary is made where the keys are string names and the values are their corresponding numbers.The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function is supposed to calculate the number of meetings of each string. It loops through each list of the list of lists. A dictionary is made where the keys are string names and the values are their corresponding numbers.The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. \n    \"\"\"\n    ", "subset": "last_failure", "original": "iterates through"}
{"__index_level_0__": 476, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student71", "submitted_text": "\nTurns list of names into dictionary keys. Takes in meeting number as a dictionary value, and iterates through list of names and adds any additional meeting output numbers to each dictionary keys", "prompt": "def times_with(meetings):\n    \"\"\"\n    \nTurns list of names into dictionary keys. Takes in meeting number as a dictionary value, and loops through list of names and adds any additional meeting output numbers to each dictionary keys\n    \"\"\"\n    ", "subset": "first_failure", "original": "iterates through"}
{"__index_level_0__": 503, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student37", "submitted_text": "Write a function which takes a list of strings as an input, creates a list of 0's of length 2 called counter, then iterates through the input list and for each instance of 'Meep' in the input list, adds +1 to counter[0], and for each instance of 'Morp', adds +1 to counter[1].", "prompt": "def meeps_morps(items):\n    \"\"\"\n    Write a function which takes a list of strings as an input, creates a list of 0's of length 2 called counter, then loops through the input list and for each instance of 'Meep' in the input list, adds +1 to counter[0], and for each instance of 'Morp', adds +1 to counter[1].\n    \"\"\"\n    ", "subset": "first_success", "original": "iterates through"}
{"__index_level_0__": 510, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student73", "submitted_text": "read through the list and count all items that are the same. put the total amount of each item in a 2 item list. The list should be sorted from most to least. If there is only one item that repeats, the output should count that and also have a zero in as a placeholder for the second item in the output list. If there are no items that are the same, then the output should have zeros as placeholders for both items in the output list. ", "prompt": "def meeps_morps(items):\n    \"\"\"\n    loop through the list and count all items that are the same. put the total amount of each item in a 2 item list. The list should be sorted from most to least. If there is only one item that repeats, the output should count that and also have a zero in as a placeholder for the second item in the output list. If there are no items that are the same, then the output should have zeros as placeholders for both items in the output list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "read through"}
{"__index_level_0__": 689, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student50", "submitted_text": "Iterate through a 2D array. If a row or column of an array contain all the same element, return true. For example, if the row length is 5, check all 5 elements in the list. Else, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    loop through a 2D array. If a row or column of an array contain all the same element, return true. For example, if the row length is 5, check all 5 elements in the list. Else, return false.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Iterate through"}
{"__index_level_0__": 700, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student71", "submitted_text": "Iterate through each row and check if all spaces have been filled by 1 same letter. If all spaces have been filled by 1 same letter, then output is true.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    loop through each row and check if all spaces have been filled by 1 same letter. If all spaces have been filled by 1 same letter, then output is true.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Iterate through"}
{"__index_level_0__": 702, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student76", "submitted_text": "Looks through a list of lists and if one list contains only 'X' it returns True if not it returns False", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    loops through a list of lists and if one list contains only 'X' it returns True if not it returns False\n    \"\"\"\n    ", "subset": "first_failure", "original": "Looks through"}
{"__index_level_0__": 703, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student76", "submitted_text": "Looks through a dictionary and if one list inside the dictionary contains only 'X' it returns True if not it returns False", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    loops through a dictionary and if one list inside the dictionary contains only 'X' it returns True if not it returns False\n    \"\"\"\n    ", "subset": "last_failure", "original": "Looks through"}
{"__index_level_0__": 742, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student70", "submitted_text": "Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into an integer, then add that integer to the sum. Return the sum at the end of the list.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. loop through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into an integer, then add that integer to the sum. Return the sum at the end of the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Go through"}
{"__index_level_0__": 744, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student70", "submitted_text": "Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string. If this remaining portion of the string contains \".\", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Return the sum at the end of the list.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. loop through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string. If this remaining portion of the string contains \".\", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Return the sum at the end of the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "Go through"}
{"__index_level_0__": 754, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student29", "submitted_text": "For each string within the list, parse the string until the previous letters make up a complete word. Return that word as the key and its index as its value in a dictionary. Else, return an empty dictionary", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    For each string within the list, loop through the string until the previous letters make up a complete word. Return that word as the key and its index as its value in a dictionary. Else, return an empty dictionary\n    \"\"\"\n    ", "subset": "last_failure", "original": "parse"}
{"__index_level_0__": 774, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student70", "submitted_text": "create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. loop through each string of the input list puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.\n    \"\"\"\n    ", "subset": "first_failure", "original": "iterate through"}
{"__index_level_0__": 777, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student70", "submitted_text": "create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain the same letters in any order as a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. loop through each string of the input list puzzle. if any of the strings in puzzle contain the same letters in any order as a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "iterate through"}
{"__index_level_0__": 802, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student53", "submitted_text": "nested loop through the guessList and if the string exists in hiddenWord in the the same index add 2, elseif it exists and not in the same index add 1. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    nested loop through the guessList and if the string exists in hiddenWord in the the same index add 2, elseif it exists and not in the same index add 1. \n    \"\"\"\n    ", "subset": "first_failure", "original": "loop through"}
{"__index_level_0__": 812, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student29", "submitted_text": "For each entry in the list, loop through each character in the string and count how many \"&\" are in each entry. Then add up the number of \"&\" in each entry and return the total number of \"&\" in the list", "prompt": "def andCount(andGrid):\n    \"\"\"\n    For each entry in the list, loop through each character in the string and count how many \"&\" are in each entry. Then add up the number of \"&\" in each entry and return the total number of \"&\" in the list\n    \"\"\"\n    ", "subset": "first_success", "original": "loop through"}
{"__index_level_0__": 816, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student56", "submitted_text": "iterates through values in list, checking if they are equal to -, if the values are not, the count goes up by 1 and the count is returned", "prompt": "def andCount(andGrid):\n    \"\"\"\n    loops through values in list, checking if they are equal to -, if the values are not, the count goes up by 1 and the count is returned\n    \"\"\"\n    ", "subset": "first_success", "original": "iterates through"}
{"__index_level_0__": 828, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student70", "submitted_text": "Iterate through each string in the input list. If a character in the current string is \"&\", add 1 to the count. Return the count at the end of the list.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    loop through each string in the input list. If a character in the current string is \"&\", add 1 to the count. Return the count at the end of the list.\n    \"\"\"\n    ", "subset": "first_success", "original": "Iterate through"}
{"__index_level_0__": 847, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student43", "submitted_text": "Loop through each number N in l, replace the element in s that has the index order  N with the element in c. Return the changed s.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    loop through each number N in l, replace the element in s that has the index order  N with the element in c. Return the changed s.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Loop through"}
{"__index_level_0__": 849, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student43", "submitted_text": "First convert each element in l from string to number. If the length of s is equal or greater than the largest N in l, then loop through each number N in l and replace the element in s that has the index order N with the element in c. Otherwise, do nothing. Return the changed s.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    First convert each element in l from string to number. If the length of s is equal or greater than the largest N in l, then loop through each number N in l and replace the element in s that has the index order N with the element in c. Otherwise, do nothing. Return the changed s.\n    \"\"\"\n    ", "subset": "last_failure", "original": "loop through"}
{"__index_level_0__": 879, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student44", "submitted_text": "Go through every character in the string. \nIf the character is a letter and that character is the first character of the input, print it capitalized. \nIf the character is a letter that is not the first one in the input and the previous letter that was printed was in uppercase, print in lowercase. \nIf the previous letter was printed in uppercase, print it in lowercase. ", "prompt": "def altText(s):\n    \"\"\"\n    loop through every character in the string. \nIf the character is a letter and that character is the first character of the input, print it capitalized. \nIf the character is a letter that is not the first one in the input and the previous letter that was printed was in uppercase, print in lowercase. \nIf the previous letter was printed in uppercase, print it in lowercase. \n    \"\"\"\n    ", "subset": "last_failure", "original": "Go through"}
{"__index_level_0__": 923, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student18", "submitted_text": "Go through each letter in the s from index 0 to i-1. Append the letter to the index of i-1-index. Then, put the rest of the letters in the s from index i to the ((length of the s)-1) at the end. ", "prompt": "def changeSection(s,i):\n    \"\"\"\n    loop through each letter in the s from index 0 to i-1. Append the letter to the index of i-1-index. Then, put the rest of the letters in the s from index i to the ((length of the s)-1) at the end. \n    \"\"\"\n    ", "subset": "last_failure", "original": "Go through"}
{"__index_level_0__": 949, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student29", "submitted_text": "For each entry take in the second parameter as an index. Then go through each entry of the first parameter and replace the value corresponding to that index with the third input parameter", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    For each entry take in the second parameter as an index. Then loop through each entry of the first parameter and replace the value corresponding to that index with the third input parameter\n    \"\"\"\n    ", "subset": "last_success", "original": "go through"}
{"__index_level_0__": 952, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student49", "submitted_text": "Given a list of lists and 2 integers, go through each list and replace the number in the spot of the first integer with the number of the second integer", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    Given a list of lists and 2 integers, loop through each list and replace the number in the spot of the first integer with the number of the second integer\n    \"\"\"\n    ", "subset": "first_success", "original": "go through"}
{"__index_level_0__": 953, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student56", "submitted_text": "\niterates through a list of lists and at the position inputed as i, an integer is replaced with the inputed value of n", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    \nloops through a list of lists and at the position inputed as i, an integer is replaced with the inputed value of n\n    \"\"\"\n    ", "subset": "first_success", "original": "iterates through"}
{"__index_level_0__": 978, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student43", "submitted_text": "Count the number of elements in the inputted list, store this number as n. Divide n by 2 store it as m, then combine the 1st element in the list with the 1+m th element in the list, return it as a single element. Then combine the 2nd element in the list with the 2+m th element in the list, return it as a single element. Loop through every  element in the list.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Count the number of elements in the inputted list, store this number as n. Divide n by 2 store it as m, then combine the 1st element in the list with the 1+m th element in the list, return it as a single element. Then combine the 2nd element in the list with the 2+m th element in the list, return it as a single element. loop through every  element in the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Loop through"}
{"__index_level_0__": 983, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student54", "submitted_text": "Combine l1 and l2, if l1 length is greater than 1, loop through each index to combine the two", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Combine l1 and l2, if l1 length is greater than 1, loop through each index to combine the two\n    \"\"\"\n    ", "subset": "last_success", "original": "loop through"}
{"__index_level_0__": 1126, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student15", "submitted_text": "for every character in the list, looks through the string and if the character is in the string, replaces it with sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    for every character in the list, loops through the string and if the character is in the string, replaces it with sep.\n    \"\"\"\n    ", "subset": "last_success", "original": "looks through"}
{"__index_level_0__": 1136, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student53", "submitted_text": "loop through s and if s is == to any element in chars, replace the s with sep", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    loop through s and if s is == to any element in chars, replace the s with sep\n    \"\"\"\n    ", "subset": "first_success", "original": "loop through"}
{"__index_level_0__": 1137, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student55", "submitted_text": "Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a comma and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a comma and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should loop through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.\n    \"\"\"\n    ", "subset": "first_failure", "original": "run through"}
{"__index_level_0__": 1138, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student55", "submitted_text": "Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a double quotes or simple quotes and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a double quotes or simple quotes and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should loop through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.\n    \"\"\"\n    ", "subset": "last_success", "original": "run through"}
{"__index_level_0__": 1156, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student56", "submitted_text": "iterates through a list of dictionaries and adds the dictionaries with a given writer to a new list, returns the new list", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    loops through a list of dictionaries and adds the dictionaries with a given writer to a new list, returns the new list\n    \"\"\"\n    ", "subset": "first_failure", "original": "iterates through"}
{"__index_level_0__": 1159, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student62", "submitted_text": "iterate through each element in list, remove element from list if it does not have the same 'author' as the string provided by user", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    loop through each element in list, remove element from list if it does not have the same 'author' as the string provided by user\n    \"\"\"\n    ", "subset": "last_failure", "original": "iterate through"}
{"__index_level_0__": 1184, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student35", "submitted_text": "The nominations is a list of dictionaries. The function iterates through the dictioanries backwards. A new variable 'success' is created which computes (wins/noms). A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a list of dictionaries. The function loops through the dictioanries backwards. A new variable 'success' is created which computes (wins/noms). A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.\n    \"\"\"\n    ", "subset": "first_failure", "original": "iterates through"}
{"__index_level_0__": 1187, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student35", "submitted_text": "The nominations is a list of dictionaries. The function iterates through the dictioanries backwards using a for loop. A new variable 'success' is created which computes (wins/noms) (noms is the key in the dictionary) during each loop run for every dictionary. A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The nominations is a list of dictionaries. The function loops through the dictioanries backwards using a for loop. A new variable 'success' is created which computes (wins/noms) (noms is the key in the dictionary) during each loop run for every dictionary. A new list is made. As the input list is iterated through, the new list is appended with the contents of the dictionary along with the corresponding success rate.\n    \"\"\"\n    ", "subset": "last_failure", "original": "iterates through"}
{"__index_level_0__": 1261, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student43", "submitted_text": "Loop through each list in scientists: check if the third element in the list is Physics. If true, return the 1st element in the list. If false, do nothing.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    loop through each list in scientists: check if the third element in the list is Physics. If true, return the 1st element in the list. If false, do nothing.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Loop through"}
{"__index_level_0__": 1263, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student43", "submitted_text": "Create an empty list A. Loop through each list in scientists: check if the third element in the list is Physics. If true, append the 1st element to list A. If false, do nothing. Now reorder each element in A, according to each element's corresponding list in scientists's second entry value, the order should be from smallest numerical value to the largest numerical value.  Return list A.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Create an empty list A. loop through each list in scientists: check if the third element in the list is Physics. If true, append the 1st element to list A. If false, do nothing. Now reorder each element in A, according to each element's corresponding list in scientists's second entry value, the order should be from smallest numerical value to the largest numerical value.  Return list A.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Loop through"}
{"__index_level_0__": 1314, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student35", "submitted_text": "The function is supposed to calculate the total billing amount. From the grocery_list (list of lists), it looks into each individual list and multiplies the numbers provided in each list. Then, it adds all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the output", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function is supposed to calculate the total billing amount. From the grocery_list (list of lists), it loops through each individual list and multiplies the numbers provided in each list. Then, it adds all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the output\n    \"\"\"\n    ", "subset": "first_failure", "original": "looks into"}
{"__index_level_0__": 1315, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student35", "submitted_text": "The function is supposed to calculate the total billing amount. From the grocery_list (list of lists), it looks into each individual list and multiplies the numbers provided in each list. Then, it adds all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the output. The output is rounded to two decimal points.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function is supposed to calculate the total billing amount. From the grocery_list (list of lists), it loops through each individual list and multiplies the numbers provided in each list. Then, it adds all those numbers. After that, it multiplies that sum with (sales_tax + 1) to give the output. The output is rounded to two decimal points.\n    \"\"\"\n    ", "subset": "last_success", "original": "looks into"}
{"__index_level_0__": 1339, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student71", "submitted_text": "Go through each list and access last 2 values of each list. Multiply the last 2 values of every list. All resulting values must be added. This value should then be multiplied to 100* sales_tax", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    loop through each list and access last 2 values of each list. Multiply the last 2 values of every list. All resulting values must be added. This value should then be multiplied to 100* sales_tax\n    \"\"\"\n    ", "subset": "first_failure", "original": "Go through"}
{"__index_level_0__": 1342, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student76", "submitted_text": "Looks through a list to extract the number of products purchased in position 1 and multiply it by the unit price in position 2. Then it sums each product and multiplies the sum by what ever number is outside the brackets plus 1", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    loops through a list to extract the number of products purchased in position 1 and multiply it by the unit price in position 2. Then it sums each product and multiplies the sum by what ever number is outside the brackets plus 1\n    \"\"\"\n    ", "subset": "first_failure", "original": "Looks through"}
{"__index_level_0__": 1370, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student76", "submitted_text": "looks through a dictionary for english words and their translations and returns the translations if they are present in the dictionary. If they are not present it returns 'UNK'", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    loops through a dictionary for english words and their translations and returns the translations if they are present in the dictionary. If they are not present it returns 'UNK'\n    \"\"\"\n    ", "subset": "first_success", "original": "looks through"}
{"__index_level_0__": 1376, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people in from oldest to youngest, as long as there is less than a 10-year gap between the two. \n", "prompt": "def topScores(lst):\n    \"\"\"\n    loops through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people in from oldest to youngest, as long as there is less than a 10-year gap between the two. \n\n    \"\"\"\n    ", "subset": "first_failure", "original": "Iterates through"}
{"__index_level_0__": 1403, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function reads the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The strings are then printed in the order of their corresponding numbers.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function loops through the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The strings are then printed in the order of their corresponding numbers.\n    \"\"\"\n    ", "subset": "last_failure", "original": "reads"}
{"__index_level_0__": 1455, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student55", "submitted_text": "Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns the names of 5 students with grades higher or equal to 80. The order of the return is from the highest grade to the lowest one.", "prompt": "def topScores(lst):\n    \"\"\"\n    Write a function that loops through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns the names of 5 students with grades higher or equal to 80. The order of the return is from the highest grade to the lowest one.\n    \"\"\"\n    ", "subset": "last_success", "original": "runs through"}
{"__index_level_0__": 1618, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student30", "submitted_text": "Take in array A. Iterate through array A, and record the proportion of numbers in it versus letters.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Take in array A. loop through array A, and record the proportion of numbers in it versus letters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Iterate through"}
{"__index_level_0__": 1620, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student30", "submitted_text": "Take in array A. Create variable X equal to 0. Iterate through array A. When a character is present in Array A, add 1 to Y. Return Y divided by the size of the array, rounded to the nearest percent.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Take in array A. Create variable X equal to 0. loop through array A. When a character is present in Array A, add 1 to Y. Return Y divided by the size of the array, rounded to the nearest percent.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Iterate through"}
