{"__index_level_0__": 139, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student10", "submitted_text": "User inputs a list of integers from 0-25. Function converts integers into letters by matching the number with the corresponding letter of the alphabet. Function would return a list of letters. When the user inputs -1, function should end current string in list and start a new string. ", "prompt": "def convert(lst):\n    \"\"\"\n    User provides a list of integers from 0-25. Function converts integers into letters by matching the number with the corresponding letter of the alphabet. Function would return a list of letters. When the user provides -1, function should end current string in list and start a new string. \n    \"\"\"\n    ", "subset": "first_failure", "original": "inputs"}
{"__index_level_0__": 141, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student10", "submitted_text": "User inputs a list of numbers ranging from -1 to 25, and function outputs a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current string in list and start a new string. Function should return a list of the letters.", "prompt": "def convert(lst):\n    \"\"\"\n    User provides a list of numbers ranging from -1 to 25, and function outputs a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user provides -1, function should end current string in list and start a new string. Function should return a list of the letters.\n    \"\"\"\n    ", "subset": "last_failure", "original": "inputs"}
{"__index_level_0__": 474, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student69", "submitted_text": "Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    Provide a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. \n    \"\"\"\n    ", "subset": "first_failure", "original": "Enter"}
{"__index_level_0__": 475, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student69", "submitted_text": "Enter a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. if the name appears more than once, add the new number to the previous number", "prompt": "def times_with(meetings):\n    \"\"\"\n    Provide a list of lists. Each element in the lists is a list where index 0 is a number and index 1 is a list of names. for each element in the list of lists, create a dictionary where the name is a key and the number is a value. if the name appears more than once, add the new number to the previous number\n    \"\"\"\n    ", "subset": "last_success", "original": "Enter"}
{"__index_level_0__": 583, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student69", "submitted_text": "Enter an integer. if the integer is negative, multiply the integer by -1. if the integer is greater than 9, add 1. if the integer is less than 10, multiply bny 10.\n", "prompt": "def increaseScore(score):\n    \"\"\"\n    Provide an integer. if the integer is negative, multiply the integer by -1. if the integer is greater than 9, add 1. if the integer is less than 10, multiply bny 10.\n\n    \"\"\"\n    ", "subset": "first_success", "original": "Enter"}
{"__index_level_0__": 698, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student69", "submitted_text": "Enter a list of lists of strings. if any list has five consecutive 'X' values, return true. else return false", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Provide a list of lists of strings. if any list has five consecutive 'X' values, return true. else return false\n    \"\"\"\n    ", "subset": "first_success", "original": "Enter"}
{"__index_level_0__": 699, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student69", "submitted_text": "Enter a list where the 0th index is a list of lists of strings, and the 1st index is a character. if any list in the 0th index has five consecutive values of the character entered in the 1st index, return true. else return false", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Provide a list where the 0th index is a list of lists of strings, and the 1st index is a character. if any list in the 0th index has five consecutive values of the character provided in the 1st index, return true. else return false\n    \"\"\"\n    ", "subset": "last_success", "original": "entered"}
{"__index_level_0__": 891, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student69", "submitted_text": "Enter a string. for every character in the string, if the index is an even even number, capitalize the character and print", "prompt": "def altText(s):\n    \"\"\"\n    Provide a string. for every character in the string, if the index is an even even number, capitalize the character and print\n    \"\"\"\n    ", "subset": "first_failure", "original": "Enter"}
{"__index_level_0__": 906, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student10", "submitted_text": "User inputs a string s and integer i. Function would flip the first i letters of string s backwards, and then concatenate the rest of the string to the end of the backwards letters.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    User provides a string s and integer i. Function would flip the first i letters of string s backwards, and then concatenate the rest of the string to the end of the backwards letters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "inputs"}
{"__index_level_0__": 907, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student10", "submitted_text": "User inputs a string s and integer i. Function would write the first i letters of string s backwards and save that as string A. All the letters which were not flipped backwards would be saved as string B. Function would add string A and B, and then return that as the output", "prompt": "def changeSection(s,i):\n    \"\"\"\n    User provides a string s and integer i. Function would write the first i letters of string s backwards and save that as string A. All the letters which were not flipped backwards would be saved as string B. Function would add string A and B, and then return that as the output\n    \"\"\"\n    ", "subset": "last_success", "original": "inputs"}
{"__index_level_0__": 995, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student10", "submitted_text": "User inputs an int. Function returns a list length value, with each item of the list being another list, containing all numbers from 1 to value.", "prompt": "def pattern(value):\n    \"\"\"\n    User provides an int. Function returns a list length value, with each item of the list being another list, containing all numbers from 1 to value.\n    \"\"\"\n    ", "subset": "first_success", "original": "inputs"}
{"__index_level_0__": 1159, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student62", "submitted_text": "iterate through each element in list, remove element from list if it does not have the same 'author' as the string provided by user", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    iterate through each element in list, remove element from list if it does not have the same 'author' as the string provided by user\n    \"\"\"\n    ", "subset": "last_failure", "original": "provided"}
{"__index_level_0__": 1207, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student69", "submitted_text": "Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Provide a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Enter"}
{"__index_level_0__": 1209, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student69", "submitted_text": "Enter a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list, rounded to 2 decimal places. Sort each dictionary in the list alphabetically based on the 'nominee' key. then reverse the order.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Provide a list of dictionaries. for every dictionary in the list of dictionaries, divide the values of 'wins' by the value of 'noms'. The result is the value of the new key 'success'. Add the 'success' key to each dictionary in the list, rounded to 2 decimal places. Sort each dictionary in the list alphabetically based on the 'nominee' key. then reverse the order.\n    \"\"\"\n    ", "subset": "last_success", "original": "Enter"}
{"__index_level_0__": 1336, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student69", "submitted_text": "Enter a list where the 0th index is a list of lists and the 1st index is an integer. every element in the list of lists is a list with a string in the 0th index, integer in the 1st index and integer in the second index. multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Provide a list where the 0th index is a list of lists and the 1st index is an integer. every element in the list of lists is a list with a string in the 0th index, integer in the 1st index and integer in the second index. multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list\n    \"\"\"\n    ", "subset": "first_failure", "original": "Enter"}
{"__index_level_0__": 1338, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student69", "submitted_text": "Enter a list where the 0th index is a list of lists and the 1st index is an integer. for every list in the 0th index, for every list multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Provide a list where the 0th index is a list of lists and the 1st index is an integer. for every list in the 0th index, for every list multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list\n    \"\"\"\n    ", "subset": "last_failure", "original": "Enter"}
{"__index_level_0__": 1363, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student69", "submitted_text": "Enter a string. Separate the string on spaces and add each group of strings to a list. if the word in the list matches a key in the dictionary, print the value of that key.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Provide a string. Separate the string on spaces and add each group of strings to a list. if the word in the list matches a key in the dictionary, print the value of that key.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Enter"}
{"__index_level_0__": 1364, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student69", "submitted_text": "Enter a string. Separate the string on spaces and add each word to a list. For every word in the list, if the word matches a key in the dictionary, print the value of that key.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Provide a string. Separate the string on spaces and add each word to a list. For every word in the list, if the word matches a key in the dictionary, print the value of that key.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Enter"}
{"__index_level_0__": 1366, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student75", "submitted_text": "def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to provide english and output french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation\n    \"\"\"\n    ", "subset": "first_failure", "original": "input"}
{"__index_level_0__": 1369, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student75", "submitted_text": "def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to provide english and output french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation\n    \"\"\"\n    ", "subset": "last_failure", "original": "input"}
{"__index_level_0__": 1498, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student60", "submitted_text": "This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters sorted alphabetically. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters sorted alphabetically. As an example. If you provide ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. \n    \"\"\"\n    ", "subset": "last_success", "original": "input"}
{"__index_level_0__": 1509, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student69", "submitted_text": "Enter two arrays of characters. Print an array with the first array multiplied by the second array.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    Provide two arrays of characters. Print an array with the first array multiplied by the second array.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Enter"}
{"__index_level_0__": 1511, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student69", "submitted_text": "Enter two arrays of characters. Reverse the order of the first array. Print an array with the the first array multiplied by the second array.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    Provide two arrays of characters. Reverse the order of the first array. Print an array with the the first array multiplied by the second array.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Enter"}
{"__index_level_0__": 1592, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student10", "submitted_text": "User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    User provides two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match.\n    \"\"\"\n    ", "subset": "first_failure", "original": "inputs"}
{"__index_level_0__": 1595, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student10", "submitted_text": "User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match, as an integer with no decimal spaces with a % sign at the end.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    User provides two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match, as an integer with no decimal spaces with a % sign at the end.\n    \"\"\"\n    ", "subset": "last_failure", "original": "inputs"}
