{"__index_level_0__": 0, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student1", "submitted_text": "takes a list of strings, integers, and floats and returns the sum of all the integers and floats.", "prompt": "def add_up(arr):\n    \"\"\"\n    takes a list of strings, integers, and floats and displays the sum of all the integers and floats.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 76, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student27", "submitted_text": "The input will be a list of integers. Return 0 if the list is empty. Otherwise, subtract the sum of all the integers with odd positions from the sum of all the integers with even positions.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    The input will be a list of integers. Display 0 if the list is empty. Otherwise, subtract the sum of all the integers with odd positions from the sum of all the integers with even positions.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 114, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers and returns a list with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new string", "prompt": "def convert(lst):\n    \"\"\"\n    takes a list of numbers and displays a list with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new string\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 290, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student0", "submitted_text": "takes in a list of numbers. returns the list of numbers without odd integer numbers.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers. displays the list of numbers without odd integer numbers.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 351, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student12", "submitted_text": "Using the dictionary provided, replace each letter (which is the key in the dictionary)in the list with the value. If the letter is not found in the dictionary's keys, replace that letter with None. Return the resulting list.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Using the dictionary provided, replace each letter (which is the key in the dictionary)in the list with the value. If the letter is not found in the dictionary's keys, replace that letter with None. Display the resulting list.\n    \"\"\"\n    ", "subset": "first_success", "original": "Return"}
{"__index_level_0__": 369, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student12", "submitted_text": "Return true if the list contains the letter Q or U, else return false", "prompt": "def has_qu(lst):\n    \"\"\"\n    Display true if the list contains the letter Q or U, else display false\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 383, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student1", "submitted_text": "Takes a dictionary of planet names and their masses and returns 15 if Venus, Mercury, and the Sun are present in the dictionary.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Takes a dictionary of planet names and their masses and displays 15 if Venus, Mercury, and the Sun are present in the dictionary.\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 425, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student2", "submitted_text": "This function prints a new dictionary containing the strings that appear in the first dictionary the lists of stings that appear in the second dictionary", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    This function displays a new dictionary containing the strings that appear in the first dictionary the lists of stings that appear in the second dictionary\n    \"\"\"\n    ", "subset": "first_failure", "original": "prints"}
{"__index_level_0__": 491, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student2", "submitted_text": "this function returns a list for the amount of times the string 'Meep' appears followed by the amount of times the string 'Morp' appears", "prompt": "def meeps_morps(items):\n    \"\"\"\n    this function displays a list for the amount of times the string 'Meep' appears followed by the amount of times the string 'Morp' appears\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 516, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student12", "submitted_text": "If the hour is between 0 and 8, return sleeping. Else, return weekend if the day is Sat or Sun. Else, return weekday if the day is any day between Monday and Friday.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    If the hour is between 0 and 8, display sleeping. Else, display weekend if the day is Sat or Sun. Else, display weekday if the day is any day between Monday and Friday.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 561, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student23", "submitted_text": "This function takes in a number and adds one if the number is greater then 9. If the number is negative it turns it into a positive number. If it is a single-digit number it adds a zero to the number. Then the output is returned with the updated number.", "prompt": "def increaseScore(score):\n    \"\"\"\n    This function takes in a number and adds one if the number is greater then 9. If the number is negative it turns it into a positive number. If it is a single-digit number it adds a zero to the number. Then the output is displayed with the updated number.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returned"}
{"__index_level_0__": 589, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student1", "submitted_text": "Takes the month and returns the season that the month falls into.", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes the month and displays the season that the month falls into.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 648, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student2", "submitted_text": "This function pints a list containing strings of every value from the input", "prompt": "def assessVowels(s):\n    \"\"\"\n    This function displays a list containing strings of every value from the input\n    \"\"\"\n    ", "subset": "first_failure", "original": "pints"}
{"__index_level_0__": 750, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student27", "submitted_text": "The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. Return a dictionary with the string as the key and the position of the string as the value.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. Display a dictionary with the string as the key and the position of the string as the value.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 811, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student27", "submitted_text": "There will be a list of strings. Count and return the number of \"&\" within those strings.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    There will be a list of strings. Count and display the number of \"&\" within those strings.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 858, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and outputs every other letter as upper case. If it is just a one letter word it is turned into an upper case letter.", "prompt": "def altText(s):\n    \"\"\"\n    This function takes in a word or sentence and displays every other letter as upper case. If it is just a one letter word it is turned into an upper case letter.\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 898, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student0", "submitted_text": "takes in a string and a number. reverse the string from index 0 to the number. return the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    takes in a string and a number. reverse the string from index 0 to the number. display the string.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 986, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student0", "submitted_text": "takes in an integer. return a matrix of the integer size by the integer size with values of its row index plus one.", "prompt": "def pattern(value):\n    \"\"\"\n    takes in an integer. display a matrix of the integer size by the integer size with values of its row index plus one.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1014, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student0", "submitted_text": "takes in a string and returns a string with '^' changed to '_'", "prompt": "def reduce(val):\n    \"\"\"\n    takes in a string and displays a string with '^' changed to '_'\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 1032, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student2", "submitted_text": "this function returns false if the value contains a 9", "prompt": "def fib(n):\n    \"\"\"\n    this function displays false if the value contains a 9\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1065, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student0", "submitted_text": "takes in a string, an integer, and a dictionary.\nreturns the dictionary that adds the string as a key and integer as the value", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    takes in a string, an integer, and a dictionary.\ndisplays the dictionary that adds the string as a key and integer as the value\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 1091, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student27", "submitted_text": "Check if \"aspen\" is one of the keys in a dict. Return \"Yup\" if it is a key, \"Nope\" if it is not a key.", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    Check if \"aspen\" is one of the keys in a dict. Display \"Yup\" if it is a key, \"Nope\" if it is not a key.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 1141, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student27", "submitted_text": "The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Return the updated list.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Display the updated list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 1225, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student5", "submitted_text": "this function will take a list of flights and the starting city and return the possible layovers with the staring city", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    this function will take a list of flights and the starting city and display the possible layovers with the staring city\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1276, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student2", "submitted_text": "This function prints values from the start until the stop by the factor", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    This function displays values from the start until the stop by the factor\n    \"\"\"\n    ", "subset": "first_failure", "original": "prints"}
{"__index_level_0__": 1308, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student23", "submitted_text": "This function takes in a list of the item purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the lists are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function takes in a list of the item purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the lists are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then displayed as the output.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returned"}
{"__index_level_0__": 1372, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student1", "submitted_text": "takes a list of list, which contains a score and a name, and returns the top score.", "prompt": "def topScores(lst):\n    \"\"\"\n    takes a list of list, which contains a score and a name, and displays the top score.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1583, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student0", "submitted_text": "takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of num times 100 divided by the length of the first list and concatenate a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    takes in two lists. If the lists have the same value at the same index, add one to a num variable. display the string of num times 100 divided by the length of the first list and concatenate a percent sign.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1669, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints \"ha\" for any value", "prompt": "def laugh(size):\n    \"\"\"\n    This function displays \"ha\" for any value\n    \"\"\"\n    ", "subset": "first_failure", "original": "prints"}
{"__index_level_0__": 113, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student78", "submitted_text": "given a list, convert each item in the list to an integer. subract the second integer from the first and then with that total, add the next integer. with that total subtract the next integer. repeat this until all integers in the list have been either added or subtracted and output the final total. if the list is blank, output 0.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    given a list, convert each item in the list to an integer. subract the second integer from the first and then with that total, add the next integer. with that total subtract the next integer. repeat this until all integers in the list have been either added or subtracted and display the final total. if the list is blank, display 0.\n    \"\"\"\n    ", "subset": "first_success", "original": "output"}
{"__index_level_0__": 206, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student52", "submitted_text": "If there is \"0\" in lst, then put \"A\" into new list; If there is \"1\" in lst, then put \"B\" into new list; If there is \"2\" in lst, then put \"C\" into new list; If there is \"4\" in lst, then put \"D\" into new list. Return new list.", "prompt": "def convert(lst):\n    \"\"\"\n    If there is \"0\" in lst, then put \"A\" into new list; If there is \"1\" in lst, then put \"B\" into new list; If there is \"2\" in lst, then put \"C\" into new list; If there is \"4\" in lst, then put \"D\" into new list. Display new list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 233, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student52", "submitted_text": "For each item in lst, if the item bigger than the last one, then move it as the first item of lst. Return lst.", "prompt": "def order_strings(lst):\n    \"\"\"\n    For each item in lst, if the item bigger than the last one, then move it as the first item of lst. Display lst.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 289, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student78", "submitted_text": "given a sting, convert it to an int. divide the number by each number counting up starting at 2. if the output is another int and is not the same number as the original int, output False. If the output is the same as the original int output True.", "prompt": "def check_prime(num):\n    \"\"\"\n    given a sting, convert it to an int. divide the number by each number counting up starting at 2. if the output is another int and is not the same number as the original int, display False. If the output is the same as the original int display True.\n    \"\"\"\n    ", "subset": "first_success", "original": "output"}
{"__index_level_0__": 350, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student52", "submitted_text": "If each item in lst can be divided by 2 wihtout remainder, then keep it. If the item in lst cannot be divided by 2 without remainder, then cut it off from lst. Return lst.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    If each item in lst can be divided by 2 wihtout remainder, then keep it. If the item in lst cannot be divided by 2 without remainder, then cut it off from lst. Display lst.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 368, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student77", "submitted_text": "Given a dictionary with key/value pairs and a list of either strings or numbers, return the values in the dictionary if they are included in the list, and return None if they are not.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Given a dictionary with key/value pairs and a list of either strings or numbers, display the values in the dictionary if they are included in the list, and display None if they are not.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 382, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student77", "submitted_text": "Given a list of letters, return \"True\" if the list has the letter \"Q\" or \"U\" or both, and \"False\" if the list does not.", "prompt": "def has_qu(lst):\n    \"\"\"\n    Given a list of letters, display \"True\" if the list has the letter \"Q\" or \"U\" or both, and \"False\" if the list does not.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 424, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student65", "submitted_text": "This function takes the input of a dictionary. If the key is the name of a planet, its value is added to the total mass. Otherwise, 0 is added. The function returns the total mass of all planets in the dictionary.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    This function takes the input of a dictionary. If the key is the name of a planet, its value is added to the total mass. Otherwise, 0 is added. The function displays the total mass of all planets in the dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 490, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student79", "submitted_text": "you are going to have a nested list as an input. the inner most lists are going to have strings. next to them in an outer list they will have an integer. your goal is to create a dictionary with the keys of names in the inner most lists and with the corresponding number and return.", "prompt": "def times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have strings. next to them in an outer list they will have an integer. your goal is to create a dictionary with the keys of names in the inner most lists and with the corresponding number and display.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 538, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student77", "submitted_text": "Given two parameters,  the first being the day and the second being a measurement of time, return \"weekend\" if the day is Sat or Sun, and return weekday if the day is neither. Return \"sleeping\" if the measurement of time is between 0 and 8, inclusive. If the time is any other, return either \"weekend\" or \"weekday\".", "prompt": "def print_time(day,hour):\n    \"\"\"\n    Given two parameters,  the first being the day and the second being a measurement of time, display \"weekend\" if the day is Sat or Sun, and display weekday if the day is neither. Display \"sleeping\" if the measurement of time is between 0 and 8, inclusive. If the time is any other, display either \"weekend\" or \"weekday\".\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 588, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student79", "submitted_text": "if you get an input of -10 return 10, if you get an input of 1 return a 10, if you get a 10 return 11 if you get 15 return 16 if you get 20 return 21", "prompt": "def increaseScore(score):\n    \"\"\"\n    if you get an input of -10 display 10, if you get an input of 1 display a 10, if you get a 10 display 11 if you get 15 display 16 if you get 20 display 21\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 647, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student65", "submitted_text": "This function inputs a string of the name of a month and returns the name of the season it is in (in the northern hemisphere). The input should be capitalized, the output should not.", "prompt": "def getSeason(month):\n    \"\"\"\n    This function inputs a string of the name of a month and displays the name of the season it is in (in the northern hemisphere). The input should be capitalized, the output should not.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 704, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student79", "submitted_text": "you will have a list of lists consisting of X and O as strings. if in a single list all the elements are X you return true, else you return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    you will have a list of lists consisting of X and O as strings. if in a single list all the elements are X you display true, else you display false.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 749, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student78", "submitted_text": "given a list of strings, split each string by \\. for each new string, if it starts with t, eliminate the t. next find the sting that contains a number, convert it to a float, and add it to running total. output this total", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings, split each string by \\. for each new string, if it starts with t, eliminate the t. next find the sting that contains a number, convert it to a float, and add it to running total. display this total\n    \"\"\"\n    ", "subset": "last_failure", "original": "output"}
{"__index_level_0__": 810, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student65", "submitted_text": "For each word in guessList, this function returns a list of scores compared to the hiddenWord. For every letter in the right place it adds 2 points, and for every letter which is in hiddenWord but not in the right place it adds 1 point.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    For each word in guessList, this function displays a list of scores compared to the hiddenWord. For every letter in the right place it adds 2 points, and for every letter which is in hiddenWord but not in the right place it adds 1 point.\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 829, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student78", "submitted_text": "given a list of strings, concatenate the strings into one long string. read through the long string and count the number of '&' found. output that number.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    given a list of strings, concatenate the strings into one long string. read through the long string and count the number of '&' found. display that number.\n    \"\"\"\n    ", "subset": "first_success", "original": "output"}
{"__index_level_0__": 962, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student78", "submitted_text": "if mat is a list of lists, input n in the i position of each list. output the modified list of lists", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    if mat is a list of lists, input n in the i position of each list. display the modified list of lists\n    \"\"\"\n    ", "subset": "first_success", "original": "output"}
{"__index_level_0__": 1013, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student52", "submitted_text": "Return a list contains the same number of list as value. Each list contains each number from 1 to the given value. ", "prompt": "def pattern(value):\n    \"\"\"\n    Display a list contains the same number of list as value. Each list contains each number from 1 to the given value. \n    \"\"\"\n    ", "subset": "first_success", "original": "Return"}
{"__index_level_0__": 1031, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student52", "submitted_text": "Test if the item in val is \"^\", then change to \"_\", return new val. If there is no \"^\" in val, then return val.", "prompt": "def reduce(val):\n    \"\"\"\n    Test if the item in val is \"^\", then change to \"_\", display new val. If there is no \"^\" in val, then display val.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1090, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student52", "submitted_text": "Add word as one of the key of map, add line_number as the value of key into map. Return map.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Add word as one of the key of map, add line_number as the value of key into map. Display map.\n    \"\"\"\n    ", "subset": "first_success", "original": "Return"}
{"__index_level_0__": 1119, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student78", "submitted_text": "given a dictionary, if one of the keys is 'Aspen', output 'Yup', if not, output 'Nope'", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    given a dictionary, if one of the keys is 'Aspen', display 'Yup', if not, display 'Nope'\n    \"\"\"\n    ", "subset": "first_success", "original": "output"}
{"__index_level_0__": 1177, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student78", "submitted_text": "if books is a list of dictionaries, output a list of dictionaries where the associated data to the key 'author' is equal to the input writer", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    if books is a list of dictionaries, display a list of dictionaries where the associated data to the key 'author' is equal to the input writer\n    \"\"\"\n    ", "subset": "last_failure", "original": "output"}
{"__index_level_0__": 1275, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student77", "submitted_text": "Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list. Then sort the scientists based on the numbers given in the set of lists from smallest to largest. For example, if the scientist has the smallest number attached to them in the set of lists, they should be placed first in the output list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only display the scientist if the subject is \"Physics\" in a list. Then sort the scientists based on the numbers given in the set of lists from smallest to largest. For example, if the scientist has the smallest number attached to them in the set of lists, they should be placed first in the output list.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1460, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student65", "submitted_text": "This function has a list of lists of length 2 as inputs. First, sort the lists by the first entry in descending order. If the first entry in the list (the score) is greater than or equal to 80, add the second entry in the list (the name) to a list to be output at the end. ", "prompt": "def topScores(lst):\n    \"\"\"\n    This function has a list of lists of length 2 as inputs. First, sort the lists by the first entry in descending order. If the first entry in the list (the score) is greater than or equal to 80, add the second entry in the list (the name) to a list to be displayed at the end. \n    \"\"\"\n    ", "subset": "last_failure", "original": "output"}
{"__index_level_0__": 1629, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student52", "submitted_text": "Add the items in guess and answers together, find out which value different than others and get its counts. Divid the sum number of items in guess and answers by the number of the different value. Return the value in percent after divided. If the different items same as other items in both guess and answers, then return \"100%\"", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Add the items in guess and answers together, find out which value different than others and get its counts. Divid the sum number of items in guess and answers by the number of the different value. Display the value in percent after divided. If the different items same as other items in both guess and answers, then display \"100%\"\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1644, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student74", "submitted_text": "the code should store up to five strings. Each nested list should equal five and output true. The whole list can be any length. Any nested list less or more than five should output false ", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    the code should store up to five strings. Each nested list should equal five and display true. The whole list can be any length. Any nested list less or more than five should display false \n    \"\"\"\n    ", "subset": "last_success", "original": "output"}
{"__index_level_0__": 1668, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student65", "submitted_text": "For each element in lst, this function raises the element to the power of val and returns the resulting list", "prompt": "def exp(lst, val):\n    \"\"\"\n    For each element in lst, this function raises the element to the power of val and displays the resulting list\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 2, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student1", "submitted_text": "takes a list of strings, integers, and floats and returns the sum of all the ints and floats.", "prompt": "def add_up(arr):\n    \"\"\"\n    takes a list of strings, integers, and floats and displays the sum of all the ints and floats.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 3, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student6", "submitted_text": "Input: list of items, that may be a combination of strings and integers. Function takes the sum of the integers and outputs it", "prompt": "def add_up(arr):\n    \"\"\"\n    Input: list of items, that may be a combination of strings and integers. Function takes the sum of the integers and displays it\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 5, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student6", "submitted_text": "Input: list of strings. Function checks each item in the list to check if it is a number character. If it is a number, convert it to an integer and it adds it to a new list. If it is not a number integer it ignores it. Outputs the sum of each ingter in the new list. If the original list contains no integers, return 0", "prompt": "def add_up(arr):\n    \"\"\"\n    Input: list of strings. Function checks each item in the list to check if it is a number character. If it is a number, convert it to an integer and it adds it to a new list. If it is not a number integer it ignores it. Displays the sum of each ingter in the new list. If the original list contains no integers, display 0\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 22, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student14", "submitted_text": "add up all number characters in the brackets and output the result", "prompt": "def add_up(arr):\n    \"\"\"\n    add up all number characters in the brackets and display the result\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 26, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student14", "submitted_text": "add up all number characters in each arrangement. output total", "prompt": "def add_up(arr):\n    \"\"\"\n    add up all number characters in each arrangement. display total\n    \"\"\"\n    ", "subset": "last_failure", "original": "output"}
{"__index_level_0__": 27, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student15", "submitted_text": "Adds the numbers in the list and returns the number. If there are no numbers, returns 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    Adds the numbers in the list and displays the number. If there are no numbers, displays 0.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 31, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student15", "submitted_text": "For each variable in the list, if the variable can be casted to a float, adds the variable to a separate list. Adds the number in this list together and returns the number. If there are no numbers, returns 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    For each variable in the list, if the variable can be casted to a float, adds the variable to a separate list. Adds the number in this list together and displays the number. If there are no numbers, displays 0.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 32, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student24", "submitted_text": "For items in the list, if the item is an integer add them together. Return the sum of those integers.", "prompt": "def add_up(arr):\n    \"\"\"\n    For items in the list, if the item is an integer add them together. Display the sum of those integers.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 33, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student24", "submitted_text": "For items in the list inside the list add each item together. If the item is not an integer, ignore any errors. Return the sum of the integers in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    For items in the list inside the list add each item together. If the item is not an integer, ignore any errors. Display the sum of the integers in the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "Return"}
{"__index_level_0__": 34, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student28", "submitted_text": "This function takes one paramater, arr. arr can consist of a string and integers or it can be empty. The code adds up all the integers in arr. And it only returns the sum of all the integers in arr.", "prompt": "def add_up(arr):\n    \"\"\"\n    This function takes one parameter, arr. arr can consist of a string and integers or it can be empty. The code adds up all the integers in arr. And it only displays the sum of all the integers in arr.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 35, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student31", "submitted_text": "Takes a list with another internal list. Creates a new float variable and sets it to zero, and then converts each item in the internal list to a float in any way possible and adds them to the float variable. Then, returns that float variable.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes a list with another internal list. Creates a new float variable and sets it to zero, and then converts each item in the internal list to a float in any way possible and adds them to the float variable. Then, displays that float variable.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 37, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student31", "submitted_text": "Takes a list with a list inside. Then, creates a new list and for every item in the input list, takes each element inside that item and adds it to a new list called trueList. Creates a new float variable and sets it to zero, and then converts each item in trueList to a float in any way possible and adds them to the float variable. Then, returns that float variable.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes a list with a list inside. Then, creates a new list and for every item in the input list, takes each element inside that item and adds it to a new list called trueList. Creates a new float variable and sets it to zero, and then converts each item in trueList to a float in any way possible and adds them to the float variable. Then, displays that float variable.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 39, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student45", "submitted_text": "Takes an array. Adds up each number in the array. Outputs the total.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes an array. Adds up each number in the array. Displays the total.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Outputs"}
{"__index_level_0__": 43, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student46", "submitted_text": "Takes in an array, outputs all integers added together that are in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes in an array, displays all integers added together that are in the array.\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 48, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student46", "submitted_text": "Takes in a array and withing that array list, from the list removes all strings, outputs all numbers added together that are in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes in a array and withing that array list, from the list removes all strings, displays all numbers added together that are in the array.\n    \"\"\"\n    ", "subset": "last_failure", "original": "outputs"}
{"__index_level_0__": 55, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student47", "submitted_text": "\"add all the doubles in arr into a double named sum, neglect the item if the item in arr is not a double, return sum\"", "prompt": "def add_up(arr):\n    \"\"\"\n    \"add all the doubles in arr into a double named sum, neglect the item if the item in arr is not a double, display sum\"\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 56, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student53", "submitted_text": "loop through each list in arr and then loop again for each element and if the element is an integer or float add them to a new list and return the sum of that new list.  ", "prompt": "def add_up(arr):\n    \"\"\"\n    loop through each list in arr and then loop again for each element and if the element is an integer or float add them to a new list and display the sum of that new list.  \n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 58, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student53", "submitted_text": "loop through each list in arr and then loop again for each elemtn and if the element is an integer or float add them and return the sum. ", "prompt": "def add_up(arr):\n    \"\"\"\n    loop through each list in arr and then loop again for each elemtn and if the element is an integer or float add them and display the sum. \n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 59, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that runs through an array of lists. The function should get all numbers from the list and returns the sum of all numbers. The function should avoid strings if they are elements in the list. ", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that runs through an array of lists. The function should get all numbers from the list and displays the sum of all numbers. The function should avoid strings if they are elements in the list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 65, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that gets a list. The function runs through a list of lists. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should avoid strings if they are elements in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that gets a list. The function runs through a list of lists. If the element is an integer or float, sum all the elements up. The function displays the sum. The function should avoid strings if they are elements in the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 69, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student58", "submitted_text": "Return the sum of the integers in the list. Ignore the string.", "prompt": "def add_up(arr):\n    \"\"\"\n    Display the sum of the integers in the list. Ignore the string.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 77, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student27", "submitted_text": "The input will be a list of strings. Return 0 if the list is empty. Otherwise, convert the strings into integers, then subtract the sum of all the integers with odd positions from the sum of all the integers with even positions. ", "prompt": "def subtract_add(lst):\n    \"\"\"\n    The input will be a list of strings. Display 0 if the list is empty. Otherwise, convert the strings into integers, then subtract the sum of all the integers with odd positions from the sum of all the integers with even positions. \n    \"\"\"\n    ", "subset": "last_success", "original": "Return"}
{"__index_level_0__": 78, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student29", "submitted_text": "For each list entry, convert the input to an integer. Multiply list entries that correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    For each list entry, convert the input to an integer. Multiply list entries that correspond to an even index by -1. Then add all of the list entries together and display their sum. If the list is empty, display 0.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 80, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student29", "submitted_text": "For each list entry, convert the input to an integer. Multiply list entries that don't correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    For each list entry, convert the input to an integer. Multiply list entries that don't correspond to an even index by -1. Then add all of the list entries together and display their sum. If the list is empty, display 0.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 84, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student32", "submitted_text": "Turns all the elements in lst into integers, then finds the sum of all the elements in the list excluding the last one. Then it subtracts the last element from the sum.\n\nIf the list is empty, it returns 0", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Turns all the elements in lst into integers, then finds the sum of all the elements in the list excluding the last one. Then it subtracts the last element from the sum.\n\nIf the list is empty, it displays 0\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 85, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student34", "submitted_text": "Find the sum of the items in the list with positions that produce an integer when divided by two, then find the sum of the items in the list with positions that do not produce an integer when divided by two. Then take the first sum and subtract the second sum from it. If there are no items in the list output 0", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Find the sum of the items in the list with positions that produce an integer when divided by two, then find the sum of the items in the list with positions that do not produce an integer when divided by two. Then take the first sum and subtract the second sum from it. If there are no items in the list display 0\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 86, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student49", "submitted_text": "Given a list of integers, take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Given a list of integers, take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty display 0. Otherwise display the expected output\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 87, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student49", "submitted_text": "Given a list of strings, type cast to integers and then take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Given a list of strings, type cast to integers and then take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty display 0. Otherwise display the expected output\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 89, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student62", "submitted_text": "alternate between subtracting and adding each element in list, return total", "prompt": "def subtract_add(lst):\n    \"\"\"\n    alternate between subtracting and adding each element in list, display total\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 100, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student66", "submitted_text": "Change the first two items into integers Subtract the second item in the array list from the first item. change the third and forth items into integers then subtract the forth item from the third item then add the two sums. if there are just two items in list change those two items into integers subtract the second one from the first one and return the product. if there are no items then return zero", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Change the first two items into integers Subtract the second items in the array list from the first item. change the third and forth items into integers then subtract the forth item from the third item then add the two sums. if there are just two items in list change those two items into integers subtract the second one from the first one and display the product. if there are no items then display zero\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 103, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student67", "submitted_text": "Converts all items to integer. Subtracts the second number from the first one, stores that value. Then adds that value to the next number, etc. Returns the final value.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Converts all items to integer. Subtracts the second number from the first one, stores that value. Then adds that value to the next number, etc. Displays the final value.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Returns"}
{"__index_level_0__": 104, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student68", "submitted_text": "given an array of characters containing integers, convert the characters into integers. Starting from the front of the array, subtract the first two numbers and store that in a count variable. then add the next number to the count. alternate between subtracting and adding until you get to the end of the array. return the count\n", "prompt": "def subtract_add(lst):\n    \"\"\"\n    given an array of characters containing integers, convert the characters into integers. Starting from the front of the array, subtract the first two numbers and store that in a count variable. then add the next number to the count. alternate between subtracting and adding until you get to the end of the array. display the count\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 107, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student68", "submitted_text": "Given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count. If the given array is empty, return 0. \n", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. display the count. If the given array is empty, display 0. \n\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 112, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student70", "submitted_text": "Create a variable for the result. Treat all elements as integers. If the list contains 0 elements, return 0. If the list contains 1 element, return that element. If the list contains 2 or more elements: subtract the second element from the first and save the result, then add the third element to that result, and continue on alternating subtraction and addition until the end of the list.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Create a variable for the result. Treat all elements as integers. If the list contains 0 elements, display 0. If the list contains 1 element, display that element. If the list contains 2 or more elements: subtract the second element from the first and save the result, then add the third element to that result, and continue on alternating subtraction and addition until the end of the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 122, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.", "prompt": "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. display the answer string.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 139, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student10", "submitted_text": "User inputs a list of integers from 0-25. Function converts integers into letters by matching the number with the corresponding letter of the alphabet. Function would return a list of letters. When the user inputs -1, function should end current string in list and start a new string. ", "prompt": "def convert(lst):\n    \"\"\"\n    User inputs a list of integers from 0-25. Function converts integers into letters by matching the number with the corresponding letter of the alphabet. Function would display a list of letters. When the user inputs -1, function should end current string in list and start a new string. \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 141, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student10", "submitted_text": "User inputs a list of numbers ranging from -1 to 25, and function outputs a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current string in list and start a new string. Function should return a list of the letters.", "prompt": "def convert(lst):\n    \"\"\"\n    User inputs a list of numbers ranging from -1 to 25, and function displays a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current string in list and start a new string. Function should display a list of the letters.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 174, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student18", "submitted_text": "Assign a number from 0~25 to each alphabet, and create a list of string of alphabetical letters based on their assigned numbers in the lst. When there is -1 in the lst, create a new string and add it to the list. Return a list of created strings.", "prompt": "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a list of string of alphabetical letters based on their assigned numbers in the lst. When there is -1 in the lst, create a new string and add it to the list. Display a list of created strings.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 177, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student18", "submitted_text": "Assign a number from 0~25 to each alphabet, and create a list. Based on their assigned numbers in the lst, create string of capitalized alphabetical letters and add to the list. When there is -1 in the lst, create a new string from the next index and add it to the list. Return a list of created strings.", "prompt": "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a list. Based on their assigned numbers in the lst, create string of capitalized alphabetical letters and add to the list. When there is -1 in the lst, create a new string from the next index and add it to the list. Display a list of created strings.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 178, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string only when there is a -1 in the input.", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will display a list of strings that correspond to the given numbers in the input set, creating a new string only when there is a -1 in the input.\n    \"\"\"\n    ", "subset": "first_failure", "original": "produce"}
{"__index_level_0__": 187, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will return a list of Strings parsed from the given numbers, with each -1 in the input signifying a separate string. ", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will display a list of Strings parsed from the given numbers, with each -1 in the input signifying a separate string. \n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 197, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student30", "submitted_text": "Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. \n\nReturn strings of letters with no spaces. A -1 in lst indicates the start of a new string. Separate strings with commas. Enclose the new list with brackets.", "prompt": "def convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. \n\nDisplay strings of letters with no spaces. A -1 in lst indicates the start of a new string. Separate strings with commas. Enclose the new list with brackets.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 198, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student41", "submitted_text": "Given a list, returns a list with the letter corresponding to each number in the inputted list. If there is a negative one, the corresponding letters should be printed as a separate item in the list. Otherwise, the corresponding letters should be combined as one string in the list.", "prompt": "def convert(lst):\n    \"\"\"\n    Given a list, displays a list with the letter corresponding to each number in the inputted list. If there is a negative one, the corresponding letters should be displayed as a separate item in the list. Otherwise, the corresponding letters should be combined as one string in the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "printed"}
{"__index_level_0__": 201, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student41", "submitted_text": "Given a list, returns a list with letters from the alphabet that correspond to the index in the inputted list, starting from zero. Letters in the returned list should be capitalized. Until a negative one is in the list, letters should be combined as one string. When a negative one is reached this combination of letters can be inserted into the list. A negative one indicates a new item in the list.", "prompt": "def convert(lst):\n    \"\"\"\n    Given a list, displays a list with letters from the alphabet that correspond to the index in the inputted list, starting from zero. Letters in the returned list should be capitalized. Until a negative one is in the list, letters should be combined as one string. When a negative one is reached this combination of letters can be inserted into the list. A negative one indicates a new item in the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 202, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student48", "submitted_text": "assign each letter in the alphabet a number 0 through 25 in order. Let -1 indicate the start of a new string. print the letters corresponding to the numbers in a list, creating new strings at -1.", "prompt": "def convert(lst):\n    \"\"\"\n    assign each letter in the alphabet a number 0 through 25 in order. Let -1 indicate the start of a new string. display the letters corresponding to the numbers in a list, creating new strings at -1.\n    \"\"\"\n    ", "subset": "first_failure", "original": "print"}
{"__index_level_0__": 205, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student51", "submitted_text": "Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. When -1 appears make a new string and add the following characters to it. return a list of strings.", "prompt": "def convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. When -1 appears make a new string and add the following characters to it. display a list of strings.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 229, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student30", "submitted_text": "Use Python random module to return elements of lst in randomized order.\n", "prompt": "def order_strings(lst):\n    \"\"\"\n    Use Python random module to display elements of lst in randomized order.\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 230, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student41", "submitted_text": "Takes a list. Randomly rearranges the values in the list. Returns the list", "prompt": "def order_strings(lst):\n    \"\"\"\n    Takes a list. Randomly rearranges the values in the list. Displays the list\n    \"\"\"\n    ", "subset": "first_failure", "original": "Returns"}
{"__index_level_0__": 241, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student38", "submitted_text": "If position in lst is string, append num to string. If position in lst is integer, add num to integer. Return the new lst. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    If position in lst is string, append num to string. If position in lst is integer, add num to integer. Display the new lst. \n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 244, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student38", "submitted_text": "If position in lst is string, append num to string. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Return the new lst. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    If position in lst is string, append num to string. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Display the new lst. \n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 245, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student42", "submitted_text": "given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally", "prompt": "def add_int(lst, num):\n    \"\"\"\n    given an inputed list, display a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 246, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student42", "submitted_text": "given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally. if an element of the initial list is neither, leave it alone and add it to the outputted list regardless", "prompt": "def add_int(lst, num):\n    \"\"\"\n    given an inputed list, display a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally. if an element of the initial list is neither, leave it alone and add it to the outputted list regardless\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 247, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student43", "submitted_text": "Create a list A. If an element in lst is a string, then append num to the end of the element, add it to A. If an element in lst is a number, then add num to then end of the element, add it to A. If an element in lst is a list, then return the element, add it to A.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Create a list A. If an element in lst is a string, then append num to the end of the element, add it to A. If an element in lst is a number, then add num to then end of the element, add it to A. If an element in lst is a list, then display the element, add it to A.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 248, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student54", "submitted_text": "Return a new list with the integer added at each index of the old list.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Display a new list with the integer added at each index of the old list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 252, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student54", "submitted_text": "Return a new list with the integer added at each index of the old list. If it is a string, append the integer on to the end of the string to create a new string. If it is an integer, concatenate.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Display a new list with the integer added at each index of the old list. If it is a string, append the integer on to the end of the string to create a new string. If it is an integer, concatenate.\n    \"\"\"\n    ", "subset": "last_success", "original": "Return"}
{"__index_level_0__": 257, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student29", "submitted_text": "If the input number is prime return \"True\". Else, return \"False\"", "prompt": "def check_prime(num):\n    \"\"\"\n    If the input number is prime display \"True\". Else, display \"False\"\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 259, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student29", "submitted_text": "Convert the input to an integer. Then check if the integer is a prime number and return \"True\" if it is prime and \"False\" if it's not", "prompt": "def check_prime(num):\n    \"\"\"\n    Convert the input to an integer. Then check if the integer is a prime number and display \"True\" if it is prime and \"False\" if it's not\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 260, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student32", "submitted_text": "if num is a prime number, return \"True\". if not, return \"False\"", "prompt": "def check_prime(num):\n    \"\"\"\n    if num is a prime number, display \"True\". if not, display \"False\"\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 262, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student32", "submitted_text": "Turns num into int. Return a bool indicating if num is a prime number.", "prompt": "def check_prime(num):\n    \"\"\"\n    Turns num into int. Display a bool indicating if num is a prime number.\n    \"\"\"\n    ", "subset": "last_success", "original": "Return"}
{"__index_level_0__": 264, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student34", "submitted_text": "if num cannot produce an integer when divided by integers other than 1 or itself, return true. If otherwise return false.", "prompt": "def check_prime(num):\n    \"\"\"\n    if num cannot produce an integer when divided by integers other than 1 or itself, display true. If otherwise display false.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 265, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student49", "submitted_text": "given an integer, if the integer is only divisible by itself and 1, return True otherwise return False", "prompt": "def check_prime(num):\n    \"\"\"\n    given an integer, if the integer is only divisible by itself and 1, display True otherwise display False\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 267, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student49", "submitted_text": "typecast num as an integer, if num is only divisible by itself and 1, return True otherwise return False", "prompt": "def check_prime(num):\n    \"\"\"\n    typecast num as an integer, if num is only divisible by itself and 1, display True otherwise display False\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 268, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student56", "submitted_text": "changes the string into an integer and checks if the integers are a prime number, if they are then 'True' is returned, if they are not then 'False' is returned", "prompt": "def check_prime(num):\n    \"\"\"\n    changes the string into an integer and checks if the integers are a prime number, if they are then 'True' is displayed, if they are not then 'False' is displayed\n    \"\"\"\n    ", "subset": "first_success", "original": "returned"}
{"__index_level_0__": 269, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student62", "submitted_text": "change input to integer. if prime number, return True, if not a prime number, return False", "prompt": "def check_prime(num):\n    \"\"\"\n    change input to integer. if prime number, display True, if not a prime number, display False\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 270, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student66", "submitted_text": "if the number is prime return true", "prompt": "def check_prime(num):\n    \"\"\"\n    if the number is prime display true\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 275, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student66", "submitted_text": "change the input into an integer if the number is not divisible buy 4 or 3 return true else return false", "prompt": "def check_prime(num):\n    \"\"\"\n    change the input into an integer if the number is not divisible buy 4 or 3 display true else display false\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 276, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student67", "submitted_text": "Returns 'True' if input is a prime number.", "prompt": "def check_prime(num):\n    \"\"\"\n    Displays 'True' if input is a prime number.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Returns"}
{"__index_level_0__": 277, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student67", "submitted_text": "Converts input into an integer. Returns 'True' if input is a prime number.", "prompt": "def check_prime(num):\n    \"\"\"\n    Converts input into an integer. Displays 'True' if input is a prime number.\n    \"\"\"\n    ", "subset": "last_success", "original": "Returns"}
{"__index_level_0__": 278, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student68", "submitted_text": "given a string, convert into an integer and return true if it's a prime number. if not, return false", "prompt": "def check_prime(num):\n    \"\"\"\n    given a string, convert into an integer and display true if it's a prime number. if not, display false\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 283, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student68", "submitted_text": "given a character, convert the character into a number. return true if that number is a prime number. if not, return false. ", "prompt": "def check_prime(num):\n    \"\"\"\n    given a character, convert the character into a number. display true if that number is a prime number. if not, display false. \n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 284, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student70", "submitted_text": "return whether the input num is prime.", "prompt": "def check_prime(num):\n    \"\"\"\n    display whether the input num is prime.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 288, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student70", "submitted_text": "create a new variable that saves the input num as an integer using int(). return whether this integer is prime.", "prompt": "def check_prime(num):\n    \"\"\"\n    create a new variable that saves the input num as an integer using int(). display whether this integer is prime.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 295, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student0", "submitted_text": "takes in a list of numbers. create a ODD list of odd numbers 1 through 10. returns the list of numbers with numbers in ODD removed.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers. create a ODD list of odd numbers 1 through 10. displays the list of numbers with numbers in ODD removed.\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 307, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student4", "submitted_text": "for values with the int type in the given list, deletes ints that are odd from the list, returns the appended list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    for values with the int type in the given list, deletes ints that are odd from the list, displays the appended list\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 308, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student10", "submitted_text": "Function removes all odd integers from list. Function would keep all values if they have decimal points. Returns list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Function removes all odd integers from list. Function would keep all values if they have decimal points. Displays list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Returns"}
{"__index_level_0__": 310, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student10", "submitted_text": "Function removes all odd integers from list . Returns list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Function removes all odd integers from list . Displays list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Returns"}
{"__index_level_0__": 311, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student17", "submitted_text": "if given 4.3, 4, 5, 2, 7 output 4.3, 4, 2 in a list.\nif given 1.1, 2.2, 3.3 output 1.1, 2.2, 3.3 a list.\nif given 4.3, 4, 5, 2, 7 output a empty list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    if given 4.3, 4, 5, 2, 7 display 4.3, 4, 2 in a list.\nif given 1.1, 2.2, 3.3 display 1.1, 2.2, 3.3 a list.\nif given 4.3, 4, 5, 2, 7 display a empty list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 323, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student18", "submitted_text": "Create a list. Only add either a even number or a decimal to the list from the lst. Then, return the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Create a list. Only add either a even number or a decimal to the list from the lst. Then, display the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 334, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student25", "submitted_text": "This function removes odd integers from the input \"lst\" and returns a list including all of the original numbers except for the odd integers. All floats in the given list remain in the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    This function removes odd integers from the input \"lst\" and displays a list including all of the original numbers except for the odd integers. All floats in the given list remain in the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 335, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student26", "submitted_text": "Remove odd numbers in a list and print the new list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers in a list and display the new list\n    \"\"\"\n    ", "subset": "first_failure", "original": "print"}
{"__index_level_0__": 337, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student26", "submitted_text": "Remove odd numbers in a list ignoring decimals and print the list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers in a list ignoring decimals and display the list\n    \"\"\"\n    ", "subset": "last_failure", "original": "print"}
{"__index_level_0__": 340, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student41", "submitted_text": "For every whole number in the inputted list, if that item is not divisible by two it is removed from the list. It returns the list with the remaining values.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For every whole number in the inputted list, if that item is not divisible by two it is removed from the list. It displays the list with the remaining values.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 343, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student41", "submitted_text": "For every item in the inputted list, if that item is a float it is kept in the list. Otherwise, if that item is then not divisible by two, it is removed from the list. It returns the list with the remaining values.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For every item in the inputted list, if that item is a float it is kept in the list. Otherwise, if that item is then not divisible by two, it is removed from the list. It displays the list with the remaining values.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 346, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student51", "submitted_text": "For each object in the list, remove it if it is an odd integer. Return the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For each object in the list, remove it if it is an odd integer. Display the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 349, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student51", "submitted_text": "For each object in the list, if it is and integer then check if it is odd and if it is odd then remove it. Return the list.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    For each object in the list, if it is and integer then check if it is odd and if it is odd then remove it. Display the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 355, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student36", "submitted_text": "Using the objects in dt, return their associated keys in dt", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Using the objects in dt, display their associated keys in dt\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 357, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student36", "submitted_text": "using dt as a reference, return the associated objects of the objects in lst. If the object does not appear in dt return none", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    using dt as a reference, display the associated objects of the objects in lst. If the object does not appear in dt display none\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 358, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student38", "submitted_text": "If position in lst is a key in the dictionary, add the value to new list. If not, add None to new list. Return the new list. ", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    If position in lst is a key in the dictionary, add the value to new list. If not, add None to new list. Display the new list. \n    \"\"\"\n    ", "subset": "first_success", "original": "Return"}
{"__index_level_0__": 359, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student42", "submitted_text": "given a dictionary and a list, return a new list where each element in the new list is what the elements of the original list map to in the dictionary. ", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a list, display a new list where each element in the new list is what the elements of the original list map to in the dictionary. \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 360, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student42", "submitted_text": "given a dictionary and a list, return a new list where each element in the new list is what the elements of the original list map to in the dictionary. if an element of the list doesnt appear as a key in the dictionary, it should show up in the output list as None", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a list, display a new list where each element in the new list is what the elements of the original list map to in the dictionary. if an element of the list doesnt appear as a key in the dictionary, it should show up in the output list as None\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 361, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student43", "submitted_text": "Return the value stored in the key in dt corresponding to the keys in lst. If you can find it, then return the value, if not, then return None.\n", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Display the value stored in the key in dt corresponding to the keys in lst. If you can find it, then display the value, if not, then display None.\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 362, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student43", "submitted_text": "Loop through each element in lst and return the value stored in it in dt. If you can't find the value, return None. \n", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Loop through each element in lst and display the value stored in it in dt. If you can't find the value, display None. \n\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 363, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student54", "submitted_text": "Find the key in the list. If found, return the value of that key. If not found, return None.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Find the key in the list. If found, display the value of that key. If not found, display None.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 365, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student54", "submitted_text": "Find the keys in the list. If found, return the value of that key in a new list. If not found, return None in the new list.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Find the keys in the list. If found, display the value of that key in a new list. If not found, display None in the new list.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 366, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student57", "submitted_text": "given a dictionary and a list, if key exists in dictionary, return all values in key value pair in a list. if key does not exist, return None", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a list, if key exists in dictionary, display all values in key value pair in a list. if key does not exist, display None\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 367, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student57", "submitted_text": "given a dictionary and a list, if key exists in dictionary, return values as well as None (if key does not exist) in a list. ", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a list, if key exists in dictionary, display values as well as None (if key does not exist) in a list. \n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 370, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student12", "submitted_text": "Return true if the list contains the uppercase letters Q or U, else return false", "prompt": "def has_qu(lst):\n    \"\"\"\n    Display true if the list contains the uppercase letters Q or U, else display false\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 371, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student19", "submitted_text": "Takes an input list of single, capitalized letters. If any item in the list is either Q or U, it returns True. Otherwise, it returns False. ", "prompt": "def has_qu(lst):\n    \"\"\"\n    Takes an input list of single, capitalized letters. If any item in the list is either Q or U, it displays True. Otherwise, it displays False. \n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 373, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student36", "submitted_text": "Return true if the list contains 'Q' or 'U', otherwise return false", "prompt": "def has_qu(lst):\n    \"\"\"\n    Display true if the list contains 'Q' or 'U', otherwise display false\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 374, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student38", "submitted_text": "If a string in lst has \"Q\", return True. If not, return False. ", "prompt": "def has_qu(lst):\n    \"\"\"\n    If a string in lst has \"Q\", display True. If not, display False. \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 375, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student38", "submitted_text": "If a string in lst has \"Q\" or \"U\", return True. If not, return False. ", "prompt": "def has_qu(lst):\n    \"\"\"\n    If a string in lst has \"Q\" or \"U\", display True. If not, display False. \n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 376, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student42", "submitted_text": "Check if a list of single letters contains the letters \"Q\" or \"U\". if it does, return true. if not, return false", "prompt": "def has_qu(lst):\n    \"\"\"\n    Check if a list of single letters contains the letters \"Q\" or \"U\". if it does, display true. if not, display false\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 377, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student43", "submitted_text": "Check if lst contains Q or U, return True if this is true. If not, return False.", "prompt": "def has_qu(lst):\n    \"\"\"\n    Check if lst contains Q or U, display True if this is true. If not, display False.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 378, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student54", "submitted_text": "If the list has Q or U, return True.", "prompt": "def has_qu(lst):\n    \"\"\"\n    If the list has Q or U, display True.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 379, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student57", "submitted_text": "return true if list contains either character \"Q\" or \"U\". otherwise return false ", "prompt": "def has_qu(lst):\n    \"\"\"\n    display true if list contains either character \"Q\" or \"U\". otherwise display false \n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 380, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student77", "submitted_text": "Given a list of letters, return True if the list has a Q or U, and False if the list does not.", "prompt": "def has_qu(lst):\n    \"\"\"\n    Given a list of letters, display True if the list has a Q or U, and False if the list does not.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 384, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student6", "submitted_text": "Input: dictionary with names of planets a corresponding numerical key. Output adds the keys of \"Venus\" and Mercury\" together. If Venus and/or Mercury are not in the dictionary, return 0 as the output ", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Input: dictionary with names of planets a corresponding numerical key. Output adds the keys of \"Venus\" and Mercury\" together. If Venus and/or Mercury are not in the dictionary, display 0 as the output \n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 392, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student14", "submitted_text": "if 'Sun' is in planets, output is 15. else, output 0", "prompt": "def planets_mass(planets):\n    \"\"\"\n    if 'Sun' is in planets, output is 15. else, display 0\n    \"\"\"\n    ", "subset": "last_success", "original": "output"}
{"__index_level_0__": 393, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student15", "submitted_text": "Add the values matched to 'Venus' and 'Mercury' if 'Venus' and 'Mercury' are in the dictionary. If not, return 0.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Add the values matched to 'Venus' and 'Mercury' if 'Venus' and 'Mercury' are in the dictionary. If not, display 0.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 394, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student24", "submitted_text": "For each item in dictionary, add the values from that name if the name is in the dictionary for planets. Return the sum of those values.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    For each item in dictionary, add the values from that name if the name is in the dictionary for planets. Display the sum of those values.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 396, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student24", "submitted_text": "For each item in the dictionary, add the values from that name in planets if the name is in a different dictionary and and in planets. Return the sum of those values.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    For each item in the dictionary, add the values from that name in planets if the name is in a different dictionary and and in planets. Display the sum of those values.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 397, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student28", "submitted_text": "Write a code that takes one parameter, planets. Planets consists of planets and their mass. The code should only return the sum of planets less than or equal to 15.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Write a code that takes one parameter, planets. Planets consists of planets and their mass. The code should only display the sum of planets less than or equal to 15.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 398, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student31", "submitted_text": "Takes a dictionary where the keys are strings, and the entries are integers. then, sums all of the entries whose strings are names of planets, and returns this sum. ", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Takes a dictionary where the keys are strings, and the entries are integers. then, sums all of the entries whose strings are names of planets, and displays this sum. \n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 400, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student45", "submitted_text": "Takes a dictionary which we will call planets. If the dictionary key is 'Venus' or 'Mercury', add the value at that key to the sum. Return the sum.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Takes a dictionary which we will call planets. If the dictionary key is 'Venus' or 'Mercury', add the value at that key to the sum. Display the sum.\n    \"\"\"\n    ", "subset": "first_success", "original": "Return"}
{"__index_level_0__": 401, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student46", "submitted_text": "The function will take in a dictionary where the keys are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    The function will take in a dictionary where the keys are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and display that.\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 403, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student46", "submitted_text": "The function will take in a dictionary where the keys are strings and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    The function will take in a dictionary where the keys are strings and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and display that.\n    \"\"\"\n    ", "subset": "last_success", "original": "output"}
{"__index_level_0__": 409, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student53", "submitted_text": "loop through planets and if the element is == 'Venus' or 'Mercury' add value to a new list and return the sum of the new list. ", "prompt": "def planets_mass(planets):\n    \"\"\"\n    loop through planets and if the element is == 'Venus' or 'Mercury' add value to a new list and display the sum of the new list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 410, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student53", "submitted_text": "loop through planets and if the key == 'Venus' or 'Mercury' add the values together and return this value", "prompt": "def planets_mass(planets):\n    \"\"\"\n    loop through planets and if the key == 'Venus' or 'Mercury' add the values together and display this value\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 411, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student55", "submitted_text": "Write a function that gets a dictionary of planets and their masses. All the planets masses in a dictionary using the name of the planet as the key. The function should return the sum of all the planets' masses.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Write a function that gets a dictionary of planets and their masses. All the planets masses in a dictionary using the name of the planet as the key. The function should display the sum of all the planets' masses.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 415, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student55", "submitted_text": "Write a function that gets a dictionary. The key of the dictionary is the name of the planet and the value is the mass. The function should sum up the masses of only the planets and returns the total. The sun and pluto are not planets.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Write a function that gets a dictionary. The key of the dictionary is the name of the planet and the value is the mass. The function should sum up the masses of only the planets and displays the total. The sun and pluto are not planets.\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 416, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student58", "submitted_text": "return the sum of the integers. If the integer corresponds to strings 'Pluto' or 'Sun', ignore the integer", "prompt": "def planets_mass(planets):\n    \"\"\"\n    display the sum of the integers. If the integer corresponds to strings 'Pluto' or 'Sun', ignore the integer\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 420, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student58", "submitted_text": "If planets = 'Sun' or 'Pluto', return 0. Else add the integer to x. Return x", "prompt": "def planets_mass(planets):\n    \"\"\"\n    If planets = 'Sun' or 'Pluto', display 0. Else add the integer to x. Display x\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 426, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student2", "submitted_text": "This function prints an output containing all the strings that appear", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    This function displays an output containing all the strings that appear\n    \"\"\"\n    ", "subset": "last_failure", "original": "prints"}
{"__index_level_0__": 427, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student5", "submitted_text": "the function student_grades will take the input of students and grades. Students will have a name and then a score. Grades will have a number and a range of letter grades. The function should return the name of a student with the range of letter grade they got based on their score. ", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    the function student_grades will take the input of students and grades. Students will have a name and then a score. Grades will have a number and a range of letter grades. The function should display the name of a student with the range of letter grade they got based on their score. \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 429, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student5", "submitted_text": "the function student_grades will take two inputs: students and grades. Students will have a name and then a score. Grades will have a number corresponding to the students scores and a range of letter grades tied to the number. The function should return the name of a student with the range of letter grade they got based on their score. ", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    the function student_grades will take two inputs: students and grades. Students will have a name and then a score. Grades will have a number corresponding to the students scores and a range of letter grades tied to the number. The function should display the name of a student with the range of letter grade they got based on their score. \n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 430, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student8", "submitted_text": "The function returns a dictionary whose keys are keys from the first given dictionary and whose corresponding values are obtained by taking the values from the first given dictionary, matching it to a key in the second given dictionary, and taking the value at that corresponding key.\n", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    The function displays a dictionary whose keys are keys from the first given dictionary and whose corresponding values are obtained by taking the values from the first given dictionary, matching it to a key in the second given dictionary, and taking the value at that corresponding key.\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 435, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student16", "submitted_text": "return the grades a student receives in form of a dictionary based on the dictionary of scores they each received, and the letter grades the scores correspond to.", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    display the grades a student receives in form of a dictionary based on the dictionary of scores they each received, and the letter grades the scores correspond to.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 436, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student16", "submitted_text": "return the grades a student receives in form of a dictionary based on the dictionary of scores they each received, and the letter grades the scores correspond to. If the score they received exists in the second dictionary, use the letter grade list from the second dictionary for the student in the output", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    display the grades a student receives in form of a dictionary based on the dictionary of scores they each received, and the letter grades the scores correspond to. If the score they received exists in the second dictionary, use the letter grade list from the second dictionary for the student in the output\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 437, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student22", "submitted_text": "takes in 2 dictionaries and uses the first one's values for the second one's key, and outputs a dictionary matching those up", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    takes in 2 dictionaries and uses the first one's values for the second one's key, and displays a dictionary matching those up\n    \"\"\"\n    ", "subset": "first_success", "original": "outputs"}
{"__index_level_0__": 439, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student61", "submitted_text": "Function takes in names of students with a number and based on that number, the grades are returned in a letter format", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Function takes in names of students with a number and based on that number, the grades are displayed in a letter format\n    \"\"\"\n    ", "subset": "first_failure", "original": "returned"}
{"__index_level_0__": 440, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student61", "submitted_text": "Function takes in names of students with a number and based on that number the grades are returned from the brackets", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Function takes in names of students with a number and based on that number the grades are displayed from the brackets\n    \"\"\"\n    ", "subset": "last_failure", "original": "returned"}
{"__index_level_0__": 441, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student72", "submitted_text": "Return a dictionary with the key being the string from the first dictionary in the input. Go through the next dictionary in the input and find what the integer in the first dictionary in the input corresopnds to. Return that as what corresponds to the string in the ouput.", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Display a dictionary with the key being the string from the first dictionary in the input. Go through the next dictionary in the input and find what the integer in the first dictionary in the input corresopnds to. Display that as what corresponds to the string in the ouput.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 453, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student33", "submitted_text": "The function takes in some number of lists that each consist of an integer and another list of strings \"names\". For each list, the function creates a dictionary entry with each string in \"names\" and the integer in that list. The function returns the dictionary. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function takes in some number of lists that each consist of an integer and another list of strings \"names\". For each list, the function creates a dictionary entry with each string in \"names\" and the integer in that list. The function displays the dictionary. \n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 461, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student50", "submitted_text": "Input is an array containing a number and names. Return a dictionary with a name corresponding to the number. If a name in the list of names appears next to more than one number, add the two numbers together when returning a number.", "prompt": "def times_with(meetings):\n    \"\"\"\n    Input is an array containing a number and names. Display a dictionary with a name corresponding to the number. If a name in the list of names appears next to more than one number, add the two numbers together when displaying a number.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returning"}
{"__index_level_0__": 464, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student50", "submitted_text": "Input contains lists of names with numbers besides them. Return each name in the list of names with the number as a dictionary. If a name appears in more than one list of names, add the number besides the list together and return that number in the dictionary.", "prompt": "def times_with(meetings):\n    \"\"\"\n    Input contains lists of names with numbers besides them. Display each name in the list of names with the number as a dictionary. If a name appears in more than one list of names, add the number besides the list together and display that number in the dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 467, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student59", "submitted_text": "takes a list of lists as an input. for each list inside the inputted list, there is a value and a list of names. returns a dictionary of the names with the value of the value in the list they came from", "prompt": "def times_with(meetings):\n    \"\"\"\n    takes a list of lists as an input. for each list inside the inputted list, there is a value and a list of names. displays a dictionary of the names with the value of the value in the list they came from\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 469, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student60", "submitted_text": "This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. The function then would return a dictionary containing the total value assigned to every string. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would return { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\n", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. The function then would display a dictionary containing the total value assigned to every string. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would display { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\n\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 470, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student63", "submitted_text": "The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has one of the names as the key, and the value is the sum of the numbers that are the first entry of each list that the name is found in. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function takes in a list of lists and displays a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has one of the names as the key, and the value is the sum of the numbers that are the first entry of each list that the name is found in. \n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 471, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student63", "submitted_text": "The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has a name from the name lists as the key, and the value is the sum of the numbers that are the first entry of each list that the list of names that has the name is found in. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function takes in a list of lists and displays a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has a name from the name lists as the key, and the value is the sum of the numbers that are the first entry of each list that the list of names that has the name is found in. \n    \"\"\"\n    ", "subset": "last_failure", "original": "outputs"}
{"__index_level_0__": 483, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student75", "submitted_text": "def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1:val0, increase val1 + 1", "prompt": "def times_with(meetings):\n    \"\"\"\n    def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and displays and output of val1:val0, increase val1 + 1\n    \"\"\"\n    ", "subset": "last_success", "original": "produces"}
{"__index_level_0__": 492, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student5", "submitted_text": "The function meeps_morps will take a list as an input and return the number of times \"Meep\" appears and the number that \"Morp\" appears in a list", "prompt": "def meeps_morps(items):\n    \"\"\"\n    The function meeps_morps will take a list as an input and display the number of times \"Meep\" appears and the number that \"Morp\" appears in a list\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 493, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student5", "submitted_text": "The function meeps_morps will take a list as an input and return a list with the number of times \"Meep\" appears and the number that \"Morp\" appears.", "prompt": "def meeps_morps(items):\n    \"\"\"\n    The function meeps_morps will take a list as an input and display a list with the number of times \"Meep\" appears and the number that \"Morp\" appears.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 494, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student8", "submitted_text": "Returns a list where the first entry contains the number of times \"Meep\" appears in the given array and the second entry contains the number of times \"Morp\" appears in the given array.", "prompt": "def meeps_morps(items):\n    \"\"\"\n    Displays a list where the first entry contains the number of times \"Meep\" appears in the given array and the second entry contains the number of times \"Morp\" appears in the given array.\n    \"\"\"\n    ", "subset": "first_success", "original": "Returns"}
{"__index_level_0__": 496, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student13", "submitted_text": "Based on the list of strings inputted, the function will identify the number of strings that say 'Meep' and 'Morp' and return a list of the number of 'Meep' and the number of 'Morp' strings.", "prompt": "def meeps_morps(items):\n    \"\"\"\n    Based on the list of strings inputted, the function will identify the number of strings that say 'Meep' and 'Morp' and display a list of the number of 'Meep' and the number of 'Morp' strings.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 500, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student22", "submitted_text": "take in a list of strings and output a count of how many times the word 'Meep' and 'Morp' occur", "prompt": "def meeps_morps(items):\n    \"\"\"\n    take in a list of strings and display a count of how many times the word 'Meep' and 'Morp' occur\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 502, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student22", "submitted_text": "take in a list of strings and output a list count of how many times the word 'Meep' and 'Morp' occur", "prompt": "def meeps_morps(items):\n    \"\"\"\n    take in a list of strings and display a list count of how many times the word 'Meep' and 'Morp' occur\n    \"\"\"\n    ", "subset": "last_success", "original": "output"}
{"__index_level_0__": 517, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student19", "submitted_text": "Takes an input string which is the first three letters of any day of the week, and an input number 0-23. If the input string is 'Sat' or 'Sun', it returns 'weekend'. Otherwise, if the hour is between 0 and 8, it returns 'sleeping'. If the hour is 9-23 and the string is not 'Sat' or 'Sun', it returns 'weekday'.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    Takes an input string which is the first three letters of any day of the week, and an input number 0-23. If the input string is 'Sat' or 'Sun', it displays 'weekend'. Otherwise, if the hour is between 0 and 8, it displays 'sleeping'. If the hour is 9-23 and the string is not 'Sat' or 'Sun', it displays 'weekday'.\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 518, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student20", "submitted_text": "If hour is between 0 and 8 inclusive, return sleeping. If day is 'Sat' or 'Sun' return 'weekend'. Otherwise return 'weekday'.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    If hour is between 0 and 8 inclusive, display sleeping. If day is 'Sat' or 'Sun' display 'weekend'. Otherwise display 'weekday'.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 519, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student36", "submitted_text": "Accept the day of the week, and the time of day and if the time is between 9-23 return weekend for Sat and Sun and weekday for any other. If the time is between 0-8 return sleeping", "prompt": "def print_time(day,hour):\n    \"\"\"\n    Accept the day of the week, and the time of day and if the time is between 9-23 display weekend for Sat and Sun and weekday for any other. If the time is between 0-8 display sleeping\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 521, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student36", "submitted_text": "Return weekend for Sat and Sun or weekday for any other.  If the time is between 0-9 return sleeping", "prompt": "def print_time(day,hour):\n    \"\"\"\n    Display weekend for Sat and Sun or weekday for any other.  If the time is between 0-9 display sleeping\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 522, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student38", "submitted_text": "Return 'weekend' if day is 'Sat' or 'Sun' and 'weekday' if not. If hour is from 0 to 8, return 'sleeping'. ", "prompt": "def print_time(day,hour):\n    \"\"\"\n    Display 'weekend' if day is 'Sat' or 'Sun' and 'weekday' if not. If hour is from 0 to 8, display 'sleeping'. \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 523, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student38", "submitted_text": "If hour is from 0 to 8, return 'sleeping'. Return 'weekend' if day is 'Sat' or 'Sun' and 'weekday' if not. ", "prompt": "def print_time(day,hour):\n    \"\"\"\n    If hour is from 0 to 8, display 'sleeping'. Display 'weekend' if day is 'Sat' or 'Sun' and 'weekday' if not. \n    \"\"\"\n    ", "subset": "last_success", "original": "Return"}
{"__index_level_0__": 524, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student42", "submitted_text": "take in a day and an hour. if the hour is between 0 and 8, output the string \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, output the string \"weekend\". else, output \"weekday\". ", "prompt": "def print_time(day,hour):\n    \"\"\"\n    take in a day and an hour. if the hour is between 0 and 8, display the string \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, display the string \"weekend\". else, display \"weekday\". \n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 526, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student42", "submitted_text": "take in a day and an hour. if the hour is less than or equal to 8, return the string \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, return the string \"weekend\". else, return the string \"weekday\". ", "prompt": "def print_time(day,hour):\n    \"\"\"\n    take in a day and an hour. if the hour is less than or equal to 8, display the string \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, display the string \"weekend\". else, display the string \"weekday\". \n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 527, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student43", "submitted_text": "First check the first component of the input, if it is Sat or if it is Sun, then return weekend. If not true, then check the second component of the input, if the it is in the range from 0 to 8, including 0 and 8, then return sleeping. If not true, then return weekday. ", "prompt": "def print_time(day,hour):\n    \"\"\"\n    First check the first component of the input, if it is Sat or if it is Sun, then display weekend. If not true, then check the second component of the input, if the it is in the range from 0 to 8, including 0 and 8, then display sleeping. If not true, then display weekday. \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 528, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student43", "submitted_text": "First check the first component of the input, if it is Sat or if it is Sun, then return weekend. If not true, then check the second component of the input, if the it is in the range from 0 to 8, including 0 and 8, then return sleeping. If not true, then return weekday. ", "prompt": "def print_time(day,hour):\n    \"\"\"\n    First check the first component of the input, if it is Sat or if it is Sun, then display weekend. If not true, then check the second component of the input, if the it is in the range from 0 to 8, including 0 and 8, then display sleeping. If not true, then display weekday. \n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 529, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student54", "submitted_text": "If sat or sun, print weekend. If Mon-Fri, print weekday. If hours 0-8, print sleeping.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    If sat or sun, display weekend. If Mon-Fri, display weekday. If hours 0-8, display sleeping.\n    \"\"\"\n    ", "subset": "first_failure", "original": "print"}
{"__index_level_0__": 533, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student54", "submitted_text": "If hours 0-8, or equal to 8, return sleeping. If Sat or Sun, return weekend. If Mon-Fri, return weekday. ", "prompt": "def print_time(day,hour):\n    \"\"\"\n    If hours 0-8, or equal to 8, display sleeping. If Sat or Sun, display weekend. If Mon-Fri, display weekday. \n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 534, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student57", "submitted_text": "given a string and an integer, if given string is either \"Sat\" or \"Sun\", return \"weekend\". if string is a weekday (i.e. \"Mon\" or \"Tue\"), take into account the integer. if integer is from 9-23, return \"weekday\". if integer is from 0-8, return \"sleeping\". if integer is more than 24, return an error statement stating there are only 24 hours in a day where midnight starts at 0.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    given a string and an integer, if given string is either \"Sat\" or \"Sun\", display \"weekend\". if string is a weekday (i.e. \"Mon\" or \"Tue\"), take into account the integer. if integer is from 9-23, display \"weekday\". if integer is from 0-8, display \"sleeping\". if integer is more than 24, display an error statement stating there are only 24 hours in a day where midnight starts at 0.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 535, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student57", "submitted_text": "given a string and an integer, if given string is either \"Sat\" or \"Sun\", return \"weekend\". if string is \"Mon\", \"Tue\", \"Wed\", \"Thu\" or \"Fri\", take into account the integer. if integer is from 9-23, return \"weekday\". if integer is from 0-8, return \"sleeping\". if integer is more than 24, return an error statement stating there are only 24 hours in a day where midnight starts at 0.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    given a string and an integer, if given string is either \"Sat\" or \"Sun\", display \"weekend\". if string is \"Mon\", \"Tue\", \"Wed\", \"Thu\" or \"Fri\", take into account the integer. if integer is from 9-23, display \"weekday\". if integer is from 0-8, display \"sleeping\". if integer is more than 24, display an error statement stating there are only 24 hours in a day where midnight starts at 0.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 536, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student77", "submitted_text": "Given two parameters,  the first being the day and the second being a measurement of time, return \"weekend\" if the day is 'Sat' or 'Sun', and return weekday if the day is neither. Return \"sleeping\" if the measurement of time is between '0' and '8', inclusive.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    Given two parameters,  the first being the day and the second being a measurement of time, display \"weekend\" if the day is 'Sat' or 'Sun', and display weekday if the day is neither. Display \"sleeping\" if the measurement of time is between '0' and '8', inclusive.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 552, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student42", "submitted_text": "given a list of strings, and an ending, return a list of strings where each element of the new list is one of the strings from the initial list, but with the designated ending removed and replaces with an \"s\"", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    given a list of strings, and an ending, display a list of strings where each element of the new list is one of the strings from the initial list, but with the designated ending removed and replaces with an \"s\"\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 565, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student23", "submitted_text": "This function takes in a number and adds one if the number is greater than 9. If the number is negative it turns into a positive number. If it is a single-digit number it adds the integer zero to the end of the number and returns an integer. Then the output is returned with the updated number.", "prompt": "def increaseScore(score):\n    \"\"\"\n    This function takes in a number and adds one if the number is greater than 9. If the number is negative it turns into a positive number. If it is a single-digit number it adds the integer zero to the end of the number and displays an integer. Then the output is displayed with the updated number.\n    \"\"\"\n    ", "subset": "last_success", "original": "returned"}
{"__index_level_0__": 566, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student33", "submitted_text": "The function takes an integer as input. If the integer is negative, the function returns it as positive. If the integer only has one digit, the function returns a value of 10. If the integer is positive and two or more digits, the function returns the integer plus one. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function takes an integer as input. If the integer is negative, the function displays it as positive. If the integer only has one digit, the function displays a value of 10. If the integer is positive and two or more digits, the function displays the integer plus one. \n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 567, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student33", "submitted_text": "The function takes an integer as input. If the integer is negative, the function returns the absolute value of the integer. If the integer only has one digit, the function returns a value of 10. If the integer is positive and two or more digits, the function returns the integer plus one. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function takes an integer as input. If the integer is negative, the function displays the absolute value of the integer. If the integer only has one digit, the function displays a value of 10. If the integer is positive and two or more digits, the function displays the integer plus one. \n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 571, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student40", "submitted_text": "if the input is less than 10, the function will return 10. if the input is greater than or equal to 10, the function will add 1 to the input.", "prompt": "def increaseScore(score):\n    \"\"\"\n    if the input is less than 10, the function will display 10. if the input is greater than or equal to 10, the function will add 1 to the input.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 572, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student44", "submitted_text": "If the input is a negative number, return the absolute value. \nIf the input is less than 10, return 10. \nIf the input is greater than or equal to 10, increase the value by 1. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    If the input is a negative number, display the absolute value. \nIf the input is less than 10, display 10. \nIf the input is greater than or equal to 10, increase the value by 1. \n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 575, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student59", "submitted_text": "takes an integer and returns an integer whose one's place digit is one more than before. if the inputted integer is negative, returns the absolute value of the integer", "prompt": "def increaseScore(score):\n    \"\"\"\n    takes an integer and displays an integer whose one's place digit is one more than before. if the inputted integer is negative, displays the absolute value of the integer\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 576, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student59", "submitted_text": "takes an integer as the input. if the inputted integer is negative, returns the absolute value of the integer. if the inputted integer is positive and is greater than 9, returns an integer whose one's place digit is one more than before. for all other case, returns an integer that adds a zero in the one's place", "prompt": "def increaseScore(score):\n    \"\"\"\n    takes an integer as the input. if the inputted integer is negative, displays the absolute value of the integer. if the inputted integer is positive and is greater than 9, displays an integer whose one's place digit is one more than before. for all other case, displays an integer that adds a zero in the one's place\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 577, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student60", "submitted_text": "The function takes in an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number and returns it. Otherwise, the function just returns score + 1. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function takes in an int score as parameter. If the score is negative, it displays a positive number. If the score is a single digit, it adds a 0 at the end of the number and displays it. Otherwise, the function just displays score + 1. \n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 579, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student60", "submitted_text": "The function takes in an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number, casts it back into an int and returns it. Otherwise, the function just returns score + 1. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function takes in an int score as parameter. If the score is negative, it displays a positive number. If the score is a single digit, it adds a 0 at the end of the number, casts it back into an int and displays it. Otherwise, the function just displays score + 1. \n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 580, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student63", "submitted_text": "This function takes in a number and outputs a new one, if the number is less than 10, the new number will simply be 10, and if it is 10 or greater, the new number will be the original number plus 1. The new number is outputted. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    This function takes in a number and displays a new one, if the number is less than 10, the new number will simply be 10, and if it is 10 or greater, the new number will be the original number plus 1. The new number is displayed. \n    \"\"\"\n    ", "subset": "first_success", "original": "outputted"}
{"__index_level_0__": 581, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student64", "submitted_text": "Returns score plus one. If score is less than 10 but greater than zero, returns score multiplied by 10. If score is negative, returns absolute value of score.", "prompt": "def increaseScore(score):\n    \"\"\"\n    Displays score plus one. If score is less than 10 but greater than zero, displays score multiplied by 10. If score is negative, displays absolute value of score.\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 582, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student64", "submitted_text": "Returns score plus one. If score is less than 10 but greater than zero, returns score multiplied by 1. If score is negative, returns absolute value of score.", "prompt": "def increaseScore(score):\n    \"\"\"\n    Displays score plus one. If score is less than 10 but greater than zero, displays score multiplied by 1. If score is negative, displays absolute value of score.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 585, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student75", "submitted_text": "def increaseScore(score): takes input '-10' and outputs its positive integer", "prompt": "def increaseScore(score):\n    \"\"\"\n    def increaseScore(score): takes input '-10' and displays its positive integer\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 586, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student75", "submitted_text": "def increaseScore(score): takes input '-10' and outputs its positive integer\ndef increaseScore(score): inputs '1' and adds 9\ndef increaseScore(score): adds 1 to each input '10', '15', '20'", "prompt": "def increaseScore(score):\n    \"\"\"\n    def increaseScore(score): takes input '-10' and displays its positive integer\ndef increaseScore(score): inputs '1' and adds 9\ndef increaseScore(score): adds 1 to each input '10', '15', '20'\n    \"\"\"\n    ", "subset": "last_success", "original": "outputs"}
{"__index_level_0__": 590, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student1", "submitted_text": "Takes the name of a month and returns the season that the month falls into.", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes the name of a month and displays the season that the month falls into.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 591, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student6", "submitted_text": "Function takes in an inputted month of the year and outputs the season that the month is in ", "prompt": "def getSeason(month):\n    \"\"\"\n    Function takes in an inputted month of the year and displays the season that the month is in \n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 594, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student6", "submitted_text": "Function takes in the name of an inputted month of the year and outputs the season that the month is in. It returns and prints the correct outputted season, with a return statement after each if, else or elif statement", "prompt": "def getSeason(month):\n    \"\"\"\n    Function takes in the name of an inputted month of the year and displays the season that the month is in. It displays the correct outputted season, with a return statement after each if, else or elif statement\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns and prints"}
{"__index_level_0__": 595, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student7", "submitted_text": "Takes an inputted month and returns the season for which the month is found in. The first three months of the year are considered to be winter, the next three months are considered to be spring, the next three months are considered summer, and the last three months are considered fall.\n", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes an inputted month and displays the season for which the month is found in. The first three months of the year are considered to be winter, the next three months are considered to be spring, the next three months are considered summer, and the last three months are considered fall.\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 598, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student7", "submitted_text": "Takes an inputted month and returns the season for which the month is found in. January, February, and March will return \"winter\"; April, May, and June will return \"spring\"; July, August, and September will return \"summer\"; and the rest will return \"fall\".\n", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes an inputted month and displays the season for which the month is found in. January, February, and March will display \"winter\"; April, May, and June will display \"spring\"; July, August, and September will display \"summer\"; and the rest will display \"fall\".\n\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 604, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student9", "submitted_text": "The function determines which season the string belongs to. It makes the first letter of the output lowercase. Instead of returning 'autumn', return 'fall'.", "prompt": "def getSeason(month):\n    \"\"\"\n    The function determines which season the string belongs to. It makes the first letter of the output lowercase. Instead of displaying 'autumn', display 'fall'.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 609, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student15", "submitted_text": "Has a dictionary matching a season to a month. If the inputted month is in the season, returns that season.", "prompt": "def getSeason(month):\n    \"\"\"\n    Has a dictionary matching a season to a month. If the inputted month is in the season, displays that season.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 613, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student15", "submitted_text": "Has a list of all months in order. Index 0 of the list is '0', and the rest of the indexes corresponding to the correct month. Has a dictionary matching a season to a month. \nfor each key, value in the dictionary, if the inputted month is in the list of values, returns the key that is matched with that value.", "prompt": "def getSeason(month):\n    \"\"\"\n    Has a list of all months in order. Index 0 of the list is '0', and the rest of the indexes corresponding to the correct month. Has a dictionary matching a season to a month. \nfor each key, value in the dictionary, if the inputted month is in the list of values, displays the key that is matched with that value.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 614, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student24", "submitted_text": "For the given month, return the season that occurs during that month", "prompt": "def getSeason(month):\n    \"\"\"\n    For the given month, display the season that occurs during that month\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 616, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student24", "submitted_text": "If the number of a month is in the list, return the season for that month", "prompt": "def getSeason(month):\n    \"\"\"\n    If the number of a month is in the list, display the season for that month\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 617, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student28", "submitted_text": "This function takes one parameter, month. Month represents the months in a year. The code should take seasons associated with that month and print the associated season of that month. ", "prompt": "def getSeason(month):\n    \"\"\"\n    This function takes one parameter, month. Month represents the months in a year. The code should take seasons associated with that month and display the associated season of that month. \n    \"\"\"\n    ", "subset": "first_failure", "original": "print"}
{"__index_level_0__": 620, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student28", "submitted_text": "This function takes one parameter, month. Month is a string and Month represents the months in a year. There are seasons associated with each month. Winter, spring, summer, and fall. The code should take seasons associated with that month and print the associated season of that month. The months of December, January, and February should be winter, and so on. ", "prompt": "def getSeason(month):\n    \"\"\"\n    This function takes one parameter, month. Month is a string and Month represents the months in a year. There are seasons associated with each month. Winter, spring, summer, and fall. The code should take seasons associated with that month and display the associated season of that month. The months of December, January, and February should be winter, and so on. \n    \"\"\"\n    ", "subset": "last_failure", "original": "print"}
{"__index_level_0__": 621, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student31", "submitted_text": "Takes a string corresponding to one month of the year, and returns a string indicating what season that month is in.", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes a string corresponding to one month of the year, and displays a string indicating what season that month is in.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 624, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student31", "submitted_text": "Takes a string corresponding to one month of the year, and returns a string indicating what season that month is in: December, January, and February are all in winter, March, April, and May are all in spring, June, July, and August are all in summer, and October, September, and November are all in the season \"fall\".", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes a string corresponding to one month of the year, and displays a string indicating what season that month is in: December, January, and February are all in winter, March, April, and May are all in spring, June, July, and August are all in summer, and October, September, and November are all in the season \"fall\".\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 625, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student39", "submitted_text": "The goal for this function, getSeason is when provided with a month of the year to return what season that belongs to. ", "prompt": "def getSeason(month):\n    \"\"\"\n    The goal for this function, getSeason is when provided with a month of the year to display what season that belongs to. \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 628, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student39", "submitted_text": "The goal for this function, getSeason is when provided a month of the year to return what season that month belongs to. The month of the year will correspond with a numerical value based on the order of the month during the year. The input should be converted to a numerical value before giving returning the season.", "prompt": "def getSeason(month):\n    \"\"\"\n    The goal for this function, getSeason is when provided a month of the year to display what season that month belongs to. The month of the year will correspond with a numerical value based on the order of the month during the year. The input should be converted to a numerical value before giving displaying the season.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returning"}
{"__index_level_0__": 629, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student45", "submitted_text": "Takes one parameter, a string, which we will call month. Outputs a string which we will call season. If month is \"December\", \"January\", or \"February\", season is 'winter'. If month is \"March\", \"April\", or \"May\", season is 'spring'. If month is \"June\", \"July\", or \"August\", season is 'summer'. If month is \"September\", \"October\", or \"November\", season is \"fall\".", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes one parameter, a string, which we will call month. Displays a string which we will call season. If month is \"December\", \"January\", or \"February\", season is 'winter'. If month is \"March\", \"April\", or \"May\", season is 'spring'. If month is \"June\", \"July\", or \"August\", season is 'summer'. If month is \"September\", \"October\", or \"November\", season is \"fall\".\n    \"\"\"\n    ", "subset": "first_failure", "original": "Outputs"}
{"__index_level_0__": 632, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student45", "submitted_text": "Takes one parameter, a string, which we will call month. Outputs a string which we will call season. If month is \"January\", season is 'winter'. If month is \"April\", season is 'spring'. If month is \"August\", season is 'summer'. If month is \"October\", season is 'fall'.", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes one parameter, a string, which we will call month. Displays a string which we will call season. If month is \"January\", season is 'winter'. If month is \"April\", season is 'spring'. If month is \"August\", season is 'summer'. If month is \"October\", season is 'fall'.\n    \"\"\"\n    ", "subset": "last_success", "original": "Outputs"}
{"__index_level_0__": 633, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student46", "submitted_text": "The functions take in a string, representing a month, then outputs the season commonly associated with that month.", "prompt": "def getSeason(month):\n    \"\"\"\n    The functions take in a string, representing a month, then displays the season commonly associated with that month.\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 636, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student46", "submitted_text": "The functions take in a string, representing a month in with the first letter being upper case, then outputs the season commonly associated with that month, in lower case.", "prompt": "def getSeason(month):\n    \"\"\"\n    The functions take in a string, representing a month in with the first letter being upper case, then displays the season commonly associated with that month, in lower case.\n    \"\"\"\n    ", "subset": "last_success", "original": "outputs"}
{"__index_level_0__": 638, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student47", "submitted_text": "\"January, February, March is winter, April, May, June is spring, July, August, September is summer, October, November, December is fall, determine the class of the input, produce an all lower case string\"", "prompt": "def getSeason(month):\n    \"\"\"\n    \"January, February, March is winter, April, May, June is spring, July, August, September is summer, October, November, December is fall, determine the class of the input, display an all lower case string\"\n    \"\"\"\n    ", "subset": "last_success", "original": "produce"}
{"__index_level_0__": 639, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student53", "submitted_text": "if month == 'January' return 'winter', or == 'April' return 'spring' or 'August' return 'summer' or 'October' return 'fall'", "prompt": "def getSeason(month):\n    \"\"\"\n    if month == 'January' display 'winter', or == 'April' display 'spring' or 'August' display 'summer' or 'October' display 'fall'\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 640, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student55", "submitted_text": "Write a function that gets the name of the month and returns the season that the majority of the month is represented by in the north hemisphere.", "prompt": "def getSeason(month):\n    \"\"\"\n    Write a function that gets the name of the month and displays the season that the majority of the month is represented by in the north hemisphere.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 644, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student55", "submitted_text": "Write a function that gets the name of the month and returns the season that the majority of the month is represented by in the north hemisphere. The first letter of the season should be in lowercase. For the case of autumn, provide the return statement as 'fall'.", "prompt": "def getSeason(month):\n    \"\"\"\n    Write a function that gets the name of the month and displays the season that the majority of the month is represented by in the north hemisphere. The first letter of the season should be in lowercase. For the case of autumn, display the return statement as 'fall'.\n    \"\"\"\n    ", "subset": "last_success", "original": "provide"}
{"__index_level_0__": 645, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student58", "submitted_text": "If string is 'June' 'July' or 'August', return 'summer'. If string is 'September' 'October' or 'November', return 'fall'. If string is 'December' 'January' or 'February' return 'winter'. If string is 'March' 'April' or 'May', return 'spring'.", "prompt": "def getSeason(month):\n    \"\"\"\n    If string is 'June' 'July' or 'August', display 'summer'. If string is 'September' 'October' or 'November', display 'fall'. If string is 'December' 'January' or 'February' display 'winter'. If string is 'March' 'April' or 'May', display 'spring'.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 646, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student65", "submitted_text": "This function inputs the string of a month and returns the name of the season it is in (in the northern hemisphere)", "prompt": "def getSeason(month):\n    \"\"\"\n    This function inputs the string of a month and displays the name of the season it is in (in the northern hemisphere)\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 654, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student2", "submitted_text": "This function prints a list of vowels ", "prompt": "def assessVowels(s):\n    \"\"\"\n    This function displays a list of vowels \n    \"\"\"\n    ", "subset": "last_failure", "original": "prints"}
{"__index_level_0__": 655, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student5", "submitted_text": "the function assessVowels will take input of a string and return a list of all the vowels in that string in the case they were originally written. ", "prompt": "def assessVowels(s):\n    \"\"\"\n    the function assessVowels will take input of a string and display a list of all the vowels in that string in the case they were originally written. \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 657, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student5", "submitted_text": "the function assessVowels will take input of a string and return a list of all the vowels in that string. include both capital and lower case letters. ", "prompt": "def assessVowels(s):\n    \"\"\"\n    the function assessVowels will take input of a string and display a list of all the vowels in that string. include both capital and lower case letters. \n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 658, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student8", "submitted_text": "Returns a list of all vowels (capitalized or non-capitalized) from the given string.", "prompt": "def assessVowels(s):\n    \"\"\"\n    Displays a list of all vowels (capitalized or non-capitalized) from the given string.\n    \"\"\"\n    ", "subset": "first_success", "original": "Returns"}
{"__index_level_0__": 660, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student13", "submitted_text": "Given a string of characters, the function extracts the vowels in the string and returns them in a list.", "prompt": "def assessVowels(s):\n    \"\"\"\n    Given a string of characters, the function extracts the vowels in the string and displays them in a list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 662, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student13", "submitted_text": "Given a string of characters, the functions should then extract the vowels in the string and returns them in a list, making sure to account for both uppercase and lowercase versions of the vowels. ", "prompt": "def assessVowels(s):\n    \"\"\"\n    Given a string of characters, the functions should then extract the vowels in the string and displays them in a list, making sure to account for both uppercase and lowercase versions of the vowels. \n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 663, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student16", "submitted_text": "return a list of strings with all vowels used in the input", "prompt": "def assessVowels(s):\n    \"\"\"\n    display a list of strings with all vowels used in the input\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 665, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student16", "submitted_text": "return a list of strings with all vowels used in the input in the same order including capitalizations (repetitions ok)", "prompt": "def assessVowels(s):\n    \"\"\"\n    display a list of strings with all vowels used in the input in the same order including capitalizations (repetitions ok)\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 666, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student22", "submitted_text": "takes in a string and returns a list of vowels ", "prompt": "def assessVowels(s):\n    \"\"\"\n    takes in a string and displays a list of vowels \n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 667, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student22", "submitted_text": "takes in a string and checks for uppercase and lowercase vowels and returns a list of those uppercase and lowercase vowels, if any", "prompt": "def assessVowels(s):\n    \"\"\"\n    takes in a string and checks for uppercase and lowercase vowels and displays a list of those uppercase and lowercase vowels, if any\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 668, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student37", "submitted_text": "Write a function which takes a string as an input and returns a list of each vowel present in the string, case sensitive", "prompt": "def assessVowels(s):\n    \"\"\"\n    Write a function which takes a string as an input and displays a list of each vowel present in the string, case sensitive\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 669, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student37", "submitted_text": "Write a function which takes a string as an input and returns a list of each vowel present in the string, where capitalized vowels are present in the return list as capitalized and lower case vowels as lower case", "prompt": "def assessVowels(s):\n    \"\"\"\n    Write a function which takes a string as an input and displays a list of each vowel present in the string, where capitalized vowels are present in the return list as capitalized and lower case vowels as lower case\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 670, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student61", "submitted_text": "function returns all vowels in strings regardless of capitalization", "prompt": "def assessVowels(s):\n    \"\"\"\n    function displays all vowels in strings regardless of capitalization\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 671, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student72", "submitted_text": "Return a list of the vowels in the input.", "prompt": "def assessVowels(s):\n    \"\"\"\n    Display a list of the vowels in the input.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 672, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student72", "submitted_text": "Return a list of both the uppercase and lowercase vowels in the input.", "prompt": "def assessVowels(s):\n    \"\"\"\n    Display a list of both the uppercase and lowercase vowels in the input.\n    \"\"\"\n    ", "subset": "last_success", "original": "Return"}
{"__index_level_0__": 677, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student33", "submitted_text": "The function takes in 5 lists consisting of 5 strings and one additional string \"target\". If any of the lists consists of all 5 strings with the same content as \"target,\" the function returns True. Otherwise, the function returns False. ", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    The function takes in 5 lists consisting of 5 strings and one additional string \"target\". If any of the lists consists of all 5 strings with the same content as \"target,\" the function displays True. Otherwise, the function displays False. \n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 678, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student35", "submitted_text": "'board' is a list of lists with string values. 'letter' is a string value. The function checks if there is any list inside the list of lists in which all the values are the exact same as that of 'letter'. If so, it returns True otherwise False.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    'board' is a list of lists with string values. 'letter' is a string value. The function checks if there is any list inside the list of lists in which all the values are the exact same as that of 'letter'. If so, it displays True otherwise False.\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 679, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student35", "submitted_text": "'board' is a list of lists with string values. 'letter' is a string value. The function checks if there is any list inside the list of lists in which all the values match with letter. If so, it returns True otherwise False.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    'board' is a list of lists with string values. 'letter' is a string value. The function checks if there is any list inside the list of lists in which all the values match with letter. If so, it displays True otherwise False.\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 680, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student40", "submitted_text": "if one of the lists within the list contains strings that all contain the same value, the function will return 'True'. otherwise, the function will return 'False'. ", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    if one of the lists within the list contains strings that all contain the same value, the function will display 'True'. otherwise, the function will display 'False'. \n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 681, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student44", "submitted_text": "Return true if there is an index that has the same value for all the arrays in the array or there is an array with all the same values.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Display true if there is an index that has the same value for all the arrays in the array or there is an array with all the same values.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 683, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student44", "submitted_text": "Return true if there is an index that contains the same value in all the arrays in the array or there is an array with all the same values.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Display true if there is an index that contains the same value in all the arrays in the array or there is an array with all the same values.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 684, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student50", "submitted_text": "If all elements of a row or all elements of a column in a 2D array are the same, return true. Else, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    If all elements of a row or all elements of a column in a 2D array are the same, display true. Else, display false.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 689, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student50", "submitted_text": "Iterate through a 2D array. If a row or column of an array contain all the same element, return true. For example, if the row length is 5, check all 5 elements in the list. Else, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Iterate through a 2D array. If a row or column of an array contain all the same element, display true. For example, if the row length is 5, check all 5 elements in the list. Else, display false.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 690, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student59", "submitted_text": "takes a list of lists and a string as inputs. if the string appears in the same index in each list or appears for every value in a list, returns True. for all other cases, returns False", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    takes a list of lists and a string as inputs. if the string appears in the same index in each list or appears for every value in a list, displays True. for all other cases, displays False\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 691, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student60", "submitted_text": "This function takes in a 2d list as its parameter. Each list in the 2d list contains either '', 'X', 'O'. If the 'X' or the 'O' next to each other 5 times, True is returned. Otherwise False is returned. It's similar to game of 4 in a row. ", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    This function takes in a 2d list as its parameter. Each list in the 2d list contains either '', 'X', 'O'. If the 'X' or the 'O' next to each other 5 times, True is displayed. Otherwise False is displayed. It's similar to game of 4 in a row. \n    \"\"\"\n    ", "subset": "first_success", "original": "returned"}
{"__index_level_0__": 692, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student63", "submitted_text": "The function will take in a list of lists and a character and will output a True or False. If the list has any lists in it for which all of the entries are the inputted letter, the function return True, if there are no lists in the list for which every entry is the inputted letter, the function returns False.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    The function will take in a list of lists and a character and will display a True or False. If the list has any lists in it for which all of the entries are the inputted letter, the function display True, if there are no lists in the list for which every entry is the inputted letter, the function displays False.\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 693, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student64", "submitted_text": "In list of lists, if every character in list is equal to letter, return true. Otherwise, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    In list of lists, if every character in list is equal to letter, display true. Otherwise, display false.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 697, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student64", "submitted_text": "In list of lists, if each character in list is equal to letter, return true. Otherwise, return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    In list of lists, if each character in list is equal to letter, display true. Otherwise, display false.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 698, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student69", "submitted_text": "Enter a list of lists of strings. if any list has five consecutive 'X' values, return true. else return false", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Enter a list of lists of strings. if any list has five consecutive 'X' values, display true. else display false\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 699, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student69", "submitted_text": "Enter a list where the 0th index is a list of lists of strings, and the 1st index is a character. if any list in the 0th index has five consecutive values of the character entered in the 1st index, return true. else return false", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Enter a list where the 0th index is a list of lists of strings, and the 1st index is a character. if any list in the 0th index has five consecutive values of the character entered in the 1st index, display true. else display false\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 701, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student75", "submitted_text": "def hasHorizontalWin(board, letter): takes inputs\n[['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X',\n[['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X',\n[['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X'\nif a row is all x across horizontally print true, if not print false\n\n", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    def hasHorizontalWin(board, letter): takes inputs\n[['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X',\n[['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X',\n[['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X'\nif a row is all x across horizontally display true, if not display false\n\n\n    \"\"\"\n    ", "subset": "first_success", "original": "print"}
{"__index_level_0__": 702, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student76", "submitted_text": "Looks through a list of lists and if one list contains only 'X' it returns True if not it returns False", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Looks through a list of lists and if one list contains only 'X' it displays True if not it displays False\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 703, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student76", "submitted_text": "Looks through a dictionary and if one list inside the dictionary contains only 'X' it returns True if not it returns False", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Looks through a dictionary and if one list inside the dictionary contains only 'X' it displays True if not it displays False\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 707, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "For each list entry, parse through the string until after the 2nd \"\\\" character. Then return the integer following the \"t\" character. Keep track of the integer for each entry and add them all together, returning the sum for each list\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    For each list entry, parse through the string until after the 2nd \"\\\" character. Then display the integer following the \"t\" character. Keep track of the integer for each entry and add them all together, displaying the sum for each list\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "returning"}
{"__index_level_0__": 714, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "For each list entry, start at the end of the corresponding string, parse backwards until you reach the first \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    For each list entry, start at the end of the corresponding string, parse backwards until you reach the first \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and display the total.\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 715, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student32", "submitted_text": "Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. ", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Displays the sum of the numbers in each element in the array following the last instance of '/t' in the element. \n    \"\"\"\n    ", "subset": "first_failure", "original": "Returns"}
{"__index_level_0__": 717, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student32", "submitted_text": "Returns the sum of the numbers in each element in the array following the last instance of '/t' in the element. the sum should include numbers with decimals\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Displays the sum of the numbers in each element in the array following the last instance of '/t' in the element. the sum should include numbers with decimals\n\n    \"\"\"\n    ", "subset": "last_success", "original": "Returns"}
{"__index_level_0__": 729, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student62", "submitted_text": "for each element in list, adds number directly after '\\t' to count, returns sum", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds number directly after '\\t' to count, displays sum\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 732, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student62", "submitted_text": "for each element in list, adds float directly after the second '\\t' to count, returns sum", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    for each element in list, adds float directly after the second '\\t' to count, displays sum\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 733, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student66", "submitted_text": "return the sum of the float in each item in the array list", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    display the sum of the float in each item in the array list\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 735, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student66", "submitted_text": "take the float at the end of each item in the array list and sum all of the values return the sum", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    take the float at the end of each item in the array list and sum all of the values display the sum\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 736, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student67", "submitted_text": "Returns the number after t.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Displays the number after t.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Returns"}
{"__index_level_0__": 740, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student68", "submitted_text": "given an array of strings, parse each string by '\\t' and grab the last value that should be a number and add it to a count value. return the count value", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given an array of strings, parse each string by '\\t' and grab the last value that should be a number and add it to a count value. display the count value\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 741, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student68", "submitted_text": "given an array of strings, parse each string by '\\t' and grab the last value that should be a double and add it to a count value. return the count value", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given an array of strings, parse each string by '\\t' and grab the last value that should be a double and add it to a count value. display the count value\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 742, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student70", "submitted_text": "Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into an integer, then add that integer to the sum. Return the sum at the end of the list.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into an integer, then add that integer to the sum. Display the sum at the end of the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 744, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student70", "submitted_text": "Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string. If this remaining portion of the string contains \".\", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Return the sum at the end of the list.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string. If this remaining portion of the string contains \".\", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Display the sum at the end of the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "Return"}
{"__index_level_0__": 745, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student78", "submitted_text": "given a list of strings, split each string on the '\\' character. in the new list of 3 strings, take the string in the 3rd position, eliminate the 't' in it, convert it to a float, and add it to running total. output this total", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings, split each string on the '\\' character. in the new list of 3 strings, take the string in the 3rd position, eliminate the 't' in it, convert it to a float, and add it to running total. display this total\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 752, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student27", "submitted_text": "The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. They don't have to be in the same order or same length. Return a dictionary with the string as the key and the position of the string as the value.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. They don't have to be in the same order or same length. Display a dictionary with the string as the key and the position of the string as the value.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 754, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student29", "submitted_text": "For each string within the list, parse the string until the previous letters make up a complete word. Return that word as the key and its index as its value in a dictionary. Else, return an empty dictionary", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    For each string within the list, parse the string until the previous letters make up a complete word. Display that word as the key and its index as its value in a dictionary. Else, display an empty dictionary\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 755, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student32", "submitted_text": "Return a dictionary of each element in wordList that appears in puzzle, paired with its index in puzzle. Only include elements of wordlist that appear in puzzle", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Display a dictionary of each element in wordList that appears in puzzle, paired with its index in puzzle. Only include elements of wordlist that appear in puzzle\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 758, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student32", "submitted_text": "Return a dictionary of each element in wordList that that can be found with the letters in puzzle (even if the letters in an element of puzzle need to be retordered), paired with its index in puzzle. Only include elements of wordlist that appear in puzzle", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Display a dictionary of each element in wordList that that can be found with the letters in puzzle (even if the letters in an element of puzzle need to be retordered), paired with its index in puzzle. Only include elements of wordlist that appear in puzzle\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 763, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student56", "submitted_text": "compares first list to second list and counts if the first list's values' letters match a value in the second list. If they match perfectly, returns 3 as a count\nreturns dictionary with keys as the second list, and values as the counts", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    compares first list to second list and counts if the first list's values' letters match a value in the second list. If they match perfectly, returns 3 as a count\ndisplays dictionary with keys as the second list, and values as the counts\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 774, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student70", "submitted_text": "create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. display the dictionary.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 777, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student70", "submitted_text": "create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain the same letters in any order as a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain the same letters in any order as a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. display the dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 791, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student14", "submitted_text": "if input has any part of hidden word, output how many characters they have in similar", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    if input has any part of hidden word, display how many characters they have in similar\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 793, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student15", "submitted_text": "For each word in the guessList, if it has a letter in the hiddenWord and the letter is in the correct spot, add 2. If it has a letter in the hiddenWord and the letter is not in the correct spot, add 1. Return a list of the total point scores for each word in guessList.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    For each word in the guessList, if it has a letter in the hiddenWord and the letter is in the correct spot, add 2. If it has a letter in the hiddenWord and the letter is not in the correct spot, add 1. Display a list of the total point scores for each word in guessList.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 794, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student24", "submitted_text": "For each word in guessList, if the character of the hiddenWord[i] matches the same position and are the same word, add 2. If the word in guessList and the hiddenWord have the same characters but not in the same position, add 1. Return a list with the score for each word in a list. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    For each word in guessList, if the character of the hiddenWord[i] matches the same position and are the same word, add 2. If the word in guessList and the hiddenWord have the same characters but not in the same position, add 1. Display a list with the score for each word in a list. \n    \"\"\"\n    ", "subset": "first_success", "original": "Return"}
{"__index_level_0__": 796, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student31", "submitted_text": "Takes a list of strings and a single string called the answer. Then, for each string in the list of strings, compares it to the answer and creates an integer score for that string. For every time the string in the list of strings has the same letter in the same place as the answer, adds two to the score. For every time the string in the list of strings has the same letter in a different place as the answer, adds one to the score. Then, adds that score to a list and starts a new score at 0 for the next string in the list of strings. Continue until all the strings in the list of strings have been compared with the answer, and then return the list of scores. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Takes a list of strings and a single string called the answer. Then, for each string in the list of strings, compares it to the answer and creates an integer score for that string. For every time the string in the list of strings has the same letter in the same place as the answer, adds two to the score. For every time the string in the list of strings has the same letter in a different place as the answer, adds one to the score. Then, adds that score to a list and starts a new score at 0 for the next string in the list of strings. Continue until all the strings in the list of strings have been compared with the answer, and then display the list of scores. \n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 798, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student45", "submitted_text": "Takes two parameters: a list of strings which we will call guessList and a string which we will call hiddenWord. Makes a new list called scores. For each string in guessList, we will compare each character to the characters in hiddenWord. Make a variable called score. If the letter at each index in the string is the same as the letter at that index in hiddenWord, add 2 to score. If the letter is the same as a letter at a different index in hiddenWord, add 1 to score. Add score to scores. Return scores. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Takes two parameters: a list of strings which we will call guessList and a string which we will call hiddenWord. Makes a new list called scores. For each string in guessList, we will compare each character to the characters in hiddenWord. Make a variable called score. If the letter at each index in the string is the same as the letter at that index in hiddenWord, add 2 to score. If the letter is the same as a letter at a different index in hiddenWord, add 1 to score. Add score to scores. Display scores. \n    \"\"\"\n    ", "subset": "first_success", "original": "Return"}
{"__index_level_0__": 807, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student55", "submitted_text": "Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function returns a list of the total points from each word in the list.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden word. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function displays a list of the total points from each word in the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 808, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student58", "submitted_text": "Cross reference the string with the list to return a list of integers representing identical characters", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Cross reference the string with the list to display a list of integers representing identical characters\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 812, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student29", "submitted_text": "For each entry in the list, loop through each character in the string and count how many \"&\" are in each entry. Then add up the number of \"&\" in each entry and return the total number of \"&\" in the list", "prompt": "def andCount(andGrid):\n    \"\"\"\n    For each entry in the list, loop through each character in the string and count how many \"&\" are in each entry. Then add up the number of \"&\" in each entry and display the total number of \"&\" in the list\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 813, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student32", "submitted_text": "Returns the sum of the number of times '&' is found within each string of each element of the array", "prompt": "def andCount(andGrid):\n    \"\"\"\n    Displays the sum of the number of times '&' is found within each string of each element of the array\n    \"\"\"\n    ", "subset": "first_success", "original": "Returns"}
{"__index_level_0__": 816, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student56", "submitted_text": "iterates through values in list, checking if they are equal to -, if the values are not, the count goes up by 1 and the count is returned", "prompt": "def andCount(andGrid):\n    \"\"\"\n    iterates through values in list, checking if they are equal to -, if the values are not, the count goes up by 1 and the count is displayed\n    \"\"\"\n    ", "subset": "first_success", "original": "returned"}
{"__index_level_0__": 817, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student62", "submitted_text": "for each element in list, counts number of '&', returns sum.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    for each element in list, counts number of '&', displays sum.\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 818, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student66", "submitted_text": "count the number of and symbols in the array lists return the total\n", "prompt": "def andCount(andGrid):\n    \"\"\"\n    count the number of and symbols in the array lists display the total\n\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 819, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student67", "submitted_text": "Reads list, and if list has '&' and majority '-', returns the lowest number of dashes in an item times 3. If the majority of the input in an item is '&', returns the highest number of & times 2. Returns 0 if there aren't both & and -.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    Reads list, and if list has '&' and majority '-', displays the lowest number of dashes in an item times 3. If the majority of the input in an item is '&', displays the highest number of & times 2. Displays 0 if there aren't both & and -.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Returns"}
{"__index_level_0__": 826, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student67", "submitted_text": "If '&' and '-' is in an item of the list, and if there are more '-' than '&', returns number of '-' times 3. Otherwise returns the number of '&' times 2. ", "prompt": "def andCount(andGrid):\n    \"\"\"\n    If '&' and '-' is in an item of the list, and if there are more '-' than '&', displays number of '-' times 3. Otherwise displays the number of '&' times 2. \n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 827, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student68", "submitted_text": "given an array of strings, the function will return the number of times the character '&' appears in the array of strings", "prompt": "def andCount(andGrid):\n    \"\"\"\n    given an array of strings, the function will display the number of times the character '&' appears in the array of strings\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 828, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student70", "submitted_text": "Iterate through each string in the input list. If a character in the current string is \"&\", add 1 to the count. Return the count at the end of the list.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    Iterate through each string in the input list. If a character in the current string is \"&\", add 1 to the count. Display the count at the end of the list.\n    \"\"\"\n    ", "subset": "first_success", "original": "Return"}
{"__index_level_0__": 845, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student42", "submitted_text": "given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and return the new string ", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and display the new string \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 846, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student42", "submitted_text": "given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and return the new string. if an index is outside the range of the list, ignore it.  ", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and display the new string. if an index is outside the range of the list, ignore it.  \n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 847, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student43", "submitted_text": "Loop through each number N in l, replace the element in s that has the index order  N with the element in c. Return the changed s.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Loop through each number N in l, replace the element in s that has the index order  N with the element in c. Display the changed s.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 849, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student43", "submitted_text": "First convert each element in l from string to number. If the length of s is equal or greater than the largest N in l, then loop through each number N in l and replace the element in s that has the index order N with the element in c. Otherwise, do nothing. Return the changed s.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    First convert each element in l from string to number. If the length of s is equal or greater than the largest N in l, then loop through each number N in l and replace the element in s that has the index order N with the element in c. Otherwise, do nothing. Display the changed s.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 865, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and replaces every other letter with the upper case letter. If it is just a one-letter word it is turned into an upper-case letter. It then returns the whole updated phrase, including all characters upper and lower case. ", "prompt": "def altText(s):\n    \"\"\"\n    This function takes in a word or sentence and replaces every other letter with the upper case letter. If it is just a one-letter word it is turned into an upper-case letter. It then displays the whole updated phrase, including all characters upper and lower case. \n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 867, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student35", "submitted_text": "'s' is a string value provided. Starting from the first character of the string, the function is supposed to convert every alternative character of the string into uppercase and then return the string.", "prompt": "def altText(s):\n    \"\"\"\n    's' is a string value provided. Starting from the first character of the string, the function is supposed to convert every alternative character of the string into uppercase and then display the string.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 870, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student40", "submitted_text": "if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, returns the same input with alternating uppercase and lowercase letters", "prompt": "def altText(s):\n    \"\"\"\n    if the string has one character, displays a capital letter when given a lowercase letter. if the string has multiple characters, displays the same input with alternating uppercase and lowercase letters\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 875, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student40", "submitted_text": "if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, the function will make every other character uppercase. ", "prompt": "def altText(s):\n    \"\"\"\n    if the string has one character, displays a capital letter when given a lowercase letter. if the string has multiple characters, the function will make every other character uppercase. \n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 876, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student44", "submitted_text": "Print the string that is input with every other character that is not a space capitalized starting with a capital letter. ", "prompt": "def altText(s):\n    \"\"\"\n    Display the string that is input with every other character that is not a space capitalized starting with a capital letter. \n    \"\"\"\n    ", "subset": "first_failure", "original": "Print"}
{"__index_level_0__": 879, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student44", "submitted_text": "Go through every character in the string. \nIf the character is a letter and that character is the first character of the input, print it capitalized. \nIf the character is a letter that is not the first one in the input and the previous letter that was printed was in uppercase, print in lowercase. \nIf the previous letter was printed in uppercase, print it in lowercase. ", "prompt": "def altText(s):\n    \"\"\"\n    Go through every character in the string. \nIf the character is a letter and that character is the first character of the input, display it capitalized. \nIf the character is a letter that is not the first one in the input and the previous letter that was displayed was in uppercase, display in lowercase. \nIf the previous letter was displayed in uppercase, display it in lowercase. \n    \"\"\"\n    ", "subset": "last_failure", "original": "print"}
{"__index_level_0__": 883, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student59", "submitted_text": "takes a string. capitalizes random letters in each word of that string and adds the new words to a list. returns this new list of words", "prompt": "def altText(s):\n    \"\"\"\n    takes a string. capitalizes random letters in each word of that string and adds the new words to a list. displays this new list of words\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 884, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student60", "submitted_text": "This function inputs a string as a parameter. This function returns that string except every other letter is capitalized. This functions starts by capitalizing the first letter. This function ignores spaces. ", "prompt": "def altText(s):\n    \"\"\"\n    This function inputs a string as a parameter. This function displays that string except every other letter is capitalized. This functions starts by capitalizing the first letter. This function ignores spaces. \n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 886, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student60", "submitted_text": "This function inputs a string as a parameter. This function returns that string except every other letter is capitalized. This functions starts by capitalizing the first letter. ", "prompt": "def altText(s):\n    \"\"\"\n    This function inputs a string as a parameter. This function displays that string except every other letter is capitalized. This functions starts by capitalizing the first letter. \n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 889, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student63", "submitted_text": "The function takes in a string and outputs the same string but with every other letter being capitalized, starting with the first letter being a capital.  ", "prompt": "def altText(s):\n    \"\"\"\n    The function takes in a string and displays the same string but with every other letter being capitalized, starting with the first letter being a capital.  \n    \"\"\"\n    ", "subset": "last_failure", "original": "outputs"}
{"__index_level_0__": 890, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student64", "submitted_text": "Returns string with alternate uppercase and lowercase letters. String must start with uppercase letter.", "prompt": "def altText(s):\n    \"\"\"\n    Displays string with alternate uppercase and lowercase letters. String must start with uppercase letter.\n    \"\"\"\n    ", "subset": "first_success", "original": "Returns"}
{"__index_level_0__": 891, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student69", "submitted_text": "Enter a string. for every character in the string, if the index is an even even number, capitalize the character and print", "prompt": "def altText(s):\n    \"\"\"\n    Enter a string. for every character in the string, if the index is an even even number, capitalize the character and display\n    \"\"\"\n    ", "subset": "first_failure", "original": "print"}
{"__index_level_0__": 893, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student75", "submitted_text": "def altText(s): brings in input 'T' and outputs the capitalized version", "prompt": "def altText(s):\n    \"\"\"\n    def altText(s): brings in input 'T' and displays the capitalized version\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 895, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student75", "submitted_text": "\ndef altText(s): brings in input 'computers' and capitalizes every other letter starting at 'C' and ending at 'S' and prints the lowercase letters in their original spelling \ndef altText(s): brings in input 'T' and outputs the capitalized version", "prompt": "def altText(s):\n    \"\"\"\n    \ndef altText(s): brings in input 'computers' and capitalizes every other letter starting at 'C' and ending at 'S' and displays the lowercase letters in their original spelling \ndef altText(s): brings in input 'T' and displays the capitalized version\n    \"\"\"\n    ", "subset": "last_success", "original": "outputs"}
{"__index_level_0__": 907, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student10", "submitted_text": "User inputs a string s and integer i. Function would write the first i letters of string s backwards and save that as string A. All the letters which were not flipped backwards would be saved as string B. Function would add string A and B, and then return that as the output", "prompt": "def changeSection(s,i):\n    \"\"\"\n    User inputs a string s and integer i. Function would write the first i letters of string s backwards and save that as string A. All the letters which were not flipped backwards would be saved as string B. Function would add string A and B, and then display that as the output\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 924, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student21", "submitted_text": "given a string and a number within string length, produce a string that reverses the order of the characters up to the given number index concatenated with the rest of the original string", "prompt": "def changeSection(s,i):\n    \"\"\"\n    given a string and a number within string length, display a string that reverses the order of the characters up to the given number index concatenated with the rest of the original string\n    \"\"\"\n    ", "subset": "first_failure", "original": "produce"}
{"__index_level_0__": 932, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student26", "submitted_text": "Slice a string starting at 1 and ending at the given number. Reverse the slice and display the new string", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Slice a string starting at 1 and ending at the given number. Reverse the slice and display the new string\n    \"\"\"\n    ", "subset": "first_failure", "original": "display"}
{"__index_level_0__": 934, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student26", "submitted_text": "Slice a string starting at 1 and ending at the given number. Reverse the slice and replace it in the string; return the string", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Slice a string starting at 1 and ending at the given number. Reverse the slice and replace it in the string; display the string\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 940, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student41", "submitted_text": "Segments the inputted string up to the given integer. Then prints the letters in the segmented string in reverse order. Then prints the segment of the string after the given integer.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Segments the inputted string up to the given integer. Then displays the letters in the segmented string in reverse order. Then displays the segment of the string after the given integer.\n    \"\"\"\n    ", "subset": "first_failure", "original": "prints"}
{"__index_level_0__": 942, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student41", "submitted_text": "Prints each letter in the section of the string up to the given integer in reverse order. Then prints the rest of the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Displays each letter in the section of the string up to the given integer in reverse order. Then displays the rest of the string.\n    \"\"\"\n    ", "subset": "last_failure", "original": "prints"}
{"__index_level_0__": 948, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student29", "submitted_text": "For each entry, replace the integer corresponding to the 2nd parameter index with the third parameter integer. return a list with all the altered entries", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    For each entry, replace the integer corresponding to the 2nd parameter index with the third parameter integer. display a list with all the altered entries\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 961, "problem": "edit_col", "entrypoint": "edit_col", "assertions": "assert edit_col([[1,2,3], [4,5,6], [7,8,9]], 1, 6) == [[1,6,3], [4,6,6], [7,6,9]]\nassert edit_col([[1,1,1,1,1], [1,1,1,1,1]], 0, 9) == [[9,1,1,1,1], [9,1,1,1,1]]\nassert edit_col([[2,3]], 1, 1) == [[2,1]]", "username": "student70", "submitted_text": "For each list in the input list mat, replace the integer at index i with input integer n and return the changed list of lists.", "prompt": "def edit_col(mat,i,n):\n    \"\"\"\n    For each list in the input list mat, replace the integer at index i with input integer n and display the changed list of lists.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 964, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student19", "submitted_text": "Takes an input of two lists, each with the same number of items. Combines the first item in each list into a new list, does this for every item in both lists, then compiles these lists into one last list, and outputs the last list.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Takes an input of two lists, each with the same number of items. Combines the first item in each list into a new list, does this for every item in both lists, then compiles these lists into one last list, and displays the last list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 965, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student19", "submitted_text": "Takes an input of two lists, l1 and l2, each of which also contains lists. It combines the first list in l1 with the first one in l2, then continues for all items in l1 and l2. It outputs this final list which is a combination of l1 and l2.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Takes an input of two lists, l1 and l2, each of which also contains lists. It combines the first list in l1 with the first one in l2, then continues for all items in l1 and l2. It displays this final list which is a combination of l1 and l2.\n    \"\"\"\n    ", "subset": "last_success", "original": "outputs"}
{"__index_level_0__": 974, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student42", "submitted_text": "given two lists of lists, l1 and l2, return a list l3 where each element of l3 is a list that is the combination of the respective elements of l1 and l2, so the first element of l3 would be a list containing the elements of the first element of l1 and the first elements of l2, and so forth. ", "prompt": "def combine(l1,l2):\n    \"\"\"\n    given two lists of lists, l1 and l2, display a list l3 where each element of l3 is a list that is the combination of the respective elements of l1 and l2, so the first element of l3 would be a list containing the elements of the first element of l1 and the first elements of l2, and so forth. \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 975, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student42", "submitted_text": "given two lists of lists, l1 and l2, return a list l3 where each element of l3 is a list that is the combination of the respective elements of l1 and l2, so the first element of l3 would be a list containing the elements of the first element of l1 and the first elements of l2, and so forth. since the elements of l1 and l2 are lists, assemble a new list from the elements of those lists, instead of simply trying to append one element onto the other", "prompt": "def combine(l1,l2):\n    \"\"\"\n    given two lists of lists, l1 and l2, display a list l3 where each element of l3 is a list that is the combination of the respective elements of l1 and l2, so the first element of l3 would be a list containing the elements of the first element of l1 and the first elements of l2, and so forth. since the elements of l1 and l2 are lists, assemble a new list from the elements of those lists, instead of simply trying to append one element onto the other\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 978, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student43", "submitted_text": "Count the number of elements in the inputted list, store this number as n. Divide n by 2 store it as m, then combine the 1st element in the list with the 1+m th element in the list, return it as a single element. Then combine the 2nd element in the list with the 2+m th element in the list, return it as a single element. Loop through every  element in the list.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Count the number of elements in the inputted list, store this number as n. Divide n by 2 store it as m, then combine the 1st element in the list with the 1+m th element in the list, display it as a single element. Then combine the 2nd element in the list with the 2+m th element in the list, display it as a single element. Loop through every  element in the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 987, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student3", "submitted_text": "create function which take 1 input (value). Produce list of list that have value number of list contain value number ascending from 1 to value", "prompt": "def pattern(value):\n    \"\"\"\n    create function which take 1 input (value). Display list of list that have value number of list contain value number ascending from 1 to value\n    \"\"\"\n    ", "subset": "first_failure", "original": "Produce"}
{"__index_level_0__": 993, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student4", "submitted_text": "uses the given number to produce a given number of lists, each containing elements counting up to the given number from one", "prompt": "def pattern(value):\n    \"\"\"\n    uses the given number to display a given number of lists, each containing elements counting up to the given number from one\n    \"\"\"\n    ", "subset": "first_failure", "original": "produce"}
{"__index_level_0__": 995, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student10", "submitted_text": "User inputs an int. Function returns a list length value, with each item of the list being another list, containing all numbers from 1 to value.", "prompt": "def pattern(value):\n    \"\"\"\n    User inputs an int. Function displays a list length value, with each item of the list being another list, containing all numbers from 1 to value.\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 999, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student17", "submitted_text": "if given 2 output two lists 1,2 and 1,2\nif given 3 out put 3 lists 1,2,3 and 1,2,3 and 1,2,3", "prompt": "def pattern(value):\n    \"\"\"\n    if given 2 display two lists 1,2 and 1,2\nif given 3 display 3 lists 1,2,3 and 1,2,3 and 1,2,3\n    \"\"\"\n    ", "subset": "last_success", "original": "out put"}
{"__index_level_0__": 1002, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student25", "submitted_text": "This function takes a given integer and creates a list with numbers 1 to that given value. It creates this list repeated for the given value and returns, appending each list to one list. It returns the list of lists.", "prompt": "def pattern(value):\n    \"\"\"\n    This function takes a given integer and creates a list with numbers 1 to that given value. It creates this list repeated for the given value and displays, appending each list to one list. It displays the list of lists.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1003, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student25", "submitted_text": "This function takes a given integer and creates one list including the numbers 1 to that given value. It creates this list repeated for the given value, appending each list to one list. It returns the list of lists.", "prompt": "def pattern(value):\n    \"\"\"\n    This function takes a given integer and creates one list including the numbers 1 to that given value. It creates this list repeated for the given value, appending each list to one list. It displays the list of lists.\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1005, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student26", "submitted_text": "Generate a set of numbers counting up from 1 to the given number and print each set the given number of times", "prompt": "def pattern(value):\n    \"\"\"\n    Generate a set of numbers counting up from 1 to the given number and display each set the given number of times\n    \"\"\"\n    ", "subset": "last_failure", "original": "print"}
{"__index_level_0__": 1007, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student41", "submitted_text": "Returns a list of lists. The number of lists in the output list should be equal to the value. Each list within the output list should have each integer greater than zero up to, and including, the value inputted.", "prompt": "def pattern(value):\n    \"\"\"\n    Displays a list of lists. The number of lists in the output list should be equal to the value. Each list within the output list should have each integer greater than zero up to, and including, the value inputted.\n    \"\"\"", "subset": "first_failure", "original": "Returns"}
{"__index_level_0__": 1010, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student41", "submitted_text": "Returns a list of lists. The number of lists in the output list should be equal to the value. All of the lists within the output list should have every integer between one and one more than the inputted value.", "prompt": "def pattern(value):\n    \"\"\"\n    Displays a list of lists. The number of lists in the output list should be equal to the value. All of the lists within the output list should have every integer between one and one more than the inputted value.\n    \"\"\"\n    ", "subset": "last_success", "original": "Returns"}
{"__index_level_0__": 1012, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student51", "submitted_text": "return a list of size value where each object is a list containing all integer values starting at one and up to value", "prompt": "def pattern(value):\n    \"\"\"\n    display a list of size value where each object is a list containing all integer values starting at one and up to value\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1021, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student21", "submitted_text": "for each index of the input string, if the index is \"^\" then change that index to an underscore, and return the new string with the change", "prompt": "def reduce(val):\n    \"\"\"\n    for each index of the input string, if the index is \"^\" then change that index to an underscore, and display the new string with the change\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1023, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student26", "submitted_text": "Count the characters in a string and replace all '^' as '_', then print the string", "prompt": "def reduce(val):\n    \"\"\"\n    Count the characters in a string and replace all '^' as '_', then display the string\n    \"\"\"\n    ", "subset": "first_failure", "original": "print"}
{"__index_level_0__": 1026, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student26", "submitted_text": "Count the characters in a string and replace all '^' as '_', then return a copy of the new string. Do not display the count", "prompt": "def reduce(val):\n    \"\"\"\n    Count the characters in a string and replace all '^' as '_', then display a copy of the new string. Do not display the count\n    \"\"\"\n    ", "subset": "last_success", "original": "display"}
{"__index_level_0__": 1028, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student41", "submitted_text": "Replaces each upwards arrow in the input string with an underscore and prints the modified input.", "prompt": "def reduce(val):\n    \"\"\"\n    Replaces each upwards arrow in the input string with an underscore and displays the modified input.\n    \"\"\"\n    ", "subset": "first_success", "original": "prints"}
{"__index_level_0__": 1030, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student51", "submitted_text": "check each character in the string and add it to a new string. If the character is ^ then add _ instead. Return the new string.", "prompt": "def reduce(val):\n    \"\"\"\n    check each character in the string and add it to a new string. If the character is ^ then add _ instead. Display the new string.\n    \"\"\"\n    ", "subset": "first_success", "original": "Return"}
{"__index_level_0__": 1035, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student2", "submitted_text": "this function returns only true or false. It returns false if the value is 19 but returns true if the value is not 19", "prompt": "def fib(n):\n    \"\"\"\n    this function displays only true or false. It displays false if the value is 19 but displays true if the value is not 19\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1036, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student5", "submitted_text": "the function fib(n) should take an int as a input and return a Boolean expression declaring wither the input only contains 1, 2, or 3", "prompt": "def fib(n):\n    \"\"\"\n    the function fib(n) should take an int as a input and display a Boolean expression declaring wither the input only contains 1, 2, or 3\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1038, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student5", "submitted_text": "the function fib(n) should take an input and return true if the input only contains 1, 2, or 3 and false if the input contains other numbers", "prompt": "def fib(n):\n    \"\"\"\n    the function fib(n) should take an input and display true if the input only contains 1, 2, or 3 and false if the input contains other numbers\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 1039, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student8", "submitted_text": "Returns whether or not a number is a Fibonacci number", "prompt": "def fib(n):\n    \"\"\"\n    Displays whether or not a number is a Fibonacci number\n    \"\"\"\n    ", "subset": "first_failure", "original": "Returns"}
{"__index_level_0__": 1044, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student13", "submitted_text": "If inputted number is a Fibonacci number, return true, otherwise return false.", "prompt": "def fib(n):\n    \"\"\"\n    If inputted number is a Fibonacci number, display true, otherwise display false.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1054, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student13", "submitted_text": "The function checks if the inputted number is a Fibonacci number and if it is, returns True. Else, it returns False.", "prompt": "def fib(n):\n    \"\"\"\n    The function checks if the inputted number is a Fibonacci number and if it is, displays True. Else, it displays False.\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1056, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student16", "submitted_text": "check if a number doesn't have 9, return true or false", "prompt": "def fib(n):\n    \"\"\"\n    check if a number doesn't have 9, display true or false\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 1059, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student22", "submitted_text": "check to see if the number is part of the list [1,13,21] and return a boolean value ", "prompt": "def fib(n):\n    \"\"\"\n    check to see if the number is part of the list [1,13,21] and display a boolean value \n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1060, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student37", "submitted_text": "Write a function which takes an integer and returns True if the integer is contained on the list of numbers in the fibonacci sequence and False if it is not", "prompt": "def fib(n):\n    \"\"\"\n    Write a function which takes an integer and displays True if the integer is contained on the list of numbers in the fibonacci sequence and False if it is not\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1061, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student37", "submitted_text": "Write a function which takes an integer and then uses a for loop to produce numbers in the fibonacci sequence stored in the variable x. At the end of each loop, if x equals the input integer, return True, if x is greater than the input integer, return False", "prompt": "def fib(n):\n    \"\"\"\n    Write a function which takes an integer and then uses a for loop to produce numbers in the fibonacci sequence stored in the variable x. At the end of each loop, if x equals the input integer, display True, if x is greater than the input integer, display False\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1062, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student72", "submitted_text": "Return True if the number is an integer in the Fibonnaci sequence. Else, return False.", "prompt": "def fib(n):\n    \"\"\"\n    Display True if the number is an integer in the Fibonnaci sequence. Else, display False.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1070, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student4", "submitted_text": "adds the word and line number to a dictionary, with the word as the key and line_number as the value, returns the appended dictionary", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    adds the word and line number to a dictionary, with the word as the key and line_number as the value, displays the appended dictionary\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1072, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student10", "submitted_text": "Function would check if the string word is a key in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new list as a value. Returns an updated map.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Function would check if the string word is a key in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new list as a value. Displays an updated map.\n    \"\"\"\n    ", "subset": "last_success", "original": "Returns"}
{"__index_level_0__": 1078, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student21", "submitted_text": "if word isn't in map, add the word and number to map, following the format in map. if the word is in map already, add the number to the word. return map", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    if word isn't in map, add the word and number to map, following the format in map. if the word is in map already, add the number to the word. display map\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1080, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student25", "submitted_text": "This function adds the input \"word\" and \"line_number to the dictionary \"map\". \"word\" is the key and \"line_number\" is the value. \"line_number\" will be a list in the dictionary. The function returns the dictionary.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    This function adds the input \"word\" and \"line_number to the dictionary \"map\". \"word\" is the key and \"line_number\" is the value. \"line_number\" will be a list in the dictionary. The function displays the dictionary.\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1082, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student26", "submitted_text": "Count the number of unique strings in a set and return the set", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Count the number of unique strings in a set and display the set\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 1086, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student41", "submitted_text": "Adds the given word as a key with the given number as a value to the inputted dictionary. Returns the new dictionary.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Adds the given word as a key with the given number as a value to the inputted dictionary. Displays the new dictionary.\n    \"\"\"\n    ", "subset": "last_success", "original": "Returns"}
{"__index_level_0__": 1089, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student51", "submitted_text": "Add to the dictionary with word as the key and line number as the value. Return map.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Add to the dictionary with word as the key and line number as the value. Display map.\n    \"\"\"\n    ", "subset": "last_success", "original": "Return"}
{"__index_level_0__": 1094, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student27", "submitted_text": "A dict object contains keys and values. Check if \"Aspen\" is one of the keys in a dict. Return \"Yup\" if it is a key, \"Nope\" if it is not a key.", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    A dict object contains keys and values. Check if \"Aspen\" is one of the keys in a dict. Display \"Yup\" if it is a key, \"Nope\" if it is not a key.\n    \"\"\"\n    ", "subset": "last_success", "original": "Return"}
{"__index_level_0__": 1095, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student29", "submitted_text": "Return \"Yup\" if any of the dictionary keys are \"Aspen\", return \"Nope\" otherwise", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    Display \"Yup\" if any of the dictionary keys are \"Aspen\", display \"Nope\" otherwise\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1096, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student32", "submitted_text": "Returns \"Yup\" if there is an \"Aspen\" in the dictionary, and \"Nope\" if there isn't", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    Displays \"Yup\" if there is an \"Aspen\" in the dictionary, and \"Nope\" if there isn't\n    \"\"\"\n    ", "subset": "first_success", "original": "Returns"}
{"__index_level_0__": 1097, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student34", "submitted_text": "If \"Aspen\" appears as an item in the dictionary, output the string \"Yup\", and if it does not appear output the string \"Nope\"", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If \"Aspen\" appears as an item in the dictionary, display the string \"Yup\", and if it does not appear display the string \"Nope\"\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 1103, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student34", "submitted_text": "If it is true that 'Aspen' appears in the dictionary, output \"Yup\" and if it is false output \"Nope\"", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If it is true that 'Aspen' appears in the dictionary, display \"Yup\" and if it is false display \"Nope\"\n    \"\"\"\n    ", "subset": "last_failure", "original": "output"}
{"__index_level_0__": 1105, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student49", "submitted_text": "Given a dictionary with values, if the total of the values when added together is greater than 10 return Yup, otherwise return Nope", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    Given a dictionary with values, if the total of the values when added together is greater than 10 display Yup, otherwise display Nope\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1107, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student62", "submitted_text": "if \"Aspen\" is a key in the dictionary, return \"Yup\". If \"Aspen is not a key in the dictionary, return \"Nope\"", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    if \"Aspen\" is a key in the dictionary, display \"Yup\". If \"Aspen is not a key in the dictionary, display \"Nope\"\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1108, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student66", "submitted_text": "if the sting Aspen or Beech appears as a key in the dictionary then return Yup as a string if they do not appear then return Nope as a string", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    if the sting Aspen or Beech appears as a key in the dictionary then display Yup as a string if they do not appear then display Nope as a string\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1109, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student67", "submitted_text": "If the name is 'Aspen', returns 'Yup'. Otherwise returns 'Nope'.", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If the name is 'Aspen', displays 'Yup'. Otherwise displays 'Nope'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1113, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student67", "submitted_text": "If 'Aspen' is in the dictionary, returns 'Yup'. Otherwise returns 'Nope'.", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If 'Aspen' is in the dictionary, displays 'Yup'. Otherwise displays 'Nope'.\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1114, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student68", "submitted_text": "given an array formatted so that there is a String treename key and a number associated with that key, check if there is value that has a treename \"Aspen\" whose number is greater than 0. return \"Yup\" if it passes the check and \"Nope\" if it doesn't ", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    given an array formatted so that there is a String treename key and a number associated with that key, check if there is value that has a treename \"Aspen\" whose number is greater than 0. display \"Yup\" if it passes the check and \"Nope\" if it doesn't \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1117, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student68", "submitted_text": "given a dictionary check if there is a key, \"Aspen\". return \"Yup\" if it passes the check and \"Nope\" if it doesn't ", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    given a dictionary check if there is a key, \"Aspen\". display \"Yup\" if it passes the check and \"Nope\" if it doesn't \n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1118, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student70", "submitted_text": "if the input contains \"Aspen\" return \"Yup\", otherwise return \"Nope\"", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    if the input contains \"Aspen\" display \"Yup\", otherwise display \"Nope\"\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1129, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student31", "submitted_text": "Takes a string, a list of strings with length 1, and a separate string with length one called the replacement. Then, for each string in the list of strings, replaces any instance of them in the first string with the replacement string. Then returns this modified string. ", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Takes a string, a list of strings with length 1, and a separate string with length one called the replacement. Then, for each string in the list of strings, replaces any instance of them in the first string with the replacement string. Then displays this modified string. \n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 1137, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student55", "submitted_text": "Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a comma and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a comma and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just display the string.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1138, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student55", "submitted_text": "Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a double quotes or simple quotes and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a double quotes or simple quotes and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just display the string.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1139, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student58", "submitted_text": "use the string and the list to return a string", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    use the string and the list to display a string\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1142, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student27", "submitted_text": "The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Sort the dictionaries by \"year\" in an ascending order. Return the updated list.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Sort the dictionaries by \"year\" in an ascending order. Display the updated list.\n    \"\"\"\n    ", "subset": "last_success", "original": "Return"}
{"__index_level_0__": 1143, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student29", "submitted_text": "Check the second parameter of the input for the string of author name. Then return all input entries where the author value corresponds to that parameter", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Check the second parameter of the input for the string of author name. Then display all input entries where the author value corresponds to that parameter\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1148, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student29", "submitted_text": "Check the second parameter of the input for the string of author name. Then return a list with all input entries where the author value corresponds to that parameter, sorted in order according to the year value", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Check the second parameter of the input for the string of author name. Then display a list with all input entries where the author value corresponds to that parameter, sorted in order according to the year value\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1149, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student32", "submitted_text": "Sort the elements of the array by the year value in its dictionary, from highest to lowest. Then removes the last element in the array and returns the rest", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Sort the elements of the array by the year value in its dictionary, from highest to lowest. Then removes the last element in the array and displays the rest\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1151, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student32", "submitted_text": "Returns the list with the a\n\nSort the elements of the array by the year value in its dictionary, from lowest to highest. Then removes the last element in the array and returns the rest", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Displays the list with the a\n\nSort the elements of the array by the year value in its dictionary, from lowest to highest. Then removes the last element in the array and displays the rest\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 1153, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student49", "submitted_text": "Given a list of dictionaries and a string, return a list of the dictionaries where the string is the value of the author key.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Given a list of dictionaries and a string, display a list of the dictionaries where the string is the value of the author key.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1155, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student49", "submitted_text": "Given a list of dictionaries and a string, return a list of the dictionaries where the string is the value of the author key and each dictionary in the list is sorted by ascending the values in the year key.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Given a list of dictionaries and a string, display a list of the dictionaries where the string is the value of the author key and each dictionary in the list is sorted by ascending the values in the year key.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1156, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student56", "submitted_text": "iterates through a list of dictionaries and adds the dictionaries with a given writer to a new list, returns the new list", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    iterates through a list of dictionaries and adds the dictionaries with a given writer to a new list, displays the new list\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1162, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student67", "submitted_text": "Returns a list of dictionaries of the specified author.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Displays a list of dictionaries of the specified author.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Returns"}
{"__index_level_0__": 1167, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student68", "submitted_text": "given a dictionary list and a string, return all the dictionaries whose 'author' key value equals the input string ", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    given a dictionary list and a string, display all the dictionaries whose 'author' key value equals the input string \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1169, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student68", "submitted_text": "given a dictionary list and a string, return all the dictionaries whose 'author' key value equals the input string in the order from lowest to highest value of their 'year' key value ", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    given a dictionary list and a string, display all the dictionaries whose 'author' key value equals the input string in the order from lowest to highest value of their 'year' key value \n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1170, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student70", "submitted_text": "return all the entries in the dictionary where the value for the 'author' key is equal to the input writer.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    display all the entries in the dictionary where the value for the 'author' key is equal to the input writer.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1174, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student70", "submitted_text": "return all the entries in the input list where the value for the 'author' key is equal to the input writer. Sort the entries in order of increasing year.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    display all the entries in the input list where the value for the 'author' key is equal to the input writer. Sort the entries in order of increasing year.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1175, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student78", "submitted_text": "if books is a list of dictionaries, output a list of dictionaries where the input writer matches the key author", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    if books is a list of dictionaries, display a list of dictionaries where the input writer matches the key author\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 1183, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student33", "submitted_text": "The function takes in a list of dictionaries. The function divides the value for \"wins\" in the dictionary by the value for \"noms\" in the dictionary, adding a new entry to that dictionary called \"success\" with the output value truncated to two decimal places. It then sorts the dictionary entries by the value in \"success,\" highest to lowest, returning the dictionaries each on a separate line. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries. The function divides the value for \"wins\" in the dictionary by the value for \"noms\" in the dictionary, adding a new entry to that dictionary called \"success\" with the output value truncated to two decimal places. It then sorts the dictionary entries by the value in \"success,\" highest to lowest, displaying the dictionaries each on a separate line. \n    \"\"\"\n    ", "subset": "last_failure", "original": "returning"}
{"__index_level_0__": 1188, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student40", "submitted_text": "the function will divide the number of wins by the number of noms. this will be defined by the new variable 'success'. the function will then return a list that orders the input in increasing order of success values", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    the function will divide the number of wins by the number of noms. this will be defined by the new variable 'success'. the function will then display a list that orders the input in increasing order of success values\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1190, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student40", "submitted_text": "the input is a list of dictionaries. the function will divide the value within key 'wins' by the value within key 'noms'. this number will be rounded to two decimal values. the new number will be stores as a new key, 'success'. the function will then return a list that reorders the dictionaries within the original list, in order of highest success value to lowest success value.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    the input is a list of dictionaries. the function will divide the value within key 'wins' by the value within key 'noms'. this number will be rounded to two decimal values. the new number will be stores as a new key, 'success'. the function will then display a list that reorders the dictionaries within the original list, in order of highest success value to lowest success value.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1191, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student44", "submitted_text": "For every dictionary in the array,\ncalculate the 'success' by dividing the value of wins by noms and add it into the dictionary. \nSort the array in descending order of the value of 'sucess' and print the array. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    For every dictionary in the array,\ncalculate the 'success' by dividing the value of wins by noms and add it into the dictionary. \nSort the array in descending order of the value of 'sucess' and display the array. \n    \"\"\"\n    ", "subset": "first_failure", "original": "print"}
{"__index_level_0__": 1192, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student44", "submitted_text": "For every dictionary in the array,\ncalculate the 'success' by dividing the value of wins by noms and add it into the dictionary. \nSort the array in descending order of the value of 'success' and print the array. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    For every dictionary in the array,\ncalculate the 'success' by dividing the value of wins by noms and add it into the dictionary. \nSort the array in descending order of the value of 'success' and display the array. \n    \"\"\"\n    ", "subset": "last_failure", "original": "print"}
{"__index_level_0__": 1193, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student50", "submitted_text": "Add a new part to each element in the list of dictionaries called \"success\". Calculate success by dividing wins by noms. Return in reverse alphabetical order.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Add a new part to each element in the list of dictionaries called \"success\". Calculate success by dividing wins by noms. Display in reverse alphabetical order.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 1195, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student50", "submitted_text": "Add a new element to each nominee's dictionary called \"success\". Calculate success by dividing the number of wins by the number of losses. Return in reverse order.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    Add a new element to each nominee's dictionary called \"success\". Calculate success by dividing the number of wins by the number of losses. Display in reverse order.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 1196, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student59", "submitted_text": "takes a list of dictionaries as an input. returns an ordered list of the dictionaries in the input", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    takes a list of dictionaries as an input. displays an ordered list of the dictionaries in the input\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1199, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student60", "submitted_text": "This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then displays this dictionary with an added parameter of an average of wins to nominations. \n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1201, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student60", "submitted_text": "This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions output is a single 2d list.\n\nAs an example. Given  [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}] as a parameter this function outputs [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then displays this dictionary with an added parameter of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions output is a single 2d list.\n\nAs an example. Given  [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}] as a parameter this function displays [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\n    \"\"\"\n    ", "subset": "last_failure", "original": "outputs"}
{"__index_level_0__": 1202, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student63", "submitted_text": "The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms'. The outputted list will also be arranged in descending order based on the value of 'success'.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries and displays the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms'. The outputted list will also be arranged in descending order based on the value of 'success'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 1203, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student63", "submitted_text": "The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms', rounded to the second decimal place. The outputted list will also be arranged in descending order based on the value of 'success'.  ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function takes in a list of dictionaries and displays the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms', rounded to the second decimal place. The outputted list will also be arranged in descending order based on the value of 'success'.  \n    \"\"\"\n    ", "subset": "last_success", "original": "outputs"}
{"__index_level_0__": 1211, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student75", "submitted_text": "def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', indent after each {}", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand displays output in order of least amount of 'wins', if the same displays based on least amount of 'noms', indent after each {}\n    \"\"\"\n    ", "subset": "first_failure", "original": "prints"}
{"__index_level_0__": 1217, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student75", "submitted_text": "def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand displays output in order of least amount of 'wins', if the same displays based on least amount of 'noms', \n    \"\"\"\n    ", "subset": "last_failure", "original": "prints"}
{"__index_level_0__": 1227, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student5", "submitted_text": "this function will take a list of flights and the origin city and return the possible layovers with the staring city. Each item in the list of flights will first state the origin city and then state the destination city. If there is a flight with a destination city the same as the same as a flight with the origin city then add it the the output list. ", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    this function will take a list of flights and the origin city and display the possible layovers with the staring city. Each item in the list of flights will first state the origin city and then state the destination city. If there is a flight with a destination city the same as the same as a flight with the origin city then add it the the output list. \n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 1228, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student8", "submitted_text": "Finds a dictionary in the given list with a key of \"origin\" that has the same given string as its value, then takes that dictionary and saves the value stored in \n\nReturns a list that ", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    Finds a dictionary in the given list with a key of \"origin\" that has the same given string as its value, then takes that dictionary and saves the value stored in \n\nDisplays a list that \n    \"\"\"\n    ", "subset": "first_failure", "original": "Returns"}
{"__index_level_0__": 1230, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student13", "submitted_text": "Based on the inputted origin, the function will return the possible destinations with one layover location. ", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    Based on the inputted origin, the function will display the possible destinations with one layover location. \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1235, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student22", "submitted_text": "takes in a list of dictionaries and outputs a list of values that can be made with two key value pair matches", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    takes in a list of dictionaries and displays a list of values that can be made with two key value pair matches\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 1236, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student22", "submitted_text": "takes in a list of dictionaries and a string, uses that string as the value for 'origin', finds a corresponding 'dest' and does that twice. if it can do it twice, output the corresponding 'dest', if not output an empty string\n", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    takes in a list of dictionaries and a string, uses that string as the value for 'origin', finds a corresponding 'dest' and does that twice. if it can do it twice, display the corresponding 'dest', if not display an empty string\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "output"}
{"__index_level_0__": 1244, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student12", "submitted_text": "Return a list of the 0th element each list of scientists if the 2nd element says \"Physics\". Sort this list from least to greatest by looking at the 1st value in each list within the scientists list. Return this sorted list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Display a list of the 0th element each list of scientists if the 2nd element says \"Physics\". Sort this list from least to greatest by looking at the 1st value in each list within the scientists list. Display this sorted list.\n    \"\"\"\n    ", "subset": "last_success", "original": "Return"}
{"__index_level_0__": 1245, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student19", "submitted_text": "Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is appended to an output list. After all small lists have been checked, it outputs the output list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is appended to an output list. After all small lists have been checked, it displays the output list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 1246, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student19", "submitted_text": "Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is added to an output list. The corresponding number is also recorded. If the number for an item which is being added is less than the corresponding number for the first item in the output list, it is added to the beginning of the output list. Otherwise, it is added to the end. After all small lists have been checked, it outputs the output list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is added to an output list. The corresponding number is also recorded. If the number for an item which is being added is less than the corresponding number for the first item in the output list, it is added to the beginning of the output list. Otherwise, it is added to the end. After all small lists have been checked, it displays the output list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "outputs"}
{"__index_level_0__": 1247, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student20", "submitted_text": "Return a list of the first string in the list of lists that contain 'Physics'", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Display a list of the first string in the list of lists that contain 'Physics'\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 1253, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student36", "submitted_text": "If the list contains \"Physics\" return the first string in order of the numbers from lowest to highest", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    If the list contains \"Physics\" display the first string in order of the numbers from lowest to highest\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1256, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student36", "submitted_text": "The internal lists contain name, year graduated and subject. If the subject is \"Physics\" return just the names, in order of what year they graduated from lowest to highest", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    The internal lists contain name, year graduated and subject. If the subject is \"Physics\" display just the names, in order of what year they graduated from lowest to highest\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1260, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student42", "submitted_text": "given a list of lists, where each sublist is the name of a scientist, their age, and their field indexed in that order, return a list that contains only the names of scientists whose field is \"Physics\", such that the scientist's name who has the smallest age appears first in the output list. ", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    given a list of lists, where each sublist is the name of a scientist, their age, and their field indexed in that order, display a list that contains only the names of scientists whose field is \"Physics\", such that the scientist's name who has the smallest age appears first in the output list. \n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1261, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student43", "submitted_text": "Loop through each list in scientists: check if the third element in the list is Physics. If true, return the 1st element in the list. If false, do nothing.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Loop through each list in scientists: check if the third element in the list is Physics. If true, display the 1st element in the list. If false, do nothing.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1263, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student43", "submitted_text": "Create an empty list A. Loop through each list in scientists: check if the third element in the list is Physics. If true, append the 1st element to list A. If false, do nothing. Now reorder each element in A, according to each element's corresponding list in scientists's second entry value, the order should be from smallest numerical value to the largest numerical value.  Return list A.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Create an empty list A. Loop through each list in scientists: check if the third element in the list is Physics. If true, append the 1st element to list A. If false, do nothing. Now reorder each element in A, according to each element's corresponding list in scientists's second entry value, the order should be from smallest numerical value to the largest numerical value.  Display list A.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 1264, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student54", "submitted_text": "If the list contains \"Physics\", return the string at index 0. Sort these into a new list based off the integer at index 1.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    If the list contains \"Physics\", display the string at index 0. Sort these into a new list based off the integer at index 1.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1267, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student57", "submitted_text": "when given a list of lists, if last index of list in lists is equal to \"Physics\", return the first value in list of lists in a new list", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    when given a list of lists, if last index of list in lists is equal to \"Physics\", display the first value in list of lists in a new list\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1269, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student57", "submitted_text": "when given a list of lists, if last index of list in lists is equal to \"Physics\", return the first value in list of lists in a new list. however, if multiple values are to be added to the new list, list in order of ascending order of the second value in list of lists.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    when given a list of lists, if last index of list in lists is equal to \"Physics\", display the first value in list of lists in a new list. however, if multiple values are to be added to the new list, list in order of ascending order of the second value in list of lists.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1270, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student77", "submitted_text": "Given a set of lists with a scientist, number, and a subject, respectively, only return the scientist if the subject is \"Physics\" in a list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Given a set of lists with a scientist, number, and a subject, respectively, only display the scientist if the subject is \"Physics\" in a list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1279, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student2", "submitted_text": "This function prints the start value and adds the value factor until it reaches the stop value", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    This function displays the start value and adds the value factor until it reaches the stop value\n    \"\"\"\n    ", "subset": "last_failure", "original": "prints"}
{"__index_level_0__": 1294, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student16", "submitted_text": "from the start number inputted, count by the factor until the stop number, including the stop number and return as list", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    from the start number inputted, count by the factor until the stop number, including the stop number and display as list\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 1295, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student22", "submitted_text": "take in a list of integers [start number, final number, step size] and output a list based on those parameters", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    take in a list of integers [start number, final number, step size] and display a list based on those parameters\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 1298, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student22", "submitted_text": "take in a list of integers [start, stop, factor] and output a list starting at the closest even number to the start, and including the stop number", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    take in a list of integers [start, stop, factor] and display a list starting at the closest even number to the start, and including the stop number\n    \"\"\"\n    ", "subset": "last_success", "original": "output"}
{"__index_level_0__": 1300, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student61", "submitted_text": "Function returns multiples between first two items in the input in multiples of the third item", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    Function displays multiples between first two items in the input in multiples of the third item\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1302, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student61", "submitted_text": "Function returns multiples from the first item to the second item (including the second item) in the input in multiples of the third item", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    Function displays multiples from the first item to the second item (including the second item) in the input in multiples of the third item\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1303, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student72", "submitted_text": "Produce a list of multiples with the given input. The first and second number of the input are the bounds and the last number is the multiple.", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    Display a list of multiples with the given input. The first and second number of the input are the bounds and the last number is the multiple.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Produce"}
{"__index_level_0__": 1304, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student72", "submitted_text": "Produce a list of multiples with the given input. The first number of the input is the starting bound and the second number is the the ending bound, but is included in the list of multiples if applicable. The last number is the multiple.", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    Display a list of multiples with the given input. The first number of the input is the starting bound and the second number is the the ending bound, but is included in the list of multiples if applicable. The last number is the multiple.\n    \"\"\"\n    ", "subset": "last_success", "original": "Produce"}
{"__index_level_0__": 1311, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student23", "submitted_text": "This function takes in a list of the item purchased, the amount of the item purchased, the price for each item, and the overall sales tax. The amount purchased is multiplied with the price for each item, creating a total amount. The sales tax is then multiplied by the outcome of the total amount, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function takes in a list of the item purchased, the amount of the item purchased, the price for each item, and the overall sales tax. The amount purchased is multiplied with the price for each item, creating a total amount. The sales tax is then multiplied by the outcome of the total amount, and then the result of the multiplication is added onto the total price. The total price is then displayed as the output.\n    \"\"\"\n    ", "subset": "last_failure", "original": "returned"}
{"__index_level_0__": 1312, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student33", "submitted_text": "The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\"", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and displays that value added to the \"total\"\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 1313, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student33", "submitted_text": "The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\", truncated to two decimal places.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and displays that value added to the \"total\", truncated to two decimal places.\n    \"\"\"\n    ", "subset": "last_success", "original": "outputs"}
{"__index_level_0__": 1316, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student40", "submitted_text": "the function will multiply the last two values in each list within the list. this value will then be multiplied by the value outside of the list. these two numbers will be added to each other and returned", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    the function will multiply the last two values in each list within the list. this value will then be multiplied by the value outside of the list. these two numbers will be added to each other and displayed\n    \"\"\"\n    ", "subset": "first_failure", "original": "returned"}
{"__index_level_0__": 1318, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student40", "submitted_text": "the function will multiply the last two values in each list within the list. these numbers will all be added together and stored in variable 'cost'. the variable 'cost' will then be multiplied by the value outside of the list. the product will be stored in a new variable, 'tax'. a new variable, 'total_cost', will contain the sum of the values of 'cost' and 'tax'. the value of total_cost will be rounded to two decimal places. the function will return the value of the variable 'total_cost'.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    the function will multiply the last two values in each list within the list. these numbers will all be added together and stored in variable 'cost'. the variable 'cost' will then be multiplied by the value outside of the list. the product will be stored in a new variable, 'tax'. a new variable, 'total_cost', will contain the sum of the values of 'cost' and 'tax'. the value of total_cost will be rounded to two decimal places. the function will display the value of the variable 'total_cost'.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1323, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student59", "submitted_text": "takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an integer that is the sales tax times the sum of all goods' quantity*price", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. displays an integer that is the sales tax times the sum of all goods' quantity*price\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1326, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student59", "submitted_text": "takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an float that is the sales tax times times the sum of all goods' quantity*price", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. displays an float that is the sales tax times times the sum of all goods' quantity*price\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 1327, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student60", "submitted_text": "This function takes in a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. ", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function takes in a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items displays it. \n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1328, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student60", "submitted_text": "This function takes in a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. This function rounds to 2 decimal points", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function takes in a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items displays it. This function rounds to 2 decimal points\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1329, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student63", "submitted_text": "The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by the inputted number. That result is outputted.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by the inputted number. That result is displayed.\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputted"}
{"__index_level_0__": 1331, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student63", "submitted_text": "The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by 1 plus the inputted number. That result, rounded to two decimal places, is outputted.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by 1 plus the inputted number. That result, rounded to two decimal places, is displayed.\n    \"\"\"\n    ", "subset": "last_success", "original": "outputted"}
{"__index_level_0__": 1340, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student75", "submitted_text": "def total_bill(grocery_list, sales_tax): takes input \n[['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07\nand adds val 1 and 2 together, then 4 and 5, then 7 and 8, the three new vals are added to val 9 and it outputs the sum\n", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    def total_bill(grocery_list, sales_tax): takes input \n[['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07\nand adds val 1 and 2 together, then 4 and 5, then 7 and 8, the three new vals are added to val 9 and it displays the sum\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 1341, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student75", "submitted_text": "def total_bill(grocery_list, sales_tax): takes input \n[['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07\nand adds val 1 and 2 together, then 4 and 5, then 7 and 8, the three new vals are added to val 9 and it outputs the sum with four digits\n", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    def total_bill(grocery_list, sales_tax): takes input \n[['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07\nand adds val 1 and 2 together, then 4 and 5, then 7 and 8, the three new vals are added to val 9 and it displays the sum with four digits\n\n    \"\"\"\n    ", "subset": "last_success", "original": "outputs"}
{"__index_level_0__": 1349, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student40", "submitted_text": "the function will use the dictionary provided. the string provided will correspond to the keys of the dictionary. the function will return a new string that contains values that correspond to the keys. if a key is not in the string, then the return value will be 'UNK'", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    the function will use the dictionary provided. the string provided will correspond to the keys of the dictionary. the function will display a new string that contains values that correspond to the keys. if a key is not in the string, then the return value will be 'UNK'\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1350, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student44", "submitted_text": "Separate the string in the second argument between the white spaces and for each smaller string, search if there's a key that matches in the dictionary in the first argument. If there is a matching key, output its value. If there is no key found, output UNK. For each output, separate by a white space. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Separate the string in the second argument between the white spaces and for each smaller string, search if there's a key that matches in the dictionary in the first argument. If there is a matching key, display its value. If there is no key found, display UNK. For each output, separate by a white space. \n    \"\"\"\n    ", "subset": "first_success", "original": "output"}
{"__index_level_0__": 1353, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student59", "submitted_text": "takes a dictionary and a string as inputs. returns a translated version of the inputted string", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    takes a dictionary and a string as inputs. displays a translated version of the inputted string\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1354, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student59", "submitted_text": "takes a dictionary and a string as inputs. returns a translated version of the inputted string. if a word in the inputted string is not in the inputted dictionary, the translated version of that word is 'UNK'", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    takes a dictionary and a string as inputs. displays a translated version of the inputted string. if a word in the inputted string is not in the inputted dictionary, the translated version of that word is 'UNK'\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1355, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student60", "submitted_text": "This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then prints the string in french. If a word in the function is not in the dictionary, the function prints 'UNK' for that word. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then displays the string in french. If a word in the function is not in the dictionary, the function displays 'UNK' for that word. \n    \"\"\"\n    ", "subset": "first_failure", "original": "prints"}
{"__index_level_0__": 1358, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student60", "submitted_text": "This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then returns the string in french. If a word in the function is not in the dictionary, the function returns 'UNK' for that word. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then displays the string in french. If a word in the function is not in the dictionary, the function displays 'UNK' for that word. \n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1359, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student63", "submitted_text": "The function takes in a dictionary and a string for which each word in the string is a key in the dictionary. It outputs a string that substitutes the original word for the dictionary value associated with that key. If a word in the original string is not found in the dictionary, the substituted word will be 'UNK'.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    The function takes in a dictionary and a string for which each word in the string is a key in the dictionary. It displays a string that substitutes the original word for the dictionary value associated with that key. If a word in the original string is not found in the dictionary, the substituted word will be 'UNK'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 1363, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student69", "submitted_text": "Enter a string. Separate the string on spaces and add each group of strings to a list. if the word in the list matches a key in the dictionary, print the value of that key.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Enter a string. Separate the string on spaces and add each group of strings to a list. if the word in the list matches a key in the dictionary, display the value of that key.\n    \"\"\"\n    ", "subset": "first_failure", "original": "print"}
{"__index_level_0__": 1364, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student69", "submitted_text": "Enter a string. Separate the string on spaces and add each word to a list. For every word in the list, if the word matches a key in the dictionary, print the value of that key.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Enter a string. Separate the string on spaces and add each word to a list. For every word in the list, if the word matches a key in the dictionary, display the value of that key.\n    \"\"\"\n    ", "subset": "last_failure", "original": "print"}
{"__index_level_0__": 1366, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student75", "submitted_text": "def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and display french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 1369, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student75", "submitted_text": "def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and display french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation\n    \"\"\"\n    ", "subset": "last_failure", "original": "output"}
{"__index_level_0__": 1370, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student76", "submitted_text": "looks through a dictionary for english words and their translations and returns the translations if they are present in the dictionary. If they are not present it returns 'UNK'", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    looks through a dictionary for english words and their translations and displays the translations if they are present in the dictionary. If they are not present it displays 'UNK'\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 1374, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student6", "submitted_text": "Input of a nested list. Inner lists contain a string 'Name' and an integer. Outer is a list of all inner lists. Outputs a list containing each 'Name' in an order based on the number associated with each name in the inner list", "prompt": "def topScores(lst):\n    \"\"\"\n    Input of a nested list. Inner lists contain a string 'Name' and an integer. Outer is a list of all inner lists. Displays a list containing each 'Name' in an order based on the number associated with each name in the inner list\n    \"\"\"\n    ", "subset": "first_failure", "original": "Outputs"}
{"__index_level_0__": 1376, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student7", "submitted_text": "Iterates through a list of lists, with each list housing the age and name of a person respectively. Returns a list of the names of people in from oldest to youngest, as long as there is less than a 10-year gap between the two. \n", "prompt": "def topScores(lst):\n    \"\"\"\n    Iterates through a list of lists, with each list housing the age and name of a person respectively. Displays a list of the names of people in from oldest to youngest, as long as there is less than a 10-year gap between the two. \n\n    \"\"\"\n    ", "subset": "first_failure", "original": "Returns"}
{"__index_level_0__": 1395, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function finds the highest number in the list, and prints the string next to it in order from highest number to lowest number.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function finds the highest number in the list, and displays the string next to it in order from highest number to lowest number.\n    \"\"\"\n    ", "subset": "first_failure", "original": "prints"}
{"__index_level_0__": 1403, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function reads the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The strings are then printed in the order of their corresponding numbers.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function reads the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The strings are then displayed in the order of their corresponding numbers.\n    \"\"\"\n    ", "subset": "last_failure", "original": "printed"}
{"__index_level_0__": 1404, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student14", "submitted_text": "output the first four names with a number above 80", "prompt": "def topScores(lst):\n    \"\"\"\n    display the first four names with a number above 80\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 1406, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student14", "submitted_text": "if the first item in the string is equal to or greater than 80, print the second item in the string", "prompt": "def topScores(lst):\n    \"\"\"\n    if the first item in the string is equal to or greater than 80, display the second item in the string\n    \"\"\"\n    ", "subset": "last_failure", "original": "print"}
{"__index_level_0__": 1407, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student15", "submitted_text": "For each list in lst, if the number is greater than 76, adds the name to a list. Returns the list.", "prompt": "def topScores(lst):\n    \"\"\"\n    For each list in lst, if the number is greater than 76, adds the name to a list. Displays the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Returns"}
{"__index_level_0__": 1420, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student24", "submitted_text": "Return the name of a person in the list who scored 80 or above.", "prompt": "def topScores(lst):\n    \"\"\"\n    Display the name of a person in the list who scored 80 or above.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 1421, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student24", "submitted_text": "Check each list inside the list given, and if the list[0] is greater than or equal to 80, return a list of that list[1]", "prompt": "def topScores(lst):\n    \"\"\"\n    Check each list inside the list given, and if the list[0] is greater than or equal to 80, display a list of that list[1]\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 1423, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student31", "submitted_text": "Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Returns a list of the names whose corresponding scores were the highest, and were a minimum of 80.", "prompt": "def topScores(lst):\n    \"\"\"\n    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Displays a list of the names whose corresponding scores were the highest, and were a minimum of 80.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Returns"}
{"__index_level_0__": 1426, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student31", "submitted_text": "Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Sorts this list from highest integer score to lowest, and returns a list of the names whose corresponding scores were a minimum of 80, with a maximum list length of 5.", "prompt": "def topScores(lst):\n    \"\"\"\n    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Sorts this list from highest integer score to lowest, and displays a list of the names whose corresponding scores were a minimum of 80, with a maximum list length of 5.\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1427, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student39", "submitted_text": "The goal for the function topScores is when provided a list including a numerical scores and names is to return the names of those who have the highest scores ", "prompt": "def topScores(lst):\n    \"\"\"\n    The goal for the function topScores is when provided a list including a numerical scores and names is to display the names of those who have the highest scores \n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1428, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student39", "submitted_text": "The goal for the function topScores is when provided a list including a numerical scores and names is to return the names of those who have the highest scores above 80", "prompt": "def topScores(lst):\n    \"\"\"\n    The goal for the function topScores is when provided a list including a numerical scores and names is to display the names of those who have the highest scores above 80\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 1436, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student45", "submitted_text": "Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. Output finalLst.", "prompt": "def topScores(lst):\n    \"\"\"\n    Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. Display finalLst.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Output"}
{"__index_level_0__": 1437, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student46", "submitted_text": "The function takes in a list of two item lists, where the first item is an integer and the second is a string. Eliminate any lists that integers are below 80, then order up to the largest five integers and output the strings associated with them.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function takes in a list of two item lists, where the first item is an integer and the second is a string. Eliminate any lists that integers are below 80, then order up to the largest five integers and display the strings associated with them.\n    \"\"\"\n    ", "subset": "first_success", "original": "output"}
{"__index_level_0__": 1439, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student47", "submitted_text": "\"produce all the strings that are associated with 100, 99, 97, 95, 92 in order\"", "prompt": "def topScores(lst):\n    \"\"\"\n    \"display all the strings that are associated with 100, 99, 97, 95, 92 in order\"\n    \"\"\"\n    ", "subset": "last_failure", "original": "produce"}
{"__index_level_0__": 1440, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "taken lst, return the list of strings whose integer is greater than 80", "prompt": "def topScores(lst):\n    \"\"\"\n    taken lst, display the list of strings whose integer is greater than 80\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1450, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "if 0th index of the nested list of lst is greater than or equal to 80, return a list of the 1st index in the order from the largest 0th index integer. Return up to a list of 5 items. ", "prompt": "def topScores(lst):\n    \"\"\"\n    if 0th index of the nested list of lst is greater than or equal to 80, display a list of the 1st index in the order from the largest 0th index integer. Display up to a list of 5 items. \n    \"\"\"\n    ", "subset": "last_success", "original": "Return"}
{"__index_level_0__": 1451, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student55", "submitted_text": "Write a function that gets a list of lists of grades and names of students, and returns the name from the highest grade to the lowest, if only the grades are higher than 80.", "prompt": "def topScores(lst):\n    \"\"\"\n    Write a function that gets a list of lists of grades and names of students, and displays the name from the highest grade to the lowest, if only the grades are higher than 80.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1455, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student55", "submitted_text": "Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function returns the names of 5 students with grades higher or equal to 80. The order of the return is from the highest grade to the lowest one.", "prompt": "def topScores(lst):\n    \"\"\"\n    Write a function that runs through a list of lists with 2 elements. The first element is the grade and the second element is the name of the student. This function displays the names of 5 students with grades higher or equal to 80. The order of the display is from the highest grade to the lowest one.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1457, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student65", "submitted_text": "This function has a list of lists of length 2 as inputs. If the first entry in the list (the score) is greater than 80, add the second entry in the list (the name) to a list to be output at the end.", "prompt": "def topScores(lst):\n    \"\"\"\n    This function has a list of lists of length 2 as inputs. If the first entry in the list (the score) is greater than 80, add the second entry in the list (the name) to a list to be displayed at the end.\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 1474, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student40", "submitted_text": "when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing strings, the function will display 1 list. Each individual string within the first list will be combined with each string in the other list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1478, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student40", "submitted_text": "when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second. the new strings in the new list will appear in alphabetical order. if multiple strings have the same first letter, then they will appear in numerical order.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing strings, the function will display 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second. the new strings in the new list will appear in alphabetical order. if multiple strings have the same first letter, then they will appear in numerical order.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1483, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student50", "submitted_text": "There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be displayed. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Display the list in alphabetical order.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 1487, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student50", "submitted_text": "There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Reorder the new list to make it in alphabetical and numerical order, then return", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be displayed [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Reorder the new list to make it in alphabetical and numerical order, then display\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1488, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student59", "submitted_text": "takes a list of suits and a list of values as inputs. returns a list of all possible combinations of suits and values.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    takes a list of suits and a list of values as inputs. displays a list of all possible combinations of suits and values.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1492, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student59", "submitted_text": "takes a list of suits and a list of values as inputs. returns an ordered list of all possible combinations of suits and values", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    takes a list of suits and a list of values as inputs. displays an ordered list of all possible combinations of suits and values\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 1493, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student60", "submitted_text": "This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a list as its parameters. This function displays out every combination of these parameters. \n    \"\"\"\n    ", "subset": "first_failure", "original": "prints"}
{"__index_level_0__": 1498, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student60", "submitted_text": "This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters sorted alphabetically. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function inputs suits and vals as a list as its parameters. This function displays out every combination of these parameters sorted alphabetically. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function displays\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. \n    \"\"\"\n    ", "subset": "last_success", "original": "prints"}
{"__index_level_0__": 1499, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student63", "submitted_text": "The function takes in multiple lists made up of single characters and outputs one list in which all the entries are two characters strings made up of the combination of each character from each original list. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes in multiple lists made up of single characters and displays one list in which all the entries are two character strings made up of the combination of each character from each original list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "outputs"}
{"__index_level_0__": 1500, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student63", "submitted_text": "The function takes in multiple lists made up of single characters and outputs one list in which all the entries are two characters strings made up of the combination of each character from each original list. The resulting list will be arranged in alphabetical order based on the letters of each string.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes in multiple lists made up of single characters and displays one list in which all the entries are two character strings made up of the combination of each character from each original list. The resulting list will be arranged in alphabetical order based on the letters of each string.\n    \"\"\"\n    ", "subset": "last_success", "original": "outputs"}
{"__index_level_0__": 1509, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student69", "submitted_text": "Enter two arrays of characters. Print an array with the first array multiplied by the second array.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    Enter two arrays of characters. Display an array with the first array multiplied by the second array.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Print"}
{"__index_level_0__": 1511, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student69", "submitted_text": "Enter two arrays of characters. Reverse the order of the first array. Print an array with the the first array multiplied by the second array.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    Enter two arrays of characters. Reverse the order of the first array. Display an array with the the first array multiplied by the second array.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Print"}
{"__index_level_0__": 1513, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "The data on the left is put through the defined function generateCardDeck to output data on the right.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The data on the left is put through the defined function generateCardDeck to display data on the right.\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 1534, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], Card then reverses the order of suit[] making the variables print in the opposite order starting with ['D'], this program then outputs and combination of the suit [] and val []\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], Card then reverses the order of val[] making the variables print in the opposite order starting with ['2'], this program then outputs and combination of the opposite order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], Card then reverses the order of suit[] making the variable display in the opposite order starting with ['D'], this program then displays and combination of the suit [] and val []\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], Card then reverses the order of val[] making the variables display in the opposite order starting with ['2'], this program then displays and combination of the opposite order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then displays and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "last_failure", "original": "outputs"}
{"__index_level_0__": 1548, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student7", "submitted_text": "Sorts each item in the list in reverse alphabetical order. Returns the overall list in alphabetical order", "prompt": "def reverseWords(words):\n    \"\"\"\n    Sorts each item in the list in reverse alphabetical order. Displays the overall list in alphabetical order\n    \"\"\"\n    ", "subset": "last_success", "original": "Returns"}
{"__index_level_0__": 1558, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student15", "submitted_text": "For each word in the list, reverses the order of the letters. Returns a list of the new words in alphabetical order.", "prompt": "def reverseWords(words):\n    \"\"\"\n    For each word in the list, reverses the order of the letters. Displays a list of the new words in alphabetical order.\n    \"\"\"\n    ", "subset": "last_success", "original": "Returns"}
{"__index_level_0__": 1559, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student24", "submitted_text": "for each word in the list, return a new list with the word from the previous list spelled backwards, starting from the end of the list", "prompt": "def reverseWords(words):\n    \"\"\"\n    for each word in the list, display a new list with the word from the previous list spelled backwards, starting from the end of the list\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1562, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student31", "submitted_text": "Takes a list of strings, and then individually reverses the order of the characters in each string. Then, sorts the list alphabetically. Then, returns this modified list. ", "prompt": "def reverseWords(words):\n    \"\"\"\n    Takes a list of strings, and then individually reverses the order of the characters in each string. Then, sorts the list alphabetically. Then, displays this modified list. \n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 1575, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student55", "submitted_text": "Write a function that gets strings from a list. Reverse all the strings and returns the reversed string in a list.", "prompt": "def reverseWords(words):\n    \"\"\"\n    Write a function that gets strings from a list. Reverse all the strings and displays the reversed string in a list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1576, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student55", "submitted_text": "Write a function that gets strings from a list. Reverse all the strings and returns the reversed string in a list. The order of the strings in the return statement should be in alphabetical order from the input.", "prompt": "def reverseWords(words):\n    \"\"\"\n    Write a function that gets strings from a list. Reverse all the strings and displays the reversed string in a list. The order of the strings in the return statement should be in alphabetical order from the input.\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1577, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student58", "submitted_text": "Return each string in the list in reverse", "prompt": "def reverseWords(words):\n    \"\"\"\n    Display each string in the list in reverse\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 1584, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student0", "submitted_text": "takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of integer of num times 100 divided by the length of the first list and concatenate a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    takes in two lists. If the lists have the same value at the same index, add one to a num variable. display the string of integer of num times 100 divided by the length of the first list and concatenate a percent sign.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1591, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student4", "submitted_text": "determines the percent of items in list 1 that are identical to the items in list 2, returns number rounded to the nearest whole numbers including percent sign", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    determines the percent of items in list 1 that are identical to the items in list 2, displays number rounded to the nearest whole numbers including percent sign\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1592, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student10", "submitted_text": "User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would display the percentage of times the two items match.\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1595, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student10", "submitted_text": "User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would return the percentage of times the two items match, as an integer with no decimal spaces with a % sign at the end.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    User inputs two lists of equal length. Program would compare each item against second list's corresponding item, and would display the percentage of times the two items match, as an integer with no decimal spaces with a % sign at the end.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 1606, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student21", "submitted_text": "given two lists, divide the number of 'X' in the first list by the length of the list and multiply by 100. Return the String of this obtained number plus the percentage sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    given two lists, divide the number of 'X' in the first list by the length of the list and multiply by 100. Display the String of this obtained number plus the percentage sign.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 1608, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student21", "submitted_text": "given two lists, divide the number of 'X' in the first list by the length of the list, multiply by 100. Subtract this number from 100. Return the String of this obtained number as an integer plus the percentage sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    given two lists, divide the number of 'X' in the first list by the length of the list, multiply by 100. Subtract this number from 100. Display the String of this obtained number as an integer plus the percentage sign.\n    \"\"\"\n    ", "subset": "last_success", "original": "Return"}
{"__index_level_0__": 1609, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student25", "submitted_text": "This function compares how similar 2 lists are and returns the percent of the guess list that matches the answer list.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    This function compares how similar 2 lists are and displays the percent of the guess list that matches the answer list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1612, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student25", "submitted_text": "This function compares how similar 2 lists are and returns the percent of the guess list that matches the answer list. The percentage is multiplied by 100, rounded to have no decimal, and \"%\" is added to the final result.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    This function compares how similar 2 lists are and displays the percent of the guess list that matches the answer list. The percentage is multiplied by 100, rounded to have no decimal, and \"%\" is added to the final result.\n    \"\"\"\n    ", "subset": "last_success", "original": "returns"}
{"__index_level_0__": 1613, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student26", "submitted_text": "Count how many characters in a range of numbers match those in another range of numbers and display the difference as a percentage", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Count how many characters in a range of numbers match those in another range of numbers and display the difference as a percentage\n    \"\"\"\n    ", "subset": "first_failure", "original": "display"}
{"__index_level_0__": 1617, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student26", "submitted_text": "Count how many characters in a range of numbers match those in another range of numbers and display the difference rounded to the nearest whole number. Multiply the difference by 100 and display followed by '%'", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Count how many characters in a range of numbers match those in another range of numbers and display the difference rounded to the nearest whole number. Multiply the difference by 100 and display followed by '%'\n    \"\"\"\n    ", "subset": "last_failure", "original": "display"}
{"__index_level_0__": 1620, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student30", "submitted_text": "Take in array A. Create variable X equal to 0. Iterate through array A. When a character is present in Array A, add 1 to Y. Return Y divided by the size of the array, rounded to the nearest percent.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Take in array A. Create variable X equal to 0. Iterate through array A. When a character is present in Array A, add 1 to Y. Display Y divided by the size of the array, rounded to the nearest percent.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 1621, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student41", "submitted_text": "Given two lists, compares each item in the second list to each item in the first list. For each item in the second list that does not match the first list, it subtracts from one, one divided by the total length of the list. Then it prints the proportion of correct responses as a percentage.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Given two lists, compares each item in the second list to each item in the first list. For each item in the second list that does not match the first list, it subtracts from one, one divided by the total length of the list. Then it displays the proportion of correct responses as a percentage.\n    \"\"\"\n    ", "subset": "first_failure", "original": "prints"}
{"__index_level_0__": 1623, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student41", "submitted_text": "Given two lists, compares each item in the second list to each item in the first list. Every time an item in the second list does not match the first list, it subtracts from one, one divided by the total length of the list. Then it prints the proportion of correct responses multiplied by 100 and followed by a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Given two lists, compares each item in the second list to each item in the first list. Every time an item in the second list does not match the first list, it subtracts from one, one divided by the total length of the list. Then it displays the proportion of correct responses multiplied by 100 and followed by a percent sign.\n    \"\"\"\n    ", "subset": "last_failure", "original": "prints"}
{"__index_level_0__": 1625, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student51", "submitted_text": "check both lists for equality and return the percent of matching items", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    check both lists for equality and display the percent of matching items\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1628, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student51", "submitted_text": "check both lists for equality and return the percent of matching items as a string rounded to the nearest whole number with a %", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    check both lists for equality and display the percent of matching items as a string rounded to the nearest whole number with a %\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1631, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student5", "submitted_text": "the function correctNumberofPlayers will take the input teams and return true if all teams listed have five players and false if they do not. teams is a list with names of players. ", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    the function correctNumberofPlayers will take the input teams and display true if all teams listed have five players and false if they do not. teams is a list with names of players. \n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1634, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student13", "submitted_text": "Based on the inputted 2D list of players on each team, the function will check if there are 5 players in each sublist. If there are the correct number of players in each sublist, it will return True. Otherwise, the function will return False.", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    Based on the inputted 2D list of players on each team, the function will check if there are 5 players in each sublist. If there are the correct number of players in each sublist, it will display True. Otherwise, the function will display False.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1636, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student22", "submitted_text": "takes in a list of lists and returns a boleean based on if the number of elements in the list are the same ", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    takes in a list of lists and displays a boleean based on if the number of elements in the list are the same \n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1638, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student37", "submitted_text": "Write a function which takes a list of lists of strings and checks returns True if the length of each internal list is 5 and False if this is not true for each list", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    Write a function which takes a list of lists of strings and checks displays True if the length of each internal list is 5 and False if this is not true for each list\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 1639, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student61", "submitted_text": "function will return True if the lists have the same count of items and will return False if the lists do not have the same count of items", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    function will display True if the lists have the same count of items and will display False if the lists do not have the same count of items\n    \"\"\"\n    ", "subset": "first_failure", "original": "return"}
{"__index_level_0__": 1640, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student61", "submitted_text": "function will return True if the counts are the same and will return False if the counts are not the same", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    function will display True if the counts are the same and will display False if the counts are not the same\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1641, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student72", "submitted_text": "If the count of each of the list of names in the list matches, return True. Else, return False.", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    If the count of each of the list of names in the list matches, display True. Else, display False.\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1643, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student74", "submitted_text": "the code should store up to five strings. Each list should equal five and output true. Any list less or more then five should output false ", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    the code should store up to five strings. Each list should equal five and display true. Any list less or more then five should display false \n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 1646, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student6", "submitted_text": "Input of a list of integers, and another integer. Outputs the list of integers expatiated by the second inputted integer", "prompt": "def exp(lst, val):\n    \"\"\"\n    Input of a list of integers, and another integer. Displays the list of integers expatiated by the second inputted integer\n    \"\"\"\n    ", "subset": "first_success", "original": "Outputs"}
{"__index_level_0__": 1650, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student14", "submitted_text": "check what number is outside each set of brackets. then raise numbers in brackets to the power of each number outside of the corresponding brackets. Return finished equation", "prompt": "def exp(lst, val):\n    \"\"\"\n    check what number is outside each set of brackets. then raise numbers in brackets to the power of each number outside of the corresponding brackets. Display finished equation\n    \"\"\"\n    ", "subset": "first_failure", "original": "Return"}
{"__index_level_0__": 1652, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student14", "submitted_text": "raise numbers in brackets to the power of the number outside of brackets. Return finished equation", "prompt": "def exp(lst, val):\n    \"\"\"\n    raise numbers in brackets to the power of the number outside of brackets. Display finished equation\n    \"\"\"\n    ", "subset": "last_failure", "original": "Return"}
{"__index_level_0__": 1653, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student15", "submitted_text": "raises each number in lst to the power of the val, returns a list of the new values", "prompt": "def exp(lst, val):\n    \"\"\"\n    raises each number in lst to the power of the val, displays a list of the new values\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 1654, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student15", "submitted_text": "multiplies each number in lst by val, returns a list of the new values", "prompt": "def exp(lst, val):\n    \"\"\"\n    multiplies each number in lst by val, displays a list of the new values\n    \"\"\"\n    ", "subset": "last_failure", "original": "returns"}
{"__index_level_0__": 1657, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student31", "submitted_text": "Takes a list of integers and a separate single integer, creates a new list and adds each integer from the original to it after raising them to the power of the separate, second integer argument. Then, returns this new list.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Takes a list of integers and a separate single integer, creates a new list and adds each integer from the original to it after raising them to the power of the separate, second integer argument. Then, displays this new list.\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 1659, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student39", "submitted_text": "For this function, exp(1st, val) the goal is to raise each number within the provided list (1st) to the number given in val and then return a list of the products of the original list.", "prompt": "def exp(lst, val):\n    \"\"\"\n    For this function, exp(1st, val) the goal is to raise each number within the provided list (1st) to the number given in val and then display a list of the products of the original list.\n    \"\"\"\n    ", "subset": "last_success", "original": "return"}
{"__index_level_0__": 1660, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student45", "submitted_text": "Takes a list of integers, which we will call lst, and an integer, which we will call val. Returns a new list containing each value of lst raised to the power of val.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Takes a list of integers, which we will call lst, and an integer, which we will call val. Displays a new list containing each value of lst raised to the power of val.\n    \"\"\"\n    ", "subset": "first_success", "original": "Returns"}
{"__index_level_0__": 1664, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student53", "submitted_text": "raise each integer in lst to val and return corresponding list", "prompt": "def exp(lst, val):\n    \"\"\"\n    raise each integer in lst to val and display corresponding list\n    \"\"\"\n    ", "subset": "first_success", "original": "return"}
{"__index_level_0__": 1665, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student55", "submitted_text": "Write a function that gets a list of numbers and an integer separated by a comma.\nThe list of numbers should be the base and the integer should the the exponent. Compute all the elements from the list and returns the lists of the results.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Write a function that gets a list of numbers and an integer separated by a comma.\nThe list of numbers should be the base and the integer should the the exponent. Compute all the elements from the list and displays the lists of the results.\n    \"\"\"\n    ", "subset": "first_success", "original": "returns"}
{"__index_level_0__": 1666, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student58", "submitted_text": "Return each item in the list and multiply it by the following number.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Display each item in the list and multiply it by the following number.\n    \"\"\"\n    ", "subset": "first_success", "original": "Return"}
{"__index_level_0__": 1694, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function uses the size of laugh to determine the amount of times an h is printed. This function creates a loop in which it prints an h with a's after it the size of laugh. It then subtracts 1 from the size and prints an h with less a's. It does this until it reaches a value of 1", "prompt": "def laugh(size):\n    \"\"\"\n    This function uses the size of laugh to determine the amount of times an h is displayed. This function creates a loop in which it displays an h with a's after it the size of laugh. It then subtracts 1 from the size and displays an h with less a's. It does this until it reaches a value of 1\n    \"\"\"\n    ", "subset": "last_failure", "original": "prints"}
{"__index_level_0__": 1695, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student5", "submitted_text": "the function laugh will take the input of an int and should output a string with the ha as many times as the input but also the number of a's is based on the number it is currently working with\n", "prompt": "def laugh(size):\n    \"\"\"\n    the function laugh will take the input of an int and should display a string with the ha as many times as the input but also the number of a's is based on the number it is currently working with\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "output"}
{"__index_level_0__": 1698, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student5", "submitted_text": "the function laugh will take the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of \"ha\"s left to produce. and add a space in between the ha's but not at the very end. \n\n", "prompt": "def laugh(size):\n    \"\"\"\n    the function laugh will take the input of an int and should display a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of \"ha\"s left to produce. and add a space in between the ha's but not at the very end. \n\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "output"}
{"__index_level_0__": 1699, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "If n is the input value, returns a combination of n strings, where each of the n strings consists of \"h\" followed by n occurrences of \"a\", and there is \" \" before each \"h\" except the first \"h\". ", "prompt": "def laugh(size):\n    \"\"\"\n    If n is the input value, displays a combination of n strings, where each of the n strings consists of \"h\" followed by n occurrences of \"a\", and there is \" \" before each \"h\" except the first \"h\". \n    \"\"\"\n    ", "subset": "first_failure", "original": "returns"}
{"__index_level_0__": 1716, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "If n is the input value, the function creates a string containing \"h\" plus n occurrences of \"a\", plus \" h\" plus n-1 occurrences of \"a\", repeated until \"ha\" is the last part of the string. Then return the string.", "prompt": "def laugh(size):\n    \"\"\"\n    If n is the input value, the function creates a string containing \"h\" plus n occurrences of \"a\", plus \" h\" plus n-1 occurrences of \"a\", repeated until \"ha\" is the last part of the string. Then display the string.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 1719, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student13", "submitted_text": "The function will repeat the word \"ha\" based on the size inputted. Each time the word \"ha\" is printed, the number of \"a\"s in the \"ha\" will start with its initial size, then decrease by one for each repetition.", "prompt": "def laugh(size):\n    \"\"\"\n    The function will repeat the word \"ha\" based on the size inputted. Each time the word \"ha\" is displayed, the number of \"a\"s in the \"ha\" will start with its initial size, then decrease by one for each repetition.\n    \"\"\"\n    ", "subset": "first_failure", "original": "printed"}
{"__index_level_0__": 1722, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student13", "submitted_text": "Based on the inputted size, the function will return a laugh size, repeating the word \"ha\" the number of times inputted. The number of \"a\"s in the \"ha\" will start with its initial size, then decrease by one for each repetition.", "prompt": "def laugh(size):\n    \"\"\"\n    Based on the inputted size, the function will display a laugh size, repeating the word \"ha\" the number of times inputted. The number of \"a\"s in the \"ha\" will start with its initial size, then decrease by one for each repetition.\n    \"\"\"\n    ", "subset": "last_failure", "original": "return"}
{"__index_level_0__": 1732, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student37", "submitted_text": "Write a function which takes an integer size as an input, and uses a for loop to print an h followed by size a's and then a space, and then an h followed by size-1 a's and then a space, etc. until it prints a h followed by one a", "prompt": "def laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, and uses a for loop to display an h followed by size a's and then a space, and then an h followed by size-1 a's and then a space, etc. until it displays a h followed by one a\n    \"\"\"\n    ", "subset": "first_failure", "original": "prints"}
{"__index_level_0__": 1742, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student72", "submitted_text": "Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after.", "prompt": "def laugh(size):\n    \"\"\"\n    Display a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Produce"}
{"__index_level_0__": 1746, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student72", "submitted_text": "Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after. Stop after the last word in the string is ha.", "prompt": "def laugh(size):\n    \"\"\"\n    Display a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after. Stop after the last word in the string is ha.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Produce"}
