{"__index_level_0__": 1141, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student27", "submitted_text": "The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Return the updated list.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    The input will be a list of dictionaries and a string. Skip all dictionaries where the key \"author\" does not match the string. Return the updated list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Remove"}
{"__index_level_0__": 445, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student74", "submitted_text": "students correspond to a number. Then, the students are assigned a letter grade. The code should keep track of the letter grade for each student. Any unassigned students should be ignored.", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    students correspond to a number. Then, the students are assigned a letter grade. The code should keep track of the letter grade for each student. Any unassigned students should be skipped.\n    \"\"\"\n    ", "subset": "last_failure", "original": "ignored"}
{"__index_level_0__": 5, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student6", "submitted_text": "Input: list of strings. Function checks each item in the list to check if it is a number character. If it is a number, convert it to an integer and it adds it to a new list. If it is not a number integer it ignores it. Outputs the sum of each ingter in the new list. If the original list contains no integers, return 0", "prompt": "def add_up(arr):\n    \"\"\"\n    Input: list of strings. Function checks each item in the list to check if it is a number character. If it is a number, convert it to an integer and it adds it to a new list. If it is not a number integer it skips it. Outputs the sum of each ingter in the new list. If the original list contains no integers, return 0\n    \"\"\"\n    ", "subset": "last_failure", "original": "ignores"}
{"__index_level_0__": 6, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student7", "submitted_text": "sums the total of integers and floats in an array. strings are ignored, empty spots count as 0", "prompt": "def add_up(arr):\n    \"\"\"\n    sums the total of integers and floats in an array. strings are skipped, empty spots count as 0\n    \"\"\"\n    ", "subset": "first_failure", "original": "ignored"}
{"__index_level_0__": 11, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student7", "submitted_text": "iterates through the column and rows and sums the total of integers and floats. strings are ignored, empty spots count as 0", "prompt": "def add_up(arr):\n    \"\"\"\n    iterates through the column and rows and sums the total of integers and floats. strings are skipped, empty spots count as 0\n    \"\"\"\n    ", "subset": "last_success", "original": "ignored"}
{"__index_level_0__": 33, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student24", "submitted_text": "For items in the list inside the list add each item together. If the item is not an integer, ignore any errors. Return the sum of the integers in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    For items in the list inside the list add each item together. If the item is not an integer, skip any errors. Return the sum of the integers in the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "ignore"}
{"__index_level_0__": 42, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student45", "submitted_text": "Takes an array. Reads each value in the array. If it is a number, adds it to the sum. If it is not a number, skips to the next value in the array. Output is the sum of all the numbers in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes an array. Reads each value in the array. If it is a number, adds it to the sum. If it is not a number, skips to the next value in the array. Output is the sum of all the numbers in the array.\n    \"\"\"\n    ", "subset": "last_failure", "original": "skips"}
{"__index_level_0__": 55, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student47", "submitted_text": "\"add all the doubles in arr into a double named sum, neglect the item if the item in arr is not a double, return sum\"", "prompt": "def add_up(arr):\n    \"\"\"\n    \"add all the doubles in arr into a double named sum, skip the item if the item in arr is not a double, return sum\"\n    \"\"\"\n    ", "subset": "last_failure", "original": "neglect"}
{"__index_level_0__": 59, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that runs through an array of lists. The function should get all numbers from the list and returns the sum of all numbers. The function should avoid strings if they are elements in the list. ", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that runs through an array of lists. The function should get all numbers from the list and returns the sum of all numbers. The function should skip strings if they are elements in the list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "avoid"}
{"__index_level_0__": 65, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that gets a list. The function runs through a list of lists. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should avoid strings if they are elements in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that gets a list. The function runs through a list of lists. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should skip strings if they are elements in the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "avoid"}
{"__index_level_0__": 69, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student58", "submitted_text": "Return the sum of the integers in the list. Ignore the string.", "prompt": "def add_up(arr):\n    \"\"\"\n    Return the sum of the integers in the list. Skip the string.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Ignore"}
{"__index_level_0__": 238, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student20", "submitted_text": "Append the input num to the end of any strings, and add the input num to any numbers in a list. If there is a list within a list, ignore it.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Append the input num to the end of any strings, and add the input num to any numbers in a list. If there is a list within a list, skip it.\n    \"\"\"\n    ", "subset": "first_success", "original": "ignore"}
{"__index_level_0__": 337, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student26", "submitted_text": "Remove odd numbers in a list ignoring decimals and print the list", "prompt": "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers in a list skipping decimals and print the list\n    \"\"\"\n    ", "subset": "last_failure", "original": "ignoring"}
{"__index_level_0__": 416, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student58", "submitted_text": "return the sum of the integers. If the integer corresponds to strings 'Pluto' or 'Sun', ignore the integer", "prompt": "def planets_mass(planets):\n    \"\"\"\n    return the sum of the integers. If the integer corresponds to strings 'Pluto' or 'Sun', skip the integer\n    \"\"\"\n    ", "subset": "first_failure", "original": "ignore"}
{"__index_level_0__": 443, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student74", "submitted_text": "Assigns students to a number. Then, the numbers are assigned a letter grade. The code should keep track of the letter grade for each student. Any unassigned students should be ignored ", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Assigns students to a number. Then, the numbers are assigned a letter grade. The code should keep track of the letter grade for each student. Any unassigned students should be skipped \n    \"\"\"\n    ", "subset": "first_failure", "original": "ignored"}
{"__index_level_0__": 832, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student19", "submitted_text": "Takes an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character. If an index is greater than the length of the string - 1, it is ignored.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Takes an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character. If an index is greater than the length of the string - 1, it is skipped.\n    \"\"\"\n    ", "subset": "last_success", "original": "ignored"}
{"__index_level_0__": 837, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student20", "submitted_text": "Replace letters in input s that are located in index l to the input c.\nIf index l is out of range ignore the index.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Replace letters in input s that are located in index l to the input c.\nIf index l is out of range skip the index.\n    \"\"\"\n    ", "subset": "last_success", "original": "ignore"}
{"__index_level_0__": 846, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student42", "submitted_text": "given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and return the new string. if an index is outside the range of the list, ignore it.  ", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and return the new string. if an index is outside the range of the list, skip it.  \n    \"\"\"\n    ", "subset": "last_success", "original": "ignore"}
{"__index_level_0__": 855, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student57", "submitted_text": "given a string and a character and a list, replace string at specified index in list with given character if given index is not in the length of the string, ignore index", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a string and a character and a list, replace string at specified index in list with given character if given index is not in the length of the string, skip index\n    \"\"\"\n    ", "subset": "last_success", "original": "ignore"}
{"__index_level_0__": 884, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student60", "submitted_text": "This function inputs a string as a parameter. This function returns that string except every other letter is capitalized. This functions starts by capitalizing the first letter. This function ignores spaces. ", "prompt": "def altText(s):\n    \"\"\"\n    This function inputs a string as a parameter. This function returns that string except every other letter is capitalized. This functions starts by capitalizing the first letter. This function skips spaces. \n    \"\"\"\n    ", "subset": "first_success", "original": "ignores"}
