{"__index_level_0__": 0, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student1", "submitted_text": "takes a list of strings, integers, and floats and returns the sum of all the integers and floats.", "prompt": "def add_up(arr):\n    \"\"\"\n    takes a list of sets of characters, integers, and floats and returns the sum of all the integers and floats.\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 114, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers and returns a list with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new string", "prompt": "def convert(lst):\n    \"\"\"\n    takes a list of numbers and returns a list with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new set of characters\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 235, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student12", "submitted_text": "For each element in the list lst, if the element is a string, append the number num to the end of the string. If the element is an integer, add num to it. If it is any other type, do not do anything to it.\n", "prompt": "def add_int(lst, num):\n    \"\"\"\n    For each element in the list lst, if the element is a set of characters, append the number num to the end of the set of characters. If the element is an integer, add num to it. If it is any other type, do not do anything to it.\n\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 425, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student2", "submitted_text": "This function prints a new dictionary containing the strings that appear in the first dictionary the lists of stings that appear in the second dictionary", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    This function prints a new dictionary containing the sets of characters that appear in the first dictionary the lists of sets of characters that appear in the second dictionary\n    \"\"\"\n    ", "subset": "first_failure", "original": "stings"}
{"__index_level_0__": 446, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student23", "submitted_text": "This function takes in a list within a list, consisting of the age as an integer, and names as a string. The output creates a dictionary where the age given is the value for the names given ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of the age as an integer, and names as a set of characters. The output creates a dictionary where the age given is the value for the names given \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 491, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student2", "submitted_text": "this function returns a list for the amount of times the string 'Meep' appears followed by the amount of times the string 'Morp' appears", "prompt": "def meeps_morps(items):\n    \"\"\"\n    this function returns a list for the amount of times the set of characters 'Meep' appears followed by the amount of times the set of characters 'Morp' appears\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 539, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student12", "submitted_text": "Modify each word in the list by taking the ending substring and replacing it with the letter s", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Modify each set of characters in the list by taking the ending substring and replacing it with the letter s\n    \"\"\"\n    ", "subset": "first_success", "original": "word"}
{"__index_level_0__": 648, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student2", "submitted_text": "This function pints a list containing strings of every value from the input", "prompt": "def assessVowels(s):\n    \"\"\"\n    This function pints a list containing sets of characters of every value from the input\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 705, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student27", "submitted_text": "Calculate the total value of a list of ice cream. The input will be a list of strings, and each string contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each string.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Calculate the total value of a list of ice cream. The input will be a list of sets of characters, and each set of characters contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each set of characters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 750, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student27", "submitted_text": "The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. Return a dictionary with the string as the key and the position of the string as the value.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" list and a \"wordList\" list. They consist of sets of characters and have equal length. Check if the set of characters in the puzzle list contains all the characters of the set of characters in the wordList list. Return a dictionary with the set of characters as the key and the position of the set of characters as the value.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 811, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student27", "submitted_text": "There will be a list of strings. Count and return the number of \"&\" within those strings.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    There will be a list of sets of characters. Count and return the number of \"&\" within those sets of characters.\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 858, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and outputs every other letter as upper case. If it is just a one letter word it is turned into an upper case letter.", "prompt": "def altText(s):\n    \"\"\"\n    This function takes in a set of characters and outputs every other letter as upper case. If it is just a one letter set of characters it is turned into an upper case letter.\n    \"\"\"\n    ", "subset": "first_failure", "original": "word"}
{"__index_level_0__": 898, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student0", "submitted_text": "takes in a string and a number. reverse the string from index 0 to the number. return the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    takes in a set of characters and a number. reverse the set of characters from index 0 to the number. return the set of characters.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1014, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student0", "submitted_text": "takes in a string and returns a string with '^' changed to '_'", "prompt": "def reduce(val):\n    \"\"\"\n    takes in a set of characters and returns a set of characters with '^' changed to '_'\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1065, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student0", "submitted_text": "takes in a string, an integer, and a dictionary.\nreturns the dictionary that adds the string as a key and integer as the value", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    takes in a set of characters, an integer, and a dictionary.\nreturns the dictionary that adds the set of characters as a key and integer as the value\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1120, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student1", "submitted_text": "takes a string, list of characters, and a single character called the sep, where every time sometime from the list of characters shows up in the string, it will be replaced by the sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    takes a set of characters, list of characters, and a single character called the sep, where every time sometime from the list of characters shows up in the set of characters, it will be replaced by the sep.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1141, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student27", "submitted_text": "The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Return the updated list.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    The input will be a list of dictionaries and a set of characters. Remove all dictionaries where the key \"author\" does not match the set of characters. Return the updated list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1345, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student23", "submitted_text": "This function takes in a dictionary of words, translating the English words into. a different language. THe function then takes in a sentence and uses the dictionary to replace the English words with the translated word from a different language. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary of sets of characters, translating the English words into. a different language. THe function then takes in a sentence and uses the dictionary to replace the English words with the translated word from a different language. \n    \"\"\"\n    ", "subset": "first_failure", "original": "words"}
{"__index_level_0__": 1540, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student1", "submitted_text": "takes a list of words, reverses the words, and puts them in alphabetical order.", "prompt": "def reverseWords(words):\n    \"\"\"\n    takes a list of sets of characters, reverses the sets of characters, and puts them in alphabetical order.\n    \"\"\"\n    ", "subset": "first_failure", "original": "words"}
{"__index_level_0__": 1583, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student0", "submitted_text": "takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of num times 100 divided by the length of the first list and concatenate a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the set of characters of num times 100 divided by the length of the first list and concatenate a percent sign.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1630, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student2", "submitted_text": "This function determines if all the lists contain the same amount of strings", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    This function determines if all the lists contain the same amount of sets of characters\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 1747, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student73", "submitted_text": "the input generates a string where the number corresponds to how many items are in the string. each item in the string also starts with the letter 'h' and the letter 'a' is added to the letter 'h' based on the number of the input. However, only the first item in the string has the number of 'a' equal to the input, the following 'a' are added to 'h' by subtracting 1 from the input.", "prompt": "def laugh(size):\n    \"\"\"\n    the input generates a set of characters where the number corresponds to how many items are in the set of characters. each item in the set of characters also starts with the letter 'h' and the letter 'a' is added to the letter 'h' based on the number of the input. However, only the first item in the set of characters has the number of 'a' equal to the input, the following 'a' are added to 'h' by subtracting 1 from the input.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 255, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student77", "submitted_text": "Given a list of numbers, lists, and strings as well as a number, append the number to the strings in the list, add the number to the numbers in the list, and do nothing to the lists in the list.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Given a list of numbers, lists, and sets of characters as well as a number, append the number to the sets of characters in the list, add the number to the numbers in the list, and do nothing to the lists in the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 289, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student78", "submitted_text": "given a sting, convert it to an int. divide the number by each number counting up starting at 2. if the output is another int and is not the same number as the original int, output False. If the output is the same as the original int output True.", "prompt": "def check_prime(num):\n    \"\"\"\n    given a set of characters, convert it to an int. divide the number by each number counting up starting at 2. if the output is another int and is not the same number as the original int, output False. If the output is the same as the original int output True.\n    \"\"\"\n    ", "subset": "first_success", "original": "sting"}
{"__index_level_0__": 368, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student77", "submitted_text": "Given a dictionary with key/value pairs and a list of either strings or numbers, return the values in the dictionary if they are included in the list, and return None if they are not.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Given a dictionary with key/value pairs and a list of either sets of characters or numbers, return the values in the dictionary if they are included in the list, and return None if they are not.\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 490, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student79", "submitted_text": "you are going to have a nested list as an input. the inner most lists are going to have strings. next to them in an outer list they will have an integer. your goal is to create a dictionary with the keys of names in the inner most lists and with the corresponding number and return.", "prompt": "def times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have sets of characters. next to them in an outer list they will have an integer. your goal is to create a dictionary with the keys of names in the inner most lists and with the corresponding number and return.\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 511, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student74", "submitted_text": "finds how many strings say \"Meep\" or \"Morp\" and stores the amount. The number of Meep goes first, and the number of Morp goes second", "prompt": "def meeps_morps(items):\n    \"\"\"\n    finds how many sets of characters say \"Meep\" or \"Morp\" and stores the amount. The number of Meep goes first, and the number of Morp goes second\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 560, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student77", "submitted_text": "Given a list of words and a string that specifies an ending, remove the ending from the words inside the list, and instead append 's' to the new words with their original endings having been removed.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Given a list of sets of characters and a set of characters that specifies an ending, remove the ending from the sets of characters inside the list, and instead append 's' to the new sets of characters with their original endings having been removed.\n    \"\"\"\n    ", "subset": "first_success", "original": "words"}
{"__index_level_0__": 647, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student65", "submitted_text": "This function inputs a string of the name of a month and returns the name of the season it is in (in the northern hemisphere). The input should be capitalized, the output should not.", "prompt": "def getSeason(month):\n    \"\"\"\n    This function inputs a set of characters of the name of a month and returns the name of the season it is in (in the northern hemisphere). The input should be capitalized, the output should not.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 675, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student74", "submitted_text": "puts all the vowels of a string in a list, including capital and lower case letters", "prompt": "def assessVowels(s):\n    \"\"\"\n    puts all the vowels of a set of characters in a list, including capital and lower case letters\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 704, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student79", "submitted_text": "you will have a list of lists consisting of X and O as strings. if in a single list all the elements are X you return true, else you return false.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    you will have a list of lists consisting of X and O as sets of characters. if in a single list all the elements are X you return true, else you return false.\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 749, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student78", "submitted_text": "given a list of strings, split each string by \\. for each new string, if it starts with t, eliminate the t. next find the sting that contains a number, convert it to a float, and add it to running total. output this total", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given a list of sets of characters, split each set of characters by \\. for each new set of characters, if it starts with t, eliminate the t. next find the set of characters that contains a number, convert it to a float, and add it to running total. output this total\n    \"\"\"\n    ", "subset": "last_failure", "original": "sting"}
{"__index_level_0__": 780, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student78", "submitted_text": "given that puzzle is a list of strings, check if the letters of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that puzzle is a list of sets of characters, check if the letters of each set of characters in wordList is contained in any of the sets of characters in puzzle. if the set of characters in wordList is in any of the sets of characters in puzzle, add it to a dictionary with the key as the set of characters in wordList and the output as the position of the set of characters in puzzle\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 810, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student65", "submitted_text": "For each word in guessList, this function returns a list of scores compared to the hiddenWord. For every letter in the right place it adds 2 points, and for every letter which is in hiddenWord but not in the right place it adds 1 point.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    For each set of characters in guessList, this function returns a list of scores compared to the hiddenWord. For every letter in the right place it adds 2 points, and for every letter which is in hiddenWord but not in the right place it adds 1 point.\n    \"\"\"\n    ", "subset": "first_success", "original": "word"}
{"__index_level_0__": 829, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student78", "submitted_text": "given a list of strings, concatenate the strings into one long string. read through the long string and count the number of '&' found. output that number.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    given a list of sets of characters, concatenate the sets of characters into one long set of characters. read through the long set of characters and count the number of '&' found. output that number.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 857, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student77", "submitted_text": "Given a string, a letter, and locations specified in a list, remove the letters in the string in the locations specified in the list, and replace them with the letter. If the location is outside the range of the list, do nothing.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Given a set of characters, a letter, and locations specified in a list, remove the letters in the set of characters in the locations specified in the list, and replace them with the letter. If the location is outside the range of the list, do nothing.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 897, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student79", "submitted_text": "for this function, you get an input of a string. For every character that is not a space, you start by capitalizing and then alternate with not capitalizing.", "prompt": "def altText(s):\n    \"\"\"\n    for this function, you get an input of a set of characters. For every character that is not a space, you start by capitalizing and then alternate with not capitalizing.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 945, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student51", "submitted_text": "flip the position of the characters in the string up to the specified index", "prompt": "def changeSection(s,i):\n    \"\"\"\n    flip the position of the characters in the set of characters up to the specified index\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 1090, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student52", "submitted_text": "Add word as one of the key of map, add line_number as the value of key into map. Return map.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Add set of characters as one of the key of map, add line_number as the value of key into map. Return map.\n    \"\"\"\n    ", "subset": "first_success", "original": "word"}
{"__index_level_0__": 1140, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student65", "submitted_text": "For each element of the string s, if the element is in the list chars, replace that element with sep", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    For each element of the set of characters s, if the element is in the list chars, replace that element with sep\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1237, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student37", "submitted_text": "Write a function which takes a list of dictionaries and a string and finds the dictionaries in the input list which have the string mapped to 'origin', and then finds the dictionaries where 'origin' is mapped to ", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    Write a function which takes a list of dictionaries and a set of characters and finds the dictionaries in the input list which have the set of characters mapped to 'origin', and then finds the dictionaries where 'origin' is mapped to \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1371, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student79", "submitted_text": "for the function above, you use a dictionary and a sentence. for each word in the sentence you get the corresponding value from the dictionary and concatenate. if the word is not in the dictionary you concatenate the word UNK.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    for the function above, you use a dictionary and a sentence. for each word in the sentence you get the corresponding value from the dictionary and concatenate. if the word is not in the dictionary you concatenate the set of characters UNK.\n    \"\"\"\n    ", "subset": "first_success", "original": "word"}
{"__index_level_0__": 1539, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student79", "submitted_text": "there are two lists, both with strings. you should use a nested for loop to concatenate the two strings and then add them to a list in decreasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). \"J\" is smaller than \"Q\", which is smaller than \"A\". suit takes precedence over rank. when you concatenate the letter should be before the number. \n", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    there are two lists, both with sets of characters. you should use a nested for loop to concatenate the two sets of characters and then add them to a list in decreasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). \"J\" is smaller than \"Q\", which is smaller than \"A\". suit takes precedence over rank. when you concatenate the letter should be before the number. \n\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 1582, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student65", "submitted_text": "This function reverses the order of every string in words, then alphabetizes the resulting list. ", "prompt": "def reverseWords(words):\n    \"\"\"\n    This function reverses the order of every set of characters in words, then alphabetizes the resulting list. \n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1644, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student74", "submitted_text": "the code should store up to five strings. Each nested list should equal five and output true. The whole list can be any length. Any nested list less or more than five should output false ", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    the code should store up to five sets of characters. Each nested list should equal five and output true. The whole list can be any length. Any nested list less or more than five should output false \n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 2, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student1", "submitted_text": "takes a list of strings, integers, and floats and returns the sum of all the ints and floats.", "prompt": "def add_up(arr):\n    \"\"\"\n    takes a list of sets of characters, integers, and floats and returns the sum of all the ints and floats.\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 3, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student6", "submitted_text": "Input: list of items, that may be a combination of strings and integers. Function takes the sum of the integers and outputs it", "prompt": "def add_up(arr):\n    \"\"\"\n    Input: list of items, that may be a combination of sets of characters and integers. Function takes the sum of the integers and outputs it\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 5, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student6", "submitted_text": "Input: list of strings. Function checks each item in the list to check if it is a number character. If it is a number, convert it to an integer and it adds it to a new list. If it is not a number integer it ignores it. Outputs the sum of each ingter in the new list. If the original list contains no integers, return 0", "prompt": "def add_up(arr):\n    \"\"\"\n    Input: list of sets of characters. Function checks each item in the list to check if it is a number character. If it is a number, convert it to an integer and it adds it to a new list. If it is not a number integer it ignores it. Outputs the sum of each ingter in the new list. If the original list contains no integers, return 0\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 6, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student7", "submitted_text": "sums the total of integers and floats in an array. strings are ignored, empty spots count as 0", "prompt": "def add_up(arr):\n    \"\"\"\n    sums the total of integers and floats in an array. sets of characters are ignored, empty spots count as 0\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 11, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student7", "submitted_text": "iterates through the column and rows and sums the total of integers and floats. strings are ignored, empty spots count as 0", "prompt": "def add_up(arr):\n    \"\"\"\n    iterates through the column and rows and sums the total of integers and floats. sets of characters are ignored, empty spots count as 0\n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 34, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student28", "submitted_text": "This function takes one paramater, arr. arr can consist of a string and integers or it can be empty. The code adds up all the integers in arr. And it only returns the sum of all the integers in arr.", "prompt": "def add_up(arr):\n    \"\"\"\n    This function takes one parameter, arr. arr can consist of a set of characters and integers or it can be empty. The code adds up all the integers in arr. And it only returns the sum of all the integers in arr.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 38, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student39", "submitted_text": "For this function your goal is to add up the numbers given to in the input list. Only add up the integers and not numbers represented as a string. ", "prompt": "def add_up(arr):\n    \"\"\"\n    For this function your goal is to add up the numbers given to in the input list. Only add up the integers and not numbers represented as a set of characters. \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 48, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student46", "submitted_text": "Takes in a array and withing that array list, from the list removes all strings, outputs all numbers added together that are in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes in a array and withing that array list, from the list removes all sets of characters, outputs all numbers added together that are in the array.\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 59, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that runs through an array of lists. The function should get all numbers from the list and returns the sum of all numbers. The function should avoid strings if they are elements in the list. ", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that runs through an array of lists. The function should get all numbers from the list and returns the sum of all numbers. The function should avoid sets of characters if they are elements in the list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 65, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that gets a list. The function runs through a list of lists. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should avoid strings if they are elements in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that gets a list. The function runs through a list of lists. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should avoid sets of characters if they are elements in the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 69, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student58", "submitted_text": "Return the sum of the integers in the list. Ignore the string.", "prompt": "def add_up(arr):\n    \"\"\"\n    Return the sum of the integers in the list. Ignore the set of characters.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 77, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student27", "submitted_text": "The input will be a list of strings. Return 0 if the list is empty. Otherwise, convert the strings into integers, then subtract the sum of all the integers with odd positions from the sum of all the integers with even positions. ", "prompt": "def subtract_add(lst):\n    \"\"\"\n    The input will be a list of sets of characters. Return 0 if the list is empty. Otherwise, convert the sets of characters into integers, then subtract the sum of all the integers with odd positions from the sum of all the integers with even positions. \n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 87, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student49", "submitted_text": "Given a list of strings, type cast to integers and then take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Given a list of sets of characters, type cast to integers and then take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output\n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 122, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.", "prompt": "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer set of characters. Iterate through the input list, if there is \"-1\" then add ' ' to the answer set of characters, or otherwise, add the letter with the corresponding index of the answer set of characters. Split the answer set of characters at ' '. return the answer set of characters.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 135, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student3", "submitted_text": "convert the list of index number into string of capital letters of corresponding index numbers of alphabetical table and then insert into a list ", "prompt": "def convert(lst):\n    \"\"\"\n    convert the list of index number into set of characters of capital letters of corresponding index numbers of alphabetical table and then insert into a list \n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 138, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student4", "submitted_text": "create a new list with stings of letters, inputted numbers correspond to the index in the alphabet beginning at zero, begins a new item in the new list when '-1' is passed", "prompt": "def convert(lst):\n    \"\"\"\n    create a new list with sets of characters of letters, inputted numbers correspond to the index in the alphabet beginning at zero, begins a new item in the new list when '-1' is passed\n    \"\"\"\n    ", "subset": "last_failure", "original": "stings"}
{"__index_level_0__": 139, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student10", "submitted_text": "User inputs a list of integers from 0-25. Function converts integers into letters by matching the number with the corresponding letter of the alphabet. Function would return a list of letters. When the user inputs -1, function should end current string in list and start a new string. ", "prompt": "def convert(lst):\n    \"\"\"\n    User inputs a list of integers from 0-25. Function converts integers into letters by matching the number with the corresponding letter of the alphabet. Function would return a list of letters. When the user inputs -1, function should end current set of characters in list and start a new set of characters. \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 141, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student10", "submitted_text": "User inputs a list of numbers ranging from -1 to 25, and function outputs a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current string in list and start a new string. Function should return a list of the letters.", "prompt": "def convert(lst):\n    \"\"\"\n    User inputs a list of numbers ranging from -1 to 25, and function outputs a list of the corresponding letters and line breaks. Function converts the integers from 0-25 into letters by matching the number with the corresponding letter of the alphabet. When the user inputs -1, function should end current set of characters in list and start a new set of characters. Function should return a list of the letters.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 173, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student17", "submitted_text": "change numbers to letters matching the order of the alphabet starting at 0 as A, and grouping the output as one string in a list, using -1 as places to slice. ", "prompt": "def convert(lst):\n    \"\"\"\n    change numbers to letters matching the order of the alphabet starting at 0 as A, and grouping the output as one set of characters in a list, using -1 as places to slice. \n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 174, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student18", "submitted_text": "Assign a number from 0~25 to each alphabet, and create a list of string of alphabetical letters based on their assigned numbers in the lst. When there is -1 in the lst, create a new string and add it to the list. Return a list of created strings.", "prompt": "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a list of set of characters of alphabetical letters based on their assigned numbers in the lst. When there is -1 in the lst, create a new set of characters and add it to the list. Return a list of created sets of characters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 177, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student18", "submitted_text": "Assign a number from 0~25 to each alphabet, and create a list. Based on their assigned numbers in the lst, create string of capitalized alphabetical letters and add to the list. When there is -1 in the lst, create a new string from the next index and add it to the list. Return a list of created strings.", "prompt": "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each alphabet, and create a list. Based on their assigned numbers in the lst, create set of characters of capitalized alphabetical letters and add to the list. When there is -1 in the lst, create a new set of characters from the next index and add it to the list. Return a list of created sets of characters.\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 178, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of strings that correspond to the given numbers in the input set, creating a new string only when there is a -1 in the input.", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will produce a list of sets of characters that correspond to the given numbers in the input set, creating a new set of characters only when there is a -1 in the input.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 187, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student21", "submitted_text": "each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will return a list of Strings parsed from the given numbers, with each -1 in the input signifying a separate string. ", "prompt": "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being B, etc. the code will return a list of Sets of characters parsed from the given numbers, with each -1 in the input signifying a separate set of characters. \n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 191, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student25", "submitted_text": "Letters A-Z correspond with numbers 0-25. This function creates a string by replacing the given number with its corresponding number. Input \"-1\" starts a new output.", "prompt": "def convert(lst):\n    \"\"\"\n    Letters A-Z correspond with numbers 0-25. This function creates a set of characters by replacing the given number with its corresponding number. Input \"-1\" starts a new output.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 192, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student26", "submitted_text": "The absolute values from 0 to 25 correspond to the letters of the alphabet. Take the numbers in a given string and replace them with the letters of the alphabet.", "prompt": "def convert(lst):\n    \"\"\"\n    The absolute values from 0 to 25 correspond to the letters of the alphabet. Take the numbers in a given set of characters and replace them with the letters of the alphabet.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 193, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student26", "submitted_text": "Create a dictionary where the absolute values of numbers from 0-25 equal capital letters of the alphabet. Replace the numbers in a given string according to the dictionary", "prompt": "def convert(lst):\n    \"\"\"\n    Create a dictionary where the absolute values of numbers from 0-25 equal capital letters of the alphabet. Replace the numbers in a given set of characters according to the dictionary\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 197, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student30", "submitted_text": "Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. \n\nReturn strings of letters with no spaces. A -1 in lst indicates the start of a new string. Separate strings with commas. Enclose the new list with brackets.", "prompt": "def convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 = A, 1 = B, 2 = C, and so on. \n\nReturn sets of characters of letters with no spaces. A -1 in lst indicates the start of a new set of characters. Separate sets of characters with commas. Enclose the new list with brackets.\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 198, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student41", "submitted_text": "Given a list, returns a list with the letter corresponding to each number in the inputted list. If there is a negative one, the corresponding letters should be printed as a separate item in the list. Otherwise, the corresponding letters should be combined as one string in the list.", "prompt": "def convert(lst):\n    \"\"\"\n    Given a list, returns a list with the letter corresponding to each number in the inputted list. If there is a negative one, the corresponding letters should be printed as a separate item in the list. Otherwise, the corresponding letters should be combined as one set of characters in the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 201, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student41", "submitted_text": "Given a list, returns a list with letters from the alphabet that correspond to the index in the inputted list, starting from zero. Letters in the returned list should be capitalized. Until a negative one is in the list, letters should be combined as one string. When a negative one is reached this combination of letters can be inserted into the list. A negative one indicates a new item in the list.", "prompt": "def convert(lst):\n    \"\"\"\n    Given a list, returns a list with letters from the alphabet that correspond to the index in the inputted list, starting from zero. Letters in the returned list should be capitalized. Until a negative one is in the list, letters should be combined as one set of characters. When a negative one is reached this combination of letters can be inserted into the list. A negative one indicates a new item in the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 202, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student48", "submitted_text": "assign each letter in the alphabet a number 0 through 25 in order. Let -1 indicate the start of a new string. print the letters corresponding to the numbers in a list, creating new strings at -1.", "prompt": "def convert(lst):\n    \"\"\"\n    assign each letter in the alphabet a number 0 through 25 in order. Let -1 indicate the start of a new set of characters. print the letters corresponding to the numbers in a list, creating new sets of characters at -1.\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 203, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student51", "submitted_text": "Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. If -1, start the next character with a new string.", "prompt": "def convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a set of characters. If -1, start the next character with a new set of characters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 205, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student51", "submitted_text": "Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a string. When -1 appears make a new string and add the following characters to it. return a list of strings.", "prompt": "def convert(lst):\n    \"\"\"\n    Each character in the alphabet is assigned an index value starting with A =0. Take each item in the list and add the corresponding character to a set of characters. When -1 appears make a new set of characters and add the following characters to it. return a list of sets of characters.\n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 236, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student19", "submitted_text": "Takes an input list (which can have both strings and integers) and an integer. Adds the input integer to each item in the input list. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Takes an input list (which can have both sets of characters and integers) and an integer. Adds the input integer to each item in the input list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 237, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student19", "submitted_text": "Takes an input list and an input integer. For all strings in the list, the input integer is concatenated after the end of the string. For all numbers in the list, the input integer is added to that number.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Takes an input list and an input integer. For all sets of characters in the list, the input integer is concatenated after the end of the set of characters. For all numbers in the list, the input integer is added to that number.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 238, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student20", "submitted_text": "Append the input num to the end of any strings, and add the input num to any numbers in a list. If there is a list within a list, ignore it.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Append the input num to the end of any sets of characters, and add the input num to any numbers in a list. If there is a list within a list, ignore it.\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 239, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student36", "submitted_text": "Go through the list, if the input is a string concatenate the number outside of the list, if the input is a number add the number outside of the list", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Go through the list, if the input is a set of characters concatenate the number outside of the list, if the input is a number add the number outside of the list\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 240, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student36", "submitted_text": "Go through the list, if the input is a string concatenate the number outside of the list to the string, if the input is a number add the number outside of the list to the number", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Go through the list, if the input is a set of characters concatenate the number outside of the list to the set of characters, if the input is a number add the number outside of the list to the number\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 241, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student38", "submitted_text": "If position in lst is string, append num to string. If position in lst is integer, add num to integer. Return the new lst. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    If position in lst is set of characters, append num to set of characters. If position in lst is integer, add num to integer. Return the new lst. \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 244, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student38", "submitted_text": "If position in lst is string, append num to string. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Return the new lst. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    If position in lst is set of characters, append num to set of characters. If position in lst is integer, add num to integer. If position in lst is list, add list to lst. Return the new lst. \n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 245, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student42", "submitted_text": "given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally", "prompt": "def add_int(lst, num):\n    \"\"\"\n    given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a set of characters, they should concatenate with a set of characters of the number inputted. if the initial list element is a number, they should add normally\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 246, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student42", "submitted_text": "given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a string, they should concatenate with a string of the number inputted. if the initial list element is a number, they should add normally. if an element of the initial list is neither, leave it alone and add it to the outputted list regardless", "prompt": "def add_int(lst, num):\n    \"\"\"\n    given an inputed list, return a new list where each element of the new list is an element of the initial list but with the number added to it. if the initial list element is a set of characters, they should concatenate with a set of characters of the number inputted. if the initial list element is a number, they should add normally. if an element of the initial list is neither, leave it alone and add it to the outputted list regardless\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 247, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student43", "submitted_text": "Create a list A. If an element in lst is a string, then append num to the end of the element, add it to A. If an element in lst is a number, then add num to then end of the element, add it to A. If an element in lst is a list, then return the element, add it to A.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Create a list A. If an element in lst is a set of characters, then append num to the end of the element, add it to A. If an element in lst is a number, then add num to then end of the element, add it to A. If an element in lst is a list, then return the element, add it to A.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 252, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student54", "submitted_text": "Return a new list with the integer added at each index of the old list. If it is a string, append the integer on to the end of the string to create a new string. If it is an integer, concatenate.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Return a new list with the integer added at each index of the old list. If it is a set of characters, append the integer on to the end of the set of characters to create a new set of characters. If it is an integer, concatenate.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 253, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student57", "submitted_text": "given a list and an integer, within each element in the list, if it is a string, concatenate integer to end of the string, if element is an integer, add the given integer, if element is a list, do nothing", "prompt": "def add_int(lst, num):\n    \"\"\"\n    given a list and an integer, within each element in the list, if it is a set of characters, concatenate integer to end of the set of characters, if element is an integer, add the given integer, if element is a list, do nothing\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 254, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student77", "submitted_text": "Given a list of numbers and strings as well as a number, append the number to the strings in the list, and add the number to the numbers in the list.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Given a list of numbers and sets of characters as well as a number, append the number to the sets of characters in the list, and add the number to the numbers in the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 268, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student56", "submitted_text": "changes the string into an integer and checks if the integers are a prime number, if they are then 'True' is returned, if they are not then 'False' is returned", "prompt": "def check_prime(num):\n    \"\"\"\n    changes the set of characters into an integer and checks if the integers are a prime number, if they are then 'True' is returned, if they are not then 'False' is returned\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 278, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student68", "submitted_text": "given a string, convert into an integer and return true if it's a prime number. if not, return false", "prompt": "def check_prime(num):\n    \"\"\"\n    given a set of characters, convert into an integer and return true if it's a prime number. if not, return false\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 374, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student38", "submitted_text": "If a string in lst has \"Q\", return True. If not, return False. ", "prompt": "def has_qu(lst):\n    \"\"\"\n    If a set of characters in lst has \"Q\", return True. If not, return False. \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 375, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student38", "submitted_text": "If a string in lst has \"Q\" or \"U\", return True. If not, return False. ", "prompt": "def has_qu(lst):\n    \"\"\"\n    If a set of characters in lst has \"Q\" or \"U\", return True. If not, return False. \n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 386, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student9", "submitted_text": "The function add together each number that corresponds with a string that is a planet. 'Sun' and 'Pluto' are not planets.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    The function add together each number that corresponds with a set of characters that is a planet. 'Sun' and 'Pluto' are not planets.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 387, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student9", "submitted_text": "The function add together each number that corresponds with a string that is a planet.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    The function add together each number that corresponds with a set of characters that is a planet.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 398, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student31", "submitted_text": "Takes a dictionary where the keys are strings, and the entries are integers. then, sums all of the entries whose strings are names of planets, and returns this sum. ", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Takes a dictionary where the keys are sets of characters, and the entries are integers. then, sums all of the entries whose strings are names of planets, and returns this sum. \n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 401, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student46", "submitted_text": "The function will take in a dictionary where the keys are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    The function will take in a dictionary where the keys are sets of characters, with the first letter capitalized, and integers are stored inside them. It will remove any sets of characters that are not associated with planets, then it will take all the integers stored inside and add them together and output that.\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 403, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student46", "submitted_text": "The function will take in a dictionary where the keys are strings and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    The function will take in a dictionary where the keys are sets of characters and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.\n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 416, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student58", "submitted_text": "return the sum of the integers. If the integer corresponds to strings 'Pluto' or 'Sun', ignore the integer", "prompt": "def planets_mass(planets):\n    \"\"\"\n    return the sum of the integers. If the integer corresponds to sets of characters 'Pluto' or 'Sun', ignore the integer\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 426, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student2", "submitted_text": "This function prints an output containing all the strings that appear", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    This function prints an output containing all the sets of characters that appear\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 438, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student37", "submitted_text": "Write a function which takes a dictionary of integers mapped to strings and a second dictionary of integers mapped to lists (size 2) of strings and maps takes the integers from the first list and constructs a new dictionary where the string mapped to each integer in the first list is mapped to the list the integer is mapped to in the second dictionary", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Write a function which takes a dictionary of integers mapped to sets of characters and a second dictionary of integers mapped to lists (size 2) of sets of characters and maps takes the integers from the first list and constructs a new dictionary where the set of characters mapped to each integer in the first list is mapped to the list the integer is mapped to in the second dictionary\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 441, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student72", "submitted_text": "Return a dictionary with the key being the string from the first dictionary in the input. Go through the next dictionary in the input and find what the integer in the first dictionary in the input corresopnds to. Return that as what corresponds to the string in the ouput.", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Return a dictionary with the key being the set of characters from the first dictionary in the input. Go through the next dictionary in the input and find what the integer in the first dictionary in the input corresopnds to. Return that as what corresponds to the set of characters in the ouput.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 451, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student23", "submitted_text": "This function takes in a list within a list, consisting of an integer in the outer list, and names as a string in the inner list. The output creates a dictionary where the key is the string and updates the dictionary with the value which is the integer that is given. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a list within a list, consisting of an integer in the outer list, and names as a set of characters in the inner list. The output creates a dictionary where the key is the set of characters and updates the dictionary with the value which is the integer that is given. \n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 453, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student33", "submitted_text": "The function takes in some number of lists that each consist of an integer and another list of strings \"names\". For each list, the function creates a dictionary entry with each string in \"names\" and the integer in that list. The function returns the dictionary. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function takes in some number of lists that each consist of an integer and another list of sets of characters \"names\". For each list, the function creates a dictionary entry with each set of characters in \"names\" and the integer in that list. The function returns the dictionary. \n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 454, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student35", "submitted_text": "The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. The output is a dictionary where the keys are string names and the values are their corresponding numbers.", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function is supposed to calculate the number of meetings of each set of characters. It iterates through each list of the list of lists. The number provided in each list is assigned to all the sets of characters in the list next to it. If a set of characters name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. The output is a dictionary where the keys are set of characters names and the values are their corresponding numbers.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 455, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student35", "submitted_text": "The function is supposed to calculate the number of meetings of each string. It iterates through each list of the list of lists. A dictionary is made where the keys are string names and the values are their corresponding numbers.The number provided in each list is assigned to all the strings in the list next to it. If a string name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function is supposed to calculate the number of meetings of each set of characters. It iterates through each list of the list of lists. A dictionary is made where the keys are set of characters names and the values are their corresponding numbers.The number provided in each list is assigned to all the sets of characters in the list next to it. If a set of characters name is repeated in some other list, the corresponding number is not assigned rather added to the number which was initially assigned. \n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 456, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student40", "submitted_text": "the input will consist of a list of lists. an empty dictionary will be made. the strings will be keys in the dictionary and the numbers will be the values that correspond to each key. if a key appears twice, then the values will be added and will correspond to only one key.", "prompt": "def times_with(meetings):\n    \"\"\"\n    the input will consist of a list of lists. an empty dictionary will be made. the sets of characters will be keys in the dictionary and the numbers will be the values that correspond to each key. if a key appears twice, then the values will be added and will correspond to only one key.\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 459, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student40", "submitted_text": "the input will consist of a list of lists. an empty dictionary will be made. each string within the list will be a  key. the numbers outside of each list will be the value for each key. if a key appears twice, then the values will be added and will correspond to only one key.", "prompt": "def times_with(meetings):\n    \"\"\"\n    the input will consist of a list of lists. an empty dictionary will be made. each set of characters within the list will be a  key. the numbers outside of each list will be the value for each key. if a key appears twice, then the values will be added and will correspond to only one key.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 468, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student60", "submitted_text": "This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every set of characters in the list. If the set of characters appears multiple times, the number is added to that. \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 469, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student60", "submitted_text": "This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. The function then would return a dictionary containing the total value assigned to every string. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would return { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\n", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every set of characters in the list. If the set of characters appears multiple times, the number is added to that. The function then would return a dictionary containing the total value assigned to every set of characters. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would return { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\n\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 484, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student76", "submitted_text": "takes the number before the bracket of strings and adds that value to a dictionary. if the name is mentioned more than once with multiple numbers it sums them and adds them to the dictionary output", "prompt": "def times_with(meetings):\n    \"\"\"\n    takes the number before the bracket of sets of characters and adds that value to a dictionary. if the name is mentioned more than once with multiple numbers it sums them and adds them to the dictionary output\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 485, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student79", "submitted_text": "you are going to have a nested list as an input. the inner most lists are going to have strings. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists and add to the list if the same name already has a value in the dictionary.", "prompt": "def times_with(meetings):\n    \"\"\"\n    you are going to have a nested list as an input. the inner most lists are going to have sets of characters. next to them they will have an integer. your goal is to create a dictionary with the names in the inner most lists and add to the list if the same name already has a value in the dictionary.\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 496, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student13", "submitted_text": "Based on the list of strings inputted, the function will identify the number of strings that say 'Meep' and 'Morp' and return a list of the number of 'Meep' and the number of 'Morp' strings.", "prompt": "def meeps_morps(items):\n    \"\"\"\n    Based on the list of sets of characters inputted, the function will identify the number of sets of characters that say 'Meep' and 'Morp' and return a list of the number of 'Meep' and the number of 'Morp' sets of characters.\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 500, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student22", "submitted_text": "take in a list of strings and output a count of how many times the word 'Meep' and 'Morp' occur", "prompt": "def meeps_morps(items):\n    \"\"\"\n    take in a list of sets of characters and output a count of how many times the set of characters 'Meep' and 'Morp' occur\n    \"\"\"\n    ", "subset": "first_failure", "original": "word"}
{"__index_level_0__": 502, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student22", "submitted_text": "take in a list of strings and output a list count of how many times the word 'Meep' and 'Morp' occur", "prompt": "def meeps_morps(items):\n    \"\"\"\n    take in a list of sets of characters and output a list count of how many times the set of characters 'Meep' and 'Morp' occur\n    \"\"\"\n    ", "subset": "last_success", "original": "word"}
{"__index_level_0__": 503, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student37", "submitted_text": "Write a function which takes a list of strings as an input, creates a list of 0's of length 2 called counter, then iterates through the input list and for each instance of 'Meep' in the input list, adds +1 to counter[0], and for each instance of 'Morp', adds +1 to counter[1].", "prompt": "def meeps_morps(items):\n    \"\"\"\n    Write a function which takes a list of sets of characters as an input, creates a list of 0's of length 2 called counter, then iterates through the input list and for each instance of 'Meep' in the input list, adds +1 to counter[0], and for each instance of 'Morp', adds +1 to counter[1].\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 517, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student19", "submitted_text": "Takes an input string which is the first three letters of any day of the week, and an input number 0-23. If the input string is 'Sat' or 'Sun', it returns 'weekend'. Otherwise, if the hour is between 0 and 8, it returns 'sleeping'. If the hour is 9-23 and the string is not 'Sat' or 'Sun', it returns 'weekday'.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    Takes an input set of characters which is the first three letters of any day of the week, and an input number 0-23. If the input set of characters is 'Sat' or 'Sun', it returns 'weekend'. Otherwise, if the hour is between 0 and 8, it returns 'sleeping'. If the hour is 9-23 and the set of characters is not 'Sat' or 'Sun', it returns 'weekday'.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 524, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student42", "submitted_text": "take in a day and an hour. if the hour is between 0 and 8, output the string \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, output the string \"weekend\". else, output \"weekday\". ", "prompt": "def print_time(day,hour):\n    \"\"\"\n    take in a day and an hour. if the hour is between 0 and 8, output the set of characters \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, output the set of characters \"weekend\". else, output \"weekday\". \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 526, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student42", "submitted_text": "take in a day and an hour. if the hour is less than or equal to 8, return the string \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, return the string \"weekend\". else, return the string \"weekday\". ", "prompt": "def print_time(day,hour):\n    \"\"\"\n    take in a day and an hour. if the hour is less than or equal to 8, return the set of characters \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, return the set of characters \"weekend\". else, return the set of characters \"weekday\". \n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 534, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student57", "submitted_text": "given a string and an integer, if given string is either \"Sat\" or \"Sun\", return \"weekend\". if string is a weekday (i.e. \"Mon\" or \"Tue\"), take into account the integer. if integer is from 9-23, return \"weekday\". if integer is from 0-8, return \"sleeping\". if integer is more than 24, return an error statement stating there are only 24 hours in a day where midnight starts at 0.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    given a set of characters and an integer, if given set of characters is either \"Sat\" or \"Sun\", return \"weekend\". if set of characters is a weekday (i.e. \"Mon\" or \"Tue\"), take into account the integer. if integer is from 9-23, return \"weekday\". if integer is from 0-8, return \"sleeping\". if integer is more than 24, return an error statement stating there are only 24 hours in a day where midnight starts at 0.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 535, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student57", "submitted_text": "given a string and an integer, if given string is either \"Sat\" or \"Sun\", return \"weekend\". if string is \"Mon\", \"Tue\", \"Wed\", \"Thu\" or \"Fri\", take into account the integer. if integer is from 9-23, return \"weekday\". if integer is from 0-8, return \"sleeping\". if integer is more than 24, return an error statement stating there are only 24 hours in a day where midnight starts at 0.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    given a set of characters and an integer, if given set of characters is either \"Sat\" or \"Sun\", return \"weekend\". if set of characters is \"Mon\", \"Tue\", \"Wed\", \"Thu\" or \"Fri\", take into account the integer. if integer is from 9-23, return \"weekday\". if integer is from 0-8, return \"sleeping\". if integer is more than 24, return an error statement stating there are only 24 hours in a day where midnight starts at 0.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 540, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student19", "submitted_text": "Takes a list of strings words and a string ending, removes any instance of ending from each item in words, and replaces it with an 's'.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Takes a list of sets of characters words and a set of characters ending, removes any instance of ending from each item in words, and replaces it with an 's'.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 541, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student20", "submitted_text": "Take a list of words sharing the same ending, and a string as an input.\nSearch the last letters of the word for the string, and replace it with 's'.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Take a list of words sharing the same ending, and a set of characters as an input.\nSearch the last letters of the word for the set of characters, and replace it with 's'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 544, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student20", "submitted_text": "For each word in the list, remove the last instance of ending that can be found in the word and add a s to the word", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    For each set of characters in the list, remove the last instance of ending that can be found in the set of characters and add a s to the set of characters\n    \"\"\"\n    ", "subset": "last_success", "original": "word"}
{"__index_level_0__": 545, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student36", "submitted_text": "With the words in the list, replace the part of the word modifying tense with the string contained outside the list", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    With the words in the list, replace the part of the word modifying tense with the set of characters contained outside the list\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 548, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student36", "submitted_text": "replace the characters contained within the string outside of the list when it appears in the words in the list with \"s\"", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    replace the characters contained within the set of characters outside of the list when it appears in the words in the list with \"s\"\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 551, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student38", "submitted_text": "Take out ending from each string in words and add 's'", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Take out ending from each set of characters in words and add 's'\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 552, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student42", "submitted_text": "given a list of strings, and an ending, return a list of strings where each element of the new list is one of the strings from the initial list, but with the designated ending removed and replaces with an \"s\"", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    given a list of sets of characters, and an ending, return a list of sets of characters where each element of the new list is one of the sets of characters from the initial list, but with the designated ending removed and replaces with an \"s\"\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 553, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student43", "submitted_text": "Replaces all part in the inputted first component, which is a list's strings that is specified as the inputted second component with s.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Replaces all part in the inputted first component, which is a list's sets of characters that is specified as the inputted second component with s.\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 554, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student54", "submitted_text": "Find the string stated after the list within each string at each index in the list and replace with 's'.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Find the set of characters stated after the list within each set of characters at each index in the list and replace with 's'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 558, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student54", "submitted_text": "Find the string stated after the list within each string at each index in the list and replace with 's'. If the string stated after the list occurs more than one time within a string in the list, replace it with 's' the last time, maintaining the rest of the string. ", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Find the set of characters stated after the list within each set of characters at each index in the list and replace with 's'. If the set of characters stated after the list occurs more than one time within a set of characters in the list, replace it with 's' the last time, maintaining the rest of the set of characters. \n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 559, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student57", "submitted_text": "when given a list of strings and a string, delete the end of each string in list by the given string and then add character \"s\" to each string in list", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    when given a list of sets of characters and a set of characters, delete the end of each set of characters in list by the given set of characters and then add character \"s\" to each set of characters in list\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 599, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student9", "submitted_text": "The function determines which season the string belongs to.", "prompt": "def getSeason(month):\n    \"\"\"\n    The function determines which season the set of characters belongs to.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 604, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student9", "submitted_text": "The function determines which season the string belongs to. It makes the first letter of the output lowercase. Instead of returning 'autumn', return 'fall'.", "prompt": "def getSeason(month):\n    \"\"\"\n    The function determines which season the set of characters belongs to. It makes the first letter of the output lowercase. Instead of returning 'autumn', return 'fall'.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 620, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student28", "submitted_text": "This function takes one parameter, month. Month is a string and Month represents the months in a year. There are seasons associated with each month. Winter, spring, summer, and fall. The code should take seasons associated with that month and print the associated season of that month. The months of December, January, and February should be winter, and so on. ", "prompt": "def getSeason(month):\n    \"\"\"\n    This function takes one parameter, month. Month is a set of characters and Month represents the months in a year. There are seasons associated with each month. Winter, spring, summer, and fall. The code should take seasons associated with that month and print the associated season of that month. The months of December, January, and February should be winter, and so on. \n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 621, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student31", "submitted_text": "Takes a string corresponding to one month of the year, and returns a string indicating what season that month is in.", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes a set of characters corresponding to one month of the year, and returns a set of characters indicating what season that month is in.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 624, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student31", "submitted_text": "Takes a string corresponding to one month of the year, and returns a string indicating what season that month is in: December, January, and February are all in winter, March, April, and May are all in spring, June, July, and August are all in summer, and October, September, and November are all in the season \"fall\".", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes a set of characters corresponding to one month of the year, and returns a set of characters indicating what season that month is in: December, January, and February are all in winter, March, April, and May are all in spring, June, July, and August are all in summer, and October, September, and November are all in the season \"fall\".\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 629, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student45", "submitted_text": "Takes one parameter, a string, which we will call month. Outputs a string which we will call season. If month is \"December\", \"January\", or \"February\", season is 'winter'. If month is \"March\", \"April\", or \"May\", season is 'spring'. If month is \"June\", \"July\", or \"August\", season is 'summer'. If month is \"September\", \"October\", or \"November\", season is \"fall\".", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes one parameter, a set of characters, which we will call month. Outputs a set of characters which we will call season. If month is \"December\", \"January\", or \"February\", season is 'winter'. If month is \"March\", \"April\", or \"May\", season is 'spring'. If month is \"June\", \"July\", or \"August\", season is 'summer'. If month is \"September\", \"October\", or \"November\", season is \"fall\".\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 632, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student45", "submitted_text": "Takes one parameter, a string, which we will call month. Outputs a string which we will call season. If month is \"January\", season is 'winter'. If month is \"April\", season is 'spring'. If month is \"August\", season is 'summer'. If month is \"October\", season is 'fall'.", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes one parameter, a set of characters, which we will call month. Outputs a set of characters which we will call season. If month is \"January\", season is 'winter'. If month is \"April\", season is 'spring'. If month is \"August\", season is 'summer'. If month is \"October\", season is 'fall'.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 633, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student46", "submitted_text": "The functions take in a string, representing a month, then outputs the season commonly associated with that month.", "prompt": "def getSeason(month):\n    \"\"\"\n    The functions take in a set of characters, representing a month, then outputs the season commonly associated with that month.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 636, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student46", "submitted_text": "The functions take in a string, representing a month in with the first letter being upper case, then outputs the season commonly associated with that month, in lower case.", "prompt": "def getSeason(month):\n    \"\"\"\n    The functions take in a set of characters, representing a month in with the first letter being upper case, then outputs the season commonly associated with that month, in lower case.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 638, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student47", "submitted_text": "\"January, February, March is winter, April, May, June is spring, July, August, September is summer, October, November, December is fall, determine the class of the input, produce an all lower case string\"", "prompt": "def getSeason(month):\n    \"\"\"\n    \"January, February, March is winter, April, May, June is spring, July, August, September is summer, October, November, December is fall, determine the class of the input, produce an all lower case set of characters\"\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 645, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student58", "submitted_text": "If string is 'June' 'July' or 'August', return 'summer'. If string is 'September' 'October' or 'November', return 'fall'. If string is 'December' 'January' or 'February' return 'winter'. If string is 'March' 'April' or 'May', return 'spring'.", "prompt": "def getSeason(month):\n    \"\"\"\n    If set of characters is 'June' 'July' or 'August', return 'summer'. If set of characters is 'September' 'October' or 'November', return 'fall'. If set of characters is 'December' 'January' or 'February' return 'winter'. If set of characters is 'March' 'April' or 'May', return 'spring'.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 646, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student65", "submitted_text": "This function inputs the string of a month and returns the name of the season it is in (in the northern hemisphere)", "prompt": "def getSeason(month):\n    \"\"\"\n    This function inputs the set of characters of a month and returns the name of the season it is in (in the northern hemisphere)\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 655, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student5", "submitted_text": "the function assessVowels will take input of a string and return a list of all the vowels in that string in the case they were originally written. ", "prompt": "def assessVowels(s):\n    \"\"\"\n    the function assessVowels will take input of a set of characters and return a list of all the vowels in that set of characters in the case they were originally written. \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 657, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student5", "submitted_text": "the function assessVowels will take input of a string and return a list of all the vowels in that string. include both capital and lower case letters. ", "prompt": "def assessVowels(s):\n    \"\"\"\n    the function assessVowels will take input of a set of characters and return a list of all the vowels in that set of characters. include both capital and lower case letters. \n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 658, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student8", "submitted_text": "Returns a list of all vowels (capitalized or non-capitalized) from the given string.", "prompt": "def assessVowels(s):\n    \"\"\"\n    Returns a list of all vowels (capitalized or non-capitalized) from the given set of characters.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 659, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student11", "submitted_text": "A function that can help find out all 'a', 'e','i','o','u','A','E','I','O','U' a string has, and form a list with all those letters it has.", "prompt": "def assessVowels(s):\n    \"\"\"\n    A function that can help find out all 'a', 'e','i','o','u','A','E','I','O','U' a set of characters has, and form a list with all those letters it has.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 660, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student13", "submitted_text": "Given a string of characters, the function extracts the vowels in the string and returns them in a list.", "prompt": "def assessVowels(s):\n    \"\"\"\n    Given a set of characters, the function extracts the vowels in the set of characters and returns them in a list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 662, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student13", "submitted_text": "Given a string of characters, the functions should then extract the vowels in the string and returns them in a list, making sure to account for both uppercase and lowercase versions of the vowels. ", "prompt": "def assessVowels(s):\n    \"\"\"\n    Given a set of characters, the functions should then extract the vowels in the set of characters and returns them in a list, making sure to account for both uppercase and lowercase versions of the vowels. \n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 663, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student16", "submitted_text": "return a list of strings with all vowels used in the input", "prompt": "def assessVowels(s):\n    \"\"\"\n    return a list of sets of characters with all vowels used in the input\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 665, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student16", "submitted_text": "return a list of strings with all vowels used in the input in the same order including capitalizations (repetitions ok)", "prompt": "def assessVowels(s):\n    \"\"\"\n    return a list of sets of characters with all vowels used in the input in the same order including capitalizations (repetitions ok)\n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 666, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student22", "submitted_text": "takes in a string and returns a list of vowels ", "prompt": "def assessVowels(s):\n    \"\"\"\n    takes in a set of characters and returns a list of vowels \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 667, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student22", "submitted_text": "takes in a string and checks for uppercase and lowercase vowels and returns a list of those uppercase and lowercase vowels, if any", "prompt": "def assessVowels(s):\n    \"\"\"\n    takes in a set of characters and checks for uppercase and lowercase vowels and returns a list of those uppercase and lowercase vowels, if any\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 668, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student37", "submitted_text": "Write a function which takes a string as an input and returns a list of each vowel present in the string, case sensitive", "prompt": "def assessVowels(s):\n    \"\"\"\n    Write a function which takes a set of characters as an input and returns a list of each vowel present in the set of characters, case sensitive\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 669, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student37", "submitted_text": "Write a function which takes a string as an input and returns a list of each vowel present in the string, where capitalized vowels are present in the return list as capitalized and lower case vowels as lower case", "prompt": "def assessVowels(s):\n    \"\"\"\n    Write a function which takes a set of characters as an input and returns a list of each vowel present in the set of characters, where capitalized vowels are present in the return list as capitalized and lower case vowels as lower case\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 670, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student61", "submitted_text": "function returns all vowels in strings regardless of capitalization", "prompt": "def assessVowels(s):\n    \"\"\"\n    function returns all vowels in sets of characters regardless of capitalization\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 673, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student73", "submitted_text": "if the input string has any of these letters [a, A, e, E, i, I, o, O, u, U], extract them from the string and make a list. if the input doesn't consist of these letters, make an empty list", "prompt": "def assessVowels(s):\n    \"\"\"\n    if the input set of characters has any of these letters [a, A, e, E, i, I, o, O, u, U], extract them from the set of characters and make a list. if the input doesn't consist of these letters, make an empty list\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 674, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student74", "submitted_text": "puts all the vowels of a string in a list", "prompt": "def assessVowels(s):\n    \"\"\"\n    puts all the vowels of a set of characters in a list\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 677, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student33", "submitted_text": "The function takes in 5 lists consisting of 5 strings and one additional string \"target\". If any of the lists consists of all 5 strings with the same content as \"target,\" the function returns True. Otherwise, the function returns False. ", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    The function takes in 5 lists consisting of 5 sets of characters and one additional set of characters \"target\". If any of the lists consists of all 5 sets of characters with the same content as \"target,\" the function returns True. Otherwise, the function returns False. \n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 678, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student35", "submitted_text": "'board' is a list of lists with string values. 'letter' is a string value. The function checks if there is any list inside the list of lists in which all the values are the exact same as that of 'letter'. If so, it returns True otherwise False.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    'board' is a list of lists with set of characters values. 'letter' is a set of characters value. The function checks if there is any list inside the list of lists in which all the values are the exact same as that of 'letter'. If so, it returns True otherwise False.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 679, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student35", "submitted_text": "'board' is a list of lists with string values. 'letter' is a string value. The function checks if there is any list inside the list of lists in which all the values match with letter. If so, it returns True otherwise False.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    'board' is a list of lists with set of characters values. 'letter' is a set of characters value. The function checks if there is any list inside the list of lists in which all the values match with letter. If so, it returns True otherwise False.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 680, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student40", "submitted_text": "if one of the lists within the list contains strings that all contain the same value, the function will return 'True'. otherwise, the function will return 'False'. ", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    if one of the lists within the list contains sets of characters that all contain the same value, the function will return 'True'. otherwise, the function will return 'False'. \n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 690, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student59", "submitted_text": "takes a list of lists and a string as inputs. if the string appears in the same index in each list or appears for every value in a list, returns True. for all other cases, returns False", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    takes a list of lists and a set of characters as inputs. if the set of characters appears in the same index in each list or appears for every value in a list, returns True. for all other cases, returns False\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 698, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student69", "submitted_text": "Enter a list of lists of strings. if any list has five consecutive 'X' values, return true. else return false", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Enter a list of lists of sets of characters. if any list has five consecutive 'X' values, return true. else return false\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 699, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student69", "submitted_text": "Enter a list where the 0th index is a list of lists of strings, and the 1st index is a character. if any list in the 0th index has five consecutive values of the character entered in the 1st index, return true. else return false", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    Enter a list where the 0th index is a list of lists of sets of characters, and the 1st index is a character. if any list in the 0th index has five consecutive values of the character entered in the 1st index, return true. else return false\n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 706, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student27", "submitted_text": "Calculate the total value of a list of ice cream. The input will be a list of strings, and each string contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each string. The value can be integers or floats.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Calculate the total value of a list of ice cream. The input will be a list of sets of characters, and each set of characters contains three parts separated by \"\\t\". Calculate the sum of the values of each ice cream by summing up the last part of each set of characters. The value can be integers or floats.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 707, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "For each list entry, parse through the string until after the 2nd \"\\\" character. Then return the integer following the \"t\" character. Keep track of the integer for each entry and add them all together, returning the sum for each list\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    For each list entry, parse through the set of characters until after the 2nd \"\\\" character. Then return the integer following the \"t\" character. Keep track of the integer for each entry and add them all together, returning the sum for each list\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 714, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "For each list entry, start at the end of the corresponding string, parse backwards until you reach the first \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    For each list entry, start at the end of the corresponding set of characters, parse backwards until you reach the first \"t\" character. Isolate the set of characters from the \"t\" character until the end of the entry. Convert that set of characters to a float, then add all of the floats for each entry together and return the total.\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 723, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student49", "submitted_text": "Given a list of strings remove anything past the last t in the string, type cast to an integer and then add them together. ", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Given a list of sets of characters remove anything past the last t in the set of characters, type cast to an integer and then add them together. \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 727, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student49", "submitted_text": "Given a list of strings remove anything past the last t in the string, type cast the value to float. Move to the next string in the list, if exists and repeat. Once the end at the end of the list and add all values that were cast to float together.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Given a list of sets of characters remove anything past the last t in the set of characters, type cast the value to float. Move to the next set of characters in the list, if exists and repeat. Once the end at the end of the list and add all values that were cast to float together.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 740, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student68", "submitted_text": "given an array of strings, parse each string by '\\t' and grab the last value that should be a number and add it to a count value. return the count value", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given an array of sets of characters, parse each set of characters by '\\t' and grab the last value that should be a number and add it to a count value. return the count value\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 741, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student68", "submitted_text": "given an array of strings, parse each string by '\\t' and grab the last value that should be a double and add it to a count value. return the count value", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given an array of sets of characters, parse each set of characters by '\\t' and grab the last value that should be a double and add it to a count value. return the count value\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 742, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student70", "submitted_text": "Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into an integer, then add that integer to the sum. Return the sum at the end of the list.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each set of characters in the input list. After the second time \"\\t\" appears in the set of characters, save the rest of the set of characters and convert it into an integer, then add that integer to the sum. Return the sum at the end of the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 744, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student70", "submitted_text": "Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string. If this remaining portion of the string contains \".\", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Return the sum at the end of the list.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each set of characters in the input list. After the second time \"\\t\" appears in the set of characters, save the rest of the set of characters. If this remaining portion of the set of characters contains \".\", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Return the sum at the end of the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 745, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student78", "submitted_text": "given a list of strings, split each string on the '\\' character. in the new list of 3 strings, take the string in the 3rd position, eliminate the 't' in it, convert it to a float, and add it to running total. output this total", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given a list of sets of characters, split each set of characters on the '\\' character. in the new list of 3 sets of characters, take the set of characters in the 3rd position, eliminate the 't' in it, convert it to a float, and add it to running total. output this total\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 752, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student27", "submitted_text": "The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. They don't have to be in the same order or same length. Return a dictionary with the string as the key and the position of the string as the value.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" list and a \"wordList\" list. They consist of sets of characters and have equal length. Check if the set of characters in the puzzle list contains all the characters of the set of characters in the wordList list. They don't have to be in the same order or same length. Return a dictionary with the set of characters as the key and the position of the set of characters as the value.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 754, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student29", "submitted_text": "For each string within the list, parse the string until the previous letters make up a complete word. Return that word as the key and its index as its value in a dictionary. Else, return an empty dictionary", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    For each set of characters within the list, parse the set of characters until the previous letters make up a complete word. Return that word as the key and its index as its value in a dictionary. Else, return an empty dictionary\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 760, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student49", "submitted_text": "Given a two lists labeled puzzle and wordList, for each word in the wordList, if the same letters appear in puzzle, create a dictionary with the corresponding word in WordList as the key and the position of where the letters show up in puzzle as the value. ", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    Given a two lists labeled puzzle and wordList, for each set of characters in the wordList, if the same letters appear in puzzle, create a dictionary with the corresponding set of characters in WordList as the key and the position of where the letters show up in puzzle as the value. \n    \"\"\"\n    ", "subset": "first_failure", "original": "word"}
{"__index_level_0__": 767, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student66", "submitted_text": "if the letters of the strings in the first array list are in the array list above then create a dictionary where the second array list string is the key and the index is the definition. ", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    if the letters of the sets of characters in the first array list are in the array list above then create a dictionary where the second array list set of characters is the key and the index is the definition. \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 768, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student66", "submitted_text": "if the letters contained in the first string are entirely contained in a string in the second array list. then create a dictionary where the that string is the key and the index is within that key", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    if the letters contained in the first set of characters are entirely contained in a set of characters in the second array list. then create a dictionary where the that set of characters is the key and the index is within that key\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 773, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student68", "submitted_text": "given two arrays of strings, for each word in the second array, count how many strings in the first array contain all the characters in the word in the second array. ", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    given two arrays of sets of characters, for each set of characters in the second array, count how many sets of characters in the first array contain all the characters in the set of characters in the second array. \n    \"\"\"\n    ", "subset": "first_failure", "original": "word"}
{"__index_level_0__": 774, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student70", "submitted_text": "create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each set of characters of the input list puzzle. if any of the sets of characters in puzzle contain a set of characters from wordList, add that set of characters from wordList as a key to the dictionary with the index of the set of characters from puzzle where it appeared as the value. return the dictionary.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 777, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student70", "submitted_text": "create an empty dictionary. iterate through each string of the input list puzzle. if any of the strings in puzzle contain the same letters in any order as a string from wordList, add that string from wordList as a key to the dictionary with the index of the string from puzzle where it appeared as the value. return the dictionary.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    create an empty dictionary. iterate through each set of characters of the input list puzzle. if any of the sets of characters in puzzle contain the same letters in any order as a set of characters from wordList, add that set of characters from wordList as a key to the dictionary with the index of the set of characters from puzzle where it appeared as the value. return the dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 778, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student78", "submitted_text": "given that puzzle is a list of strings, check if the letters of each string in wordList is contained in any of the strings in puzzle. if the string in wordList is in any of the strings in puzzle, add it to a dictionary with the key as the sting in wordList and the output as the position of the string in puzzle", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    given that puzzle is a list of sets of characters, check if the letters of each set of characters in wordList is contained in any of the sets of characters in puzzle. if the set of characters in wordList is in any of the sets of characters in puzzle, add it to a dictionary with the key as the set of characters in wordList and the output as the position of the set of characters in puzzle\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 790, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student9", "submitted_text": "The function shows how many characters, including ''', each string within the list has in common with the characters in the string outside the list.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function shows how many characters, including ''', each set of characters within the list has in common with the characters in the set of characters outside the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 793, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student15", "submitted_text": "For each word in the guessList, if it has a letter in the hiddenWord and the letter is in the correct spot, add 2. If it has a letter in the hiddenWord and the letter is not in the correct spot, add 1. Return a list of the total point scores for each word in guessList.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    For each set of characters in the guessList, if it has a letter in the hiddenWord and the letter is in the correct spot, add 2. If it has a letter in the hiddenWord and the letter is not in the correct spot, add 1. Return a list of the total point scores for each set of characters in guessList.\n    \"\"\"\n    ", "subset": "first_failure", "original": "word"}
{"__index_level_0__": 794, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student24", "submitted_text": "For each word in guessList, if the character of the hiddenWord[i] matches the same position and are the same word, add 2. If the word in guessList and the hiddenWord have the same characters but not in the same position, add 1. Return a list with the score for each word in a list. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    For each set of characters in guessList, if the character of the hiddenWord[i] matches the same position and are the same set of characters, add 2. If the set of characters in guessList and the hiddenWord have the same characters but not in the same position, add 1. Return a list with the score for each set of characters in a list. \n    \"\"\"\n    ", "subset": "first_success", "original": "word"}
{"__index_level_0__": 796, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student31", "submitted_text": "Takes a list of strings and a single string called the answer. Then, for each string in the list of strings, compares it to the answer and creates an integer score for that string. For every time the string in the list of strings has the same letter in the same place as the answer, adds two to the score. For every time the string in the list of strings has the same letter in a different place as the answer, adds one to the score. Then, adds that score to a list and starts a new score at 0 for the next string in the list of strings. Continue until all the strings in the list of strings have been compared with the answer, and then return the list of scores. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Takes a list of sets of characters and a single set of characters called the answer. Then, for each set of characters in the list of sets of characters, compares it to the answer and creates an integer score for that set of characters. For every time the set of characters in the list of sets of characters has the same letter in the same place as the answer, adds two to the score. For every time the set of characters in the list of sets of characters has the same letter in a different place as the answer, adds one to the score. Then, adds that score to a list and starts a new score at 0 for the next set of characters in the list of sets of characters. Continue until all the sets of characters in the list of sets of characters have been compared with the answer, and then return the list of scores. \n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 798, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student45", "submitted_text": "Takes two parameters: a list of strings which we will call guessList and a string which we will call hiddenWord. Makes a new list called scores. For each string in guessList, we will compare each character to the characters in hiddenWord. Make a variable called score. If the letter at each index in the string is the same as the letter at that index in hiddenWord, add 2 to score. If the letter is the same as a letter at a different index in hiddenWord, add 1 to score. Add score to scores. Return scores. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Takes two parameters: a list of sets of characters which we will call guessList and a set of characters which we will call hiddenWord. Makes a new list called scores. For each set of characters in guessList, we will compare each character to the characters in hiddenWord. Make a variable called score. If the letter at each index in the set of characters is the same as the letter at that index in hiddenWord, add 2 to score. If the letter is the same as a letter at a different index in hiddenWord, add 1 to score. Add score to scores. Return scores. \n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 802, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student53", "submitted_text": "nested loop through the guessList and if the string exists in hiddenWord in the the same index add 2, elseif it exists and not in the same index add 1. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    nested loop through the guessList and if the set of characters exists in hiddenWord in the the same index add 2, elseif it exists and not in the same index add 1. \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 807, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student55", "submitted_text": "Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function returns a list of the total points from each word in the list.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function that gets a list of sets of characters and the hidden word (a set of characters separated by a comma). From the list of sets of characters, compare each letter from the sets of characters in the list with the hidden word. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function returns a list of the total points from each set of characters in the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "word"}
{"__index_level_0__": 808, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student58", "submitted_text": "Cross reference the string with the list to return a list of integers representing identical characters", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Cross reference the set of characters with the list to return a list of integers representing identical characters\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 812, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student29", "submitted_text": "For each entry in the list, loop through each character in the string and count how many \"&\" are in each entry. Then add up the number of \"&\" in each entry and return the total number of \"&\" in the list", "prompt": "def andCount(andGrid):\n    \"\"\"\n    For each entry in the list, loop through each character in the set of characters and count how many \"&\" are in each entry. Then add up the number of \"&\" in each entry and return the total number of \"&\" in the list\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 813, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student32", "submitted_text": "Returns the sum of the number of times '&' is found within each string of each element of the array", "prompt": "def andCount(andGrid):\n    \"\"\"\n    Returns the sum of the number of times '&' is found within each set of characters of each element of the array\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 815, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student49", "submitted_text": "Given a list of strings, count how many times the & operator appears in the list.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    Given a list of sets of characters, count how many times the & operator appears in the list.\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 827, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student68", "submitted_text": "given an array of strings, the function will return the number of times the character '&' appears in the array of strings", "prompt": "def andCount(andGrid):\n    \"\"\"\n    given an array of sets of characters, the function will return the number of times the character '&' appears in the array of sets of characters\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 828, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student70", "submitted_text": "Iterate through each string in the input list. If a character in the current string is \"&\", add 1 to the count. Return the count at the end of the list.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    Iterate through each set of characters in the input list. If a character in the current set of characters is \"&\", add 1 to the count. Return the count at the end of the list.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 831, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student19", "submitted_text": "Takes an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Takes an input set of characters, single character, and list of index numbers. Every character in the input set of characters at one of these input indexes is replaced with the input character.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 832, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student19", "submitted_text": "Takes an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character. If an index is greater than the length of the string - 1, it is ignored.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Takes an input set of characters, single character, and list of index numbers. Every character in the input set of characters at one of these input indexes is replaced with the input character. If an index is greater than the length of the set of characters - 1, it is ignored.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 838, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student36", "submitted_text": "Insert the character contained in the second string into the character indexes of the first string contained in the list", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Insert the character contained in the second set of characters into the character indexes of the first set of characters contained in the list\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 841, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student36", "submitted_text": "Replace the character contained in c into the character indexes of s using the numbers in l as indexes. If the index is greater than the string length replace the last character in s with c instead", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Replace the character contained in c into the character indexes of s using the numbers in l as indexes. If the index is greater than the set of characters length replace the last character in s with c instead\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 845, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student42", "submitted_text": "given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and return the new string ", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a set of characters, a character, and a list of indexes, replace the listed indexes in the set of characters with the given character and return the new set of characters \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 846, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student42", "submitted_text": "given a string, a character, and a list of indexes, replace the listed indexes in the string with the given character and return the new string. if an index is outside the range of the list, ignore it.  ", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a set of characters, a character, and a list of indexes, replace the listed indexes in the set of characters with the given character and return the new set of characters. if an index is outside the range of the list, ignore it.  \n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 849, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student43", "submitted_text": "First convert each element in l from string to number. If the length of s is equal or greater than the largest N in l, then loop through each number N in l and replace the element in s that has the index order N with the element in c. Otherwise, do nothing. Return the changed s.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    First convert each element in l from set of characters to number. If the length of s is equal or greater than the largest N in l, then loop through each number N in l and replace the element in s that has the index order N with the element in c. Otherwise, do nothing. Return the changed s.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 850, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student54", "submitted_text": "Replace the initial string with the character at the given indices.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Replace the initial set of characters with the character at the given indices.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 851, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student57", "submitted_text": "given a string and a character and a list, replace string at specified index in list with given character", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a set of characters and a character and a list, replace set of characters at specified index in list with given character\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 855, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student57", "submitted_text": "given a string and a character and a list, replace string at specified index in list with given character if given index is not in the length of the string, ignore index", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    given a set of characters and a character and a list, replace set of characters at specified index in list with given character if given index is not in the length of the set of characters, ignore index\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 856, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student77", "submitted_text": "Given a string, a letter, and locations specified in a list, remove the letters in the string in the locations specified in the list, and replace them with the letter.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Given a set of characters, a letter, and locations specified in a list, remove the letters in the set of characters in the locations specified in the list, and replace them with the letter.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 865, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and replaces every other letter with the upper case letter. If it is just a one-letter word it is turned into an upper-case letter. It then returns the whole updated phrase, including all characters upper and lower case. ", "prompt": "def altText(s):\n    \"\"\"\n    This function takes in a set of characters and replaces every other letter with the upper case letter. If it is just a one-letter set of characters it is turned into an upper-case letter. It then returns the whole updated set of characters, including all characters upper and lower case. \n    \"\"\"\n    ", "subset": "last_success", "original": "phrase"}
{"__index_level_0__": 866, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student33", "submitted_text": "The function takes a string of text as an input. For words in the string with an odd number of letters, every other letter is capitalized starting with the first letter. For words in the string with an even number of letters, every other letter is capitalized starting with the second letter. ", "prompt": "def altText(s):\n    \"\"\"\n    The function takes a set of characters as an input. For words in the set of characters with an odd number of letters, every other letter is capitalized starting with the first letter. For words in the set of characters with an even number of letters, every other letter is capitalized starting with the second letter. \n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 867, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student35", "submitted_text": "'s' is a string value provided. Starting from the first character of the string, the function is supposed to convert every alternative character of the string into uppercase and then return the string.", "prompt": "def altText(s):\n    \"\"\"\n    's' is a set of characters value provided. Starting from the first character of the set of characters, the function is supposed to convert every alternative character of the set of characters into uppercase and then return the set of characters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 869, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student35", "submitted_text": "'s' is a string value provided. Starting from the first character of the string, the function is supposed to convert the characters of the string in even index positions into uppercase. The characters of the string should be in the same order as below, only the characters in even index positions are to be turned uppercase.", "prompt": "def altText(s):\n    \"\"\"\n    's' is a set of characters value provided. Starting from the first character of the set of characters, the function is supposed to convert the character of the set of characters in even index positions into uppercase. The characters of the set of characters should be in the same order as below, only the characters in even index positions are to be turned uppercase.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 870, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student40", "submitted_text": "if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, returns the same input with alternating uppercase and lowercase letters", "prompt": "def altText(s):\n    \"\"\"\n    if the set of characters has one character, returns a capital letter when given a lowercase letter. if the set of characters has multiple characters, returns the same input with alternating uppercase and lowercase letters\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 875, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student40", "submitted_text": "if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, the function will make every other character uppercase. ", "prompt": "def altText(s):\n    \"\"\"\n    if the set of characters has one character, returns a capital letter when given a lowercase letter. if the set of characters has multiple characters, the function will make every other character uppercase. \n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 876, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student44", "submitted_text": "Print the string that is input with every other character that is not a space capitalized starting with a capital letter. ", "prompt": "def altText(s):\n    \"\"\"\n    Print the set of characters that is input with every other character that is not a space capitalized starting with a capital letter. \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 879, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student44", "submitted_text": "Go through every character in the string. \nIf the character is a letter and that character is the first character of the input, print it capitalized. \nIf the character is a letter that is not the first one in the input and the previous letter that was printed was in uppercase, print in lowercase. \nIf the previous letter was printed in uppercase, print it in lowercase. ", "prompt": "def altText(s):\n    \"\"\"\n    Go through every character in the set of characters. \nIf the character is a letter and that character is the first character of the input, print it capitalized. \nIf the character is a letter that is not the first one in the input and the previous letter that was printed was in uppercase, print in lowercase. \nIf the previous letter was printed in uppercase, print it in lowercase. \n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 880, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student50", "submitted_text": "The input is a string. Capitalize every other letter, starting with the first letter.", "prompt": "def altText(s):\n    \"\"\"\n    The input is a set of characters. Capitalize every other letter, starting with the first letter.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 881, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student59", "submitted_text": "takes a string and capitalizes random letters in it", "prompt": "def altText(s):\n    \"\"\"\n    takes a set of characters and capitalizes random letters in it\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 883, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student59", "submitted_text": "takes a string. capitalizes random letters in each word of that string and adds the new words to a list. returns this new list of words", "prompt": "def altText(s):\n    \"\"\"\n    takes a set of characters. capitalizes random letters in each word of that set of characters and adds the new words to a list. returns this new list of words\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 884, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student60", "submitted_text": "This function inputs a string as a parameter. This function returns that string except every other letter is capitalized. This functions starts by capitalizing the first letter. This function ignores spaces. ", "prompt": "def altText(s):\n    \"\"\"\n    This function inputs a set of characters as a parameter. This function returns that set of characters except every other letter is capitalized. This functions starts by capitalizing the first letter. This function ignores spaces. \n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 886, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student60", "submitted_text": "This function inputs a string as a parameter. This function returns that string except every other letter is capitalized. This functions starts by capitalizing the first letter. ", "prompt": "def altText(s):\n    \"\"\"\n    This function inputs a set of characters as a parameter. This function returns that set of characters except every other letter is capitalized. This functions starts by capitalizing the first letter. \n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 887, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student63", "submitted_text": "The function takes in a string and capitalizes every other letter in the string, starting with the first letter being a capital.", "prompt": "def altText(s):\n    \"\"\"\n    The function takes in a set of characters and capitalizes every other letter in the set of characters, starting with the first letter being a capital.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 889, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student63", "submitted_text": "The function takes in a string and outputs the same string but with every other letter being capitalized, starting with the first letter being a capital.  ", "prompt": "def altText(s):\n    \"\"\"\n    The function takes in a set of characters and outputs the same set of characters but with every other letter being capitalized, starting with the first letter being a capital.  \n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 890, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student64", "submitted_text": "Returns string with alternate uppercase and lowercase letters. String must start with uppercase letter.", "prompt": "def altText(s):\n    \"\"\"\n    Returns set of characters with alternate uppercase and lowercase letters. Set of characters must start with uppercase letter.\n    \"\"\"\n    ", "subset": "first_success", "original": "String"}
{"__index_level_0__": 891, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student69", "submitted_text": "Enter a string. for every character in the string, if the index is an even even number, capitalize the character and print", "prompt": "def altText(s):\n    \"\"\"\n    Enter a set of characters. for every character in the set of characters, if the index is an even even number, capitalize the character and print\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 892, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student71", "submitted_text": "Turns the odd numbers of a string into capital letters", "prompt": "def altText(s):\n    \"\"\"\n    Turns the odd numbers of a set of characters into capital letters\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 896, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student76", "submitted_text": "Takes every odd character in a string and capitalizes", "prompt": "def altText(s):\n    \"\"\"\n    Takes every odd character in a set of characters and capitalizes\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 899, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student3", "submitted_text": "create a function which reverse the order of i first letters of the string\n", "prompt": "def changeSection(s,i):\n    \"\"\"\n    create a function which reverse the order of i first letters of the set of characters\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 902, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student3", "submitted_text": "create a function with 2 inputs string (s) and index number (i). Take i first letters of the string and then reverse the order of those letters", "prompt": "def changeSection(s,i):\n    \"\"\"\n    create a function with 2 inputs set of characters (s) and index number (i). Take i first letters of the set of characters and then reverse the order of those letters\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 903, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student4", "submitted_text": "creates the inverse of the inputted string", "prompt": "def changeSection(s,i):\n    \"\"\"\n    creates the inverse of the inputted set of characters\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 905, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student4", "submitted_text": "takes the inputted string (s) and takes the number of characters (i) and flips them around in the outputted string", "prompt": "def changeSection(s,i):\n    \"\"\"\n    takes the inputted set of characters (s) and takes the number of characters (i) and flips them around in the outputted set of characters\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 906, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student10", "submitted_text": "User inputs a string s and integer i. Function would flip the first i letters of string s backwards, and then concatenate the rest of the string to the end of the backwards letters.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    User inputs a set of characters s and integer i. Function would flip the first i letters of set of characters s backwards, and then concatenate the rest of the set of characters to the end of the backwards letters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 907, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student10", "submitted_text": "User inputs a string s and integer i. Function would write the first i letters of string s backwards and save that as string A. All the letters which were not flipped backwards would be saved as string B. Function would add string A and B, and then return that as the output", "prompt": "def changeSection(s,i):\n    \"\"\"\n    User inputs a set of characters s and integer i. Function would write the first i letters of set of characters s backwards and save that as set of characters A. All the letters which were not flipped backwards would be saved as set of characters B. Function would add set of characters A and B, and then return that as the output\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 908, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student17", "submitted_text": "When there are spaces in the string, reverse the order of it by the index of the given number.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    When there are spaces in the set of characters, reverse the order of it by the index of the given number.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 920, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student18", "submitted_text": "Flip the order of the letters from index 0 to i-1 in the string s. ", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Flip the order of the letters from index 0 to i-1 in the set of characters s. \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 924, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student21", "submitted_text": "given a string and a number within string length, produce a string that reverses the order of the characters up to the given number index concatenated with the rest of the original string", "prompt": "def changeSection(s,i):\n    \"\"\"\n    given a set of characters and a number within set of characters length, produce a set of characters that reverses the order of the characters up to the given number index concatenated with the rest of the original set of characters\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 929, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student21", "submitted_text": "create a new string up to the given index and after. reverse the new String up to this index and add the string after the index.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    create a new set of characters up to the given index and after. reverse the new Set of characters up to this index and add the set of characters after the index.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 930, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student25", "submitted_text": "\"s\" is a given string and \"i\" is the letter index of the given string. At the given index in the string, this function flips all letters before and at that position. If the given number is longer than the length of the string, the whole string will be reversed.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    \"s\" is a given set of characters and \"i\" is the letter index of the given set of characters. At the given index in the set of characters, this function flips all letters before and at that position. If the given number is longer than the length of the set of characters, the whole set of characters will be reversed.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 931, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student25", "submitted_text": "\"s\" is a given string and \"i\" is the letter index of the given string. In this case, indexing starts with \"1\" instead of \"0\". At the given index in the string, this function flips all letters before and at that position. If the given number is longer than the length of the string, the whole string will be reversed.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    \"s\" is a given set of characters and \"i\" is the letter index of the given set of characters. In this case, indexing starts with \"1\" instead of \"0\". At the given index in the set of characters, this function flips all letters before and at that position. If the given number is longer than the length of the set of characters, the whole set of characters will be reversed.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 932, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student26", "submitted_text": "Slice a string starting at 1 and ending at the given number. Reverse the slice and display the new string", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Slice a set of characters starting at 1 and ending at the given number. Reverse the slice and display the new set of characters\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 934, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student26", "submitted_text": "Slice a string starting at 1 and ending at the given number. Reverse the slice and replace it in the string; return the string", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Slice a set of characters starting at 1 and ending at the given number. Reverse the slice and replace it in the set of characters; return the set of characters\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 935, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student30", "submitted_text": "Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them before the remaining characters.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Takes in parameters (s, i), where s is a set of characters and i is an integer. Removes the first i elements in the set of characters, reverses their order, and inserts them before the remaining characters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 939, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student30", "submitted_text": "Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them at the front of the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Takes in parameters (s, i), where s is a set of characters and i is an integer. Removes the first i elements in the set of characters, reverses their order, and inserts them at the front of the set of characters.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 940, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student41", "submitted_text": "Segments the inputted string up to the given integer. Then prints the letters in the segmented string in reverse order. Then prints the segment of the string after the given integer.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Segments the inputted set of characters up to the given integer. Then prints the letters in the segmented set of characters in reverse order. Then prints the segment of the set of characters after the given integer.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 942, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student41", "submitted_text": "Prints each letter in the section of the string up to the given integer in reverse order. Then prints the rest of the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Prints each letter in the section of the set of characters up to the given integer in reverse order. Then prints the rest of the set of characters.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 943, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student48", "submitted_text": "Scramble the letters at the start of the string. The number of letters scrambled should be up to the number given.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Scramble the letters at the start of the set of characters. The number of letters scrambled should be up to the number given.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 944, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student51", "submitted_text": "flip the position of the characters in the string up to the specified index -1", "prompt": "def changeSection(s,i):\n    \"\"\"\n    flip the position of the characters in the set of characters up to the specified index -1\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1016, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student4", "submitted_text": "if inputter string contains \"^\", replaces \"^\" in the string with \"_\"", "prompt": "def reduce(val):\n    \"\"\"\n    if inputter set of characters contains \"^\", replaces \"^\" in the set of characters with \"_\"\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1018, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student17", "submitted_text": "changing the \"^\" to \"_\" and \"^\" to \"_\" in strings", "prompt": "def reduce(val):\n    \"\"\"\n    changing the \"^\" to \"_\" and \"^\" to \"_\" in sets of characters\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 1019, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student17", "submitted_text": "changing the \"^\" to \"-\" and \"^\" to \"-\" in strings", "prompt": "def reduce(val):\n    \"\"\"\n    changing the \"^\" to \"-\" and \"^\" to \"-\" in sets of characters\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 1021, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student21", "submitted_text": "for each index of the input string, if the index is \"^\" then change that index to an underscore, and return the new string with the change", "prompt": "def reduce(val):\n    \"\"\"\n    for each index of the input set of characters, if the index is \"^\" then change that index to an underscore, and return the new set of characters with the change\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1023, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student26", "submitted_text": "Count the characters in a string and replace all '^' as '_', then print the string", "prompt": "def reduce(val):\n    \"\"\"\n    Count the characters in a set of characters and replace all '^' as '_', then print the set of characters\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1026, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student26", "submitted_text": "Count the characters in a string and replace all '^' as '_', then return a copy of the new string. Do not display the count", "prompt": "def reduce(val):\n    \"\"\"\n    Count the characters in a set of characters and replace all '^' as '_', then return a copy of the new set of characters. Do not display the count\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1028, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student41", "submitted_text": "Replaces each upwards arrow in the input string with an underscore and prints the modified input.", "prompt": "def reduce(val):\n    \"\"\"\n    Replaces each upwards arrow in the input set of characters with an underscore and prints the modified input.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1030, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student51", "submitted_text": "check each character in the string and add it to a new string. If the character is ^ then add _ instead. Return the new string.", "prompt": "def reduce(val):\n    \"\"\"\n    check each character in the set of characters and add it to a new set of characters. If the character is ^ then add _ instead. Return the new set of characters.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1066, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student3", "submitted_text": "create a function with 3 input word(string), line_number (int) and map (dict). In map dictionary add new element of dictionary with key are word which given the corresponding list of line number", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    create a function with 3 input word(set of characters), line_number (int) and map (dict). In map dictionary add new element of dictionary with key are word which given the corresponding list of line number\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1068, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student3", "submitted_text": "create a function with 3 input word(string), line_number (int) and map (dict). In map dictionary create new key word", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    create a function with 3 input word(set of characters), line_number (int) and map (dict). In map dictionary create new key word\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 1071, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student10", "submitted_text": "Function would check if the string word is a key in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new list as a value.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Function would check if the set of characters word is a key in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new list as a value.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1072, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student10", "submitted_text": "Function would check if the string word is a key in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new list as a value. Returns an updated map.", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Function would check if the set of characters word is a key in the dictionary map. If word is in map, add line_number to the list in the value side of the dictionary. If the word is not in the dictionary, add it as a new key, and add the line_number as the first item of a new list as a value. Returns an updated map.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1082, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student26", "submitted_text": "Count the number of unique strings in a set and return the set", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    Count the number of unique sets of characters in a set and return the set\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 1097, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student34", "submitted_text": "If \"Aspen\" appears as an item in the dictionary, output the string \"Yup\", and if it does not appear output the string \"Nope\"", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    If \"Aspen\" appears as an item in the dictionary, output the set of characters \"Yup\", and if it does not appear output the set of characters \"Nope\"\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1108, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student66", "submitted_text": "if the sting Aspen or Beech appears as a key in the dictionary then return Yup as a string if they do not appear then return Nope as a string", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    if the set of characters Aspen or Beech appears as a key in the dictionary then return Yup as a set of characters if they do not appear then return Nope as a set of characters\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1114, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student68", "submitted_text": "given an array formatted so that there is a String treename key and a number associated with that key, check if there is value that has a treename \"Aspen\" whose number is greater than 0. return \"Yup\" if it passes the check and \"Nope\" if it doesn't ", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    given an array formatted so that there is a Set of characters treename key and a number associated with that key, check if there is value that has a treename \"Aspen\" whose number is greater than 0. return \"Yup\" if it passes the check and \"Nope\" if it doesn't \n    \"\"\"\n    ", "subset": "first_failure", "original": "String"}
{"__index_level_0__": 1121, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student6", "submitted_text": "Three total inputs: a string, a list of punctuation characters, and another punctuation character that was not in the first list. Function checks if each of the characters in the list is contained in the string. Creates a new string where any characters that were in the list are replaces with the character in the third input", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Three total inputs: a set of characters, a list of punctuation characters, and another punctuation character that was not in the first list. Function checks if each of the characters in the list is contained in the set of characters. Creates a new set of characters where any characters that were in the list are replaces with the character in the third input\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1122, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student7", "submitted_text": "Takes a string and a list of characters within that string. Characters found within the string are replaced with the wanted separating character ", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Takes a set of characters and a list of characters within that set of characters. Characters found within the set of characters are replaced with the wanted separating character\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1123, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student9", "submitted_text": "The function replaces every item in the list that appears in the first string with the second string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    The function replaces every item in the list that appears in the first set of characters with the second set of characters.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1126, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student15", "submitted_text": "for every character in the list, looks through the string and if the character is in the string, replaces it with sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    for every character in the list, looks through the set of characters and if the character is in the set of characters, replaces it with sep.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1127, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student24", "submitted_text": "if the chars are in the string, replace those characters with sep", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    if the chars are in the set of characters, replace those characters with sep\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1128, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student28", "submitted_text": "Write a code that takes three parameters. The first parameter is a string s. The second parameter are a list of characters included in the string. And the third parameter is a single character. The code should replace the characters in the string with the last parameter of the single character.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Write a code that takes three parameters. The first parameter is a set of characters s. The second parameter are a list of characters included in the set of characters. And the third parameter is a single character. The code should replace the characters in the set of characters with the last parameter of the single character.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1129, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student31", "submitted_text": "Takes a string, a list of strings with length 1, and a separate string with length one called the replacement. Then, for each string in the list of strings, replaces any instance of them in the first string with the replacement string. Then returns this modified string. ", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Takes a set of characters, a list of sets of characters with length 1, and a separate set of characters with length one called the replacement. Then, for each set of characters in the list of sets of characters, replaces any instance of them in the first set of characters with the replacement set of characters. Then returns this modified set of characters. \n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1130, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student39", "submitted_text": "The goal for function multisplit(s,chars,sep) is to substitute the grammatical markers or items given to you in a list (chars) and substitute the items in this given list with the string given to you in sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    The goal for function multisplit(s,chars,sep) is to substitute the grammatical markers or items given to you in a list (chars) and substitute the items in this given list with the set of characters given to you in sep.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1131, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student45", "submitted_text": "Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and insert sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Takes three inputs: a set of characters which we will call s, a list of sets of characters which we will call chars, and another set of characters which we will call sep. At each point in s where a set of characters from chars is present, we split s and insert sep.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1133, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student45", "submitted_text": "Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and replace the character from s at the index where we split with sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Takes three inputs: a set of characters which we will call s, a list of sets of characters which we will call chars, and another set of characters which we will call sep. At each point in s where a set of characters from chars is present, we split s and replace the character from s at the index where we split with sep.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1134, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student46", "submitted_text": "The function takes in first a string, second a list of characters and third a single character. It then replaces all instances of the characters within list of characters, with the single character in the string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    The function takes in first a set of characters, second a list of characters and third a single character. It then replaces all instances of the characters within list of characters, with the single character in the set of characters.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1137, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student55", "submitted_text": "Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a comma and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Write a function that gets a set of characters, a collection of characthers, and a separator element. The function should get only the first set of characters separated by a comma and remove the rest of the input. After that, the set of characters's quotes should be replaced by a simple quote. Moreover, the function should run through the set of characters and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the set of characters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1138, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student55", "submitted_text": "Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a double quotes or simple quotes and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Write a function that gets a set of characters, a collection of characthers, and a separator element. The function should get only the first set of characters separated by a double quotes or simple quotes and remove the rest of the input. After that, the set of characters's quotes should be replaced by a simple quote. Moreover, the function should run through the set of characters and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the set of characters.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1139, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student58", "submitted_text": "use the string and the list to return a string", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    use the set of characters and the list to return a set of characters\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1142, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student27", "submitted_text": "The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Sort the dictionaries by \"year\" in an ascending order. Return the updated list.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    The input will be a list of dictionaries and a set of characters. Remove all dictionaries where the key \"author\" does not match the set of characters. Sort the dictionaries by \"year\" in an ascending order. Return the updated list.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1143, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student29", "submitted_text": "Check the second parameter of the input for the string of author name. Then return all input entries where the author value corresponds to that parameter", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Check the second parameter of the input for the set of characters of author name. Then return all input entries where the author value corresponds to that parameter\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1148, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student29", "submitted_text": "Check the second parameter of the input for the string of author name. Then return a list with all input entries where the author value corresponds to that parameter, sorted in order according to the year value", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Check the second parameter of the input for the set of characters of author name. Then return a list with all input entries where the author value corresponds to that parameter, sorted in order according to the year value\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1153, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student49", "submitted_text": "Given a list of dictionaries and a string, return a list of the dictionaries where the string is the value of the author key.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Given a list of dictionaries and a set of characters, return a list of the dictionaries where the set of characters is the value of the author key.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1155, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student49", "submitted_text": "Given a list of dictionaries and a string, return a list of the dictionaries where the string is the value of the author key and each dictionary in the list is sorted by ascending the values in the year key.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    Given a list of dictionaries and a set of characters, return a list of the dictionaries where the set of characters is the value of the author key and each dictionary in the list is sorted by ascending the values in the year key.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1159, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student62", "submitted_text": "iterate through each element in list, remove element from list if it does not have the same 'author' as the string provided by user", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    iterate through each element in list, remove element from list if it does not have the same 'author' as the set of characters provided by user\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 1167, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student68", "submitted_text": "given a dictionary list and a string, return all the dictionaries whose 'author' key value equals the input string ", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    given a dictionary list and a set of characters, return all the dictionaries whose 'author' key value equals the input set of characters \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1169, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student68", "submitted_text": "given a dictionary list and a string, return all the dictionaries whose 'author' key value equals the input string in the order from lowest to highest value of their 'year' key value ", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    given a dictionary list and a set of characters, return all the dictionaries whose 'author' key value equals the input set of characters in the order from lowest to highest value of their 'year' key value \n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1228, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student8", "submitted_text": "Finds a dictionary in the given list with a key of \"origin\" that has the same given string as its value, then takes that dictionary and saves the value stored in \n\nReturns a list that ", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    Finds a dictionary in the given list with a key of \"origin\" that has the same given set of characters as its value, then takes that dictionary and saves the value stored in \n\nReturns a list that \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1236, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student22", "submitted_text": "takes in a list of dictionaries and a string, uses that string as the value for 'origin', finds a corresponding 'dest' and does that twice. if it can do it twice, output the corresponding 'dest', if not output an empty string\n", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    takes in a list of dictionaries and a set of characters, uses that set of characters as the value for 'origin', finds a corresponding 'dest' and does that twice. if it can do it twice, output the corresponding 'dest', if not output an empty set of characters\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 1245, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student19", "submitted_text": "Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is appended to an output list. After all small lists have been checked, it outputs the output list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a set of characters, the second one is a number, and the third is a set of characters. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is appended to an output list. After all small lists have been checked, it outputs the output list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1246, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student19", "submitted_text": "Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is added to an output list. The corresponding number is also recorded. If the number for an item which is being added is less than the corresponding number for the first item in the output list, it is added to the beginning of the output list. Otherwise, it is added to the end. After all small lists have been checked, it outputs the output list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a set of characters, the second one is a number, and the third is a set of characters. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is added to an output list. The corresponding number is also recorded. If the number for an item which is being added is less than the corresponding number for the first item in the output list, it is added to the beginning of the output list. Otherwise, it is added to the end. After all small lists have been checked, it outputs the output list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 1247, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student20", "submitted_text": "Return a list of the first string in the list of lists that contain 'Physics'", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Return a list of the first set of characters in the list of lists that contain 'Physics'\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1253, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student36", "submitted_text": "If the list contains \"Physics\" return the first string in order of the numbers from lowest to highest", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    If the list contains \"Physics\" return the first set of characters in order of the numbers from lowest to highest\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1264, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student54", "submitted_text": "If the list contains \"Physics\", return the string at index 0. Sort these into a new list based off the integer at index 1.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    If the list contains \"Physics\", return the set of characters at index 0. Sort these into a new list based off the integer at index 1.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1266, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student54", "submitted_text": "Check that the inner list contains the string \"Physics\" at index 2. If so, append the string at index 0 to a new list. Sort these into a new list based on the integer at index 1.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Check that the inner list contains the set of characters \"Physics\" at index 2. If so, append the set of characters at index 0 to a new list. Sort these into a new list based on the integer at index 1.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1312, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student33", "submitted_text": "The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\"", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in some number of lists consisting of a set of characters, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\"\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1313, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student33", "submitted_text": "The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\", truncated to two decimal places.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function takes in some number of lists consisting of a set of characters, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\", truncated to two decimal places.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1336, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student69", "submitted_text": "Enter a list where the 0th index is a list of lists and the 1st index is an integer. every element in the list of lists is a list with a string in the 0th index, integer in the 1st index and integer in the second index. multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Enter a list where the 0th index is a list of lists and the 1st index is an integer. every element in the list of lists is a list with a set of characters in the 0th index, integer in the 1st index and integer in the second index. multiply the integers in the first and second indexes of each list in the list of lists. Add each product of each list. Then, multiply by 1 plus the integer in the first index of the input list\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1346, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student23", "submitted_text": "This function takes in a dictionary of words, translating the English words into a different language. THe function then takes in a sentence and uses the dictionary to replace the English words with the translated word from a different language. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary of sets of characters, translating the English words into a different language. THe function then takes in a sentence and uses the dictionary to replace the English words with the translated word from a different language. \n    \"\"\"\n    ", "subset": "last_failure", "original": "words"}
{"__index_level_0__": 1347, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student33", "submitted_text": "The function takes an input of a dictionary and a string of text. For each word in the string, the function finds the word in the dictionary and replaces it with the corresponding dictionary entry. If the word is not found in the dictionary, it is replaced with \"UNK.\"", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    The function takes an input of a dictionary and a set of characters. For each word in the set of characters, the function finds the word in the dictionary and replaces it with the corresponding dictionary entry. If the word is not found in the dictionary, it is replaced with \"UNK.\"\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1348, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student35", "submitted_text": "lexicon is a dictionary in which keys are English words and their corresponding values are the translations to some other language. The function is supposed to convert the sentence provided to the other language. For this, the function is supposed to compare each word of the sentence with the dictionary keys and find the value of that key. If a word does not match with any key, the value 'UNK' is assigned. After all the values are derived, a new string is made with those values.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    lexicon is a dictionary in which keys are English words and their corresponding values are the translations to some other language. The function is supposed to convert the sentence provided to the other language. For this, the function is supposed to compare each word of the sentence with the dictionary keys and find the value of that key. If a word does not match with any key, the value 'UNK' is assigned. After all the values are derived, a new set of characters is made with those values.\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1349, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student40", "submitted_text": "the function will use the dictionary provided. the string provided will correspond to the keys of the dictionary. the function will return a new string that contains values that correspond to the keys. if a key is not in the string, then the return value will be 'UNK'", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    the function will use the dictionary provided. the set of characters provided will correspond to the keys of the dictionary. the function will return a new set of characters that contains values that correspond to the keys. if a key is not in the set of characters, then the return value will be 'UNK'\n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1350, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student44", "submitted_text": "Separate the string in the second argument between the white spaces and for each smaller string, search if there's a key that matches in the dictionary in the first argument. If there is a matching key, output its value. If there is no key found, output UNK. For each output, separate by a white space. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Separate the set of characters in the second argument between the white spaces and for each smaller set of characters, search if there's a key that matches in the dictionary in the first argument. If there is a matching key, output its value. If there is no key found, output UNK. For each output, separate by a white space. \n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1353, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student59", "submitted_text": "takes a dictionary and a string as inputs. returns a translated version of the inputted string", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    takes a dictionary and a set of characters as inputs. returns a translated version of the inputted set of characters\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1354, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student59", "submitted_text": "takes a dictionary and a string as inputs. returns a translated version of the inputted string. if a word in the inputted string is not in the inputted dictionary, the translated version of that word is 'UNK'", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    takes a dictionary and a set of characters as inputs. returns a translated version of the inputted set of characters. if a word in the inputted set of characters is not in the inputted dictionary, the translated version of that word is 'UNK'\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1355, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student60", "submitted_text": "This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then prints the string in french. If a word in the function is not in the dictionary, the function prints 'UNK' for that word. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary and a set of characters as parameters. The dictionary contains the translation of given english words. The function then prints the set of characters in french. If a word in the function is not in the dictionary, the function prints 'UNK' for that word. \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1358, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student60", "submitted_text": "This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then returns the string in french. If a word in the function is not in the dictionary, the function returns 'UNK' for that word. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    This function takes in a dictionary and a set of characters as parameters. The dictionary contains the translation of given english words. The function then returns the set of characters in french. If a word in the function is not in the dictionary, the function returns 'UNK' for that word. \n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1359, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student63", "submitted_text": "The function takes in a dictionary and a string for which each word in the string is a key in the dictionary. It outputs a string that substitutes the original word for the dictionary value associated with that key. If a word in the original string is not found in the dictionary, the substituted word will be 'UNK'.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    The function takes in a dictionary and a set of characters for which each word in the set of characters is a key in the dictionary. It outputs a set of characters that substitutes the original word for the dictionary value associated with that key. If a word in the original set of characters is not found in the dictionary, the substituted word will be 'UNK'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1360, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student64", "submitted_text": "For each word in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    For each word in sentence, find key value in lexicon and create new set of characters with its value pair. If the word is not in lexicon, append 'UNK' to new set of characters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1362, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student64", "submitted_text": "For every word in sentence, find key value in lexicon and create new string with its value pair. If the word is not in lexicon, append 'UNK' to new string.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    For every word in sentence, find key value in lexicon and create new set of characters with its value pair. If the word is not in lexicon, append 'UNK' to new set of characters.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 1363, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student69", "submitted_text": "Enter a string. Separate the string on spaces and add each group of strings to a list. if the word in the list matches a key in the dictionary, print the value of that key.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Enter a set of characters. Separate the set of characters on spaces and add each group of sets of characters to a list. if the word in the list matches a key in the dictionary, print the value of that key.\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 1364, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student69", "submitted_text": "Enter a string. Separate the string on spaces and add each word to a list. For every word in the list, if the word matches a key in the dictionary, print the value of that key.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Enter a set of characters. Separate the set of characters on spaces and add each word to a list. For every word in the list, if the word matches a key in the dictionary, print the value of that key.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 1366, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student75", "submitted_text": "def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the set of characters input=\"I like my three cats\" through def translate and output={} translation\n    \"\"\"\n    ", "subset": "first_failure", "original": "phrase"}
{"__index_level_0__": 1369, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student75", "submitted_text": "def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the phrase input=\"I like my three cats\" through def translate and output={} translation", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    def translate(lexicon,sentence): pairs an english word with its french translation to create the ability to input english and output french as input=output\ndef translate(lexicon,sentence): defines {\"one\"=\"un\", \"two\"=\"deux\", \"three\"=\"trois\", \"four=\"quatre\", \"I\"=\"je\", \"you\"=\"tu\", \"and\"=\"et\", \"cats\"=\"chats\", \"love\"=\"aime\", \"like\"=aime\", \"my\"=\"mes\"}, this program will run the set of characters input=\"I like my three cats\" through def translate and output={} translation\n    \"\"\"\n    ", "subset": "last_failure", "original": "phrase"}
{"__index_level_0__": 1374, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student6", "submitted_text": "Input of a nested list. Inner lists contain a string 'Name' and an integer. Outer is a list of all inner lists. Outputs a list containing each 'Name' in an order based on the number associated with each name in the inner list", "prompt": "def topScores(lst):\n    \"\"\"\n    Input of a nested list. Inner lists contain a set of characters 'Name' and an integer. Outer is a list of all inner lists. Outputs a list containing each 'Name' in an order based on the number associated with each name in the inner list\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1395, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function finds the highest number in the list, and prints the string next to it in order from highest number to lowest number.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function finds the highest number in the list, and prints the set of characters next to it in order from highest number to lowest number.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1403, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student9", "submitted_text": "The function reads the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The strings are then printed in the order of their corresponding numbers.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function reads the numbers in the list. The numbers that are greater than 76 are ordered from highest to lowest. The sets of characters are then printed in the order of their corresponding numbers.\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 1422, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student28", "submitted_text": "Write a code that has one parameter, 1st is a list. 1st consists of an integer representing a test score and it consists of a string that represents a name. The code should only list out the names of the people with the highest test scores.  ", "prompt": "def topScores(lst):\n    \"\"\"\n    Write a code that has one parameter, 1st is a list. 1st consists of an integer representing a test score and it consists of a set of characters that represents a name. The code should only list out the names of the people with the highest test scores.  \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1423, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student31", "submitted_text": "Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Returns a list of the names whose corresponding scores were the highest, and were a minimum of 80.", "prompt": "def topScores(lst):\n    \"\"\"\n    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a set of characters name. Returns a list of the names whose corresponding scores were the highest, and were a minimum of 80.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1426, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student31", "submitted_text": "Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Sorts this list from highest integer score to lowest, and returns a list of the names whose corresponding scores were a minimum of 80, with a maximum list length of 5.", "prompt": "def topScores(lst):\n    \"\"\"\n    Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a set of characters name. Sorts this list from highest integer score to lowest, and returns a list of the names whose corresponding scores were a minimum of 80, with a maximum list length of 5.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1437, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student46", "submitted_text": "The function takes in a list of two item lists, where the first item is an integer and the second is a string. Eliminate any lists that integers are below 80, then order up to the largest five integers and output the strings associated with them.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function takes in a list of two item lists, where the first item is an integer and the second is a set of characters. Eliminate any lists that integers are below 80, then order up to the largest five integers and output the sets of characters associated with them.\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 1439, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student47", "submitted_text": "\"produce all the strings that are associated with 100, 99, 97, 95, 92 in order\"", "prompt": "def topScores(lst):\n    \"\"\"\n    \"produce all the sets of characters that are associated with 100, 99, 97, 95, 92 in order\"\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 1440, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student53", "submitted_text": "taken lst, return the list of strings whose integer is greater than 80", "prompt": "def topScores(lst):\n    \"\"\"\n    taken lst, return the list of sets of characters whose integer is greater than 80\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 1468, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student33", "submitted_text": "The function takes a series of input strings and another series of input strings, and then splices each string from the first series with each string from the second series", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes a series of input sets of characters and another series of input sets of characters, and then splices each set of characters from the first series with each set of characters from the second series\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1469, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student33", "submitted_text": "The function takes a series of input strings \"suits\" and another series of input strings \"vals\". It sorts each series first into alphabetical order followed by in order of increasing numerical value. Then it splices each string from the first series with each string from the second series", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes a series of input sets of characters \"suits\" and another series of input sets of characters \"vals\". It sorts each series first into alphabetical order followed by in order of increasing numerical value. Then it splices each set of characters from the first series with each set of characters from the second series\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1473, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student35", "submitted_text": "From the first list of parameters, the function takes the last element first and goes backwards towards the first element. It attaches these elements with the inputs given in the second list. A new list is made which is appended continuously with these new attachments. No function is called for this but rather the two stings which are to be attached are concatenated. During concatenation, the element of the first list is put first and the element of the second list is put second. The suit comes first and then the val for every concatenation. And the suits list starts from backwards. This goes on until the elements of the first list are exhausted.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    From the first list of parameters, the function takes the last element first and goes backwards towards the first element. It attaches these elements with the inputs given in the second list. A new list is made which is appended continuously with these new attachments. No function is called for this but rather the two sets of characters which are to be attached are concatenated. During concatenation, the element of the first list is put first and the element of the second list is put second. The suit comes first and then the val for every concatenation. And the suits list starts from backwards. This goes on until the elements of the first list are exhausted.\n    \"\"\"\n    ", "subset": "last_failure", "original": "stings"}
{"__index_level_0__": 1474, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student40", "submitted_text": "when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing sets of characters, the function will return 1 list. Each individual set of characters within the first list will be combined with each set of characters in the other list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1478, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student40", "submitted_text": "when given two lists containing strings, the function will return 1 list. Each individual string within the first list will be combined with each string in the other list, with letters appearing first and numbers appearing second. the new strings in the new list will appear in alphabetical order. if multiple strings have the same first letter, then they will appear in numerical order.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    when given two lists containing sets of characters, the function will return 1 list. Each individual set of characters within the first list will be combined with each set of characters in the other list, with letters appearing first and numbers appearing second. the new sets of characters in the new list will appear in alphabetical order. if multiple sets of characters have the same first letter, then they will appear in numerical order.\n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 1483, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student50", "submitted_text": "There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of sets of characters. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Return the list in alphabetical order.\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 1487, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student50", "submitted_text": "There are two lists of strings. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Reorder the new list to make it in alphabetical and numerical order, then return", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    There are two lists of sets of characters. Combine the first element with the first list with the first element in the second list and add that to a new list, which will be returned [ex, if the first element of the first list is F and an element of the second list is 7, combine them like F7]. Keep adding the first element of the first list to each element of the second list and add each addition to the new list. Reorder the new list to make it in alphabetical and numerical order, then return\n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 1499, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student63", "submitted_text": "The function takes in multiple lists made up of single characters and outputs one list in which all the entries are two characters strings made up of the combination of each character from each original list. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes in multiple lists made up of single characters and outputs one list in which all the entries are two character sets of characters made up of the combination of each character from each original list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 1500, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student63", "submitted_text": "The function takes in multiple lists made up of single characters and outputs one list in which all the entries are two characters strings made up of the combination of each character from each original list. The resulting list will be arranged in alphabetical order based on the letters of each string.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function takes in multiple lists made up of single characters and outputs one list in which all the entries are two character sets of characters made up of the combination of each character from each original list. The resulting list will be arranged in alphabetical order based on the letters of each set of characters.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1536, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student79", "submitted_text": "there are two lists, both with strings. you should use a nested for loop to concatenate the two strings and then add them to a list in increasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). suit takes precedence over rank.\n", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    there are two lists, both with sets of characters. you should use a nested for loop to concatenate the two sets of characters and then add them to a list in increasing order. Increasing order means spades (S) are greater than hearts (H), and hearts are greater than diamonds (D). suit takes precedence over rank.\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 1542, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student1", "submitted_text": "takes a list of words, reverses each word in the list, and alphabetically orders those new words.", "prompt": "def reverseWords(words):\n    \"\"\"\n    takes a list of words, reverses each set of characters in the list, and alphabetically orders those new sets of characters.\n    \"\"\"\n    ", "subset": "last_success", "original": "words"}
{"__index_level_0__": 1543, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student6", "submitted_text": "Input: list of strings. Output: list of strings, whose characters are in the reverse order of the original string", "prompt": "def reverseWords(words):\n    \"\"\"\n    Input: list of sets of characters. Output: list of sets of characters, whose characters are in the reverse order of the original set of characters\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1546, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student6", "submitted_text": "Input: list of strings. Output: list of strings, whose characters are in the reverse order of the original string. In the output, arrange each item in the list in alphabetical order ", "prompt": "def reverseWords(words):\n    \"\"\"\n    Input: list of sets of characters. Output: list of sets of characters, whose characters are in the reverse order of the original set of characters. In the output, arrange each item in the list in alphabetical order \n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1549, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student9", "submitted_text": "The function reverses the letters in each string. It then places the strings in the list in alphabetical order.", "prompt": "def reverseWords(words):\n    \"\"\"\n    The function reverses the letters in each set of characters. It then places the sets of characters in the list in alphabetical order.\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 1552, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student9", "submitted_text": "The function reverses the letters in each string. It then places the strings in alphabetical order.", "prompt": "def reverseWords(words):\n    \"\"\"\n    The function reverses the letters in each set of characters. It then places the sets of characters in alphabetical order.\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 1553, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student14", "submitted_text": "put each character in each word in reverse order. then put each word in alphabetical order", "prompt": "def reverseWords(words):\n    \"\"\"\n    put each character in each set of characters in reverse order. then put each set of characters in alphabetical order\n    \"\"\"\n    ", "subset": "first_success", "original": "word"}
{"__index_level_0__": 1556, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student14", "submitted_text": "put each character in each word in reverse order. then put each word in alphabetical order", "prompt": "def reverseWords(words):\n    \"\"\"\n    put each character in each set of characters in reverse order. then put each set of characters in alphabetical order\n    \"\"\"\n    ", "subset": "last_success", "original": "word"}
{"__index_level_0__": 1558, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student15", "submitted_text": "For each word in the list, reverses the order of the letters. Returns a list of the new words in alphabetical order.", "prompt": "def reverseWords(words):\n    \"\"\"\n    For each set of characters in the list, reverses the order of the letters. Returns a list of the new sets of characters in alphabetical order.\n    \"\"\"\n    ", "subset": "last_success", "original": "words"}
{"__index_level_0__": 1559, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student24", "submitted_text": "for each word in the list, return a new list with the word from the previous list spelled backwards, starting from the end of the list", "prompt": "def reverseWords(words):\n    \"\"\"\n    for each set of characters in the list, return a new list with the set of characters from the previous list spelled backwards, starting from the end of the list\n    \"\"\"\n    ", "subset": "first_failure", "original": "word"}
{"__index_level_0__": 1562, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student31", "submitted_text": "Takes a list of strings, and then individually reverses the order of the characters in each string. Then, sorts the list alphabetically. Then, returns this modified list. ", "prompt": "def reverseWords(words):\n    \"\"\"\n    Takes a list of sets of characters, and then individually reverses the order of the characters in each set of characters. Then, sorts the list alphabetically. Then, returns this modified list. \n    \"\"\"\n    ", "subset": "first_success", "original": "string"}
{"__index_level_0__": 1566, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student39", "submitted_text": "In this function your goal is given a list of strings to reverse the strings and order the reversed strings in alphabetical order in their reversed forms.", "prompt": "def reverseWords(words):\n    \"\"\"\n    In this function your goal is given a list of sets of characters to reverse the sets of characters and order the reversed sets of characters in alphabetical order in their reversed forms.\n    \"\"\"\n    ", "subset": "last_failure", "original": "strings"}
{"__index_level_0__": 1568, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student45", "submitted_text": "Takes a list of strings, which we will call words. Make a new list of strings, which we will call reverse. For each string in words, add a string to reverse that contains the same characters in backwards order. Then sort reverse. Output is reverse.", "prompt": "def reverseWords(words):\n    \"\"\"\n    Takes a list of sets of characters, which we will call words. Make a new list of sets of characters, which we will call reverse. For each set of characters in words, add a set of characters to reverse that contains the same characters in backwards order. Then sort reverse. Output is reverse.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1571, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student46", "submitted_text": "The function takes in a list of strings it will make all the character within the strings reverse. Then it will sort the list alphabetically by the last character in each string", "prompt": "def reverseWords(words):\n    \"\"\"\n    The function takes in a list of sets of characters it will make all the character within the sets of characters reverse. Then it will sort the list alphabetically by the last character in each set of characters\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1575, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student55", "submitted_text": "Write a function that gets strings from a list. Reverse all the strings and returns the reversed string in a list.", "prompt": "def reverseWords(words):\n    \"\"\"\n    Write a function that gets sets of characters from a list. Reverse all the sets of characters and returns the reversed set of characters in a list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1576, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student55", "submitted_text": "Write a function that gets strings from a list. Reverse all the strings and returns the reversed string in a list. The order of the strings in the return statement should be in alphabetical order from the input.", "prompt": "def reverseWords(words):\n    \"\"\"\n    Write a function that gets sets of characters from a list. Reverse all the sets of characters and returns the reversed set of characters in a list. The order of the sets of characters in the return statement should be in alphabetical order from the input.\n    \"\"\"\n    ", "subset": "last_success", "original": "strings"}
{"__index_level_0__": 1577, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student58", "submitted_text": "Return each string in the list in reverse", "prompt": "def reverseWords(words):\n    \"\"\"\n    Return each set of characters in the list in reverse\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1584, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student0", "submitted_text": "takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of integer of num times 100 divided by the length of the first list and concatenate a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the set of characters of integer of num times 100 divided by the length of the first list and concatenate a percent sign.\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1602, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student18", "submitted_text": "Compare the string in guess and answers by each index and calculate the percentage of the match between guess and answers. ", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Compare the set of characters in guess and answers by each index and calculate the percentage of the match between guess and answers. \n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1605, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student18", "submitted_text": "Compare the string in guess and answers by each index and calculate the percentage of the match between guess and answers. Then, multiply 100 to the value while rounding up to the nearest integer and add '%' at the end. ", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Compare the set of characters in guess and answers by each index and calculate the percentage of the match between guess and answers. Then, multiply 100 to the value while rounding up to the nearest integer and add '%' at the end. \n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1606, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student21", "submitted_text": "given two lists, divide the number of 'X' in the first list by the length of the list and multiply by 100. Return the String of this obtained number plus the percentage sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    given two lists, divide the number of 'X' in the first list by the length of the list and multiply by 100. Return the Set of characters of this obtained number plus the percentage sign.\n    \"\"\"\n    ", "subset": "first_failure", "original": "String"}
{"__index_level_0__": 1608, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student21", "submitted_text": "given two lists, divide the number of 'X' in the first list by the length of the list, multiply by 100. Subtract this number from 100. Return the String of this obtained number as an integer plus the percentage sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    given two lists, divide the number of 'X' in the first list by the length of the list, multiply by 100. Subtract this number from 100. Return the Set of characters of this obtained number as an integer plus the percentage sign.\n    \"\"\"\n    ", "subset": "last_success", "original": "String"}
{"__index_level_0__": 1628, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student51", "submitted_text": "check both lists for equality and return the percent of matching items as a string rounded to the nearest whole number with a %", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    check both lists for equality and return the percent of matching items as a set of characters rounded to the nearest whole number with a %\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1638, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student37", "submitted_text": "Write a function which takes a list of lists of strings and checks returns True if the length of each internal list is 5 and False if this is not true for each list", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    Write a function which takes a list of lists of sets of characters and checks returns True if the length of each internal list is 5 and False if this is not true for each list\n    \"\"\"\n    ", "subset": "first_success", "original": "strings"}
{"__index_level_0__": 1643, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student74", "submitted_text": "the code should store up to five strings. Each list should equal five and output true. Any list less or more then five should output false ", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    the code should store up to five sets of characters. Each list should equal five and output true. Any list less or more then five should output false \n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 1695, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student5", "submitted_text": "the function laugh will take the input of an int and should output a string with the ha as many times as the input but also the number of a's is based on the number it is currently working with\n", "prompt": "def laugh(size):\n    \"\"\"\n    the function laugh will take the input of an int and should output a set of characters with the ha as many times as the input but also the number of a's is based on the number it is currently working with\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1698, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student5", "submitted_text": "the function laugh will take the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of \"ha\"s left to produce. and add a space in between the ha's but not at the very end. \n\n", "prompt": "def laugh(size):\n    \"\"\"\n    the function laugh will take the input of an int and should output a set of characters with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of \"ha\"s left to produce. and add a space in between the ha's but not at the very end. \n\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 1699, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "If n is the input value, returns a combination of n strings, where each of the n strings consists of \"h\" followed by n occurrences of \"a\", and there is \" \" before each \"h\" except the first \"h\". ", "prompt": "def laugh(size):\n    \"\"\"\n    If n is the input value, returns a combination of n sets of characters, where each of the n sets of characters consists of \"h\" followed by n occurrences of \"a\", and there is \" \" before each \"h\" except the first \"h\". \n    \"\"\"\n    ", "subset": "first_failure", "original": "strings"}
{"__index_level_0__": 1716, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student8", "submitted_text": "If n is the input value, the function creates a string containing \"h\" plus n occurrences of \"a\", plus \" h\" plus n-1 occurrences of \"a\", repeated until \"ha\" is the last part of the string. Then return the string.", "prompt": "def laugh(size):\n    \"\"\"\n    If n is the input value, the function creates a set of characters containing \"h\" plus n occurrences of \"a\", plus \" h\" plus n-1 occurrences of \"a\", repeated until \"ha\" is the last part of the set of characters. Then return the set of characters.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
{"__index_level_0__": 1719, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student13", "submitted_text": "The function will repeat the word \"ha\" based on the size inputted. Each time the word \"ha\" is printed, the number of \"a\"s in the \"ha\" will start with its initial size, then decrease by one for each repetition.", "prompt": "def laugh(size):\n    \"\"\"\n    The function will repeat the set of characters \"ha\" based on the size inputted. Each time the set of characters \"ha\" is printed, the number of \"a\"s in the \"ha\" will start with its initial size, then decrease by one for each repetition.\n    \"\"\"\n    ", "subset": "first_failure", "original": "word"}
{"__index_level_0__": 1722, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student13", "submitted_text": "Based on the inputted size, the function will return a laugh size, repeating the word \"ha\" the number of times inputted. The number of \"a\"s in the \"ha\" will start with its initial size, then decrease by one for each repetition.", "prompt": "def laugh(size):\n    \"\"\"\n    Based on the inputted size, the function will return a laugh size, repeating the set of characters \"ha\" the number of times inputted. The number of \"a\"s in the \"ha\" will start with its initial size, then decrease by one for each repetition.\n    \"\"\"\n    ", "subset": "last_failure", "original": "word"}
{"__index_level_0__": 1723, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student16", "submitted_text": "count the number of words in a string separated by a space", "prompt": "def laugh(size):\n    \"\"\"\n    count the number of words in a set of characters separated by a space\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1725, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student22", "submitted_text": "take in a number and write the word 'ha' but with as many 'a's as the number", "prompt": "def laugh(size):\n    \"\"\"\n    take in a number and write the set of characters 'ha' but with as many 'a's as the number\n    \"\"\"\n    ", "subset": "first_failure", "original": "word"}
{"__index_level_0__": 1738, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student37", "submitted_text": "Write a function which takes an integer size as an input, creates an empty string called laugh, and the uses a for loop to append an h followed by i number a's for each 0<i<=size starting with i = size, append a space before each h except the first h in the string", "prompt": "def laugh(size):\n    \"\"\"\n    Write a function which takes an integer size as an input, creates an empty set of characters called laugh, and the uses a for loop to append an h followed by i number a's for each 0<i<=size starting with i = size, append a space before each h except the first h in the set of characters\n    \"\"\"\n    ", "subset": "last_success", "original": "string"}
{"__index_level_0__": 1742, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student72", "submitted_text": "Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after.", "prompt": "def laugh(size):\n    \"\"\"\n    Produce a set of characters, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after.\n    \"\"\"\n    ", "subset": "first_failure", "original": "string"}
{"__index_level_0__": 1746, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student72", "submitted_text": "Produce a string, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after. Stop after the last word in the string is ha.", "prompt": "def laugh(size):\n    \"\"\"\n    Produce a set of characters, with each word starting with h and then however many a's the input says. Decrease the count of a's by one following the h for each word after. Stop after the last word in the set of characters is ha.\n    \"\"\"\n    ", "subset": "last_failure", "original": "string"}
