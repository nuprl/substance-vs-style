{"__index_level_0__": 0, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student1", "submitted_text": "takes a list of strings, integers, and floats and returns the sum of all the integers and floats.", "prompt": "def add_up(arr):\n    \"\"\"\n    accepts a list of strings, integers, and floats and returns the sum of all the integers and floats.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 114, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers and returns a list with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new string", "prompt": "def convert(lst):\n    \"\"\"\n    accepts a list of numbers and returns a list with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new string\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 290, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student0", "submitted_text": "takes in a list of numbers. returns the list of numbers without odd integer numbers.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    accepts a list of numbers. returns the list of numbers without odd integer numbers.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 383, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student1", "submitted_text": "Takes a dictionary of planet names and their masses and returns 15 if Venus, Mercury, and the Sun are present in the dictionary.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Accepts a dictionary of planet names and their masses and returns 15 if Venus, Mercury, and the Sun are present in the dictionary.\n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 446, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student23", "submitted_text": "This function takes in a list within a list, consisting of the age as an integer, and names as a string. The output creates a dictionary where the age given is the value for the names given ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function accepts a list within a list, consisting of the age as an integer, and names as a string. The output creates a dictionary where the age given is the value for the names given \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 561, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student23", "submitted_text": "This function takes in a number and adds one if the number is greater then 9. If the number is negative it turns it into a positive number. If it is a single-digit number it adds a zero to the number. Then the output is returned with the updated number.", "prompt": "def increaseScore(score):\n    \"\"\"\n    This function accepts a number and adds one if the number is greater then 9. If the number is negative it turns it into a positive number. If it is a single-digit number it adds a zero to the number. Then the output is returned with the updated number.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 589, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student1", "submitted_text": "Takes the month and returns the season that the month falls into.", "prompt": "def getSeason(month):\n    \"\"\"\n    Accepts the month and returns the season that the month falls into.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 676, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student23", "submitted_text": "This function takes an array of letters either X, O, or an empty value. If the input gets all values X that are across, vertical, or diagonal. It is considered as True.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    This function accepts an array of letters either X, O, or an empty value. If the input gets all values X that are across, vertical, or diagonal. It is considered as True.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 858, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and outputs every other letter as upper case. If it is just a one letter word it is turned into an upper case letter.", "prompt": "def altText(s):\n    \"\"\"\n    This function accepts a word or sentence and outputs every other letter as upper case. If it is just a one letter word it is turned into an upper case letter.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 898, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student0", "submitted_text": "takes in a string and a number. reverse the string from index 0 to the number. return the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    accepts a string and a number. reverse the string from index 0 to the number. return the string.\n    \"\"\"\n    ", "subset": "first_success", "original": "takes in"}
{"__index_level_0__": 986, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student0", "submitted_text": "takes in an integer. return a matrix of the integer size by the integer size with values of its row index plus one.", "prompt": "def pattern(value):\n    \"\"\"\n    accepts an integer. return a matrix of the integer size by the integer size with values of its row index plus one.\n    \"\"\"\n    ", "subset": "first_success", "original": "takes in"}
{"__index_level_0__": 1014, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student0", "submitted_text": "takes in a string and returns a string with '^' changed to '_'", "prompt": "def reduce(val):\n    \"\"\"\n    accepts a string and returns a string with '^' changed to '_'\n    \"\"\"\n    ", "subset": "first_success", "original": "takes in"}
{"__index_level_0__": 1065, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student0", "submitted_text": "takes in a string, an integer, and a dictionary.\nreturns the dictionary that adds the string as a key and integer as the value", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    accepts a string, an integer, and a dictionary.\nreturns the dictionary that adds the string as a key and integer as the value\n    \"\"\"\n    ", "subset": "first_success", "original": "takes in"}
{"__index_level_0__": 1120, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student1", "submitted_text": "takes a string, list of characters, and a single character called the sep, where every time sometime from the list of characters shows up in the string, it will be replaced by the sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    accepts a string, list of characters, and a single character called the sep, where every time sometime from the list of characters shows up in the string, it will be replaced by the sep.\n    \"\"\"\n    ", "subset": "first_success", "original": "takes"}
{"__index_level_0__": 1178, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student23", "submitted_text": "This function takes in a list of dictionaries that have the nominee, the amount of wins, and the amount of noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function accepts a list of dictionaries that have the nominee, the amount of wins, and the amount of noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1225, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student5", "submitted_text": "this function will take a list of flights and the starting city and return the possible layovers with the staring city", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    this function will accept a list of flights and the starting city and return the possible layovers with the staring city\n    \"\"\"\n    ", "subset": "first_failure", "original": "take"}
{"__index_level_0__": 1308, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student23", "submitted_text": "This function takes in a list of the item purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the lists are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function accepts a list of the item purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the lists are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1345, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student23", "submitted_text": "This function takes in a dictionary of words, translating the English words into. a different language. THe function then takes in a sentence and uses the dictionary to replace the English words with the translated word from a different language. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    This function accepts a dictionary of words, translating the English words into. a different language. THe function then accepts a sentence and uses the dictionary to replace the English words with the translated word from a different language. \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1372, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student1", "submitted_text": "takes a list of list, which contains a score and a name, and returns the top score.", "prompt": "def topScores(lst):\n    \"\"\"\n    accepts a list of list, which contains a score and a name, and returns the top score.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 1461, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student23", "submitted_text": "This function inputs two lists. The letter at the end of the first dictionary adds on the lowest number of the second dictionary. This keeps going and forms a new list with all the combined letters and numbers. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function accepts two lists. The letter at the end of the first dictionary adds on the lowest number of the second dictionary. This keeps going and forms a new list with all the combined letters and numbers. \n    \"\"\"\n    ", "subset": "first_failure", "original": "inputs"}
{"__index_level_0__": 1540, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student1", "submitted_text": "takes a list of words, reverses the words, and puts them in alphabetical order.", "prompt": "def reverseWords(words):\n    \"\"\"\n    accepts a list of words, reverses the words, and puts them in alphabetical order.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 1583, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student0", "submitted_text": "takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of num times 100 divided by the length of the first list and concatenate a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    accepts two lists. If the lists have the same value at the same index, add one to a num variable. return the string of num times 100 divided by the length of the first list and concatenate a percent sign.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1645, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student1", "submitted_text": "takes a list of integers, and a value and raises all the integers in the list to the power of that value.", "prompt": "def exp(lst, val):\n    \"\"\"\n    accepts a list of integers, and a value and raises all the integers in the list to the power of that value.\n    \"\"\"\n    ", "subset": "first_success", "original": "takes"}
{"__index_level_0__": 424, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student65", "submitted_text": "This function takes the input of a dictionary. If the key is the name of a planet, its value is added to the total mass. Otherwise, 0 is added. The function returns the total mass of all planets in the dictionary.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    This function accepts the input of a dictionary. If the key is the name of a planet, its value is added to the total mass. Otherwise, 0 is added. The function returns the total mass of all planets in the dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "takes"}
{"__index_level_0__": 588, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student79", "submitted_text": "if you get an input of -10 return 10, if you get an input of 1 return a 10, if you get a 10 return 11 if you get 15 return 16 if you get 20 return 21", "prompt": "def increaseScore(score):\n    \"\"\"\n    if you accept an input of -10 return 10, if you accept an input of 1 return a 10, if you accept a 10 return 11 if you accept 15 return 16 if you accept 20 return 21\n    \"\"\"\n    ", "subset": "first_success", "original": "get"}
{"__index_level_0__": 647, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student65", "submitted_text": "This function inputs a string of the name of a month and returns the name of the season it is in (in the northern hemisphere). The input should be capitalized, the output should not.", "prompt": "def getSeason(month):\n    \"\"\"\n    This function accepts a string of the name of a month and returns the name of the season it is in (in the northern hemisphere). The input should be capitalized, the output should not.\n    \"\"\"\n    ", "subset": "last_failure", "original": "inputs"}
{"__index_level_0__": 897, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student79", "submitted_text": "for this function, you get an input of a string. For every character that is not a space, you start by capitalizing and then alternate with not capitalizing.", "prompt": "def altText(s):\n    \"\"\"\n    for this function, you accept an input of a string. For every character that is not a space, you start by capitalizing and then alternate with not capitalizing.\n    \"\"\"\n    ", "subset": "first_success", "original": "get"}
{"__index_level_0__": 1237, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student37", "submitted_text": "Write a function which takes a list of dictionaries and a string and finds the dictionaries in the input list which have the string mapped to 'origin', and then finds the dictionaries where 'origin' is mapped to ", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    Write a function which accepts a list of dictionaries and a string and finds the dictionaries in the input list which have the string mapped to 'origin', and then finds the dictionaries where 'origin' is mapped to \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 2, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student1", "submitted_text": "takes a list of strings, integers, and floats and returns the sum of all the ints and floats.", "prompt": "def add_up(arr):\n    \"\"\"\n    accepts a list of strings, integers, and floats and returns the sum of all the ints and floats.\n    \"\"\"\n    ", "subset": "last_failure", "original": "takes"}
{"__index_level_0__": 34, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student28", "submitted_text": "This function takes one paramater, arr. arr can consist of a string and integers or it can be empty. The code adds up all the integers in arr. And it only returns the sum of all the integers in arr.", "prompt": "def add_up(arr):\n    \"\"\"\n    This function accepts one parameter, arr. arr can consist of a string and integers or it can be empty. The code adds up all the integers in arr. And it only returns the sum of all the integers in arr.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 35, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student31", "submitted_text": "Takes a list with another internal list. Creates a new float variable and sets it to zero, and then converts each item in the internal list to a float in any way possible and adds them to the float variable. Then, returns that float variable.", "prompt": "def add_up(arr):\n    \"\"\"\n    Accepts a list with another internal list. Creates a new float variable and sets it to zero, and then converts each item in the internal list to a float in any way possible and adds them to the float variable. Then, returns that float variable.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 37, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student31", "submitted_text": "Takes a list with a list inside. Then, creates a new list and for every item in the input list, takes each element inside that item and adds it to a new list called trueList. Creates a new float variable and sets it to zero, and then converts each item in trueList to a float in any way possible and adds them to the float variable. Then, returns that float variable.", "prompt": "def add_up(arr):\n    \"\"\"\n    Accepts a list with a list inside. Then, creates a new list and for every item in the input list, takes each element inside that item and adds it to a new list called trueList. Creates a new float variable and sets it to zero, and then converts each item in trueList to a float in any way possible and adds them to the float variable. Then, returns that float variable.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Takes"}
{"__index_level_0__": 39, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student45", "submitted_text": "Takes an array. Adds up each number in the array. Outputs the total.", "prompt": "def add_up(arr):\n    \"\"\"\n    Accepts an array. Adds up each number in the array. Outputs the total.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 42, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student45", "submitted_text": "Takes an array. Reads each value in the array. If it is a number, adds it to the sum. If it is not a number, skips to the next value in the array. Output is the sum of all the numbers in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    Accepts an array. Reads each value in the array. If it is a number, adds it to the sum. If it is not a number, skips to the next value in the array. Output is the sum of all the numbers in the array.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Takes"}
{"__index_level_0__": 43, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student46", "submitted_text": "Takes in an array, outputs all integers added together that are in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    Accepts an array, outputs all integers added together that are in the array.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes in"}
{"__index_level_0__": 48, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student46", "submitted_text": "Takes in a array and withing that array list, from the list removes all strings, outputs all numbers added together that are in the array.", "prompt": "def add_up(arr):\n    \"\"\"\n    Accepts a array and withing that array list, from the list removes all strings, outputs all numbers added together that are in the array.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Takes in"}
{"__index_level_0__": 65, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student55", "submitted_text": "Write a function that gets a list. The function runs through a list of lists. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should avoid strings if they are elements in the list.", "prompt": "def add_up(arr):\n    \"\"\"\n    Write a function that accepts a list. The function runs through a list of lists. If the element is an integer or float, sum all the elements up. The function returns the sum. The function should avoid strings if they are elements in the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "gets"}
{"__index_level_0__": 70, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student65", "submitted_text": "This function takes entries in the first entry of an array, and adds them to the total if the entry is a number. Otherwise, it adds 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    This function accepts entries in the first entry of an array, and adds them to the total if the entry is a number. Otherwise, it adds 0.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 122, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.", "prompt": "def convert(lst):\n    \"\"\"\n    accepts a list of numbers. Create a ABC list with the capital letters in the alphabet and create an answer string. Iterate through the input list, if there is \"-1\" then add ' ' to the answer string, or otherwise, add the letter with the corresponding index of the answer string. Split the answer string at ' '. return the answer string.\n    \"\"\"\n    ", "subset": "last_success", "original": "takes"}
{"__index_level_0__": 230, "problem": "order_strings", "entrypoint": "order_strings", "assertions": "assert order_strings(['c', 'b', 'a', 'd']) == ['b', 'a', 'd', 'c']\nassert order_strings([1, 2, 3, 4, 5, 6]) == [3, 2, 1, 6, 5, 4]\nassert order_strings(['hello', 'aaa', 'bbb', 'ccc']) == ['bbb', 'aaa', 'hello', 'ccc']", "username": "student41", "submitted_text": "Takes a list. Randomly rearranges the values in the list. Returns the list", "prompt": "def order_strings(lst):\n    \"\"\"\n    Accepts a list. Randomly rearranges the values in the list. Returns the list\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 236, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student19", "submitted_text": "Takes an input list (which can have both strings and integers) and an integer. Adds the input integer to each item in the input list. ", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Accepts an input list (which can have both strings and integers) and an integer. Adds the input integer to each item in the input list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 237, "problem": "add_int", "entrypoint": "add_int", "assertions": "assert add_int(['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]\nassert add_int([8, 56, 8, '5', '4'], 1) == [9, 57, 9, '51', '41']\nassert add_int(['hello', 'aaa', 'bbb', ['list'], 1, 4], 5) == ['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]", "username": "student19", "submitted_text": "Takes an input list and an input integer. For all strings in the list, the input integer is concatenated after the end of the string. For all numbers in the list, the input integer is added to that number.", "prompt": "def add_int(lst, num):\n    \"\"\"\n    Accepts an input list and an input integer. For all strings in the list, the input integer is concatenated after the end of the string. For all numbers in the list, the input integer is added to that number.\n    \"\"\"\n    ", "subset": "last_success", "original": "Takes"}
{"__index_level_0__": 295, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student0", "submitted_text": "takes in a list of numbers. create a ODD list of odd numbers 1 through 10. returns the list of numbers with numbers in ODD removed.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    accepts a list of numbers. create a ODD list of odd numbers 1 through 10. returns the list of numbers with numbers in ODD removed.\n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 352, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student19", "submitted_text": "Takes an input dictionary and an input list. Checks each item in the input list. If an item is a key in the input dictionary and has a value, a that value is appended to an output list. Otherwise, if the item is not a valid key in the input dictionary, the value None is instead appended.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Accepts an input dictionary and an input list. Checks each item in the input list. If an item is a key in the input dictionary and has a value, a that value is appended to an output list. Otherwise, if the item is not a valid key in the input dictionary, the value None is instead appended.\n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 371, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student19", "submitted_text": "Takes an input list of single, capitalized letters. If any item in the list is either Q or U, it returns True. Otherwise, it returns False. ", "prompt": "def has_qu(lst):\n    \"\"\"\n    Accepts an input list of single, capitalized letters. If any item in the list is either Q or U, it returns True. Otherwise, it returns False. \n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 397, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student28", "submitted_text": "Write a code that takes one parameter, planets. Planets consists of planets and their mass. The code should only return the sum of planets less than or equal to 15.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Write a code that accepts one parameter, planets. Planets consists of planets and their mass. The code should only return the sum of planets less than or equal to 15.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 398, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student31", "submitted_text": "Takes a dictionary where the keys are strings, and the entries are integers. then, sums all of the entries whose strings are names of planets, and returns this sum. ", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Accepts a dictionary where the keys are strings, and the entries are integers. then, sums all of the entries whose strings are names of planets, and returns this sum. \n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 400, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student45", "submitted_text": "Takes a dictionary which we will call planets. If the dictionary key is 'Venus' or 'Mercury', add the value at that key to the sum. Return the sum.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Accepts a dictionary which we will call planets. If the dictionary key is 'Venus' or 'Mercury', add the value at that key to the sum. Return the sum.\n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 401, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student46", "submitted_text": "The function will take in a dictionary where the keys are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    The function will accept a dictionary where the keys are strings, with the first letter capitalized, and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.\n    \"\"\"\n    ", "subset": "first_failure", "original": "take in"}
{"__index_level_0__": 403, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student46", "submitted_text": "The function will take in a dictionary where the keys are strings and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    The function will accept a dictionary where the keys are strings and integers are stored inside them. It will remove any strings that are not associated with planets, then it will take all the integers stored inside and add them together and output that.\n    \"\"\"\n    ", "subset": "last_success", "original": "take in"}
{"__index_level_0__": 411, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student55", "submitted_text": "Write a function that gets a dictionary of planets and their masses. All the planets masses in a dictionary using the name of the planet as the key. The function should return the sum of all the planets' masses.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Write a function that accepts a dictionary of planets and their masses. All the planets masses in a dictionary using the name of the planet as the key. The function should return the sum of all the planets' masses.\n    \"\"\"\n    ", "subset": "first_failure", "original": "gets"}
{"__index_level_0__": 415, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student55", "submitted_text": "Write a function that gets a dictionary. The key of the dictionary is the name of the planet and the value is the mass. The function should sum up the masses of only the planets and returns the total. The sun and pluto are not planets.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Write a function that accepts a dictionary. The key of the dictionary is the name of the planet and the value is the mass. The function should sum up the masses of only the planets and returns the total. The sun and pluto are not planets.\n    \"\"\"\n    ", "subset": "last_success", "original": "gets"}
{"__index_level_0__": 421, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student65", "submitted_text": "This function takes a dictionary. If an entry is a planet, then it adds the key to the total mass. The output is the total mass of all planets in the dictionary.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    This function accepts a dictionary. If an entry is a planet, then it adds the key to the total mass. The output is the total mass of all planets in the dictionary.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 427, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student5", "submitted_text": "the function student_grades will take the input of students and grades. Students will have a name and then a score. Grades will have a number and a range of letter grades. The function should return the name of a student with the range of letter grade they got based on their score. ", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    the function student_grades will accept the input of students and grades. Students will have a name and then a score. Grades will have a number and a range of letter grades. The function should return the name of a student with the range of letter grade they got based on their score. \n    \"\"\"\n    ", "subset": "first_failure", "original": "take"}
{"__index_level_0__": 429, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student5", "submitted_text": "the function student_grades will take two inputs: students and grades. Students will have a name and then a score. Grades will have a number corresponding to the students scores and a range of letter grades tied to the number. The function should return the name of a student with the range of letter grade they got based on their score. ", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    the function student_grades will accept two inputs: students and grades. Students will have a name and then a score. Grades will have a number corresponding to the students scores and a range of letter grades tied to the number. The function should return the name of a student with the range of letter grade they got based on their score. \n    \"\"\"\n    ", "subset": "last_failure", "original": "take"}
{"__index_level_0__": 437, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student22", "submitted_text": "takes in 2 dictionaries and uses the first one's values for the second one's key, and outputs a dictionary matching those up", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    accepts 2 dictionaries and uses the first one's values for the second one's key, and outputs a dictionary matching those up\n    \"\"\"\n    ", "subset": "first_success", "original": "takes in"}
{"__index_level_0__": 438, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student37", "submitted_text": "Write a function which takes a dictionary of integers mapped to strings and a second dictionary of integers mapped to lists (size 2) of strings and maps takes the integers from the first list and constructs a new dictionary where the string mapped to each integer in the first list is mapped to the list the integer is mapped to in the second dictionary", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Write a function which accepts a dictionary of integers mapped to strings and a second dictionary of integers mapped to lists (size 2) of strings and maps takes the integers from the first list and constructs a new dictionary where the string mapped to each integer in the first list is mapped to the list the integer is mapped to in the second dictionary\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 439, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student61", "submitted_text": "Function takes in names of students with a number and based on that number, the grades are returned in a letter format", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Function accepts names of students with a number and based on that number, the grades are returned in a letter format\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 440, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student61", "submitted_text": "Function takes in names of students with a number and based on that number the grades are returned from the brackets", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    Function accepts names of students with a number and based on that number the grades are returned from the brackets\n    \"\"\"\n    ", "subset": "last_failure", "original": "takes in"}
{"__index_level_0__": 451, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student23", "submitted_text": "This function takes in a list within a list, consisting of an integer in the outer list, and names as a string in the inner list. The output creates a dictionary where the key is the string and updates the dictionary with the value which is the integer that is given. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function accepts a list within a list, consisting of an integer in the outer list, and names as a string in the inner list. The output creates a dictionary where the key is the string and updates the dictionary with the value which is the integer that is given. \n    \"\"\"\n    ", "subset": "last_failure", "original": "takes in"}
{"__index_level_0__": 453, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student33", "submitted_text": "The function takes in some number of lists that each consist of an integer and another list of strings \"names\". For each list, the function creates a dictionary entry with each string in \"names\" and the integer in that list. The function returns the dictionary. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function accepts some number of lists that each consist of an integer and another list of strings \"names\". For each list, the function creates a dictionary entry with each string in \"names\" and the integer in that list. The function returns the dictionary. \n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 465, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student59", "submitted_text": "takes a list of lists as an input. creates an empty dictionary. for each list in the inputted list, takes each value in the [1] place and make it a key and add it to the created dictionary, then make the value of that key the value in the [0] place from the list", "prompt": "def times_with(meetings):\n    \"\"\"\n    accepts a list of lists as an input. creates an empty dictionary. for each list in the inputted list, takes each value in the [1] place and make it a key and add it to the created dictionary, then make the value of that key the value in the [0] place from the list\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 467, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student59", "submitted_text": "takes a list of lists as an input. for each list inside the inputted list, there is a value and a list of names. returns a dictionary of the names with the value of the value in the list they came from", "prompt": "def times_with(meetings):\n    \"\"\"\n    accepts a list of lists as an input. for each list inside the inputted list, there is a value and a list of names. returns a dictionary of the names with the value of the value in the list they came from\n    \"\"\"\n    ", "subset": "last_failure", "original": "takes"}
{"__index_level_0__": 468, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student60", "submitted_text": "This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function accepts a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 469, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student60", "submitted_text": "This function takes in a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. The function then would return a dictionary containing the total value assigned to every string. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would return { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\n", "prompt": "def times_with(meetings):\n    \"\"\"\n    This function accepts a int and a 2d list as parameters. The 2d list is given in the form [ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]. This function assigns the value of the int to every string in the list. If the string appears multiple times, the number is added to that. The function then would return a dictionary containing the total value assigned to every string. Given [ [30, ['Alice', 'Bob', 'Carol']] ], the function would return { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\n\n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 470, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student63", "submitted_text": "The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has one of the names as the key, and the value is the sum of the numbers that are the first entry of each list that the name is found in. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function accepts a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has one of the names as the key, and the value is the sum of the numbers that are the first entry of each list that the name is found in. \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 471, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student63", "submitted_text": "The function takes in a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has a name from the name lists as the key, and the value is the sum of the numbers that are the first entry of each list that the list of names that has the name is found in. ", "prompt": "def times_with(meetings):\n    \"\"\"\n    The function accepts a list of lists and outputs a dictionary. Each list in the list has a number as the first entry, then a list of names. Each item in the dictionary has a name from the name lists as the key, and the value is the sum of the numbers that are the first entry of each list that the list of names that has the name is found in. \n    \"\"\"\n    ", "subset": "last_failure", "original": "takes in"}
{"__index_level_0__": 483, "problem": "times_with", "entrypoint": "times_with", "assertions": "assert times_with([ [30, ['Alice', 'Bob', 'Carol']] ]) == { 'Alice': 30, 'Bob': 30, 'Carol': 30 }\nassert times_with([ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]) == { 'Alice': 50, 'Bob': 50, 'Carol': 30 }\nassert times_with([ [10, ['Alice', 'Bob']], [5, ['Carol']] ]) == {'Alice': 10, 'Bob': 10, 'Carol': 5}", "username": "student75", "submitted_text": "def times_with(meetings): takes the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1:val0, increase val1 + 1", "prompt": "def times_with(meetings):\n    \"\"\"\n    def times_with(meetings): accepts the input [ [30, ['Alice', 'Bob', 'Carol']] ] and produces and output of val1:val0, increase val1 + 1\n    \"\"\"\n    ", "subset": "last_success", "original": "takes"}
{"__index_level_0__": 492, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student5", "submitted_text": "The function meeps_morps will take a list as an input and return the number of times \"Meep\" appears and the number that \"Morp\" appears in a list", "prompt": "def meeps_morps(items):\n    \"\"\"\n    The function meeps_morps will accept a list as an input and return the number of times \"Meep\" appears and the number that \"Morp\" appears in a list\n    \"\"\"\n    ", "subset": "first_failure", "original": "take"}
{"__index_level_0__": 493, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student5", "submitted_text": "The function meeps_morps will take a list as an input and return a list with the number of times \"Meep\" appears and the number that \"Morp\" appears.", "prompt": "def meeps_morps(items):\n    \"\"\"\n    The function meeps_morps will accept a list as an input and return a list with the number of times \"Meep\" appears and the number that \"Morp\" appears.\n    \"\"\"\n    ", "subset": "last_success", "original": "take"}
{"__index_level_0__": 500, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student22", "submitted_text": "take in a list of strings and output a count of how many times the word 'Meep' and 'Morp' occur", "prompt": "def meeps_morps(items):\n    \"\"\"\n    accept a list of strings and output a count of how many times the word 'Meep' and 'Morp' occur\n    \"\"\"\n    ", "subset": "first_failure", "original": "take in"}
{"__index_level_0__": 502, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student22", "submitted_text": "take in a list of strings and output a list count of how many times the word 'Meep' and 'Morp' occur", "prompt": "def meeps_morps(items):\n    \"\"\"\n    accept a list of strings and output a list count of how many times the word 'Meep' and 'Morp' occur\n    \"\"\"\n    ", "subset": "last_success", "original": "take in"}
{"__index_level_0__": 503, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student37", "submitted_text": "Write a function which takes a list of strings as an input, creates a list of 0's of length 2 called counter, then iterates through the input list and for each instance of 'Meep' in the input list, adds +1 to counter[0], and for each instance of 'Morp', adds +1 to counter[1].", "prompt": "def meeps_morps(items):\n    \"\"\"\n    Write a function which accepts a list of strings as an input, creates a list of 0's of length 2 called counter, then iterates through the input list and for each instance of 'Meep' in the input list, adds +1 to counter[0], and for each instance of 'Morp', adds +1 to counter[1].\n    \"\"\"\n    ", "subset": "first_success", "original": "takes"}
{"__index_level_0__": 517, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student19", "submitted_text": "Takes an input string which is the first three letters of any day of the week, and an input number 0-23. If the input string is 'Sat' or 'Sun', it returns 'weekend'. Otherwise, if the hour is between 0 and 8, it returns 'sleeping'. If the hour is 9-23 and the string is not 'Sat' or 'Sun', it returns 'weekday'.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    Accepts an input string which is the first three letters of any day of the week, and an input number 0-23. If the input string is 'Sat' or 'Sun', it returns 'weekend'. Otherwise, if the hour is between 0 and 8, it returns 'sleeping'. If the hour is 9-23 and the string is not 'Sat' or 'Sun', it returns 'weekday'.\n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 519, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student36", "submitted_text": "Accept the day of the week, and the time of day and if the time is between 9-23 return weekend for Sat and Sun and weekday for any other. If the time is between 0-8 return sleeping", "prompt": "def print_time(day,hour):\n    \"\"\"\n    Accept the day of the week, and the time of day and if the time is between 9-23 return weekend for Sat and Sun and weekday for any other. If the time is between 0-8 return sleeping\n    \"\"\"\n    ", "subset": "first_failure", "original": "Accept"}
{"__index_level_0__": 524, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student42", "submitted_text": "take in a day and an hour. if the hour is between 0 and 8, output the string \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, output the string \"weekend\". else, output \"weekday\". ", "prompt": "def print_time(day,hour):\n    \"\"\"\n    accept a day and an hour. if the hour is between 0 and 8, output the string \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, output the string \"weekend\". else, output \"weekday\". \n    \"\"\"\n    ", "subset": "first_failure", "original": "take in"}
{"__index_level_0__": 526, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student42", "submitted_text": "take in a day and an hour. if the hour is less than or equal to 8, return the string \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, return the string \"weekend\". else, return the string \"weekday\". ", "prompt": "def print_time(day,hour):\n    \"\"\"\n    accept a day and an hour. if the hour is less than or equal to 8, return the string \"sleeping\". if not, check if the day is either \"Sat\" or \"Sun\", and if so, return the string \"weekend\". else, return the string \"weekday\". \n    \"\"\"\n    ", "subset": "last_success", "original": "take in"}
{"__index_level_0__": 540, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student19", "submitted_text": "Takes a list of strings words and a string ending, removes any instance of ending from each item in words, and replaces it with an 's'.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Accepts a list of strings words and a string ending, removes any instance of ending from each item in words, and replaces it with an 's'.\n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 541, "problem": "mod_end", "entrypoint": "mod_end", "assertions": "assert mod_end(['jumping', 'bumping', 'singing', 'picking'], 'ing') == ['jumps', 'bumps', 'sings', 'picks']\nassert mod_end(['dreaded', 'edited', 'heated'], 'ed') == ['dreads', 'edits', 'heats']\nassert mod_end(['nearer', 'closer'], 'er') == ['nears', 'closs']", "username": "student20", "submitted_text": "Take a list of words sharing the same ending, and a string as an input.\nSearch the last letters of the word for the string, and replace it with 's'.", "prompt": "def mod_end(words, ending):\n    \"\"\"\n    Accept a list of words sharing the same ending, and a string as an input.\nSearch the last letters of the word for the string, and replace it with 's'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Take"}
{"__index_level_0__": 565, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student23", "submitted_text": "This function takes in a number and adds one if the number is greater than 9. If the number is negative it turns into a positive number. If it is a single-digit number it adds the integer zero to the end of the number and returns an integer. Then the output is returned with the updated number.", "prompt": "def increaseScore(score):\n    \"\"\"\n    This function accepts a number and adds one if the number is greater than 9. If the number is negative it turns into a positive number. If it is a single-digit number it adds the integer zero to the end of the number and returns an integer. Then the output is returned with the updated number.\n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 566, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student33", "submitted_text": "The function takes an integer as input. If the integer is negative, the function returns it as positive. If the integer only has one digit, the function returns a value of 10. If the integer is positive and two or more digits, the function returns the integer plus one. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function accepts an integer as input. If the integer is negative, the function returns it as positive. If the integer only has one digit, the function returns a value of 10. If the integer is positive and two or more digits, the function returns the integer plus one. \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 567, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student33", "submitted_text": "The function takes an integer as input. If the integer is negative, the function returns the absolute value of the integer. If the integer only has one digit, the function returns a value of 10. If the integer is positive and two or more digits, the function returns the integer plus one. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function accepts an integer as input. If the integer is negative, the function returns the absolute value of the integer. If the integer only has one digit, the function returns a value of 10. If the integer is positive and two or more digits, the function returns the integer plus one. \n    \"\"\"\n    ", "subset": "last_success", "original": "takes"}
{"__index_level_0__": 575, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student59", "submitted_text": "takes an integer and returns an integer whose one's place digit is one more than before. if the inputted integer is negative, returns the absolute value of the integer", "prompt": "def increaseScore(score):\n    \"\"\"\n    accepts an integer and returns an integer whose one's place digit is one more than before. if the inputted integer is negative, returns the absolute value of the integer\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 576, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student59", "submitted_text": "takes an integer as the input. if the inputted integer is negative, returns the absolute value of the integer. if the inputted integer is positive and is greater than 9, returns an integer whose one's place digit is one more than before. for all other case, returns an integer that adds a zero in the one's place", "prompt": "def increaseScore(score):\n    \"\"\"\n    accepts an integer as the input. if the inputted integer is negative, returns the absolute value of the integer. if the inputted integer is positive and is greater than 9, returns an integer whose one's place digit is one more than before. for all other case, returns an integer that adds a zero in the one's place\n    \"\"\"\n    ", "subset": "last_success", "original": "takes"}
{"__index_level_0__": 577, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student60", "submitted_text": "The function takes in an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number and returns it. Otherwise, the function just returns score + 1. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function accepts an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number and returns it. Otherwise, the function just returns score + 1. \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 579, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student60", "submitted_text": "The function takes in an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number, casts it back into an int and returns it. Otherwise, the function just returns score + 1. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function accepts an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number, casts it back into an int and returns it. Otherwise, the function just returns score + 1. \n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 580, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student63", "submitted_text": "This function takes in a number and outputs a new one, if the number is less than 10, the new number will simply be 10, and if it is 10 or greater, the new number will be the original number plus 1. The new number is outputted. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    This function accepts a number and outputs a new one, if the number is less than 10, the new number will simply be 10, and if it is 10 or greater, the new number will be the original number plus 1. The new number is outputted. \n    \"\"\"\n    ", "subset": "first_success", "original": "takes in"}
{"__index_level_0__": 585, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student75", "submitted_text": "def increaseScore(score): takes input '-10' and outputs its positive integer", "prompt": "def increaseScore(score):\n    \"\"\"\n    def increaseScore(score): accepts input '-10' and outputs its positive integer\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 586, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student75", "submitted_text": "def increaseScore(score): takes input '-10' and outputs its positive integer\ndef increaseScore(score): inputs '1' and adds 9\ndef increaseScore(score): adds 1 to each input '10', '15', '20'", "prompt": "def increaseScore(score):\n    \"\"\"\n    def increaseScore(score): accepts input '-10' and outputs its positive integer\ndef increaseScore(score): accepts '1' and adds 9\ndef increaseScore(score): adds 1 to each input '10', '15', '20'\n    \"\"\"\n    ", "subset": "last_success", "original": "inputs"}
{"__index_level_0__": 587, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student76", "submitted_text": "Takes the absolute value of an integer if it is negative, multiplies an integer by 10 if it is positive and less than 10 and adds 1 to an integer if it is equal to 10 or greater than 10", "prompt": "def increaseScore(score):\n    \"\"\"\n    Accepts the absolute value of an integer if it is negative, multiplies an integer by 10 if it is positive and less than 10 and adds 1 to an integer if it is equal to 10 or greater than 10\n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 590, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student1", "submitted_text": "Takes the name of a month and returns the season that the month falls into.", "prompt": "def getSeason(month):\n    \"\"\"\n    Accepts the name of a month and returns the season that the month falls into.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Takes"}
{"__index_level_0__": 591, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student6", "submitted_text": "Function takes in an inputted month of the year and outputs the season that the month is in ", "prompt": "def getSeason(month):\n    \"\"\"\n    Function accepts an inputted month of the year and outputs the season that the month is in \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 594, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student6", "submitted_text": "Function takes in the name of an inputted month of the year and outputs the season that the month is in. It returns and prints the correct outputted season, with a return statement after each if, else or elif statement", "prompt": "def getSeason(month):\n    \"\"\"\n    Function accepts the name of an inputted month of the year and outputs the season that the month is in. It returns and prints the correct outputted season, with a return statement after each if, else or elif statement\n    \"\"\"\n    ", "subset": "last_failure", "original": "takes in"}
{"__index_level_0__": 595, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student7", "submitted_text": "Takes an inputted month and returns the season for which the month is found in. The first three months of the year are considered to be winter, the next three months are considered to be spring, the next three months are considered summer, and the last three months are considered fall.\n", "prompt": "def getSeason(month):\n    \"\"\"\n    Accepts an inputted month and returns the season for which the month is found in. The first three months of the year are considered to be winter, the next three months are considered to be spring, the next three months are considered summer, and the last three months are considered fall.\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 598, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student7", "submitted_text": "Takes an inputted month and returns the season for which the month is found in. January, February, and March will return \"winter\"; April, May, and June will return \"spring\"; July, August, and September will return \"summer\"; and the rest will return \"fall\".\n", "prompt": "def getSeason(month):\n    \"\"\"\n    Accepts an inputted month and returns the season for which the month is found in. January, February, and March will return \"winter\"; April, May, and June will return \"spring\"; July, August, and September will return \"summer\"; and the rest will return \"fall\".\n\n    \"\"\"\n    ", "subset": "last_success", "original": "Takes"}
{"__index_level_0__": 617, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student28", "submitted_text": "This function takes one parameter, month. Month represents the months in a year. The code should take seasons associated with that month and print the associated season of that month. ", "prompt": "def getSeason(month):\n    \"\"\"\n    This function accepts one parameter, month. Month represents the months in a year. The code should take seasons associated with that month and print the associated season of that month. \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 620, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student28", "submitted_text": "This function takes one parameter, month. Month is a string and Month represents the months in a year. There are seasons associated with each month. Winter, spring, summer, and fall. The code should take seasons associated with that month and print the associated season of that month. The months of December, January, and February should be winter, and so on. ", "prompt": "def getSeason(month):\n    \"\"\"\n    This function accepts one parameter, month. Month is a string and Month represents the months in a year. There are seasons associated with each month. Winter, spring, summer, and fall. The code should take seasons associated with that month and print the associated season of that month. The months of December, January, and February should be winter, and so on. \n    \"\"\"\n    ", "subset": "last_failure", "original": "takes"}
{"__index_level_0__": 621, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student31", "submitted_text": "Takes a string corresponding to one month of the year, and returns a string indicating what season that month is in.", "prompt": "def getSeason(month):\n    \"\"\"\n    Accepts a string corresponding to one month of the year, and returns a string indicating what season that month is in.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 624, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student31", "submitted_text": "Takes a string corresponding to one month of the year, and returns a string indicating what season that month is in: December, January, and February are all in winter, March, April, and May are all in spring, June, July, and August are all in summer, and October, September, and November are all in the season \"fall\".", "prompt": "def getSeason(month):\n    \"\"\"\n    Accepts a string corresponding to one month of the year, and returns a string indicating what season that month is in: December, January, and February are all in winter, March, April, and May are all in spring, June, July, and August are all in summer, and October, September, and November are all in the season \"fall\".\n    \"\"\"\n    ", "subset": "last_failure", "original": "Takes"}
{"__index_level_0__": 629, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student45", "submitted_text": "Takes one parameter, a string, which we will call month. Outputs a string which we will call season. If month is \"December\", \"January\", or \"February\", season is 'winter'. If month is \"March\", \"April\", or \"May\", season is 'spring'. If month is \"June\", \"July\", or \"August\", season is 'summer'. If month is \"September\", \"October\", or \"November\", season is \"fall\".", "prompt": "def getSeason(month):\n    \"\"\"\n    Accepts one parameter, a string, which we will call month. Outputs a string which we will call season. If month is \"December\", \"January\", or \"February\", season is 'winter'. If month is \"March\", \"April\", or \"May\", season is 'spring'. If month is \"June\", \"July\", or \"August\", season is 'summer'. If month is \"September\", \"October\", or \"November\", season is \"fall\".\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 632, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student45", "submitted_text": "Takes one parameter, a string, which we will call month. Outputs a string which we will call season. If month is \"January\", season is 'winter'. If month is \"April\", season is 'spring'. If month is \"August\", season is 'summer'. If month is \"October\", season is 'fall'.", "prompt": "def getSeason(month):\n    \"\"\"\n    Accepts one parameter, a string, which we will call month. Outputs a string which we will call season. If month is \"January\", season is 'winter'. If month is \"April\", season is 'spring'. If month is \"August\", season is 'summer'. If month is \"October\", season is 'fall'.\n    \"\"\"\n    ", "subset": "last_success", "original": "Takes"}
{"__index_level_0__": 633, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student46", "submitted_text": "The functions take in a string, representing a month, then outputs the season commonly associated with that month.", "prompt": "def getSeason(month):\n    \"\"\"\n    The functions accept a string, representing a month, then outputs the season commonly associated with that month.\n    \"\"\"\n    ", "subset": "first_failure", "original": "take in"}
{"__index_level_0__": 636, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student46", "submitted_text": "The functions take in a string, representing a month in with the first letter being upper case, then outputs the season commonly associated with that month, in lower case.", "prompt": "def getSeason(month):\n    \"\"\"\n    The functions accept a string, representing a month in with the first letter being upper case, then outputs the season commonly associated with that month, in lower case.\n    \"\"\"\n    ", "subset": "last_success", "original": "take in"}
{"__index_level_0__": 640, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student55", "submitted_text": "Write a function that gets the name of the month and returns the season that the majority of the month is represented by in the north hemisphere.", "prompt": "def getSeason(month):\n    \"\"\"\n    Write a function that accepts the name of the month and returns the season that the majority of the month is represented by in the north hemisphere.\n    \"\"\"\n    ", "subset": "first_failure", "original": "gets"}
{"__index_level_0__": 644, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student55", "submitted_text": "Write a function that gets the name of the month and returns the season that the majority of the month is represented by in the north hemisphere. The first letter of the season should be in lowercase. For the case of autumn, provide the return statement as 'fall'.", "prompt": "def getSeason(month):\n    \"\"\"\n    Write a function that accepts the name of the month and returns the season that the majority of the month is represented by in the north hemisphere. The first letter of the season should be in lowercase. For the case of autumn, provide the return statement as 'fall'.\n    \"\"\"\n    ", "subset": "last_success", "original": "gets"}
{"__index_level_0__": 646, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student65", "submitted_text": "This function inputs the string of a month and returns the name of the season it is in (in the northern hemisphere)", "prompt": "def getSeason(month):\n    \"\"\"\n    This function accepts the string of a month and returns the name of the season it is in (in the northern hemisphere)\n    \"\"\"\n    ", "subset": "first_failure", "original": "inputs"}
{"__index_level_0__": 655, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student5", "submitted_text": "the function assessVowels will take input of a string and return a list of all the vowels in that string in the case they were originally written. ", "prompt": "def assessVowels(s):\n    \"\"\"\n    the function assessVowels will accept a string and return a list of all the vowels in that string in the case they were originally written. \n    \"\"\"\n    ", "subset": "first_failure", "original": "take input of"}
{"__index_level_0__": 657, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student5", "submitted_text": "the function assessVowels will take input of a string and return a list of all the vowels in that string. include both capital and lower case letters. ", "prompt": "def assessVowels(s):\n    \"\"\"\n    the function assessVowels will accept a string and return a list of all the vowels in that string. include both capital and lower case letters. \n    \"\"\"\n    ", "subset": "last_failure", "original": "take input of"}
{"__index_level_0__": 666, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student22", "submitted_text": "takes in a string and returns a list of vowels ", "prompt": "def assessVowels(s):\n    \"\"\"\n    accepts a string and returns a list of vowels \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 667, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student22", "submitted_text": "takes in a string and checks for uppercase and lowercase vowels and returns a list of those uppercase and lowercase vowels, if any", "prompt": "def assessVowels(s):\n    \"\"\"\n    accepts a string and checks for uppercase and lowercase vowels and returns a list of those uppercase and lowercase vowels, if any\n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 668, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student37", "submitted_text": "Write a function which takes a string as an input and returns a list of each vowel present in the string, case sensitive", "prompt": "def assessVowels(s):\n    \"\"\"\n    Write a function which accepts a string as an input and returns a list of each vowel present in the string, case sensitive\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 669, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student37", "submitted_text": "Write a function which takes a string as an input and returns a list of each vowel present in the string, where capitalized vowels are present in the return list as capitalized and lower case vowels as lower case", "prompt": "def assessVowels(s):\n    \"\"\"\n    Write a function which accepts a string as an input and returns a list of each vowel present in the string, where capitalized vowels are present in the return list as capitalized and lower case vowels as lower case\n    \"\"\"\n    ", "subset": "last_success", "original": "takes"}
{"__index_level_0__": 677, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student33", "submitted_text": "The function takes in 5 lists consisting of 5 strings and one additional string \"target\". If any of the lists consists of all 5 strings with the same content as \"target,\" the function returns True. Otherwise, the function returns False. ", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    The function accepts 5 lists consisting of 5 strings and one additional string \"target\". If any of the lists consists of all 5 strings with the same content as \"target,\" the function returns True. Otherwise, the function returns False. \n    \"\"\"\n    ", "subset": "first_success", "original": "takes in"}
{"__index_level_0__": 690, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student59", "submitted_text": "takes a list of lists and a string as inputs. if the string appears in the same index in each list or appears for every value in a list, returns True. for all other cases, returns False", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    accepts a list of lists and a string as inputs. if the string appears in the same index in each list or appears for every value in a list, returns True. for all other cases, returns False\n    \"\"\"\n    ", "subset": "first_success", "original": "takes"}
{"__index_level_0__": 691, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student60", "submitted_text": "This function takes in a 2d list as its parameter. Each list in the 2d list contains either '', 'X', 'O'. If the 'X' or the 'O' next to each other 5 times, True is returned. Otherwise False is returned. It's similar to game of 4 in a row. ", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    This function accepts a 2d list as its parameter. Each list in the 2d list contains either '', 'X', 'O'. If the 'X' or the 'O' next to each other 5 times, True is returned. Otherwise False is returned. It's similar to game of 4 in a row. \n    \"\"\"\n    ", "subset": "first_success", "original": "takes in"}
{"__index_level_0__": 692, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student63", "submitted_text": "The function will take in a list of lists and a character and will output a True or False. If the list has any lists in it for which all of the entries are the inputted letter, the function return True, if there are no lists in the list for which every entry is the inputted letter, the function returns False.", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    The function will accept a list of lists and a character and will output a True or False. If the list has any lists in it for which all of the entries are the inputted letter, the function return True, if there are no lists in the list for which every entry is the inputted letter, the function returns False.\n    \"\"\"\n    ", "subset": "first_success", "original": "take in"}
{"__index_level_0__": 701, "problem": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "assertions": "assert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == True\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False\nassert hasHorizontalWin([['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X') == False", "username": "student75", "submitted_text": "def hasHorizontalWin(board, letter): takes inputs\n[['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X',\n[['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X',\n[['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X'\nif a row is all x across horizontally print true, if not print false\n\n", "prompt": "def hasHorizontalWin(board, letter):\n    \"\"\"\n    def hasHorizontalWin(board, letter): accepts inputs\n[['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X',\n[['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X',\n[['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X'\nif a row is all x across horizontally print true, if not print false\n\n\n    \"\"\"\n    ", "subset": "first_success", "original": "takes"}
{"__index_level_0__": 735, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student66", "submitted_text": "take the float at the end of each item in the array list and sum all of the values return the sum", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    accept the float at the end of each item in the array list and sum all of the values return the sum\n    \"\"\"\n    ", "subset": "last_success", "original": "take"}
{"__index_level_0__": 796, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student31", "submitted_text": "Takes a list of strings and a single string called the answer. Then, for each string in the list of strings, compares it to the answer and creates an integer score for that string. For every time the string in the list of strings has the same letter in the same place as the answer, adds two to the score. For every time the string in the list of strings has the same letter in a different place as the answer, adds one to the score. Then, adds that score to a list and starts a new score at 0 for the next string in the list of strings. Continue until all the strings in the list of strings have been compared with the answer, and then return the list of scores. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Accepts a list of strings and a single string called the answer. Then, for each string in the list of strings, compares it to the answer and creates an integer score for that string. For every time the string in the list of strings has the same letter in the same place as the answer, adds two to the score. For every time the string in the list of strings has the same letter in a different place as the answer, adds one to the score. Then, adds that score to a list and starts a new score at 0 for the next string in the list of strings. Continue until all the strings in the list of strings have been compared with the answer, and then return the list of scores. \n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 798, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student45", "submitted_text": "Takes two parameters: a list of strings which we will call guessList and a string which we will call hiddenWord. Makes a new list called scores. For each string in guessList, we will compare each character to the characters in hiddenWord. Make a variable called score. If the letter at each index in the string is the same as the letter at that index in hiddenWord, add 2 to score. If the letter is the same as a letter at a different index in hiddenWord, add 1 to score. Add score to scores. Return scores. ", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Accepts two parameters: a list of strings which we will call guessList and a string which we will call hiddenWord. Makes a new list called scores. For each string in guessList, we will compare each character to the characters in hiddenWord. Make a variable called score. If the letter at each index in the string is the same as the letter at that index in hiddenWord, add 2 to score. If the letter is the same as a letter at a different index in hiddenWord, add 1 to score. Add score to scores. Return scores. \n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 807, "problem": "partialWordle", "entrypoint": "partialWordle", "assertions": "assert partialWordle([\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare') == [0,0,4,6,3]\nassert partialWordle([\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\") == [0,2,4,1,3]\nassert partialWordle([\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\") == [4,4,2,2,3]", "username": "student55", "submitted_text": "Write a function that gets a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden words. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function returns a list of the total points from each word in the list.", "prompt": "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function that accepts a list of strings and the hidden word (a string separated by a comma). From the list of strings, compare each letter from the strings in the list with the hidden word. Compute the total points after comparing all letters. The total points should be calculated following the rules: If the letter is the same from the hidden word but in a different position, receives +1. If the letter is the same from the hidden word and in the same position, receives +2. The function returns a list of the total points from each word in the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "gets"}
{"__index_level_0__": 831, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student19", "submitted_text": "Takes an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Accepts an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 832, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student19", "submitted_text": "Takes an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character. If an index is greater than the length of the string - 1, it is ignored.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    Accepts an input string, single character, and list of index numbers. Every character in the input string at one of these input indexes is replaced with the input character. If an index is greater than the length of the string - 1, it is ignored.\n    \"\"\"\n    ", "subset": "last_success", "original": "Takes"}
{"__index_level_0__": 865, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and replaces every other letter with the upper case letter. If it is just a one-letter word it is turned into an upper-case letter. It then returns the whole updated phrase, including all characters upper and lower case. ", "prompt": "def altText(s):\n    \"\"\"\n    This function accepts a word or sentence and replaces every other letter with the upper case letter. If it is just a one-letter word it is turned into an upper-case letter. It then returns the whole updated phrase, including all characters upper and lower case. \n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 866, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student33", "submitted_text": "The function takes a string of text as an input. For words in the string with an odd number of letters, every other letter is capitalized starting with the first letter. For words in the string with an even number of letters, every other letter is capitalized starting with the second letter. ", "prompt": "def altText(s):\n    \"\"\"\n    The function accepts a string of text as an input. For words in the string with an odd number of letters, every other letter is capitalized starting with the first letter. For words in the string with an even number of letters, every other letter is capitalized starting with the second letter. \n    \"\"\"\n    ", "subset": "first_success", "original": "takes"}
{"__index_level_0__": 881, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student59", "submitted_text": "takes a string and capitalizes random letters in it", "prompt": "def altText(s):\n    \"\"\"\n    accepts a string and capitalizes random letters in it\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 883, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student59", "submitted_text": "takes a string. capitalizes random letters in each word of that string and adds the new words to a list. returns this new list of words", "prompt": "def altText(s):\n    \"\"\"\n    accepts a string. capitalizes random letters in each word of that string and adds the new words to a list. returns this new list of words\n    \"\"\"\n    ", "subset": "last_failure", "original": "takes"}
{"__index_level_0__": 884, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student60", "submitted_text": "This function inputs a string as a parameter. This function returns that string except every other letter is capitalized. This functions starts by capitalizing the first letter. This function ignores spaces. ", "prompt": "def altText(s):\n    \"\"\"\n    This function accepts a string as a parameter. This function returns that string except every other letter is capitalized. This functions starts by capitalizing the first letter. This function ignores spaces. \n    \"\"\"\n    ", "subset": "first_success", "original": "inputs"}
{"__index_level_0__": 886, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student60", "submitted_text": "This function inputs a string as a parameter. This function returns that string except every other letter is capitalized. This functions starts by capitalizing the first letter. ", "prompt": "def altText(s):\n    \"\"\"\n    This function accepts a string as a parameter. This function returns that string except every other letter is capitalized. This functions starts by capitalizing the first letter. \n    \"\"\"\n    ", "subset": "last_failure", "original": "inputs"}
{"__index_level_0__": 887, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student63", "submitted_text": "The function takes in a string and capitalizes every other letter in the string, starting with the first letter being a capital.", "prompt": "def altText(s):\n    \"\"\"\n    The function accepts a string and capitalizes every other letter in the string, starting with the first letter being a capital.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 889, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student63", "submitted_text": "The function takes in a string and outputs the same string but with every other letter being capitalized, starting with the first letter being a capital.  ", "prompt": "def altText(s):\n    \"\"\"\n    The function accepts a string and outputs the same string but with every other letter being capitalized, starting with the first letter being a capital.  \n    \"\"\"\n    ", "subset": "last_failure", "original": "takes in"}
{"__index_level_0__": 893, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student75", "submitted_text": "def altText(s): brings in input 'T' and outputs the capitalized version", "prompt": "def altText(s):\n    \"\"\"\n    def altText(s): accepts input 'T' and outputs the capitalized version\n    \"\"\"\n    ", "subset": "first_failure", "original": "brings in"}
{"__index_level_0__": 895, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student75", "submitted_text": "\ndef altText(s): brings in input 'computers' and capitalizes every other letter starting at 'C' and ending at 'S' and prints the lowercase letters in their original spelling \ndef altText(s): brings in input 'T' and outputs the capitalized version", "prompt": "def altText(s):\n    \"\"\"\n    \ndef altText(s): accepts input 'computers' and capitalizes every other letter starting at 'C' and ending at 'S' and prints the lowercase letters in their original spelling \ndef altText(s): accepts input 'T' and outputs the capitalized version\n    \"\"\"\n    ", "subset": "last_success", "original": "brings in"}
{"__index_level_0__": 896, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student76", "submitted_text": "Takes every odd character in a string and capitalizes", "prompt": "def altText(s):\n    \"\"\"\n    Accepts every odd character in a string and capitalizes\n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 905, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student4", "submitted_text": "takes the inputted string (s) and takes the number of characters (i) and flips them around in the outputted string", "prompt": "def changeSection(s,i):\n    \"\"\"\n    accepts the inputted string (s) and accepts the number of characters (i) and flips them around in the outputted string\n    \"\"\"\n    ", "subset": "last_failure", "original": "takes"}
{"__index_level_0__": 935, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student30", "submitted_text": "Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them before the remaining characters.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Accepts parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them before the remaining characters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes in"}
{"__index_level_0__": 939, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student30", "submitted_text": "Takes in parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them at the front of the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    Accepts parameters (s, i), where s is a string and i is an integer. Removes the first i elements in the string, reverses their order, and inserts them at the front of the string.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Takes in"}
{"__index_level_0__": 964, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student19", "submitted_text": "Takes an input of two lists, each with the same number of items. Combines the first item in each list into a new list, does this for every item in both lists, then compiles these lists into one last list, and outputs the last list.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Accepts an input of two lists, each with the same number of items. Combines the first item in each list into a new list, does this for every item in both lists, then compiles these lists into one last list, and outputs the last list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 965, "problem": "combine", "entrypoint": "combine", "assertions": "assert combine([[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]) == [[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]\nassert combine([[9,8,7]], [[0,1,2]]) == [[9,8,7,0,1,2]]\nassert combine([[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]) == [[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]", "username": "student19", "submitted_text": "Takes an input of two lists, l1 and l2, each of which also contains lists. It combines the first list in l1 with the first one in l2, then continues for all items in l1 and l2. It outputs this final list which is a combination of l1 and l2.", "prompt": "def combine(l1,l2):\n    \"\"\"\n    Accepts an input of two lists, l1 and l2, each of which also contains lists. It combines the first list in l1 with the first one in l2, then continues for all items in l1 and l2. It outputs this final list which is a combination of l1 and l2.\n    \"\"\"\n    ", "subset": "last_success", "original": "Takes"}
{"__index_level_0__": 987, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student3", "submitted_text": "create function which take 1 input (value). Produce list of list that have value number of list contain value number ascending from 1 to value", "prompt": "def pattern(value):\n    \"\"\"\n    create function which accept 1 input (value). Produce list of list that have value number of list contain value number ascending from 1 to value\n    \"\"\"\n    ", "subset": "first_failure", "original": "take"}
{"__index_level_0__": 992, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student3", "submitted_text": "create function which take 1 input (value). create list of ascending numbers of value start from 1. insert ", "prompt": "def pattern(value):\n    \"\"\"\n    create function which accept 1 input (value). create list of ascending numbers of value start from 1. insert\n    \"\"\"\n    ", "subset": "last_failure", "original": "take"}
{"__index_level_0__": 1002, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student25", "submitted_text": "This function takes a given integer and creates a list with numbers 1 to that given value. It creates this list repeated for the given value and returns, appending each list to one list. It returns the list of lists.", "prompt": "def pattern(value):\n    \"\"\"\n    This function accepts a given integer and creates a list with numbers 1 to that given value. It creates this list repeated for the given value and returns, appending each list to one list. It returns the list of lists.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 1003, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student25", "submitted_text": "This function takes a given integer and creates one list including the numbers 1 to that given value. It creates this list repeated for the given value, appending each list to one list. It returns the list of lists.", "prompt": "def pattern(value):\n    \"\"\"\n    This function accepts a given integer and creates one list including the numbers 1 to that given value. It creates this list repeated for the given value, appending each list to one list. It returns the list of lists.\n    \"\"\"\n    ", "subset": "last_success", "original": "takes"}
{"__index_level_0__": 1036, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student5", "submitted_text": "the function fib(n) should take an int as a input and return a Boolean expression declaring wither the input only contains 1, 2, or 3", "prompt": "def fib(n):\n    \"\"\"\n    the function fib(n) should accept an int as a input and return a Boolean expression declaring wither the input only contains 1, 2, or 3\n    \"\"\"\n    ", "subset": "first_failure", "original": "take"}
{"__index_level_0__": 1038, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student5", "submitted_text": "the function fib(n) should take an input and return true if the input only contains 1, 2, or 3 and false if the input contains other numbers", "prompt": "def fib(n):\n    \"\"\"\n    the function fib(n) should accept an input and return true if the input only contains 1, 2, or 3 and false if the input contains other numbers\n    \"\"\"\n    ", "subset": "last_failure", "original": "take"}
{"__index_level_0__": 1060, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student37", "submitted_text": "Write a function which takes an integer and returns True if the integer is contained on the list of numbers in the fibonacci sequence and False if it is not", "prompt": "def fib(n):\n    \"\"\"\n    Write a function which accepts an integer and returns True if the integer is contained on the list of numbers in the fibonacci sequence and False if it is not\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 1061, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student37", "submitted_text": "Write a function which takes an integer and then uses a for loop to produce numbers in the fibonacci sequence stored in the variable x. At the end of each loop, if x equals the input integer, return True, if x is greater than the input integer, return False", "prompt": "def fib(n):\n    \"\"\"\n    Write a function which accepts an integer and then uses a for loop to produce numbers in the fibonacci sequence stored in the variable x. At the end of each loop, if x equals the input integer, return True, if x is greater than the input integer, return False\n    \"\"\"\n    ", "subset": "last_success", "original": "takes"}
{"__index_level_0__": 1122, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student7", "submitted_text": "Takes a string and a list of characters within that string. Characters found within the string are replaced with the wanted separating character ", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Accepts a string and a list of characters within that string. Characters found within the string are replaced with the wanted separating character\n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 1128, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student28", "submitted_text": "Write a code that takes three parameters. The first parameter is a string s. The second parameter are a list of characters included in the string. And the third parameter is a single character. The code should replace the characters in the string with the last parameter of the single character.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Write a code that accepts three parameters. The first parameter is a string s. The second parameter are a list of characters included in the string. And the third parameter is a single character. The code should replace the characters in the string with the last parameter of the single character.\n    \"\"\"\n    ", "subset": "first_success", "original": "takes"}
{"__index_level_0__": 1129, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student31", "submitted_text": "Takes a string, a list of strings with length 1, and a separate string with length one called the replacement. Then, for each string in the list of strings, replaces any instance of them in the first string with the replacement string. Then returns this modified string. ", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Accepts a string, a list of strings with length 1, and a separate string with length one called the replacement. Then, for each string in the list of strings, replaces any instance of them in the first string with the replacement string. Then returns this modified string. \n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 1131, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student45", "submitted_text": "Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and insert sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Accepts three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and insert sep.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 1133, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student45", "submitted_text": "Takes three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and replace the character from s at the index where we split with sep.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Accepts three inputs: a string which we will call s, a list of strings which we will call chars, and another string which we will call sep. At each point in s where a string from chars is present, we split s and replace the character from s at the index where we split with sep.\n    \"\"\"\n    ", "subset": "last_success", "original": "Takes"}
{"__index_level_0__": 1134, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student46", "submitted_text": "The function takes in first a string, second a list of characters and third a single character. It then replaces all instances of the characters within list of characters, with the single character in the string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    The function accepts first a string, second a list of characters and third a single character. It then replaces all instances of the characters within list of characters, with the single character in the string.\n    \"\"\"\n    ", "subset": "first_success", "original": "takes in"}
{"__index_level_0__": 1137, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student55", "submitted_text": "Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a comma and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Write a function that accepts a string, a collection of characthers, and a separator element. The function should get only the first string separated by a comma and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.\n    \"\"\"\n    ", "subset": "first_failure", "original": "gets"}
{"__index_level_0__": 1138, "problem": "multisplit", "entrypoint": "multisplit", "assertions": "assert multisplit(\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~') == 'a man~ wow~ the dog~ much hat~ much hair~'\nassert multisplit('celestial teas: a guide',[' ',':'],'!') == 'celestial!teas!!a!guide'\nassert multisplit('celestial teas: a guide',[],'!') == 'celestial teas: a guide'", "username": "student55", "submitted_text": "Write a function that gets a string, a collection of characthers, and a separator element. The function should get only the first string separated by a double quotes or simple quotes and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.", "prompt": "def multisplit(s,chars,sep):\n    \"\"\"\n    Write a function that accepts a string, a collection of characthers, and a separator element. The function should get only the first string separated by a double quotes or simple quotes and remove the rest of the input. After that, the string's quotes should be replaced by a simple quote. Moreover, the function should run through the string and replace every character from the second parameter of the function and replace by the third parameter from the function (separator element). If the second parameter is empty, just return the string.\n    \"\"\"\n    ", "subset": "last_success", "original": "gets"}
{"__index_level_0__": 1180, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student23", "submitted_text": "This function takes in a list of dictionaries that have the keys:  nominee, the wins, and noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success within each dictionary.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function accepts a list of dictionaries that have the keys:  nominee, the wins, and noms. A new attribute is given to each dictionary which is the success attribute. It is calculated by dividing wins by noms and creates a float. The lists are then sorted by the highest success within each dictionary.\n    \"\"\"\n    ", "subset": "last_failure", "original": "takes in"}
{"__index_level_0__": 1181, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student33", "submitted_text": "The function takes in a list of dictionaries. The function divides the integer in the third place in the dictionary by the integer in the fourth place in the dictionary, adding a new entry to that dictionary called \"success\" with the output value. It then sorts the dictionary entries by the value in \"success,\" highest to lowest. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function accepts a list of dictionaries. The function divides the integer in the third place in the dictionary by the integer in the fourth place in the dictionary, adding a new entry to that dictionary called \"success\" with the output value. It then sorts the dictionary entries by the value in \"success,\" highest to lowest. \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1183, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student33", "submitted_text": "The function takes in a list of dictionaries. The function divides the value for \"wins\" in the dictionary by the value for \"noms\" in the dictionary, adding a new entry to that dictionary called \"success\" with the output value truncated to two decimal places. It then sorts the dictionary entries by the value in \"success,\" highest to lowest, returning the dictionaries each on a separate line. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function accepts a list of dictionaries. The function divides the value for \"wins\" in the dictionary by the value for \"noms\" in the dictionary, adding a new entry to that dictionary called \"success\" with the output value truncated to two decimal places. It then sorts the dictionary entries by the value in \"success,\" highest to lowest, returning the dictionaries each on a separate line. \n    \"\"\"\n    ", "subset": "last_failure", "original": "takes in"}
{"__index_level_0__": 1196, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student59", "submitted_text": "takes a list of dictionaries as an input. returns an ordered list of the dictionaries in the input", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    accepts a list of dictionaries as an input. returns an ordered list of the dictionaries in the input\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 1199, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student60", "submitted_text": "This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function accepts a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1201, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student60", "submitted_text": "This function takes in a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions output is a single 2d list.\n\nAs an example. Given  [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}] as a parameter this function outputs [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function accepts a 2d list containing dictionaries at its parameter. In each dictionary is the nominee, the number of wins they have and the amount of nominations they have. As an example, [{'nominee': 'Jones', 'wins': 28, 'noms': 80}, {'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, {'nominee': 'Krauss',  'wins': 27, 'noms': 42}]. This function then returns this dictionary with an added parameter of an average of wins to nominations. This function rounds every decimal to 2 decimal places. This functions output is a single 2d list.\n\nAs an example. Given  [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}] as a parameter this function outputs [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\n    \"\"\"\n    ", "subset": "last_failure", "original": "takes in"}
{"__index_level_0__": 1202, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student63", "submitted_text": "The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms'. The outputted list will also be arranged in descending order based on the value of 'success'.", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function accepts a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms'. The outputted list will also be arranged in descending order based on the value of 'success'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1203, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student63", "submitted_text": "The function takes in a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms', rounded to the second decimal place. The outputted list will also be arranged in descending order based on the value of 'success'.  ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    The function accepts a list of dictionaries and outputs the same list of dictionaries with an additional key for each dictionary called 'success', for which the value is the result of dividing the value of the key 'wins' and the value of the key 'noms', rounded to the second decimal place. The outputted list will also be arranged in descending order based on the value of 'success'.  \n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 1211, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student75", "submitted_text": "def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', indent after each {}", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): accepts input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', indent after each {}\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 1217, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student75", "submitted_text": "def sortBySuccessRate(nominations): takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', ", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations): accepts input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]\nand prints output in order of least amount of 'wins', if the same prints based on least amount of 'noms', \n    \"\"\"\n    ", "subset": "last_failure", "original": "takes"}
{"__index_level_0__": 1218, "problem": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "assertions": "assert sortBySuccessRate([{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]) == [{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]\nassert sortBySuccessRate([{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]) == [{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]\nassert sortBySuccessRate([{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]) == [{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]", "username": "student76", "submitted_text": "takes the information in the dictionary and positions the different lists based on a new variable called 'success' which is inputted at the end and is the number of 'wins' divided by the number of 'noms'", "prompt": "def sortBySuccessRate(nominations):\n    \"\"\"\n    accepts the information in the dictionary and positions the different lists based on a new variable called 'success' which is inputted at the end and is the number of 'wins' divided by the number of 'noms'\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 1227, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student5", "submitted_text": "this function will take a list of flights and the origin city and return the possible layovers with the staring city. Each item in the list of flights will first state the origin city and then state the destination city. If there is a flight with a destination city the same as the same as a flight with the origin city then add it the the output list. ", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    this function will accept a list of flights and the origin city and return the possible layovers with the staring city. Each item in the list of flights will first state the origin city and then state the destination city. If there is a flight with a destination city the same as the same as a flight with the origin city then add it the the output list. \n    \"\"\"\n    ", "subset": "last_failure", "original": "take"}
{"__index_level_0__": 1235, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student22", "submitted_text": "takes in a list of dictionaries and outputs a list of values that can be made with two key value pair matches", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    accepts a list of dictionaries and outputs a list of values that can be made with two key value pair matches\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1236, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student22", "submitted_text": "takes in a list of dictionaries and a string, uses that string as the value for 'origin', finds a corresponding 'dest' and does that twice. if it can do it twice, output the corresponding 'dest', if not output an empty string\n", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    accepts a list of dictionaries and a string, uses that string as the value for 'origin', finds a corresponding 'dest' and does that twice. if it can do it twice, output the corresponding 'dest', if not output an empty string\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "takes in"}
{"__index_level_0__": 1245, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student19", "submitted_text": "Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is appended to an output list. After all small lists have been checked, it outputs the output list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Accepts an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is appended to an output list. After all small lists have been checked, it outputs the output list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 1246, "problem": "sort_physicists", "entrypoint": "sort_physicists", "assertions": "assert sort_physicists([[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]) == ['Peiris', 'Ghez', 'Strickland']\nassert sort_physicists([[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]) == ['Ghez']", "username": "student19", "submitted_text": "Takes an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is added to an output list. The corresponding number is also recorded. If the number for an item which is being added is less than the corresponding number for the first item in the output list, it is added to the beginning of the output list. Otherwise, it is added to the end. After all small lists have been checked, it outputs the output list.", "prompt": "def sort_physicists(scientists):\n    \"\"\"\n    Accepts an input list, which is comprised of smaller lists. Each of these smaller lists has three values: the first is a string, the second one is a number, and the third is a string. If the third item in any smaller list is equal to 'Physics', the first item in that smaller list is added to an output list. The corresponding number is also recorded. If the number for an item which is being added is less than the corresponding number for the first item in the output list, it is added to the beginning of the output list. Otherwise, it is added to the end. After all small lists have been checked, it outputs the output list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Takes"}
{"__index_level_0__": 1280, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student5", "submitted_text": "the function find_multiples will take the input of a starting number, a stopping number, and a factor. The function will start counting at the starting number and count up by the factor, stopping at the stopping number. ", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    the function find_multiples will accept the input of a starting number, a stopping number, and a factor. The function will start counting at the starting number and count up by the factor, stopping at the stopping number. \n    \"\"\"\n    ", "subset": "first_failure", "original": "take"}
{"__index_level_0__": 1281, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student5", "submitted_text": "the function find_multiples will take the input of a starting number, a stopping number, and a factor. The function will start counting at the starting number and count up by the factor, stopping at the stopping number but including it in the list. ", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    the function find_multiples will accept the input of a starting number, a stopping number, and a factor. The function will start counting at the starting number and count up by the factor, stopping at the stopping number but including it in the list. \n    \"\"\"\n    ", "subset": "last_success", "original": "take"}
{"__index_level_0__": 1295, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student22", "submitted_text": "take in a list of integers [start number, final number, step size] and output a list based on those parameters", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    accept a list of integers [start number, final number, step size] and output a list based on those parameters\n    \"\"\"\n    ", "subset": "first_failure", "original": "take in"}
{"__index_level_0__": 1298, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student22", "submitted_text": "take in a list of integers [start, stop, factor] and output a list starting at the closest even number to the start, and including the stop number", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    accept a list of integers [start, stop, factor] and output a list starting at the closest even number to the start, and including the stop number\n    \"\"\"\n    ", "subset": "last_success", "original": "take in"}
{"__index_level_0__": 1299, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student37", "submitted_text": "Write a function which takes three integers, start, stop, and factor, and checks each integer between start and stop inclusively and adds the number to the list Nums if the number is evenly divisible by factor", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    Write a function which accepts three integers, start, stop, and factor, and checks each integer between start and stop inclusively and adds the number to the list Nums if the number is evenly divisible by factor\n    \"\"\"\n    ", "subset": "first_success", "original": "takes"}
{"__index_level_0__": 1311, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student23", "submitted_text": "This function takes in a list of the item purchased, the amount of the item purchased, the price for each item, and the overall sales tax. The amount purchased is multiplied with the price for each item, creating a total amount. The sales tax is then multiplied by the outcome of the total amount, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function accepts a list of the item purchased, the amount of the item purchased, the price for each item, and the overall sales tax. The amount purchased is multiplied with the price for each item, creating a total amount. The sales tax is then multiplied by the outcome of the total amount, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.\n    \"\"\"\n    ", "subset": "last_failure", "original": "takes in"}
{"__index_level_0__": 1312, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student33", "submitted_text": "The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\"", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function accepts some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\"\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1313, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student33", "submitted_text": "The function takes in some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\", truncated to two decimal places.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function accepts some number of lists consisting of a string, an integer, and a number, as well as one additional number \"sales tax\". The function multiplies the integer and the number in each list and adds them together for all the lists, giving a \"total\". Then the function multiplies the \"total\" by the \"sales tax\" and outputs that value added to the \"total\", truncated to two decimal places.\n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 1321, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student50", "submitted_text": "Receive a list containing items in a grocery list. Each element in the list contains the name of the item, the quantity purchased, and the price of the item. Calculate the total price of each element in the list by multiplying the price by the quantity for each element. Add them up, and multiply the total by the sales tax.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Accept a list containing items in a grocery list. Each element in the list contains the name of the item, the quantity purchased, and the price of the item. Calculate the total price of each element in the list by multiplying the price by the quantity for each element. Add them up, and multiply the total by the sales tax.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Receive"}
{"__index_level_0__": 1322, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student50", "submitted_text": "Receive a list containing items in a grocery list. Each element in the list contains the name of the item, the quantity purchased, and the price of the item. Calculate the total price of each element in the list by multiplying the price by the quantity for each element. Add them up, and multiply the total by the sales tax. Round to the nearest hundredth", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Accept a list containing items in a grocery list. Each element in the list contains the name of the item, the quantity purchased, and the price of the item. Calculate the total price of each element in the list by multiplying the price by the quantity for each element. Add them up, and multiply the total by the sales tax. Round to the nearest hundredth\n    \"\"\"\n    ", "subset": "last_success", "original": "Receive"}
{"__index_level_0__": 1323, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student59", "submitted_text": "takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an integer that is the sales tax times the sum of all goods' quantity*price", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    accepts a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an integer that is the sales tax times the sum of all goods' quantity*price\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 1326, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student59", "submitted_text": "takes a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an float that is the sales tax times times the sum of all goods' quantity*price", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    accepts a list of groceries and a value for sales tax. the list of groceries contains a list for every item. each item's list contains its name, quantity, and price, in that order. returns an float that is the sales tax times times the sum of all goods' quantity*price\n    \"\"\"\n    ", "subset": "last_failure", "original": "takes"}
{"__index_level_0__": 1327, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student60", "submitted_text": "This function takes in a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. ", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function accepts a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1328, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student60", "submitted_text": "This function takes in a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. This function rounds to 2 decimal points", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function accepts a 2d list and a double as its parameters. The 2d list is given like [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then calculates the sales_tax of the items returns it. This function rounds to 2 decimal points\n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 1329, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student63", "submitted_text": "The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by the inputted number. That result is outputted.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function accepts a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by the inputted number. That result is outputted.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1331, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student63", "submitted_text": "The function takes in a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by 1 plus the inputted number. That result, rounded to two decimal places, is outputted.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function accepts a list of lists and a number. For every list in the list, the function multiplies the second value by the third value, sums all of the products of each list, and multiplies that value by 1 plus the inputted number. That result, rounded to two decimal places, is outputted.\n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 1340, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student75", "submitted_text": "def total_bill(grocery_list, sales_tax): takes input \n[['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07\nand adds val 1 and 2 together, then 4 and 5, then 7 and 8, the three new vals are added to val 9 and it outputs the sum\n", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    def total_bill(grocery_list, sales_tax): accepts input \n[['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07\nand adds val 1 and 2 together, then 4 and 5, then 7 and 8, the three new vals are added to val 9 and it outputs the sum\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 1341, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student75", "submitted_text": "def total_bill(grocery_list, sales_tax): takes input \n[['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07\nand adds val 1 and 2 together, then 4 and 5, then 7 and 8, the three new vals are added to val 9 and it outputs the sum with four digits\n", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    def total_bill(grocery_list, sales_tax): accepts input \n[['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07\nand adds val 1 and 2 together, then 4 and 5, then 7 and 8, the three new vals are added to val 9 and it outputs the sum with four digits\n\n    \"\"\"\n    ", "subset": "last_success", "original": "takes"}
{"__index_level_0__": 1346, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student23", "submitted_text": "This function takes in a dictionary of words, translating the English words into a different language. THe function then takes in a sentence and uses the dictionary to replace the English words with the translated word from a different language. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    This function accepts a dictionary of words, translating the English words into a different language. THe function then accepts a sentence and uses the dictionary to replace the English words with the translated word from a different language. \n    \"\"\"\n    ", "subset": "last_failure", "original": "takes in"}
{"__index_level_0__": 1347, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student33", "submitted_text": "The function takes an input of a dictionary and a string of text. For each word in the string, the function finds the word in the dictionary and replaces it with the corresponding dictionary entry. If the word is not found in the dictionary, it is replaced with \"UNK.\"", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    The function accepts an input of a dictionary and a string of text. For each word in the string, the function finds the word in the dictionary and replaces it with the corresponding dictionary entry. If the word is not found in the dictionary, it is replaced with \"UNK.\"\n    \"\"\"\n    ", "subset": "first_success", "original": "takes"}
{"__index_level_0__": 1353, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student59", "submitted_text": "takes a dictionary and a string as inputs. returns a translated version of the inputted string", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    accepts a dictionary and a string as inputs. returns a translated version of the inputted string\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 1354, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student59", "submitted_text": "takes a dictionary and a string as inputs. returns a translated version of the inputted string. if a word in the inputted string is not in the inputted dictionary, the translated version of that word is 'UNK'", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    accepts a dictionary and a string as inputs. returns a translated version of the inputted string. if a word in the inputted string is not in the inputted dictionary, the translated version of that word is 'UNK'\n    \"\"\"\n    ", "subset": "last_success", "original": "takes"}
{"__index_level_0__": 1355, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student60", "submitted_text": "This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then prints the string in french. If a word in the function is not in the dictionary, the function prints 'UNK' for that word. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    This function accepts a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then prints the string in french. If a word in the function is not in the dictionary, the function prints 'UNK' for that word. \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1358, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student60", "submitted_text": "This function takes in a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then returns the string in french. If a word in the function is not in the dictionary, the function returns 'UNK' for that word. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    This function accepts a dictionary and a string as parameters. The dictionary contains the translation of given english words. The function then returns the string in french. If a word in the function is not in the dictionary, the function returns 'UNK' for that word. \n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 1359, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student63", "submitted_text": "The function takes in a dictionary and a string for which each word in the string is a key in the dictionary. It outputs a string that substitutes the original word for the dictionary value associated with that key. If a word in the original string is not found in the dictionary, the substituted word will be 'UNK'.", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    The function accepts a dictionary and a string for which each word in the string is a key in the dictionary. It outputs a string that substitutes the original word for the dictionary value associated with that key. If a word in the original string is not found in the dictionary, the substituted word will be 'UNK'.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1365, "problem": "translate", "entrypoint": "translate", "assertions": "assert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\") == 'je aime mes trois chats'\nassert translate({\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\") == 'je aime mes trois UNK'\nassert translate({\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\") == 'UNK UNK UNK UNK'", "username": "student71", "submitted_text": "Takes in a given dictionary in which keys are English words and values are French translations and English sentence. Output is the French translation of the English sentence. ", "prompt": "def translate(lexicon,sentence):\n    \"\"\"\n    Accepts a given dictionary in which keys are English words and values are French translations and English sentence. Output is the French translation of the English sentence. \n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes in"}
{"__index_level_0__": 1423, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student31", "submitted_text": "Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Returns a list of the names whose corresponding scores were the highest, and were a minimum of 80.", "prompt": "def topScores(lst):\n    \"\"\"\n    Accepts a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Returns a list of the names whose corresponding scores were the highest, and were a minimum of 80.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 1426, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student31", "submitted_text": "Takes a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Sorts this list from highest integer score to lowest, and returns a list of the names whose corresponding scores were a minimum of 80, with a maximum list length of 5.", "prompt": "def topScores(lst):\n    \"\"\"\n    Accepts a list containing multiple internal lists, with each internal list containing two items: an integer score and a string name. Sorts this list from highest integer score to lowest, and returns a list of the names whose corresponding scores were a minimum of 80, with a maximum list length of 5.\n    \"\"\"\n    ", "subset": "last_success", "original": "Takes"}
{"__index_level_0__": 1429, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student45", "submitted_text": "Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list to a new list of lists called newLst. Then sort newLst and remove all but the three lists with the highest values at index 0.", "prompt": "def topScores(lst):\n    \"\"\"\n    Accepts a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list to a new list of lists called newLst. Then sort newLst and remove all but the three lists with the highest values at index 0.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Takes"}
{"__index_level_0__": 1436, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student45", "submitted_text": "Takes a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. Output finalLst.", "prompt": "def topScores(lst):\n    \"\"\"\n    Accepts a list of lists, which we will call lst. For each list in lst, if the value at index 0 is greater than or equal to 80, add the list at index 1 to a new list of lists called newLst. Then sort newLst from highest to lowest. If there are more than five lists in newLst, remove any lists after the five lists with the highest values at index 0. Then make a new list called finalLst. For each list in newLst, add the value at index 1 to finalLst. Output finalLst.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Takes"}
{"__index_level_0__": 1437, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student46", "submitted_text": "The function takes in a list of two item lists, where the first item is an integer and the second is a string. Eliminate any lists that integers are below 80, then order up to the largest five integers and output the strings associated with them.", "prompt": "def topScores(lst):\n    \"\"\"\n    The function accepts a list of two item lists, where the first item is an integer and the second is a string. Eliminate any lists that integers are below 80, then order up to the largest five integers and output the strings associated with them.\n    \"\"\"\n    ", "subset": "first_success", "original": "takes in"}
{"__index_level_0__": 1451, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student55", "submitted_text": "Write a function that gets a list of lists of grades and names of students, and returns the name from the highest grade to the lowest, if only the grades are higher than 80.", "prompt": "def topScores(lst):\n    \"\"\"\n    Write a function that accepts a list of lists of grades and names of students, and returns the name from the highest grade to the lowest, if only the grades are higher than 80.\n    \"\"\"\n    ", "subset": "first_failure", "original": "gets"}
{"__index_level_0__": 1467, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student23", "submitted_text": "This function inputs two lists. The letter that comes first within the alphabet in the first list adds on the lowest number of the second list and then the letters in the alphabet. This keeps going and forms a new list with all the combined letters and numbers. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function accepts two lists. The letter that comes first within the alphabet in the first list adds on the lowest number of the second list and then the letters in the alphabet. This keeps going and forms a new list with all the combined letters and numbers. \n    \"\"\"\n    ", "subset": "last_failure", "original": "inputs"}
{"__index_level_0__": 1468, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student33", "submitted_text": "The function takes a series of input strings and another series of input strings, and then splices each string from the first series with each string from the second series", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function accepts a series of input strings and another series of input strings, and then splices each string from the first series with each string from the second series\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 1469, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student33", "submitted_text": "The function takes a series of input strings \"suits\" and another series of input strings \"vals\". It sorts each series first into alphabetical order followed by in order of increasing numerical value. Then it splices each string from the first series with each string from the second series", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function accepts a series of input strings \"suits\" and another series of input strings \"vals\". It sorts each series first into alphabetical order followed by in order of increasing numerical value. Then it splices each string from the first series with each string from the second series\n    \"\"\"\n    ", "subset": "last_success", "original": "takes"}
{"__index_level_0__": 1488, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student59", "submitted_text": "takes a list of suits and a list of values as inputs. returns a list of all possible combinations of suits and values.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    accepts a list of suits and a list of values as inputs. returns a list of all possible combinations of suits and values.\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 1492, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student59", "submitted_text": "takes a list of suits and a list of values as inputs. returns an ordered list of all possible combinations of suits and values", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    accepts a list of suits and a list of values as inputs. returns an ordered list of all possible combinations of suits and values\n    \"\"\"\n    ", "subset": "last_failure", "original": "takes"}
{"__index_level_0__": 1493, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student60", "submitted_text": "This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function accepts suits and vals as a list as its parameters. This function prints out every combination of these parameters. \n    \"\"\"\n    ", "subset": "first_failure", "original": "inputs"}
{"__index_level_0__": 1498, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student60", "submitted_text": "This function inputs suits and vals as a list as its parameters. This function prints out every combination of these parameters sorted alphabetically. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    This function accepts suits and vals as a list as its parameters. This function prints out every combination of these parameters sorted alphabetically. As an example. If you input ['H', 'D'] as suits and ['6', 'Q', 'J', '2'] as vals, the function prints\n['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']. \n    \"\"\"\n    ", "subset": "last_success", "original": "inputs"}
{"__index_level_0__": 1499, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student63", "submitted_text": "The function takes in multiple lists made up of single characters and outputs one list in which all the entries are two characters strings made up of the combination of each character from each original list. ", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function accepts multiple lists made up of single characters and outputs one list in which all the entries are two character strings made up of the combination of each character from each original list. \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1500, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student63", "submitted_text": "The function takes in multiple lists made up of single characters and outputs one list in which all the entries are two characters strings made up of the combination of each character from each original list. The resulting list will be arranged in alphabetical order based on the letters of each string.", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    The function accepts multiple lists made up of single characters and outputs one list in which all the entries are two character strings made up of the combination of each character from each original list. The resulting list will be arranged in alphabetical order based on the letters of each string.\n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 1534, "problem": "generateCardDeck", "entrypoint": "generateCardDeck", "assertions": "assert generateCardDeck(['S', 'H', 'D'], ['1', '2', 'A']) == ['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']\nassert generateCardDeck(['H', 'D'], ['6', 'Q', 'J', '2']) == ['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']\nassert generateCardDeck(['H'], ['2']) == ['H2']", "username": "student75", "submitted_text": "def generateCardDeck(suits, vals): brings in the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], Card then reverses the order of suit[] making the variables print in the opposite order starting with ['D'], this program then outputs and combination of the suit [] and val []\ndef generateCardDeck(suits, vals): brings in the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], Card then reverses the order of val[] making the variables print in the opposite order starting with ['2'], this program then outputs and combination of the opposite order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): brings in the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].", "prompt": "def generateCardDeck(suits, vals):\n    \"\"\"\n    def generateCardDeck(suits, vals): accepts the information: ['S', 'H', 'D'], ['1', '2', 'A'] and defines Card=[], Card then reverses the order of suit[] making the variable print in the opposite order starting with ['D'], this program then outputs and combination of the suit [] and val []\ndef generateCardDeck(suits, vals): accepts the information: ['H', 'D'], ['6', 'Q', 'J', '2'] and defines Card=[], Card then reverses the order of val[] making the variables print in the opposite order starting with ['2'], this program then outputs and combination of the opposite order of the suit [] and the val [].\ndef generateCardDeck(suits, vals): accepts the information:['H'], ['2'] and defines Card=[], this program then outputs and combination of both the suit [] and the val [].\n    \"\"\"\n    ", "subset": "last_failure", "original": "brings in"}
{"__index_level_0__": 1542, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student1", "submitted_text": "takes a list of words, reverses each word in the list, and alphabetically orders those new words.", "prompt": "def reverseWords(words):\n    \"\"\"\n    accepts a list of words, reverses each word in the list, and alphabetically orders those new words.\n    \"\"\"\n    ", "subset": "last_success", "original": "takes"}
{"__index_level_0__": 1562, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student31", "submitted_text": "Takes a list of strings, and then individually reverses the order of the characters in each string. Then, sorts the list alphabetically. Then, returns this modified list. ", "prompt": "def reverseWords(words):\n    \"\"\"\n    Accepts a list of strings, and then individually reverses the order of the characters in each string. Then, sorts the list alphabetically. Then, returns this modified list. \n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 1568, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student45", "submitted_text": "Takes a list of strings, which we will call words. Make a new list of strings, which we will call reverse. For each string in words, add a string to reverse that contains the same characters in backwards order. Then sort reverse. Output is reverse.", "prompt": "def reverseWords(words):\n    \"\"\"\n    Accepts a list of strings, which we will call words. Make a new list of strings, which we will call reverse. For each string in words, add a string to reverse that contains the same characters in backwards order. Then sort reverse. Output is reverse.\n    \"\"\"\n    ", "subset": "last_success", "original": "Takes"}
{"__index_level_0__": 1571, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student46", "submitted_text": "The function takes in a list of strings it will make all the character within the strings reverse. Then it will sort the list alphabetically by the last character in each string", "prompt": "def reverseWords(words):\n    \"\"\"\n    The function accepts a list of strings it will make all the character within the strings reverse. Then it will sort the list alphabetically by the last character in each string\n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 1575, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student55", "submitted_text": "Write a function that gets strings from a list. Reverse all the strings and returns the reversed string in a list.", "prompt": "def reverseWords(words):\n    \"\"\"\n    Write a function that accepts strings from a list. Reverse all the strings and returns the reversed string in a list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "gets"}
{"__index_level_0__": 1576, "problem": "reverseWords", "entrypoint": "reverseWords", "assertions": "assert reverseWords(['eat', 'tree']) == ['eert', 'tae']\nassert reverseWords(['ax', 'by', 'chaz']) == ['xa', 'yb', 'zahc']\nassert reverseWords(['by', 'chaz', 'ax']) == ['xa', 'yb', 'zahc']", "username": "student55", "submitted_text": "Write a function that gets strings from a list. Reverse all the strings and returns the reversed string in a list. The order of the strings in the return statement should be in alphabetical order from the input.", "prompt": "def reverseWords(words):\n    \"\"\"\n    Write a function that accepts strings from a list. Reverse all the strings and returns the reversed string in a list. The order of the strings in the return statement should be in alphabetical order from the input.\n    \"\"\"\n    ", "subset": "last_success", "original": "gets"}
{"__index_level_0__": 1584, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student0", "submitted_text": "takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of integer of num times 100 divided by the length of the first list and concatenate a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    accepts two lists. If the lists have the same value at the same index, add one to a num variable. return the string of integer of num times 100 divided by the length of the first list and concatenate a percent sign.\n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 1618, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student30", "submitted_text": "Take in array A. Iterate through array A, and record the proportion of numbers in it versus letters.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Accept array A. Iterate through array A, and record the proportion of numbers in it versus letters.\n    \"\"\"\n    ", "subset": "first_failure", "original": "Take in"}
{"__index_level_0__": 1620, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student30", "submitted_text": "Take in array A. Create variable X equal to 0. Iterate through array A. When a character is present in Array A, add 1 to Y. Return Y divided by the size of the array, rounded to the nearest percent.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    Accept array A. Create variable X equal to 0. Iterate through array A. When a character is present in Array A, add 1 to Y. Return Y divided by the size of the array, rounded to the nearest percent.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Take in"}
{"__index_level_0__": 1631, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student5", "submitted_text": "the function correctNumberofPlayers will take the input teams and return true if all teams listed have five players and false if they do not. teams is a list with names of players. ", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    the function correctNumberofPlayers will accept the input teams and return true if all teams listed have five players and false if they do not. teams is a list with names of players. \n    \"\"\"\n    ", "subset": "first_success", "original": "take"}
{"__index_level_0__": 1636, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student22", "submitted_text": "takes in a list of lists and returns a boleean based on if the number of elements in the list are the same ", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    accepts a list of lists and returns a boleean based on if the number of elements in the list are the same \n    \"\"\"\n    ", "subset": "first_failure", "original": "takes in"}
{"__index_level_0__": 1637, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student22", "submitted_text": "takes in a list of lists and checks to see if each list is the same length", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    accepts a list of lists and checks to see if each list is the same length\n    \"\"\"\n    ", "subset": "last_success", "original": "takes in"}
{"__index_level_0__": 1638, "problem": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "assertions": "assert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]) == True\nassert correctNumberofPlayers([['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]) == False\nassert correctNumberofPlayers([['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]) == True", "username": "student37", "submitted_text": "Write a function which takes a list of lists of strings and checks returns True if the length of each internal list is 5 and False if this is not true for each list", "prompt": "def correctNumberofPlayers(teams):\n    \"\"\"\n    Write a function which accepts a list of lists of strings and checks returns True if the length of each internal list is 5 and False if this is not true for each list\n    \"\"\"\n    ", "subset": "first_success", "original": "takes"}
{"__index_level_0__": 1647, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student7", "submitted_text": "Takes the list and raises each item to the power of the given value", "prompt": "def exp(lst, val):\n    \"\"\"\n    Accepts the list and raises each item to the power of the given value\n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 1656, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student28", "submitted_text": "Write a code that takes in two parameters, The first parameter is 1st is a list of integers. And the second parameter is val which is a value that represents a power. For each integer in 1st val will take the power of that value.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Write a code that accepts two parameters, The first parameter is 1st is a list of integers. And the second parameter is val which is a value that represents a power. For each integer in 1st val will take the power of that value.\n    \"\"\"\n    ", "subset": "first_success", "original": "takes in"}
{"__index_level_0__": 1657, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student31", "submitted_text": "Takes a list of integers and a separate single integer, creates a new list and adds each integer from the original to it after raising them to the power of the separate, second integer argument. Then, returns this new list.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Accepts a list of integers and a separate single integer, creates a new list and adds each integer from the original to it after raising them to the power of the separate, second integer argument. Then, returns this new list.\n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 1660, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student45", "submitted_text": "Takes a list of integers, which we will call lst, and an integer, which we will call val. Returns a new list containing each value of lst raised to the power of val.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Accepts a list of integers, which we will call lst, and an integer, which we will call val. Returns a new list containing each value of lst raised to the power of val.\n    \"\"\"\n    ", "subset": "first_success", "original": "Takes"}
{"__index_level_0__": 1661, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student46", "submitted_text": "A function that takes in a list of multiple integers and one other integer on the outside, then has all the integers within the list be put to the power of whatever number was outside the list.", "prompt": "def exp(lst, val):\n    \"\"\"\n    A function that accepts a list of multiple integers and one other integer on the outside, then has all the integers within the list be put to the power of whatever number was outside the list.\n    \"\"\"\n    ", "subset": "first_success", "original": "takes in"}
{"__index_level_0__": 1665, "problem": "exp", "entrypoint": "exp", "assertions": "assert exp([1, 2, 3], 1) == [1,2,3]\nassert exp([2,2,2], 3) == [8,8,8]\nassert exp([2], 2) == [4]", "username": "student55", "submitted_text": "Write a function that gets a list of numbers and an integer separated by a comma.\nThe list of numbers should be the base and the integer should the the exponent. Compute all the elements from the list and returns the lists of the results.", "prompt": "def exp(lst, val):\n    \"\"\"\n    Write a function that accepts a list of numbers and an integer separated by a comma.\nThe list of numbers should be the base and the integer should the the exponent. Compute all the elements from the list and returns the lists of the results.\n    \"\"\"\n    ", "subset": "first_success", "original": "gets"}
{"__index_level_0__": 1695, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student5", "submitted_text": "the function laugh will take the input of an int and should output a string with the ha as many times as the input but also the number of a's is based on the number it is currently working with\n", "prompt": "def laugh(size):\n    \"\"\"\n    the function laugh will accept the input of an int and should output a string with the ha as many times as the input but also the number of a's is based on the number it is currently working with\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "take"}
{"__index_level_0__": 1698, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student5", "submitted_text": "the function laugh will take the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of \"ha\"s left to produce. and add a space in between the ha's but not at the very end. \n\n", "prompt": "def laugh(size):\n    \"\"\"\n    the function laugh will accept the input of an int and should output a string with \"ha\" as many times as the input int. However each respective \"ha\" has as many a's as the current number of \"ha\"s left to produce. and add a space in between the ha's but not at the very end. \n\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "take"}
{"__index_level_0__": 1725, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student22", "submitted_text": "take in a number and write the word 'ha' but with as many 'a's as the number", "prompt": "def laugh(size):\n    \"\"\"\n    accept a number and write the word 'ha' but with as many 'a's as the number\n    \"\"\"\n    ", "subset": "first_failure", "original": "take in"}
{"__index_level_0__": 1731, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student22", "submitted_text": "take in an integer and write a decreasing amount of 'a's next to an 'h'", "prompt": "def laugh(size):\n    \"\"\"\n    accept an integer and write a decreasing amount of 'a's next to an 'h'\n    \"\"\"\n    ", "subset": "last_failure", "original": "take in"}
{"__index_level_0__": 1732, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student37", "submitted_text": "Write a function which takes an integer size as an input, and uses a for loop to print an h followed by size a's and then a space, and then an h followed by size-1 a's and then a space, etc. until it prints a h followed by one a", "prompt": "def laugh(size):\n    \"\"\"\n    Write a function which accepts an integer size as an input, and uses a for loop to print an h followed by size a's and then a space, and then an h followed by size-1 a's and then a space, etc. until it prints a h followed by one a\n    \"\"\"\n    ", "subset": "first_failure", "original": "takes"}
{"__index_level_0__": 1738, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student37", "submitted_text": "Write a function which takes an integer size as an input, creates an empty string called laugh, and the uses a for loop to append an h followed by i number a's for each 0<i<=size starting with i = size, append a space before each h except the first h in the string", "prompt": "def laugh(size):\n    \"\"\"\n    Write a function which accepts an integer size as an input, creates an empty string called laugh, and the uses a for loop to append an h followed by i number a's for each 0<i<=size starting with i = size, append a space before each h except the first h in the string\n    \"\"\"\n    ", "subset": "last_success", "original": "takes"}
