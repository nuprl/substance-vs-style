{"__index_level_0__": 256, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student27", "submitted_text": "Convert the input into integers and check if it is a prime number.", "prompt": "def check_prime(num):\n    \"\"\"\n    Typecast the input into integers and check if it is a prime number.\n    \"\"\"\n    ", "subset": "first_success", "original": "Convert"}
{"__index_level_0__": 113, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student78", "submitted_text": "given a list, convert each item in the list to an integer. subract the second integer from the first and then with that total, add the next integer. with that total subtract the next integer. repeat this until all integers in the list have been either added or subtracted and output the final total. if the list is blank, output 0.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    given a list, typecast each item in the list to an integer. subract the second integer from the first and then with that total, add the next integer. with that total subtract the next integer. repeat this until all integers in the list have been either added or subtracted and output the final total. if the list is blank, output 0.\n    \"\"\"\n    ", "subset": "first_success", "original": "convert"}
{"__index_level_0__": 289, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student78", "submitted_text": "given a sting, convert it to an int. divide the number by each number counting up starting at 2. if the output is another int and is not the same number as the original int, output False. If the output is the same as the original int output True.", "prompt": "def check_prime(num):\n    \"\"\"\n    given a sting, typecast it to an int. divide the number by each number counting up starting at 2. if the output is another int and is not the same number as the original int, output False. If the output is the same as the original int output True.\n    \"\"\"\n    ", "subset": "first_success", "original": "convert"}
{"__index_level_0__": 749, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student78", "submitted_text": "given a list of strings, split each string by \\. for each new string, if it starts with t, eliminate the t. next find the sting that contains a number, convert it to a float, and add it to running total. output this total", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings, split each string by \\. for each new string, if it starts with t, eliminate the t. next find the sting that contains a number, typecast it to a float, and add it to running total. output this total\n    \"\"\"\n    ", "subset": "last_failure", "original": "convert"}
{"__index_level_0__": 5, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student6", "submitted_text": "Input: list of strings. Function checks each item in the list to check if it is a number character. If it is a number, convert it to an integer and it adds it to a new list. If it is not a number integer it ignores it. Outputs the sum of each ingter in the new list. If the original list contains no integers, return 0", "prompt": "def add_up(arr):\n    \"\"\"\n    Input: list of strings. Function checks each item in the list to check if it is a number character. If it is a number, typecast it to an integer and it adds it to a new list. If it is not a number integer it ignores it. Outputs the sum of each ingter in the new list. If the original list contains no integers, return 0\n    \"\"\"\n    ", "subset": "last_failure", "original": "convert"}
{"__index_level_0__": 31, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student15", "submitted_text": "For each variable in the list, if the variable can be casted to a float, adds the variable to a separate list. Adds the number in this list together and returns the number. If there are no numbers, returns 0.", "prompt": "def add_up(arr):\n    \"\"\"\n    For each variable in the list, if the variable can be typecasted to a float, adds the variable to a separate list. Adds the number in this list together and returns the number. If there are no numbers, returns 0.\n    \"\"\"\n    ", "subset": "last_failure", "original": "casted"}
{"__index_level_0__": 35, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student31", "submitted_text": "Takes a list with another internal list. Creates a new float variable and sets it to zero, and then converts each item in the internal list to a float in any way possible and adds them to the float variable. Then, returns that float variable.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes a list with another internal list. Creates a new float variable and sets it to zero, and then typecasts each item in the internal list to a float in any way possible and adds them to the float variable. Then, returns that float variable.\n    \"\"\"\n    ", "subset": "first_failure", "original": "converts"}
{"__index_level_0__": 37, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student31", "submitted_text": "Takes a list with a list inside. Then, creates a new list and for every item in the input list, takes each element inside that item and adds it to a new list called trueList. Creates a new float variable and sets it to zero, and then converts each item in trueList to a float in any way possible and adds them to the float variable. Then, returns that float variable.", "prompt": "def add_up(arr):\n    \"\"\"\n    Takes a list with a list inside. Then, creates a new list and for every item in the input list, takes each element inside that item and adds it to a new list called trueList. Creates a new float variable and sets it to zero, and then typecasts each item in trueList to a float in any way possible and adds them to the float variable. Then, returns that float variable.\n    \"\"\"\n    ", "subset": "last_failure", "original": "converts"}
{"__index_level_0__": 77, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student27", "submitted_text": "The input will be a list of strings. Return 0 if the list is empty. Otherwise, convert the strings into integers, then subtract the sum of all the integers with odd positions from the sum of all the integers with even positions. ", "prompt": "def subtract_add(lst):\n    \"\"\"\n    The input will be a list of strings. Return 0 if the list is empty. Otherwise, typecast the strings into integers, then subtract the sum of all the integers with odd positions from the sum of all the integers with even positions. \n    \"\"\"\n    ", "subset": "last_success", "original": "convert"}
{"__index_level_0__": 78, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student29", "submitted_text": "For each list entry, convert the input to an integer. Multiply list entries that correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    For each list entry, typecast the input to an integer. Multiply list entries that correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.\n    \"\"\"\n    ", "subset": "first_failure", "original": "convert"}
{"__index_level_0__": 80, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student29", "submitted_text": "For each list entry, convert the input to an integer. Multiply list entries that don't correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    For each list entry, typecast the input to an integer. Multiply list entries that don't correspond to an even index by -1. Then add all of the list entries together and return their sum. If the list is empty, return 0.\n    \"\"\"\n    ", "subset": "last_success", "original": "convert"}
{"__index_level_0__": 84, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student32", "submitted_text": "Turns all the elements in lst into integers, then finds the sum of all the elements in the list excluding the last one. Then it subtracts the last element from the sum.\n\nIf the list is empty, it returns 0", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Typecasts all the elements in lst into integers, then finds the sum of all the elements in the list excluding the last one. Then it subtracts the last element from the sum.\n\nIf the list is empty, it returns 0\n    \"\"\"\n    ", "subset": "last_failure", "original": "Turns"}
{"__index_level_0__": 87, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student49", "submitted_text": "Given a list of strings, type cast to integers and then take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Given a list of strings, typecast to integers and then take the first number in the list and alternate between subtracting and adding the next numbers in the list. If the list is empty return 0. Otherwise return the expected output\n    \"\"\"\n    ", "subset": "last_success", "original": "type cast"}
{"__index_level_0__": 94, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student62", "submitted_text": "turn each element into int, add first element to count. if index of element is odd when int, subtract from count. if index of element is even when int, add to count.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    typecast each element into int, add first element to count. if index of element is odd when int, subtract from count. if index of element is even when int, add to count.\n    \"\"\"\n    ", "subset": "last_failure", "original": "turn"}
{"__index_level_0__": 100, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student66", "submitted_text": "Change the first two items into integers Subtract the second item in the array list from the first item. change the third and forth items into integers then subtract the forth item from the third item then add the two sums. if there are just two items in list change those two items into integers subtract the second one from the first one and return the product. if there are no items then return zero", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Typecast the first two items into integers Subtract the second items in the array list from the first item. typecast the third and forth items into integers then subtract the forth item from the third item then add the two sums. if there are just two items in list typecast those two items into integers subtract the second one from the first one and return the product. if there are no items then return zero\n    \"\"\"\n    ", "subset": "last_success", "original": "change"}
{"__index_level_0__": 103, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student67", "submitted_text": "Converts all items to integer. Subtracts the second number from the first one, stores that value. Then adds that value to the next number, etc. Returns the final value.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Typecasts all items to integer. Subtracts the second number from the first one, stores that value. Then adds that value to the next number, etc. Returns the final value.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Converts"}
{"__index_level_0__": 104, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student68", "submitted_text": "given an array of characters containing integers, convert the characters into integers. Starting from the front of the array, subtract the first two numbers and store that in a count variable. then add the next number to the count. alternate between subtracting and adding until you get to the end of the array. return the count\n", "prompt": "def subtract_add(lst):\n    \"\"\"\n    given an array of characters containing integers, typecast the characters into integers. Starting from the front of the array, subtract the first two numbers and store that in a count variable. then add the next number to the count. alternate between subtracting and adding until you get to the end of the array. return the count\n\n    \"\"\"\n    ", "subset": "first_failure", "original": "convert"}
{"__index_level_0__": 107, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student68", "submitted_text": "Given an array of characters containing integers, convert the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count. If the given array is empty, return 0. \n", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Given an array of characters containing integers, typecast the characters into integers. Store the first number in the array in a count variable. then subtract the next number from the count. With the next number, add it to the count and then alternate between subtracting and adding until you get to the end of the array. return the count. If the given array is empty, return 0. \n\n    \"\"\"\n    ", "subset": "last_success", "original": "convert"}
{"__index_level_0__": 112, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student70", "submitted_text": "Create a variable for the result. Treat all elements as integers. If the list contains 0 elements, return 0. If the list contains 1 element, return that element. If the list contains 2 or more elements: subtract the second element from the first and save the result, then add the third element to that result, and continue on alternating subtraction and addition until the end of the list.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    Create a variable for the result. Typecast all elements as integers. If the list contains 0 elements, return 0. If the list contains 1 element, return that element. If the list contains 2 or more elements: subtract the second element from the first and save the result, then add the third element to that result, and continue on alternating subtraction and addition until the end of the list.\n    \"\"\"\n    ", "subset": "last_failure", "original": "Treat"}
{"__index_level_0__": 259, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student29", "submitted_text": "Convert the input to an integer. Then check if the integer is a prime number and return \"True\" if it is prime and \"False\" if it's not", "prompt": "def check_prime(num):\n    \"\"\"\n    Typecast the input to an integer. Then check if the integer is a prime number and return \"True\" if it is prime and \"False\" if it's not\n    \"\"\"\n    ", "subset": "last_success", "original": "Convert"}
{"__index_level_0__": 262, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student32", "submitted_text": "Turns num into int. Return a bool indicating if num is a prime number.", "prompt": "def check_prime(num):\n    \"\"\"\n    Typecasts num into int. Return a bool indicating if num is a prime number.\n    \"\"\"\n    ", "subset": "last_success", "original": "Turns"}
{"__index_level_0__": 267, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student49", "submitted_text": "typecast num as an integer, if num is only divisible by itself and 1, return True otherwise return False", "prompt": "def check_prime(num):\n    \"\"\"\n    typecast num as an integer, if num is only divisible by itself and 1, return True otherwise return False\n    \"\"\"\n    ", "subset": "last_success", "original": "typecast"}
{"__index_level_0__": 268, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student56", "submitted_text": "changes the string into an integer and checks if the integers are a prime number, if they are then 'True' is returned, if they are not then 'False' is returned", "prompt": "def check_prime(num):\n    \"\"\"\n    typecasts the string into an integer and checks if the integers are a prime number, if they are then 'True' is returned, if they are not then 'False' is returned\n    \"\"\"\n    ", "subset": "first_success", "original": "changes"}
{"__index_level_0__": 269, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student62", "submitted_text": "change input to integer. if prime number, return True, if not a prime number, return False", "prompt": "def check_prime(num):\n    \"\"\"\n    typecast input to integer. if prime number, return True, if not a prime number, return False\n    \"\"\"\n    ", "subset": "first_success", "original": "change"}
{"__index_level_0__": 275, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student66", "submitted_text": "change the input into an integer if the number is not divisible buy 4 or 3 return true else return false", "prompt": "def check_prime(num):\n    \"\"\"\n    typecast the input into an integer if the number is not divisible buy 4 or 3 return true else return false\n    \"\"\"\n    ", "subset": "last_success", "original": "change"}
{"__index_level_0__": 277, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student67", "submitted_text": "Converts input into an integer. Returns 'True' if input is a prime number.", "prompt": "def check_prime(num):\n    \"\"\"\n    Typecasts input into an integer. Returns 'True' if input is a prime number.\n    \"\"\"\n    ", "subset": "last_success", "original": "Converts"}
{"__index_level_0__": 278, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student68", "submitted_text": "given a string, convert into an integer and return true if it's a prime number. if not, return false", "prompt": "def check_prime(num):\n    \"\"\"\n    given a string, typecast into an integer and return true if it's a prime number. if not, return false\n    \"\"\"\n    ", "subset": "first_failure", "original": "convert"}
{"__index_level_0__": 283, "problem": "check_prime", "entrypoint": "check_prime", "assertions": "assert check_prime('2') == True\nassert check_prime('8') == False\nassert check_prime('9') == False\nassert check_prime('11') == True", "username": "student68", "submitted_text": "given a character, convert the character into a number. return true if that number is a prime number. if not, return false. ", "prompt": "def check_prime(num):\n    \"\"\"\n    given a character, typecast the character into a number. return true if that number is a prime number. if not, return false. \n    \"\"\"\n    ", "subset": "last_failure", "original": "convert"}
{"__index_level_0__": 579, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student60", "submitted_text": "The function takes in an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number, casts it back into an int and returns it. Otherwise, the function just returns score + 1. ", "prompt": "def increaseScore(score):\n    \"\"\"\n    The function takes in an int score as parameter. If the score is negative, it returns a positive number. If the score is a single digit, it adds a 0 at the end of the number, typecasts it back into an int and returns it. Otherwise, the function just returns score + 1. \n    \"\"\"\n    ", "subset": "last_success", "original": "casts"}
{"__index_level_0__": 714, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student29", "submitted_text": "For each list entry, start at the end of the corresponding string, parse backwards until you reach the first \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Convert that string to a float, then add all of the floats for each entry together and return the total.\n", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    For each list entry, start at the end of the corresponding string, parse backwards until you reach the first \"t\" character. Isolate the string from the \"t\" character until the end of the entry. Typecast that string to a float, then add all of the floats for each entry together and return the total.\n\n    \"\"\"\n    ", "subset": "last_failure", "original": "Convert"}
{"__index_level_0__": 718, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student34", "submitted_text": "Convert all that appears after the last t of each object in the list into a float, and then find the sum of the floats", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Typecast all that appears after the last t of each object in the list into a float, and then find the sum of the floats\n    \"\"\"\n    ", "subset": "first_failure", "original": "Convert"}
{"__index_level_0__": 722, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student34", "submitted_text": "Convert all that appears after the final \"t\" of each object in the list into a float, make a new list of those floats, and find the sum of that list", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Typecast all that appears after the final \"t\" of each object in the list into a float, make a new list of those floats, and find the sum of that list\n    \"\"\"\n    ", "subset": "last_failure", "original": "Convert"}
{"__index_level_0__": 723, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student49", "submitted_text": "Given a list of strings remove anything past the last t in the string, type cast to an integer and then add them together. ", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings remove anything past the last t in the string, typecast to an integer and then add them together. \n    \"\"\"\n    ", "subset": "first_failure", "original": "type cast"}
{"__index_level_0__": 727, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student49", "submitted_text": "Given a list of strings remove anything past the last t in the string, type cast the value to float. Move to the next string in the list, if exists and repeat. Once the end at the end of the list and add all values that were cast to float together.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings remove anything past the last t in the string, typecast the value to float. Move to the next string in the list, if exists and repeat. Once the end at the end of the list and add all values that were typecast to float together.\n    \"\"\"\n    ", "subset": "last_failure", "original": "cast"}
{"__index_level_0__": 742, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student70", "submitted_text": "Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and convert it into an integer, then add that integer to the sum. Return the sum at the end of the list.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string and typecast it into an integer, then add that integer to the sum. Return the sum at the end of the list.\n    \"\"\"\n    ", "subset": "first_failure", "original": "convert"}
{"__index_level_0__": 744, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student70", "submitted_text": "Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string. If this remaining portion of the string contains \".\", convert it into a float. Otherwise, convert it into an integer. Add this float or integer to the sum. Return the sum at the end of the list.", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the sum. Go through each string in the input list. After the second time \"\\t\" appears in the string, save the rest of the string. If this remaining portion of the string contains \".\", typecast it into a float. Otherwise, typecast it into an integer. Add this float or integer to the sum. Return the sum at the end of the list.\n    \"\"\"\n    ", "subset": "last_success", "original": "convert"}
{"__index_level_0__": 745, "problem": "readingIceCream", "entrypoint": "readingIceCream", "assertions": "assert readingIceCream([\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]) == 36.5\nassert readingIceCream([\"salty\\tfrozen yogurt\\t10\"]) == 10\nassert readingIceCream([\"salty\\tfrozen yogurt\\t0\"]) == 0", "username": "student78", "submitted_text": "given a list of strings, split each string on the '\\' character. in the new list of 3 strings, take the string in the 3rd position, eliminate the 't' in it, convert it to a float, and add it to running total. output this total", "prompt": "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings, split each string on the '\\' character. in the new list of 3 strings, take the string in the 3rd position, eliminate the 't' in it, typecast it to a float, and add it to running total. output this total\n    \"\"\"\n    ", "subset": "first_failure", "original": "convert"}
{"__index_level_0__": 849, "problem": "set_chars", "entrypoint": "set_chars", "assertions": "assert set_chars('Everybody loves apples.', \"u\", [0,2,6,16]) == 'uvurybudy loves upples.'\nassert set_chars('ice cream is the best', 'q', [1,21]) == 'iqe cream is the best'\nassert set_chars('toast and jam and toast and ham', 't', []) == 'toast and jam and toast and ham'", "username": "student43", "submitted_text": "First convert each element in l from string to number. If the length of s is equal or greater than the largest N in l, then loop through each number N in l and replace the element in s that has the index order N with the element in c. Otherwise, do nothing. Return the changed s.", "prompt": "def set_chars(s,c,l):\n    \"\"\"\n    First typecast each element in l from string to number. If the length of s is equal or greater than the largest N in l, then loop through each number N in l and replace the element in s that has the index order N with the element in c. Otherwise, do nothing. Return the changed s.\n    \"\"\"\n    ", "subset": "last_failure", "original": "convert"}
