{"__index_level_0__": 0, "problem": "add_up", "entrypoint": "add_up", "assertions": "assert add_up([ [ 'one', 2, 3, 4 ] ]) == 9\nassert add_up([ [ 3, 'hello', 3.4 ] ]) == 6.4\nassert add_up([ [ ] ]) == 0", "username": "student1", "submitted_text": "takes a list of strings, integers, and floats and returns the sum of all the integers and floats.", "prompt": "def add_up(arr):\n    \"\"\"\n    takes a list of strings, integers, and floats and outputs the sum of all the integers and floats.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 76, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student27", "submitted_text": "The input will be a list of integers. Return 0 if the list is empty. Otherwise, subtract the sum of all the integers with odd positions from the sum of all the integers with even positions.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    The input will be a list of integers. Output 0 if the list is empty. Otherwise, subtract the sum of all the integers with odd positions from the sum of all the integers with even positions.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 76, "problem": "subtract_add", "entrypoint": "subtract_add", "assertions": "assert subtract_add(['1', '2', '3', '4']) == -2\nassert subtract_add(['0', '2']) == -2\nassert subtract_add(['0', '0']) == 0\nassert subtract_add([ ]) == 0", "username": "student27", "submitted_text": "The input will be a list of integers. Return 0 if the list is empty. Otherwise, subtract the sum of all the integers with odd positions from the sum of all the integers with even positions.", "prompt": "def subtract_add(lst):\n    \"\"\"\n    The input will be a list of integers. Output 0 if the list is empty. Otherwise, subtract the sum of all the integers with odd positions from the sum of all the integers with even positions.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 114, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers and returns a list with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new string", "prompt": "def convert(lst):\n    \"\"\"\n    takes a list of numbers and outputs a list with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new string\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 114, "problem": "convert", "entrypoint": "convert", "assertions": "assert convert([0, 1, 2, 3]) == ['ABCD']\nassert convert([0, -1, 1, -1, 2]) == ['A', 'B', 'C']\nassert convert([1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]) == ['BBB', 'ZZZ', 'ABC']", "username": "student0", "submitted_text": "takes a list of numbers and returns a list with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new string", "prompt": "def convert(lst):\n    \"\"\"\n    takes a list of numbers and outputs a list with the corresponding indexes of the alphabet, where negative numbers as indexes means to take in the next index as a new string\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 290, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student0", "submitted_text": "takes in a list of numbers. returns the list of numbers without odd integer numbers.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers. outputs the list of numbers without odd integer numbers.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 290, "problem": "remove_odd", "entrypoint": "remove_odd", "assertions": "assert remove_odd([4.3, 4, 5, 2, 7]) == [4.3, 4, 2]\nassert remove_odd([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\nassert remove_odd([3, 5, 7]) == []", "username": "student0", "submitted_text": "takes in a list of numbers. returns the list of numbers without odd integer numbers.", "prompt": "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers. outputs the list of numbers without odd integer numbers.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 351, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student12", "submitted_text": "Using the dictionary provided, replace each letter (which is the key in the dictionary)in the list with the value. If the letter is not found in the dictionary's keys, replace that letter with None. Return the resulting list.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Using the dictionary provided, replace each letter (which is the key in the dictionary)in the list with the value. If the letter is not found in the dictionary's keys, replace that letter with None. Output the resulting list.\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 351, "problem": "create_list", "entrypoint": "create_list", "assertions": "assert create_list({'a': 'b', 't': 'd'}, ['a', 't', 'c']) == ['b', 'd', None]\nassert create_list({1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]) == ['a', None, 'c']\nassert create_list({3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']) == [None, None, None]", "username": "student12", "submitted_text": "Using the dictionary provided, replace each letter (which is the key in the dictionary)in the list with the value. If the letter is not found in the dictionary's keys, replace that letter with None. Return the resulting list.", "prompt": "def create_list(dt, lst):\n    \"\"\"\n    Using the dictionary provided, replace each letter (which is the key in the dictionary)in the list with the value. If the letter is not found in the dictionary's keys, replace that letter with None. Output the resulting list.\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 369, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student12", "submitted_text": "Return true if the list contains the letter Q or U, else return false", "prompt": "def has_qu(lst):\n    \"\"\"\n    Output true if the list contains the letter Q or U, else output false\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 369, "problem": "has_qu", "entrypoint": "has_qu", "assertions": "assert has_qu([\"A\", \"B\", \"C\"]) == False\nassert has_qu([\"A\", \"Q\", \"C\"]) == True\nassert has_qu([\"A\", \"U\", \"C\"]) == True\nassert has_qu([\"Q\", \"U\"]) == True", "username": "student12", "submitted_text": "Return true if the list contains the letter Q or U, else return false", "prompt": "def has_qu(lst):\n    \"\"\"\n    Output true if the list contains the letter Q or U, else output false\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 383, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student1", "submitted_text": "Takes a dictionary of planet names and their masses and returns 15 if Venus, Mercury, and the Sun are present in the dictionary.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Takes a dictionary of planet names and their masses and outputs 15 if Venus, Mercury, and the Sun are present in the dictionary.\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 383, "problem": "planets_mass", "entrypoint": "planets_mass", "assertions": "assert planets_mass({'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}) == 15\nassert planets_mass({'Pluto': 100}) == 0", "username": "student1", "submitted_text": "Takes a dictionary of planet names and their masses and returns 15 if Venus, Mercury, and the Sun are present in the dictionary.", "prompt": "def planets_mass(planets):\n    \"\"\"\n    Takes a dictionary of planet names and their masses and outputs 15 if Venus, Mercury, and the Sun are present in the dictionary.\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 425, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student2", "submitted_text": "This function prints a new dictionary containing the strings that appear in the first dictionary the lists of stings that appear in the second dictionary", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    This function outputs a new dictionary containing the strings that appear in the first dictionary the lists of stings that appear in the second dictionary\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 425, "problem": "student_grades", "entrypoint": "student_grades", "assertions": "assert student_grades({'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}) == {'Alice': ['A','A'], 'Bob': ['A','B']}\nassert student_grades({'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}) == {'Alice': []}\nassert student_grades({'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}) == {'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }", "username": "student2", "submitted_text": "This function prints a new dictionary containing the strings that appear in the first dictionary the lists of stings that appear in the second dictionary", "prompt": "def student_grades(students, grades):\n    \"\"\"\n    This function outputs a new dictionary containing the strings that appear in the first dictionary the lists of stings that appear in the second dictionary\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 491, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student2", "submitted_text": "this function returns a list for the amount of times the string 'Meep' appears followed by the amount of times the string 'Morp' appears", "prompt": "def meeps_morps(items):\n    \"\"\"\n    this function outputs a list for the amount of times the string 'Meep' appears followed by the amount of times the string 'Morp' appears\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 491, "problem": "meeps_morps", "entrypoint": "meeps_morps", "assertions": "assert meeps_morps(['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']) == [3,2]\nassert meeps_morps(['Meep', 'Meep', 'Suitcase', 'Kind']) == [2,0]\nassert meeps_morps(['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']) == [0,0]", "username": "student2", "submitted_text": "this function returns a list for the amount of times the string 'Meep' appears followed by the amount of times the string 'Morp' appears", "prompt": "def meeps_morps(items):\n    \"\"\"\n    this function outputs a list for the amount of times the string 'Meep' appears followed by the amount of times the string 'Morp' appears\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 516, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student12", "submitted_text": "If the hour is between 0 and 8, return sleeping. Else, return weekend if the day is Sat or Sun. Else, return weekday if the day is any day between Monday and Friday.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    If the hour is between 0 and 8, output sleeping. Else, output weekend if the day is Sat or Sun. Else, output weekday if the day is any day between Monday and Friday.\n    \"\"\"\n    ", "subset": "last_success"}
{"__index_level_0__": 516, "problem": "print_time", "entrypoint": "print_time", "assertions": "assert print_time('Sat', 12) == 'weekend'\nassert print_time('Sun', 12) == 'weekend'\nassert print_time('Mon', 9) == 'weekday'\nassert print_time('Tue', 23) == 'weekday'\nassert print_time('Wed', 0) == 'sleeping'\nassert print_time('Thu', 8) == 'sleeping'", "username": "student12", "submitted_text": "If the hour is between 0 and 8, return sleeping. Else, return weekend if the day is Sat or Sun. Else, return weekday if the day is any day between Monday and Friday.", "prompt": "def print_time(day,hour):\n    \"\"\"\n    If the hour is between 0 and 8, output sleeping. Else, output weekend if the day is Sat or Sun. Else, output weekday if the day is any day between Monday and Friday.\n    \"\"\"\n    ", "subset": "last_success"}
{"__index_level_0__": 561, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student23", "submitted_text": "This function takes in a number and adds one if the number is greater then 9. If the number is negative it turns it into a positive number. If it is a single-digit number it adds a zero to the number. Then the output is returned with the updated number.", "prompt": "def increaseScore(score):\n    \"\"\"\n    This function takes in a number and adds one if the number is greater then 9. If the number is negative it turns it into a positive number. If it is a single-digit number it adds a zero to the number. Then the output is outputted with the updated number.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 561, "problem": "increaseScore", "entrypoint": "increaseScore", "assertions": "assert increaseScore(-10) == 10\nassert increaseScore(1) == 10\nassert increaseScore(10) == 11\nassert increaseScore(15) == 16\nassert increaseScore(20) == 21", "username": "student23", "submitted_text": "This function takes in a number and adds one if the number is greater then 9. If the number is negative it turns it into a positive number. If it is a single-digit number it adds a zero to the number. Then the output is returned with the updated number.", "prompt": "def increaseScore(score):\n    \"\"\"\n    This function takes in a number and adds one if the number is greater then 9. If the number is negative it turns it into a positive number. If it is a single-digit number it adds a zero to the number. Then the output is outputted with the updated number.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 589, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student1", "submitted_text": "Takes the month and returns the season that the month falls into.", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes the month and outputs the season that the month falls into.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 589, "problem": "getSeason", "entrypoint": "getSeason", "assertions": "assert getSeason('January') == 'winter'\nassert getSeason('April') == 'spring'\nassert getSeason('August') == 'summer'\nassert getSeason('October') == 'fall'", "username": "student1", "submitted_text": "Takes the month and returns the season that the month falls into.", "prompt": "def getSeason(month):\n    \"\"\"\n    Takes the month and outputs the season that the month falls into.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 648, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student2", "submitted_text": "This function pints a list containing strings of every value from the input", "prompt": "def assessVowels(s):\n    \"\"\"\n    This function outputs a list containing strings of every value from the input\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 648, "problem": "assessVowels", "entrypoint": "assessVowels", "assertions": "assert assessVowels('I ate an apple') == ['I', 'a', 'e', 'a', 'a', 'e']\nassert assessVowels('Another string here') == ['A', 'o', 'e', 'i', 'e', 'e']\nassert assessVowels('cAbbAge') == ['A', 'A', 'e']\nassert assessVowels('') == []", "username": "student2", "submitted_text": "This function pints a list containing strings of every value from the input", "prompt": "def assessVowels(s):\n    \"\"\"\n    This function outputs a list containing strings of every value from the input\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 750, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student27", "submitted_text": "The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. Return a dictionary with the string as the key and the position of the string as the value.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. Output a dictionary with the string as the key and the position of the string as the value.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 750, "problem": "findHorizontals", "entrypoint": "findHorizontals", "assertions": "assert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]) == {\"cat\":0, \"tea\":2}\nassert findHorizontals([\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]) == {}\nassert findHorizontals([\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]) == {'it': 3}", "username": "student27", "submitted_text": "The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. Return a dictionary with the string as the key and the position of the string as the value.", "prompt": "def findHorizontals(puzzle,wordList):\n    \"\"\"\n    The input will be a \"puzzle\" list and a \"wordList\" list. They consist of strings and have equal length. Check if the string in the puzzle list contains all the characters of the string in the wordList list. Output a dictionary with the string as the key and the position of the string as the value.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 811, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student27", "submitted_text": "There will be a list of strings. Count and return the number of \"&\" within those strings.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    There will be a list of strings. Count and output the number of \"&\" within those strings.\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 811, "problem": "andCount", "entrypoint": "andCount", "assertions": "assert andCount(['--&-','----','-&--','---&',]) == 3\nassert andCount(['&&&-','-----','--&&&','-----',]) == 6\nassert andCount(['----', '----', '----', '----']) == 0", "username": "student27", "submitted_text": "There will be a list of strings. Count and return the number of \"&\" within those strings.", "prompt": "def andCount(andGrid):\n    \"\"\"\n    There will be a list of strings. Count and output the number of \"&\" within those strings.\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 858, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and outputs every other letter as upper case. If it is just a one letter word it is turned into an upper case letter.", "prompt": "def altText(s):\n    \"\"\"\n    This function takes in a word or sentence and outputs every other letter as upper case. If it is just a one letter word it is turned into an upper case letter.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 858, "problem": "altText", "entrypoint": "altText", "assertions": "assert altText('I love to see dolphins swim.') == 'I LoVe tO SeE DoLpHiNs sWiM.'\nassert altText('computers') == 'CoMpUtErS'\nassert altText('t') == 'T'", "username": "student23", "submitted_text": "This function takes in a word or sentence and outputs every other letter as upper case. If it is just a one letter word it is turned into an upper case letter.", "prompt": "def altText(s):\n    \"\"\"\n    This function takes in a word or sentence and outputs every other letter as upper case. If it is just a one letter word it is turned into an upper case letter.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 898, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student0", "submitted_text": "takes in a string and a number. reverse the string from index 0 to the number. return the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    takes in a string and a number. reverse the string from index 0 to the number. output the string.\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 898, "problem": "changeSection", "entrypoint": "changeSection", "assertions": "assert changeSection('Turn towards the door.', 9) == 'awot nruTrds the door.'\nassert changeSection('the tall sail', 13) == 'lias llat eht'\nassert changeSection('establishing', 1) == 'establishing'", "username": "student0", "submitted_text": "takes in a string and a number. reverse the string from index 0 to the number. return the string.", "prompt": "def changeSection(s,i):\n    \"\"\"\n    takes in a string and a number. reverse the string from index 0 to the number. output the string.\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 986, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student0", "submitted_text": "takes in an integer. return a matrix of the integer size by the integer size with values of its row index plus one.", "prompt": "def pattern(value):\n    \"\"\"\n    takes in an integer. output a matrix of the integer size by the integer size with values of its row index plus one.\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 986, "problem": "pattern", "entrypoint": "pattern", "assertions": "assert pattern(3) == [[1,2,3],[1,2,3],[1,2,3]]\nassert pattern(4) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert pattern(2) == [[1,2],[1,2]]", "username": "student0", "submitted_text": "takes in an integer. return a matrix of the integer size by the integer size with values of its row index plus one.", "prompt": "def pattern(value):\n    \"\"\"\n    takes in an integer. output a matrix of the integer size by the integer size with values of its row index plus one.\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 1014, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student0", "submitted_text": "takes in a string and returns a string with '^' changed to '_'", "prompt": "def reduce(val):\n    \"\"\"\n    takes in a string and outputs a string with '^' changed to '_'\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 1014, "problem": "reduce", "entrypoint": "reduce", "assertions": "assert reduce('^^1-1^^') == '__1-1__'\nassert reduce('~^--^~') == '~_--_~'\nassert reduce('|O.0|') == '|O.0|'", "username": "student0", "submitted_text": "takes in a string and returns a string with '^' changed to '_'", "prompt": "def reduce(val):\n    \"\"\"\n    takes in a string and outputs a string with '^' changed to '_'\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 1032, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student2", "submitted_text": "this function returns false if the value contains a 9", "prompt": "def fib(n):\n    \"\"\"\n    this function outputs false if the value contains a 9\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1032, "problem": "fib", "entrypoint": "fib", "assertions": "assert fib(1) == True\nassert fib(13) == True\nassert fib(21) == True\nassert fib(19) == False", "username": "student2", "submitted_text": "this function returns false if the value contains a 9", "prompt": "def fib(n):\n    \"\"\"\n    this function outputs false if the value contains a 9\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1065, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student0", "submitted_text": "takes in a string, an integer, and a dictionary.\nreturns the dictionary that adds the string as a key and integer as the value", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    takes in a string, an integer, and a dictionary.\noutputs the dictionary that adds the string as a key and integer as the value\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 1065, "problem": "add_word", "entrypoint": "add_word", "assertions": "assert add_word('bright', 1, {'twas': [1]}) == {'twas': [1], 'bright': [1]}\nassert add_word('five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}) == {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}\nassert add_word('laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}) == {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}", "username": "student0", "submitted_text": "takes in a string, an integer, and a dictionary.\nreturns the dictionary that adds the string as a key and integer as the value", "prompt": "def add_word(word, line_number, map):\n    \"\"\"\n    takes in a string, an integer, and a dictionary.\noutputs the dictionary that adds the string as a key and integer as the value\n    \"\"\"\n    ", "subset": "first_success"}
{"__index_level_0__": 1091, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student27", "submitted_text": "Check if \"aspen\" is one of the keys in a dict. Return \"Yup\" if it is a key, \"Nope\" if it is not a key.", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    Check if \"aspen\" is one of the keys in a dict. Output \"Yup\" if it is a key, \"Nope\" if it is not a key.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1091, "problem": "check_for_aspen", "entrypoint": "check_for_aspen", "assertions": "assert check_for_aspen({\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}) == \"Nope\"\nassert check_for_aspen({\"Aspen\": 7, \"Beech\": 15}) == \"Yup\"\nassert check_for_aspen({\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}) == \"Yup\"", "username": "student27", "submitted_text": "Check if \"aspen\" is one of the keys in a dict. Return \"Yup\" if it is a key, \"Nope\" if it is not a key.", "prompt": "def check_for_aspen(trees):\n    \"\"\"\n    Check if \"aspen\" is one of the keys in a dict. Output \"Yup\" if it is a key, \"Nope\" if it is not a key.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1141, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student27", "submitted_text": "The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Return the updated list.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Output the updated list.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1141, "problem": "sortedBooks", "entrypoint": "sortedBooks", "assertions": "assert sortedBooks([{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen') == [{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf') == [{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]\nassert sortedBooks([{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen') == []", "username": "student27", "submitted_text": "The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Return the updated list.", "prompt": "def sortedBooks(books, writer):\n    \"\"\"\n    The input will be a list of dictionaries and a string. Remove all dictionaries where the key \"author\" does not match the string. Output the updated list.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1225, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student5", "submitted_text": "this function will take a list of flights and the starting city and return the possible layovers with the staring city", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    this function will take a list of flights and the starting city and output the possible layovers with the staring city\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1225, "problem": "layoverTrips", "entrypoint": "layoverTrips", "assertions": "assert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS') == ['ATL','LAX']\nassert layoverTrips([{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD') == []\nassert layoverTrips([{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX') == ['ATL','JFK']", "username": "student5", "submitted_text": "this function will take a list of flights and the starting city and return the possible layovers with the staring city", "prompt": "def layoverTrips(flights, start):\n    \"\"\"\n    this function will take a list of flights and the starting city and output the possible layovers with the staring city\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1276, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student2", "submitted_text": "This function prints values from the start until the stop by the factor", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    This function outputs values from the start until the stop by the factor\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1276, "problem": "find_multiples", "entrypoint": "find_multiples", "assertions": "assert find_multiples(1,100,20) == [20, 40, 60, 80, 100]\nassert find_multiples(10, 30, 5) == [10, 15, 20, 25, 30]\nassert find_multiples(1000,2000,177) == [1062, 1239, 1416, 1593, 1770, 1947]", "username": "student2", "submitted_text": "This function prints values from the start until the stop by the factor", "prompt": "def find_multiples(start,stop,factor):\n    \"\"\"\n    This function outputs values from the start until the stop by the factor\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1308, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student23", "submitted_text": "This function takes in a list of the item purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the lists are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function takes in a list of the item purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the lists are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then outputted as the output.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1308, "problem": "total_bill", "entrypoint": "total_bill", "assertions": "assert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07) == 15.44\nassert total_bill([['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0) == 14.43\nassert total_bill([['bread', 2, 3.50]], 0.5) == 10.5", "username": "student23", "submitted_text": "This function takes in a list of the item purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the lists are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then returned as the output.", "prompt": "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function takes in a list of the item purchased, the price, the tax, and the overall sales tax. All of the prices and tax within the lists are added together. The sales tax is then multiplied by the outcome of the added prices, and then the result of the multiplication is added onto the total price. The total price is then outputted as the output.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1372, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student1", "submitted_text": "takes a list of list, which contains a score and a name, and returns the top score.", "prompt": "def topScores(lst):\n    \"\"\"\n    takes a list of list, which contains a score and a name, and outputs the top score.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1372, "problem": "topScores", "entrypoint": "topScores", "assertions": "assert topScores([[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]) == ['Penelope', 'Alex', 'Rachel']\nassert topScores([[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]) == ['Ben', 'Alex', 'Ro', 'Ira', 'Kip']\nassert topScores([[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]) == []", "username": "student1", "submitted_text": "takes a list of list, which contains a score and a name, and returns the top score.", "prompt": "def topScores(lst):\n    \"\"\"\n    takes a list of list, which contains a score and a name, and outputs the top score.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1583, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student0", "submitted_text": "takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of num times 100 divided by the length of the first list and concatenate a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    takes in two lists. If the lists have the same value at the same index, add one to a num variable. output the string of num times 100 divided by the length of the first list and concatenate a percent sign.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1583, "problem": "percentWin", "entrypoint": "percentWin", "assertions": "assert percentWin(['1', '1', 'X', '2'], ['1', '1', '1', '2']) == '75%'\nassert percentWin(['2', 'X', 'X'], ['2', '2', '2']) == '33%'\nassert percentWin(['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']) == '100%'", "username": "student0", "submitted_text": "takes in two lists. If the lists have the same value at the same index, add one to a num variable. return the string of num times 100 divided by the length of the first list and concatenate a percent sign.", "prompt": "def percentWin(guess,answers):\n    \"\"\"\n    takes in two lists. If the lists have the same value at the same index, add one to a num variable. output the string of num times 100 divided by the length of the first list and concatenate a percent sign.\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1669, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints \"ha\" for any value", "prompt": "def laugh(size):\n    \"\"\"\n    This function outputs \"ha\" for any value\n    \"\"\"\n    ", "subset": "first_failure"}
{"__index_level_0__": 1669, "problem": "laugh", "entrypoint": "laugh", "assertions": "assert laugh(4) == \"haaaa haaa haa ha\"\nassert laugh(1) == \"ha\"\nassert laugh(3) == \"haaa haa ha\"", "username": "student2", "submitted_text": "This function prints \"ha\" for any value", "prompt": "def laugh(size):\n    \"\"\"\n    This function outputs \"ha\" for any value\n    \"\"\"\n    ", "subset": "first_failure"}
