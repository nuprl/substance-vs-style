breakout_edges:
  student14: null
  student15: "attempt_id: 10\ndiff: \"--- \\n+++ \\n@@ -64,5 +64,9 @@\\n Returns the\
    \ second-list.+list,+but+only+the+names.\\\n  \\ \\\"\\\"\\\"\"\n"
  student24: null
  student31: null
  student39: null
  student45: null
  student53: null
  student55: null
  student65: null
  student7: "attempt_id: 14\ndiff: \"--- \\n+++ \\n@@ -1,35 +1,13 @@\\n def topScores(lst):\
    \ \\\"\\\"\\\"-Iterates-through+Creates\\\n  \\ a-list-of-lists,-with-each-list-housing-the-age-and-name-of-a-person-respectively.-A\\\
    \n  \\ new list-will-be-created of the names-of-people sorted by age\"\n"
  student9: null
cycle_summary:
  student14:
  - !Edge
    _edge_tags:
    - d3
    attempt_id: 1
    clues:
    - 2
    completion_from: "for i in range(len(lst)):\n        if lst[i][1] > 80:\n    \
      \        print(lst[i][0])\n"
    completion_to: "for i in range(len(lst)):\n        if int(lst[i][1]) > 80:\n \
      \           print(lst[i][0])\n"
    diff: "--- \n+++ \n@@ -1,14 +1,16 @@\n def topScores(lst): \"\"\"-output+if the-first-four-names-with+string+contains\
      \ a number above-80+80,+print+its+paired+name \"\"\""
    node_from: &id001 !Node
      _node_tags: null
      id: 41
      stderr:
      - 'IndentationError: expected an indented block after ''if'' statement on line
        6'
      - 'IndentationError: expected an indented block after ''if'' statement on line
        6'
      - 'IndentationError: expected an indented block after ''if'' statement on line
        6'
      stdout:
      - ''
      - ''
      - ''
    node_to: *id001
    prompt_from: "def topScores(lst):\n    \"\"\"\n    output the first four names\
      \ with a number above 80\n    \"\"\"\n    "
    prompt_to: "def topScores(lst):\n    \"\"\"\n    if the string contains a number\
      \ above 80, print its paired name\n    \"\"\"\n    "
    state: neutral
    total_attempts: 3
    username: student14
  student15:
  - !Edge
    _edge_tags:
    - a4
    attempt_id: 3
    clues:
    - 1
    - 3
    - 4
    completion_from: "topScores = []\n    for i in lst:\n        if i[0] > 76:\n \
      \           topScores.append(i[1])\n    topScores.sort(reverse = True)\n   \
      \ return topScores\n"
    completion_to: "top = []\n    for i in lst:\n        if i[0] > 76:\n         \
      \   top.append(i[1])\n    top.sort(reverse = True)\n    return top\n"
    diff: "--- \n+++ \n@@ -25,8 +25,14 @@\n Sorts in reverse-alphabetical-order.+numerical+order+by+the+number+in+index+0.\
      \ Returns the list."
    node_from: &id002 !Node
      _node_tags: null
      id: 32
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '[''Rachel'', ''Penelope'', ''Alex'']

        '
      - '[''Sam'', ''Ro'', ''Kip'', ''Ira'', ''Ben'', ''Alex'']

        '
      - '[]

        '
    node_to: *id002
    prompt_from: "def topScores(lst):\n    \"\"\"\n    For each list in lst, if the\
      \ number in index 0 is greater than 76, adds the name to a list. Sorts in reverse\
      \ alphabetical order. Returns the list. \n    \"\"\"\n    "
    prompt_to: "def topScores(lst):\n    \"\"\"\n    For each list in lst, if the\
      \ number in index 0 is greater than 76, adds the name to a list. Sorts in reverse\
      \ numerical order by the number in index 0. Returns the list. \n    \"\"\"\n\
      \    "
    state: neutral
    total_attempts: 13
    username: student15
  - !Edge
    _edge_tags:
    - m1
    attempt_id: 4
    clues:
    - 1
    - 3
    - 4
    completion_from: "top = []\n    for i in lst:\n        if i[0] > 76:\n       \
      \     top.append(i[1])\n    top.sort(reverse = True)\n    return top\n"
    completion_to: "topScores = []\n    names = []\n    for i in lst:\n        if\
      \ i[0] > 76:\n            topScores.append(i)\n    topScores.sort(reverse =\
      \ True)\n    for i in topScores:\n        names.append(i[1])\n    return names\n"
    diff: "--- \n+++ \n@@ -18,7 +18,9 @@\n 76, adds the-name+[num,+name]+list to a\
      \ list.@@ -33,7 +35,15 @@\n in index 0.+Adds+the+names+to+a+second+list. Returns\
      \ the+second list. \"\"\""
    node_from: *id002
    node_to: !Node
      _node_tags: null
      id: 11
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '[''Penelope'', ''Alex'', ''Rachel'']

        '
      - '[''Ben'', ''Alex'', ''Ro'', ''Ira'', ''Kip'', ''Sam'']

        '
      - '[]

        '
    prompt_from: "def topScores(lst):\n    \"\"\"\n    For each list in lst, if the\
      \ number in index 0 is greater than 76, adds the name to a list. Sorts in reverse\
      \ numerical order by the number in index 0. Returns the list. \n    \"\"\"\n\
      \    "
    prompt_to: "def topScores(lst):\n    \"\"\"\n    For each list in lst, if the\
      \ number in index 0 is greater than 76, adds the [num, name] list to a list.\
      \ Sorts in reverse numerical order by the number in index 0. Adds the names\
      \ to a second list. Returns the second list. \n    \"\"\"\n    "
    state: neutral
    total_attempts: 13
    username: student15
  student24: []
  student31: []
  student39: []
  student45: []
  student53:
  - !Edge
    _edge_tags:
    - l1
    - l4
    attempt_id: 10
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    completion_from: "new_lst = []\n    for i in lst:\n        if i[0] >= 80:\n  \
      \          new_lst.append(i)\n    new_lst.sort(reverse = True)\n    new_lst2\
      \ = []\n    for i in new_lst:\n        new_lst2.append(i[1])\n    if len(new_lst2)\
      \ > 5:\n        new_"
    completion_to: 'return [x[1] for x in sorted(lst, key=lambda x: x[0], reverse=True)
      if x[0] >= 80][:5]

      '
    diff: "--- \n+++ \n@@ -1,81 +1,44 @@\n def topScores(lst): \"\"\"-Loop-through-each-lst-and-take+if+0th+index+of\
      \ the nested list-with-a-0th-index-larger+of+lst+is+greater than or equal to-80.-Define-and-append-to+80,+return\
      \ a-new list-and-sort+of the-new-list+1st+index in the order-of+from the largest\
      \ 0th index-in-the-nested-list.-Add-the-1st-index-into+integer.+Return+up+to\
      \ a-another-defined-new list-and-return-this-list.-If-the-list-is-larger-than+of\
      \ 5-items-then-take-then-eliminate-the-last-elements-to-make-5-total items.\
      \ \"\"\""
    node_from: !Node
      _node_tags: null
      id: 10
      stderr:
      - ''
      - 'NameError: name ''new_'' is not defined'
      - ''
      stdout:
      - 'None

        '
      - ''
      - 'None

        '
    node_to: !Node
      _node_tags: null
      id: 4
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '[''Penelope'', ''Alex'', ''Rachel'']

        '
      - '[''Ben'', ''Alex'', ''Ro'', ''Ira'', ''Kip'']

        '
      - '[]

        '
    prompt_from: "def topScores(lst):\n    \"\"\"\n    Loop through each lst and take\
      \ the nested list with a 0th index larger than or equal to 80. Define and append\
      \ to a new list and sort the new list in the order of the largest 0th index\
      \ in the nested list. Add the 1st index into a another defined new list and\
      \ return this list. If the list is larger than 5 items then take then eliminate\
      \ the last elements to make 5 total items. \n    \"\"\"\n    "
    prompt_to: "def topScores(lst):\n    \"\"\"\n    if 0th index of the nested list\
      \ of lst is greater than or equal to 80, return a list of the 1st index in the\
      \ order from the largest 0th index integer. Return up to a list of 5 items.\
      \ \n    \"\"\"\n    "
    state: success
    total_attempts: 11
    username: student53
  student55: []
  student65: []
  student7:
  - !Edge
    _edge_tags:
    - d4
    attempt_id: 3
    clues:
    - 1
    - 3
    completion_from: "lst.sort(key=lambda x: x[0])\n    return [x[1] for x in lst]\n"
    completion_to: "lst.sort(key=lambda x: x[0])\n    return [x[1] for x in lst]\n"
    diff: "--- \n+++ \n@@ -28,7 +28,7 @@\n of people from+youngest+to oldest-to-youngest\
      \ \"\"\""
    node_from: &id003 !Node
      _node_tags: null
      id: 18
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '[''Pete'', ''Matt'', ''Rachel'', ''Alex'', ''Penelope'']

        '
      - '[''Hans'', ''Matt'', ''Sam'', ''Kip'', ''Ira'', ''Ro'', ''Alex'', ''Ben'']

        '
      - '[''Alex'', ''Bob'', ''Rachel'']

        '
    node_to: *id003
    prompt_from: "def topScores(lst):\n    \"\"\"\n    Iterates through a list of\
      \ lists, with each list housing the age and name of a person respectively. Returns\
      \ a list of the names of people from oldest to youngest\n    \"\"\"\n    "
    prompt_to: "def topScores(lst):\n    \"\"\"\n    Iterates through a list of lists,\
      \ with each list housing the age and name of a person respectively. Returns\
      \ a list of the names of people from youngest to oldest\n    \"\"\"\n    "
    state: neutral
    total_attempts: 18
    username: student7
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 13
    clues:
    - 1
    - 3
    - 4
    completion_from: "new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][1])\n\
      \    return new_lst\n"
    completion_to: "newList = []\n    for i in range(len(lst)):\n        newList.append(lst[i][1])\n\
      \    return newList\n"
    diff: "--- \n+++ \n@@ -25,8 +25,6 @@\n will be created-and-returned of the names"
    node_from: &id004 !Node
      _node_tags: null
      id: 24
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '[''Matt'', ''Rachel'', ''Penelope'', ''Pete'', ''Alex'']

        '
      - '[''Kip'', ''Matt'', ''Sam'', ''Ben'', ''Alex'', ''Ro'', ''Hans'', ''Ira'']

        '
      - '[''Bob'', ''Rachel'', ''Alex'']

        '
    node_to: *id004
    prompt_from: "def topScores(lst):\n    \"\"\"\n    Iterates through a list of\
      \ lists, with each list housing the age and name of a person respectively. A\
      \ new list will be created and returned of the names of people sorted by age\
      \ from oldest to youngest.  \n    \"\"\"\n    "
    prompt_to: "def topScores(lst):\n    \"\"\"\n    Iterates through a list of lists,\
      \ with each list housing the age and name of a person respectively. A new list\
      \ will be created of the names of people sorted by age from oldest to youngest.\
      \  \n    \"\"\"\n    "
    state: neutral
    total_attempts: 18
    username: student7
  student9:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 4
    clues:
    - 2
    - 4
    completion_from: "lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    for\
      \ i in range(len(lst)):\n        if lst[i][1] >= 80:\n            print(lst[i][0],\
      \ lst[i][1])\n"
    completion_to: "# The list is sorted from highest to lowest\n    lst.sort(reverse=True)\n\
      \    # The list is iterated through\n    for i in range(len(lst)):\n       \
      \ # The values that are over 80 are printed\n        if lst[i] > 80:\n     \
      \       print(lst[i])\n"
    diff: "--- \n+++ \n@@ -13,7 +13,6 @@\n values that are-the over 80 are"
    node_from: !Node
      _node_tags: null
      id: 8
      stderr:
      - 'IndentationError: expected an indented block after ''if'' statement on line
        7'
      - 'IndentationError: expected an indented block after ''if'' statement on line
        7'
      - 'IndentationError: expected an indented block after ''if'' statement on line
        7'
      stdout:
      - ''
      - ''
      - ''
    node_to: !Node
      _node_tags: null
      id: 30
      stderr:
      - 'IndentationError: expected an indented block after ''if'' statement on line
        10'
      - 'IndentationError: expected an indented block after ''if'' statement on line
        10'
      - 'IndentationError: expected an indented block after ''if'' statement on line
        10'
      stdout:
      - ''
      - ''
      - ''
    prompt_from: "def topScores(lst):\n    \"\"\"\n    The function reads the values\
      \ in the list. The values that are the over 80 are ordered from highest to lowest.\
      \ The strings are printed in the order of their corresponding values.\n    \"\
      \"\"\n    "
    prompt_to: "def topScores(lst):\n    \"\"\"\n    The function reads the values\
      \ in the list. The values that are over 80 are ordered from highest to lowest.\
      \ The strings are printed in the order of their corresponding values.\n    \"\
      \"\"\n    "
    state: neutral
    total_attempts: 9
    username: student9
