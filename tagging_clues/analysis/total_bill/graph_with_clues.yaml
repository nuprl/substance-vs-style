!Graph
edges:
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: &id011
  - 1
  - 2
  - 3
  - 5
  - 6
  - 8
  completion_from: "total_price = 0\n    for item in grocery_list:\n        total_price\
    \ += item[1]\n    total_price = total_price + (total_price * sales_tax)\n    return\
    \ total_price\n"
  completion_to: "total_price = 0\n    for i in range(len(grocery_list)):\n      \
    \  total_price += grocery_list[i][1]\n    for i in range(len(sales_tax)):\n  \
    \      total_price += sales_tax[i]\n    return total_price\n"
  diff: "--- \n+++ \n@@ -26,7 +26,7 @@\n the prices and-tax+taxes within the lists"
  node_from: &id002 !Node
    _node_tags: null
    id: 2
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '9.63

      '
    - '9.0

      '
    - '3.0

      '
  node_to: &id001 !Node
    _node_tags: null
    id: 6
    stderr:
    - 'TypeError: object of type ''float'' has no len()'
    - 'TypeError: object of type ''float'' has no len()'
    - 'TypeError: object of type ''float'' has no len()'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function\
    \ takes in a list of the item purchased, the price, the tax, and the overall sales\
    \ tax. All of the prices and tax within the lists are added together. The sales\
    \ tax is then multiplied by the outcome of the added prices, and then the result\
    \ of the multiplication is added onto the total price. The total price is then\
    \ returned as the output.\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function\
    \ takes in a list of the item purchased, the price, the tax, and the overall sales\
    \ tax. All of the prices and taxes within the lists are added together. The sales\
    \ tax is then multiplied by the outcome of the added prices, and then the result\
    \ of the multiplication is added onto the total price. The total price is then\
    \ returned as the output.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student23
- !Edge
  _edge_tags:
  - m2
  attempt_id: 2
  clues: &id012
  - 1
  - 2
  - 3
  - 5
  - 6
  - 8
  completion_from: "total_price = 0\n    for i in range(len(grocery_list)):\n    \
    \    total_price += grocery_list[i][1]\n    for i in range(len(sales_tax)):\n\
    \        total_price += sales_tax[i]\n    return total_price\n"
  completion_to: "total_price = 0\n    for item in grocery_list:\n        total_price\
    \ += item[1]\n    total_price = total_price + (total_price * sales_tax)\n    return\
    \ total_price\n"
  diff: "--- \n+++ \n@@ -26,10 +26,19 @@\n the prices and-taxes+tax within the-lists+lists,+which+is+the+last+two+components+of+the+list\
    \ are added together."
  node_from: *id001
  node_to: *id002
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function\
    \ takes in a list of the item purchased, the price, the tax, and the overall sales\
    \ tax. All of the prices and taxes within the lists are added together. The sales\
    \ tax is then multiplied by the outcome of the added prices, and then the result\
    \ of the multiplication is added onto the total price. The total price is then\
    \ returned as the output.\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function\
    \ takes in a list of the item purchased, the price, the tax, and the overall sales\
    \ tax. All of the prices and tax within the lists, which is the last two components\
    \ of the list are added together. The sales tax is then multiplied by the outcome\
    \ of the added prices, and then the result of the multiplication is added onto\
    \ the total price. The total price is then returned as the output.\n    \"\"\"\
    \n    "
  state: neutral
  total_attempts: 4
  username: student23
- !Edge
  _edge_tags:
  - a4
  - d5
  attempt_id: 3
  clues: &id013
  - 1
  - 2
  - 3
  - 4
  - 6
  - 8
  completion_from: "total_price = 0\n    for item in grocery_list:\n        total_price\
    \ += item[1]\n    total_price = total_price + (total_price * sales_tax)\n    return\
    \ total_price\n"
  completion_to: "total_price = 0\n    for item in grocery_list:\n        total_price\
    \ += item[1] * item[2]\n    total_price = total_price + (total_price * sales_tax)\n\
    \    return total_price\n"
  diff: "--- \n+++ \n@@ -13,35 +13,36 @@\n item purchased, the-price,+amount+of the-tax,+item+purchased,+the+price+for+each+item,\
    \ and the overall sales tax.-All-of+The+amount+purchased+is+multiplied+with the-prices-and-tax-within-the-lists,-which-is-the-last-two-components-of-the-list-are-added-together.+price+for+each+item,+creating+a+total+amount.\
    \ The sales tax@@ -53,8 +54,8 @@\n outcome of the-added-prices,+total+amount,\
    \ and then the"
  node_from: *id002
  node_to: &id003 !Node
    _node_tags: null
    id: 0
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '15.4401

      '
    - '14.43

      '
    - '10.5

      '
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function\
    \ takes in a list of the item purchased, the price, the tax, and the overall sales\
    \ tax. All of the prices and tax within the lists, which is the last two components\
    \ of the list are added together. The sales tax is then multiplied by the outcome\
    \ of the added prices, and then the result of the multiplication is added onto\
    \ the total price. The total price is then returned as the output.\n    \"\"\"\
    \n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function\
    \ takes in a list of the item purchased, the amount of the item purchased, the\
    \ price for each item, and the overall sales tax. The amount purchased is multiplied\
    \ with the price for each item, creating a total amount. The sales tax is then\
    \ multiplied by the outcome of the total amount, and then the result of the multiplication\
    \ is added onto the total price. The total price is then returned as the output.\n\
    \    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student23
- !Edge
  _edge_tags:
  - a7
  attempt_id: 1
  clues: &id014
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  - 8
  completion_from: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    return total + total * sales_tax\n"
  completion_to: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    total = round(total * (1 + sales_tax), 2)\n    return total\n"
  diff: "--- \n+++ \n@@ -66,5 +66,10 @@\n added to the-\"total\"+\"total\",+truncated+to+two+decimal+places.\
    \ \"\"\""
  node_from: *id003
  node_to: &id004 !Node
    _node_tags: null
    id: 5
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '15.44

      '
    - '14.43

      '
    - '10.5

      '
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function\
    \ takes in some number of lists consisting of a string, an integer, and a number,\
    \ as well as one additional number \"sales tax\". The function multiplies the\
    \ integer and the number in each list and adds them together for all the lists,\
    \ giving a \"total\". Then the function multiplies the \"total\" by the \"sales\
    \ tax\" and outputs that value added to the \"total\"\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function\
    \ takes in some number of lists consisting of a string, an integer, and a number,\
    \ as well as one additional number \"sales tax\". The function multiplies the\
    \ integer and the number in each list and adds them together for all the lists,\
    \ giving a \"total\". Then the function multiplies the \"total\" by the \"sales\
    \ tax\" and outputs that value added to the \"total\", truncated to two decimal\
    \ places.\n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student33
- !Edge
  _edge_tags:
  - a7
  attempt_id: 1
  clues: &id015
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  - 8
  completion_from: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    return total * (sales_tax + 1)\n\nprint(total_bill(grocery_list,\
    \ sales_tax))"
  completion_to: "total_bill = 0\n    for i in grocery_list:\n        total_bill +=\
    \ i[1] * i[2]\n    total_bill = round(total_bill * (sales_tax + 1), 2)\n    return\
    \ total_bill\n"
  diff: "--- \n+++ \n@@ -51,5 +51,13 @@\n to give the+output.+The output+is+rounded+to+two+decimal+points.\
    \ \"\"\""
  node_from: &id005 !Node
    _node_tags: null
    id: 1
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '15.440100000000001

      '
    - '14.43

      '
    - '10.5

      '
  node_to: *id004
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function\
    \ is supposed to calculate the total billing amount. From the grocery_list (list\
    \ of lists), it looks into each individual list and multiplies the numbers provided\
    \ in each list. Then, it adds all those numbers. After that, it multiplies that\
    \ sum with (sales_tax + 1) to give the output\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function\
    \ is supposed to calculate the total billing amount. From the grocery_list (list\
    \ of lists), it looks into each individual list and multiplies the numbers provided\
    \ in each list. Then, it adds all those numbers. After that, it multiplies that\
    \ sum with (sales_tax + 1) to give the output. The output is rounded to two decimal\
    \ points.\n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student35
- !Edge
  _edge_tags:
  - a5
  - m6
  - m8
  attempt_id: 1
  clues: &id016
  - 2
  - 4
  - 5
  - 6
  - 8
  completion_from: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2] * sales_tax\n    return total\n"
  completion_to: "cost = 0\n    for item in grocery_list:\n        cost += item[1]\
    \ * item[2]\n    tax = cost * sales_tax\n    total_cost = cost + tax\n    return\
    \ total_cost\n"
  diff: "--- \n+++ \n@@ -16,8 +16,21 @@\n within the list.-this-value+these+numbers+will+all+be+added+together+and+stored+in+variable+'cost'.+the+variable+'cost'\
    \ will then be@@ -29,15 +42,39 @@\n of the list.-these-two-numbers+the+product\
    \ will be-added-to-each-other+stored+in+a+new+variable,+'tax'.+a+new+variable,+'total_cost',+will+contain+the+sum+of+the+values+of+'cost'\
    \ and-returned+'tax'.+the+function+will+return+the+value+of+the+variable+'total_cost'.\
    \ \"\"\""
  node_from: &id006 !Node
    _node_tags: null
    id: 8
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '1.0101

      '
    - '0.0

      '
    - '3.5

      '
  node_to: *id003
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    the function\
    \ will multiply the last two values in each list within the list. this value will\
    \ then be multiplied by the value outside of the list. these two numbers will\
    \ be added to each other and returned\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    the function\
    \ will multiply the last two values in each list within the list. these numbers\
    \ will all be added together and stored in variable 'cost'. the variable 'cost'\
    \ will then be multiplied by the value outside of the list. the product will be\
    \ stored in a new variable, 'tax'. a new variable, 'total_cost', will contain\
    \ the sum of the values of 'cost' and 'tax'. the function will return the value\
    \ of the variable 'total_cost'.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student40
- !Edge
  _edge_tags:
  - a7
  attempt_id: 2
  clues: &id017
  - 2
  - 4
  - 5
  - 6
  - 7
  - 8
  completion_from: "cost = 0\n    for item in grocery_list:\n        cost += item[1]\
    \ * item[2]\n    tax = cost * sales_tax\n    total_cost = cost + tax\n    return\
    \ total_cost\n"
  completion_to: "cost = 0\n    for item in grocery_list:\n        cost += item[1]\
    \ * item[2]\n    tax = cost * sales_tax\n    total_cost = round(cost + tax, 2)\n\
    \    return total_cost\n"
  diff: "--- \n+++ \n@@ -68,6 +68,17 @@\n and 'tax'. the+value+of+total_cost+will+be+rounded+to+two+decimal+places.+the\
    \ function will return"
  node_from: *id003
  node_to: *id004
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    the function\
    \ will multiply the last two values in each list within the list. these numbers\
    \ will all be added together and stored in variable 'cost'. the variable 'cost'\
    \ will then be multiplied by the value outside of the list. the product will be\
    \ stored in a new variable, 'tax'. a new variable, 'total_cost', will contain\
    \ the sum of the values of 'cost' and 'tax'. the function will return the value\
    \ of the variable 'total_cost'.\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    the function\
    \ will multiply the last two values in each list within the list. these numbers\
    \ will all be added together and stored in variable 'cost'. the variable 'cost'\
    \ will then be multiplied by the value outside of the list. the product will be\
    \ stored in a new variable, 'tax'. a new variable, 'total_cost', will contain\
    \ the sum of the values of 'cost' and 'tax'. the value of total_cost will be rounded\
    \ to two decimal places. the function will return the value of the variable 'total_cost'.\n\
    \    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student40
- !Edge
  _edge_tags:
  - a7
  attempt_id: 1
  clues: &id018
  - 2
  - 4
  - 5
  - 7
  completion_from: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    total += total * sales_tax\n    return total\n"
  completion_to: "total_bill = 0\n    for item in grocery_list:\n        total_bill\
    \ += round(item[1] * item[2], 2)\n    total_bill = round(total_bill * (1 + sales_tax),\
    \ 2)\n    return total_bill\n"
  diff: "--- \n+++ \n@@ -17,5 +17,19 @@\n index 1 and-2.+2+and+round+to+the+nearest+hundredths+if+there+are+more+than+2+decimal+places.\
    \ \"\"\""
  node_from: *id003
  node_to: *id004
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Add up the\
    \ values of the product of the values stored in index 1 and 2. \n    \"\"\"\n\
    \    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Add up the\
    \ values of the product of the values stored in index 1 and 2 and round to the\
    \ nearest hundredths if there are more than 2 decimal places. \n    \"\"\"\n \
    \   "
  state: success
  total_attempts: 2
  username: student44
- !Edge
  _edge_tags:
  - a7
  attempt_id: 1
  clues: &id019
  - 1
  - 2
  - 4
  - 5
  - 6
  - 7
  completion_from: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    return total * (1 + sales_tax)\n"
  completion_to: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    return round(total * (1 + sales_tax), 2)\n\nprint(total_bill(grocery_list,\
    \ 0.08))\n"
  diff: "--- \n+++ \n@@ -62,4 +62,9 @@\n the sales tax.+Round+to+the+nearest+hundredth\
    \ \"\"\""
  node_from: *id005
  node_to: *id004
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Receive\
    \ a list containing items in a grocery list. Each element in the list contains\
    \ the name of the item, the quantity purchased, and the price of the item. Calculate\
    \ the total price of each element in the list by multiplying the price by the\
    \ quantity for each element. Add them up, and multiply the total by the sales\
    \ tax.\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Receive a\
    \ list containing items in a grocery list. Each element in the list contains the\
    \ name of the item, the quantity purchased, and the price of the item. Calculate\
    \ the total price of each element in the list by multiplying the price by the\
    \ quantity for each element. Add them up, and multiply the total by the sales\
    \ tax. Round to the nearest hundredth\n    \"\"\"\n    "
  state: fail
  total_attempts: 2
  username: student50
- !Edge
  _edge_tags:
  - m6
  attempt_id: 1
  clues: &id020
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 8
  completion_from: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    return int(total * sales_tax)\n"
  completion_to: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    return total * sales_tax\n"
  diff: "--- \n+++ \n@@ -37,7 +37,7 @@\n order. returns an-integer+float that is the"
  node_from: &id010 !Node
    _node_tags: null
    id: 7
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '1

      '
    - '0

      '
    - '3

      '
  node_to: *id006
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    takes a\
    \ list of groceries and a value for sales tax. the list of groceries contains\
    \ a list for every item. each item's list contains its name, quantity, and price,\
    \ in that order. returns an integer that is the sales tax times the sum of all\
    \ goods' quantity*price\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    takes a list\
    \ of groceries and a value for sales tax. the list of groceries contains a list\
    \ for every item. each item's list contains its name, quantity, and price, in\
    \ that order. returns an float that is the sales tax times the sum of all goods'\
    \ quantity*price\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student59
- !Edge
  _edge_tags:
  - m6
  attempt_id: 2
  clues: &id021
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 8
  completion_from: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    return total * sales_tax\n"
  completion_to: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    return total * sales_tax * 100\n"
  diff: "--- \n+++ \n@@ -44,6 +44,8 @@\n sales tax times+100+times the sum of"
  node_from: *id006
  node_to: &id007 !Node
    _node_tags: null
    id: 4
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '101.01

      '
    - '0.0

      '
    - '350.0

      '
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    takes a\
    \ list of groceries and a value for sales tax. the list of groceries contains\
    \ a list for every item. each item's list contains its name, quantity, and price,\
    \ in that order. returns an float that is the sales tax times the sum of all goods'\
    \ quantity*price\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    takes a list\
    \ of groceries and a value for sales tax. the list of groceries contains a list\
    \ for every item. each item's list contains its name, quantity, and price, in\
    \ that order. returns an float that is the sales tax times 100 times the sum of\
    \ all goods' quantity*price\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student59
- !Edge
  _edge_tags:
  - 0
  attempt_id: 3
  clues: &id022
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 8
  completion_from: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    return total * sales_tax * 100\n"
  completion_to: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    return total * sales_tax\n"
  diff: "--- \n+++ \n@@ -44,7 +44,6 @@\n sales tax times-100 times the sum"
  node_from: *id007
  node_to: *id006
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    takes a\
    \ list of groceries and a value for sales tax. the list of groceries contains\
    \ a list for every item. each item's list contains its name, quantity, and price,\
    \ in that order. returns an float that is the sales tax times 100 times the sum\
    \ of all goods' quantity*price\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    takes a list\
    \ of groceries and a value for sales tax. the list of groceries contains a list\
    \ for every item. each item's list contains its name, quantity, and price, in\
    \ that order. returns an float that is the sales tax times times the sum of all\
    \ goods' quantity*price\n    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student59
- !Edge
  _edge_tags:
  - a7
  attempt_id: 1
  clues: &id023
  - 1
  - 2
  - 3
  - 6
  - 7
  - 8
  completion_from: "total_bill = 0\n    for i in range(len(grocery_list)):\n     \
    \   total_bill += grocery_list[i][1] * grocery_list[i][2]\n    total_bill = total_bill\
    \ * (1 + sales_tax)\n    return total_bill\n"
  completion_to: "total_bill = 0\n    for item in grocery_list:\n        total_bill\
    \ += item[1] * item[2]\n    total_bill += total_bill * sales_tax\n    return round(total_bill,\
    \ 2)\n"
  diff: "--- \n+++ \n@@ -39,4 +39,11 @@\n items returns it.+This+function+rounds+to+2+decimal+points\
    \ \"\"\""
  node_from: *id005
  node_to: *id004
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function\
    \ takes in a 2d list and a double as its parameters. The 2d list is given like\
    \ [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then\
    \ calculates the sales_tax of the items returns it. \n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    This function\
    \ takes in a 2d list and a double as its parameters. The 2d list is given like\
    \ [['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]]. This function then\
    \ calculates the sales_tax of the items returns it. This function rounds to 2\
    \ decimal points\n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student60
- !Edge
  _edge_tags:
  - m6
  attempt_id: 1
  clues: &id024
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 8
  completion_from: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    total *= sales_tax\n    return total\n"
  completion_to: "total = 0\n    for i in range(len(grocery_list)):\n        total\
    \ += grocery_list[i][1] * grocery_list[i][2]\n    total = total * (1 + sales_tax)\n\
    \    return total\n"
  diff: "--- \n+++ \n@@ -42,6 +42,8 @@\n that value by+1+plus the inputted number."
  node_from: *id006
  node_to: *id005
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function\
    \ takes in a list of lists and a number. For every list in the list, the function\
    \ multiplies the second value by the third value, sums all of the products of\
    \ each list, and multiplies that value by the inputted number. That result is\
    \ outputted.\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function\
    \ takes in a list of lists and a number. For every list in the list, the function\
    \ multiplies the second value by the third value, sums all of the products of\
    \ each list, and multiplies that value by 1 plus the inputted number. That result\
    \ is outputted.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student63
- !Edge
  _edge_tags:
  - a7
  attempt_id: 2
  clues: &id025
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  - 8
  completion_from: "total = 0\n    for i in range(len(grocery_list)):\n        total\
    \ += grocery_list[i][1] * grocery_list[i][2]\n    total = total * (1 + sales_tax)\n\
    \    return total\n"
  completion_to: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    total = round(total * (1 + sales_tax), 2)\n    return total\n"
  diff: "--- \n+++ \n@@ -48,7 +48,12 @@\n inputted number. That-result+result,+rounded+to+two+decimal+places,\
    \ is outputted. \"\"\""
  node_from: *id005
  node_to: *id004
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function\
    \ takes in a list of lists and a number. For every list in the list, the function\
    \ multiplies the second value by the third value, sums all of the products of\
    \ each list, and multiplies that value by 1 plus the inputted number. That result\
    \ is outputted.\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    The function\
    \ takes in a list of lists and a number. For every list in the list, the function\
    \ multiplies the second value by the third value, sums all of the products of\
    \ each list, and multiplies that value by 1 plus the inputted number. That result,\
    \ rounded to two decimal places, is outputted.\n    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student63
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: &id026
  - 2
  - 4
  - 5
  - 6
  completion_from: "total = 0\n    for item in grocery_list:\n        total += item[0]\
    \ * item[1]\n    total = total * (1 + sales_tax)\n    return total\n"
  completion_to: "total = 0\n    for item in grocery_list:\n        total += item[0]\
    \ * item[1]\n    total *= 1 + sales_tax\n    return total\n"
  diff: ''
  node_from: &id008 !Node
    _node_tags: null
    id: 9
    stderr:
    - 'TypeError: unsupported operand type(s) for +=: ''int'' and ''str'''
    - 'TypeError: unsupported operand type(s) for +=: ''int'' and ''str'''
    - 'TypeError: unsupported operand type(s) for +=: ''int'' and ''str'''
    stdout:
    - ''
    - ''
    - ''
  node_to: *id008
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list,\
    \ multiple index 0 with index 1, repeat for all lists in grocery_list and add\
    \ them together. Then, multiple 100% + sale_tax to result.\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list,\
    \ multiple index 0 with index 1, repeat for all lists in grocery_list and add\
    \ them together. Then, multiple 100% + sale_tax to result.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student64
- !Edge
  _edge_tags:
  - m4
  attempt_id: 2
  clues: &id027
  - 2
  - 4
  - 5
  - 6
  completion_from: "total = 0\n    for item in grocery_list:\n        total += item[0]\
    \ * item[1]\n    total *= 1 + sales_tax\n    return total\n"
  completion_to: "total_bill = 0\n    for item in grocery_list:\n        total_bill\
    \ += item[1] * item[2]\n    total_bill = total_bill * (1 + sales_tax)\n    return\
    \ total_bill\n"
  diff: "--- \n+++ \n@@ -6,10 +6,10 @@\n grocery_list, multiple index-0+1 with index-1,+2,\
    \ repeat for all"
  node_from: *id008
  node_to: *id005
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list,\
    \ multiple index 0 with index 1, repeat for all lists in grocery_list and add\
    \ them together. Then, multiple 100% + sale_tax to result.\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list,\
    \ multiple index 1 with index 2, repeat for all lists in grocery_list and add\
    \ them together. Then, multiple 100% + sale_tax to result.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student64
- !Edge
  _edge_tags:
  - a7
  attempt_id: 3
  clues: &id028
  - 2
  - 4
  - 5
  - 6
  - 7
  completion_from: "total_bill = 0\n    for item in grocery_list:\n        total_bill\
    \ += item[1] * item[2]\n    total_bill = total_bill * (1 + sales_tax)\n    return\
    \ total_bill\n"
  completion_to: "total_bill = 0\n    for item in grocery_list:\n        total_bill\
    \ += (item[1] * item[2])\n    total_bill = round(total_bill * (1 + sales_tax),\
    \ 2)\n    return total_bill\n"
  diff: "--- \n+++ \n@@ -27,4 +27,11 @@\n sale_tax to result.+Round+to+the+nearest+2+decimal+places.\
    \ \"\"\""
  node_from: *id005
  node_to: *id004
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list,\
    \ multiple index 1 with index 2, repeat for all lists in grocery_list and add\
    \ them together. Then, multiple 100% + sale_tax to result.\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    In grocery_list,\
    \ multiple index 1 with index 2, repeat for all lists in grocery_list and add\
    \ them together. Then, multiple 100% + sale_tax to result. Round to the nearest\
    \ 2 decimal places.\n    \"\"\"\n    "
  state: success
  total_attempts: 4
  username: student64
- !Edge
  _edge_tags:
  - l2
  attempt_id: 1
  clues: &id029
  - 1
  - 2
  - 4
  - 5
  - 6
  completion_from: "total = 0\n    for item in grocery_list[0]:\n        total +=\
    \ item[1] * item[2]\n    return total * (1 + sales_tax)\n"
  completion_to: "total = 0\n    for item in grocery_list[0]:\n        total += item[1]\
    \ * item[2]\n    return total * (1 + sales_tax)\n"
  diff: "--- \n+++ \n@@ -21,34 +21,13 @@\n is an integer.+for every-element-in-the\
    \ list-of-lists-is-a-list-with-a-string in the 0th index,-integer-in-the-1st-index-and-integer-in-the-second-index.\
    \ multiply the integers"
  node_from: &id009 !Node
    _node_tags: null
    id: 3
    stderr:
    - 'TypeError: can''t multiply sequence by non-int of type ''str'''
    - 'TypeError: can''t multiply sequence by non-int of type ''str'''
    - 'TypeError: can''t multiply sequence by non-int of type ''str'''
    stdout:
    - ''
    - ''
    - ''
  node_to: *id009
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Enter a\
    \ list where the 0th index is a list of lists and the 1st index is an integer.\
    \ every element in the list of lists is a list with a string in the 0th index,\
    \ integer in the 1st index and integer in the second index. multiply the integers\
    \ in the first and second indexes of each list in the list of lists. Add each\
    \ product of each list. Then, multiply by 1 plus the integer in the first index\
    \ of the input list\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Enter a list\
    \ where the 0th index is a list of lists and the 1st index is an integer. for\
    \ every list in the 0th index, multiply the integers in the first and second indexes\
    \ of each list in the list of lists. Add each product of each list. Then, multiply\
    \ by 1 plus the integer in the first index of the input list\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student69
- !Edge
  _edge_tags:
  - m4
  attempt_id: 2
  clues: &id030
  - 1
  - 2
  - 4
  - 5
  - 6
  completion_from: "total = 0\n    for item in grocery_list[0]:\n        total +=\
    \ item[1] * item[2]\n    return total * (1 + sales_tax)\n"
  completion_to: "total = 0\n    for item in grocery_list[0]:\n        total += item[1]\
    \ * item[2]\n    return total * (1 + sales_tax)\n\nprint(total_bill(grocery_list,\
    \ sales_tax))\n"
  diff: "--- \n+++ \n@@ -28,6 +28,9 @@\n the 0th index,+for+every+list multiply the\
    \ integers"
  node_from: *id009
  node_to: *id009
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Enter a\
    \ list where the 0th index is a list of lists and the 1st index is an integer.\
    \ for every list in the 0th index, multiply the integers in the first and second\
    \ indexes of each list in the list of lists. Add each product of each list. Then,\
    \ multiply by 1 plus the integer in the first index of the input list\n    \"\"\
    \"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    Enter a list\
    \ where the 0th index is a list of lists and the 1st index is an integer. for\
    \ every list in the 0th index, for every list multiply the integers in the first\
    \ and second indexes of each list in the list of lists. Add each product of each\
    \ list. Then, multiply by 1 plus the integer in the first index of the input list\n\
    \    \"\"\"\n    "
  state: fail
  total_attempts: 3
  username: student69
- !Edge
  _edge_tags:
  - a7
  attempt_id: 1
  clues: &id031
  - 8
  - 1
  - 5
  - 7
  completion_from: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    total += total * sales_tax\n    return total\n\nprint(total_bill(grocery_list,\
    \ sales_tax))\n"
  completion_to: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    total = total + (total * sales_tax)\n    return round(total,\
    \ 2)\n\nprint(total_bill(grocery_list, sales_tax))"
  diff: "--- \n+++ \n@@ -44,4 +44,7 @@\n outputs the sum+with+four+digits \"\"\""
  node_from: *id003
  node_to: *id004
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    def total_bill(grocery_list,\
    \ sales_tax): takes input \n[['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2,\
    \ 3.50]], 0.07\nand adds val 1 and 2 together, then 4 and 5, then 7 and 8, the\
    \ three new vals are added to val 9 and it outputs the sum\n\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    def total_bill(grocery_list,\
    \ sales_tax): takes input \n[['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2,\
    \ 3.50]], 0.07\nand adds val 1 and 2 together, then 4 and 5, then 7 and 8, the\
    \ three new vals are added to val 9 and it outputs the sum with four digits\n\n\
    \    \"\"\"\n    "
  state: fail
  total_attempts: 2
  username: student75
- !Edge
  _edge_tags:
  - a7
  attempt_id: 1
  clues: &id032
  - 1
  - 3
  - 4
  - 5
  - 6
  - 7
  completion_from: "total_bill = 0\n    for item in grocery_list:\n        total_bill\
    \ += item[1] * item[2]\n    return total_bill * (sales_tax + 1)\n"
  completion_to: "total = 0\n    for item in grocery_list:\n        total += item[1]\
    \ * item[2]\n    total = total * (sales_tax + 1)\n    total = round(total, 2)\n\
    \    return total\n\nprint(total_bill(grocery_list, 0.08))"
  diff: "--- \n+++ \n@@ -43,5 +43,21 @@\n sales tax plus-1+1.+if+the+resulting+number+has+more+than+two+decimal+places+shorten+it+to+two+decimal+places.\
    \ \"\"\""
  node_from: *id005
  node_to: *id004
  prompt_from: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    you will\
    \ have two inputs a list of lists and the tax rate. for every list in the list\
    \ of lists multiply the second and third item and add all of them and then multiply\
    \ that by the sales tax plus 1\n    \"\"\"\n    "
  prompt_to: "def total_bill(grocery_list, sales_tax):\n    \"\"\"\n    you will have\
    \ two inputs a list of lists and the tax rate. for every list in the list of lists\
    \ multiply the second and third item and add all of them and then multiply that\
    \ by the sales tax plus 1. if the resulting number has more than two decimal places\
    \ shorten it to two decimal places.\n    \"\"\"\n    "
  state: fail
  total_attempts: 2
  username: student79
nodes:
- *id003
- *id005
- *id002
- *id009
- *id007
- *id004
- *id001
- *id010
- *id006
- *id008
problem: total_bill
problem_clues:
  1: input is a list
  2: list structure explained
  3: input is sales tax
  4: multiply item by its quantity
  5: sum items
  6: apply sales tax
  7: round
  8: return total
student_clues_tracker:
  student23:
  - &id033
    - 1
    - 2
    - 3
    - 5
    - 6
    - 8
  - *id011
  - *id012
  - *id013
  student33:
  - &id034
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 8
  - *id014
  student35:
  - &id035
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 8
  - *id015
  student40:
  - &id036
    - 2
    - 4
    - 6
    - 8
  - *id016
  - *id017
  student44:
  - &id037
    - 2
    - 4
    - 5
  - *id018
  student50:
  - &id038
    - 1
    - 2
    - 4
    - 5
    - 6
  - *id019
  student59:
  - &id039
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 8
  - *id020
  - *id021
  - *id022
  student60:
  - &id040
    - 1
    - 2
    - 3
    - 6
    - 8
  - *id023
  student63:
  - &id041
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 8
  - *id024
  - *id025
  student64:
  - &id042
    - 2
    - 4
    - 5
    - 6
  - *id026
  - *id027
  - *id028
  student69:
  - &id043
    - 1
    - 2
    - 4
    - 5
    - 6
  - *id029
  - *id030
  student75:
  - &id044
    - 1
    - 5
    - 8
  - *id031
  student79:
  - &id045
    - 1
    - 3
    - 4
    - 5
    - 6
  - *id032
student_start_node_tags:
  student23: *id033
  student33: *id034
  student35: *id035
  student40: *id036
  student44: *id037
  student50: *id038
  student59: *id039
  student60: *id040
  student63: *id041
  student64: *id042
  student69: *id043
  student75: *id044
  student79: *id045
