breakout_edges:
  student23: &id003 !Edge
    _edge_tags:
    - m2
    attempt_id: 4
    clues:
    - 1
    - 2
    - 3
    - 4
    completion_from: "if len(s) == 1:\n        return s.upper()\n    else:\n     \
      \   return s[::2].upper() + s[1::2]\n"
    completion_to: "s = s.lower()\n    s = s.replace(\" \", \"\")\n    new_s = \"\"\
      \n    for i in range(len(s)):\n        if i % 2 == 0:\n            new_s +=\
      \ s[i].upper()\n        else:\n            new_s += s[i]\n    return new_s\n\
      \nprint(altText(\"hello\"))\nprint(altText(\"hello world\"))\nprint(alt"
    diff: "--- \n+++ \n@@ -41,5 +41,12 @@\n phrase that was-given.+given,+including+all+characters+upper+and+lower+case.\
      \ \"\"\""
    node_from: !Node
      _node_tags: null
      id: 5
      stderr: &id001
      - ''
      - ''
      - ''
      stdout: &id002
      - 'ILV OSEDLHN WM oet e opissi.

        '
      - 'CMUESoptr

        '
      - 'T

        '
    node_to: !Node
      _node_tags: null
      id: 10
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - 'IlOvEtOsEeDoLpHiNsSwIm.

        '
      - 'CoMpUtErS

        '
      - 'T

        '
    prompt_from: "def altText(s):\n    \"\"\"\n    This function takes in a word or\
      \ sentence and outputs every other letter as upper cas. If it is just a one\
      \ letter word it is turned into an upper case letter. It then returns the whole\
      \ phrase that was given.\n    \"\"\"\n    "
    prompt_to: "def altText(s):\n    \"\"\"\n    This function takes in a word or\
      \ sentence and outputs every other letter as upper cas. If it is just a one\
      \ letter word it is turned into an upper case letter. It then returns the whole\
      \ phrase that was given, including all characters upper and lower case. \n \
      \   \"\"\"\n    "
    state: neutral
    total_attempts: 8
    username: student23
  student35: null
  student44: null
  student59: null
  student63: null
  student75: null
cycle_summary:
  student23:
  - !Edge
    _edge_tags:
    - m2
    attempt_id: 2
    clues:
    - 1
    - 2
    - 4
    completion_from: "if len(s) == 1:\n        return s.upper()\n    else:\n     \
      \   return s[::2].upper() + s[1::2]\n\nprint(altText(\"hello\"))\nprint(altText(\"\
      hey\"))\nprint(altText(\"h\"))\nprint(altText(\"hi\"))\nprint(altText(\"h e\
      \ y\"))\n"
    completion_to: "if len(s) == 1:\n        return s.upper()\n    else:\n       \
      \ return s[::2].upper() + s[1::2]\n\nprint(altText(\"hello\"))\nprint(altText(\"\
      hi\"))\nprint(altText(\"h\"))\nprint(altText(\"what\"))\nprint(altText(\"is\"\
      ))\nprint(altText(\"up\"))\nprint(altText(\"dog\"))\nprint(altText(\""
    diff: "--- \n+++ \n@@ -17,7 +17,6 @@\n as upper case,-not including the lower"
    node_from: !Node
      _node_tags: null
      id: 5
      stderr: *id001
      stdout: *id002
    node_to: !Node
      _node_tags: null
      id: 5
      stderr: *id001
      stdout: *id002
    prompt_from: "def altText(s):\n    \"\"\"\n    This function takes in a word or\
      \ sentence and outputs every other letter as upper case, not including the lower\
      \ case letters. If it is just a one letter word it is turned into an upper case\
      \ letter. \n    \"\"\"\n    "
    prompt_to: "def altText(s):\n    \"\"\"\n    This function takes in a word or\
      \ sentence and outputs every other letter as upper case, including the lower\
      \ case letters. If it is just a one letter word it is turned into an upper case\
      \ letter. \n    \"\"\"\n    "
    state: neutral
    total_attempts: 8
    username: student23
  - *id003
  student35:
  - !Edge
    _edge_tags:
    - m2
    attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 4
    completion_from: 'return s[::2].upper() + s[1::2]

      '
    completion_to: 'return "".join([s[i].upper() if i%2==0 else s[i] for i in range(len(s))])

      '
    diff: "--- \n+++ \n@@ -31,10 +31,30 @@\n index positions into-uppercase-and-then-return+uppercase.+The+characters+of\
      \ the-string.+string+should+be+in+the+same+order+as+below,+only+the+characters+in+even+index+positions+are+to+be+turned+uppercase.\
      \ \"\"\""
    node_from: !Node
      _node_tags: null
      id: 5
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - 'ILV OSEDLHN WM oet e opissi.

        '
      - 'CMUESoptr

        '
      - 'T

        '
    node_to: !Node
      _node_tags: null
      id: 9
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - 'I LoVe tO SeE DoLpHiNs sWiM.

        '
      - 'CoMpUtErS

        '
      - 'T

        '
    prompt_from: "def altText(s):\n    \"\"\"\n    's' is a string value provided.\
      \ Starting from the first character of the string, the function is supposed\
      \ to convert the characters of the string in even index positions into uppercase\
      \ and then return the string.\n    \"\"\"\n    "
    prompt_to: "def altText(s):\n    \"\"\"\n    's' is a string value provided. Starting\
      \ from the first character of the string, the function is supposed to convert\
      \ the characters of the string in even index positions into uppercase. The characters\
      \ of the string should be in the same order as below, only the characters in\
      \ even index positions are to be turned uppercase.\n    \"\"\"\n    "
    state: success
    total_attempts: 3
    username: student35
  student44: []
  student59:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 1
    clues:
    - 1
    - 3
    completion_from: "s = list(s)\n    for i in range(len(s)):\n        if random.random()\
      \ < 0.5:\n            s[i] = s[i].upper()\n    return ''.join(s)\n"
    completion_to: "words = s.split()\n    newWords = []\n    for word in words:\n\
      \        newWord = ''\n        for i in range(len(word)):\n            if random.random()\
      \ < 0.5:\n                newWord += word[i].upper()\n            else:\n  \
      \              newWord += word[i]\n        newWords.append(newWord)\n    return\
      \ ' '.join(newWords)\n"
    diff: "--- \n+++ \n@@ -3,11 +3,14 @@\n \"\"\" takes a-string-and+string. capitalizes\
      \ random letters in-it+each+word+of+that+string. \"\"\""
    node_from: !Node
      _node_tags: null
      id: 11
      stderr: &id004
      - 'NameError: name ''random'' is not defined'
      - 'NameError: name ''random'' is not defined'
      - 'NameError: name ''random'' is not defined'
      stdout: &id005
      - ''
      - ''
      - ''
    node_to: !Node
      _node_tags: null
      id: 11
      stderr: *id004
      stdout: *id005
    prompt_from: "def altText(s):\n    \"\"\"\n    takes a string and capitalizes\
      \ random letters in it\n    \"\"\"\n    "
    prompt_to: "def altText(s):\n    \"\"\"\n    takes a string. capitalizes random\
      \ letters in each word of that string. \n    \"\"\"\n    "
    state: neutral
    total_attempts: 3
    username: student59
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 2
    clues:
    - 1
    - 3
    completion_from: "words = s.split()\n    newWords = []\n    for word in words:\n\
      \        newWord = ''\n        for i in range(len(word)):\n            if random.random()\
      \ < 0.5:\n                newWord += word[i].upper()\n            else:\n  \
      \              newWord += word[i]\n        newWords.append(newWord)\n    return\
      \ ' '.join(newWords)\n"
    completion_to: "words = s.split()\n    altWords = []\n    for word in words:\n\
      \        altWord = \"\"\n        for i in range(len(word)):\n            if\
      \ random.randint(0,1) == 1:\n                altWord += word[i].upper()\n  \
      \          else:\n                altWord += word[i]\n        altWords.append(altWord)\n\
      \    return altWords\n"
    diff: "--- \n+++ \n@@ -12,5 +12,19 @@\n word of that-string.+string+and+adds+the+new+words+to+a+list.+returns+this+new+list+of+words\
      \ \"\"\""
    node_from: !Node
      _node_tags: null
      id: 11
      stderr: *id004
      stdout: *id005
    node_to: !Node
      _node_tags: null
      id: 11
      stderr: *id004
      stdout: *id005
    prompt_from: "def altText(s):\n    \"\"\"\n    takes a string. capitalizes random\
      \ letters in each word of that string. \n    \"\"\"\n    "
    prompt_to: "def altText(s):\n    \"\"\"\n    takes a string. capitalizes random\
      \ letters in each word of that string and adds the new words to a list. returns\
      \ this new list of words\n    \"\"\"\n    "
    state: fail
    total_attempts: 3
    username: student59
  student63: []
  student75: []
