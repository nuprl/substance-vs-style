breakout_edges:
  student11: null
  student13: &id003 !Edge
    _edge_tags:
    - a4
    attempt_id: 9
    clues:
    - 1
    - 2
    - 4
    completion_from: "if n == 0:\n        return True\n    elif n == 1:\n        return\
      \ True\n    elif n == 2:\n        return True\n    elif n == 3:\n        return\
      \ True\n    elif n == 5:\n        return True\n    elif n == 8:\n        return\
      \ True\n    elif n == 13:\n        return True\n    elif n == 21:\n        return\
      \ True\n    elif n =="
    completion_to: "fib_set = set()\n    fib_set.add(0)\n    fib_set.add(1)\n    fib_set.add(1)\n\
      \    for i in range(2, n):\n        fib_set.add(fib_set.pop() + fib_set.pop())\n\
      \    return n in fib_set\n"
    diff: "--- \n+++ \n@@ -1,14 +1,23 @@\n def fib(n): \"\"\"+Put+all+possible+Fibonacci+numbers+in+a+set.\
      \ Check if+the inputted number is-a-Fibonacci-number.+in+that+set. If it is,@@\
      \ -18,9 +27,9 @@\n it is not-a-Fibonacci-number,+in+the+set, return False. \"\
      \"\""
    node_from: &id001 !Node
      _node_tags: null
      id: 9
      stderr:
      - 'SyntaxError: invalid syntax'
      - 'SyntaxError: invalid syntax'
      - 'SyntaxError: invalid syntax'
      - 'SyntaxError: invalid syntax'
      stdout:
      - ''
      - ''
      - ''
      - ''
    node_to: !Node
      _node_tags: null
      id: 5
      stderr:
      - ''
      - 'KeyError: ''pop from an empty set'''
      - 'KeyError: ''pop from an empty set'''
      - 'KeyError: ''pop from an empty set'''
      stdout:
      - 'True

        '
      - ''
      - ''
      - ''
    prompt_from: "def fib(n):\n    \"\"\"\n    Check if inputted number is a Fibonacci\
      \ number. If it is, return True. If it is not a Fibonacci number, return False.\n\
      \    \"\"\"\n    "
    prompt_to: "def fib(n):\n    \"\"\"\n    Put all possible Fibonacci numbers in\
      \ a set. Check if the inputted number is in that set. If it is, return True.\
      \ If it is not in the set, return False.\n    \"\"\"\n    "
    state: neutral
    total_attempts: 11
    username: student13
  student16: null
  student2: &id006 !Edge
    _edge_tags:
    - m5
    attempt_id: 3
    clues:
    - 2
    - 5
    completion_from: "if n == 0:\n        return 0\n    elif n == 1:\n        return\
      \ 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    completion_to: "if n == 19:\n        return False\n    else:\n        return True\n\
      \nprint(fib(19))\n"
    diff: "--- \n+++ \n@@ -14,18 +14,15 @@\n if the value-contains-a-'9'+is+19 but\
      \ returns true if the value-does+is not-contain-a-9+19 \"\"\""
    node_from: &id005 !Node
      _node_tags: null
      id: 6
      stderr:
      - ''
      - ''
      - ''
      - ''
      stdout:
      - '1

        '
      - '233

        '
      - '10946

        '
      - '4181

        '
    node_to: !Node
      _node_tags: null
      id: 4
      stderr:
      - ''
      - ''
      - ''
      - ''
      stdout:
      - 'True

        '
      - 'True

        '
      - 'True

        '
      - 'False

        '
    prompt_from: "def fib(n):\n    \"\"\"\n    this function returns only true or\
      \ false. It returns false if the value contains a '9' but returns true if the\
      \ value does not contain a 9\n    \"\"\"\n    "
    prompt_to: "def fib(n):\n    \"\"\"\n    this function returns only true or false.\
      \ It returns false if the value is 19 but returns true if the value is not 19\n\
      \    \"\"\"\n    "
    state: success
    total_attempts: 4
    username: student2
  student22: null
  student37: null
  student5: null
  student8: null
cycle_summary:
  student11: []
  student13:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 4
    clues:
    - 1
    - 2
    completion_from: "if n == 0:\n        return True\n    elif n == 1:\n        return\
      \ True\n    elif n == 2:\n        return True\n    elif n == 3:\n        return\
      \ True\n    elif n == 5:\n        return True\n    elif n == 8:\n        return\
      \ True\n    elif n == 13:\n        return True\n    elif n == 21:\n        return\
      \ True\n    elif n =="
    completion_to: "if n == 0:\n        return True\n    elif n == 1:\n        return\
      \ True\n    else:\n        return fib(n-1) + fib(n-2) == n\n"
    diff: ''
    node_from: *id001
    node_to: &id002 !Node
      _node_tags: null
      id: 7
      stderr:
      - ''
      - ''
      - ''
      - ''
      stdout:
      - 'True

        '
      - 'False

        '
      - 'False

        '
      - 'False

        '
    prompt_from: "def fib(n):\n    \"\"\"\n    Check if inputted number is a Fibonacci\
      \ number. If it is, return True, otherwise, return False.\n    \"\"\"\n    "
    prompt_to: "def fib(n):\n    \"\"\"\n    Check if inputted number is a Fibonacci\
      \ number. If it is, return True, otherwise, return False.\n    \"\"\"\n    "
    state: neutral
    total_attempts: 11
    username: student13
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 6
    clues:
    - 1
    - 2
    completion_from: "if n == 0:\n        return True\n    elif n == 1:\n        return\
      \ True\n    elif n == 2:\n        return True\n    elif n == 3:\n        return\
      \ True\n    elif n == 5:\n        return True\n    elif n == 8:\n        return\
      \ True\n    elif n == 13:\n        return True\n    elif n == 21:\n        return\
      \ True\n    elif n =="
    completion_to: "if n == 0:\n        return True\n    elif n == 1:\n        return\
      \ True\n    else:\n        return fib(n-1) + fib(n-2) == n\n"
    diff: ''
    node_from: *id001
    node_to: *id002
    prompt_from: "def fib(n):\n    \"\"\"\n    Check if inputted number is a Fibonacci\
      \ number. If it is, return True. If it is not a Fibonacci number, return False.\n\
      \    \"\"\"\n    "
    prompt_to: "def fib(n):\n    \"\"\"\n    Check if inputted number is a Fibonacci\
      \ number. If it is, return True. If it is not a Fibonacci number, return False.\n\
      \    \"\"\"\n    "
    state: neutral
    total_attempts: 11
    username: student13
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 7
    clues:
    - 1
    - 2
    completion_from: "if n == 0:\n        return True\n    elif n == 1:\n        return\
      \ True\n    else:\n        return fib(n-1) + fib(n-2) == n\n"
    completion_to: "if n == 0 or n == 1:\n        return True\n    else:\n       \
      \ return fib(n-1) + fib(n-2) == n\n"
    diff: ''
    node_from: *id002
    node_to: *id002
    prompt_from: "def fib(n):\n    \"\"\"\n    Check if inputted number is a Fibonacci\
      \ number. If it is, return True. If it is not a Fibonacci number, return False.\n\
      \    \"\"\"\n    "
    prompt_to: "def fib(n):\n    \"\"\"\n    Check if inputted number is a Fibonacci\
      \ number. If it is, return True. If it is not a Fibonacci number, return False.\n\
      \    \"\"\"\n    "
    state: neutral
    total_attempts: 11
    username: student13
  - *id003
  student16:
  - !Edge
    _edge_tags:
    - a2
    attempt_id: 1
    clues:
    - 2
    - 5
    completion_from: "if n == 0:\n        return 0\n    elif n == 1:\n        return\
      \ 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    completion_to: "if n == 0:\n        return 0\n    elif n == 1:\n        return\
      \ 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    diff: "--- \n+++ \n@@ -7,5 +7,9 @@\n number doesn't have-9+9,+return+true+or+false\
      \ \"\"\""
    node_from: &id004 !Node
      _node_tags: null
      id: 6
      stderr:
      - ''
      - ''
      - ''
      - ''
      stdout:
      - '1

        '
      - '233

        '
      - '10946

        '
      - '4181

        '
    node_to: *id004
    prompt_from: "def fib(n):\n    \"\"\"\n    check if a number doesn't have 9\n\
      \    \"\"\"\n    "
    prompt_to: "def fib(n):\n    \"\"\"\n    check if a number doesn't have 9, return\
      \ true or false\n    \"\"\"\n    "
    state: fail
    total_attempts: 2
    username: student16
  student2:
  - !Edge
    _edge_tags:
    - m2
    attempt_id: 1
    clues:
    - 2
    - 5
    completion_from: "if n == 0:\n        return 0\n    elif n == 1:\n        return\
      \ 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    completion_to: "if n == 0:\n        return 0\n    elif n == 1:\n        return\
      \ 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    diff: "--- \n+++ \n@@ -10,5 +10,16 @@\n value contains a+'9'+but+returns+true+if+the+value+does+not+contain+a\
      \ 9 \"\"\""
    node_from: *id005
    node_to: *id005
    prompt_from: "def fib(n):\n    \"\"\"\n    this function returns false if the\
      \ value contains a 9\n    \"\"\"\n    "
    prompt_to: "def fib(n):\n    \"\"\"\n    this function returns false if the value\
      \ contains a '9' but returns true if the value does not contain a 9\n    \"\"\
      \"\n    "
    state: neutral
    total_attempts: 4
    username: student2
  - !Edge
    _edge_tags:
    - m2
    attempt_id: 2
    clues:
    - 2
    - 5
    completion_from: "if n == 0:\n        return 0\n    elif n == 1:\n        return\
      \ 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    completion_to: "if n == 0:\n        return 0\n    elif n == 1:\n        return\
      \ 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    diff: "--- \n+++ \n@@ -3,6 +3,12 @@\n \"\"\" this function+returns+only+true+or+false.+It\
      \ returns false if"
    node_from: *id005
    node_to: *id005
    prompt_from: "def fib(n):\n    \"\"\"\n    this function returns false if the\
      \ value contains a '9' but returns true if the value does not contain a 9\n\
      \    \"\"\"\n    "
    prompt_to: "def fib(n):\n    \"\"\"\n    this function returns only true or false.\
      \ It returns false if the value contains a '9' but returns true if the value\
      \ does not contain a 9\n    \"\"\"\n    "
    state: neutral
    total_attempts: 4
    username: student2
  - *id006
  student22: []
  student37: []
  student5:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 1
    clues:
    - 2
    - 5
    completion_from: "if n == 0:\n        return 0\n    elif n == 1:\n        return\
      \ 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    completion_to: "if n == 0:\n        return 0\n    elif n == 1:\n        return\
      \ 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    diff: "--- \n+++ \n@@ -7,17 +7,17 @@\n should take an-int-as-a input and return\
      \ a Boolean+(true+or+false) expression declaring-wither+wether the input only"
    node_from: &id007 !Node
      _node_tags: null
      id: 6
      stderr:
      - ''
      - ''
      - ''
      - ''
      stdout:
      - '1

        '
      - '233

        '
      - '10946

        '
      - '4181

        '
    node_to: *id007
    prompt_from: "def fib(n):\n    \"\"\"\n    the function fib(n) should take an\
      \ int as a input and return a Boolean expression declaring wither the input\
      \ only contains 1, 2, or 3\n    \"\"\"\n    "
    prompt_to: "def fib(n):\n    \"\"\"\n    the function fib(n) should take an input\
      \ and return a Boolean (true or false) expression declaring wether the input\
      \ only contains 1, 2, or 3\n    \"\"\"\n    "
    state: neutral
    total_attempts: 3
    username: student5
  - !Edge
    _edge_tags:
    - m2
    attempt_id: 2
    clues:
    - 2
    - 5
    completion_from: "if n == 0:\n        return 0\n    elif n == 1:\n        return\
      \ 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    completion_to: "if n == 0:\n        return 0\n    elif n == 1:\n        return\
      \ 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    diff: "--- \n+++ \n@@ -10,14 +10,8 @@\n input and return-a-Boolean-(true-or-false)-expression-declaring-wether+true+if\
      \ the input only@@ -26,4 +20,12 @@\n 2, or 3+and+false+if+the+input+contains+other+numbers\
      \ \"\"\""
    node_from: *id007
    node_to: *id007
    prompt_from: "def fib(n):\n    \"\"\"\n    the function fib(n) should take an\
      \ input and return a Boolean (true or false) expression declaring wether the\
      \ input only contains 1, 2, or 3\n    \"\"\"\n    "
    prompt_to: "def fib(n):\n    \"\"\"\n    the function fib(n) should take an input\
      \ and return true if the input only contains 1, 2, or 3 and false if the input\
      \ contains other numbers\n    \"\"\"\n    "
    state: fail
    total_attempts: 3
    username: student5
  student8: []
