breakout_edges:
  student1: null
  student14: null
  student24: null
  student28: null
  student39: null
  student46: &id005 !Edge
    _edge_tags:
    - a3
    attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    completion_from: "if month == \"January\" or month == \"February\" or month ==\
      \ \"December\":\n        return \"Winter\"\n    elif month == \"March\" or month\
      \ == \"April\" or month == \"May\":\n        return \"Spring\"\n    elif month\
      \ == \"June\" or month == \"July\" or month == \"August\":\n        return \"\
      Summer\"\n    elif month == \"September\" or month == \"October\" or month ==\
      \ \"November\":"
    completion_to: "if month in [\"january\", \"february\", \"december\"]:\n     \
      \   return \"winter\"\n    elif month in [\"march\", \"april\", \"may\"]:\n\
      \        return \"spring\"\n    elif month in [\"june\", \"july\", \"august\"\
      ]:\n        return \"summer\"\n    elif month in [\"september\", \"october\"\
      , \"november\"]:\n        return \"fall\""
    diff: "--- \n+++ \n@@ -18,5 +18,8 @@\n associated with that-month.+month,+in+lower+case.\
      \ \"\"\""
    node_from: &id004 !Node
      _node_tags: null
      id: 8
      stderr:
      - 'IndentationError: expected an indented block after ''elif'' statement on
        line 11'
      - 'IndentationError: expected an indented block after ''elif'' statement on
        line 11'
      - 'IndentationError: expected an indented block after ''elif'' statement on
        line 11'
      - 'IndentationError: expected an indented block after ''elif'' statement on
        line 11'
      stdout:
      - ''
      - ''
      - ''
      - ''
    node_to: !Node
      _node_tags: null
      id: 13
      stderr:
      - ''
      - ''
      - ''
      - ''
      stdout:
      - 'None

        '
      - 'None

        '
      - 'None

        '
      - 'None

        '
    prompt_from: "def getSeason(month):\n    \"\"\"\n    The functions take in a string,\
      \ representing a month, then outputs the season commonly associated with that\
      \ month.\n    \"\"\"\n    "
    prompt_to: "def getSeason(month):\n    \"\"\"\n    The functions take in a string,\
      \ representing a month, then outputs the season commonly associated with that\
      \ month, in lower case.\n    \"\"\"\n    "
    state: neutral
    total_attempts: 4
    username: student46
  student47: null
  student65: null
  student7: null
cycle_summary:
  student1: []
  student14:
  - !Edge
    _edge_tags:
    - m4
    attempt_id: 3
    clues:
    - 2
    - 3
    - 4
    completion_from: "if month == 12 or month == 1 or month == 2:\n        return\
      \ \"winter\"\n    elif month == 3 or month == 4 or month == 5:\n        return\
      \ \"spring\"\n    elif month == 6 or month == 7 or month == 8:\n        return\
      \ \"summer\"\n    elif month == 9 or month == 10 or month == 11:\n        return\
      \ \"fall\"\n"
    completion_to: "if month == 12 or month == 1 or month == 2:\n        return \"\
      winter\"\n    elif month == 3 or month == 4 or month == 5:\n        return \"\
      spring\"\n    elif month == 6 or month == 7 or month == 8:\n        return \"\
      summer\"\n    elif month == 9 or month == 10 or month == 11:\n        return\
      \ \"fall\"\n"
    diff: "--- \n+++ \n@@ -44,4 +44,10 @@\n No else statement.+12+==+December,+1+==+January\
      \ \"\"\""
    node_from: &id001 !Node
      _node_tags: null
      id: 13
      stderr:
      - ''
      - ''
      - ''
      - ''
      stdout:
      - 'None

        '
      - 'None

        '
      - 'None

        '
      - 'None

        '
    node_to: *id001
    prompt_from: "def getSeason(month):\n    \"\"\"\n    if month == 12, 1, or 2,\
      \ output is winter. If month == 3, 4, or 5, output is spring. If month == 6,\
      \ 7, or 8, output is summer. If month == 9, 10, or 11, output is fall. No else\
      \ statement.\n    \"\"\"\n    "
    prompt_to: "def getSeason(month):\n    \"\"\"\n    if month == 12, 1, or 2, output\
      \ is winter. If month == 3, 4, or 5, output is spring. If month == 6, 7, or\
      \ 8, output is summer. If month == 9, 10, or 11, output is fall. No else statement.\
      \ 12 == December, 1 == January\n    \"\"\"\n    "
    state: fail
    total_attempts: 4
    username: student14
  student24:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 2
    clues:
    - 2
    completion_from: "if month in [12, 1, 2]:\n        return 'Winter'\n    elif month\
      \ in [3, 4, 5]:\n        return 'Spring'\n    elif month in [6, 7, 8]:\n   \
      \     return 'Summer'\n    elif month in [9, 10, 11]:\n        return 'Fall'\n\
      \    else:\n        return 'Invalid Month'\n"
    completion_to: "if month in [12, 1, 2]:\n        return 'Winter'\n    elif month\
      \ in [3, 4, 5]:\n        return 'Spring'\n    elif month in [6, 7, 8]:\n   \
      \     return 'Summer'\n    elif month in [9, 10, 11]:\n        return 'Fall'\n\
      \    else:\n        return 'Invalid Month'\n\nprint(getSeason(2))\nprint(getSeason("
    diff: ''
    node_from: &id002 !Node
      _node_tags: null
      id: 4
      stderr:
      - ''
      - ''
      - ''
      - ''
      stdout:
      - 'Invalid Month

        '
      - 'Invalid Month

        '
      - 'Invalid Month

        '
      - 'Invalid Month

        '
    node_to: *id002
    prompt_from: "def getSeason(month):\n    \"\"\"\n    If the number of a month\
      \ is in the list, return the season for that month\n    \"\"\"\n    "
    prompt_to: "def getSeason(month):\n    \"\"\"\n    If the number of a month is\
      \ in the list, return the season for that month\n    \"\"\"\n    "
    state: fail
    total_attempts: 3
    username: student24
  student28:
  - !Edge
    _edge_tags:
    - a1
    attempt_id: 1
    clues:
    - 1
    - 2
    completion_from: "if month == 12 or month == 1 or month == 2:\n        print(\"\
      Winter\")\n    elif month == 3 or month == 4 or month == 5:\n        print(\"\
      Spring\")\n    elif month == 6 or month == 7 or month == 8:\n        print(\"\
      Summer\")\n    elif month == 9 or month == 10 or month == 11:\n        print(\"\
      Fall\")\n    else:\n        print(\"Error: Invalid month\")\n"
    completion_to: "if month == \"January\" or month == \"February\" or month == \"\
      December\":\n        print(\"Winter\")\n    elif month == \"March\" or month\
      \ == \"April\" or month == \"May\":\n        print(\"Spring\")\n    elif month\
      \ == \"June\" or month == \"July\" or month == \"August\":\n        print(\"\
      Summer\")\n    elif month == \"September\" or month == \"October\" or month\
      \ == \"November\":"
    diff: "--- \n+++ \n@@ -7,6 +7,11 @@\n one parameter, month.+Month+is+a+string+and\
      \ Month represents the"
    node_from: &id003 !Node
      _node_tags: null
      id: 2
      stderr:
      - 'IndentationError: expected an indented block after ''if'' statement on line
        5'
      - 'IndentationError: expected an indented block after ''if'' statement on line
        5'
      - 'IndentationError: expected an indented block after ''if'' statement on line
        5'
      - 'IndentationError: expected an indented block after ''if'' statement on line
        5'
      stdout:
      - ''
      - ''
      - ''
      - ''
    node_to: *id003
    prompt_from: "def getSeason(month):\n    \"\"\"\n    This function takes one parameter,\
      \ month. Month represents the months in a year. The code should take seasons\
      \ associated with that month and print the associated season of that month.\
      \ \n    \"\"\"\n    "
    prompt_to: "def getSeason(month):\n    \"\"\"\n    This function takes one parameter,\
      \ month. Month is a string and Month represents the months in a year. The code\
      \ should take seasons associated with that month and print the associated season\
      \ of that month. \n    \"\"\"\n    "
    state: neutral
    total_attempts: 4
    username: student28
  - !Edge
    _edge_tags:
    - m2
    attempt_id: 2
    clues:
    - 1
    - 2
    completion_from: "if month == \"January\" or month == \"February\" or month ==\
      \ \"December\":\n        print(\"Winter\")\n    elif month == \"March\" or month\
      \ == \"April\" or month == \"May\":\n        print(\"Spring\")\n    elif month\
      \ == \"June\" or month == \"July\" or month == \"August\":\n        print(\"\
      Summer\")\n    elif month == \"September\" or month == \"October\" or month\
      \ == \"November\":"
    completion_to: "if month == \"January\" or month == \"February\" or month == \"\
      December\":\n        print(\"Winter\")\n    elif month == \"March\" or month\
      \ == \"April\" or month == \"May\":\n        print(\"Spring\")\n    elif month\
      \ == \"June\" or month == \"July\" or month == \"August\":\n        print(\"\
      Summer\")\n    elif month == \"September\" or month == \"October\" or month\
      \ == \"November\":"
    diff: "--- \n+++ \n@@ -19,6 +19,18 @@\n in a year.+There+are+seasons+associated+with+each+month.+Winter,+spring,+summer,+and+fall.\
      \ The code should"
    node_from: *id003
    node_to: *id003
    prompt_from: "def getSeason(month):\n    \"\"\"\n    This function takes one parameter,\
      \ month. Month is a string and Month represents the months in a year. The code\
      \ should take seasons associated with that month and print the associated season\
      \ of that month. \n    \"\"\"\n    "
    prompt_to: "def getSeason(month):\n    \"\"\"\n    This function takes one parameter,\
      \ month. Month is a string and Month represents the months in a year. There\
      \ are seasons associated with each month. Winter, spring, summer, and fall.\
      \ The code should take seasons associated with that month and print the associated\
      \ season of that month. \n    \"\"\"\n    "
    state: neutral
    total_attempts: 4
    username: student28
  - !Edge
    _edge_tags:
    - a4
    attempt_id: 3
    clues:
    - 1
    - 2
    - 4
    completion_from: "if month == \"January\" or month == \"February\" or month ==\
      \ \"December\":\n        print(\"Winter\")\n    elif month == \"March\" or month\
      \ == \"April\" or month == \"May\":\n        print(\"Spring\")\n    elif month\
      \ == \"June\" or month == \"July\" or month == \"August\":\n        print(\"\
      Summer\")\n    elif month == \"September\" or month == \"October\" or month\
      \ == \"November\":"
    completion_to: "if month == \"January\" or month == \"February\" or month == \"\
      December\":\n        print(\"Winter\")\n    elif month == \"March\" or month\
      \ == \"April\" or month == \"May\":\n        print(\"Spring\")\n    elif month\
      \ == \"June\" or month == \"July\" or month == \"August\":\n        print(\"\
      Summer\")\n    elif month == \"September\" or month == \"October\" or month\
      \ == \"November\":"
    diff: "--- \n+++ \n@@ -48,4 +48,17 @@\n of that month.+The+months+of+December,+January,+and+February+should+be+winter,+and+so+on.\
      \ \"\"\""
    node_from: *id003
    node_to: *id003
    prompt_from: "def getSeason(month):\n    \"\"\"\n    This function takes one parameter,\
      \ month. Month is a string and Month represents the months in a year. There\
      \ are seasons associated with each month. Winter, spring, summer, and fall.\
      \ The code should take seasons associated with that month and print the associated\
      \ season of that month. \n    \"\"\"\n    "
    prompt_to: "def getSeason(month):\n    \"\"\"\n    This function takes one parameter,\
      \ month. Month is a string and Month represents the months in a year. There\
      \ are seasons associated with each month. Winter, spring, summer, and fall.\
      \ The code should take seasons associated with that month and print the associated\
      \ season of that month. The months of December, January, and February should\
      \ be winter, and so on. \n    \"\"\"\n    "
    state: fail
    total_attempts: 4
    username: student28
  student39: []
  student46:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 1
    clues:
    - 1
    - 2
    completion_from: "if month == \"January\" or month == \"February\" or month ==\
      \ \"December\":\n        return \"Winter\"\n    elif month == \"March\" or month\
      \ == \"April\" or month == \"May\":\n        return \"Spring\"\n    elif month\
      \ == \"June\" or month == \"July\" or month == \"August\":\n        return \"\
      Summer\"\n    elif month == \"September\" or month == \"October\" or month ==\
      \ \"November\":"
    completion_to: "if month == \"January\" or month == \"February\" or month == \"\
      December\":\n        return \"Winter\"\n    elif month == \"March\" or month\
      \ == \"April\" or month == \"May\":\n        return \"Spring\"\n    elif month\
      \ == \"June\" or month == \"July\" or month == \"August\":\n        return \"\
      Summer\"\n    elif month == \"September\" or month == \"October\" or month ==\
      \ \"November\":"
    diff: ''
    node_from: *id004
    node_to: *id004
    prompt_from: "def getSeason(month):\n    \"\"\"\n    The functions take in a string,\
      \ representing a month, then outputs the season commonly associated with that\
      \ month.\n    \"\"\"\n    "
    prompt_to: "def getSeason(month):\n    \"\"\"\n    The functions take in a string,\
      \ representing a month, then outputs the season commonly associated with that\
      \ month.\n    \"\"\"\n    "
    state: neutral
    total_attempts: 4
    username: student46
  - *id005
  student47: []
  student65: []
  student7: []
