!Graph
COLORS:
- '#d83034'
- '#f9e858'
- '#008dff'
- '#4ecb8d'
- '#c701ff'
- '#ffcd8e'
- '#003a7d'
- '#Ff73b6'
- '#ff7f50'
- '#7fff00'
- '#8a2be2'
- '#ffd700'
- '#ff4500'
- '#00ced1'
- '#ff1493'
- '#9400d3'
- '#00bfff'
edges:
- !Edge
  _edge_tags:
  - m1
  attempt_id: 1
  clues:
  - 1
  completion_from: "if month in [12, 1, 2]:\n        return 'Winter'\n    elif month\
    \ in [3, 4, 5]:\n        return 'Spring'\n    elif month in [6, 7, 8]:\n     \
    \   return 'Summer'\n    elif month in [9, 10, 11]:\n        return 'Fall'\n \
    \   else:\n        return 'Invalid month'\n"
  completion_to: "if month == \"January\" or month == \"February\" or month == \"\
    December\":\n        return \"Winter\"\n    elif month == \"March\" or month ==\
    \ \"April\" or month == \"May\":\n        return \"Spring\"\n    elif month ==\
    \ \"June\" or month == \"July\" or month == \"August\":\n        return \"Summer\"\
    \n    elif month == \"September\" or month == \"October\" or month == \"November\"\
    :"
  diff: "--- \n+++ \n@@ -3,6 +3,9 @@\n \"\"\" Takes the+name+of+a month and returns"
  node_from: &id003 !Node
    _node_tags: null
    id: 17
    stderr:
    - ''
    - ''
    - ''
    - ''
    stdout:
    - 'Invalid month

      '
    - 'Invalid month

      '
    - 'Invalid month

      '
    - 'Invalid month

      '
  node_to: &id007 !Node
    _node_tags: null
    id: 8
    stderr:
    - 'IndentationError: expected an indented block after ''elif'' statement on line
      11'
    - 'IndentationError: expected an indented block after ''elif'' statement on line
      11'
    - 'IndentationError: expected an indented block after ''elif'' statement on line
      11'
    - 'IndentationError: expected an indented block after ''elif'' statement on line
      11'
    stdout:
    - ''
    - ''
    - ''
    - ''
  prompt_from: "def getSeason(month):\n    \"\"\"\n    Takes the month and returns\
    \ the season that the month falls into.\n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    Takes the name of a month and\
    \ returns the season that the month falls into.\n    \"\"\"\n    "
  state: fail
  total_attempts: 2
  username: student1
- !Edge
  _edge_tags:
  - d1
  - m4
  attempt_id: 1
  clues:
  - 2
  - 3
  - 4
  completion_from: "if month == 12 or month == 1 or month == 2:\n        return \"\
    winter\"\n    elif month == 3 or month == 4 or month == 5:\n        return \"\
    spring\"\n    elif month == 6 or month == 7 or month == 8:\n        return \"\
    summer\"\n    elif month == 9 or month == 10 or month == 11:\n        return \"\
    fall\"\n    else:\n        return \"invalid month\"\n"
  completion_to: "if month == 12 or month == 1 or month == 2:\n        return \"winter\"\
    \n    elif month == 3 or month == 4 or month == 5:\n        return \"spring\"\n\
    \    elif month == 6 or month == 7 or month == 8:\n        return \"summer\"\n\
    \    elif month == 9 or month == 10 or month == 11:\n        return \"fall\"\n\
    \    else:\n        return \"error\"\n"
  diff: "--- \n+++ \n@@ -2,42 +2,42 @@\n getSeason(month): \"\"\" if-input-is-December,-January,+month+==+12,+1,\
    \ or-February,+2, output is winter. If-input-is-March,-April,+month+==+3,+4, or-May,+5,\
    \ output is spring. If-input-is-June,-July,+month+==+6,+7, or-August,+8, output\
    \ is summer. If-input-is-September,-October,+month+==+9,+10, or-November,+11,\
    \ output is fall."
  node_from: &id012 !Node
    _node_tags: null
    id: 12
    stderr:
    - ''
    - ''
    - ''
    - ''
    stdout:
    - 'invalid month

      '
    - 'invalid month

      '
    - 'invalid month

      '
    - 'invalid month

      '
  node_to: &id001 !Node
    _node_tags: null
    id: 11
    stderr:
    - ''
    - ''
    - ''
    - ''
    stdout:
    - 'error

      '
    - 'error

      '
    - 'error

      '
    - 'error

      '
  prompt_from: "def getSeason(month):\n    \"\"\"\n    if input is December, January,\
    \ or February, output is winter. If input is March, April, or May, output is spring.\
    \ If input is June, July, or August, output is summer. If input is September,\
    \ October, or November, output is fall.\n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    if month == 12, 1, or 2, output\
    \ is winter. If month == 3, 4, or 5, output is spring. If month == 6, 7, or 8,\
    \ output is summer. If month == 9, 10, or 11, output is fall.\n    \"\"\"\n  \
    \  "
  state: neutral
  total_attempts: 4
  username: student14
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues:
  - 2
  - 3
  - 4
  completion_from: "if month == 12 or month == 1 or month == 2:\n        return \"\
    winter\"\n    elif month == 3 or month == 4 or month == 5:\n        return \"\
    spring\"\n    elif month == 6 or month == 7 or month == 8:\n        return \"\
    summer\"\n    elif month == 9 or month == 10 or month == 11:\n        return \"\
    fall\"\n    else:\n        return \"error\"\n"
  completion_to: "if month == 12 or month == 1 or month == 2:\n        return \"winter\"\
    \n    elif month == 3 or month == 4 or month == 5:\n        return \"spring\"\n\
    \    elif month == 6 or month == 7 or month == 8:\n        return \"summer\"\n\
    \    elif month == 9 or month == 10 or month == 11:\n        return \"fall\"\n"
  diff: "--- \n+++ \n@@ -41,4 +41,7 @@\n output is fall.+No+else+statement. \"\"\""
  node_from: *id001
  node_to: &id002 !Node
    _node_tags: null
    id: 13
    stderr:
    - ''
    - ''
    - ''
    - ''
    stdout:
    - 'None

      '
    - 'None

      '
    - 'None

      '
    - 'None

      '
  prompt_from: "def getSeason(month):\n    \"\"\"\n    if month == 12, 1, or 2, output\
    \ is winter. If month == 3, 4, or 5, output is spring. If month == 6, 7, or 8,\
    \ output is summer. If month == 9, 10, or 11, output is fall.\n    \"\"\"\n  \
    \  "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    if month == 12, 1, or 2, output\
    \ is winter. If month == 3, 4, or 5, output is spring. If month == 6, 7, or 8,\
    \ output is summer. If month == 9, 10, or 11, output is fall. No else statement.\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student14
- !Edge
  _edge_tags:
  - m4
  attempt_id: 3
  clues:
  - 2
  - 3
  - 4
  completion_from: "if month == 12 or month == 1 or month == 2:\n        return \"\
    winter\"\n    elif month == 3 or month == 4 or month == 5:\n        return \"\
    spring\"\n    elif month == 6 or month == 7 or month == 8:\n        return \"\
    summer\"\n    elif month == 9 or month == 10 or month == 11:\n        return \"\
    fall\"\n"
  completion_to: "if month == 12 or month == 1 or month == 2:\n        return \"winter\"\
    \n    elif month == 3 or month == 4 or month == 5:\n        return \"spring\"\n\
    \    elif month == 6 or month == 7 or month == 8:\n        return \"summer\"\n\
    \    elif month == 9 or month == 10 or month == 11:\n        return \"fall\"\n"
  diff: "--- \n+++ \n@@ -44,4 +44,10 @@\n No else statement.+12+==+December,+1+==+January\
    \ \"\"\""
  node_from: *id002
  node_to: *id002
  prompt_from: "def getSeason(month):\n    \"\"\"\n    if month == 12, 1, or 2, output\
    \ is winter. If month == 3, 4, or 5, output is spring. If month == 6, 7, or 8,\
    \ output is summer. If month == 9, 10, or 11, output is fall. No else statement.\n\
    \    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    if month == 12, 1, or 2, output\
    \ is winter. If month == 3, 4, or 5, output is spring. If month == 6, 7, or 8,\
    \ output is summer. If month == 9, 10, or 11, output is fall. No else statement.\
    \ 12 == December, 1 == January\n    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student14
- !Edge
  _edge_tags:
  - m2
  attempt_id: 1
  clues:
  - 2
  completion_from: "if month in [12, 1, 2]:\n        return \"Winter\"\n    elif month\
    \ in [3, 4, 5]:\n        return \"Spring\"\n    elif month in [6, 7, 8]:\n   \
    \     return \"Summer\"\n    elif month in [9, 10, 11]:\n        return \"Fall\"\
    \n    else:\n        return \"Invalid month\"\n"
  completion_to: "if month in [12, 1, 2]:\n        return 'Winter'\n    elif month\
    \ in [3, 4, 5]:\n        return 'Spring'\n    elif month in [6, 7, 8]:\n     \
    \   return 'Summer'\n    elif month in [9, 10, 11]:\n        return 'Fall'\n \
    \   else:\n        return 'Invalid Month'\n"
  diff: "--- \n+++ \n@@ -1,16 +1,20 @@\n def getSeason(month): \"\"\"-For+If the-given-month,+number+of+a+month+is+in+the+list,\
    \ return the season-that-occurs-during+for that month \"\"\""
  node_from: *id003
  node_to: &id004 !Node
    _node_tags: null
    id: 4
    stderr:
    - ''
    - ''
    - ''
    - ''
    stdout:
    - 'Invalid Month

      '
    - 'Invalid Month

      '
    - 'Invalid Month

      '
    - 'Invalid Month

      '
  prompt_from: "def getSeason(month):\n    \"\"\"\n    For the given month, return\
    \ the season that occurs during that month\n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    If the number of a month is in\
    \ the list, return the season for that month\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student24
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues:
  - 2
  completion_from: "if month in [12, 1, 2]:\n        return 'Winter'\n    elif month\
    \ in [3, 4, 5]:\n        return 'Spring'\n    elif month in [6, 7, 8]:\n     \
    \   return 'Summer'\n    elif month in [9, 10, 11]:\n        return 'Fall'\n \
    \   else:\n        return 'Invalid Month'\n"
  completion_to: "if month in [12, 1, 2]:\n        return 'Winter'\n    elif month\
    \ in [3, 4, 5]:\n        return 'Spring'\n    elif month in [6, 7, 8]:\n     \
    \   return 'Summer'\n    elif month in [9, 10, 11]:\n        return 'Fall'\n \
    \   else:\n        return 'Invalid Month'\n\nprint(getSeason(2))\nprint(getSeason("
  diff: ''
  node_from: *id004
  node_to: *id004
  prompt_from: "def getSeason(month):\n    \"\"\"\n    If the number of a month is\
    \ in the list, return the season for that month\n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    If the number of a month is in\
    \ the list, return the season for that month\n    \"\"\"\n    "
  state: fail
  total_attempts: 3
  username: student24
- !Edge
  _edge_tags:
  - a1
  attempt_id: 1
  clues:
  - 1
  - 2
  completion_from: "if month == 12 or month == 1 or month == 2:\n        print(\"\
    Winter\")\n    elif month == 3 or month == 4 or month == 5:\n        print(\"\
    Spring\")\n    elif month == 6 or month == 7 or month == 8:\n        print(\"\
    Summer\")\n    elif month == 9 or month == 10 or month == 11:\n        print(\"\
    Fall\")\n    else:\n        print(\"Error: Invalid month\")\n"
  completion_to: "if month == \"January\" or month == \"February\" or month == \"\
    December\":\n        print(\"Winter\")\n    elif month == \"March\" or month ==\
    \ \"April\" or month == \"May\":\n        print(\"Spring\")\n    elif month ==\
    \ \"June\" or month == \"July\" or month == \"August\":\n        print(\"Summer\"\
    )\n    elif month == \"September\" or month == \"October\" or month == \"November\"\
    :"
  diff: "--- \n+++ \n@@ -7,6 +7,11 @@\n one parameter, month.+Month+is+a+string+and\
    \ Month represents the"
  node_from: &id005 !Node
    _node_tags: null
    id: 2
    stderr:
    - 'IndentationError: expected an indented block after ''if'' statement on line
      5'
    - 'IndentationError: expected an indented block after ''if'' statement on line
      5'
    - 'IndentationError: expected an indented block after ''if'' statement on line
      5'
    - 'IndentationError: expected an indented block after ''if'' statement on line
      5'
    stdout:
    - ''
    - ''
    - ''
    - ''
  node_to: *id005
  prompt_from: "def getSeason(month):\n    \"\"\"\n    This function takes one parameter,\
    \ month. Month represents the months in a year. The code should take seasons associated\
    \ with that month and print the associated season of that month. \n    \"\"\"\n\
    \    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    This function takes one parameter,\
    \ month. Month is a string and Month represents the months in a year. The code\
    \ should take seasons associated with that month and print the associated season\
    \ of that month. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student28
- !Edge
  _edge_tags:
  - m2
  attempt_id: 2
  clues:
  - 1
  - 2
  completion_from: "if month == \"January\" or month == \"February\" or month == \"\
    December\":\n        print(\"Winter\")\n    elif month == \"March\" or month ==\
    \ \"April\" or month == \"May\":\n        print(\"Spring\")\n    elif month ==\
    \ \"June\" or month == \"July\" or month == \"August\":\n        print(\"Summer\"\
    )\n    elif month == \"September\" or month == \"October\" or month == \"November\"\
    :"
  completion_to: "if month == \"January\" or month == \"February\" or month == \"\
    December\":\n        print(\"Winter\")\n    elif month == \"March\" or month ==\
    \ \"April\" or month == \"May\":\n        print(\"Spring\")\n    elif month ==\
    \ \"June\" or month == \"July\" or month == \"August\":\n        print(\"Summer\"\
    )\n    elif month == \"September\" or month == \"October\" or month == \"November\"\
    :"
  diff: "--- \n+++ \n@@ -19,6 +19,18 @@\n in a year.+There+are+seasons+associated+with+each+month.+Winter,+spring,+summer,+and+fall.\
    \ The code should"
  node_from: *id005
  node_to: *id005
  prompt_from: "def getSeason(month):\n    \"\"\"\n    This function takes one parameter,\
    \ month. Month is a string and Month represents the months in a year. The code\
    \ should take seasons associated with that month and print the associated season\
    \ of that month. \n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    This function takes one parameter,\
    \ month. Month is a string and Month represents the months in a year. There are\
    \ seasons associated with each month. Winter, spring, summer, and fall. The code\
    \ should take seasons associated with that month and print the associated season\
    \ of that month. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student28
- !Edge
  _edge_tags:
  - a4
  attempt_id: 3
  clues:
  - 1
  - 2
  - 4
  completion_from: "if month == \"January\" or month == \"February\" or month == \"\
    December\":\n        print(\"Winter\")\n    elif month == \"March\" or month ==\
    \ \"April\" or month == \"May\":\n        print(\"Spring\")\n    elif month ==\
    \ \"June\" or month == \"July\" or month == \"August\":\n        print(\"Summer\"\
    )\n    elif month == \"September\" or month == \"October\" or month == \"November\"\
    :"
  completion_to: "if month == \"January\" or month == \"February\" or month == \"\
    December\":\n        print(\"Winter\")\n    elif month == \"March\" or month ==\
    \ \"April\" or month == \"May\":\n        print(\"Spring\")\n    elif month ==\
    \ \"June\" or month == \"July\" or month == \"August\":\n        print(\"Summer\"\
    )\n    elif month == \"September\" or month == \"October\" or month == \"November\"\
    :"
  diff: "--- \n+++ \n@@ -48,4 +48,17 @@\n of that month.+The+months+of+December,+January,+and+February+should+be+winter,+and+so+on.\
    \ \"\"\""
  node_from: *id005
  node_to: *id005
  prompt_from: "def getSeason(month):\n    \"\"\"\n    This function takes one parameter,\
    \ month. Month is a string and Month represents the months in a year. There are\
    \ seasons associated with each month. Winter, spring, summer, and fall. The code\
    \ should take seasons associated with that month and print the associated season\
    \ of that month. \n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    This function takes one parameter,\
    \ month. Month is a string and Month represents the months in a year. There are\
    \ seasons associated with each month. Winter, spring, summer, and fall. The code\
    \ should take seasons associated with that month and print the associated season\
    \ of that month. The months of December, January, and February should be winter,\
    \ and so on. \n    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student28
- !Edge
  _edge_tags:
  - m2
  attempt_id: 1
  clues:
  - 2
  completion_from: "if month in [12,1,2]:\n        return \"Winter\"\n    elif month\
    \ in [3,4,5]:\n        return \"Spring\"\n    elif month in [6,7,8]:\n       \
    \ return \"Summer\"\n    elif month in [9,10,11]:\n        return \"Fall\"\n \
    \   else:\n        return \"Not a valid month\"\n"
  completion_to: "if month == 12 or month == 1 or month == 2:\n        return \"Winter\"\
    \n    elif month == 3 or month == 4 or month == 5:\n        return \"Spring\"\n\
    \    elif month == 6 or month == 7 or month == 8:\n        return \"Summer\"\n\
    \    elif month == 9 or month == 10 or month == 11:\n        return \"Fall\"\n\
    \    else:\n        return \"Invalid Month\"\n\nprint"
  diff: "--- \n+++ \n@@ -12,6 +12,10 @@\n provided with a+number+corresponding+to+a\
    \ month of the@@ -21,6 +25,7 @@\n what season that+month belongs to. \"\"\""
  node_from: &id011 !Node
    _node_tags: null
    id: 9
    stderr:
    - ''
    - ''
    - ''
    - ''
    stdout:
    - 'Not a valid month

      '
    - 'Not a valid month

      '
    - 'Not a valid month

      '
    - 'Not a valid month

      '
  node_to: *id004
  prompt_from: "def getSeason(month):\n    \"\"\"\n    The goal for this function,\
    \ getSeason is when provided with a month of the year to return what season that\
    \ belongs to. \n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    The goal for this function, getSeason\
    \ is when provided with a number corresponding to a month of the year to return\
    \ what season that month belongs to. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student39
- !Edge
  _edge_tags:
  - m2
  attempt_id: 2
  clues:
  - 2
  completion_from: "if month == 12 or month == 1 or month == 2:\n        return \"\
    Winter\"\n    elif month == 3 or month == 4 or month == 5:\n        return \"\
    Spring\"\n    elif month == 6 or month == 7 or month == 8:\n        return \"\
    Summer\"\n    elif month == 9 or month == 10 or month == 11:\n        return \"\
    Fall\"\n    else:\n        return \"Invalid Month\"\n\nprint"
  completion_to: "if month >= 3 and month <= 5:\n        return \"Spring\"\n    elif\
    \ month >= 6 and month <= 8:\n        return \"Summer\"\n    elif month >= 9 and\
    \ month <= 11:\n        return \"Fall\"\n    else:\n        return \"Winter\"\n"
  diff: "--- \n+++ \n@@ -10,11 +10,6 @@\n is when provided-with-a-number-corresponding-to\
    \ a month of@@ -28,4 +23,30 @@\n month belongs to.+The+month+of+the+year+will+correspond+with+a+numerical+value+based+on+the+order+of+the+month+during+the+year.+For+example+January+=+1.\
    \ \"\"\""
  node_from: *id004
  node_to: &id006 !Node
    _node_tags: null
    id: 7
    stderr:
    - 'TypeError: ''>='' not supported between instances of ''str'' and ''int'''
    - 'TypeError: ''>='' not supported between instances of ''str'' and ''int'''
    - 'TypeError: ''>='' not supported between instances of ''str'' and ''int'''
    - 'TypeError: ''>='' not supported between instances of ''str'' and ''int'''
    stdout:
    - ''
    - ''
    - ''
    - ''
  prompt_from: "def getSeason(month):\n    \"\"\"\n    The goal for this function,\
    \ getSeason is when provided with a number corresponding to a month of the year\
    \ to return what season that month belongs to. \n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    The goal for this function, getSeason\
    \ is when provided a month of the year to return what season that month belongs\
    \ to. The month of the year will correspond with a numerical value based on the\
    \ order of the month during the year. For example January = 1.\n    \"\"\"\n \
    \   "
  state: neutral
  total_attempts: 4
  username: student39
- !Edge
  _edge_tags:
  - m2
  attempt_id: 3
  clues:
  - 2
  completion_from: "if month >= 3 and month <= 5:\n        return \"Spring\"\n   \
    \ elif month >= 6 and month <= 8:\n        return \"Summer\"\n    elif month >=\
    \ 9 and month <= 11:\n        return \"Fall\"\n    else:\n        return \"Winter\"\
    \n"
  completion_to: "if month == 12 or month == 1 or month == 2:\n        return \"Winter\"\
    \n    elif month == 3 or month == 4 or month == 5:\n        return \"Spring\"\n\
    \    elif month == 6 or month == 7 or month == 8:\n        return \"Summer\"\n\
    \    elif month == 9 or month == 10 or month == 11:\n        return \"Fall\"\n\
    \    else:\n        return \"Invalid month\"\n"
  diff: "--- \n+++ \n@@ -44,9 +44,18 @@\n during the year.-For-example-January-=-1.+The+input+should+be+converted+to+a+numerical+value+before+giving+returning+the+season.\
    \ \"\"\""
  node_from: *id006
  node_to: *id003
  prompt_from: "def getSeason(month):\n    \"\"\"\n    The goal for this function,\
    \ getSeason is when provided a month of the year to return what season that month\
    \ belongs to. The month of the year will correspond with a numerical value based\
    \ on the order of the month during the year. For example January = 1.\n    \"\"\
    \"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    The goal for this function, getSeason\
    \ is when provided a month of the year to return what season that month belongs\
    \ to. The month of the year will correspond with a numerical value based on the\
    \ order of the month during the year. The input should be converted to a numerical\
    \ value before giving returning the season.\n    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student39
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues:
  - 1
  - 2
  completion_from: "if month == \"January\" or month == \"February\" or month == \"\
    December\":\n        return \"Winter\"\n    elif month == \"March\" or month ==\
    \ \"April\" or month == \"May\":\n        return \"Spring\"\n    elif month ==\
    \ \"June\" or month == \"July\" or month == \"August\":\n        return \"Summer\"\
    \n    elif month == \"September\" or month == \"October\" or month == \"November\"\
    :"
  completion_to: "if month == \"January\" or month == \"February\" or month == \"\
    December\":\n        return \"Winter\"\n    elif month == \"March\" or month ==\
    \ \"April\" or month == \"May\":\n        return \"Spring\"\n    elif month ==\
    \ \"June\" or month == \"July\" or month == \"August\":\n        return \"Summer\"\
    \n    elif month == \"September\" or month == \"October\" or month == \"November\"\
    :"
  diff: ''
  node_from: *id007
  node_to: *id007
  prompt_from: "def getSeason(month):\n    \"\"\"\n    The functions take in a string,\
    \ representing a month, then outputs the season commonly associated with that\
    \ month.\n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    The functions take in a string,\
    \ representing a month, then outputs the season commonly associated with that\
    \ month.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student46
- !Edge
  _edge_tags:
  - a3
  attempt_id: 2
  clues:
  - 1
  - 2
  - 3
  completion_from: "if month == \"January\" or month == \"February\" or month == \"\
    December\":\n        return \"Winter\"\n    elif month == \"March\" or month ==\
    \ \"April\" or month == \"May\":\n        return \"Spring\"\n    elif month ==\
    \ \"June\" or month == \"July\" or month == \"August\":\n        return \"Summer\"\
    \n    elif month == \"September\" or month == \"October\" or month == \"November\"\
    :"
  completion_to: "if month in [\"january\", \"february\", \"december\"]:\n       \
    \ return \"winter\"\n    elif month in [\"march\", \"april\", \"may\"]:\n    \
    \    return \"spring\"\n    elif month in [\"june\", \"july\", \"august\"]:\n\
    \        return \"summer\"\n    elif month in [\"september\", \"october\", \"\
    november\"]:\n        return \"fall\""
  diff: "--- \n+++ \n@@ -18,5 +18,8 @@\n associated with that-month.+month,+in+lower+case.\
    \ \"\"\""
  node_from: *id007
  node_to: *id002
  prompt_from: "def getSeason(month):\n    \"\"\"\n    The functions take in a string,\
    \ representing a month, then outputs the season commonly associated with that\
    \ month.\n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    The functions take in a string,\
    \ representing a month, then outputs the season commonly associated with that\
    \ month, in lower case.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student46
- !Edge
  _edge_tags:
  - m1
  attempt_id: 3
  clues:
  - 1
  - 2
  - 3
  completion_from: "if month in [\"january\", \"february\", \"december\"]:\n     \
    \   return \"winter\"\n    elif month in [\"march\", \"april\", \"may\"]:\n  \
    \      return \"spring\"\n    elif month in [\"june\", \"july\", \"august\"]:\n\
    \        return \"summer\"\n    elif month in [\"september\", \"october\", \"\
    november\"]:\n        return \"fall\""
  completion_to: "if month in [\"December\", \"January\", \"February\"]:\n       \
    \ return \"winter\"\n    elif month in [\"March\", \"April\", \"May\"]:\n    \
    \    return \"spring\"\n    elif month in [\"June\", \"July\", \"August\"]:\n\
    \        return \"summer\"\n    elif month in [\"September\", \"October\", \"\
    November\"]:\n        return \"fall\"\n    else:\n        return \"Invalid month\"\
    \n\n"
  diff: "--- \n+++ \n@@ -9,7 +9,15 @@\n string, representing a-month,+month+in+with+the+first+letter+being+upper+case,\
    \ then outputs the"
  node_from: *id002
  node_to: &id008 !Node
    _node_tags: null
    id: 10
    stderr:
    - ''
    - ''
    - ''
    - ''
    stdout:
    - 'winter

      '
    - 'spring

      '
    - 'summer

      '
    - 'fall

      '
  prompt_from: "def getSeason(month):\n    \"\"\"\n    The functions take in a string,\
    \ representing a month, then outputs the season commonly associated with that\
    \ month, in lower case.\n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    The functions take in a string,\
    \ representing a month in with the first letter being upper case, then outputs\
    \ the season commonly associated with that month, in lower case.\n    \"\"\"\n\
    \    "
  state: success
  total_attempts: 4
  username: student46
- !Edge
  _edge_tags:
  - m3
  attempt_id: 1
  clues:
  - 2
  - 3
  - 4
  completion_from: "if month in [\"January\", \"February\", \"March\"]:\n        return\
    \ \"Winter\"\n    elif month in [\"April\", \"May\", \"June\"]:\n        return\
    \ \"Spring\"\n    elif month in [\"July\", \"August\", \"September\"]:\n     \
    \   return \"Summer\"\n    elif month in [\"October\", \"November\", \"December\"\
    ]:\n        return \"Fall\"\n    else:\n        return \"Invalid month\"\n\nprint"
  completion_to: "if month in [\"January\", \"February\", \"March\"]:\n        return\
    \ \"winter\"\n    elif month in [\"April\", \"May\", \"June\"]:\n        return\
    \ \"spring\"\n    elif month in [\"July\", \"August\", \"September\"]:\n     \
    \   return \"summer\"\n    elif month in [\"October\", \"November\", \"December\"\
    ]:\n        return \"fall\"\n    else:\n        return \"Invalid month\"\n\n"
  diff: "--- \n+++ \n@@ -26,5 +26,11 @@\n class of the-input\"+input,+produce+an+all+lower+case+string\"\
    \ \"\"\""
  node_from: &id009 !Node
    _node_tags: null
    id: 5
    stderr:
    - ''
    - ''
    - ''
    - ''
    stdout:
    - 'Winter

      '
    - 'Spring

      '
    - 'Summer

      '
    - 'Fall

      '
  node_to: *id008
  prompt_from: "def getSeason(month):\n    \"\"\"\n    \"January, February, March\
    \ is winter, April, May, June is spring, July, August, September is summer, October,\
    \ November, December is fall, determine the class of the input\"\n    \"\"\"\n\
    \    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    \"January, February, March is\
    \ winter, April, May, June is spring, July, August, September is summer, October,\
    \ November, December is fall, determine the class of the input, produce an all\
    \ lower case string\"\n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student47
- !Edge
  _edge_tags:
  - a3
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  completion_from: "if month == \"January\" or month == \"February\" or month == \"\
    December\":\n        return \"Winter\"\n    elif month == \"March\" or month ==\
    \ \"April\" or month == \"May\":\n        return \"Spring\"\n    elif month ==\
    \ \"June\" or month == \"July\" or month == \"August\":\n        return \"Summer\"\
    \n    elif month == \"September\" or month == \"October\" or month == \"November\"\
    :"
  completion_to: "if month == \"December\" or month == \"January\" or month == \"\
    February\":\n        return \"winter\"\n    elif month == \"March\" or month ==\
    \ \"April\" or month == \"May\":\n        return \"spring\"\n    elif month ==\
    \ \"June\" or month == \"July\" or month == \"August\":\n        return \"summer\"\
    \n    elif month == \"September\" or month == \"October\" or month == \"November"
  diff: "--- \n+++ \n@@ -4,8 +4,11 @@\n This function inputs+a+string+of the-string+name\
    \ of a month@@ -22,5 +25,14 @@\n (in the northern-hemisphere)+hemisphere).+The+input+should+be+capitalized,+the+output+should+not.\
    \ \"\"\""
  node_from: *id007
  node_to: &id010 !Node
    _node_tags: null
    id: 6
    stderr:
    - 'SyntaxError: unterminated string literal (detected at line 11)'
    - 'SyntaxError: unterminated string literal (detected at line 11)'
    - 'SyntaxError: unterminated string literal (detected at line 11)'
    - 'SyntaxError: unterminated string literal (detected at line 11)'
    stdout:
    - ''
    - ''
    - ''
    - ''
  prompt_from: "def getSeason(month):\n    \"\"\"\n    This function inputs the string\
    \ of a month and returns the name of the season it is in (in the northern hemisphere)\n\
    \    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    This function inputs a string\
    \ of the name of a month and returns the name of the season it is in (in the northern\
    \ hemisphere). The input should be capitalized, the output should not.\n    \"\
    \"\"\n    "
  state: fail
  total_attempts: 2
  username: student65
- !Edge
  _edge_tags:
  - m2
  attempt_id: 1
  clues:
  - 2
  - 4
  completion_from: "if month < 4:\n        return \"Winter\"\n    elif month < 7:\n\
    \        return \"Spring\"\n    elif month < 10:\n        return \"Summer\"\n\
    \    else:\n        return \"Fall\"\n"
  completion_to: "if month == 1 or month == 2 or month == 3:\n        return \"Winter\"\
    \n    elif month == 4 or month == 5 or month == 6:\n        return \"Spring\"\n\
    \    elif month == 7 or month == 8 or month == 9:\n        return \"Summer\"\n\
    \    elif month == 10 or month == 11 or month == 12:\n        return \"Fall\"\n\
    \    else:\n        return \"Invalid month\"\n"
  diff: "--- \n+++ \n@@ -16,6 +16,15 @@\n is found in.+The+months+are+assigned+numbers+one+to+twelve,+respectively.\
    \ The first three"
  node_from: &id013 !Node
    _node_tags: null
    id: 15
    stderr:
    - 'TypeError: ''<'' not supported between instances of ''str'' and ''int'''
    - 'TypeError: ''<'' not supported between instances of ''str'' and ''int'''
    - 'TypeError: ''<'' not supported between instances of ''str'' and ''int'''
    - 'TypeError: ''<'' not supported between instances of ''str'' and ''int'''
    stdout:
    - ''
    - ''
    - ''
    - ''
  node_to: *id003
  prompt_from: "def getSeason(month):\n    \"\"\"\n    Takes an inputted month and\
    \ returns the season for which the month is found in. The first three months of\
    \ the year are considered to be winter, the next three months are considered to\
    \ be spring, the next three months are considered summer, and the last three months\
    \ are considered fall.\n\n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    Takes an inputted month and returns\
    \ the season for which the month is found in. The months are assigned numbers\
    \ one to twelve, respectively. The first three months of the year are considered\
    \ to be winter, the next three months are considered to be spring, the next three\
    \ months are considered summer, and the last three months are considered fall.\n\
    \n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student7
- !Edge
  _edge_tags:
  - m2
  attempt_id: 2
  clues:
  - 2
  - 4
  completion_from: "if month == 1 or month == 2 or month == 3:\n        return \"\
    Winter\"\n    elif month == 4 or month == 5 or month == 6:\n        return \"\
    Spring\"\n    elif month == 7 or month == 8 or month == 9:\n        return \"\
    Summer\"\n    elif month == 10 or month == 11 or month == 12:\n        return\
    \ \"Fall\"\n    else:\n        return \"Invalid month\"\n"
  completion_to: "if month == \"January\" or month == \"February\" or month == \"\
    March\":\n        return \"Winter\"\n    elif month == \"April\" or month == \"\
    May\" or month == \"June\":\n        return \"Spring\"\n    elif month == \"July\"\
    \ or month == \"August\" or month == \"September\":\n        return \"Summer\"\
    \n    else:\n        return \"Fall\"\n"
  diff: "--- \n+++ \n@@ -16,48 +16,34 @@\n is found in.-The-months-are-assigned-numbers-one-to-twelve,-respectively.-The-first-three-months-of-the-year+January,+February,+and+March\
    \ are considered to be-winter,-the-next-three-months+winter;+April,+May,+and+June\
    \ are considered to be-spring,-the-next-three-months+spring;+July,+August,+and+September\
    \ are considered-summer,+summer; and the-last-three-months+rest are considered\
    \ fall."
  node_from: *id003
  node_to: *id009
  prompt_from: "def getSeason(month):\n    \"\"\"\n    Takes an inputted month and\
    \ returns the season for which the month is found in. The months are assigned\
    \ numbers one to twelve, respectively. The first three months of the year are\
    \ considered to be winter, the next three months are considered to be spring,\
    \ the next three months are considered summer, and the last three months are considered\
    \ fall.\n\n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    Takes an inputted month and returns\
    \ the season for which the month is found in. January, February, and March are\
    \ considered to be winter; April, May, and June are considered to be spring; July,\
    \ August, and September are considered summer; and the rest are considered fall.\n\
    \n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student7
- !Edge
  _edge_tags:
  - a3
  attempt_id: 3
  clues:
  - 2
  - 3
  - 4
  completion_from: "if month == \"January\" or month == \"February\" or month == \"\
    March\":\n        return \"Winter\"\n    elif month == \"April\" or month == \"\
    May\" or month == \"June\":\n        return \"Spring\"\n    elif month == \"July\"\
    \ or month == \"August\" or month == \"September\":\n        return \"Summer\"\
    \n    else:\n        return \"Fall\"\n"
  completion_to: "if month == \"January\" or month == \"February\" or month == \"\
    March\":\n        return \"winter\"\n    elif month == \"April\" or month == \"\
    May\" or month == \"June\":\n        return \"spring\"\n    elif month == \"July\"\
    \ or month == \"August\" or month == \"September\":\n        return \"summer\"\
    \n    else:\n        return \"fall\"\n"
  diff: "--- \n+++ \n@@ -20,31 +20,27 @@\n February, and March-are-considered-to-be-winter;+will+return+\"\
    winter\"; April, May, and June-are-considered-to-be-spring;+will+return+\"spring\"\
    ; July, August, and September-are-considered-summer;+will+return+\"summer\"; and\
    \ the rest-are-considered-fall.+will+return+\"fall\". \"\"\""
  node_from: *id009
  node_to: *id008
  prompt_from: "def getSeason(month):\n    \"\"\"\n    Takes an inputted month and\
    \ returns the season for which the month is found in. January, February, and March\
    \ are considered to be winter; April, May, and June are considered to be spring;\
    \ July, August, and September are considered summer; and the rest are considered\
    \ fall.\n\n    \"\"\"\n    "
  prompt_to: "def getSeason(month):\n    \"\"\"\n    Takes an inputted month and returns\
    \ the season for which the month is found in. January, February, and March will\
    \ return \"winter\"; April, May, and June will return \"spring\"; July, August,\
    \ and September will return \"summer\"; and the rest will return \"fall\".\n\n\
    \    \"\"\"\n    "
  state: success
  total_attempts: 4
  username: student7
nodes:
- !Node
  _node_tags: null
  id: 0
  stderr:
  - ''
  - ''
  - ''
  - ''
  stdout:
  - 'winter

    '
  - 'spring

    '
  - 'summer

    '
  - 'autumn

    '
- !Node
  _node_tags: null
  id: 1
  stderr:
  - ''
  - ''
  - ''
  - ''
  stdout:
  - 'Winter

    '
  - 'Spring

    '
  - 'Summer

    '
  - 'Autumn

    '
- *id005
- !Node
  _node_tags: null
  id: 3
  stderr:
  - 'IndentationError: expected an indented block after ''if'' statement on line 9'
  - 'IndentationError: expected an indented block after ''if'' statement on line 9'
  - 'IndentationError: expected an indented block after ''if'' statement on line 9'
  - 'IndentationError: expected an indented block after ''if'' statement on line 9'
  stdout:
  - ''
  - ''
  - ''
  - ''
- *id004
- *id009
- *id010
- *id006
- *id007
- *id011
- *id008
- *id001
- *id012
- *id002
- !Node
  _node_tags: null
  id: 14
  stderr:
  - 'SyntaxError: invalid syntax'
  - 'SyntaxError: invalid syntax'
  - 'SyntaxError: invalid syntax'
  - 'SyntaxError: invalid syntax'
  stdout:
  - ''
  - ''
  - ''
  - ''
- *id013
- !Node
  _node_tags: null
  id: 16
  stderr:
  - 'SyntaxError: ''{'' was never closed'
  - 'SyntaxError: ''{'' was never closed'
  - 'SyntaxError: ''{'' was never closed'
  - 'SyntaxError: ''{'' was never closed'
  stdout:
  - ''
  - ''
  - ''
  - ''
- *id003
problem: getSeason
problem_clues:
  1: input is string
  2: month to season
  3: return lowercase
  4: explain which are which
student_clues_tracker:
  student1:
  - attempt_id: 0
    clues: &id014
    - 1
  - attempt_id: 1
    clues:
    - 1
  student14:
  - attempt_id: 0
    clues: &id015
    - 1
    - 2
    - 3
    - 4
  - attempt_id: 1
    clues:
    - 2
    - 3
    - 4
  - attempt_id: 2
    clues:
    - 2
    - 3
    - 4
  - attempt_id: 3
    clues:
    - 2
    - 3
    - 4
  student24:
  - attempt_id: 0
    clues: &id016
    - 2
  - attempt_id: 1
    clues:
    - 2
  - attempt_id: 2
    clues:
    - 2
  student28:
  - attempt_id: 0
    clues: &id017
    - 2
  - attempt_id: 1
    clues:
    - 1
    - 2
  - attempt_id: 2
    clues:
    - 1
    - 2
  - attempt_id: 3
    clues:
    - 1
    - 2
    - 4
  student39:
  - attempt_id: 0
    clues: &id018
    - 2
  - attempt_id: 1
    clues:
    - 2
  - attempt_id: 2
    clues:
    - 2
  - attempt_id: 3
    clues:
    - 2
  student46:
  - attempt_id: 0
    clues: &id019
    - 1
    - 2
  - attempt_id: 1
    clues:
    - 1
    - 2
  - attempt_id: 2
    clues:
    - 1
    - 2
    - 3
  - attempt_id: 3
    clues:
    - 1
    - 2
    - 3
  student47:
  - attempt_id: 0
    clues: &id020
    - 2
    - 3
    - 4
  - attempt_id: 1
    clues:
    - 2
    - 3
    - 4
  student65:
  - attempt_id: 0
    clues: &id021
    - 1
    - 2
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
  student7:
  - attempt_id: 0
    clues: &id022
    - 2
    - 4
  - attempt_id: 1
    clues:
    - 2
    - 4
  - attempt_id: 2
    clues:
    - 2
    - 4
  - attempt_id: 3
    clues:
    - 2
    - 3
    - 4
student_colors: {}
student_start_node_tags:
  student1: *id014
  student14: *id015
  student24: *id016
  student28: *id017
  student39: *id018
  student46: *id019
  student47: *id020
  student65: *id021
  student7: *id022
