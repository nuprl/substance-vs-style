!Graph
COLORS:
- '#d83034'
- '#f9e858'
- '#008dff'
- '#4ecb8d'
- '#c701ff'
- '#ffcd8e'
- '#003a7d'
- '#Ff73b6'
- '#ff7f50'
- '#7fff00'
- '#8a2be2'
- '#ffd700'
- '#ff4500'
- '#00ced1'
- '#ff1493'
- '#9400d3'
- '#00bfff'
edges:
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: []
  completion_from: "for i in range(1, value + 1):\n        for j in range(1, i + 1):\n\
    \            print(j, end=\" \")\n        print(\"\\r\")\n\n\npattern(5)"
  completion_to: "if value == 0:\n        return \"\"\n    else:\n        return pattern(value\
    \ - 1) + str(value) + str(value)\n\nprint(pattern(3))\n"
  diff: ''
  node_from: &id004 !Node
    _node_tags: null
    id: 6
    stderr:
    - 'IndentationError: expected an indented block after ''for'' statement on line
      6'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      6'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      6'
    stdout:
    - ''
    - ''
    - ''
  node_to: &id001 !Node
    _node_tags: null
    id: 10
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '112233

      '
    - '11223344

      '
    - '1122

      '
  prompt_from: "def pattern(value):\n    \"\"\"\n    count to the letter of the input\n\
    \    \"\"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    count to the letter of the input\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student17
- !Edge
  _edge_tags:
  - a3
  attempt_id: 2
  clues:
  - 3
  completion_from: "if value == 0:\n        return \"\"\n    else:\n        return\
    \ pattern(value - 1) + str(value) + str(value)\n\nprint(pattern(3))\n"
  completion_to: "if value == 2:\n        return [[1,2],[1,2]]\n    else:\n      \
    \  return [[1,2,3],[1,2,3]]\n"
  diff: "--- \n+++ \n@@ -1,11 +1,13 @@\n def pattern(value): \"\"\"-count-to-the-letter-of-the-input+if+given+2+output+two+lists+1,2+and+1,2\
    \ \"\"\""
  node_from: *id001
  node_to: &id002 !Node
    _node_tags: null
    id: 7
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[[1, 2, 3], [1, 2, 3]]

      '
    - '[[1, 2, 3], [1, 2, 3]]

      '
    - '[[1, 2], [1, 2]]

      '
  prompt_from: "def pattern(value):\n    \"\"\"\n    count to the letter of the input\n\
    \    \"\"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    if given 2 output two lists 1,2\
    \ and 1,2\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student17
- !Edge
  _edge_tags:
  - a4
  attempt_id: 3
  clues:
  - 3
  - 4
  completion_from: "if value == 2:\n        return [[1,2],[1,2]]\n    else:\n    \
    \    return [[1,2,3],[1,2,3]]\n"
  completion_to: 'return [[i for i in range(1, value + 1)] for j in range(1, value
    + 1)]



    print(pattern(2))

    print(pattern(3))


    '
  diff: "--- \n+++ \n@@ -10,4 +10,16 @@\n 1,2 and 1,2+if+given+3+out+put+3+lists+1,2,3+and+1,2,3+and+1,2,3\
    \ \"\"\""
  node_from: *id002
  node_to: &id003 !Node
    _node_tags: null
    id: 0
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[[1, 2, 3], [1, 2, 3], [1, 2, 3]]

      '
    - '[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]

      '
    - '[[1, 2], [1, 2]]

      '
  prompt_from: "def pattern(value):\n    \"\"\"\n    if given 2 output two lists 1,2\
    \ and 1,2\n    \"\"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    if given 2 output two lists 1,2\
    \ and 1,2\nif given 3 out put 3 lists 1,2,3 and 1,2,3 and 1,2,3\n    \"\"\"\n\
    \    "
  state: success
  total_attempts: 4
  username: student17
- !Edge
  _edge_tags:
  - m4
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  - 4
  - 5
  completion_from: "list_of_lists = []\n    for i in range(1, value+1):\n        list_of_lists.append([j\
    \ for j in range(1, i+1)])\n    return list_of_lists\n"
  completion_to: "pattern_list = []\n    for i in range(value):\n        pattern_list.append(list(range(1,\
    \ value + 1)))\n    return pattern_list\n"
  diff: "--- \n+++ \n@@ -9,9 +9,10 @@\n integer and creates-a+one list-with+including+the\
    \ numbers 1 to@@ -26,9 +27,7 @@\n for the given-value-and-returns,+value, appending\
    \ each list"
  node_from: &id005 !Node
    _node_tags: null
    id: 1
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[[1], [1, 2], [1, 2, 3]]

      '
    - '[[1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]

      '
    - '[[1], [1, 2]]

      '
  node_to: *id003
  prompt_from: "def pattern(value):\n    \"\"\"\n    This function takes a given integer\
    \ and creates a list with numbers 1 to that given value. It creates this list\
    \ repeated for the given value and returns, appending each list to one list. It\
    \ returns the list of lists.\n    \"\"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    This function takes a given integer\
    \ and creates one list including the numbers 1 to that given value. It creates\
    \ this list repeated for the given value, appending each list to one list. It\
    \ returns the list of lists.\n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student25
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues:
  - 3
  - 4
  completion_from: 'return [i for i in range(1, value + 1) for _ in range(value)]


    '
  completion_to: "for i in range(1, value + 1):\n        for j in range(i):\n    \
    \        print(i, end=\" \")\n        print()\n\n"
  diff: "--- \n+++ \n@@ -3,10 +3,11 @@\n \"\"\" Generate a-sequence+set of numbers-ranging+counting+up\
    \ from 1 to@@ -14,9 +15,9 @@\n given number and-repeat-the-sequence+print+each+set\
    \ the given number"
  node_from: &id010 !Node
    _node_tags: null
    id: 3
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[1, 1, 1, 2, 2, 2, 3, 3, 3]

      '
    - '[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]

      '
    - '[1, 1, 2, 2]

      '
  node_to: *id004
  prompt_from: "def pattern(value):\n    \"\"\"\n    Generate a sequence of numbers\
    \ ranging from 1 to the given number and repeat the sequence the given number\
    \ of times\n    \"\"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    Generate a set of numbers counting\
    \ up from 1 to the given number and print each set the given number of times\n\
    \    \"\"\"\n    "
  state: fail
  total_attempts: 2
  username: student26
- !Edge
  _edge_tags:
  - d2
  - d3
  attempt_id: 1
  clues:
  - 1
  - 4
  - 5
  completion_from: 'return [[i for i in range(1, j+1)] for j in range(1, value+1)]


    print(pattern(5))

    '
  completion_to: 'return [i for i in range(1,value+1)]

    '
  diff: "--- \n+++ \n@@ -8,22 +8,11 @@\n 1 input (value).-Produce+create list of-list-that-have-value-number+ascending+numbers\
    \ of-list-contain-value-number-ascending-from-1-to value \"\"\""
  node_from: *id005
  node_to: &id006 !Node
    _node_tags: null
    id: 2
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[1, 2, 3]

      '
    - '[1, 2, 3, 4]

      '
    - '[1, 2]

      '
  prompt_from: "def pattern(value):\n    \"\"\"\n    create function which take 1\
    \ input (value). Produce list of list that have value number of list contain value\
    \ number ascending from 1 to value\n    \"\"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    create function which take 1 input\
    \ (value). create list of ascending numbers of value\n    \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student3
- !Edge
  _edge_tags:
  - a2
  - a3
  attempt_id: 2
  clues:
  - 1
  - 2
  - 3
  - 4
  - 5
  completion_from: 'return [i for i in range(1,value+1)]

    '
  completion_to: 'return [[i]*i for i in range(1, value+1)]


    print(pattern(5))

    '
  diff: "--- \n+++ \n@@ -14,5 +14,14 @@\n ascending numbers of+value.+insert+that+list\
    \ value+times+into+a+new+list \"\"\""
  node_from: *id006
  node_to: &id007 !Node
    _node_tags: null
    id: 9
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[[1], [2, 2], [3, 3, 3]]

      '
    - '[[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]

      '
    - '[[1], [2, 2]]

      '
  prompt_from: "def pattern(value):\n    \"\"\"\n    create function which take 1\
    \ input (value). create list of ascending numbers of value\n    \"\"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    create function which take 1 input\
    \ (value). create list of ascending numbers of value. insert that list value times\
    \ into a new list\n    \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student3
- !Edge
  _edge_tags:
  - d2
  - d3
  attempt_id: 3
  clues:
  - 1
  - 4
  - 5
  completion_from: 'return [[i]*i for i in range(1, value+1)]


    print(pattern(5))

    '
  completion_to: "for i in range(value):\n        print(str(i+1)*(i+1))\n\npattern(5)\n"
  diff: "--- \n+++ \n@@ -15,13 +15,4 @@\n numbers of value.-insert-that-list-value-times-into-a-new-list\
    \ \"\"\""
  node_from: *id007
  node_to: &id008 !Node
    _node_tags: null
    id: 5
    stderr:
    - 'IndentationError: expected an indented block after ''for'' statement on line
      5'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      5'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      5'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def pattern(value):\n    \"\"\"\n    create function which take 1\
    \ input (value). create list of ascending numbers of value. insert that list value\
    \ times into a new list\n    \"\"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    create function which take 1 input\
    \ (value). create list of ascending numbers of value. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student3
- !Edge
  _edge_tags:
  - m4
  attempt_id: 4
  clues:
  - 1
  - 4
  - 5
  completion_from: "for i in range(value):\n        print(str(i+1)*(i+1))\n\npattern(5)\n"
  completion_to: 'return [i for i in range(1, value + 1)]


    '
  diff: "--- \n+++ \n@@ -14,5 +14,8 @@\n ascending numbers of-value.+value+start+from+1\
    \ \"\"\""
  node_from: *id008
  node_to: *id006
  prompt_from: "def pattern(value):\n    \"\"\"\n    create function which take 1\
    \ input (value). create list of ascending numbers of value. \n    \"\"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    create function which take 1 input\
    \ (value). create list of ascending numbers of value start from 1\n    \"\"\"\n\
    \    "
  state: neutral
  total_attempts: 6
  username: student3
- !Edge
  _edge_tags:
  - 0
  attempt_id: 5
  clues:
  - 1
  - 4
  - 5
  completion_from: 'return [i for i in range(1, value + 1)]


    '
  completion_to: "list_pattern = []\n    for i in range(1, value+1):\n        list_pattern.append(i)\n\
    \        list_pattern.append(i)\n        list_pattern.append(i)\n    return list_pattern\n\
    \nprint(pattern(3))\n"
  diff: "--- \n+++ \n@@ -17,5 +17,6 @@\n value start from-1+1.+insert \"\"\""
  node_from: *id006
  node_to: &id011 !Node
    _node_tags: null
    id: 8
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[1, 1, 1, 2, 2, 2, 3, 3, 3]

      '
    - '[1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]

      '
    - '[1, 1, 1, 2, 2, 2]

      '
  prompt_from: "def pattern(value):\n    \"\"\"\n    create function which take 1\
    \ input (value). create list of ascending numbers of value start from 1\n    \"\
    \"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    create function which take 1 input\
    \ (value). create list of ascending numbers of value start from 1. insert \n \
    \   \"\"\"\n    "
  state: fail
  total_attempts: 6
  username: student3
- !Edge
  _edge_tags:
  - m3
  - m4
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  - 4
  completion_from: "if value == 0:\n        return []\n    else:\n        return pattern(value-1)\
    \ + [[i for i in range(1, value+1)]]\n"
  completion_to: 'return [[i for i in range(1, value + 1)] for j in range(value)]

    '
  diff: "--- \n+++ \n@@ -1,18 +1,9 @@\n def pattern(value): \"\"\"-uses-the-given-number-to-produce+creates\
    \ a-given-number-of-lists,-each+list containing elements counting@@ -22,5 +13,17\
    \ @@\n given number from-one+1,+duplicates+this+list+by+the+given+number+into+a+list+of+lists\
    \ \"\"\""
  node_from: *id005
  node_to: *id003
  prompt_from: "def pattern(value):\n    \"\"\"\n    uses the given number to produce\
    \ a given number of lists, each containing elements counting up to the given number\
    \ from one\n    \"\"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    creates a list containing elements\
    \ counting up to the given number from 1, duplicates this list by the given number\
    \ into a list of lists\n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student4
- !Edge
  _edge_tags:
  - m4
  attempt_id: 1
  clues:
  - 2
  - 3
  - 4
  - 5
  completion_from: "output = []\n    for i in range(value):\n        output.append(list(range(1,\
    \ i+2)))\n    return output\n\nprint(pattern(5))\n"
  completion_to: 'return [[x for x in range(1,y+1)] for y in range(1,value+1)]


    print(pattern(3))'
  diff: "--- \n+++ \n@@ -20,8 +20,10 @@\n to the value.-Each-list+All+of+the+lists\
    \ within the output"
  node_from: *id005
  node_to: *id005
  prompt_from: "def pattern(value):\n    \"\"\"\n    Returns a list of lists. The\
    \ number of lists in the output list should be equal to the value. Each list within\
    \ the output list should have each integer greater than zero up to, and including,\
    \ the value inputted.\n    \"\"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    Returns a list of lists. The number\
    \ of lists in the output list should be equal to the value. All of the lists within\
    \ the output list should have each integer greater than zero up to, and including,\
    \ the value inputted.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student41
- !Edge
  _edge_tags:
  - m4
  attempt_id: 2
  clues:
  - 2
  - 3
  - 4
  - 5
  completion_from: 'return [[x for x in range(1,y+1)] for y in range(1,value+1)]


    print(pattern(3))'
  completion_to: 'return [[i for i in range(value)] for j in range(value)]

    '
  diff: "--- \n+++ \n@@ -30,16 +30,12 @@\n list should have-each+every integer-greater-than+between\
    \ zero-up-to, and-including, the-value-inputted.+inputted+value. \"\"\""
  node_from: *id005
  node_to: &id009 !Node
    _node_tags: null
    id: 4
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '[[0, 1, 2], [0, 1, 2], [0, 1, 2]]

      '
    - '[[0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3]]

      '
    - '[[0, 1], [0, 1]]

      '
  prompt_from: "def pattern(value):\n    \"\"\"\n    Returns a list of lists. The\
    \ number of lists in the output list should be equal to the value. All of the\
    \ lists within the output list should have each integer greater than zero up to,\
    \ and including, the value inputted.\n    \"\"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    Returns a list of lists. The number\
    \ of lists in the output list should be equal to the value. All of the lists within\
    \ the output list should have every integer between zero and the inputted value.\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student41
- !Edge
  _edge_tags:
  - m4
  attempt_id: 3
  clues:
  - 2
  - 3
  - 4
  - 5
  completion_from: 'return [[i for i in range(value)] for j in range(value)]

    '
  completion_to: 'return [[i for i in range(1, value + 1)] for i in range(value)]

    '
  diff: "--- \n+++ \n@@ -33,8 +33,11 @@\n every integer between-zero+one and+one+more+than\
    \ the inputted value."
  node_from: *id009
  node_to: *id003
  prompt_from: "def pattern(value):\n    \"\"\"\n    Returns a list of lists. The\
    \ number of lists in the output list should be equal to the value. All of the\
    \ lists within the output list should have every integer between zero and the\
    \ inputted value.\n    \"\"\"\n    "
  prompt_to: "def pattern(value):\n    \"\"\"\n    Returns a list of lists. The number\
    \ of lists in the output list should be equal to the value. All of the lists within\
    \ the output list should have every integer between one and one more than the\
    \ inputted value.\n    \"\"\"\n    "
  state: success
  total_attempts: 4
  username: student41
nodes:
- *id003
- *id005
- *id006
- *id010
- *id009
- *id008
- *id004
- *id002
- *id011
- *id007
- *id001
problem: pattern
problem_clues:
  1: takes an int
  2: produces a nested list
  3: there are value n of inner lists
  4: each inner list is from 1 to value
  5: returns
student_clues_tracker:
  student17:
  - attempt_id: 0
    clues: &id012
    - 0
  - attempt_id: 1
    clues: []
  - attempt_id: 2
    clues:
    - 3
  - attempt_id: 3
    clues:
    - 3
    - 4
  student25:
  - attempt_id: 0
    clues: &id013
    - 1
    - 2
    - 3
    - 4
    - 5
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
  student26:
  - attempt_id: 0
    clues: &id014
    - 3
    - 4
  - attempt_id: 1
    clues:
    - 3
    - 4
  student3:
  - attempt_id: 0
    clues: &id015
    - 1
    - 2
    - 3
    - 4
    - 5
  - attempt_id: 1
    clues:
    - 1
    - 4
    - 5
  - attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
  - attempt_id: 3
    clues:
    - 1
    - 4
    - 5
  - attempt_id: 4
    clues:
    - 1
    - 4
    - 5
  - attempt_id: 5
    clues:
    - 1
    - 4
    - 5
  student4:
  - attempt_id: 0
    clues: &id016
    - 1
    - 2
    - 3
    - 4
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 4
  student41:
  - attempt_id: 0
    clues: &id017
    - 2
    - 3
    - 4
    - 5
  - attempt_id: 1
    clues:
    - 2
    - 3
    - 4
    - 5
  - attempt_id: 2
    clues:
    - 2
    - 3
    - 4
    - 5
  - attempt_id: 3
    clues:
    - 2
    - 3
    - 4
    - 5
student_colors: {}
student_start_node_tags:
  student17: *id012
  student25: *id013
  student26: *id014
  student3: *id015
  student4: *id016
  student41: *id017
