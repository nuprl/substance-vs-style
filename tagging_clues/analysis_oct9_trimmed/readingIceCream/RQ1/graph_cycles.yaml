breakout_edges:
  student27: null
  student29: null
  student32: null
  student34: null
  student49: null
  student62: null
  student66: null
  student67: null
  student68: null
  student70: null
  student78: null
cycle_summary:
  student27: []
  student29:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 2
    clues:
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    completion_from: "total = 0\n    for line in lines:\n        count = 0\n     \
      \   for char in line:\n            if char == \"\\\\\":\n                count\
      \ += 1\n            if count == 2:\n                line = line[line.index(\"\
      \\\\\")+1:]\n                line = line[line.index(\"\\\\\")+1:]\n        \
      \        line = line[1:]\n                total += float(line)\n           \
      \     break\n    return total\n"
    completion_to: "total = 0\n    for line in lines:\n        count = 0\n       \
      \ for char in line:\n            if char == \"\\\\\":\n                count\
      \ += 1\n            if count == 2:\n                line = line[line.index(char):]\n\
      \                line = line[1:]\n                total += float(line)\n   \
      \ return total\n\n"
    diff: "--- \n+++ \n@@ -19,10 +19,8 @@\n \"\\\" characters. When-the-number-of-\"\
      \\\"+that+count is 2, isolate"
    node_from: &id001 !Node
      _node_tags: null
      id: 5
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '0

        '
      - '0

        '
      - '0

        '
    node_to: *id001
    prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry,\
      \ parse through the string and keep track of the number of \"\\\" characters.\
      \ When the number of \"\\\" is 2, isolate the rest of the string. Then isolate\
      \ the remainder of that string, starting at index 1. Convert this string to\
      \ a float. Keep track of the float for each entry and add them all together,\
      \ returning the sum for each list\n\n    \"\"\"\n    "
    prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry,\
      \ parse through the string and keep track of the number of \"\\\" characters.\
      \ When that count is 2, isolate the rest of the string. Then isolate the remainder\
      \ of that string, starting at index 1. Convert this string to a float. Keep\
      \ track of the float for each entry and add them all together, returning the\
      \ sum for each list\n\n    \"\"\"\n    "
    state: neutral
    total_attempts: 8
    username: student29
  - !Edge
    _edge_tags:
    - m3
    attempt_id: 3
    clues:
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    completion_from: "total = 0\n    for line in lines:\n        count = 0\n     \
      \   for char in line:\n            if char == \"\\\\\":\n                count\
      \ += 1\n            if count == 2:\n                line = line[line.index(char):]\n\
      \                line = line[1:]\n                total += float(line)\n   \
      \ return total\n\n"
    completion_to: "count = 0\n    total = 0\n    for line in lines:\n        for\
      \ char in line:\n            if char == \"\\\\\":\n                count +=\
      \ 1\n            if count == 2:\n                line = line[line.index(\"\\\
      \\\")+1:]\n                line = line[line.index(\"\\\\\")+1:]\n          \
      \      total += float(line)\n                count = 0\n    return total\n"
    diff: "--- \n+++ \n@@ -10,14 +10,12 @@\n the string and-keep-track-of-the-number-of+increase+count+after+each\
      \ \"\\\"-characters.+character. When that count"
    node_from: *id001
    node_to: *id001
    prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry,\
      \ parse through the string and keep track of the number of \"\\\" characters.\
      \ When that count is 2, isolate the rest of the string. Then isolate the remainder\
      \ of that string, starting at index 1. Convert this string to a float. Keep\
      \ track of the float for each entry and add them all together, returning the\
      \ sum for each list\n\n    \"\"\"\n    "
    prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry,\
      \ parse through the string and increase count after each \"\\\" character. When\
      \ that count is 2, isolate the rest of the string. Then isolate the remainder\
      \ of that string, starting at index 1. Convert this string to a float. Keep\
      \ track of the float for each entry and add them all together, returning the\
      \ sum for each list\n\n    \"\"\"\n    "
    state: neutral
    total_attempts: 8
    username: student29
  - !Edge
    _edge_tags:
    - m2
    attempt_id: 5
    clues:
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    completion_from: "total = 0\n    for line in lines:\n        total += float(line[line.rfind(\"\
      t\")+1:])\n    return total\n"
    completion_to: "total = 0\n    for line in lines:\n        line = line[::-1]\n\
      \        for i in range(len(line)):\n            if line[i] == \"t\":\n    \
      \            total += float(line[:i][::-1])\n                break\n    return\
      \ total\n"
    diff: "--- \n+++ \n@@ -7,8 +7,8 @@\n end of each-string-input,+list+entry, parse\
      \ backwards until"
    node_from: &id002 !Node
      _node_tags: null
      id: 7
      stderr:
      - 'ValueError: could not convert string to float: ''\tice cream\t3'''
      - ''
      - ''
      stdout:
      - ''
      - '10.0

        '
      - '0.0

        '
    node_to: *id002
    prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Starting at the end\
      \ of each string input, parse backwards until you reach the \"t\" character.\
      \ Isolate the string from the \"t\" character until the end of the entry. Convert\
      \ that string to a float, then add all of the floats for each entry together\
      \ and return the total.\n\n    \"\"\"\n    "
    prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Starting at the end of\
      \ each list entry, parse backwards until you reach the \"t\" character. Isolate\
      \ the string from the \"t\" character until the end of the entry. Convert that\
      \ string to a float, then add all of the floats for each entry together and\
      \ return the total.\n\n    \"\"\"\n    "
    state: neutral
    total_attempts: 8
    username: student29
  - !Edge
    _edge_tags:
    - m2
    attempt_id: 6
    clues:
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    completion_from: "total = 0\n    for line in lines:\n        line = line[::-1]\n\
      \        for i in range(len(line)):\n            if line[i] == \"t\":\n    \
      \            total += float(line[:i][::-1])\n                break\n    return\
      \ total\n"
    completion_to: "total = 0\n    for line in lines:\n        line = line[::-1]\n\
      \        line = line[:line.find(\"t\")]\n        line = line[::-1]\n       \
      \ total += float(line)\n    return total\n"
    diff: "--- \n+++ \n@@ -1,14 +1,18 @@\n def readingIceCream(lines): \"\"\"-Starting+For+each+list+entry,+start\
      \ at the end of-each-list-entry,+the+corresponding+string, parse backwards until"
    node_from: *id002
    node_to: *id002
    prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Starting at the end\
      \ of each list entry, parse backwards until you reach the \"t\" character. Isolate\
      \ the string from the \"t\" character until the end of the entry. Convert that\
      \ string to a float, then add all of the floats for each entry together and\
      \ return the total.\n\n    \"\"\"\n    "
    prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry,\
      \ start at the end of the corresponding string, parse backwards until you reach\
      \ the \"t\" character. Isolate the string from the \"t\" character until the\
      \ end of the entry. Convert that string to a float, then add all of the floats\
      \ for each entry together and return the total.\n\n    \"\"\"\n    "
    state: neutral
    total_attempts: 8
    username: student29
  - !Edge
    _edge_tags:
    - m3
    attempt_id: 7
    clues:
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    completion_from: "total = 0\n    for line in lines:\n        line = line[::-1]\n\
      \        line = line[:line.find(\"t\")]\n        line = line[::-1]\n       \
      \ total += float(line)\n    return total\n"
    completion_to: "total = 0\n    for line in lines:\n        line = line.strip()\n\
      \        index = len(line) - 1\n        while line[index] != \"t\":\n      \
      \      index -= 1\n        total += float(line[index + 1:])\n    return total\n"
    diff: "--- \n+++ \n@@ -19,6 +19,7 @@\n you reach the+first \"t\" character. Isolate"
    node_from: *id002
    node_to: *id002
    prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry,\
      \ start at the end of the corresponding string, parse backwards until you reach\
      \ the \"t\" character. Isolate the string from the \"t\" character until the\
      \ end of the entry. Convert that string to a float, then add all of the floats\
      \ for each entry together and return the total.\n\n    \"\"\"\n    "
    prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry,\
      \ start at the end of the corresponding string, parse backwards until you reach\
      \ the first \"t\" character. Isolate the string from the \"t\" character until\
      \ the end of the entry. Convert that string to a float, then add all of the\
      \ floats for each entry together and return the total.\n\n    \"\"\"\n    "
    state: fail
    total_attempts: 8
    username: student29
  student32: []
  student34:
  - !Edge
    _edge_tags:
    - l4
    - a5
    attempt_id: 2
    clues:
    - 4
    - 5
    - 6
    completion_from: "sum = 0\n    for line in lines:\n        sum += int(line.split('t')[-1])\n\
      \    return sum\n"
    completion_to: "total = 0\n    for line in lines:\n        total += int(line.split('t')[-1])\n\
      \    return total\n"
    diff: "--- \n+++ \n@@ -2,10 +2,8 @@\n readingIceCream(lines): \"\"\" Convert-the-numbers-that-appear+what+appears\
      \ after the last@@ -17,7 +15,7 @@\n the list into-integers,+numbers, and then\
      \ find@@ -25,5 +23,5 @@\n sum of those-integers+numbers \"\"\""
    node_from: &id003 !Node
      _node_tags: null
      id: 16
      stderr:
      - 'ValueError: invalid literal for int() with base 10: ''\tice cream\t3'''
      - ''
      - ''
      stdout:
      - ''
      - '10

        '
      - '0

        '
    node_to: *id003
    prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Convert the numbers\
      \ that appear after the last t of each object in the list into integers, and\
      \ then find the sum of those integers\n    \"\"\"\n    "
    prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Convert what appears\
      \ after the last t of each object in the list into numbers, and then find the\
      \ sum of those numbers\n    \"\"\"\n    "
    state: neutral
    total_attempts: 5
    username: student34
  student49:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 2
    clues:
    - 1
    - 2
    - 4
    - 5
    - 6
    completion_from: "total = 0\n    for line in lines:\n        line = line.split(\"\
      t\")[0]\n        total += float(line)\n    return total\n"
    completion_to: "total = 0\n    for line in lines:\n        line = line.split()\n\
      \        if line[0] == 't':\n            total += float(line[1])\n    return\
      \ total\n"
    diff: "--- \n+++ \n@@ -14,18 +14,11 @@\n t in the-string,-and-store-in-a-new-list.-Type+string+type\
      \ cast the-new-list+values to floats and"
    node_from: &id004 !Node
      _node_tags: null
      id: 10
      stderr:
      - 'ValueError: could not convert string to float: ''peppermin'''
      - 'ValueError: could not convert string to float: ''sal'''
      - 'ValueError: could not convert string to float: ''sal'''
      stdout:
      - ''
      - ''
      - ''
    node_to: !Node
      _node_tags: null
      id: 5
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '0

        '
      - '0

        '
      - '0

        '
    prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings\
      \ remove anything past the last t in the string, and store in a new list. Type\
      \ cast the new list to floats and add values together.\n    \"\"\"\n    "
    prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings\
      \ remove anything past the last t in the string type cast the values to floats\
      \ and add values together.\n    \"\"\"\n    "
    state: neutral
    total_attempts: 5
    username: student49
  - !Edge
    _edge_tags:
    - m2
    attempt_id: 4
    clues:
    - 1
    - 2
    - 4
    - 5
    - 6
    completion_from: "total = 0\n    for line in lines:\n        line = line.split('\
      \ ')\n        line = line[0]\n        line = line.split('t')\n        line =\
      \ line[0]\n        line = float(line)\n        total += line\n    return total\n"
    completion_to: "total = 0\n    for line in lines:\n        if \"t\" in line:\n\
      \            line = line[:line.index(\"t\")]\n            total += float(line)\n\
      \    return total\n"
    diff: "--- \n+++ \n@@ -14,22 +14,23 @@\n t in the-string+string, type cast the\
      \ value to float.-Then-move+Move to the next string in the-list+list,+if+exists\
      \ and repeat. Once@@ -44,7 +45,11 @@\n and add all-removed values+that+were+cast+to+float\
      \ together. \"\"\""
    node_from: *id004
    node_to: *id004
    prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings\
      \ remove anything past the last t in the string type cast the value to float.\
      \ Then move to the next string in the list and repeat. Once the end at the end\
      \ of the list and add all removed values together.\n    \"\"\"\n    "
    prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings\
      \ remove anything past the last t in the string, type cast the value to float.\
      \ Move to the next string in the list, if exists and repeat. Once the end at\
      \ the end of the list and add all values that were cast to float together.\n\
      \    \"\"\"\n    "
    state: fail
    total_attempts: 5
    username: student49
  student62: []
  student66: []
  student67: []
  student68: []
  student70:
  - !Edge
    _edge_tags:
    - m5
    attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    completion_from: "sum = 0\n    for line in lines:\n        count = 0\n       \
      \ for i in range(len(line)):\n            if line[i] == \"\\t\":\n         \
      \       count += 1\n            if count == 2:\n                sum += int(line[i+1:])\n\
      \                break\n    return sum\n"
    completion_to: "sum = 0\n    for line in lines:\n        line = line.strip()\n\
      \        line = line[line.find(\"\\t\")+1:]\n        line = line[line.find(\"\
      \\t\")+1:]\n        if \".\" in line:\n            sum += float(line)\n    \
      \    else:\n            sum += int(line)\n    return sum\n"
    diff: "--- \n+++ \n@@ -29,17 +29,32 @@\n rest of the+string.+If+this+remaining+portion+of+the\
      \ string-and+contains+\".\", convert it into a-number,-then-add-that-number+float.+Otherwise,+convert+it+into+an+integer.+Add+this+float+or+integer\
      \ to the sum."
    node_from: !Node
      _node_tags: null
      id: 3
      stderr:
      - 'ValueError: invalid literal for int() with base 10: ''2.5'''
      - ''
      - ''
      stdout:
      - ''
      - '10

        '
      - '0

        '
    node_to: !Node
      _node_tags: null
      id: 13
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '36.5

        '
      - '10.0

        '
      - '0.0

        '
    prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for\
      \ the sum. Go through each string in the input list. After the second time \"\
      \\t\" appears in the string, save the rest of the string and convert it into\
      \ a number, then add that number to the sum. Return the sum at the end of the\
      \ list.\n    \"\"\"\n    "
    prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for\
      \ the sum. Go through each string in the input list. After the second time \"\
      \\t\" appears in the string, save the rest of the string. If this remaining\
      \ portion of the string contains \".\", convert it into a float. Otherwise,\
      \ convert it into an integer. Add this float or integer to the sum. Return the\
      \ sum at the end of the list.\n    \"\"\"\n    "
    state: success
    total_attempts: 3
    username: student70
  student78:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 2
    clues:
    - 1
    - 2
    - 4
    - 5
    - 6
    - 7
    completion_from: "total = 0\n    for line in lines:\n        line = line.split('\\\
      \\')\n        for item in line:\n            if item.isdigit():\n          \
      \      item = item.replace('t', '')\n                total += float(item)\n\
      \    return total\n"
    completion_to: "total = 0\n    for line in lines:\n        line = line.split(\"\
      \\\\\")\n        for item in line:\n            if item[0] == \"t\":\n     \
      \           item = item[1:]\n            if item.isdigit():\n              \
      \  total += float(item)\n    return total\n"
    diff: "--- \n+++ \n@@ -11,19 +11,26 @@\n string by \\.+for+each+new+string,+if+it+starts+with+t,+eliminate+the+t.+next\
      \ find the sting that contains a-number-and-eliminate-the-'t'-in-it,+number,\
      \ convert it to"
    node_from: &id005 !Node
      _node_tags: null
      id: 5
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '0

        '
      - '0

        '
      - '0

        '
    node_to: *id005
    prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings,\
      \ split each string by \\. find the sting that contains a number and\neliminate\
      \ the 't' in it, convert it to a float, and add it to running total. output\
      \ this total\n    \"\"\"\n    "
    prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings,\
      \ split each string by \\. for each new string, if it starts with t, eliminate\
      \ the t. next find the sting that contains a number, convert it to a float,\
      \ and add it to running total. output this total\n    \"\"\"\n    "
    state: neutral
    total_attempts: 5
    username: student78
  - !Edge
    _edge_tags:
    - a4
    - a5
    - a6
    - a7
    attempt_id: 4
    clues:
    - 1
    - 2
    - 4
    - 5
    - 6
    - 7
    completion_from: "for line in lines:\n        print(line.split('\\\\'))\n"
    completion_to: "total = 0\n    for line in lines:\n        line = line.split(\"\
      \\\\\")\n        for i in line:\n            if i[0] == \"t\":\n           \
      \     i = i[1:]\n            if i.isdigit():\n                total += float(i)\n\
      \    return total\n"
    diff: "--- \n+++ \n@@ -11,6 +11,38 @@\n string by \\.+for+each+new+string,+if+it+starts+with+t,+eliminate+the+t.+next+find+the+sting+that+contains+a+number,+convert+it+to+a+float,+and+add+it+to+running+total.\
      \ output this+total \"\"\""
    node_from: !Node
      _node_tags: null
      id: 9
      stderr:
      - 'IndentationError: expected an indented block after ''for'' statement on line
        5'
      - 'IndentationError: expected an indented block after ''for'' statement on line
        5'
      - 'IndentationError: expected an indented block after ''for'' statement on line
        5'
      stdout:
      - ''
      - ''
      - ''
    node_to: *id005
    prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings,\
      \ split each string by \\. output this \n    \"\"\"\n    "
    prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings,\
      \ split each string by \\. for each new string, if it starts with t, eliminate\
      \ the t. next find the sting that contains a number, convert it to a float,\
      \ and add it to running total. output this total\n    \"\"\"\n    "
    state: fail
    total_attempts: 5
    username: student78
