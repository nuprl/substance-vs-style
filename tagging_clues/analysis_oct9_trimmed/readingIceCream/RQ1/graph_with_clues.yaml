!Graph
COLORS:
- '#d83034'
- '#f9e858'
- '#008dff'
- '#4ecb8d'
- '#c701ff'
- '#ffcd8e'
- '#003a7d'
- '#Ff73b6'
- '#ff7f50'
- '#7fff00'
- '#8a2be2'
- '#ffd700'
- '#ff4500'
- '#00ced1'
- '#ff1493'
- '#9400d3'
- '#00bfff'
edges:
- !Edge
  _edge_tags:
  - a5
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  completion_from: "total = 0\n    for line in lines:\n        total += int(line.split(\"\
    \\t\")[2])\n    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        total += float(line.split(\"\
    \\t\")[2])\n    return total\n"
  diff: "--- \n+++ \n@@ -47,4 +47,11 @@\n of each string.+The+value+can+be+integers+or+floats.\
    \ \"\"\""
  node_from: &id003 !Node
    _node_tags: null
    id: 3
    stderr:
    - 'ValueError: invalid literal for int() with base 10: ''2.5'''
    - ''
    - ''
    stdout:
    - ''
    - '10

      '
    - '0

      '
  node_to: &id005 !Node
    _node_tags: null
    id: 13
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '36.5

      '
    - '10.0

      '
    - '0.0

      '
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Calculate the total value\
    \ of a list of ice cream. The input will be a list of strings, and each string\
    \ contains three parts separated by \"\\t\". Calculate the sum of the values of\
    \ each ice cream by summing up the last part of each string.\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Calculate the total value\
    \ of a list of ice cream. The input will be a list of strings, and each string\
    \ contains three parts separated by \"\\t\". Calculate the sum of the values of\
    \ each ice cream by summing up the last part of each string. The value can be\
    \ integers or floats.\n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student27
- !Edge
  _edge_tags:
  - m3
  - m4
  - a5
  attempt_id: 1
  clues:
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  completion_from: "total = 0\n    for line in lines:\n        index = line.find(\"\
    \\\\\")\n        index = line.find(\"\\\\\", index + 1)\n        index = line.find(\"\
    t\", index + 1)\n        total += int(line[index + 1:])\n    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        count = 0\n        for\
    \ char in line:\n            if char == \"\\\\\":\n                count += 1\n\
    \            if count == 2:\n                line = line[line.index(\"\\\\\")+1:]\n\
    \                line = line[line.index(\"\\\\\")+1:]\n                line =\
    \ line[1:]\n                total += float(line)\n                break\n    return\
    \ total\n"
  diff: "--- \n+++ \n@@ -9,25 +9,50 @@\n through the string-until-after+and+keep+track+of\
    \ the-2nd+number+of \"\\\"-character.+characters.+When+the+number+of+\"\\\"+is+2,+isolate+the+rest+of+the+string.\
    \ Then-return+isolate the-integer-following-the-\"t\"-character.+remainder+of+that+string,+starting+at+index+1.+Convert+this+string+to+a+float.\
    \ Keep track of the-integer+float for each entry"
  node_from: &id014 !Node
    _node_tags: null
    id: 6
    stderr:
    - 'ValueError: invalid literal for int() with base 10: ''\tice cream\t3'''
    - 'ValueError: invalid literal for int() with base 10: ''y\tfrozen yogurt\t10'''
    - 'ValueError: invalid literal for int() with base 10: ''y\tfrozen yogurt\t0'''
    stdout:
    - ''
    - ''
    - ''
  node_to: &id001 !Node
    _node_tags: null
    id: 5
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '0

      '
    - '0

      '
    - '0

      '
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry,\
    \ parse through the string until after the 2nd \"\\\" character. Then return the\
    \ integer following the \"t\" character. Keep track of the integer for each entry\
    \ and add them all together, returning the sum for each list\n\n    \"\"\"\n \
    \   "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry, parse\
    \ through the string and keep track of the number of \"\\\" characters. When the\
    \ number of \"\\\" is 2, isolate the rest of the string. Then isolate the remainder\
    \ of that string, starting at index 1. Convert this string to a float. Keep track\
    \ of the float for each entry and add them all together, returning the sum for\
    \ each list\n\n    \"\"\"\n    "
  state: neutral
  total_attempts: 8
  username: student29
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues:
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  completion_from: "total = 0\n    for line in lines:\n        count = 0\n       \
    \ for char in line:\n            if char == \"\\\\\":\n                count +=\
    \ 1\n            if count == 2:\n                line = line[line.index(\"\\\\\
    \")+1:]\n                line = line[line.index(\"\\\\\")+1:]\n              \
    \  line = line[1:]\n                total += float(line)\n                break\n\
    \    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        count = 0\n        for\
    \ char in line:\n            if char == \"\\\\\":\n                count += 1\n\
    \            if count == 2:\n                line = line[line.index(char):]\n\
    \                line = line[1:]\n                total += float(line)\n    return\
    \ total\n\n"
  diff: "--- \n+++ \n@@ -19,10 +19,8 @@\n \"\\\" characters. When-the-number-of-\"\
    \\\"+that+count is 2, isolate"
  node_from: *id001
  node_to: *id001
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry,\
    \ parse through the string and keep track of the number of \"\\\" characters.\
    \ When the number of \"\\\" is 2, isolate the rest of the string. Then isolate\
    \ the remainder of that string, starting at index 1. Convert this string to a\
    \ float. Keep track of the float for each entry and add them all together, returning\
    \ the sum for each list\n\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry, parse\
    \ through the string and keep track of the number of \"\\\" characters. When that\
    \ count is 2, isolate the rest of the string. Then isolate the remainder of that\
    \ string, starting at index 1. Convert this string to a float. Keep track of the\
    \ float for each entry and add them all together, returning the sum for each list\n\
    \n    \"\"\"\n    "
  state: neutral
  total_attempts: 8
  username: student29
- !Edge
  _edge_tags:
  - m3
  attempt_id: 3
  clues:
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  completion_from: "total = 0\n    for line in lines:\n        count = 0\n       \
    \ for char in line:\n            if char == \"\\\\\":\n                count +=\
    \ 1\n            if count == 2:\n                line = line[line.index(char):]\n\
    \                line = line[1:]\n                total += float(line)\n    return\
    \ total\n\n"
  completion_to: "count = 0\n    total = 0\n    for line in lines:\n        for char\
    \ in line:\n            if char == \"\\\\\":\n                count += 1\n   \
    \         if count == 2:\n                line = line[line.index(\"\\\\\")+1:]\n\
    \                line = line[line.index(\"\\\\\")+1:]\n                total +=\
    \ float(line)\n                count = 0\n    return total\n"
  diff: "--- \n+++ \n@@ -10,14 +10,12 @@\n the string and-keep-track-of-the-number-of+increase+count+after+each\
    \ \"\\\"-characters.+character. When that count"
  node_from: *id001
  node_to: *id001
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry,\
    \ parse through the string and keep track of the number of \"\\\" characters.\
    \ When that count is 2, isolate the rest of the string. Then isolate the remainder\
    \ of that string, starting at index 1. Convert this string to a float. Keep track\
    \ of the float for each entry and add them all together, returning the sum for\
    \ each list\n\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry, parse\
    \ through the string and increase count after each \"\\\" character. When that\
    \ count is 2, isolate the rest of the string. Then isolate the remainder of that\
    \ string, starting at index 1. Convert this string to a float. Keep track of the\
    \ float for each entry and add them all together, returning the sum for each list\n\
    \n    \"\"\"\n    "
  state: neutral
  total_attempts: 8
  username: student29
- !Edge
  _edge_tags:
  - m3
  attempt_id: 4
  clues:
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  completion_from: "count = 0\n    total = 0\n    for line in lines:\n        for\
    \ char in line:\n            if char == \"\\\\\":\n                count += 1\n\
    \            if count == 2:\n                line = line[line.index(\"\\\\\")+1:]\n\
    \                line = line[line.index(\"\\\\\")+1:]\n                total +=\
    \ float(line)\n                count = 0\n    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        total += float(line[line.rfind(\"\
    t\")+1:])\n    return total\n"
  diff: "--- \n+++ \n@@ -1,66 +1,53 @@\n def readingIceCream(lines): \"\"\"-For+Starting+at+the+end+of\
    \ each-list-entry,+string+input, parse-through+backwards+until+you+reach+the+\"\
    t\"+character.+Isolate the string-and-increase-count-after-each-\"\\\"-character.-When-that-count-is-2,-isolate+from\
    \ the-rest+\"t\"+character+until+the+end of the-string.-Then-isolate-the-remainder-of+entry.+Convert\
    \ that-string,-starting-at-index-1.-Convert-this string to a-float.-Keep-track+float,+then+add+all\
    \ of the-float+floats for each entry+together and-add-them-all-together,-returning+return\
    \ the-sum-for-each-list+total. \"\"\""
  node_from: *id001
  node_to: &id002 !Node
    _node_tags: null
    id: 7
    stderr:
    - 'ValueError: could not convert string to float: ''\tice cream\t3'''
    - ''
    - ''
    stdout:
    - ''
    - '10.0

      '
    - '0.0

      '
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry,\
    \ parse through the string and increase count after each \"\\\" character. When\
    \ that count is 2, isolate the rest of the string. Then isolate the remainder\
    \ of that string, starting at index 1. Convert this string to a float. Keep track\
    \ of the float for each entry and add them all together, returning the sum for\
    \ each list\n\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Starting at the end of\
    \ each string input, parse backwards until you reach the \"t\" character. Isolate\
    \ the string from the \"t\" character until the end of the entry. Convert that\
    \ string to a float, then add all of the floats for each entry together and return\
    \ the total.\n\n    \"\"\"\n    "
  state: neutral
  total_attempts: 8
  username: student29
- !Edge
  _edge_tags:
  - m2
  attempt_id: 5
  clues:
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  completion_from: "total = 0\n    for line in lines:\n        total += float(line[line.rfind(\"\
    t\")+1:])\n    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        line = line[::-1]\n \
    \       for i in range(len(line)):\n            if line[i] == \"t\":\n       \
    \         total += float(line[:i][::-1])\n                break\n    return total\n"
  diff: "--- \n+++ \n@@ -7,8 +7,8 @@\n end of each-string-input,+list+entry, parse\
    \ backwards until"
  node_from: *id002
  node_to: *id002
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Starting at the end of\
    \ each string input, parse backwards until you reach the \"t\" character. Isolate\
    \ the string from the \"t\" character until the end of the entry. Convert that\
    \ string to a float, then add all of the floats for each entry together and return\
    \ the total.\n\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Starting at the end of\
    \ each list entry, parse backwards until you reach the \"t\" character. Isolate\
    \ the string from the \"t\" character until the end of the entry. Convert that\
    \ string to a float, then add all of the floats for each entry together and return\
    \ the total.\n\n    \"\"\"\n    "
  state: neutral
  total_attempts: 8
  username: student29
- !Edge
  _edge_tags:
  - m2
  attempt_id: 6
  clues:
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  completion_from: "total = 0\n    for line in lines:\n        line = line[::-1]\n\
    \        for i in range(len(line)):\n            if line[i] == \"t\":\n      \
    \          total += float(line[:i][::-1])\n                break\n    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        line = line[::-1]\n \
    \       line = line[:line.find(\"t\")]\n        line = line[::-1]\n        total\
    \ += float(line)\n    return total\n"
  diff: "--- \n+++ \n@@ -1,14 +1,18 @@\n def readingIceCream(lines): \"\"\"-Starting+For+each+list+entry,+start\
    \ at the end of-each-list-entry,+the+corresponding+string, parse backwards until"
  node_from: *id002
  node_to: *id002
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Starting at the end of\
    \ each list entry, parse backwards until you reach the \"t\" character. Isolate\
    \ the string from the \"t\" character until the end of the entry. Convert that\
    \ string to a float, then add all of the floats for each entry together and return\
    \ the total.\n\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry, start\
    \ at the end of the corresponding string, parse backwards until you reach the\
    \ \"t\" character. Isolate the string from the \"t\" character until the end of\
    \ the entry. Convert that string to a float, then add all of the floats for each\
    \ entry together and return the total.\n\n    \"\"\"\n    "
  state: neutral
  total_attempts: 8
  username: student29
- !Edge
  _edge_tags:
  - m3
  attempt_id: 7
  clues:
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  completion_from: "total = 0\n    for line in lines:\n        line = line[::-1]\n\
    \        line = line[:line.find(\"t\")]\n        line = line[::-1]\n        total\
    \ += float(line)\n    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        line = line.strip()\n\
    \        index = len(line) - 1\n        while line[index] != \"t\":\n        \
    \    index -= 1\n        total += float(line[index + 1:])\n    return total\n"
  diff: "--- \n+++ \n@@ -19,6 +19,7 @@\n you reach the+first \"t\" character. Isolate"
  node_from: *id002
  node_to: *id002
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry,\
    \ start at the end of the corresponding string, parse backwards until you reach\
    \ the \"t\" character. Isolate the string from the \"t\" character until the end\
    \ of the entry. Convert that string to a float, then add all of the floats for\
    \ each entry together and return the total.\n\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    For each list entry, start\
    \ at the end of the corresponding string, parse backwards until you reach the\
    \ first \"t\" character. Isolate the string from the \"t\" character until the\
    \ end of the entry. Convert that string to a float, then add all of the floats\
    \ for each entry together and return the total.\n\n    \"\"\"\n    "
  state: fail
  total_attempts: 8
  username: student29
- !Edge
  _edge_tags:
  - m4
  attempt_id: 1
  clues:
  - 2
  - 3
  - 4
  - 6
  - 7
  completion_from: "total = 0\n    for line in lines:\n        if '\\t' in line:\n\
    \            total += int(line.split('\\t')[-1])\n    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        for word in line.split():\n\
    \            if word.isdigit():\n                total += int(word)\n    return\
    \ total\n"
  diff: "--- \n+++ \n@@ -22,4 +22,12 @@\n in the element.+the+sum+should+not+be+limited+to+integers\
    \ \"\"\""
  node_from: *id003
  node_to: &id004 !Node
    _node_tags: null
    id: 12
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '34

      '
    - '10

      '
    - '0

      '
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the\
    \ numbers in each element in the array following the last instance of '/t' in\
    \ the element. \n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the\
    \ numbers in each element in the array following the last instance of '/t' in\
    \ the element. the sum should not be limited to integers\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student32
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues:
  - 2
  - 3
  - 4
  - 6
  - 7
  completion_from: "total = 0\n    for line in lines:\n        for word in line.split():\n\
    \            if word.isdigit():\n                total += int(word)\n    return\
    \ total\n"
  completion_to: "total = 0\n    for line in lines:\n        line = line.split('\\\
    t')\n        total += float(line[-1])\n    return total\n"
  diff: "--- \n+++ \n@@ -25,9 +25,8 @@\n the sum should-not-be-limited-to-integers+include+numbers+with+decimals\
    \ \"\"\""
  node_from: *id004
  node_to: *id005
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the\
    \ numbers in each element in the array following the last instance of '/t' in\
    \ the element. the sum should not be limited to integers\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Returns the sum of the\
    \ numbers in each element in the array following the last instance of '/t' in\
    \ the element. the sum should include numbers with decimals\n\n    \"\"\"\n  \
    \  "
  state: success
  total_attempts: 3
  username: student32
- !Edge
  _edge_tags:
  - m4
  - d5
  attempt_id: 1
  clues:
  - 4
  - 6
  completion_from: "total = 0\n    for line in lines:\n        total += float(line[line.rfind('t')\
    \ + 1:])\n    return total\n"
  completion_to: "sum = 0\n    for line in lines:\n        sum += int(line.split('t')[-1])\n\
    \    return sum\n"
  diff: "--- \n+++ \n@@ -2,9 +2,10 @@\n readingIceCream(lines): \"\"\" Convert-all+the+numbers\
    \ that-appears+appear after the last@@ -16,14 +17,13 @@\n the list into-a-float,+integers,\
    \ and then find the sum of-the-floats+those+integers \"\"\""
  node_from: *id002
  node_to: &id006 !Node
    _node_tags: null
    id: 16
    stderr:
    - 'ValueError: invalid literal for int() with base 10: ''\tice cream\t3'''
    - ''
    - ''
    stdout:
    - ''
    - '10

      '
    - '0

      '
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Convert all that appears\
    \ after the last t of each object in the list into a float, and then find the\
    \ sum of the floats\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Convert the numbers that\
    \ appear after the last t of each object in the list into integers, and then find\
    \ the sum of those integers\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student34
- !Edge
  _edge_tags:
  - l4
  - a5
  attempt_id: 2
  clues:
  - 4
  - 5
  - 6
  completion_from: "sum = 0\n    for line in lines:\n        sum += int(line.split('t')[-1])\n\
    \    return sum\n"
  completion_to: "total = 0\n    for line in lines:\n        total += int(line.split('t')[-1])\n\
    \    return total\n"
  diff: "--- \n+++ \n@@ -2,10 +2,8 @@\n readingIceCream(lines): \"\"\" Convert-the-numbers-that-appear+what+appears\
    \ after the last@@ -17,7 +15,7 @@\n the list into-integers,+numbers, and then\
    \ find@@ -25,5 +23,5 @@\n sum of those-integers+numbers \"\"\""
  node_from: *id006
  node_to: *id006
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Convert the numbers that\
    \ appear after the last t of each object in the list into integers, and then find\
    \ the sum of those integers\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Convert what appears after\
    \ the last t of each object in the list into numbers, and then find the sum of\
    \ those numbers\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student34
- !Edge
  _edge_tags:
  - a3
  - m5
  attempt_id: 3
  clues:
  - 3
  - 4
  - 5
  - 6
  completion_from: "total = 0\n    for line in lines:\n        total += int(line.split('t')[-1])\n\
    \    return total\n"
  completion_to: "iceCream = []\n    for line in lines:\n        if \"ice cream\"\
    \ in line or \"frozen yogurt\" in line:\n            iceCream.append(float(line.split(\"\
    \\t\")[1]))\n    return sum(iceCream)\n"
  diff: "--- \n+++ \n@@ -2,12 +2,16 @@\n readingIceCream(lines): \"\"\" Convert-what+all+that\
    \ appears after the-last-t+\"ice+cream\\t\"+or+\"frozen+yogurt\\t\" of each object@@\
    \ -15,13 +19,20 @@\n the list into-numbers,+a+float,+make+a+new+list+of+those+floats,\
    \ and-then find the sum of-those-numbers+that+list \"\"\""
  node_from: *id006
  node_to: &id007 !Node
    _node_tags: null
    id: 8
    stderr:
    - 'ValueError: could not convert string to float: ''ice cream'''
    - 'ValueError: could not convert string to float: ''frozen yogurt'''
    - 'ValueError: could not convert string to float: ''frozen yogurt'''
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Convert what appears\
    \ after the last t of each object in the list into numbers, and then find the\
    \ sum of those numbers\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Convert all that appears\
    \ after the \"ice cream\\t\" or \"frozen yogurt\\t\" of each object in the list\
    \ into a float, make a new list of those floats, and find the sum of that list\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student34
- !Edge
  _edge_tags:
  - l3
  attempt_id: 4
  clues:
  - 3
  - 4
  - 5
  - 6
  completion_from: "iceCream = []\n    for line in lines:\n        if \"ice cream\"\
    \ in line or \"frozen yogurt\" in line:\n            iceCream.append(float(line.split(\"\
    \\t\")[1]))\n    return sum(iceCream)\n"
  completion_to: "newList = []\n    for line in lines:\n        newList.append(float(line[line.rfind(\"\
    t\")+1:]))\n    return sum(newList)\n"
  diff: "--- \n+++ \n@@ -7,11 +7,8 @@\n appears after the-\"ice-cream\\t\"-or-\"frozen-yogurt\\\
    t\"+final+\"t\" of each object"
  node_from: *id007
  node_to: *id002
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Convert all that appears\
    \ after the \"ice cream\\t\" or \"frozen yogurt\\t\" of each object in the list\
    \ into a float, make a new list of those floats, and find the sum of that list\n\
    \    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Convert all that appears\
    \ after the final \"t\" of each object in the list into a float, make a new list\
    \ of those floats, and find the sum of that list\n    \"\"\"\n    "
  state: fail
  total_attempts: 5
  username: student34
- !Edge
  _edge_tags:
  - a5
  attempt_id: 1
  clues:
  - 1
  - 2
  - 4
  - 5
  - 6
  completion_from: "total = 0\n    for line in lines:\n        total += int(line.split('t')[-1])\n\
    \    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        line = line.split(\"\
    t\")[0]\n        total += float(line)\n    return total\n"
  diff: "--- \n+++ \n@@ -15,14 +15,21 @@\n in the string,-type+and+store+in+a+new+list.+Type\
    \ cast+the+new+list to-an-integer+floats and-then add-them+values together. \"\
    \"\""
  node_from: *id006
  node_to: &id008 !Node
    _node_tags: null
    id: 10
    stderr:
    - 'ValueError: could not convert string to float: ''peppermin'''
    - 'ValueError: could not convert string to float: ''sal'''
    - 'ValueError: could not convert string to float: ''sal'''
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings\
    \ remove anything past the last t in the string, type cast to an integer and then\
    \ add them together. \n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings\
    \ remove anything past the last t in the string, and store in a new list. Type\
    \ cast the new list to floats and add values together.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student49
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues:
  - 1
  - 2
  - 4
  - 5
  - 6
  completion_from: "total = 0\n    for line in lines:\n        line = line.split(\"\
    t\")[0]\n        total += float(line)\n    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        line = line.split()\n\
    \        if line[0] == 't':\n            total += float(line[1])\n    return total\n"
  diff: "--- \n+++ \n@@ -14,18 +14,11 @@\n t in the-string,-and-store-in-a-new-list.-Type+string+type\
    \ cast the-new-list+values to floats and"
  node_from: *id008
  node_to: *id001
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings\
    \ remove anything past the last t in the string, and store in a new list. Type\
    \ cast the new list to floats and add values together.\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings\
    \ remove anything past the last t in the string type cast the values to floats\
    \ and add values together.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student49
- !Edge
  _edge_tags:
  - m2
  attempt_id: 3
  clues:
  - 1
  - 2
  - 4
  - 5
  - 6
  completion_from: "total = 0\n    for line in lines:\n        line = line.split()\n\
    \        if line[0] == 't':\n            total += float(line[1])\n    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        line = line.split(' ')\n\
    \        line = line[0]\n        line = line.split('t')\n        line = line[0]\n\
    \        line = float(line)\n        total += line\n    return total\n"
  diff: "--- \n+++ \n@@ -18,11 +18,33 @@\n type cast the-values+value to-floats+float.+Then+move+to+the+next+string+in+the+list+and+repeat.+Once+the+end+at+the+end+of+the+list\
    \ and add+all+removed values together. \"\"\""
  node_from: *id001
  node_to: *id008
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings\
    \ remove anything past the last t in the string type cast the values to floats\
    \ and add values together.\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings\
    \ remove anything past the last t in the string type cast the value to float.\
    \ Then move to the next string in the list and repeat. Once the end at the end\
    \ of the list and add all removed values together.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student49
- !Edge
  _edge_tags:
  - m2
  attempt_id: 4
  clues:
  - 1
  - 2
  - 4
  - 5
  - 6
  completion_from: "total = 0\n    for line in lines:\n        line = line.split('\
    \ ')\n        line = line[0]\n        line = line.split('t')\n        line = line[0]\n\
    \        line = float(line)\n        total += line\n    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        if \"t\" in line:\n \
    \           line = line[:line.index(\"t\")]\n            total += float(line)\n\
    \    return total\n"
  diff: "--- \n+++ \n@@ -14,22 +14,23 @@\n t in the-string+string, type cast the value\
    \ to float.-Then-move+Move to the next string in the-list+list,+if+exists and\
    \ repeat. Once@@ -44,7 +45,11 @@\n and add all-removed values+that+were+cast+to+float\
    \ together. \"\"\""
  node_from: *id008
  node_to: *id008
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings\
    \ remove anything past the last t in the string type cast the value to float.\
    \ Then move to the next string in the list and repeat. Once the end at the end\
    \ of the list and add all removed values together.\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Given a list of strings\
    \ remove anything past the last t in the string, type cast the value to float.\
    \ Move to the next string in the list, if exists and repeat. Once the end at the\
    \ end of the list and add all values that were cast to float together.\n    \"\
    \"\"\n    "
  state: fail
  total_attempts: 5
  username: student49
- !Edge
  _edge_tags:
  - m6
  attempt_id: 1
  clues:
  - 2
  - 3
  - 6
  - 7
  completion_from: "count = 0\n    for line in lines:\n        count += int(line.split('\\\
    t')[1])\n    return count\n"
  completion_to: "count = 0\n    for line in lines:\n        if line[0] == '\\t':\n\
    \            try:\n                count += int(line[1:])\n            except\
    \ ValueError:\n                pass\n    return count\n"
  diff: "--- \n+++ \n@@ -12,7 +12,12 @@\n after '\\t' to-count,+count+if+it+is+an+integer,\
    \ returns sum \"\"\""
  node_from: &id016 !Node
    _node_tags: null
    id: 15
    stderr:
    - 'ValueError: invalid literal for int() with base 10: ''ice cream'''
    - 'ValueError: invalid literal for int() with base 10: ''frozen yogurt'''
    - 'ValueError: invalid literal for int() with base 10: ''frozen yogurt'''
    stdout:
    - ''
    - ''
    - ''
  node_to: *id001
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    for each element in list,\
    \ adds number directly after '\\t' to count, returns sum\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    for each element in list,\
    \ adds number directly after '\\t' to count if it is an integer, returns sum\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student62
- !Edge
  _edge_tags:
  - l6
  attempt_id: 2
  clues:
  - 2
  - 3
  - 6
  - 7
  completion_from: "count = 0\n    for line in lines:\n        if line[0] == '\\t':\n\
    \            try:\n                count += int(line[1:])\n            except\
    \ ValueError:\n                pass\n    return count\n"
  completion_to: "count = 0\n    for line in lines:\n        count += int(line.split('\\\
    t')[2])\n    return count\n"
  diff: "--- \n+++ \n@@ -10,14 +10,11 @@\n number directly after+the+second '\\t'\
    \ to-count-if-it-is-an-integer,+count, returns sum \"\"\""
  node_from: *id001
  node_to: *id003
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    for each element in list,\
    \ adds number directly after '\\t' to count if it is an integer, returns sum\n\
    \    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    for each element in list,\
    \ adds number directly after the second '\\t' to count, returns sum\n    \"\"\"\
    \n    "
  state: neutral
  total_attempts: 4
  username: student62
- !Edge
  _edge_tags:
  - a5
  attempt_id: 3
  clues:
  - 2
  - 3
  - 5
  - 6
  - 7
  completion_from: "count = 0\n    for line in lines:\n        count += int(line.split('\\\
    t')[2])\n    return count\n"
  completion_to: "count = 0\n    for line in lines:\n        count += float(line.split('\\\
    t')[2])\n    return count\n"
  diff: "--- \n+++ \n@@ -7,7 +7,7 @@\n in list, adds-number+float directly after the"
  node_from: *id003
  node_to: *id005
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    for each element in list,\
    \ adds number directly after the second '\\t' to count, returns sum\n    \"\"\"\
    \n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    for each element in list,\
    \ adds float directly after the second '\\t' to count, returns sum\n    \"\"\"\
    \n    "
  state: success
  total_attempts: 4
  username: student62
- !Edge
  _edge_tags:
  - a4
  - d5
  attempt_id: 1
  clues:
  - 2
  - 4
  - 6
  - 7
  completion_from: "total = 0\n    for line in lines:\n        total += float(line)\n\
    \    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        total += int(line.split()[-1])\n\
    \    return total\n"
  diff: "--- \n+++ \n@@ -1,17 +1,26 @@\n def readingIceCream(lines): \"\"\"-return+take\
    \ the-sum+integer+at+the+end of-the-float-in each item in the array list+and+sum+all+of+the+values+return+the+sum\
    \ \"\"\""
  node_from: &id015 !Node
    _node_tags: null
    id: 11
    stderr:
    - 'ValueError: could not convert string to float: ''peppermint\tice cream\t3'''
    - 'ValueError: could not convert string to float: ''salty\tfrozen yogurt\t10'''
    - 'ValueError: could not convert string to float: ''salty\tfrozen yogurt\t0'''
    stdout:
    - ''
    - ''
    - ''
  node_to: *id003
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    return the sum of the\
    \ float in each item in the array list\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    take the integer at the\
    \ end of each item in the array list and sum all of the values return the sum\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student66
- !Edge
  _edge_tags:
  - a5
  attempt_id: 2
  clues:
  - 2
  - 4
  - 5
  - 6
  - 7
  completion_from: "total = 0\n    for line in lines:\n        total += int(line.split()[-1])\n\
    \    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        total += float(line.split()[-1])\n\
    \    return total\n"
  diff: "--- \n+++ \n@@ -3,7 +3,7 @@\n \"\"\" take the-integer+float at the end"
  node_from: *id003
  node_to: *id005
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    take the integer at the\
    \ end of each item in the array list and sum all of the values return the sum\n\
    \    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    take the float at the end\
    \ of each item in the array list and sum all of the values return the sum\n  \
    \  \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student66
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues:
  - 7
  completion_from: "for line in lines:\n        if \"t\" in line:\n            return\
    \ int(line.split(\" \")[1])\n"
  completion_to: "for line in lines:\n        line = line.strip()\n        line =\
    \ line.split(\" \")\n        print(len(line[0]) * int(line[1]))\n"
  diff: "--- \n+++ \n@@ -1,7 +1,19 @@\n def readingIceCream(lines): \"\"\"-Returns+Multiplies+the+number+of+letters+in+the+word+before+the+first+\\\
    +by the number after"
  node_from: &id011 !Node
    _node_tags: null
    id: 1
    stderr:
    - 'ValueError: invalid literal for int() with base 10: ''cream\t3'''
    - 'ValueError: invalid literal for int() with base 10: ''yogurt\t10'''
    - 'ValueError: invalid literal for int() with base 10: ''yogurt\t0'''
    stdout:
    - ''
    - ''
    - ''
  node_to: &id009 !Node
    _node_tags: null
    id: 0
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'None

      '
    - 'None

      '
    - 'None

      '
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Returns the number after\
    \ t.\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Multiplies the number of\
    \ letters in the word before the first \\ by the number after t.\n    \"\"\"\n\
    \    "
  state: neutral
  total_attempts: 3
  username: student67
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues:
  - 7
  completion_from: "for line in lines:\n        line = line.strip()\n        line\
    \ = line.split(\" \")\n        print(len(line[0]) * int(line[1]))\n"
  completion_to: "for line in lines:\n        line = line.strip()\n        if line\
    \ == \"\":\n            continue\n        line = line.split(\" \")\n        return\
    \ int(line[0]) * int(line[-1])\n"
  diff: "--- \n+++ \n@@ -17,5 +17,9 @@\n the number after-t.+t+and+returns+that+value.\
    \ \"\"\""
  node_from: *id009
  node_to: &id012 !Node
    _node_tags: null
    id: 2
    stderr:
    - 'ValueError: invalid literal for int() with base 10: ''peppermint\tice'''
    - 'ValueError: invalid literal for int() with base 10: ''salty\tfrozen'''
    - 'ValueError: invalid literal for int() with base 10: ''salty\tfrozen'''
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Multiplies the number\
    \ of letters in the word before the first \\ by the number after t.\n    \"\"\"\
    \n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Multiplies the number of\
    \ letters in the word before the first \\ by the number after t and returns that\
    \ value.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student67
- !Edge
  _edge_tags:
  - a5
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  completion_from: "count = 0\n    for line in lines:\n        line = line.split('\\\
    t')\n        count += int(line[-1])\n    return count\n"
  completion_to: "count = 0\n    for line in lines:\n        count += float(line.split('\\\
    t')[-1])\n    return count\n"
  diff: "--- \n+++ \n@@ -20,7 +20,7 @@\n should be a-number+double and add it"
  node_from: *id003
  node_to: *id005
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    given an array of strings,\
    \ parse each string by '\\t' and grab the last value that should be a number and\
    \ add it to a count value. return the count value\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    given an array of strings,\
    \ parse each string by '\\t' and grab the last value that should be a double and\
    \ add it to a count value. return the count value\n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student68
- !Edge
  _edge_tags:
  - a5
  attempt_id: 1
  clues:
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  completion_from: "sum = 0\n    for line in lines:\n        first = line.find(\"\\\
    t\")\n        second = line.find(\"\\t\", first + 1)\n        sum += int(line[second\
    \ + 1:])\n    return sum\n"
  completion_to: "sum = 0\n    for line in lines:\n        count = 0\n        for\
    \ i in range(len(line)):\n            if line[i] == \"\\t\":\n               \
    \ count += 1\n            if count == 2:\n                sum += int(line[i+1:])\n\
    \                break\n    return sum\n"
  diff: "--- \n+++ \n@@ -34,12 +34,12 @@\n convert it into-an-integer,+a+number, then\
    \ add that-integer+number to the sum."
  node_from: *id003
  node_to: *id003
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for\
    \ the sum. Go through each string in the input list. After the second time \"\\\
    t\" appears in the string, save the rest of the string and convert it into an\
    \ integer, then add that integer to the sum. Return the sum at the end of the\
    \ list.\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the\
    \ sum. Go through each string in the input list. After the second time \"\\t\"\
    \ appears in the string, save the rest of the string and convert it into a number,\
    \ then add that number to the sum. Return the sum at the end of the list.\n  \
    \  \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student70
- !Edge
  _edge_tags:
  - m5
  attempt_id: 2
  clues:
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  completion_from: "sum = 0\n    for line in lines:\n        count = 0\n        for\
    \ i in range(len(line)):\n            if line[i] == \"\\t\":\n               \
    \ count += 1\n            if count == 2:\n                sum += int(line[i+1:])\n\
    \                break\n    return sum\n"
  completion_to: "sum = 0\n    for line in lines:\n        line = line.strip()\n \
    \       line = line[line.find(\"\\t\")+1:]\n        line = line[line.find(\"\\\
    t\")+1:]\n        if \".\" in line:\n            sum += float(line)\n        else:\n\
    \            sum += int(line)\n    return sum\n"
  diff: "--- \n+++ \n@@ -29,17 +29,32 @@\n rest of the+string.+If+this+remaining+portion+of+the\
    \ string-and+contains+\".\", convert it into a-number,-then-add-that-number+float.+Otherwise,+convert+it+into+an+integer.+Add+this+float+or+integer\
    \ to the sum."
  node_from: *id003
  node_to: *id005
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for\
    \ the sum. Go through each string in the input list. After the second time \"\\\
    t\" appears in the string, save the rest of the string and convert it into a number,\
    \ then add that number to the sum. Return the sum at the end of the list.\n  \
    \  \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    Create a variable for the\
    \ sum. Go through each string in the input list. After the second time \"\\t\"\
    \ appears in the string, save the rest of the string. If this remaining portion\
    \ of the string contains \".\", convert it into a float. Otherwise, convert it\
    \ into an integer. Add this float or integer to the sum. Return the sum at the\
    \ end of the list.\n    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student70
- !Edge
  _edge_tags:
  - m4
  attempt_id: 1
  clues:
  - 1
  - 2
  - 4
  - 5
  - 6
  - 7
  completion_from: "total = 0\n    for line in lines:\n        line = line.split('\\\
    \\')\n        line = line[2]\n        line = line.replace('t', '')\n        line\
    \ = float(line)\n        total += line\n    return total\n"
  completion_to: "total = 0\n    for line in lines:\n        line = line.split('\\\
    \\')\n        for item in line:\n            if item.isdigit():\n            \
    \    item = item.replace('t', '')\n                total += float(item)\n    return\
    \ total\n"
  diff: "--- \n+++ \n@@ -9,24 +9,16 @@\n split each string-on+by+\\.+find the-'\\\
    '-character.-in-the-new-list-of-3-strings,-take-the-string-in-the-3rd-position,+sting+that+contains+a+number+and\
    \ eliminate the 't'"
  node_from: &id013 !Node
    _node_tags: null
    id: 4
    stderr:
    - 'IndexError: list index out of range'
    - 'IndexError: list index out of range'
    - 'IndexError: list index out of range'
    stdout:
    - ''
    - ''
    - ''
  node_to: *id001
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings,\
    \ split each string on the '\\' character. in the new list of 3 strings, take\
    \ the string in the 3rd position, eliminate the 't' in it, convert it to a float,\
    \ and add it to running total. output this total\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings,\
    \ split each string by \\. find the sting that contains a number and\neliminate\
    \ the 't' in it, convert it to a float, and add it to running total. output this\
    \ total\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student78
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues:
  - 1
  - 2
  - 4
  - 5
  - 6
  - 7
  completion_from: "total = 0\n    for line in lines:\n        line = line.split('\\\
    \\')\n        for item in line:\n            if item.isdigit():\n            \
    \    item = item.replace('t', '')\n                total += float(item)\n    return\
    \ total\n"
  completion_to: "total = 0\n    for line in lines:\n        line = line.split(\"\\\
    \\\")\n        for item in line:\n            if item[0] == \"t\":\n         \
    \       item = item[1:]\n            if item.isdigit():\n                total\
    \ += float(item)\n    return total\n"
  diff: "--- \n+++ \n@@ -11,19 +11,26 @@\n string by \\.+for+each+new+string,+if+it+starts+with+t,+eliminate+the+t.+next\
    \ find the sting that contains a-number-and-eliminate-the-'t'-in-it,+number, convert\
    \ it to"
  node_from: *id001
  node_to: *id001
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings,\
    \ split each string by \\. find the sting that contains a number and\neliminate\
    \ the 't' in it, convert it to a float, and add it to running total. output this\
    \ total\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings,\
    \ split each string by \\. for each new string, if it starts with t, eliminate\
    \ the t. next find the sting that contains a number, convert it to a float, and\
    \ add it to running total. output this total\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student78
- !Edge
  _edge_tags:
  - d4
  - d5
  - d6
  - d7
  attempt_id: 3
  clues:
  - 1
  - 2
  completion_from: "total = 0\n    for line in lines:\n        line = line.split(\"\
    \\\\\")\n        for item in line:\n            if item[0] == \"t\":\n       \
    \         item = item[1:]\n            if item.isdigit():\n                total\
    \ += float(item)\n    return total\n"
  completion_to: "for line in lines:\n        print(line.split('\\\\'))\n"
  diff: "--- \n+++ \n@@ -11,38 +11,6 @@\n string by \\.-for-each-new-string,-if-it-starts-with-t,-eliminate-the-t.-next-find-the-sting-that-contains-a-number,-convert-it-to-a-float,-and-add-it-to-running-total.\
    \ output this-total \"\"\""
  node_from: *id001
  node_to: &id010 !Node
    _node_tags: null
    id: 9
    stderr:
    - 'IndentationError: expected an indented block after ''for'' statement on line
      5'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      5'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      5'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings,\
    \ split each string by \\. for each new string, if it starts with t, eliminate\
    \ the t. next find the sting that contains a number, convert it to a float, and\
    \ add it to running total. output this total\n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings,\
    \ split each string by \\. output this \n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student78
- !Edge
  _edge_tags:
  - a4
  - a5
  - a6
  - a7
  attempt_id: 4
  clues:
  - 1
  - 2
  - 4
  - 5
  - 6
  - 7
  completion_from: "for line in lines:\n        print(line.split('\\\\'))\n"
  completion_to: "total = 0\n    for line in lines:\n        line = line.split(\"\\\
    \\\")\n        for i in line:\n            if i[0] == \"t\":\n               \
    \ i = i[1:]\n            if i.isdigit():\n                total += float(i)\n\
    \    return total\n"
  diff: "--- \n+++ \n@@ -11,6 +11,38 @@\n string by \\.+for+each+new+string,+if+it+starts+with+t,+eliminate+the+t.+next+find+the+sting+that+contains+a+number,+convert+it+to+a+float,+and+add+it+to+running+total.\
    \ output this+total \"\"\""
  node_from: *id010
  node_to: *id001
  prompt_from: "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings,\
    \ split each string by \\. output this \n    \"\"\"\n    "
  prompt_to: "def readingIceCream(lines):\n    \"\"\"\n    given a list of strings,\
    \ split each string by \\. for each new string, if it starts with t, eliminate\
    \ the t. next find the sting that contains a number, convert it to a float, and\
    \ add it to running total. output this total\n    \"\"\"\n    "
  state: fail
  total_attempts: 5
  username: student78
nodes:
- *id009
- *id011
- *id012
- *id003
- *id013
- *id001
- *id014
- *id002
- *id007
- *id010
- *id008
- *id015
- *id004
- *id005
- *id016
- *id006
problem: readingIceCream
problem_clues:
  1: input is a list of strings
  2: go through all strings
  3: split on \t
  4: extract last item from each string
  5: convert to float
  6: sum numbers
  7: return total
student_clues_tracker:
  student27:
  - attempt_id: 0
    clues: &id017
    - 1
    - 2
    - 3
    - 4
    - 6
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
  student29:
  - attempt_id: 0
    clues: &id018
    - 2
    - 3
    - 4
    - 6
    - 7
  - attempt_id: 1
    clues:
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
  - attempt_id: 2
    clues:
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
  - attempt_id: 3
    clues:
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
  - attempt_id: 4
    clues:
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
  - attempt_id: 5
    clues:
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
  - attempt_id: 6
    clues:
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
  - attempt_id: 7
    clues:
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
  student32:
  - attempt_id: 0
    clues: &id019
    - 2
    - 3
    - 4
    - 6
    - 7
  - attempt_id: 1
    clues:
    - 2
    - 3
    - 4
    - 6
    - 7
  - attempt_id: 2
    clues:
    - 2
    - 3
    - 4
    - 6
    - 7
  student34:
  - attempt_id: 0
    clues: &id020
    - 4
    - 5
    - 6
  - attempt_id: 1
    clues:
    - 4
    - 6
  - attempt_id: 2
    clues:
    - 4
    - 5
    - 6
  - attempt_id: 3
    clues:
    - 3
    - 4
    - 5
    - 6
  - attempt_id: 4
    clues:
    - 3
    - 4
    - 5
    - 6
  student49:
  - attempt_id: 0
    clues: &id021
    - 1
    - 2
    - 4
    - 6
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 4
    - 5
    - 6
  - attempt_id: 2
    clues:
    - 1
    - 2
    - 4
    - 5
    - 6
  - attempt_id: 3
    clues:
    - 1
    - 2
    - 4
    - 5
    - 6
  - attempt_id: 4
    clues:
    - 1
    - 2
    - 4
    - 5
    - 6
  student62:
  - attempt_id: 0
    clues: &id022
    - 2
    - 3
    - 6
    - 7
  - attempt_id: 1
    clues:
    - 2
    - 3
    - 6
    - 7
  - attempt_id: 2
    clues:
    - 2
    - 3
    - 6
    - 7
  - attempt_id: 3
    clues:
    - 2
    - 3
    - 5
    - 6
    - 7
  student66:
  - attempt_id: 0
    clues: &id023
    - 2
    - 5
    - 6
    - 7
  - attempt_id: 1
    clues:
    - 2
    - 4
    - 6
    - 7
  - attempt_id: 2
    clues:
    - 2
    - 4
    - 5
    - 6
    - 7
  student67:
  - attempt_id: 0
    clues: &id024
    - 7
  - attempt_id: 1
    clues:
    - 7
  - attempt_id: 2
    clues:
    - 7
  student68:
  - attempt_id: 0
    clues: &id025
    - 1
    - 2
    - 3
    - 4
    - 6
    - 7
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
  student70:
  - attempt_id: 0
    clues: &id026
    - 1
    - 2
    - 3
    - 4
    - 6
    - 7
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
  - attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
  student78:
  - attempt_id: 0
    clues: &id027
    - 1
    - 2
    - 4
    - 5
    - 6
    - 7
  - attempt_id: 1
    clues:
    - 1
    - 2
    - 4
    - 5
    - 6
    - 7
  - attempt_id: 2
    clues:
    - 1
    - 2
    - 4
    - 5
    - 6
    - 7
  - attempt_id: 3
    clues:
    - 1
    - 2
  - attempt_id: 4
    clues:
    - 1
    - 2
    - 4
    - 5
    - 6
    - 7
student_colors: {}
student_start_node_tags:
  student27: *id017
  student29: *id018
  student32: *id019
  student34: *id020
  student49: *id021
  student62: *id022
  student66: *id023
  student67: *id024
  student68: *id025
  student70: *id026
  student78: *id027
