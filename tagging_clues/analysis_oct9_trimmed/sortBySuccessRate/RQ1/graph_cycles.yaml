breakout_edges:
  student23: &id003 !Edge
    _edge_tags:
    - m1
    attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 5
    completion_from: "for i in range(len(nominations)):\n        wins = nominations[i][\"\
      Wins\"]\n        noms = nominations[i][\"Nominations\"]\n        success = wins\
      \ / noms\n        nominations[i][\"Success\"] = success\n    nominations.sort(key=lambda\
      \ x: x[\"Success\"], reverse=True)\n    return nominations\n"
    completion_to: "for i in nominations:\n        i[\"success\"] = i[\"wins\"] /\
      \ i[\"noms\"]\n    return sorted(nominations, key=lambda x: x[\"success\"],\
      \ reverse=True)\n"
    diff: "--- \n+++ \n@@ -12,15 +12,11 @@\n that have the+keys: nominee, the-amount-of\
      \ wins, and-the-amount-of noms. A new"
    node_from: &id002 !Node
      _node_tags: null
      id: 1
      stderr:
      - 'KeyError: ''Wins'''
      - 'KeyError: ''Wins'''
      - 'KeyError: ''Wins'''
      stdout:
      - ''
      - ''
      - ''
    node_to: !Node
      _node_tags: null
      id: 0
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - "[{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.6428571428571429},\
        \ {'nominee': 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544},\
        \ {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}]\n"
      - '[{''nominee'': ''Thomas'', ''wins'': 11, ''noms'': 38, ''success'': 0.2894736842105263},
        {''nominee'': ''Swift'', ''wins'': 11, ''noms'': 41, ''success'': 0.2682926829268293},
        {''nominee'': ''Babyface'', ''wins'': 11, ''noms'': 49, ''success'': 0.22448979591836735}]

        '
      - "[{'nominee': 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544},\
        \ {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22448979591836735}]\n"
    prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function\
      \ takes in a list of dictionaries that have the nominee, the amount of wins,\
      \ and the amount of noms. A new attribute is given to each dictionary which\
      \ is the success attribute. It is calculated by dividing wins by noms and creates\
      \ a float. The lists are then sorted by the highest success within each dictionary.\n\
      \    \"\"\"\n    "
    prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function\
      \ takes in a list of dictionaries that have the keys:  nominee, the wins, and\
      \ noms. A new attribute is given to each dictionary which is the success attribute.\
      \ It is calculated by dividing wins by noms and creates a float. The lists are\
      \ then sorted by the highest success within each dictionary.\n    \"\"\"\n \
      \   "
    state: fail
    total_attempts: 3
    username: student23
  student33: null
  student35: null
  student40: null
  student44: null
  student50: null
  student59: null
  student60: null
  student63: null
  student64: null
  student69: null
  student75: null
  student79: &id008 !Edge
    _edge_tags:
    - 0
    attempt_id: 4
    clues:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    completion_from: "for nomination in nominations:\n        nomination[\"success\"\
      ] = nomination[\"wins\"] / nomination[\"noms\"]\n    nominations.sort(key=lambda\
      \ x: x[\"success\"], reverse=True)\n    for nomination in nominations:\n   \
      \     print(nomination)\n"
    completion_to: "for i in nominations:\n        i['success'] = round(i['wins']/i['noms'],2)\n\
      \    nominations.sort(key=lambda x: x['success'], reverse=True)\n    for i in\
      \ nominations:\n        print(i)\n"
    diff: "--- \n+++ \n@@ -57,13 +57,12 @@\n for the success-rate and-use-different-lines-to\
      \ put each dictionary+on+a+separate+line. \"\"\""
    node_from: &id001 !Node
      _node_tags: null
      id: 11
      stderr:
      - 'IndentationError: expected an indented block after ''for'' statement on line
        8'
      - 'IndentationError: expected an indented block after ''for'' statement on line
        8'
      - 'IndentationError: expected an indented block after ''for'' statement on line
        8'
      stdout:
      - ''
      - ''
      - ''
    node_to: *id001
    prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going\
      \ to have a list of dictionaries as an input. as an output you are going to\
      \ add another variable called success to each dictionary which is the wins divided\
      \ by the value of noms. you are then going to sort the dictionary according\
      \ to decreasing success. use two decimal places for the success rate and use\
      \ different lines to put each dictionary\n    \"\"\"\n    "
    prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going\
      \ to have a list of dictionaries as an input. as an output you are going to\
      \ add another variable called success to each dictionary which is the wins divided\
      \ by the value of noms. you are then going to sort the dictionary according\
      \ to decreasing success. use two decimal places for the success and put each\
      \ dictionary on a separate line.\n    \"\"\"\n    "
    state: fail
    total_attempts: 5
    username: student79
cycle_summary:
  student23:
  - !Edge
    _edge_tags:
    - m5
    attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 5
    completion_from: "for i in range(len(nominations)):\n        wins = nominations[i][\"\
      Wins\"]\n        noms = nominations[i][\"Nominations\"]\n        success = wins/noms\n\
      \        nominations[i][\"Success\"] = success\n    nominations.sort(key = lambda\
      \ x: x[\"Success\"], reverse = True)\n    return nominations\n"
    completion_to: "for i in range(len(nominations)):\n        wins = nominations[i][\"\
      Wins\"]\n        noms = nominations[i][\"Nominations\"]\n        success = wins\
      \ / noms\n        nominations[i][\"Success\"] = success\n    nominations.sort(key=lambda\
      \ x: x[\"Success\"], reverse=True)\n    return nominations\n"
    diff: "--- \n+++ \n@@ -55,5 +55,8 @@\n by the highest-success.+success+within+each+dictionary.\
      \ \"\"\""
    node_from: *id002
    node_to: *id002
    prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function\
      \ takes in a list of dictionaries that have the nominee, the amount of wins,\
      \ and the amount of noms. A new attribute is given to each dictionary which\
      \ is the success attribute. It is calculated by dividing wins by noms and creates\
      \ a float. The lists are then sorted by the highest success.\n    \"\"\"\n \
      \   "
    prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    This function\
      \ takes in a list of dictionaries that have the nominee, the amount of wins,\
      \ and the amount of noms. A new attribute is given to each dictionary which\
      \ is the success attribute. It is calculated by dividing wins by noms and creates\
      \ a float. The lists are then sorted by the highest success within each dictionary.\n\
      \    \"\"\"\n    "
    state: neutral
    total_attempts: 3
    username: student23
  - *id003
  student33: []
  student35: []
  student40: []
  student44:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 1
    clues:
    - 2
    - 3
    - 5
    completion_from: "for i in nominations:\n        i['success'] = i['wins'] / i['nominations']\n\
      \    nominations.sort(key=lambda x: x['success'], reverse=True)\n    print(nominations)\n\
      \nsortBySuccessRate(nominations)"
    completion_to: "for i in nominations:\n        i['success'] = i['wins'] / i['nominations']\n\
      \    nominations.sort(key=lambda x: x['success'], reverse=True)\n    print(nominations)\n\
      \nsortBySuccessRate(nominations)"
    diff: "--- \n+++ \n@@ -34,7 +34,7 @@\n the value of-'sucess'+'success' and print\
      \ the"
    node_from: &id004 !Node
      _node_tags: null
      id: 17
      stderr:
      - 'NameError: name ''nominations'' is not defined'
      - 'NameError: name ''nominations'' is not defined'
      - 'NameError: name ''nominations'' is not defined'
      stdout:
      - ''
      - ''
      - ''
    node_to: *id004
    prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    For every dictionary\
      \ in the array,\ncalculate the 'success' by dividing the value of wins by noms\
      \ and add it into the dictionary. \nSort the array in descending order of the\
      \ value of 'sucess' and print the array. \n    \"\"\"\n    "
    prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    For every dictionary\
      \ in the array,\ncalculate the 'success' by dividing the value of wins by noms\
      \ and add it into the dictionary. \nSort the array in descending order of the\
      \ value of 'success' and print the array. \n    \"\"\"\n    "
    state: fail
    total_attempts: 2
    username: student44
  student50: []
  student59:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 1
    clues:
    - 1
    - 6
    completion_from: 'return sorted(nominations, key=lambda x: x[''successRate''],
      reverse=True)

      '
    completion_to: 'return sorted(nominations, key=lambda x: x[''successRate''], reverse=True)

      '
    diff: "--- \n+++ \n@@ -19,4 +19,8 @@\n in the input+for+the+key+'nominee' \"\"\
      \""
    node_from: &id005 !Node
      _node_tags: null
      id: 16
      stderr:
      - 'KeyError: ''successRate'''
      - 'KeyError: ''successRate'''
      - 'KeyError: ''successRate'''
      stdout:
      - ''
      - ''
      - ''
    node_to: *id005
    prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    takes a list\
      \ of dictionaries as an input. returns an ordered list of the dictionaries in\
      \ the input\n    \"\"\"\n    "
    prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    takes a list\
      \ of dictionaries as an input. returns an ordered list of the dictionaries in\
      \ the input for the key 'nominee'\n    \"\"\"\n    "
    state: neutral
    total_attempts: 2
    username: student59
  student60: []
  student63: []
  student64: []
  student69: []
  student75:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 2
    clues:
    - 1
    completion_from: "# sort by wins\n    sortedNominations = sorted(nominations,\
      \ key=lambda k: k['wins'])\n    # sort by noms\n    sortedNominations = sorted(sortedNominations,\
      \ key=lambda k: k['noms'])\n    return sortedNominations\n"
    completion_to: "sortedNominations = sorted(nominations, key=lambda x: (x['wins'],\
      \ x['noms']))\n    for i in sortedNominations:\n        print(i)\n\nsortBySuccessRate(nominations)\n"
    diff: "--- \n+++ \n@@ -42,5 +42,9 @@\n least amount of+'noms',+indent+after+each\
      \ 'noms' \"\"\""
    node_from: !Node
      _node_tags: null
      id: 8
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - "[{'nominee': 'Krauss', 'wins': 27, 'noms': 42}, {'nominee': 'Beyonc\xE9',\
        \ 'wins': 28, 'noms': 79}, {'nominee': 'Jones', 'wins': 28, 'noms': 80}]\n"
      - '[{''nominee'': ''Thomas'', ''wins'': 11, ''noms'': 38}, {''nominee'': ''Swift'',
        ''wins'': 11, ''noms'': 41}, {''nominee'': ''Babyface'', ''wins'': 11, ''noms'':
        49}]

        '
      - "[{'nominee': 'Babyface', 'wins': 11, 'noms': 49}, {'nominee': 'Beyonc\xE9\
        ', 'wins': 28, 'noms': 79}]\n"
    node_to: &id006 !Node
      _node_tags: null
      id: 3
      stderr:
      - 'IndentationError: expected an indented block after ''for'' statement on line
        10'
      - 'IndentationError: expected an indented block after ''for'' statement on line
        10'
      - 'IndentationError: expected an indented block after ''for'' statement on line
        10'
      stdout:
      - ''
      - ''
      - ''
    prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
      \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee':\
      \ 'Beyonc\xE9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27,\
      \ 'noms': 42}]\nand prints output in order of least amount of 'wins', if the\
      \ same prints based on least amount of 'noms'\n    \"\"\"\n    "
    prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
      \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee':\
      \ 'Beyonc\xE9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27,\
      \ 'noms': 42}]\nand prints output in order of least amount of 'wins', if the\
      \ same prints based on least amount of 'noms', indent after each 'noms'\n  \
      \  \"\"\"\n    "
    state: neutral
    total_attempts: 7
    username: student75
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 6
    clues:
    - 1
    completion_from: "sortedNominations = sorted(nominations, key=lambda x: (x['wins'],\
      \ x['noms']))\n    for i in sortedNominations:\n        print(i)\n\nsortBySuccessRate(nominations)\n"
    completion_to: "sortedNominations = sorted(nominations, key=lambda k: (k['wins'],\
      \ k['noms']))\n    for i in sortedNominations:\n        print(i)\n\nsortBySuccessRate(nominations)"
    diff: "--- \n+++ \n@@ -42,5 +42,5 @@\n least amount of-'noms'.+'noms', \"\"\""
    node_from: *id006
    node_to: *id006
    prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
      \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee':\
      \ 'Beyonc\xE9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27,\
      \ 'noms': 42}]\nand prints output in order of least amount of 'wins', if the\
      \ same prints based on least amount of 'noms'.\n    \"\"\"\n    "
    prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    def sortBySuccessRate(nominations):\
      \ takes input \n[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee':\
      \ 'Beyonc\xE9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27,\
      \ 'noms': 42}]\nand prints output in order of least amount of 'wins', if the\
      \ same prints based on least amount of 'noms', \n    \"\"\"\n    "
    state: fail
    total_attempts: 7
    username: student75
  student79:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 5
    completion_from: "for i in nominations:\n        noms = i[\"nominations\"]\n \
      \       wins = i[\"wins\"]\n        i[\"success\"] = wins/noms\n    return sorted(nominations,\
      \ key=lambda x: x[\"success\"], reverse=True)\n"
    completion_to: "for nom in nominations:\n        nom[\"success\"] = nom[\"wins\"\
      ] / nom[\"nominations\"]\n    return sorted(nominations, key=lambda x: x[\"\
      success\"], reverse=True)\n\n"
    diff: ''
    node_from: &id007 !Node
      _node_tags: null
      id: 10
      stderr:
      - 'KeyError: ''nominations'''
      - 'KeyError: ''nominations'''
      - 'KeyError: ''nominations'''
      stdout:
      - ''
      - ''
      - ''
    node_to: *id007
    prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going\
      \ to have a list of dictionaries as an input. as an output you are going to\
      \ add another variable called success to each dictionary which is the wins divided\
      \ by noms. you are then going to sort the dictionary according to decreasing\
      \ success.\n    \"\"\"\n    "
    prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going\
      \ to have a list of dictionaries as an input. as an output you are going to\
      \ add another variable called success to each dictionary which is the wins divided\
      \ by noms. you are then going to sort the dictionary according to decreasing\
      \ success.\n    \"\"\"\n    "
    state: neutral
    total_attempts: 5
    username: student79
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 5
    completion_from: "for nom in nominations:\n        nom[\"success\"] = nom[\"wins\"\
      ] / nom[\"nominations\"]\n    return sorted(nominations, key=lambda x: x[\"\
      success\"], reverse=True)\n\n"
    completion_to: "for i in nominations:\n        i[\"success\"] = i[\"wins\"]/i[\"\
      noms\"]\n    return sorted(nominations, key = lambda x: x[\"success\"], reverse\
      \ = True)\n"
    diff: "--- \n+++ \n@@ -34,6 +34,9 @@\n wins divided by+the+value+of noms. you\
      \ are"
    node_from: *id007
    node_to: !Node
      _node_tags: null
      id: 0
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - "[{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.6428571428571429},\
        \ {'nominee': 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544},\
        \ {'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}]\n"
      - '[{''nominee'': ''Thomas'', ''wins'': 11, ''noms'': 38, ''success'': 0.2894736842105263},
        {''nominee'': ''Swift'', ''wins'': 11, ''noms'': 41, ''success'': 0.2682926829268293},
        {''nominee'': ''Babyface'', ''wins'': 11, ''noms'': 49, ''success'': 0.22448979591836735}]

        '
      - "[{'nominee': 'Beyonc\xE9', 'wins': 28, 'noms': 79, 'success': 0.35443037974683544},\
        \ {'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22448979591836735}]\n"
    prompt_from: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going\
      \ to have a list of dictionaries as an input. as an output you are going to\
      \ add another variable called success to each dictionary which is the wins divided\
      \ by noms. you are then going to sort the dictionary according to decreasing\
      \ success.\n    \"\"\"\n    "
    prompt_to: "def sortBySuccessRate(nominations):\n    \"\"\"\n    you are going\
      \ to have a list of dictionaries as an input. as an output you are going to\
      \ add another variable called success to each dictionary which is the wins divided\
      \ by the value of noms. you are then going to sort the dictionary according\
      \ to decreasing success.\n    \"\"\"\n    "
    state: neutral
    total_attempts: 5
    username: student79
  - *id008
