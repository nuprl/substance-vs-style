breakout_edges:
  student23: null
  student35: null
  student40: null
  student50: &id004 !Edge
    _edge_tags:
    - m4
    attempt_id: 2
    clues:
    - 3
    - 4
    completion_from: "times = {}\n    for meeting in meetings:\n        if meeting[0]\
      \ in times:\n            times[meeting[0]] += meeting[1]\n        else:\n  \
      \          times[meeting[0]] = meeting[1]\n    return times\n"
    completion_to: "d = {}\n    for meeting in meetings:\n        if type(meeting)\
      \ == int:\n            num = meeting\n        else:\n            for name in\
      \ meeting:\n                if name in d:\n                    d[name] += num\n\
      \                else:\n                    d[name] = num\n    return d\n"
    diff: "--- \n+++ \n@@ -13,35 +13,39 @@\n Return a dictionary-with+where each-name-pointing-to-one-number.-If-a\
      \ name in the list of names-appears-next+points to+the+number.+If+there+are+several+lists+of+names+and+several+numbers,+if+names+appear+in\
      \ more than one-number,+list, add the-two+corresponding numbers-together-when-returning-a-number.+together.\
      \ \"\"\""
    node_from: &id003 !Node
      _node_tags: null
      id: 5
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '{30: [''Alice'', ''Bob'', ''Carol'']}

        '
      - '{30: [''Alice'', ''Bob'', ''Carol''], 20: [''Alice'', ''Bob'']}

        '
      - '{10: [''Alice'', ''Bob''], 5: [''Carol'']}

        '
    node_to: !Node
      _node_tags: null
      id: 12
      stderr:
      - 'UnboundLocalError: local variable ''num'' referenced before assignment'
      - 'UnboundLocalError: local variable ''num'' referenced before assignment'
      - 'UnboundLocalError: local variable ''num'' referenced before assignment'
      stdout:
      - ''
      - ''
      - ''
    prompt_from: "def times_with(meetings):\n    \"\"\"\n    Input is an array containing\
      \ a number and names. Return a dictionary with each name pointing to one number.\
      \ If a name in the list of names appears next to more than one number, add the\
      \ two numbers together when returning a number.\n    \"\"\"\n    "
    prompt_to: "def times_with(meetings):\n    \"\"\"\n    Input is an array containing\
      \ a number and names. Return a dictionary where each name in the list of names\
      \ points to the number. If there are several lists of names and several numbers,\
      \ if names appear in more than one list, add the corresponding numbers together.\n\
      \    \"\"\"\n    "
    state: neutral
    total_attempts: 4
    username: student50
  student59: &id006 !Edge
    _edge_tags:
    - m2
    attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 5
    completion_from: "times = {}\n    for meeting in meetings:\n        times[meeting[1]]\
      \ = meeting[0]\n    return times\n"
    completion_to: "times = {}\n    for meeting in meetings:\n        for name in\
      \ meeting[1]:\n            times[name] = meeting[0]\n    return times\n"
    diff: "--- \n+++ \n@@ -9,58 +9,38 @@\n as an input.-creates-an-empty-dictionary.\
      \ for each list-in+inside the inputted list,-takes-each+there+is+a value-in+and+a+list+of+names.+returns+a+dictionary+of\
      \ the-[1]-place-and-make-it-a-key-and-add-it-to-the-created-dictionary,-then-make+names+with\
      \ the value of-that-key the value in the-[0]-place+list+they+came from-the-list.-returns-a-dictionary-of-keys-and-their-values\
      \ \"\"\""
    node_from: &id005 !Node
      _node_tags: null
      id: 4
      stderr:
      - 'TypeError: unhashable type: ''list'''
      - 'TypeError: unhashable type: ''list'''
      - 'TypeError: unhashable type: ''list'''
      stdout:
      - ''
      - ''
      - ''
    node_to: !Node
      _node_tags: null
      id: 6
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - '{''Alice'': 30, ''Bob'': 30, ''Carol'': 30}

        '
      - '{''Alice'': 20, ''Bob'': 20, ''Carol'': 30}

        '
      - '{''Alice'': 10, ''Bob'': 10, ''Carol'': 5}

        '
    prompt_from: "def times_with(meetings):\n    \"\"\"\n    takes a list of lists\
      \ as an input. creates an empty dictionary. for each list in the inputted list,\
      \ takes each value in the [1] place and make it a key and add it to the created\
      \ dictionary, then make the value of that key the value in the [0] place from\
      \ the list. returns a dictionary of keys and their values\n    \"\"\"\n    "
    prompt_to: "def times_with(meetings):\n    \"\"\"\n    takes a list of lists as\
      \ an input. for each list inside the inputted list, there is a value and a list\
      \ of names. returns a dictionary of the names with the value of the value in\
      \ the list they came from\n    \"\"\"\n    "
    state: fail
    total_attempts: 3
    username: student59
  student60: null
  student63: null
  student64: null
  student69: null
  student75: null
  student79: null
cycle_summary:
  student23:
  - !Edge
    _edge_tags:
    - m3
    attempt_id: 3
    clues:
    - 1
    - 2
    - 3
    - 4
    completion_from: "times_with = {}\n    for meeting in meetings:\n        if meeting[1]\
      \ not in times_with:\n            times_with[meeting[1]] = [meeting[0]]\n  \
      \      else:\n            times_with[meeting[1]].append(meeting[0])\n    return\
      \ times_with\n"
    completion_to: "times_with = {}\n    for meeting in meetings:\n        if meeting[1]\
      \ not in times_with:\n            times_with[meeting[1]] = meeting[0]\n    \
      \    else:\n            times_with[meeting[1]] += meeting[0]\n    return times_with\n"
    diff: "--- \n+++ \n@@ -12,7 +12,6 @@\n list, consisting of-the an integer, and@@\
      \ -32,7 +31,10 @@\n the name and-appends+updates+the+dictionary+with the value\
      \ which"
    node_from: &id001 !Node
      _node_tags: null
      id: 4
      stderr:
      - 'TypeError: unhashable type: ''list'''
      - 'TypeError: unhashable type: ''list'''
      - 'TypeError: unhashable type: ''list'''
      stdout:
      - ''
      - ''
      - ''
    node_to: *id001
    prompt_from: "def times_with(meetings):\n    \"\"\"\n    This function takes in\
      \ a list within a list, consisting of the an integer, and names as a string.\
      \ The output creates a dictionary where the key is the name and appends the\
      \ value which is the integar that is given. \n    \"\"\"\n    "
    prompt_to: "def times_with(meetings):\n    \"\"\"\n    This function takes in\
      \ a list within a list, consisting of an integer, and names as a string. The\
      \ output creates a dictionary where the key is the name and updates the dictionary\
      \ with the value which is the integar that is given. \n    \"\"\"\n    "
    state: neutral
    total_attempts: 6
    username: student23
  - !Edge
    _edge_tags:
    - m2
    attempt_id: 4
    clues:
    - 1
    - 2
    - 3
    - 4
    completion_from: "times_with = {}\n    for meeting in meetings:\n        if meeting[1]\
      \ not in times_with:\n            times_with[meeting[1]] = meeting[0]\n    \
      \    else:\n            times_with[meeting[1]] += meeting[0]\n    return times_with\n"
    completion_to: "times_dict = {}\n    for meeting in meetings:\n        for person\
      \ in meeting[1:]:\n            if person not in times_dict:\n              \
      \  times_dict[person] = meeting[0]\n            else:\n                times_dict[person]\
      \ += meeting[0]\n    return times_dict\n"
    diff: "--- \n+++ \n@@ -13,12 +13,20 @@\n consisting of an-integer,+integer+in+the+outer+list,\
      \ and names as a-string.+string+in+the+inner+list. The output creates"
    node_from: *id001
    node_to: *id001
    prompt_from: "def times_with(meetings):\n    \"\"\"\n    This function takes in\
      \ a list within a list, consisting of an integer, and names as a string. The\
      \ output creates a dictionary where the key is the name and updates the dictionary\
      \ with the value which is the integar that is given. \n    \"\"\"\n    "
    prompt_to: "def times_with(meetings):\n    \"\"\"\n    This function takes in\
      \ a list within a list, consisting of an integer in the outer list, and names\
      \ as a string in the inner list. The output creates a dictionary where the key\
      \ is the name and updates the dictionary with the value which is the integar\
      \ that is given. \n    \"\"\"\n    "
    state: neutral
    total_attempts: 6
    username: student23
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 5
    clues:
    - 1
    - 2
    - 3
    - 4
    completion_from: "times_dict = {}\n    for meeting in meetings:\n        for person\
      \ in meeting[1:]:\n            if person not in times_dict:\n              \
      \  times_dict[person] = meeting[0]\n            else:\n                times_dict[person]\
      \ += meeting[0]\n    return times_dict\n"
    completion_to: "times_dict = {}\n    for meeting in meetings:\n        for name\
      \ in meeting[1:]:\n            if name not in times_dict:\n                times_dict[name]\
      \ = meeting[0]\n            else:\n                times_dict[name] += meeting[0]\n\
      \    return times_dict\n"
    diff: "--- \n+++ \n@@ -37,7 +37,7 @@\n key is the-name+string and updates the@@\
      \ -48,7 +48,7 @@\n which is the-integar+integer that is given."
    node_from: *id001
    node_to: *id001
    prompt_from: "def times_with(meetings):\n    \"\"\"\n    This function takes in\
      \ a list within a list, consisting of an integer in the outer list, and names\
      \ as a string in the inner list. The output creates a dictionary where the key\
      \ is the name and updates the dictionary with the value which is the integar\
      \ that is given. \n    \"\"\"\n    "
    prompt_to: "def times_with(meetings):\n    \"\"\"\n    This function takes in\
      \ a list within a list, consisting of an integer in the outer list, and names\
      \ as a string in the inner list. The output creates a dictionary where the key\
      \ is the string and updates the dictionary with the value which is the integer\
      \ that is given. \n    \"\"\"\n    "
    state: fail
    total_attempts: 6
    username: student23
  student35: []
  student40:
  - !Edge
    _edge_tags:
    - a2
    attempt_id: 2
    clues:
    - 1
    - 2
    - 3
    - 4
    completion_from: "times = {}\n    for meeting in meetings:\n        for time in\
      \ meeting:\n            if time in times:\n                times[time] += 1\n\
      \            else:\n                times[time] = 1\n    return times\n"
    completion_to: "times = {}\n    for meeting in meetings:\n        for person in\
      \ meeting[1:]:\n            if person not in times:\n                times[person]\
      \ = meeting[0]\n            else:\n                times[person] += meeting[0]\n\
      \    return times\n"
    diff: "--- \n+++ \n@@ -16,32 +16,27 @@\n will be made.+each+string+within the-strings+list\
      \ will be-keys-in-the-dictionary-and+a+key. the numbers+outside+of+each+list\
      \ will be the-values-that-correspond-to+value+for each-key.-each-string-will-be-its-own\
      \ key. if a"
    node_from: &id002 !Node
      _node_tags: null
      id: 4
      stderr:
      - 'TypeError: unhashable type: ''list'''
      - 'TypeError: unhashable type: ''list'''
      - 'TypeError: unhashable type: ''list'''
      stdout:
      - ''
      - ''
      - ''
    node_to: *id002
    prompt_from: "def times_with(meetings):\n    \"\"\"\n    the input will consist\
      \ of a list of lists. an empty dictionary will be made. the strings will be\
      \ keys in the dictionary and the numbers will be the values that correspond\
      \ to each key. each string will be its own key. if a key appears twice, then\
      \ the values will be added and will correspond to only one key.\n    \"\"\"\n\
      \    "
    prompt_to: "def times_with(meetings):\n    \"\"\"\n    the input will consist\
      \ of a list of lists. an empty dictionary will be made. each string within the\
      \ list will be a  key. the numbers outside of each list will be the value for\
      \ each key. if a key appears twice, then the values will be added and will correspond\
      \ to only one key.\n    \"\"\"\n    "
    state: neutral
    total_attempts: 4
    username: student40
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 3
    clues:
    - 1
    - 2
    - 3
    - 4
    completion_from: "times = {}\n    for meeting in meetings:\n        for person\
      \ in meeting[1:]:\n            if person not in times:\n                times[person]\
      \ = meeting[0]\n            else:\n                times[person] += meeting[0]\n\
      \    return times\n"
    completion_to: "times_with = {}\n    for meeting in meetings:\n        for person\
      \ in meeting:\n            if person not in times_with:\n                times_with[person]\
      \ = 1\n            else:\n                times_with[person] += 1\n    return\
      \ times_with\n\nprint(times_with(meetings))\n"
    diff: ''
    node_from: *id002
    node_to: *id002
    prompt_from: "def times_with(meetings):\n    \"\"\"\n    the input will consist\
      \ of a list of lists. an empty dictionary will be made. each string within the\
      \ list will be a  key. the numbers outside of each list will be the value for\
      \ each key. if a key appears twice, then the values will be added and will correspond\
      \ to only one key.\n    \"\"\"\n    "
    prompt_to: "def times_with(meetings):\n    \"\"\"\n    the input will consist\
      \ of a list of lists. an empty dictionary will be made. each string within the\
      \ list will be a  key. the numbers outside of each list will be the value for\
      \ each key. if a key appears twice, then the values will be added and will correspond\
      \ to only one key.\n    \"\"\"\n    "
    state: fail
    total_attempts: 4
    username: student40
  student50:
  - !Edge
    _edge_tags:
    - 0
    attempt_id: 1
    clues:
    - 3
    - 4
    completion_from: "times = {}\n    for meeting in meetings:\n        if meeting[0]\
      \ in times:\n            times[meeting[0]] += meeting[1]\n        else:\n  \
      \          times[meeting[0]] = meeting[1]\n    return times\n"
    completion_to: "times = {}\n    for meeting in meetings:\n        if meeting[0]\
      \ in times:\n            times[meeting[0]] += meeting[1]\n        else:\n  \
      \          times[meeting[0]] = meeting[1]\n    return times\n"
    diff: "--- \n+++ \n@@ -14,11 +14,11 @@\n a dictionary with-a+each name-corresponding+pointing\
      \ to-the+one number. If a"
    node_from: *id003
    node_to: *id003
    prompt_from: "def times_with(meetings):\n    \"\"\"\n    Input is an array containing\
      \ a number and names. Return a dictionary with a name corresponding to the number.\
      \ If a name in the list of names appears next to more than one number, add the\
      \ two numbers together when returning a number.\n    \"\"\"\n    "
    prompt_to: "def times_with(meetings):\n    \"\"\"\n    Input is an array containing\
      \ a number and names. Return a dictionary with each name pointing to one number.\
      \ If a name in the list of names appears next to more than one number, add the\
      \ two numbers together when returning a number.\n    \"\"\"\n    "
    state: neutral
    total_attempts: 4
    username: student50
  - *id004
  student59:
  - !Edge
    _edge_tags:
    - a5
    attempt_id: 1
    clues:
    - 1
    - 2
    - 3
    - 5
    completion_from: "times_with = {}\n    for meeting in meetings:\n        if meeting[1]\
      \ in times_with:\n            times_with[meeting[1]] += meeting[0]\n       \
      \ else:\n            times_with[meeting[1]] = meeting[0]\n    return times_with\n"
    completion_to: "times = {}\n    for meeting in meetings:\n        times[meeting[1]]\
      \ = meeting[0]\n    return times\n"
    diff: "--- \n+++ \n@@ -54,5 +54,13 @@\n place from the-list+list.+returns+a+dictionary+of+keys+and+their+values\
      \ \"\"\""
    node_from: *id005
    node_to: *id005
    prompt_from: "def times_with(meetings):\n    \"\"\"\n    takes a list of lists\
      \ as an input. creates an empty dictionary. for each list in the inputted list,\
      \ takes each value in the [1] place and make it a key and add it to the created\
      \ dictionary, then make the value of that key the value in the [0] place from\
      \ the list\n    \"\"\"\n    "
    prompt_to: "def times_with(meetings):\n    \"\"\"\n    takes a list of lists as\
      \ an input. creates an empty dictionary. for each list in the inputted list,\
      \ takes each value in the [1] place and make it a key and add it to the created\
      \ dictionary, then make the value of that key the value in the [0] place from\
      \ the list. returns a dictionary of keys and their values\n    \"\"\"\n    "
    state: neutral
    total_attempts: 3
    username: student59
  - *id006
  student60: []
  student63: []
  student64: []
  student69: []
  student75: []
  student79:
  - !Edge
    _edge_tags:
    - l5
    attempt_id: 3
    clues:
    - 1
    - 2
    - 3
    - 5
    completion_from: 'pass

      '
    completion_to: "# create an empty dictionary\n    # loop through the list\n  \
      \  # create a key with the name and the value with the number\n    # return\
      \ the dictionary\n    pass\n"
    diff: "--- \n+++ \n@@ -49,7 +49,5 @@\n corresponding number and-return-that-dictionary.+return.\
      \ \"\"\""
    node_from: &id007 !Node
      _node_tags: null
      id: 1
      stderr:
      - ''
      - ''
      - ''
      stdout:
      - 'None

        '
      - 'None

        '
      - 'None

        '
    node_to: *id007
    prompt_from: "def times_with(meetings):\n    \"\"\"\n    you are going to have\
      \ a nested list as an input. the inner most lists are going to have strings.\
      \ next to them they will have an integer. your goal is to create a dictionary\
      \ with the names in the inner most lists with the corresponding number and return\
      \ that dictionary.\n    \"\"\"\n    "
    prompt_to: "def times_with(meetings):\n    \"\"\"\n    you are going to have a\
      \ nested list as an input. the inner most lists are going to have strings. next\
      \ to them they will have an integer. your goal is to create a dictionary with\
      \ the names in the inner most lists with the corresponding number and return.\n\
      \    \"\"\"\n    "
    state: neutral
    total_attempts: 6
    username: student79
  - !Edge
    _edge_tags:
    - m2
    attempt_id: 4
    clues:
    - 1
    - 2
    - 3
    - 5
    completion_from: "# create an empty dictionary\n    # loop through the list\n\
      \    # create a key with the name and the value with the number\n    # return\
      \ the dictionary\n    pass\n"
    completion_to: "# your code here\n    pass\n\n"
    diff: "--- \n+++ \n@@ -24,6 +24,10 @@\n next to them+in+an+outer+list they will\
      \ have"
    node_from: *id007
    node_to: *id007
    prompt_from: "def times_with(meetings):\n    \"\"\"\n    you are going to have\
      \ a nested list as an input. the inner most lists are going to have strings.\
      \ next to them they will have an integer. your goal is to create a dictionary\
      \ with the names in the inner most lists with the corresponding number and return.\n\
      \    \"\"\"\n    "
    prompt_to: "def times_with(meetings):\n    \"\"\"\n    you are going to have a\
      \ nested list as an input. the inner most lists are going to have strings. next\
      \ to them in an outer list they will have an integer. your goal is to create\
      \ a dictionary with the names in the inner most lists with the corresponding\
      \ number and return.\n    \"\"\"\n    "
    state: neutral
    total_attempts: 6
    username: student79
  - !Edge
    _edge_tags:
    - m3
    attempt_id: 5
    clues:
    - 1
    - 2
    - 3
    - 5
    completion_from: "# your code here\n    pass\n\n"
    completion_to: "# create a dictionary\n    # loop through the list\n    # check\
      \ if the name is in the dictionary\n    # if it is, add the number to the value\n\
      \    # if it is not, add the name as a key and the number as a value\n    #\
      \ return the dictionary\n    times = {}\n    for meeting in meetings:\n    \
      \    if meeting[0] in times:\n            times[meeting[0]] += meeting[1]\n\
      \       "
    diff: "--- \n+++ \n@@ -42,12 +42,15 @@\n dictionary with the+keys+of names in\
      \ the inner most lists+and with the corresponding"
    node_from: *id007
    node_to: *id007
    prompt_from: "def times_with(meetings):\n    \"\"\"\n    you are going to have\
      \ a nested list as an input. the inner most lists are going to have strings.\
      \ next to them in an outer list they will have an integer. your goal is to create\
      \ a dictionary with the names in the inner most lists with the corresponding\
      \ number and return.\n    \"\"\"\n    "
    prompt_to: "def times_with(meetings):\n    \"\"\"\n    you are going to have a\
      \ nested list as an input. the inner most lists are going to have strings. next\
      \ to them in an outer list they will have an integer. your goal is to create\
      \ a dictionary with the keys of names in the inner most lists and with the corresponding\
      \ number and return.\n    \"\"\"\n    "
    state: fail
    total_attempts: 6
    username: student79
