!Graph
COLORS:
- '#d83034'
- '#f9e858'
- '#008dff'
- '#4ecb8d'
- '#c701ff'
- '#ffcd8e'
- '#003a7d'
- '#Ff73b6'
- '#ff7f50'
- '#7fff00'
- '#8a2be2'
- '#ffd700'
- '#ff4500'
- '#00ced1'
- '#ff1493'
- '#9400d3'
- '#00bfff'
edges:
- !Edge
  _edge_tags:
  - a1
  attempt_id: 1
  clues: null
  completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n"
  completion_to: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n"
  diff: "--- \n+++ \n@@ -1,10 +1,15 @@\n def check_prime(num): \"\"\"+Convert+each+input+to+an+integer.\
    \ If-the-input-number+that+integer is prime return"
  node_from: &id001 !Node
    _node_tags: null
    id: 2
    stderr:
    - 'TypeError: ''str'' object cannot be interpreted as an integer'
    - 'TypeError: ''str'' object cannot be interpreted as an integer'
    - 'TypeError: ''str'' object cannot be interpreted as an integer'
    - 'TypeError: ''str'' object cannot be interpreted as an integer'
    stdout:
    - ''
    - ''
    - ''
    - ''
  node_to: *id001
  prompt_from: "def check_prime(num):\n    \"\"\"\n    If the input number is prime\
    \ return \"True\". Else, return \"False\"\n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    Convert each input to an integer.\
    \ If that integer is prime return \"True\". Else, return \"False\"\n    \"\"\"\
    \n    "
  state: neutral
  total_attempts: 3
  username: student29
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues: null
  completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n"
  completion_to: "try:\n        num = int(num)\n        if num > 1:\n            for\
    \ i in range(2, num):\n                if (num % i) == 0:\n                  \
    \  return False\n            else:\n                return True\n        else:\n\
    \            return False\n    except ValueError:\n        return False\n\n"
  diff: "--- \n+++ \n@@ -2,19 +2,30 @@\n check_prime(num): \"\"\" Convert-each+the\
    \ input to an integer.-If-that+Then+check+if+the integer is+a prime+number+and\
    \ return-\"True\".-Else,-return+\"True\"+if+it+is+prime+and \"False\"+if+it's+not\
    \ \"\"\""
  node_from: *id001
  node_to: &id002 !Node
    _node_tags: null
    id: 5
    stderr:
    - ''
    - ''
    - ''
    - ''
    stdout:
    - 'True

      '
    - 'False

      '
    - 'False

      '
    - 'True

      '
  prompt_from: "def check_prime(num):\n    \"\"\"\n    Convert each input to an integer.\
    \ If that integer is prime return \"True\". Else, return \"False\"\n    \"\"\"\
    \n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    Convert the input to an integer.\
    \ Then check if the integer is a prime number and return \"True\" if it is prime\
    \ and \"False\" if it's not\n    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student29
- !Edge
  _edge_tags:
  - a1
  attempt_id: 1
  clues: null
  completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n\n"
  completion_to: "num = int(num)\n    if num == 1:\n        return \"False\"\n   \
    \ for i in range(2, num):\n        if num % i == 0:\n            return \"False\"\
    \n    return \"True\"\n"
  diff: "--- \n+++ \n@@ -1,7 +1,11 @@\n def check_prime(num): \"\"\"-if+Turns+num+into+int.+If\
    \ num is a"
  node_from: *id001
  node_to: *id002
  prompt_from: "def check_prime(num):\n    \"\"\"\n    if num is a prime number, return\
    \ \"True\". if not, return \"False\"\n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    Turns num into int. If num is\
    \ a prime number, return \"True\". if not, return \"False\"\n    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student32
- !Edge
  _edge_tags:
  - l3
  attempt_id: 1
  clues: null
  completion_from: "for i in range(2,num):\n        if num % i == 0:\n           \
    \ return False\n    return True\n"
  completion_to: "if num == 1:\n        return False\n    for i in range(2,num):\n\
    \        if num % i == 0:\n            return False\n    return True\n"
  diff: "--- \n+++ \n@@ -3,21 +3,23 @@\n \"\"\" if num-is-divisible-by+cannot+produce\
    \ an integer+when+divided+by+integers other than 1 or-itself-it-is-false,+itself,+return+true.+If\
    \ otherwise-it-is-true+return+false. \"\"\""
  node_from: *id001
  node_to: *id001
  prompt_from: "def check_prime(num):\n    \"\"\"\n    if num is divisible by an integer\
    \ other than 1 or itself it is false, otherwise it is true\n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    if num cannot produce an integer\
    \ when divided by integers other than 1 or itself, return true. If otherwise return\
    \ false.\n    \"\"\"\n    "
  state: fail
  total_attempts: 2
  username: student34
- !Edge
  _edge_tags:
  - a1
  attempt_id: 1
  clues: null
  completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n"
  completion_to: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n"
  diff: "--- \n+++ \n@@ -2,6 +2,12 @@\n check_prime(num): \"\"\" given+a+string+type+cast+it+into\
    \ an integer, if"
  node_from: *id001
  node_to: *id001
  prompt_from: "def check_prime(num):\n    \"\"\"\n    given an integer, if the integer\
    \ is only divisible by itself and 1, return True otherwise return False\n    \"\
    \"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    given a string type cast it into\
    \ an integer, if the integer is only divisible by itself and 1, return True otherwise\
    \ return False\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student49
- !Edge
  _edge_tags:
  - m1
  attempt_id: 2
  clues: null
  completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n"
  completion_to: "num = int(num)\n    if num > 1:\n        for i in range(2, num):\n\
    \            if (num % i) == 0:\n                return False\n        else:\n\
    \            return True\n    else:\n        return False\n\n"
  diff: "--- \n+++ \n@@ -1,18 +1,13 @@\n def check_prime(num): \"\"\"-given-a-string-type-cast-it-into+typecast+num+as\
    \ an integer, if-the-integer+num is only divisible"
  node_from: *id001
  node_to: *id002
  prompt_from: "def check_prime(num):\n    \"\"\"\n    given a string type cast it\
    \ into an integer, if the integer is only divisible by itself and 1, return True\
    \ otherwise return False\n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    typecast num as an integer, if\
    \ num is only divisible by itself and 1, return True otherwise return False\n\
    \    \"\"\"\n    "
  state: success
  total_attempts: 3
  username: student49
- !Edge
  _edge_tags:
  - m2
  attempt_id: 1
  clues: null
  completion_from: "for i in range(2, num):\n        if num % i == 0:\n          \
    \  return False\n    return True\n"
  completion_to: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n\n"
  diff: "--- \n+++ \n@@ -8,4 +8,7 @@\n prime return true+else+return+false \"\"\""
  node_from: *id001
  node_to: *id001
  prompt_from: "def check_prime(num):\n    \"\"\"\n    if the number is prime return\
    \ true\n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    if the number is prime return\
    \ true else return false\n    \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student66
- !Edge
  _edge_tags:
  - l3
  attempt_id: 2
  clues: null
  completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n\n"
  completion_to: "if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n\
    \        return True\n\n"
  diff: "--- \n+++ \n@@ -5,7 +5,12 @@\n the number is-prime+not+divisible+buy+4+or+3\
    \ return true else"
  node_from: *id001
  node_to: &id003 !Node
    _node_tags: null
    id: 3
    stderr:
    - 'TypeError: not all arguments converted during string formatting'
    - 'TypeError: not all arguments converted during string formatting'
    - 'TypeError: not all arguments converted during string formatting'
    - 'TypeError: not all arguments converted during string formatting'
    stdout:
    - ''
    - ''
    - ''
    - ''
  prompt_from: "def check_prime(num):\n    \"\"\"\n    if the number is prime return\
    \ true else return false\n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    if the number is not divisible\
    \ buy 4 or 3 return true else return false\n    \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student66
- !Edge
  _edge_tags:
  - a1
  attempt_id: 3
  clues: null
  completion_from: "if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n\
    \        return True\n\n"
  completion_to: "if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n\
    \        return True\n\n"
  diff: "--- \n+++ \n@@ -1,6 +1,12 @@\n def check_prime(num): \"\"\"+change+the+string+into+an+in\
    \ if the number"
  node_from: *id003
  node_to: *id003
  prompt_from: "def check_prime(num):\n    \"\"\"\n    if the number is not divisible\
    \ buy 4 or 3 return true else return false\n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    change the string into an in\
    \ if the number is not divisible buy 4 or 3 return true else return false\n  \
    \  \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student66
- !Edge
  _edge_tags:
  - m1
  attempt_id: 4
  clues: null
  completion_from: "if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n\
    \        return True\n\n"
  completion_to: "if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n\
    \        return True\n\n"
  diff: "--- \n+++ \n@@ -6,7 +6,7 @@\n string into an-in+integer if the number"
  node_from: *id003
  node_to: *id003
  prompt_from: "def check_prime(num):\n    \"\"\"\n    change the string into an in\
    \ if the number is not divisible buy 4 or 3 return true else return false\n  \
    \  \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    change the string into an integer\
    \ if the number is not divisible buy 4 or 3 return true else return false\n  \
    \  \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student66
- !Edge
  _edge_tags:
  - m1
  attempt_id: 5
  clues: null
  completion_from: "if num % 4 == 0 or num % 3 == 0:\n        return False\n    else:\n\
    \        return True\n\n"
  completion_to: "num = int(num)\n    if num % 4 == 0 or num % 3 == 0:\n        return\
    \ False\n    else:\n        return True\n\n"
  diff: "--- \n+++ \n@@ -3,7 +3,7 @@\n \"\"\" change the-string+input into an integer"
  node_from: *id003
  node_to: *id002
  prompt_from: "def check_prime(num):\n    \"\"\"\n    change the string into an integer\
    \ if the number is not divisible buy 4 or 3 return true else return false\n  \
    \  \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    change the input into an integer\
    \ if the number is not divisible buy 4 or 3 return true else return false\n  \
    \  \"\"\"\n    "
  state: success
  total_attempts: 6
  username: student66
- !Edge
  _edge_tags:
  - a1
  attempt_id: 1
  clues: null
  completion_from: "if num == 2:\n        return True\n    if num % 2 == 0:\n    \
    \    return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num\
    \ % i == 0:\n            return False\n    return True\n\n"
  completion_to: "num = int(num)\n    if num == 1:\n        return False\n    elif\
    \ num == 2:\n        return True\n    else:\n        for i in range(2, num):\n\
    \            if num % i == 0:\n                return False\n        return True\n\
    \n"
  diff: "--- \n+++ \n@@ -1,6 +1,11 @@\n def check_prime(num): \"\"\"+Converts+input+into+an+integer.\
    \ Returns 'True' if"
  node_from: *id003
  node_to: *id002
  prompt_from: "def check_prime(num):\n    \"\"\"\n    Returns 'True' if input is\
    \ a prime number.\n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    Converts input into an integer.\
    \ Returns 'True' if input is a prime number.\n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student67
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: null
  completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n"
  completion_to: "num = int(num)\n    if num % 2 == 0 and num > 2:\n        return\
    \ False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num %\
    \ i == 0:\n            return False\n    return True\n"
  diff: "--- \n+++ \n@@ -4,7 +4,10 @@\n given a string,-convert+first+cast+the+string\
    \ into an integer@@ -12,7 +15,9 @@\n return true if-it's+that+number+is a prime\
    \ number."
  node_from: *id001
  node_to: &id004 !Node
    _node_tags: null
    id: 1
    stderr:
    - 'NameError: name ''math'' is not defined'
    - ''
    - 'NameError: name ''math'' is not defined'
    - 'NameError: name ''math'' is not defined'
    stdout:
    - ''
    - 'False

      '
    - ''
    - ''
  prompt_from: "def check_prime(num):\n    \"\"\"\n    given a string, convert into\
    \ an integer and return true if it's a prime number. if not, return false\n  \
    \  \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    given a string, first cast the\
    \ string into an integer and return true if that number is a prime number. if\
    \ not, return false\n    \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student68
- !Edge
  _edge_tags:
  - 0
  attempt_id: 2
  clues: null
  completion_from: "num = int(num)\n    if num % 2 == 0 and num > 2:\n        return\
    \ False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num %\
    \ i == 0:\n            return False\n    return True\n"
  completion_to: "if num == 1:\n        return False\n    elif num == 2:\n       \
    \ return True\n    else:\n        for i in range(2, num):\n            if num\
    \ % i == 0:\n                return False\n        return True\n"
  diff: "--- \n+++ \n@@ -24,5 +24,5 @@\n if not, return-false+false. \"\"\""
  node_from: *id004
  node_to: *id001
  prompt_from: "def check_prime(num):\n    \"\"\"\n    given a string, first cast\
    \ the string into an integer and return true if that number is a prime number.\
    \ if not, return false\n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    given a string, first cast the\
    \ string into an integer and return true if that number is a prime number. if\
    \ not, return false. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student68
- !Edge
  _edge_tags:
  - 0
  attempt_id: 3
  clues: null
  completion_from: "if num == 1:\n        return False\n    elif num == 2:\n     \
    \   return True\n    else:\n        for i in range(2, num):\n            if num\
    \ % i == 0:\n                return False\n        return True\n"
  completion_to: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n"
  diff: "--- \n+++ \n@@ -10,8 +10,7 @@\n string into an-integer-and+integer. return\
    \ true if"
  node_from: *id001
  node_to: *id001
  prompt_from: "def check_prime(num):\n    \"\"\"\n    given a string, first cast\
    \ the string into an integer and return true if that number is a prime number.\
    \ if not, return false. \n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    given a string, first cast the\
    \ string into an integer. return true if that number is a prime number. if not,\
    \ return false. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student68
- !Edge
  _edge_tags:
  - 0
  attempt_id: 4
  clues: null
  completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n"
  completion_to: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n"
  diff: "--- \n+++ \n@@ -3,14 +3,13 @@\n \"\"\" given a-string,-first-cast+character,+convert\
    \ the-string+character into-an-integer.+a+number. return true if"
  node_from: *id001
  node_to: *id001
  prompt_from: "def check_prime(num):\n    \"\"\"\n    given a string, first cast\
    \ the string into an integer. return true if that number is a prime number. if\
    \ not, return false. \n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    given a character, convert the\
    \ character into a number. return true if that number is a prime number. if not,\
    \ return false. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 6
  username: student68
- !Edge
  _edge_tags:
  - 0
  attempt_id: 5
  clues: null
  completion_from: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n"
  completion_to: "if num == 1:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n"
  diff: ''
  node_from: *id001
  node_to: *id001
  prompt_from: "def check_prime(num):\n    \"\"\"\n    given a character, convert\
    \ the character into a number. return true if that number is a prime number. if\
    \ not, return false. \n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    given a character, convert the\
    \ character into a number. return true if that number is a prime number. if not,\
    \ return false. \n    \"\"\"\n    "
  state: fail
  total_attempts: 6
  username: student68
- !Edge
  _edge_tags:
  - a1
  attempt_id: 1
  clues: null
  completion_from: "if num <= 1:\n        return False\n    elif num == 2:\n     \
    \   return True\n    elif num % 2 == 0:\n        return False\n    else:\n   \
    \     for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n\
    \                return False\n        return True\n\n"
  completion_to: "if num == 1:\n        return False\n    elif num == 2:\n       \
    \ return True\n    else:\n        for i in range(2, num):\n            if num\
    \ % i == 0:\n                return False\n        return True\n\n"
  diff: "--- \n+++ \n@@ -1,6 +1,12 @@\n def check_prime(num): \"\"\"+convert+the+input+to+an+integer.\
    \ return whether the"
  node_from: &id006 !Node
    _node_tags: null
    id: 0
    stderr:
    - 'TypeError: ''<='' not supported between instances of ''str'' and ''int'''
    - 'TypeError: ''<='' not supported between instances of ''str'' and ''int'''
    - 'TypeError: ''<='' not supported between instances of ''str'' and ''int'''
    - 'TypeError: ''<='' not supported between instances of ''str'' and ''int'''
    stdout:
    - ''
    - ''
    - ''
    - ''
  node_to: *id001
  prompt_from: "def check_prime(num):\n    \"\"\"\n    return whether the input num\
    \ is prime.\n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    convert the input to an integer.\
    \ return whether the input num is prime.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student70
- !Edge
  _edge_tags:
  - d1
  attempt_id: 2
  clues: null
  completion_from: "if num == 1:\n        return False\n    elif num == 2:\n     \
    \   return True\n    else:\n        for i in range(2, num):\n            if num\
    \ % i == 0:\n                return False\n        return True\n\n"
  completion_to: "if num < 2:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n\n"
  diff: "--- \n+++ \n@@ -1,17 +1,18 @@\n def check_prime(num): \"\"\"-convert-the-input-to-an-integer.-return-whether+save\
    \ the input num+to+an+integer+variable.+return+whether+this+integer is prime.\
    \ \"\"\""
  node_from: *id001
  node_to: &id005 !Node
    _node_tags: null
    id: 4
    stderr:
    - 'TypeError: ''<'' not supported between instances of ''str'' and ''int'''
    - 'TypeError: ''<'' not supported between instances of ''str'' and ''int'''
    - 'TypeError: ''<'' not supported between instances of ''str'' and ''int'''
    - 'TypeError: ''<'' not supported between instances of ''str'' and ''int'''
    stdout:
    - ''
    - ''
    - ''
    - ''
  prompt_from: "def check_prime(num):\n    \"\"\"\n    convert the input to an integer.\
    \ return whether the input num is prime.\n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    save the input num to an integer\
    \ variable. return whether this integer is prime.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student70
- !Edge
  _edge_tags:
  - a1
  attempt_id: 3
  clues: null
  completion_from: "if num < 2:\n        return False\n    for i in range(2, num):\n\
    \        if num % i == 0:\n            return False\n    return True\n\n"
  completion_to: "if num == 2:\n        return True\n    if num < 2 or num % 2 ==\
    \ 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n \
    \       if num % i == 0:\n            return False\n    return True\n\n"
  diff: "--- \n+++ \n@@ -1,14 +1,13 @@\n def check_prime(num): \"\"\"-save+treat the\
    \ input num-to+as an-integer-variable.+integer. return whether this"
  node_from: *id005
  node_to: *id005
  prompt_from: "def check_prime(num):\n    \"\"\"\n    save the input num to an integer\
    \ variable. return whether this integer is prime.\n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    treat the input num as an integer.\
    \ return whether this integer is prime.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student70
- !Edge
  _edge_tags:
  - m1
  attempt_id: 4
  clues: null
  completion_from: "if num == 2:\n        return True\n    if num < 2 or num % 2 ==\
    \ 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n \
    \       if num % i == 0:\n            return False\n    return True\n\n"
  completion_to: "num = int(num)\n    if num > 1:\n        for i in range(2, num):\n\
    \            if (num % i) == 0:\n                return False\n              \
    \  break\n        else:\n            return True\n    else:\n        return False\n\
    \n"
  diff: "--- \n+++ \n@@ -1,13 +1,20 @@\n def check_prime(num): \"\"\"-treat+create+a+new+variable+that+saves\
    \ the input num as an-integer.+integer+using+int(). return whether this"
  node_from: *id005
  node_to: *id002
  prompt_from: "def check_prime(num):\n    \"\"\"\n    treat the input num as an integer.\
    \ return whether this integer is prime.\n    \"\"\"\n    "
  prompt_to: "def check_prime(num):\n    \"\"\"\n    create a new variable that saves\
    \ the input num as an integer using int(). return whether this integer is prime.\n\
    \    \"\"\"\n    "
  state: success
  total_attempts: 5
  username: student70
nodes:
- *id006
- *id004
- *id001
- *id003
- *id005
- *id002
problem: check_prime
problem_clues:
  1: convert input string to int
  2: output bool
  3: check prime
  4: correct description of a procedure to check prime number
student_clues_tracker: {}
student_colors: {}
student_start_node_tags:
  student29:
  - 2
  - 3
  student32:
  - 2
  - 3
  student34:
  - 2
  - 3
  student49:
  - 2
  - 3
  student66:
  - 2
  - 3
  student67:
  - 2
  - 3
  student68:
  - 1
  - 2
  - 3
  student70:
  - 2
  - 3
