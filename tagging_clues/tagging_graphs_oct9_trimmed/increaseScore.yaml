!Graph
COLORS:
- '#d83034'
- '#f9e858'
- '#008dff'
- '#4ecb8d'
- '#c701ff'
- '#ffcd8e'
- '#003a7d'
- '#Ff73b6'
- '#ff7f50'
- '#7fff00'
- '#8a2be2'
- '#ffd700'
- '#ff4500'
- '#00ced1'
- '#ff1493'
- '#9400d3'
- '#00bfff'
edges:
- !Edge
  _edge_tags:
  - 0
  attempt_id: 1
  clues: null
  completion_from: "if score > 9:\n        score += 1\n    elif score < 0:\n     \
    \   score = abs(score)\n    else:\n        score = \"0\" + str(score)\n    return\
    \ score\n"
  completion_to: "if score > 9:\n        score += 1\n    elif score < 0:\n       \
    \ score = abs(score)\n    else:\n        score = str(score) + \"0\"\n    return\
    \ score\n"
  diff: "--- \n+++ \n@@ -15,7 +15,7 @@\n number is greater-then+than 9. If the@@ -24,7\
    \ +24,6 @@\n negative it turns-it into a positive@@ -41,6 +40,9 @@\n zero to the+end+of+the\
    \ number. Then the"
  node_from: &id003 !Node
    _node_tags: null
    id: 1
    stderr:
    - ''
    - ''
    - ''
    - ''
    - ''
    stdout:
    - '10

      '
    - '01

      '
    - '11

      '
    - '16

      '
    - '21

      '
  node_to: &id001 !Node
    _node_tags: null
    id: 0
    stderr:
    - ''
    - ''
    - ''
    - ''
    - ''
    stdout:
    - '10

      '
    - '10

      '
    - '11

      '
    - '16

      '
    - '21

      '
  prompt_from: "def increaseScore(score):\n    \"\"\"\n    This function takes in\
    \ a number and adds one if the number is greater then 9. If the number is negative\
    \ it turns it into a positive number. If it is a single-digit number it adds a\
    \ zero to the number. Then the output is returned with the updated number.\n \
    \   \"\"\"\n    "
  prompt_to: "def increaseScore(score):\n    \"\"\"\n    This function takes in a\
    \ number and adds one if the number is greater than 9. If the number is negative\
    \ it turns into a positive number. If it is a single-digit number it adds a zero\
    \ to the end of the number. Then the output is returned with the updated number.\n\
    \    \"\"\"\n    "
  state: success
  total_attempts: 5
  username: student23
- !Edge
  _edge_tags:
  - m4
  attempt_id: 1
  clues: null
  completion_from: "if score < 0:\n        score = abs(score)\n    if score < 10:\n\
    \        score = 10\n    else:\n        score = score + 1\n    return score\n"
  completion_to: "if score < 0:\n        return abs(score)\n    elif score < 10:\n\
    \        return 10\n    else:\n        return score + 1\n"
  diff: "--- \n+++ \n@@ -16,9 +16,12 @@\n the function returns-it-as-positive.+the+absolute+value+of+the+integer.\
    \ If the integer"
  node_from: &id002 !Node
    _node_tags: null
    id: 5
    stderr:
    - ''
    - ''
    - ''
    - ''
    - ''
    stdout:
    - '11

      '
    - '10

      '
    - '11

      '
    - '16

      '
    - '21

      '
  node_to: *id001
  prompt_from: "def increaseScore(score):\n    \"\"\"\n    The function takes an integer\
    \ as input. If the integer is negative, the function returns it as positive. If\
    \ the integer only has one digit, the function returns a value of 10. If the integer\
    \ is positive and two or more digits, the function returns the integer plus one.\
    \ \n    \"\"\"\n    "
  prompt_to: "def increaseScore(score):\n    \"\"\"\n    The function takes an integer\
    \ as input. If the integer is negative, the function returns the absolute value\
    \ of the integer. If the integer only has one digit, the function returns a value\
    \ of 10. If the integer is positive and two or more digits, the function returns\
    \ the integer plus one. \n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student33
- !Edge
  _edge_tags:
  - m3
  attempt_id: 1
  clues: null
  completion_from: "if score < 0:\n        score = abs(score)\n    if score < 10:\n\
    \        score = 10\n    if score > 10:\n        score = score + 1\n    return\
    \ score\n"
  completion_to: "if score < 0:\n        score = abs(score)\n        if score < 10:\n\
    \            score = 10\n        else:\n            score += 1\n    else:\n  \
    \      if score < 10:\n            score = 10\n        else:\n            score\
    \ += 1\n    return score\n"
  diff: "--- \n+++ \n@@ -68,6 +68,8 @@\n positive double-digit number+(including+10)\
    \ is provided, its"
  node_from: &id007 !Node
    _node_tags: null
    id: 7
    stderr:
    - ''
    - ''
    - ''
    - ''
    - ''
    stdout:
    - '10

      '
    - '10

      '
    - '10

      '
    - '16

      '
    - '21

      '
  node_to: *id002
  prompt_from: "def increaseScore(score):\n    \"\"\"\n    The purpose of the function\
    \ is to convert the input score into a number that is greater than or equal to\
    \ 10. If a negative number is provided, it is to be converted into a positive\
    \ number and if its value is less than 10, it should become 10. If a positive\
    \ single digit is provided, it should be converted into 10. If a positive double-digit\
    \ number is provided, its value is to be increased by 1.\n    \"\"\"\n    "
  prompt_to: "def increaseScore(score):\n    \"\"\"\n    The purpose of the function\
    \ is to convert the input score into a number that is greater than or equal to\
    \ 10. If a negative number is provided, it is to be converted into a positive\
    \ number and if its value is less than 10, it should become 10. If a positive\
    \ single digit is provided, it should be converted into 10. If a positive double-digit\
    \ number (including 10) is provided, its value is to be increased by 1.\n    \"\
    \"\"\n    "
  state: neutral
  total_attempts: 3
  username: student35
- !Edge
  _edge_tags:
  - m3
  attempt_id: 2
  clues: null
  completion_from: "if score < 0:\n        score = abs(score)\n        if score <\
    \ 10:\n            score = 10\n        else:\n            score += 1\n    else:\n\
    \        if score < 10:\n            score = 10\n        else:\n            score\
    \ += 1\n    return score\n"
  completion_to: "if score < 0:\n        score = abs(score)\n    if score < 10:\n\
    \        score = 10\n    else:\n        score += 1\n    return score\n"
  diff: "--- \n+++ \n@@ -71,7 +71,10 @@\n (including 10) is-provided,+given+as+initial+input,\
    \ its value is"
  node_from: *id002
  node_to: *id002
  prompt_from: "def increaseScore(score):\n    \"\"\"\n    The purpose of the function\
    \ is to convert the input score into a number that is greater than or equal to\
    \ 10. If a negative number is provided, it is to be converted into a positive\
    \ number and if its value is less than 10, it should become 10. If a positive\
    \ single digit is provided, it should be converted into 10. If a positive double-digit\
    \ number (including 10) is provided, its value is to be increased by 1.\n    \"\
    \"\"\n    "
  prompt_to: "def increaseScore(score):\n    \"\"\"\n    The purpose of the function\
    \ is to convert the input score into a number that is greater than or equal to\
    \ 10. If a negative number is provided, it is to be converted into a positive\
    \ number and if its value is less than 10, it should become 10. If a positive\
    \ single digit is provided, it should be converted into 10. If a positive double-digit\
    \ number (including 10) is given as initial input, its value is to be increased\
    \ by 1.\n    \"\"\"\n    "
  state: fail
  total_attempts: 3
  username: student35
- !Edge
  _edge_tags:
  - d4
  - a2
  attempt_id: 1
  clues: null
  completion_from: "if score < 0:\n        return -score\n    else:\n        return\
    \ score + 1\n"
  completion_to: "if score < 10:\n        return 10\n    else:\n        return score\
    \ + 1\n"
  diff: "--- \n+++ \n@@ -10,11 +10,14 @@\n the number is-negative,+below+10, make\
    \ it-positive.-Otherwise,+10.+Else, add-one.+one+to+it. \"\"\""
  node_from: &id006 !Node
    _node_tags: null
    id: 4
    stderr:
    - ''
    - ''
    - ''
    - ''
    - ''
    stdout:
    - '10

      '
    - '2

      '
    - '11

      '
    - '16

      '
    - '21

      '
  node_to: *id001
  prompt_from: "def increaseScore(score):\n    \"\"\"\n    The input is an integer.\
    \ If the number is negative, make it positive. Otherwise, add one.\n    \"\"\"\
    \n    "
  prompt_to: "def increaseScore(score):\n    \"\"\"\n    The input is an integer.\
    \ If the number is below 10, make it 10. Else, add one to it.\n    \"\"\"\n  \
    \  "
  state: success
  total_attempts: 2
  username: student50
- !Edge
  _edge_tags:
  - a5
  attempt_id: 1
  clues: null
  completion_from: "if score < 0:\n        score = abs(score)\n    score = score +\
    \ 1\n    return score\n"
  completion_to: "if score < 0:\n        return abs(score)\n    elif score >= 9:\n\
    \        return score + 1\n    else:\n        return score * 10\n"
  diff: "--- \n+++ \n@@ -4,7 +4,33 @@\n takes an integer+as+the+input.+if+the+inputted+integer+is+negative,+returns+the+absolute+value+of+the+integer.+if+the+inputted+integer+is+positive\
    \ and+is+greater+than+9, returns an integer@@ -17,17 +43,19 @@\n more than before.-if+for+all+other+case,+returns+an+integer+that+adds+a+zero+in\
    \ the-inputted-integer-is-negative,-returns-the-absolute-value-of-the-integer+one's+place\
    \ \"\"\""
  node_from: &id004 !Node
    _node_tags: null
    id: 2
    stderr:
    - ''
    - ''
    - ''
    - ''
    - ''
    stdout:
    - '11

      '
    - '2

      '
    - '11

      '
    - '16

      '
    - '21

      '
  node_to: *id001
  prompt_from: "def increaseScore(score):\n    \"\"\"\n    takes an integer and returns\
    \ an integer whose one's place digit is one more than before. if the inputted\
    \ integer is negative, returns the absolute value of the integer\n    \"\"\"\n\
    \    "
  prompt_to: "def increaseScore(score):\n    \"\"\"\n    takes an integer as the input.\
    \ if the inputted integer is negative, returns the absolute value of the integer.\
    \ if the inputted integer is positive and is greater than 9, returns an integer\
    \ whose one's place digit is one more than before. for all other case, returns\
    \ an integer that adds a zero in the one's place\n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student59
- !Edge
  _edge_tags:
  - a2
  - a3
  attempt_id: 1
  clues: null
  completion_from: "if score < 0:\n        score = score * -1\n    return score\n"
  completion_to: "if score < 0:\n        return abs(score)\n    elif score == 1:\n\
    \        return score + 9\n    else:\n        return score + 1\n"
  diff: "--- \n+++ \n@@ -11,4 +11,21 @@\n its positive integer+def+increaseScore(score):+inputs+'1'+and+adds+9+def+increaseScore(score):+adds+1+to+each+input+'10',+'15',+'20'\
    \ \"\"\""
  node_from: &id005 !Node
    _node_tags: null
    id: 3
    stderr:
    - ''
    - ''
    - ''
    - ''
    - ''
    stdout:
    - '10

      '
    - '1

      '
    - '10

      '
    - '15

      '
    - '20

      '
  node_to: *id001
  prompt_from: "def increaseScore(score):\n    \"\"\"\n    def increaseScore(score):\
    \ takes input '-10' and outputs its positive integer\n    \"\"\"\n    "
  prompt_to: "def increaseScore(score):\n    \"\"\"\n    def increaseScore(score):\
    \ takes input '-10' and outputs its positive integer\ndef increaseScore(score):\
    \ inputs '1' and adds 9\ndef increaseScore(score): adds 1 to each input '10',\
    \ '15', '20'\n    \"\"\"\n    "
  state: success
  total_attempts: 2
  username: student75
nodes:
- *id001
- *id003
- *id004
- *id005
- *id006
- *id002
- !Node
  _node_tags: null
  id: 6
  stderr:
  - ''
  - ''
  - ''
  - ''
  - ''
  stdout:
  - '10

    '
  - '1

    '
  - '11

    '
  - '16

    '
  - '21

    '
- *id007
problem: increaseScore
problem_clues: {}
student_clues_tracker: {}
student_colors: {}
student_start_node_tags:
  student23:
  - 1
  - 3
  - 4
  - 5
  - 6
  student33:
  - 1
  - 2
  - 3
  - 4
  - 6
  student35:
  - 1
  - 2
  - 3
  - 4
  student50:
  - 1
  - 3
  - 4
  student59:
  - 1
  - 3
  - 4
  - 6
  student75:
  - 4
