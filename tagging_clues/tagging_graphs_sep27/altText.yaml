edges:
- _edge_tags:
  - 0
  attempt_id: 1
  completion_from: |
    if len(s) == 1:
            return s.upper()
        else:
            return s[::2].upper()
  completion_to: |
    if len(s) == 1:
            return s.upper()
        else:
            return s[::2].upper() + s[1::2]

    print(altText("hello"))
    print(altText("hey"))
    print(altText("h"))
    print(altText("hi"))
    print(altText("h e y"))
  diff: |-
    --- 
    +++ 
    @@ -16,7 +16,13 @@
     letter as upper-case.+case,+not+including+the+lower+case+letters. If it is
  node_from: &id012
    _node_tags:
    id: 3
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - |
      ILV OSEDLHN WM
    - |
      CMUES
    - |
      T
  node_to: &id001
    _node_tags:
    id: 5
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - |
      ILV OSEDLHN WM oet e opissi.
    - |
      CMUESoptr
    - |
      T
  prompt_from: |-
    def altText(s):
        """
        This function takes in a word or sentence and outputs every other letter as upper case. If it is just a one letter word it is turned into an upper case letter.
        """
        
  prompt_to: |-
    def altText(s):
        """
        This function takes in a word or sentence and outputs every other letter as upper case, not including the lower case letters. If it is just a one letter word it is turned into an upper case letter. 
        """
        
  state: neutral
  total_attempts: 8
  username: student23
- _edge_tags:
  - m2
  attempt_id: 2
  completion_from: |
    if len(s) == 1:
            return s.upper()
        else:
            return s[::2].upper() + s[1::2]

    print(altText("hello"))
    print(altText("hey"))
    print(altText("h"))
    print(altText("hi"))
    print(altText("h e y"))
  completion_to: |-
    if len(s) == 1:
            return s.upper()
        else:
            return s[::2].upper() + s[1::2]

    print(altText("hello"))
    print(altText("hi"))
    print(altText("h"))
    print(altText("what"))
    print(altText("is"))
    print(altText("up"))
    print(altText("dog"))
    print(altText("
  diff: |-
    --- 
    +++ 
    @@ -17,7 +17,6 @@
     as upper case,-not including the lower
  node_from: *id001
  node_to: *id001
  prompt_from: |-
    def altText(s):
        """
        This function takes in a word or sentence and outputs every other letter as upper case, not including the lower case letters. If it is just a one letter word it is turned into an upper case letter. 
        """
        
  prompt_to: |-
    def altText(s):
        """
        This function takes in a word or sentence and outputs every other letter as upper case, including the lower case letters. If it is just a one letter word it is turned into an upper case letter. 
        """
        
  state: neutral
  total_attempts: 8
  username: student23
- _edge_tags:
  - l2
  attempt_id: 3
  completion_from: |-
    if len(s) == 1:
            return s.upper()
        else:
            return s[::2].upper() + s[1::2]

    print(altText("hello"))
    print(altText("hi"))
    print(altText("h"))
    print(altText("what"))
    print(altText("is"))
    print(altText("up"))
    print(altText("dog"))
    print(altText("
  completion_to: |
    if len(s) == 1:
            return s.upper()
        else:
            return s[::2].upper() + s[1::2]
  diff: |-
    --- 
    +++ 
    @@ -16,12 +16,7 @@
     letter as upper-case,-including-the-lower-case-letters.+cas. If it is@@ -38,4 +33,13 @@
     upper case letter.+It+then+returns+the+whole+phrase+that+was+given. """
  node_from: *id001
  node_to: *id001
  prompt_from: |-
    def altText(s):
        """
        This function takes in a word or sentence and outputs every other letter as upper case, including the lower case letters. If it is just a one letter word it is turned into an upper case letter. 
        """
        
  prompt_to: |-
    def altText(s):
        """
        This function takes in a word or sentence and outputs every other letter as upper cas. If it is just a one letter word it is turned into an upper case letter. It then returns the whole phrase that was given.
        """
        
  state: neutral
  total_attempts: 8
  username: student23
- _edge_tags:
  - m2
  attempt_id: 4
  completion_from: |
    if len(s) == 1:
            return s.upper()
        else:
            return s[::2].upper() + s[1::2]
  completion_to: |-
    s = s.lower()
        s = s.replace(" ", "")
        new_s = ""
        for i in range(len(s)):
            if i % 2 == 0:
                new_s += s[i].upper()
            else:
                new_s += s[i]
        return new_s

    print(altText("hello"))
    print(altText("hello world"))
    print(alt
  diff: |-
    --- 
    +++ 
    @@ -41,5 +41,12 @@
     phrase that was-given.+given,+including+all+characters+upper+and+lower+case. """
  node_from: *id001
  node_to: &id002
    _node_tags:
    id: 10
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - |
      IlOvEtOsEeDoLpHiNsSwIm.
    - |
      CoMpUtErS
    - |
      T
  prompt_from: |-
    def altText(s):
        """
        This function takes in a word or sentence and outputs every other letter as upper cas. If it is just a one letter word it is turned into an upper case letter. It then returns the whole phrase that was given.
        """
        
  prompt_to: |-
    def altText(s):
        """
        This function takes in a word or sentence and outputs every other letter as upper cas. If it is just a one letter word it is turned into an upper case letter. It then returns the whole phrase that was given, including all characters upper and lower case. 
        """
        
  state: neutral
  total_attempts: 8
  username: student23
- _edge_tags:
  - 0
  attempt_id: 5
  completion_from: |-
    s = s.lower()
        s = s.replace(" ", "")
        new_s = ""
        for i in range(len(s)):
            if i % 2 == 0:
                new_s += s[i].upper()
            else:
                new_s += s[i]
        return new_s

    print(altText("hello"))
    print(altText("hello world"))
    print(alt
  completion_to: |
    if len(s) == 1:
            return s.upper()
        else:
            return s[0] + altText(s[1:])
  diff: |-
    --- 
    +++ 
    @@ -16,22 +16,20 @@
     letter as upper-cas.+case. If it is just a-one-letter+one-letter word it is turned into an-upper-case+upper-case letter. It then
  node_from: *id002
  node_to: &id003
    _node_tags:
    id: 2
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - |
      I love to see dolphins swim.
    - |
      computerS
    - |
      T
  prompt_from: |-
    def altText(s):
        """
        This function takes in a word or sentence and outputs every other letter as upper cas. If it is just a one letter word it is turned into an upper case letter. It then returns the whole phrase that was given, including all characters upper and lower case. 
        """
        
  prompt_to: |-
    def altText(s):
        """
        This function takes in a word or sentence and outputs every other letter as upper case. If it is just a one-letter word it is turned into an upper-case letter. It then returns the whole phrase that was given, including all characters upper and lower case. 
        """
        
  state: neutral
  total_attempts: 8
  username: student23
- _edge_tags:
  - d2
  attempt_id: 6
  completion_from: |
    if len(s) == 1:
            return s.upper()
        else:
            return s[0] + altText(s[1:])
  completion_to: |
    if len(s) == 1:
            return s.upper()
        else:
            return s[0].upper() + s[1:].lower()
  diff: |-
    --- 
    +++ 
    @@ -12,7 +12,6 @@
     and outputs every-other letter as upper
  node_from: *id003
  node_to: &id004
    _node_tags:
    id: 0
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - |
      I love to see dolphins swim.
    - |
      Computers
    - |
      T
  prompt_from: |-
    def altText(s):
        """
        This function takes in a word or sentence and outputs every other letter as upper case. If it is just a one-letter word it is turned into an upper-case letter. It then returns the whole phrase that was given, including all characters upper and lower case. 
        """
        
  prompt_to: |-
    def altText(s):
        """
        This function takes in a word or sentence and outputs every letter as upper case. If it is just a one-letter word it is turned into an upper-case letter. It then returns the whole phrase that was given, including all characters upper and lower case. 
        """
        
  state: neutral
  total_attempts: 8
  username: student23
- _edge_tags:
  - a2
  attempt_id: 7
  completion_from: |
    if len(s) == 1:
            return s.upper()
        else:
            return s[0].upper() + s[1:].lower()
  completion_to: |
    new_s = ""
        for i in range(len(s)):
            if i % 2 == 0:
                new_s += s[i].upper()
            else:
                new_s += s[i].lower()
        return new_s

    print(altText("hello"))
    print(altText("hello world"))
    print(altText("h"))
    print(altText(""))
  diff: |-
    --- 
    +++ 
    @@ -10,12 +10,15 @@
     or sentence and-outputs+replaces every+other letter-as+with+the upper-case.+case+letter. If it is@@ -35,10 +38,8 @@
     returns the whole-phrase-that-was-given,+updated+phrase, including all characters
  node_from: *id004
  node_to: &id005
    _node_tags:
    id: 9
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - |
      I LoVe tO SeE DoLpHiNs sWiM.
    - |
      CoMpUtErS
    - |
      T
  prompt_from: |-
    def altText(s):
        """
        This function takes in a word or sentence and outputs every letter as upper case. If it is just a one-letter word it is turned into an upper-case letter. It then returns the whole phrase that was given, including all characters upper and lower case. 
        """
        
  prompt_to: |-
    def altText(s):
        """
        This function takes in a word or sentence and replaces every other letter with the upper case letter. If it is just a one-letter word it is turned into an upper-case letter. It then returns the whole updated phrase, including all characters upper and lower case. 
        """
        
  state: success
  total_attempts: 8
  username: student23
- _edge_tags:
  - m2
  attempt_id: 1
  completion_from: |
    return s[::2].upper() + s[1::2]
  completion_to: |
    return s[::2].upper() + s[1::2]
  diff: |-
    --- 
    +++ 
    @@ -21,12 +21,15 @@
     supposed to convert-every-alternative-character+the+characters of the string+in+even+index+positions into uppercase and
  node_from: *id001
  node_to: *id001
  prompt_from: |-
    def altText(s):
        """
        's' is a string value provided. Starting from the first character of the string, the function is supposed to convert every alternative character of the string into uppercase and then return the string.
        """
        
  prompt_to: |-
    def altText(s):
        """
        's' is a string value provided. Starting from the first character of the string, the function is supposed to convert the characters of the string in even index positions into uppercase and then return the string.
        """
        
  state: neutral
  total_attempts: 3
  username: student35
- _edge_tags:
  - m2
  attempt_id: 2
  completion_from: |
    return s[::2].upper() + s[1::2]
  completion_to: |
    return "".join([s[i].upper() if i%2==0 else s[i] for i in range(len(s))])
  diff: |-
    --- 
    +++ 
    @@ -31,10 +31,30 @@
     index positions into-uppercase-and-then-return+uppercase.+The+characters+of the-string.+string+should+be+in+the+same+order+as+below,+only+the+characters+in+even+index+positions+are+to+be+turned+uppercase. """
  node_from: *id001
  node_to: *id005
  prompt_from: |-
    def altText(s):
        """
        's' is a string value provided. Starting from the first character of the string, the function is supposed to convert the characters of the string in even index positions into uppercase and then return the string.
        """
        
  prompt_to: |-
    def altText(s):
        """
        's' is a string value provided. Starting from the first character of the string, the function is supposed to convert the characters of the string in even index positions into uppercase. The characters of the string should be in the same order as below, only the characters in even index positions are to be turned uppercase.
        """
        
  state: success
  total_attempts: 3
  username: student35
- _edge_tags:
  - 0
  attempt_id: 1
  completion_from: |-
    if len(s) == 1:
            if s.islower():
                return s.upper()
            else:
                return s.lower()
        else:
            new_string = ""
            for i in range(len(s)):
                if i % 2 == 0:
                    new_string += s[i].upper()
                else:
                    new_string += s[i].lower()
            return new_
  completion_to: |-
    if len(s) == 1:
            if s.islower():
                return s.upper()
            else:
                return s.lower()
        else:
            new_string = ""
            for i in range(len(s)):
                if i % 2 == 0:
                    new_string += s[i].lower()
                else:
                    new_string += s[i].upper()
            return new_
  diff: |-
    --- 
    +++ 
    @@ -23,6 +23,11 @@
     multiple characters, returns+a+new+string+that+has the same input
  node_from: &id006
    _node_tags:
    id: 15
    stderr:
    - |-
      NameError: name 'new_' is not defined
    - |-
      NameError: name 'new_' is not defined
    - ''
    stdout:
    - ''
    - ''
    - |
      T
  node_to: *id006
  prompt_from: |-
    def altText(s):
        """
        if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, returns the same input with alternating uppercase and lowercase letters
        """
        
  prompt_to: |-
    def altText(s):
        """
        if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, returns a new string that has the same input with alternating uppercase and lowercase letters
        """
        
  state: neutral
  total_attempts: 6
  username: student40
- _edge_tags:
  - 0
  attempt_id: 2
  completion_from: |-
    if len(s) == 1:
            if s.islower():
                return s.upper()
            else:
                return s.lower()
        else:
            new_string = ""
            for i in range(len(s)):
                if i % 2 == 0:
                    new_string += s[i].lower()
                else:
                    new_string += s[i].upper()
            return new_
  completion_to: |-
    if len(s) == 1:
            if s.islower():
                return s.upper()
            else:
                return s.lower()
        else:
            new_string = ""
            for i in range(len(s)):
                if i % 2 == 0:
                    new_string += s[i].lower()
                else:
                    new_string += s[i].upper()
            return new_
  diff: |-
    --- 
    +++ 
    @@ -23,9 +23,7 @@
     multiple characters, returns-a-new-string+new_string that has the
  node_from: *id006
  node_to: *id006
  prompt_from: |-
    def altText(s):
        """
        if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, returns a new string that has the same input with alternating uppercase and lowercase letters
        """
        
  prompt_to: |-
    def altText(s):
        """
        if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, returns new_string that has the same input with alternating uppercase and lowercase letters
        """
        
  state: neutral
  total_attempts: 6
  username: student40
- _edge_tags:
  - m2
  attempt_id: 3
  completion_from: |-
    if len(s) == 1:
            if s.islower():
                return s.upper()
            else:
                return s.lower()
        else:
            new_string = ""
            for i in range(len(s)):
                if i % 2 == 0:
                    new_string += s[i].lower()
                else:
                    new_string += s[i].upper()
            return new_
  completion_to: |-
    if len(s) == 1:
            if s.islower():
                return s.upper()
            else:
                return s.lower()
        else:
            new_string = ""
            for i in range(len(s)):
                if i % 2 == 0:
                    new_string += s[i].upper()
                else:
                    new_string += s[i].lower()
            return new_
  diff: |-
    --- 
    +++ 
    @@ -22,17 +22,37 @@
     has multiple characters,-returns-new_string-that-has+creates+a+variable+called+'new_string',+which+will+take+the+original+string+passed+through+the+function+and+return the same-input+string+but with+letters+of alternating-uppercase-and-lowercase+case.+new_string+will+have letters+of+alternating+case. """
  node_from: *id006
  node_to: *id006
  prompt_from: |-
    def altText(s):
        """
        if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, returns new_string that has the same input with alternating uppercase and lowercase letters
        """
        
  prompt_to: |-
    def altText(s):
        """
        if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, creates a variable called 'new_string', which will take the original string passed through the function and return the same string but with letters of alternating case. new_string will have letters of alternating case.
        """
        
  state: neutral
  total_attempts: 6
  username: student40
- _edge_tags:
  - 0
  attempt_id: 4
  completion_from: |-
    if len(s) == 1:
            if s.islower():
                return s.upper()
            else:
                return s.lower()
        else:
            new_string = ""
            for i in range(len(s)):
                if i % 2 == 0:
                    new_string += s[i].upper()
                else:
                    new_string += s[i].lower()
            return new_
  completion_to: |-
    if len(s) == 1:
            if s.islower():
                return s.upper()
            else:
                return s.lower()
        else:
            new_string = ''
            for i in range(len(s)):
                if i % 2 == 0:
                    new_string += s[i].lower()
                else:
                    new_string += s[i].upper()
            return new_
  diff: |-
    --- 
    +++ 
    @@ -55,4 +55,6 @@
     of alternating case.+returns+new_string """
  node_from: *id006
  node_to: *id006
  prompt_from: |-
    def altText(s):
        """
        if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, creates a variable called 'new_string', which will take the original string passed through the function and return the same string but with letters of alternating case. new_string will have letters of alternating case.
        """
        
  prompt_to: |-
    def altText(s):
        """
        if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, creates a variable called 'new_string', which will take the original string passed through the function and return the same string but with letters of alternating case. new_string will have letters of alternating case. returns new_string
        """
        
  state: neutral
  total_attempts: 6
  username: student40
- _edge_tags:
  - l2
  attempt_id: 5
  completion_from: |-
    if len(s) == 1:
            if s.islower():
                return s.upper()
            else:
                return s.lower()
        else:
            new_string = ''
            for i in range(len(s)):
                if i % 2 == 0:
                    new_string += s[i].lower()
                else:
                    new_string += s[i].upper()
            return new_
  completion_to: |+
    if len(s) == 1:
            if s.islower():
                return s.upper()
            else:
                return s
        else:
            new_s = ""
            for i in range(len(s)):
                if i % 2 == 0:
                    new_s += s[i].upper()
                else:
                    new_s += s[i].lower()
            return new_s

  diff: |-
    --- 
    +++ 
    @@ -22,39 +22,12 @@
     has multiple characters,-creates-a-variable-called-'new_string',-which-will-take-the-original-string-passed-through the function-and-return-the-same-string-but-with-letters-of-alternating-case.-new_string will-have-letters-of-alternating-case.-returns-new_string+make+every+other+character+uppercase. """
  node_from: *id006
  node_to: *id005
  prompt_from: |-
    def altText(s):
        """
        if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, creates a variable called 'new_string', which will take the original string passed through the function and return the same string but with letters of alternating case. new_string will have letters of alternating case. returns new_string
        """
        
  prompt_to: |-
    def altText(s):
        """
        if the string has one character, returns a capital letter when given a lowercase letter. if the string has multiple characters, the function will make every other character uppercase. 
        """
        
  state: success
  total_attempts: 6
  username: student40
- _edge_tags:
  - m2
  attempt_id: 1
  completion_from: |
    s = s.lower()
        s = s.split()
        for i in range(len(s)):
            s[i] = s[i].capitalize()
        return ' '.join(s)
  completion_to: |
    print("\n\n")
        print("Input: " + s)
        print("Output: " + altTextHelper(s))
        print("\n\n")
  diff: |-
    --- 
    +++ 
    @@ -15,7 +15,11 @@
     is not a+white space+or+a+punctuation capitalized starting with
  node_from: &id011
    _node_tags:
    id: 13
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - |
      I Love To See Dolphins Swim.
    - |
      Computers
    - |
      T
  node_to: &id007
    _node_tags:
    id: 12
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - |
      None
    - |
      None
    - |
      None
  prompt_from: |-
    def altText(s):
        """
        Print the string that is input with every other character that is not a space capitalized starting with a capital letter. 
        """
        
  prompt_to: |-
    def altText(s):
        """
        Print the string that is input with every other character that is not a white space or a punctuation capitalized starting with a capital letter. 
        """
        
  state: neutral
  total_attempts: 4
  username: student44
- _edge_tags:
  - m1
  - m2
  attempt_id: 2
  completion_from: |
    print("\n\n")
        print("Input: " + s)
        print("Output: " + altTextHelper(s))
        print("\n\n")
  completion_to: |
    if len(s) == 0:
            return ""
        if s[0].isalpha():
            return s[0].upper() + altText(s[1:])
        else:
            return s[0] + altText(s[1:])
  diff: |-
    --- 
    +++ 
    @@ -1,29 +1,69 @@
     def altText(s): """-Print+Go+through+every+character+in the-string+string.+If+the+character+is+a+letter+and that+character is-input-with-every-other+the+first character+in+the+string,+print+it+capitalized.+If+the+character+is+a+letter that is not-a-white-space-or-a-punctuation-capitalized-starting-with-a-capital-letter.+the+first+in+the+string,+print+in+lowercase+if+the+previous+letter+that+was+printed+was+in+capital.+If+the+last+letter+was+printed+in+uppercase,+print+it+in+lowercase. """
  node_from: *id007
  node_to: &id008
    _node_tags:
    id: 4
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - |
      I LOVE TO SEE DOLPHINS SWIM.
    - |
      COMPUTERS
    - |
      T
  prompt_from: |-
    def altText(s):
        """
        Print the string that is input with every other character that is not a white space or a punctuation capitalized starting with a capital letter. 
        """
        
  prompt_to: |-
    def altText(s):
        """
        Go through every character in the string. 
    If the character is a letter and that character is the first character in the string, print it capitalized. 
    If the character is a letter that is not the first in the string, print in lowercase if the previous  letter that was printed was in capital. If the last letter was printed in uppercase, print it in lowercase. 
        """
        
  state: neutral
  total_attempts: 4
  username: student44
- _edge_tags:
  - 0
  attempt_id: 3
  completion_from: |
    if len(s) == 0:
            return ""
        if s[0].isalpha():
            return s[0].upper() + altText(s[1:])
        else:
            return s[0] + altText(s[1:])
  completion_to: |-
    print(s[0].upper(), end="")
        for i in range(1, len(s)):
            if s[i-1].isupper():
                print(s[i].lower(), end="")
            else:
                print(s[i].upper(), end="")
        print()

    altText("Hello World")
    altText("Hello World")
    altText("Hello World")
    altText("Hello World
  diff: |-
    --- 
    +++ 
    @@ -21,9 +21,9 @@
     the first character-in+of the-string,+input, print it capitalized.@@ -38,13 +38,11 @@
     not the first+one in the-string,-print-in-lowercase-if+input+and the previous letter@@ -53,10 +51,13 @@
     printed was in-capital.+uppercase,+print+in+lowercase. If the-last+previous letter was printed
  node_from: *id008
  node_to: &id015
    _node_tags:
    id: 16
    stderr:
    - |-
      SyntaxError: unterminated string literal (detected at line 18)
    - |-
      SyntaxError: unterminated string literal (detected at line 18)
    - |-
      SyntaxError: unterminated string literal (detected at line 18)
    stdout:
    - ''
    - ''
    - ''
  prompt_from: |-
    def altText(s):
        """
        Go through every character in the string. 
    If the character is a letter and that character is the first character in the string, print it capitalized. 
    If the character is a letter that is not the first in the string, print in lowercase if the previous  letter that was printed was in capital. If the last letter was printed in uppercase, print it in lowercase. 
        """
        
  prompt_to: |-
    def altText(s):
        """
        Go through every character in the string. 
    If the character is a letter and that character is the first character of the input, print it capitalized. 
    If the character is a letter that is not the first one in the input and the previous letter that was printed was in uppercase, print in lowercase. 
    If the previous letter was printed in uppercase, print it in lowercase. 
        """
        
  state: fail
  total_attempts: 4
  username: student44
- _edge_tags:
  - 0
  attempt_id: 1
  completion_from: |
    s = list(s)
        for i in range(len(s)):
            if random.random() < 0.5:
                s[i] = s[i].upper()
        return ''.join(s)
  completion_to: |
    words = s.split()
        newWords = []
        for word in words:
            newWord = ''
            for i in range(len(word)):
                if random.random() < 0.5:
                    newWord += word[i].upper()
                else:
                    newWord += word[i]
            newWords.append(newWord)
        return ' '.join(newWords)
  diff: |-
    --- 
    +++ 
    @@ -3,11 +3,14 @@
     """ takes a-string-and+string. capitalizes random letters in-it+each+word+of+that+string. """
  node_from: &id009
    _node_tags:
    id: 11
    stderr:
    - |-
      NameError: name 'random' is not defined
    - |-
      NameError: name 'random' is not defined
    - |-
      NameError: name 'random' is not defined
    stdout:
    - ''
    - ''
    - ''
  node_to: *id009
  prompt_from: |-
    def altText(s):
        """
        takes a string and capitalizes random letters in it
        """
        
  prompt_to: |-
    def altText(s):
        """
        takes a string. capitalizes random letters in each word of that string. 
        """
        
  state: neutral
  total_attempts: 3
  username: student59
- _edge_tags:
  - m2
  attempt_id: 2
  completion_from: |
    words = s.split()
        newWords = []
        for word in words:
            newWord = ''
            for i in range(len(word)):
                if random.random() < 0.5:
                    newWord += word[i].upper()
                else:
                    newWord += word[i]
            newWords.append(newWord)
        return ' '.join(newWords)
  completion_to: |
    words = s.split()
        altWords = []
        for word in words:
            altWord = ""
            for i in range(len(word)):
                if random.randint(0,1) == 1:
                    altWord += word[i].upper()
                else:
                    altWord += word[i]
            altWords.append(altWord)
        return altWords
  diff: |-
    --- 
    +++ 
    @@ -12,5 +12,19 @@
     word of that-string.+string+and+adds+the+new+words+to+a+list.+returns+this+new+list+of+words """
  node_from: *id009
  node_to: *id009
  prompt_from: |-
    def altText(s):
        """
        takes a string. capitalizes random letters in each word of that string. 
        """
        
  prompt_to: |-
    def altText(s):
        """
        takes a string. capitalizes random letters in each word of that string and adds the new words to a list. returns this new list of words
        """
        
  state: fail
  total_attempts: 3
  username: student59
- _edge_tags:
  - l1
  attempt_id: 1
  completion_from: |
    result = ""
        for i in range(len(s)):
            if i % 2 == 0:
                result += s[i].upper()
            else:
                result += s[i]
        return result
  completion_to: |
    newString = ""
        for i in range(len(s)):
            if i % 2 == 0:
                newString += s[i].lower()
            else:
                newString += s[i].upper()
        return newString

    print(altText("Hello World"))
  diff: |-
    --- 
    +++ 
    @@ -7,7 +7,6 @@
     a string as-a parameter. This function@@ -20,16 +19,4 @@
     letter is capitalized.-This-functions-starts-by-capitalizing-the-first-letter.-This-function-ignores-spaces. """
  node_from: *id005
  node_to: &id010
    _node_tags:
    id: 8
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - |
      i lOvE To sEe dOlPhInS SwIm.
    - |
      cOmPuTeRs
    - |
      t
  prompt_from: |-
    def altText(s):
        """
        This function inputs a string as a parameter. This function returns that string except every other letter is capitalized. This functions starts by capitalizing the first letter. This function ignores spaces. 
        """
        
  prompt_to: |-
    def altText(s):
        """
        This function inputs a string as parameter. This function returns that string except every other letter is capitalized. 
        """
        
  state: neutral
  total_attempts: 3
  username: student60
- _edge_tags:
  - m2
  attempt_id: 2
  completion_from: |
    newString = ""
        for i in range(len(s)):
            if i % 2 == 0:
                newString += s[i].lower()
            else:
                newString += s[i].upper()
        return newString

    print(altText("Hello World"))
  completion_to: |
    s = s.lower()
        s = s.capitalize()
        for i in range(1, len(s), 2):
            s = s[:i] + s[i].upper() + s[i+1:]
        return s

    print(altText("hello"))
    print(altText("what"))
    print(altText("is"))
    print(altText("your"))
    print(altText("name"))
  diff: |-
    --- 
    +++ 
    @@ -7,6 +7,7 @@
     a string as+a parameter. This function@@ -19,4 +20,12 @@
     letter is capitalized.+This+functions+starts+by+capitalizing+the+first+letter. """
  node_from: *id010
  node_to: &id014
    _node_tags:
    id: 14
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - |
      I lOvE To sEe dOlPhInS SwIm.
    - |
      COmPuTeRs
    - |
      T
  prompt_from: |-
    def altText(s):
        """
        This function inputs a string as parameter. This function returns that string except every other letter is capitalized. 
        """
        
  prompt_to: |-
    def altText(s):
        """
        This function inputs a string as a parameter. This function returns that string except every other letter is capitalized. This functions starts by capitalizing the first letter. 
        """
        
  state: fail
  total_attempts: 3
  username: student60
- _edge_tags:
  - m2
  attempt_id: 1
  completion_from: |
    return s[::2].upper() + s[1::2].lower()

    print(altText("hello"))
    print(altText("HELLO"))
    print(altText("hElLo"))
    print(altText("hElLo wOrLd"))
  completion_to: |
    s = s.lower()
        s = s.replace(" ", "")
        s = s.replace(".", "")
        s = s.replace(",", "")
        s = s.replace("!", "")
        s = s.replace("?", "")
        s = s.replace("-", "")
        s = s.replace("'", "")
        s = s.replace("\"", "")
  diff: |-
    --- 
    +++ 
    @@ -23,4 +23,14 @@
     being a capital.+It+outputs+the+same+string+but+with+the+capitalization+adjusted. """
  node_from: *id001
  node_to: *id007
  prompt_from: |-
    def altText(s):
        """
        The function takes in a string and capitalizes every other letter in the string, starting with the first letter being a capital.
        """
        
  prompt_to: |-
    def altText(s):
        """
        The function takes in a string and capitalizes every other letter in the string, starting with the first letter being a capital. It outputs the same string but with the capitalization adjusted. 
        """
        
  state: neutral
  total_attempts: 3
  username: student63
- _edge_tags:
  - m2
  attempt_id: 2
  completion_from: |
    s = s.lower()
        s = s.replace(" ", "")
        s = s.replace(".", "")
        s = s.replace(",", "")
        s = s.replace("!", "")
        s = s.replace("?", "")
        s = s.replace("-", "")
        s = s.replace("'", "")
        s = s.replace("\"", "")
  completion_to: |
    return s.title()[::2]

    print(altText("hello"))
    print(altText("HELLO"))
    print(altText("hElLo"))
    print(altText("HeLLo"))
    print(altText("HElLo"))
  diff: |-
    --- 
    +++ 
    @@ -8,13 +8,17 @@
     a string and-capitalizes+outputs+the+same+string+but+with every other letter-in-the-string,+being+capitalized, starting with the@@ -23,14 +27,4 @@
     being a capital.-It-outputs-the-same-string-but-with-the-capitalization-adjusted. """
  node_from: *id007
  node_to: &id013
    _node_tags:
    id: 6
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - |
      ILv oSeDlhn wm
    - |
      Cmues
    - |
      T
  prompt_from: |-
    def altText(s):
        """
        The function takes in a string and capitalizes every other letter in the string, starting with the first letter being a capital. It outputs the same string but with the capitalization adjusted. 
        """
        
  prompt_to: |-
    def altText(s):
        """
        The function takes in a string and outputs the same string but with every other letter being capitalized, starting with the first letter being a capital.  
        """
        
  state: fail
  total_attempts: 3
  username: student63
- _edge_tags:
  - m2
  attempt_id: 1
  completion_from: |
    return s.title()
  completion_to: |
    return s[::2].upper() + s[1::2].lower()

    print(altText('computers'))
    print(altText('T'))
  diff: |-
    --- 
    +++ 
    @@ -1,6 +1,24 @@
     def altText(s): """+def+altText(s):+brings+in+input+'computers'+and+capitalizes+every+other+letter+starting+at+'C'+and+ending+at+'S' def altText(s): brings
  node_from: *id011
  node_to: *id001
  prompt_from: |-
    def altText(s):
        """
        def altText(s): brings in input 'T' and outputs the capitalized version
        """
        
  prompt_to: |-
    def altText(s):
        """
        
    def altText(s): brings in input 'computers' and capitalizes every other letter starting at 'C' and ending at 'S'
    def altText(s): brings in input 'T' and outputs the capitalized version
        """
        
  state: neutral
  total_attempts: 3
  username: student75
- _edge_tags:
  - m2
  attempt_id: 2
  completion_from: |
    return s[::2].upper() + s[1::2].lower()

    print(altText('computers'))
    print(altText('T'))
  completion_to: |
    new_string = ""
        for i in range(len(s)):
            if i % 2 == 0:
                new_string += s[i].upper()
            else:
                new_string += s[i].lower()
        return new_string

    print(altText("computers"))
    print(altText("T"))
  diff: |-
    --- 
    +++ 
    @@ -19,6 +19,15 @@
     ending at 'S'+and+prints+the+lowercase+letters+in+their+original+spelling def altText(s): brings
  node_from: *id001
  node_to: *id005
  prompt_from: |-
    def altText(s):
        """
        
    def altText(s): brings in input 'computers' and capitalizes every other letter starting at 'C' and ending at 'S'
    def altText(s): brings in input 'T' and outputs the capitalized version
        """
        
  prompt_to: |-
    def altText(s):
        """
        
    def altText(s): brings in input 'computers' and capitalizes every other letter starting at 'C' and ending at 'S' and prints the lowercase letters in their original spelling 
    def altText(s): brings in input 'T' and outputs the capitalized version
        """
        
  state: success
  total_attempts: 3
  username: student75
nodes:
- *id004
- _node_tags:
  id: 1
  stderr:
  - ''
  - ''
  - ''
  stdout:
  - |
    I lOvE To sEe dOlPhInS SwIm.
  - |
    cOmPuTeRs
  - |
    t
- *id003
- *id012
- *id008
- *id001
- *id013
- _node_tags:
  id: 7
  stderr:
  - |-
    IndentationError: expected an indented block after 'if' statement on line 6
  - |-
    IndentationError: expected an indented block after 'if' statement on line 6
  - |-
    IndentationError: expected an indented block after 'if' statement on line 6
  stdout:
  - ''
  - ''
  - ''
- *id010
- *id005
- *id002
- *id009
- *id007
- *id011
- *id014
- *id006
- *id015
problem: altText
student_start_node_tags:
  student23:
    listitems:
    - 1
    - 2
    state:
      _yaml_format:
        state:
        - 
        - _flow_style: false
      _yaml_line_col:
        col: 2
        data:
          0:
          - 8
          - 4
          1:
          - 9
          - 4
        line: 8
  student35:
    listitems:
    - 1
    - 2
    state:
      _yaml_format:
        state:
        - 
        - _flow_style: false
      _yaml_line_col:
        col: 2
        data:
          0:
          - 18
          - 4
          1:
          - 19
          - 4
        line: 18
  student40:
    listitems:
    - 1
    - 2
    state:
    - _yaml_format:
        state:
        - 
        - _flow_style: false
      _yaml_line_col:
        col: 2
        data:
          0:
          - 28
          - 4
          1:
          - 29
          - 4
        line: 28
    - _yaml_comment:
        state:
        - 
        - _items:
            1:
            - state:
              - 
              - _value: |2+


                end_mark:
                start_mark:
                  state:
                  - 
                  - column: 4
                    index: 875
                    line: 29
                    name: first_attempts_altText.yaml
            - 
            - 
            - 
          _post: []
          _pre:
          comment:
  student44:
    listitems:
    - 1
    - 2
    state:
    - _yaml_format:
        state:
        - 
        - _flow_style: false
      _yaml_line_col:
        col: 2
        data:
          0:
          - 39
          - 4
          1:
          - 40
          - 4
        line: 39
    - _yaml_comment:
        state:
        - 
        - _items:
            1:
            - state:
              - 
              - _value: |2+


                end_mark:
                start_mark:
                  state:
                  - 
                  - column: 4
                    index: 1104
                    line: 40
                    name: first_attempts_altText.yaml
            - 
            - 
            - 
          _post: []
          _pre:
          comment:
  student59:
    listitems:
    - 1
    state:
      _yaml_format:
        state:
        - 
        - _flow_style: false
      _yaml_line_col:
        col: 2
        data:
          0:
          - 50
          - 4
        line: 50
  student60:
    listitems:
    - 1
    - 2
    state:
      _yaml_format:
        state:
        - 
        - _flow_style: false
      _yaml_line_col:
        col: 2
        data:
          0:
          - 59
          - 4
          1:
          - 60
          - 4
        line: 59
  student63:
    listitems:
    - 1
    - 2
    state:
      _yaml_format:
        state:
        - 
        - _flow_style: false
      _yaml_line_col:
        col: 2
        data:
          0:
          - 69
          - 4
          1:
          - 70
          - 4
        line: 69
  student75:
    listitems:
    - 1
    state:
      _yaml_format:
        state:
        - 
        - _flow_style: false
      _yaml_line_col:
        col: 2
        data:
          0:
          - 79
          - 4
        line: 79
