!Graph
problem: assessVowels
nodes:
- &id001 !Node
  id: 0
  stdout:
  - '[''a'', ''e'', ''a'', ''a'', ''e'']

    '
  - '[''o'', ''e'', ''i'', ''e'', ''e'']

    '
  - '[''e'']

    '
  - '[]

    '
  stderr:
  - ''
  - ''
  - ''
  - ''
  _node_tags: null
- &id003 !Node
  id: 1
  stdout:
  - '[''I'', ''a'', ''e'', ''a'', ''a'', ''e'']

    '
  - '[''A'', ''o'', ''e'', ''i'', ''e'', ''e'']

    '
  - '[''A'', ''A'', ''e'']

    '
  - '[]

    '
  stderr:
  - ''
  - ''
  - ''
  - ''
  _node_tags: null
- &id002 !Node
  id: 2
  stdout:
  - '[''i'', ''a'', ''e'', ''a'', ''a'', ''e'']

    '
  - '[''a'', ''o'', ''e'', ''i'', ''e'', ''e'']

    '
  - '[''a'', ''a'', ''e'']

    '
  - '[]

    '
  stderr:
  - ''
  - ''
  - ''
  - ''
  _node_tags: null
- &id005 !Node
  id: 3
  stdout:
  - ''
  - ''
  - ''
  - ''
  stderr:
  - 'IndentationError: expected an indented block after ''if'' statement on line 7'
  - 'IndentationError: expected an indented block after ''if'' statement on line 7'
  - 'IndentationError: expected an indented block after ''if'' statement on line 7'
  - 'IndentationError: expected an indented block after ''if'' statement on line 7'
  _node_tags: null
- &id006 !Node
  id: 4
  stdout:
  - 'None

    '
  - 'None

    '
  - 'None

    '
  - 'None

    '
  stderr:
  - ''
  - ''
  - ''
  - ''
  _node_tags: null
- &id004 !Node
  id: 5
  stdout:
  - '[''a'', ''e'']

    '
  - '[''o'', ''e'', ''i'']

    '
  - '[''e'']

    '
  - '[]

    '
  stderr:
  - ''
  - ''
  - ''
  - ''
  _node_tags: null
- &id007 !Node
  id: 6
  stdout:
  - ''
  - ''
  - ''
  - ''
  stderr:
  - 'IndentationError: expected an indented block after ''if'' statement on line 8'
  - 'IndentationError: expected an indented block after ''if'' statement on line 8'
  - 'IndentationError: expected an indented block after ''if'' statement on line 8'
  - 'IndentationError: expected an indented block after ''if'' statement on line 8'
  _node_tags: null
edges:
- !Edge
  node_from: *id001
  node_to: *id002
  username: student13
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    Given a string of characters,\
    \ the function extracts the vowels in the string and returns them in a list.\n\
    \    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    Given a string of characters,\
    \ the function should make all characters lowercase then extract the vowels in\
    \ the string and returns them in a list. \n    \"\"\"\n    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    vowelList = []\n    for\
    \ char in s:\n        if char in vowels:\n            vowelList.append(char)\n\
    \    return vowelList\n"
  completion_to: "vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_in_string = []\n\
    \    for char in s.lower():\n        if char in vowels:\n            vowels_in_string.append(char)\n\
    \    return vowels_in_string\n"
  diff: "--- \n+++ \n@@ -8,7 +8,13 @@\n characters, the function-extracts+should+make+all+characters+lowercase+then+extract\
    \ the vowels in"
  attempt_id: 1
  total_attempts: 3
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id003
  username: student13
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    Given a string of characters,\
    \ the function should make all characters lowercase then extract the vowels in\
    \ the string and returns them in a list. \n    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    Given a string of characters,\
    \ the functions should then extract the vowels in the string and returns them\
    \ in a list, making sure to account for both uppercase and lowercase versions\
    \ of the vowels. \n    \"\"\"\n    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_in_string = []\n\
    \    for char in s.lower():\n        if char in vowels:\n            vowels_in_string.append(char)\n\
    \    return vowels_in_string\n"
  completion_to: "vowels = ['a','e','i','o','u','A','E','I','O','U']\n    vowelList\
    \ = []\n    for i in s:\n        if i in vowels:\n            vowelList.append(i)\n\
    \    return vowelList\n"
  diff: "--- \n+++ \n@@ -7,12 +7,8 @@\n of characters, the-function+functions should-make-all-characters-lowercase\
    \ then extract the@@ -25,5 +21,18 @@\n them in a-list.+list,+making+sure+to+account+for+both+uppercase+and+lowercase+versions+of+the+vowels.\
    \ \"\"\""
  attempt_id: 2
  total_attempts: 3
  state: success
  _edge_tags: null
- !Edge
  node_from: *id004
  node_to: *id001
  username: student16
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    return a list of strings with\
    \ all vowels used in the input\n    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    return a list of strings with\
    \ all vowels used in the input in the same order (repetitions ok)\n    \"\"\"\n\
    \    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    used = []\n    for char\
    \ in s:\n        if char in vowels:\n            if char not in used:\n      \
    \          used.append(char)\n    return used\n"
  completion_to: "vowels = ['a', 'e', 'i', 'o', 'u']\n    return [v for v in s if\
    \ v in vowels]\n"
  diff: "--- \n+++ \n@@ -13,4 +13,10 @@\n in the input+in+the+same+order+(repetitions+ok)\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 3
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id003
  username: student16
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    return a list of strings with\
    \ all vowels used in the input in the same order (repetitions ok)\n    \"\"\"\n\
    \    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    return a list of strings with\
    \ all vowels used in the input in the same order including capitalizations (repetitions\
    \ ok)\n    \"\"\"\n    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    return [v for v in s if\
    \ v in vowels]\n"
  completion_to: "vowels = []\n    for char in s:\n        if char.lower() in \"aeiou\"\
    :\n            vowels.append(char)\n    return vowels\n"
  diff: "--- \n+++ \n@@ -17,6 +17,8 @@\n the same order+including+capitalizations\
    \ (repetitions ok) \"\"\""
  attempt_id: 2
  total_attempts: 3
  state: success
  _edge_tags: null
- !Edge
  node_from: *id005
  node_to: *id001
  username: student2
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    This function pints a list containing\
    \ strings of every value from the input\n    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    This function pints a list containing\
    \ strings of every vowel from the input\n    \"\"\"\n    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in s:\n        if\
    \ i in vowels:\n            print(i)\n"
  completion_to: "vowels = ['a', 'e', 'i', 'o', 'u']\n    list_of_vowels = []\n  \
    \  for i in s:\n        if i in vowels:\n            list_of_vowels.append(i)\n\
    \    return list_of_vowels\n\nprint(assessVowels('aeiou'))\nprint(assessVowels('abcdefghijklmnop"
  diff: "--- \n+++ \n@@ -10,7 +10,7 @@\n strings of every-value+vowel from the input"
  attempt_id: 1
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id006
  username: student2
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    This function pints a list containing\
    \ strings of every vowel from the input\n    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    This function prints a list containing\
    \ strings of every vowel from the input\n    \"\"\"\n    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    list_of_vowels = []\n\
    \    for i in s:\n        if i in vowels:\n            list_of_vowels.append(i)\n\
    \    return list_of_vowels\n\nprint(assessVowels('aeiou'))\nprint(assessVowels('abcdefghijklmnop"
  completion_to: "vowels = ['a', 'e', 'i', 'o', 'u']\n    vowelList = []\n    for\
    \ i in s:\n        if i in vowels:\n            vowelList.append(i)\n    print(vowelList)\n\
    \nassessVowels('supercalifragilisticexpialidocious')\n"
  diff: "--- \n+++ \n@@ -3,7 +3,7 @@\n \"\"\" This function-pints+prints a list containing"
  attempt_id: 2
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id006
  node_to: *id005
  username: student2
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    This function prints a list\
    \ containing strings of every vowel from the input\n    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    This function prints a list of\
    \ all \"a\", \"e\", \"I\", or \"u\" that appear in the input\n    \"\"\"\n    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    vowelList = []\n    for\
    \ i in s:\n        if i in vowels:\n            vowelList.append(i)\n    print(vowelList)\n\
    \nassessVowels('supercalifragilisticexpialidocious')\n"
  completion_to: "vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in s:\n       \
    \ if char in vowels:\n            print(char)\n"
  diff: "--- \n+++ \n@@ -6,12 +6,16 @@\n prints a list-containing-strings of-every-vowel-from+all+\"\
    a\",+\"e\",+\"I\",+or+\"u\"+that+appear+in the input \"\"\""
  attempt_id: 3
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id005
  node_to: *id007
  username: student2
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    This function prints a list\
    \ of all \"a\", \"e\", \"I\", or \"u\" that appear in the input\n    \"\"\"\n\
    \    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    This function prints all vowels\n\
    \    \"\"\"\n    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in s:\n     \
    \   if char in vowels:\n            print(char)\n"
  completion_to: "vowels = set('aeiou')\n    s = s.lower()\n    for vowel in s:\n\
    \        if vowel in vowels:\n            print(vowel)\n"
  diff: "--- \n+++ \n@@ -4,18 +4,6 @@\n This function prints-a-list-of all-\"a\",-\"\
    e\",-\"I\",-or-\"u\"-that-appear-in-the-input+vowels \"\"\""
  attempt_id: 4
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id007
  node_to: *id005
  username: student2
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    This function prints all vowels\n\
    \    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    This function prints a list of\
    \ all vowels that appear\n    \"\"\"\n    "
  completion_from: "vowels = set('aeiou')\n    s = s.lower()\n    for vowel in s:\n\
    \        if vowel in vowels:\n            print(vowel)\n"
  completion_to: "vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in s:\n        if\
    \ i in vowels:\n            print(i)\n"
  diff: "--- \n+++ \n@@ -4,6 +4,11 @@\n This function prints+a+list+of all vowels+that+appear\
    \ \"\"\""
  attempt_id: 5
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id005
  node_to: *id005
  username: student2
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    This function prints a list\
    \ of all vowels that appear\n    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    This function prints a list of\
    \ vowels \n    \"\"\"\n    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in s:\n        if\
    \ i in vowels:\n            print(i)\n"
  completion_to: "vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in s:\n        if\
    \ i in vowels:\n            print(i)\n\nassessVowels('supercalifragilisticexpialidocious')\n"
  diff: "--- \n+++ \n@@ -7,8 +7,5 @@\n a list of-all vowels-that-appear \"\"\""
  attempt_id: 6
  total_attempts: 7
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id003
  username: student22
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    takes in a string and returns\
    \ a list of vowels \n    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    takes in a string and checks for\
    \ uppercase and lowercase vowels and returns a list of those uppercase and lowercase\
    \ vowels, if any\n    \"\"\"\n    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    vowelList = []\n    for\
    \ letter in s:\n        if letter in vowels:\n            vowelList.append(letter)\n\
    \    return vowelList\n"
  completion_to: "vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  \
    \  vowelList = []\n    for letter in s:\n        if letter in vowels:\n      \
    \      vowelList.append(letter)\n    return vowelList\n"
  diff: "--- \n+++ \n@@ -6,9 +6,22 @@\n a string and+checks+for+uppercase+and+lowercase+vowels+and\
    \ returns a list of-vowels+those+uppercase+and+lowercase+vowels,+if+any \"\"\""
  attempt_id: 1
  total_attempts: 2
  state: success
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id003
  username: student37
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    Write a function which takes\
    \ a string as an input and returns a list of each vowel present in the string,\
    \ case sensitive\n    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    Write a function which takes a\
    \ string as an input and returns a list of each vowel present in the string, where\
    \ capitalized vowels are present in the return list as capitalized and lower case\
    \ vowels as lower case\n    \"\"\"\n    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    return [x for x in s if\
    \ x in vowels]\n"
  completion_to: "vowels = ['a','e','i','o','u','A','E','I','O','U']\n    return [x\
    \ for x in s if x in vowels]\n"
  diff: "--- \n+++ \n@@ -22,6 +22,22 @@\n in the string,+where+capitalized+vowels+are+present+in+the+return+list+as+capitalized+and+lower\
    \ case-sensitive+vowels+as+lower+case \"\"\""
  attempt_id: 1
  total_attempts: 2
  state: success
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student5
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    the function assessVowels will\
    \ take input of a string and return a list of all the vowels in that string in\
    \ the case they were originally written. \n    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    the function assessVowels will\
    \ take input of a string and return a list of all the vowels in that string in\
    \ the case they were originally written. include both capital and lower case letters.\
    \ \n    \"\"\"\n    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    vowelList = []\n    for\
    \ char in s:\n        if char in vowels:\n            vowelList.append(char)\n\
    \    return vowelList\n"
  completion_to: "vowels = ['a', 'e', 'i', 'o', 'u']\n    output = []\n    for i in\
    \ s:\n        if i in vowels:\n            output.append(i)\n    return output\n"
  diff: "--- \n+++ \n@@ -28,4 +28,11 @@\n were originally written.+include+both+capital+and+lower+case+letters.\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 3
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student5
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    the function assessVowels will\
    \ take input of a string and return a list of all the vowels in that string in\
    \ the case they were originally written. include both capital and lower case letters.\
    \ \n    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    the function assessVowels will\
    \ take input of a string and return a list of all the vowels in that string. include\
    \ both capital and lower case letters. \n    \"\"\"\n    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    output = []\n    for i\
    \ in s:\n        if i in vowels:\n            output.append(i)\n    return output\n"
  completion_to: "vowels = ['a', 'e', 'i', 'o', 'u']\n    vowelList = []\n    for\
    \ i in s:\n        if i in vowels:\n            vowelList.append(i)\n    return\
    \ vowelList\n"
  diff: "--- \n+++ \n@@ -20,14 +20,7 @@\n vowels in that-string-in-the-case-they-were-originally-written.+string.\
    \ include both capital"
  attempt_id: 2
  total_attempts: 3
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id003
  username: student72
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    Return a list of the vowels\
    \ in the input.\n    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    Return a list of both the uppercase\
    \ and lowercase vowels in the input.\n    \"\"\"\n    "
  completion_from: "vowels = ['a', 'e', 'i', 'o', 'u']\n    return [x for x in s if\
    \ x in vowels]\n"
  completion_to: 'return [c for c in s if c in ''aeiouAEIOU'']

    '
  diff: "--- \n+++ \n@@ -5,7 +5,11 @@\n a list of+both the+uppercase+and+lowercase\
    \ vowels in the"
  attempt_id: 1
  total_attempts: 2
  state: success
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id003
  username: student74
  prompt_from: "def assessVowels(s):\n    \"\"\"\n    puts all the vowels of a string\
    \ in a list\n    \"\"\"\n    "
  prompt_to: "def assessVowels(s):\n    \"\"\"\n    puts all the vowels of a string\
    \ in a list, including capital and lower case letters\n    \"\"\"\n    "
  completion_from: "vowels = ['a','e','i','o','u']\n    vowelList = []\n    for letter\
    \ in s:\n        if letter in vowels:\n            vowelList.append(letter)\n\
    \    return vowelList\n"
  completion_to: "vowels = ['a','e','i','o','u','A','E','I','O','U']\n    vowelList\
    \ = []\n    for letter in s:\n        if letter in vowels:\n            vowelList.append(letter)\n\
    \    return vowelList\n"
  diff: "--- \n+++ \n@@ -10,5 +10,11 @@\n string in a-list+list,+including+capital+and+lower+case+letters\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 2
  state: success
  _edge_tags: null
student_start_node_tags: {}
