!Graph
problem: check_for_aspen
nodes:
- &id007 !Node
  id: 0
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'KeyError: ''name'''
  - 'KeyError: ''name'''
  - 'KeyError: ''name'''
  _node_tags: null
- !Node
  id: 1
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'NameError: name ''trees'' is not defined'
  - 'NameError: name ''trees'' is not defined'
  - 'NameError: name ''trees'' is not defined'
  _node_tags: null
- &id006 !Node
  id: 2
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'AttributeError: ''str'' object has no attribute ''name'''
  - 'AttributeError: ''str'' object has no attribute ''name'''
  - 'AttributeError: ''str'' object has no attribute ''name'''
  _node_tags: null
- &id008 !Node
  id: 3
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'TypeError: string indices must be integers'
  - 'TypeError: string indices must be integers'
  - 'TypeError: string indices must be integers'
  _node_tags: null
- &id005 !Node
  id: 4
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'IndentationError: expected an indented block after ''if'' statement on line 6'
  - 'IndentationError: expected an indented block after ''if'' statement on line 6'
  - 'IndentationError: expected an indented block after ''if'' statement on line 6'
  _node_tags: null
- &id004 !Node
  id: 5
  stdout:
  - ''
  - 'Yup

    '
  - 'Yup

    '
  stderr:
  - 'KeyError: ''Aspen'''
  - ''
  - ''
  _node_tags: null
- !Node
  id: 6
  stdout:
  - 'False

    '
  - 'False

    '
  - 'False

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id001 !Node
  id: 7
  stdout:
  - 'Nope

    '
  - 'Nope

    '
  - 'Nope

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id003 !Node
  id: 8
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'IndentationError: expected an indented block after ''if'' statement on line 5'
  - 'IndentationError: expected an indented block after ''if'' statement on line 5'
  - 'IndentationError: expected an indented block after ''if'' statement on line 5'
  _node_tags: null
- &id002 !Node
  id: 9
  stdout:
  - 'Nope

    '
  - 'Yup

    '
  - 'Yup

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
edges:
- !Edge
  node_from: *id001
  node_to: *id001
  username: student27
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    Check if \"aspen\" is\
    \ one of the keys in a dict. Return \"Yup\" if it is a key, \"Nope\" if it is\
    \ not a key.\n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    Check if \"aspen\" is a\
    \ key in a dictionary. Return \"Yup\" if it is a key, \"Nope\" if it is not a\
    \ key.\n    \"\"\"\n    "
  completion_from: "if \"aspen\" in trees:\n        return \"Yup\"\n    else:\n  \
    \      return \"Nope\"\n"
  completion_to: "if \"aspen\" in trees:\n        return \"Yup\"\n    else:\n    \
    \    return \"Nope\"\n"
  diff: "--- \n+++ \n@@ -5,13 +5,11 @@\n if \"aspen\" is-one-of-the-keys+a+key in\
    \ a-dict.+dictionary. Return \"Yup\" if"
  attempt_id: 1
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student27
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    Check if \"aspen\" is\
    \ a key in a dictionary. Return \"Yup\" if it is a key, \"Nope\" if it is not\
    \ a key.\n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    A dict object contains\
    \ keys and values. Check if \"aspen\" is one of the keys in a dict. Return \"\
    Yup\" if it is a key, \"Nope\" if it is not a key.\n    \"\"\"\n    "
  completion_from: "if \"aspen\" in trees:\n        return \"Yup\"\n    else:\n  \
    \      return \"Nope\"\n"
  completion_to: "if \"aspen\" in trees:\n        return \"Yup\"\n    else:\n    \
    \    return \"Nope\"\n"
  diff: "--- \n+++ \n@@ -1,15 +1,24 @@\n def check_for_aspen(trees): \"\"\"+A+dict+object+contains+keys+and+values.\
    \ Check if \"aspen\" is-a-key+one+of+the+keys in a-dictionary.+dict. Return \"\
    Yup\" if"
  attempt_id: 2
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id002
  username: student27
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    A dict object contains\
    \ keys and values. Check if \"aspen\" is one of the keys in a dict. Return \"\
    Yup\" if it is a key, \"Nope\" if it is not a key.\n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    A dict object contains\
    \ keys and values. Check if \"Aspen\" is one of the keys in a dict. Return \"\
    Yup\" if it is a key, \"Nope\" if it is not a key.\n    \"\"\"\n    "
  completion_from: "if \"aspen\" in trees:\n        return \"Yup\"\n    else:\n  \
    \      return \"Nope\"\n"
  completion_to: "if \"Aspen\" in trees:\n        return \"Yup\"\n    else:\n    \
    \    return \"Nope\"\n"
  diff: "--- \n+++ \n@@ -10,7 +10,7 @@\n values. Check if-\"aspen\"+\"Aspen\" is one\
    \ of"
  attempt_id: 3
  total_attempts: 4
  state: success
  _edge_tags: null
- !Edge
  node_from: *id003
  node_to: *id003
  username: student34
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    If \"Aspen\" appears\
    \ as an item in the dictionary, output the string \"Yup\", and if it does not\
    \ appear output the string \"Nope\"\n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    If \"Aspen\" appears as\
    \ a definition in the dictionary, output the string \"Yup\", and if it does not\
    \ appear output the string \"Nope\"\n    \"\"\"\n    "
  completion_from: "if \"Aspen\" in trees:\n        print(\"Yup\")\n    else:\n  \
    \      print(\"Nope\")\n\ncheck_for_aspen(trees)\n"
  completion_to: "if \"Aspen\" in trees:\n        print(\"Yup\")\n    else:\n    \
    \    print(\"Nope\")\n\ncheck_for_aspen(trees)\n"
  diff: "--- \n+++ \n@@ -5,8 +5,8 @@\n \"Aspen\" appears as-an-item+a+definition in\
    \ the dictionary,"
  attempt_id: 1
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id003
  node_to: *id004
  username: student34
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    If \"Aspen\" appears\
    \ as a definition in the dictionary, output the string \"Yup\", and if it does\
    \ not appear output the string \"Nope\"\n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    If \"Aspen\" corresponds\
    \ to an integer greater than 0, output the string \"Yup\", and if it does not\
    \ appear output the string \"Nope\"\n    \"\"\"\n    "
  completion_from: "if \"Aspen\" in trees:\n        print(\"Yup\")\n    else:\n  \
    \      print(\"Nope\")\n\ncheck_for_aspen(trees)\n"
  completion_to: "if trees[\"Aspen\"] > 0:\n        return \"Yup\"\n    else:\n  \
    \      return \"Nope\"\n"
  diff: "--- \n+++ \n@@ -3,13 +3,13 @@\n \"\"\" If \"Aspen\"-appears-as-a-definition-in-the-dictionary,+corresponds+to+an+integer+greater+than+0,\
    \ output the string"
  attempt_id: 2
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id004
  node_to: *id005
  username: student34
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    If \"Aspen\" corresponds\
    \ to an integer greater than 0, output the string \"Yup\", and if it does not\
    \ appear output the string \"Nope\"\n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    If 'Aspen' corresponds\
    \ to an integer greater than 0, print the string \"Yup\", and if 'Aspen' does\
    \ not appear in the dictionary put print the string \"Nope\"\n    \"\"\"\n    "
  completion_from: "if trees[\"Aspen\"] > 0:\n        return \"Yup\"\n    else:\n\
    \        return \"Nope\"\n"
  completion_to: "if 'Aspen' in trees:\n        if trees['Aspen'] > 0:\n         \
    \   print('Yup')\n        else:\n            print('Nope')\n    else:\n      \
    \  print('Nope')\n\ncheck_for_aspen(trees)\n"
  diff: "--- \n+++ \n@@ -2,7 +2,7 @@\n check_for_aspen(trees): \"\"\" If-\"Aspen\"\
    +'Aspen' corresponds to an@@ -10,17 +10,21 @@\n greater than 0,-output+print the\
    \ string \"Yup\", and if-it+'Aspen' does not appear-output+in+the+dictionary+put+print\
    \ the string \"Nope\""
  attempt_id: 3
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id005
  node_to: *id005
  username: student34
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    If 'Aspen' corresponds\
    \ to an integer greater than 0, print the string \"Yup\", and if 'Aspen' does\
    \ not appear in the dictionary put print the string \"Nope\"\n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    If 'Aspen' corresponds\
    \ to an integer greater than 0, output \"Yup\", and if 'Aspen' does not exist\
    \ in the dictionary output \"Nope\"\n    \"\"\"\n    "
  completion_from: "if 'Aspen' in trees:\n        if trees['Aspen'] > 0:\n       \
    \     print('Yup')\n        else:\n            print('Nope')\n    else:\n    \
    \    print('Nope')\n\ncheck_for_aspen(trees)\n"
  completion_to: "if 'Aspen' in trees:\n        if trees['Aspen'] > 0:\n         \
    \   print('Yup')\n        else:\n            print('Nope')\n    else:\n      \
    \  print('Nope')\n\ncheck_for_aspen(trees)\n"
  diff: "--- \n+++ \n@@ -10,22 +10,17 @@\n greater than 0,-print-the-string+output\
    \ \"Yup\", and if 'Aspen' does not-appear+exist in the dictionary-put-print-the-string+output\
    \ \"Nope\" \"\"\""
  attempt_id: 4
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id005
  node_to: *id003
  username: student34
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    If 'Aspen' corresponds\
    \ to an integer greater than 0, output \"Yup\", and if 'Aspen' does not exist\
    \ in the dictionary output \"Nope\"\n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    If 'Aspen' appears in the\
    \ dictionary output \"Yup\" and if it is not in the dictionary output \"Nope\"\
    \n    \"\"\"\n    "
  completion_from: "if 'Aspen' in trees:\n        if trees['Aspen'] > 0:\n       \
    \     print('Yup')\n        else:\n            print('Nope')\n    else:\n    \
    \    print('Nope')\n\ncheck_for_aspen(trees)\n"
  completion_to: "if 'Aspen' in trees:\n        print(\"Yup!\")\n    else:\n     \
    \   print(\"Nope!\")\n\ncheck_for_aspen(trees)\n"
  diff: "--- \n+++ \n@@ -3,21 +3,17 @@\n \"\"\" If 'Aspen'-corresponds-to-an-integer-greater-than-0,+appears+in+the+dictionary\
    \ output-\"Yup\",+\"Yup\" and if-'Aspen'-does+it+is not-exist in the dictionary"
  attempt_id: 5
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id003
  node_to: *id003
  username: student34
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    If 'Aspen' appears in\
    \ the dictionary output \"Yup\" and if it is not in the dictionary output \"Nope\"\
    \n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    If it is true that 'Aspen'\
    \ appears in the dictionary, output \"Yup\" and if it is false output \"Nope\"\
    \n    \"\"\"\n    "
  completion_from: "if 'Aspen' in trees:\n        print(\"Yup!\")\n    else:\n   \
    \     print(\"Nope!\")\n\ncheck_for_aspen(trees)\n"
  completion_to: "if 'Aspen' in trees:\n        print(\"Yup\")\n    else:\n      \
    \  print(\"Nope\")\n\n"
  diff: "--- \n+++ \n@@ -2,21 +2,22 @@\n check_for_aspen(trees): \"\"\" If+it+is+true+that\
    \ 'Aspen' appears in the-dictionary+dictionary, output \"Yup\" and if it is-not-in-the-dictionary+false\
    \ output \"Nope\" \"\"\""
  attempt_id: 6
  total_attempts: 7
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id006
  node_to: *id001
  username: student67
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    If the name is 'Aspen',\
    \ returns 'Yup'. Otherwise returns 'Nope'.\n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    If the name is 'Aspen',\
    \ returns 'Yup'. Otherwise returns 'Nope'.\n    \"\"\"\n    "
  completion_from: "for tree in trees:\n        if tree.name == 'Aspen':\n       \
    \     return 'Yup'\n    return 'Nope'\n"
  completion_to: "if trees == 'Aspen':\n        return 'Yup'\n    else:\n        return\
    \ 'Nope'\n"
  diff: ''
  attempt_id: 1
  total_attempts: 5
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id007
  username: student67
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    If the name is 'Aspen',\
    \ returns 'Yup'. Otherwise returns 'Nope'.\n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    If the name of the dictionary\
    \ is 'Aspen', returns 'Yup'. Otherwise returns 'Nope'.\n    \"\"\"\n    "
  completion_from: "if trees == 'Aspen':\n        return 'Yup'\n    else:\n      \
    \  return 'Nope'\n"
  completion_to: "if trees['name'] == 'Aspen':\n        return 'Yup'\n    else:\n\
    \        return 'Nope'\n"
  diff: "--- \n+++ \n@@ -4,6 +4,9 @@\n If the name+of+the+dictionary is 'Aspen', returns"
  attempt_id: 2
  total_attempts: 5
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id007
  node_to: *id007
  username: student67
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    If the name of the dictionary\
    \ is 'Aspen', returns 'Yup'. Otherwise returns 'Nope'.\n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    If the name of the dictionary\
    \ is 'Aspen', returns 'Yup'. Otherwise returns 'Nope'.\n    \"\"\"\n    "
  completion_from: "if trees['name'] == 'Aspen':\n        return 'Yup'\n    else:\n\
    \        return 'Nope'\n"
  completion_to: "if trees['name'] == 'Aspen':\n        return 'Yup'\n    else:\n\
    \        return 'Nope'\n"
  diff: ''
  attempt_id: 3
  total_attempts: 5
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id007
  node_to: *id002
  username: student67
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    If the name of the dictionary\
    \ is 'Aspen', returns 'Yup'. Otherwise returns 'Nope'.\n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    If 'Aspen' is in the dictionary,\
    \ returns 'Yup'. Otherwise returns 'Nope'.\n    \"\"\"\n    "
  completion_from: "if trees['name'] == 'Aspen':\n        return 'Yup'\n    else:\n\
    \        return 'Nope'\n"
  completion_to: "if 'Aspen' in trees:\n        return 'Yup'\n    else:\n        return\
    \ 'Nope'\n"
  diff: "--- \n+++ \n@@ -2,13 +2,11 @@\n check_for_aspen(trees): \"\"\" If+'Aspen'+is+in\
    \ the-name-of-the-dictionary-is-'Aspen',+dictionary, returns 'Yup'. Otherwise"
  attempt_id: 4
  total_attempts: 5
  state: success
  _edge_tags: null
- !Edge
  node_from: *id008
  node_to: *id001
  username: student68
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    given an array formatted\
    \ so that there is a String treename key and a number associated with that key,\
    \ check if there is value that has a treename \"Aspen\" whose number is greater\
    \ than 0. return \"Yup\" if it passes the check and \"Nope\" if it doesn't \n\
    \    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    given an array formatted\
    \ so that there is a String key and a number associated with that key, check if\
    \ there is value that has a key, \"Aspen\",  whose number is greater than 0. return\
    \ \"Yup\" if it passes the check and \"Nope\" if it doesn't \n    \"\"\"\n    "
  completion_from: "for tree in trees:\n        if tree[\"treename\"] == \"Aspen\"\
    \ and tree[\"number\"] > 0:\n            return \"Yup\"\n    return \"Nope\"\n"
  completion_to: "for tree in trees:\n        if tree[0] == \"Aspen\" and tree[1]\
    \ > 0:\n            return \"Yup\"\n    return \"Nope\"\n"
  diff: "--- \n+++ \n@@ -11,7 +11,6 @@\n is a String-treename key and a@@ -28,8 +27,8\
    \ @@\n that has a-treename-\"Aspen\"+key,+\"Aspen\", whose number is"
  attempt_id: 1
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student68
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    given an array formatted\
    \ so that there is a String key and a number associated with that key, check if\
    \ there is value that has a key, \"Aspen\",  whose number is greater than 0. return\
    \ \"Yup\" if it passes the check and \"Nope\" if it doesn't \n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    given a dictionary check\
    \ if there is a value that has a key, \"Aspen\". return \"Yup\" if it passes the\
    \ check and \"Nope\" if it doesn't \n    \"\"\"\n    "
  completion_from: "for tree in trees:\n        if tree[0] == \"Aspen\" and tree[1]\
    \ > 0:\n            return \"Yup\"\n    return \"Nope\"\n"
  completion_to: "for key, value in trees.items():\n        if value == \"Aspen\"\
    :\n            return \"Yup\"\n    return \"Nope\"\n"
  diff: "--- \n+++ \n@@ -2,39 +2,19 @@\n check_for_aspen(trees): \"\"\" given-an-array-formatted-so-that-there-is\
    \ a-String-key-and-a-number-associated-with-that-key,+dictionary check if there\
    \ is+a value that has a key,-\"Aspen\",-whose-number-is-greater-than-0.+\"Aspen\"\
    . return \"Yup\" if"
  attempt_id: 2
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id002
  username: student68
  prompt_from: "def check_for_aspen(trees):\n    \"\"\"\n    given a dictionary check\
    \ if there is a value that has a key, \"Aspen\". return \"Yup\" if it passes the\
    \ check and \"Nope\" if it doesn't \n    \"\"\"\n    "
  prompt_to: "def check_for_aspen(trees):\n    \"\"\"\n    given a dictionary check\
    \ if there is a key, \"Aspen\". return \"Yup\" if it passes the check and \"Nope\"\
    \ if it doesn't \n    \"\"\"\n    "
  completion_from: "for key, value in trees.items():\n        if value == \"Aspen\"\
    :\n            return \"Yup\"\n    return \"Nope\"\n"
  completion_to: "if \"Aspen\" in trees:\n        return \"Yup\"\n    else:\n    \
    \    return \"Nope\"\n"
  diff: "--- \n+++ \n@@ -8,10 +8,6 @@\n if there is-a-value-that-has a key, \"Aspen\"\
    ."
  attempt_id: 3
  total_attempts: 4
  state: success
  _edge_tags: null
student_start_node_tags: {}
