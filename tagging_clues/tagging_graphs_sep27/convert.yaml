!Graph
problem: convert
nodes:
- &id028 !Node
  id: 0
  stdout:
  - '[]

    '
  - '[''A'', ''B'']

    '
  - '[''BBB'', ''ZZZ'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id022 !Node
  id: 1
  stdout:
  - '[''A'', ''B'', ''C'', ''D'']

    '
  - '[''A'', ''-'', ''B'', ''-'', ''C'']

    '
  - '[''B'', ''B'', ''B'', ''-'', ''Z'', ''Z'', ''Z'', ''-'', ''A'', ''B'', ''C'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id020 !Node
  id: 2
  stdout:
  - 'ABCD

    '
  - 'A@B@C

    '
  - 'BBB@ZZZ@ABC

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id038 !Node
  id: 3
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'NameError: name ''letters'' is not defined'
  - 'NameError: name ''letters'' is not defined'
  - 'NameError: name ''letters'' is not defined'
  _node_tags: null
- &id035 !Node
  id: 4
  stdout:
  - 'abcd

    '
  - 'a`b`c

    '
  - 'bbb`zzz`abc

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id023 !Node
  id: 5
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'SyntaxError: invalid syntax'
  - 'SyntaxError: invalid syntax'
  - 'SyntaxError: invalid syntax'
  _node_tags: null
- &id043 !Node
  id: 6
  stdout:
  - '[''`'', ''a'', ''b'', ''c'']

    '
  - '[''`'', -1, ''a'', -1, ''b'']

    '
  - '[''a'', ''a'', ''a'', -1, ''y'', ''y'', ''y'', -1, ''`'', ''a'', ''b'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id025 !Node
  id: 7
  stdout:
  - '[]

    '
  - '[''a'', ''b'']

    '
  - '[''bbb'', ''zzz'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id019 !Node
  id: 8
  stdout:
  - '[''BCD'']

    '
  - '[''@B@C'']

    '
  - '[''BBB@ZZZ@BC'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id026 !Node
  id: 9
  stdout:
  - '[''A'', ''B'', ''C'', ''D'']

    '
  - '[''A'', ''B'', ''B'', ''C'', ''C'']

    '
  - '[''B'', ''B'', ''B'', ''Z'', ''Z'', ''Z'', ''Z'', ''A'', ''A'', ''B'', ''C'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id036 !Node
  id: 10
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'TypeError: ord() expected string of length 1, but int found'
  - 'TypeError: ord() expected string of length 1, but int found'
  - 'TypeError: ord() expected string of length 1, but int found'
  _node_tags: null
- &id002 !Node
  id: 11
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'SyntaxError: expected '':'''
  - 'SyntaxError: expected '':'''
  - 'SyntaxError: expected '':'''
  _node_tags: null
- &id027 !Node
  id: 12
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'SyntaxError: ''('' was never closed'
  - 'SyntaxError: ''('' was never closed'
  - 'SyntaxError: ''('' was never closed'
  _node_tags: null
- !Node
  id: 13
  stdout:
  - '[''A'', ''B'', ''C'']

    '
  - '[''A'', ''B'', ''C'']

    '
  - '[''B'', ''B'', ''B'', ''A'', ''B'', ''C'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id015 !Node
  id: 14
  stdout:
  - '[''ABCD'']

    '
  - '[''A,B,C'']

    '
  - '[''BBB,ZZZ,ABC'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id001 !Node
  id: 15
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'NameError: name ''alphabet'' is not defined'
  - 'NameError: name ''alphabet'' is not defined'
  - 'NameError: name ''alphabet'' is not defined'
  _node_tags: null
- &id037 !Node
  id: 16
  stdout:
  - '0

    '
  - '0

    '
  - '1

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id016 !Node
  id: 17
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'NameError: name ''groupby'' is not defined'
  - 'NameError: name ''groupby'' is not defined'
  - 'NameError: name ''groupby'' is not defined'
  _node_tags: null
- &id041 !Node
  id: 18
  stdout:
  - 'ABCD

    '
  - 'A][B][C

    '
  - 'BBB][ZZZ][ABC

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id003 !Node
  id: 19
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'IndentationError: expected an indented block after ''for'' statement on line
    8'
  - 'IndentationError: expected an indented block after ''for'' statement on line
    8'
  - 'IndentationError: expected an indented block after ''for'' statement on line
    8'
  _node_tags: null
- &id033 !Node
  id: 20
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'AttributeError: ''list'' object has no attribute ''split'''
  - 'AttributeError: ''list'' object has no attribute ''split'''
  - 'AttributeError: ''list'' object has no attribute ''split'''
  _node_tags: null
- &id017 !Node
  id: 21
  stdout:
  - '[''A'', ''B'', ''C'']

    '
  - '['','', ''A'', '','', ''B'']

    '
  - '[''A'', ''A'', ''A'', '','', ''Y'', ''Y'', ''Y'', '','', ''A'', ''B'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id012 !Node
  id: 22
  stdout:
  - 'ABCD

    '
  - 'ABC

    '
  - 'BBBZZZABC

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id032 !Node
  id: 23
  stdout:
  - '[''@'', ''A'', ''B'', ''C'']

    '
  - '[''@'', ''?'', ''A'', ''?'', ''B'']

    '
  - '[''A'', ''A'', ''A'', ''?'', ''Y'', ''Y'', ''Y'', ''?'', ''@'', ''A'', ''B'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id034 !Node
  id: 24
  stdout:
  - '[0, 1, 2, 3, '','']

    '
  - '[0, -1, 1, -1, 2, '','']

    '
  - '[1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2, '','']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id021 !Node
  id: 25
  stdout:
  - 'AABC

    '
  - 'A,A,B

    '
  - 'AAA,YYY,AAB

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id013 !Node
  id: 26
  stdout:
  - 'ABCD

    '
  - 'ABC

    '
  - 'B,B,B,Z,Z,Z,A,B,C

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id007 !Node
  id: 27
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'SyntaxError: unterminated string literal (detected at line 10)'
  - 'SyntaxError: unterminated string literal (detected at line 10)'
  - 'SyntaxError: unterminated string literal (detected at line 10)'
  _node_tags: null
- &id040 !Node
  id: 28
  stdout:
  - '[''A'', ''B'', ''C'', ''D'']

    '
  - '[''A'', '' '', ''B'', '' '', ''C'']

    '
  - '[''B'', ''B'', ''B'', '' '', ''Z'', ''Z'', ''Z'', '' '', ''A'', ''B'', ''C'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id006 !Node
  id: 29
  stdout:
  - '[''ABCD'']

    '
  - '[''A'', ''B'', ''C'']

    '
  - '[''BBB'', ''ZZZ'', ''ABC'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id018 !Node
  id: 30
  stdout:
  - 'ABC

    '
  - 'AAAB

    '
  - 'AAAAYYYAAB

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id010 !Node
  id: 31
  stdout:
  - 'ABCD

    '
  - 'A,B,C

    '
  - 'BBB,ZZZ,ABC

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id029 !Node
  id: 32
  stdout:
  - 'ABCD

    '
  - 'A B C

    '
  - 'BBB ZZZ ABC

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id009 !Node
  id: 33
  stdout:
  - '[''A'', ''B'', ''C'', ''D'']

    '
  - '[''A'', ''B'', ''C'']

    '
  - '[''B'', ''B'', ''B'', ''Z'', ''Z'', ''Z'', ''A'', ''B'', ''C'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id030 !Node
  id: 34
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'IndexError: list index out of range'
  - 'IndexError: list index out of range'
  - 'IndexError: list index out of range'
  _node_tags: null
- &id042 !Node
  id: 35
  stdout:
  - '[]

    '
  - '[[''a''], [''b'']]

    '
  - '[[''b'', ''b'', ''b''], [''z'', ''z'', ''z'']]

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id011 !Node
  id: 36
  stdout:
  - 'ABCD

    '
  - 'ABC

    '
  - 'BZABC

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id005 !Node
  id: 37
  stdout:
  - '[''abcd'']

    '
  - '[''a'', ''b'', ''c'']

    '
  - '[''bbb'', ''zzz'', ''abc'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id039 !Node
  id: 38
  stdout:
  - '[''A'', ''B'', ''C'', ''D'']

    '
  - '[''A'', '','', ''B'', '','', ''C'']

    '
  - '[''B'', ''B'', ''B'', '','', ''Z'', ''Z'', ''Z'', '','', ''A'', ''B'', ''C'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id008 !Node
  id: 39
  stdout:
  - '[''A'', ''B'', ''C'', ''D'']

    '
  - '[''A'', ''@'', ''B'', ''@'', ''C'']

    '
  - '[''B'', ''B'', ''B'', ''@'', ''Z'', ''Z'', ''Z'', ''@'', ''A'', ''B'', ''C'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id004 !Node
  id: 40
  stdout:
  - 'None

    '
  - 'None

    '
  - 'None

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id014 !Node
  id: 41
  stdout:
  - 'A,B,C,D

    '
  - 'A,,,B,,,C

    '
  - 'B,B,B,,,Z,Z,Z,,,A,B,C

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id024 !Node
  id: 42
  stdout:
  - '[''A'', ''B'', ''C'', ''D'']

    '
  - '[''A'', '''', ''B'', '''', ''C'']

    '
  - '[''B'', ''B'', ''B'', '''', ''Z'', ''Z'', ''Z'', '''', ''A'', ''B'', ''C'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id031 !Node
  id: 43
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'IndentationError: expected an indented block after ''if'' statement on line 14'
  - 'IndentationError: expected an indented block after ''if'' statement on line 14'
  - 'IndentationError: expected an indented block after ''if'' statement on line 14'
  _node_tags: null
edges:
- !Edge
  node_from: *id001
  node_to: *id002
  username: student0
  prompt_from: "def convert(lst):\n    \"\"\"\n    takes a list of numbers and returns\
    \ a list with the corresponding indexes of the alphabet, where negative numbers\
    \ as indexes means to take in the next index as a new string\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    takes a list of numbers, have another\
    \ list with the letters in the alphabet, create an answer list, iterate through\
    \ the input list, append the letter with the corresponding index of the list with\
    \ the letters in the alphabet to the answer list, create a new string when encounter\
    \ a negative number, and return the answer list\n    \"\"\"\n    "
  completion_from: "new_lst = []\n    for i in lst:\n        if i < 0:\n         \
    \   new_lst.append(i)\n        else:\n            new_lst.append(alphabet[i])\n\
    \    return new_lst\n"
  completion_to: "alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\
    \    answer = []\n    for i in lst:\n        if i >= 0"
  diff: "--- \n+++ \n@@ -5,32 +5,57 @@\n a list of-numbers-and-returns-a+numbers,+have+another\
    \ list with the+letters+in+the+alphabet,+create+an+answer+list,+iterate+through+the+input+list,+append+the+letter+with+the\
    \ corresponding-indexes+index of the-alphabet,-where-negative-numbers-as-indexes-means-to-take+list+with+the+letters\
    \ in the-next-index-as+alphabet+to+the+answer+list,+create a new string+when+encounter+a+negative+number,+and+return+the+answer+list\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 9
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id003
  username: student0
  prompt_from: "def convert(lst):\n    \"\"\"\n    takes a list of numbers, have another\
    \ list with the letters in the alphabet, create an answer list, iterate through\
    \ the input list, append the letter with the corresponding index of the list with\
    \ the letters in the alphabet to the answer list, create a new string when encounter\
    \ a negative number, and return the answer list\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    takes a list of numbers, have another\
    \ list with the letters in the alphabet, create an answer list. When iterating\
    \ through the input list, create a temp string variable and assign the letter\
    \ with the corresponding index of the list with the letters in the alphabet to\
    \ the temp variable, append the temp variable into the answer list, and start\
    \ a new temp string when encounter a negative number. Return the answer list.\n\
    \    \"\"\"\n    "
  completion_from: "alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\
    \    answer = []\n    for i in lst:\n        if i >= 0"
  completion_to: "alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\
    \    answer = []\n    temp = ''\n    for num in lst:\n"
  diff: "--- \n+++ \n@@ -18,13 +18,20 @@\n create an answer-list,-iterate+list.+When+iterating\
    \ through the input list,-append+create+a+temp+string+variable+and+assign the\
    \ letter with@@ -42,20 +49,29 @@\n alphabet to the+temp+variable,+append+the+temp+variable+into+the\
    \ answer list,-create+and+start a new+temp string when encounter a negative-number,-and-return+number.+Return\
    \ the answer-list+list. \"\"\""
  attempt_id: 2
  total_attempts: 9
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id003
  node_to: *id003
  username: student0
  prompt_from: "def convert(lst):\n    \"\"\"\n    takes a list of numbers, have another\
    \ list with the letters in the alphabet, create an answer list. When iterating\
    \ through the input list, create a temp string variable and assign the letter\
    \ with the corresponding index of the list with the letters in the alphabet to\
    \ the temp variable, append the temp variable into the answer list, and start\
    \ a new temp string when encounter a negative number. Return the answer list.\n\
    \    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another\
    \ list with the letters in the alphabet, and create an answer list. When iterating\
    \ through the input list, create a temp string variable, have it add the letter\
    \ with the corresponding index of the list with the letters in the alphabet to\
    \ the temp variable. Append the temp variable into the answer list. If encounter\
    \ a negative number,  start a new temp string. Return the answer list.\n    \"\
    \"\"\n    "
  completion_from: "alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\
    \    answer = []\n    temp = ''\n    for num in lst:\n"
  completion_to: "alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\
    \    answer = []\n    temp = ''\n    for i in lst:\n"
  diff: "--- \n+++ \n@@ -5,8 +5,8 @@\n a list of-numbers,-have+numbers.+Have another\
    \ list with@@ -15,6 +15,7 @@\n in the alphabet,+and create an answer@@ -29,9 +30,10\
    \ @@\n a temp string-variable-and-assign+variable,+have+it+add the letter with@@\
    \ -50,26 +52,25 @@\n to the temp-variable,-append+variable.+Append the temp variable\
    \ into the answer-list,-and+list.+If+encounter+a+negative+number, start a new\
    \ temp-string-when-encounter-a-negative-number.+string. Return the answer"
  attempt_id: 3
  total_attempts: 9
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id003
  node_to: *id004
  username: student0
  prompt_from: "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another\
    \ list with the letters in the alphabet, and create an answer list. When iterating\
    \ through the input list, create a temp string variable, have it add the letter\
    \ with the corresponding index of the list with the letters in the alphabet to\
    \ the temp variable. Append the temp variable into the answer list. If encounter\
    \ a negative number,  start a new temp string. Return the answer list.\n    \"\
    \"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another\
    \ list with the letters in the alphabet, and create an answer list. When iterating\
    \ through the input list, create a temp string variable. While the number is not\
    \ negative, add the letter with the corresponding index of the list with the letters\
    \ in the alphabet to the temp variable. Append the temp variable into the answer\
    \ list. Return the answer list.\n    \"\"\"\n    "
  completion_from: "alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\
    \    answer = []\n    temp = ''\n    for i in lst:\n"
  completion_to: "answer = []\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z']\n    for num in lst:\n        temp = ''\n"
  diff: "--- \n+++ \n@@ -30,9 +30,13 @@\n a temp string-variable,-have-it+variable.+While+the+number+is+not+negative,\
    \ add the letter@@ -61,16 +65,6 @@\n the answer list.-If-encounter-a-negative-number,-start-a-new-temp-string.\
    \ Return the answer"
  attempt_id: 4
  total_attempts: 9
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id004
  node_to: *id004
  username: student0
  prompt_from: "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another\
    \ list with the letters in the alphabet, and create an answer list. When iterating\
    \ through the input list, create a temp string variable. While the number is not\
    \ negative, add the letter with the corresponding index of the list with the letters\
    \ in the alphabet to the temp variable. Append the temp variable into the answer\
    \ list. Return the answer list.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another\
    \ list with the letters in the alphabet, and create an answer list. When iterating\
    \ through the input list, create a temp string variable. While the iterating number\
    \ is not negative, add the letter with the corresponding index of the list with\
    \ the letters in the alphabet to the temp variable. Append the temp variable into\
    \ the answer list. Return the answer list.\n    \"\"\"\n    "
  completion_from: "answer = []\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z']\n    for num in lst:\n        temp = ''\n"
  completion_to: "alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\
    \    answer = []\n    for num in lst:\n        temp = ''\n"
  diff: "--- \n+++ \n@@ -33,6 +33,7 @@\n variable. While the+iterating number is not"
  attempt_id: 5
  total_attempts: 9
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id004
  node_to: *id004
  username: student0
  prompt_from: "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another\
    \ list with the letters in the alphabet, and create an answer list. When iterating\
    \ through the input list, create a temp string variable. While the iterating number\
    \ is not negative, add the letter with the corresponding index of the list with\
    \ the letters in the alphabet to the temp variable. Append the temp variable into\
    \ the answer list. Return the answer list.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another\
    \ list with the letters in the alphabet, and create an answer list. When iterating\
    \ through the input list, create a temp string variable. While num is not negative,\
    \ add the letter with the corresponding index of the list with the letters in\
    \ the alphabet to the temp variable. Append the temp variable into the answer\
    \ list. Return the answer list.\n    \"\"\"\n    "
  completion_from: "alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\
    \    answer = []\n    for num in lst:\n        temp = ''\n"
  completion_to: "answer = []\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z']\n    for num in lst:\n        temp = ''\n"
  diff: "--- \n+++ \n@@ -32,9 +32,7 @@\n string variable. While-the-iterating-number+num\
    \ is not negative,"
  attempt_id: 6
  total_attempts: 9
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id004
  node_to: *id005
  username: student0
  prompt_from: "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Have another\
    \ list with the letters in the alphabet, and create an answer list. When iterating\
    \ through the input list, create a temp string variable. While num is not negative,\
    \ add the letter with the corresponding index of the list with the letters in\
    \ the alphabet to the temp variable. Append the temp variable into the answer\
    \ list. Return the answer list.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Create a\
    \ ABC list with the letters in the alphabet and create an answer string. Iterate\
    \ through the input list, if there is \"-1\" then add ' ' to the answer string,\
    \ or otherwise, add the letter with the corresponding index of the answer string.\
    \ Split the answer string at ' '. return the answer string.\n    \"\"\"\n    "
  completion_from: "answer = []\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z']\n    for num in lst:\n        temp = ''\n"
  completion_to: "abc = [chr(i) for i in range(97, 123)]\n    answer = ''\n    for\
    \ i in lst:\n        if i == -1:\n            answer += ' '\n        else:\n \
    \           answer += abc[i]\n    return answer.split(' ')\n\n"
  diff: "--- \n+++ \n@@ -6,36 +6,40 @@\n list of numbers.-Have-another+Create+a+ABC\
    \ list with the letters in the-alphabet,+alphabet and create an answer-list.-When-iterating+string.+Iterate\
    \ through the input list,-create-a-temp-string-variable.-While-num+if+there is-not-negative,+\"\
    -1\"+then+add+'+'+to+the+answer+string,+or+otherwise, add the letter@@ -45,27\
    \ +49,17 @@\n index of the-list-with-the-letters-in-the-alphabet-to-the-temp-variable.-Append-the-temp-variable-into+answer+string.+Split\
    \ the answer-list.-Return+string+at+'+'.+return the answer-list.+string. \"\"\""
  attempt_id: 7
  total_attempts: 9
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id005
  node_to: *id006
  username: student0
  prompt_from: "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Create\
    \ a ABC list with the letters in the alphabet and create an answer string. Iterate\
    \ through the input list, if there is \"-1\" then add ' ' to the answer string,\
    \ or otherwise, add the letter with the corresponding index of the answer string.\
    \ Split the answer string at ' '. return the answer string.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    takes a list of numbers. Create a\
    \ ABC list with the capital letters in the alphabet and create an answer string.\
    \ Iterate through the input list, if there is \"-1\" then add ' ' to the answer\
    \ string, or otherwise, add the letter with the corresponding index of the answer\
    \ string. Split the answer string at ' '. return the answer string.\n    \"\"\"\
    \n    "
  completion_from: "abc = [chr(i) for i in range(97, 123)]\n    answer = ''\n    for\
    \ i in lst:\n        if i == -1:\n            answer += ' '\n        else:\n \
    \           answer += abc[i]\n    return answer.split(' ')\n\n"
  completion_to: "abc = [chr(i) for i in range(65, 91)]\n    answer = ''\n    for\
    \ i in lst:\n        if i == -1:\n            answer += ' '\n        else:\n \
    \           answer += abc[i]\n    return answer.split(' ')\n\n"
  diff: "--- \n+++ \n@@ -12,6 +12,7 @@\n list with the+capital letters in the"
  attempt_id: 8
  total_attempts: 9
  state: success
  _edge_tags: null
- !Edge
  node_from: *id005
  node_to: *id007
  username: student10
  prompt_from: "def convert(lst):\n    \"\"\"\n    User inputs a list of integers\
    \ from 0-25. Function converts integers into letters by matching the number with\
    \ the corresponding letter of the alphabet. Function would return a list of letters.\
    \ When the user inputs -1, function should end current string in list and start\
    \ a new string. \n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    User inputs a list of numbers ranging\
    \ from -1 to 25, and function outputs a list of the corresponding letters and\
    \ line breaks. Function converts the integers from 0-25 into letters by matching\
    \ the number with the corresponding letter of the alphabet. When the user inputs\
    \ -1, function should end current string in list and start a new string. \n  \
    \  \"\"\"\n    "
  completion_from: "new_lst = []\n    new_str = \"\"\n    for i in lst:\n        if\
    \ i == -1:\n            new_lst.append(new_str)\n            new_str = \"\"\n\
    \        else:\n            new_str += chr(i + 97)\n    new_lst.append(new_str)\n\
    \    return new_lst\n\nprint(convert([1,2,3,"
  completion_to: "# Create empty list to store the converted numbers\n    converted_list\
    \ = []\n    # Create empty string to store the converted numbers\n    converted_string\
    \ = \"\"\n    # Create a list of the alphabet\n    alphabet = [\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \""
  diff: "--- \n+++ \n@@ -6,12 +6,30 @@\n a list of+numbers+ranging+from+-1+to+25,+and+function+outputs+a+list+of+the+corresponding+letters+and+line+breaks.+Function+converts+the\
    \ integers from-0-25.-Function-converts-integers+0-25 into letters by@@ -25,13\
    \ +43,6 @@\n of the alphabet.-Function-would-return-a-list-of-letters. When the\
    \ user"
  attempt_id: 1
  total_attempts: 3
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id007
  node_to: *id004
  username: student10
  prompt_from: "def convert(lst):\n    \"\"\"\n    User inputs a list of numbers ranging\
    \ from -1 to 25, and function outputs a list of the corresponding letters and\
    \ line breaks. Function converts the integers from 0-25 into letters by matching\
    \ the number with the corresponding letter of the alphabet. When the user inputs\
    \ -1, function should end current string in list and start a new string. \n  \
    \  \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    User inputs a list of numbers ranging\
    \ from -1 to 25, and function outputs a list of the corresponding letters and\
    \ line breaks. Function converts the integers from 0-25 into letters by matching\
    \ the number with the corresponding letter of the alphabet. When the user inputs\
    \ -1, function should end current string in list and start a new string. Function\
    \ should return a list of the letters.\n    \"\"\"\n    "
  completion_from: "# Create empty list to store the converted numbers\n    converted_list\
    \ = []\n    # Create empty string to store the converted numbers\n    converted_string\
    \ = \"\"\n    # Create a list of the alphabet\n    alphabet = [\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \""
  completion_to: "# create a list of the alphabet\n    alphabet = ['a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    # create a list to store the letters"
  diff: "--- \n+++ \n@@ -60,4 +60,12 @@\n a new string.+Function+should+return+a+list+of+the+letters.\
    \ \"\"\""
  attempt_id: 2
  total_attempts: 3
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id008
  node_to: *id009
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A. ignoring any negative numbers\
    \ in the list.\n    \"\"\"\n    "
  completion_from: 'return [chr(x+65) for x in lst]

    '
  completion_to: 'return [chr(i+65) for i in lst if i >= 0]


    print(convert([-1,1,1,3,2,1,2,3,1]))

    '
  diff: "--- \n+++ \n@@ -15,5 +15,12 @@\n at 0 as-A+A.+ignoring+any+negative+numbers+in+the+list.\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id009
  node_to: *id010
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A. ignoring any negative numbers\
    \ in the list.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning the negative numbers into\
    \ commas, and then turning the output into one string.\n    \"\"\"\n    "
  completion_from: 'return [chr(i+65) for i in lst if i >= 0]


    print(convert([-1,1,1,3,2,1,2,3,1]))

    '
  completion_to: 'return ''''.join(chr(ord(''A'') + abs(x)) if x >= 0 else '','' for
    x in lst)

    '
  diff: "--- \n+++ \n@@ -15,12 +15,19 @@\n at 0 as-A.-ignoring-any+A,+turning+the\
    \ negative numbers-in+into+commas,+and+then+turning the-list.+output+into+one+string.\
    \ \"\"\""
  attempt_id: 2
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id010
  node_to: *id011
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning the negative numbers into\
    \ commas, and then turning the output into one string.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list. Removing the commas in the answer when the letters are the same or\
    \ in alphabetical order.  \n    \"\"\"\n    "
  completion_from: 'return ''''.join(chr(ord(''A'') + abs(x)) if x >= 0 else '',''
    for x in lst)

    '
  completion_to: "lst = [x for x in lst if x >= 0]\n    lst = [chr(x+65) for x in\
    \ lst]\n    lst = [x for i, x in enumerate(lst) if i == 0 or x != lst[i-1]]\n\
    \    return ''.join(lst)\n\nprint(convert([-1, -1, -1, -1, -1, -"
  diff: "--- \n+++ \n@@ -15,19 +15,28 @@\n at 0 as-A,-turning-the+A+ignoring+any negative\
    \ numbers-into-commas,-and-then-turning+in the-output-into-one-string.+list.+Removing+the+commas+in+the+answer+when+the+letters+are+the+same+or+in+alphabetical+order.\
    \ \"\"\""
  attempt_id: 3
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id011
  node_to: *id012
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list. Removing the commas in the answer when the letters are the same or\
    \ in alphabetical order.  \n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list. Removing the commas in the output when the letters are the same or\
    \ in alphabetical order.  \n    \"\"\"\n    "
  completion_from: "lst = [x for x in lst if x >= 0]\n    lst = [chr(x+65) for x in\
    \ lst]\n    lst = [x for i, x in enumerate(lst) if i == 0 or x != lst[i-1]]\n\
    \    return ''.join(lst)\n\nprint(convert([-1, -1, -1, -1, -1, -"
  completion_to: "result = \"\"\n    for i in lst:\n        if i >= 0:\n         \
    \   result += chr(i + 65)\n    return result\n\nprint(convert([-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1"
  diff: "--- \n+++ \n@@ -28,7 +28,7 @@\n commas in the-answer+output when the letters"
  attempt_id: 4
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id012
  node_to: *id009
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list. Removing the commas in the output when the letters are the same or\
    \ in alphabetical order.  \n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list.  \n    \"\"\"\n    "
  completion_from: "result = \"\"\n    for i in lst:\n        if i >= 0:\n       \
    \     result += chr(i + 65)\n    return result\n\nprint(convert([-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1"
  completion_to: 'return [chr(i+65) for i in lst if i>=0]


    print(convert([-1,1,2,3,4,5]))'
  diff: "--- \n+++ \n@@ -23,20 +23,4 @@\n in the list.-Removing-the-commas-in-the-output-when-the-letters-are-the-same-or-in-alphabetical-order.\
    \ \"\"\""
  attempt_id: 5
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id009
  node_to: *id013
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list.  \n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list. Then take the list of converted letters, removing any commas between\
    \ letters in the last when the letters are in alphabetical order, or when they\
    \ are the same letters.\n    \"\"\"\n    "
  completion_from: 'return [chr(i+65) for i in lst if i>=0]


    print(convert([-1,1,2,3,4,5]))'
  completion_to: "new_lst = []\n    for i in lst:\n        if i >= 0:\n          \
    \  new_lst.append(chr(i + 65))\n    if new_lst == sorted(new_lst) or len(set(new_lst))\
    \ == 1:\n        return ''.join(new_lst)\n    else:\n        return ','.join(new_lst)\n\
    \nprint(con"
  diff: "--- \n+++ \n@@ -23,4 +23,33 @@\n in the list.+Then+take+the+list+of+converted+letters,+removing+any+commas+between+letters+in+the+last+when+the+letters+are+in+alphabetical+order,+or+when+they+are+the+same+letters.\
    \ \"\"\""
  attempt_id: 6
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id013
  node_to: *id009
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list. Then take the list of converted letters, removing any commas between\
    \ letters in the last when the letters are in alphabetical order, or when they\
    \ are the same letters.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list.\n    \"\"\"\n    "
  completion_from: "new_lst = []\n    for i in lst:\n        if i >= 0:\n        \
    \    new_lst.append(chr(i + 65))\n    if new_lst == sorted(new_lst) or len(set(new_lst))\
    \ == 1:\n        return ''.join(new_lst)\n    else:\n        return ','.join(new_lst)\n\
    \nprint(con"
  completion_to: 'return [chr(i + 65) for i in lst if i >= 0]


    print(convert([-1, -2, -3, -4, 1, 2, 3, 4]))

    print(convert([25, 1, 27, 30, 2, 5, 29, 28]))

    print(convert([-1, -2, -3, -4, -5, -6, -7, -8'
  diff: "--- \n+++ \n@@ -23,33 +23,4 @@\n in the list.-Then-take-the-list-of-converted-letters,-removing-any-commas-between-letters-in-the-last-when-the-letters-are-in-alphabetical-order,-or-when-they-are-the-same-letters.\
    \ \"\"\""
  attempt_id: 7
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id009
  node_to: *id009
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list.\n    \"\"\"\n    "
  completion_from: 'return [chr(i + 65) for i in lst if i >= 0]


    print(convert([-1, -2, -3, -4, 1, 2, 3, 4]))

    print(convert([25, 1, 27, 30, 2, 5, 29, 28]))

    print(convert([-1, -2, -3, -4, -5, -6, -7, -8'
  completion_to: 'return [chr(i+65) for i in lst if i>=0]


    print(convert([-1,1,2,3,4,5]))

    '
  diff: ''
  attempt_id: 8
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id009
  node_to: *id012
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list. Removing all commas in the list of outputs\n    \"\"\"\n    "
  completion_from: 'return [chr(i+65) for i in lst if i>=0]


    print(convert([-1,1,2,3,4,5]))

    '
  completion_to: "new_lst = []\n    for i in lst:\n        if i >= 0:\n          \
    \  new_lst.append(chr(i+65))\n    return ''.join(new_lst)\n"
  diff: "--- \n+++ \n@@ -23,4 +23,12 @@\n in the list.+Removing+all+commas+in+the+list+of+outputs\
    \ \"\"\""
  attempt_id: 9
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id012
  node_to: *id014
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A ignoring any negative numbers in\
    \ the list. Removing all commas in the list of outputs\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A turning all negative numbers into\
    \ commas.\n    \"\"\"\n    "
  completion_from: "new_lst = []\n    for i in lst:\n        if i >= 0:\n        \
    \    new_lst.append(chr(i+65))\n    return ''.join(new_lst)\n"
  completion_to: 'return '',''.join(map(lambda x: chr(x + 65) if x >= 0 else '','',
    lst))

    '
  diff: "--- \n+++ \n@@ -16,19 +16,10 @@\n 0 as A-ignoring-any+turning+all negative\
    \ numbers-in-the-list.-Removing-all-commas-in-the-list-of-outputs+into+commas.\
    \ \"\"\""
  attempt_id: 10
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id014
  node_to: *id015
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A turning all negative numbers into\
    \ commas.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning the negative numbers into\
    \ commas, and then turning the output into one string in a list.\n    \"\"\"\n\
    \    "
  completion_from: 'return '',''.join(map(lambda x: chr(x + 65) if x >= 0 else '','',
    lst))

    '
  completion_to: 'return [''''.join([chr(i + 65) if i >= 0 else '','' for i in lst])]

    '
  diff: "--- \n+++ \n@@ -15,11 +15,22 @@\n at 0 as-A+A, turning-all+the negative numbers\
    \ into-commas.+commas,+and+then+turning+the+output+into+one+string+in+a+list.\
    \ \"\"\""
  attempt_id: 11
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id015
  node_to: *id016
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning the negative numbers into\
    \ commas, and then turning the output into one string in a list.\n    \"\"\"\n\
    \    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning the negative numbers into\
    \ commas, and then group the letters in alphabetical order or the same into one\
    \ string in a list.\n    \"\"\"\n    "
  completion_from: 'return [''''.join([chr(i + 65) if i >= 0 else '','' for i in lst])]

    '
  completion_to: "lst = [chr(x+65) if x >= 0 else ',' for x in lst]\n    lst = [''.join(g)\
    \ for k, g in groupby(lst)]\n    return lst\n"
  diff: "--- \n+++ \n@@ -24,9 +24,15 @@\n commas, and then-turning+group the-output+letters+in+alphabetical+order+or+the+same\
    \ into one string"
  attempt_id: 12
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id016
  node_to: *id017
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning the negative numbers into\
    \ commas, and then group the letters in alphabetical order or the same into one\
    \ string in a list.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning the negative numbers into\
    \ commas separating the letters. \n    \"\"\"\n    "
  completion_from: "lst = [chr(x+65) if x >= 0 else ',' for x in lst]\n    lst = [''.join(g)\
    \ for k, g in groupby(lst)]\n    return lst\n"
  completion_to: "res = []\n    for i in lst:\n        if i > 0:\n            res.append(chr(i\
    \ + 64))\n        elif i < 0:\n            res.append(\",\")\n    return res\n"
  diff: "--- \n+++ \n@@ -21,22 +21,8 @@\n negative numbers into-commas,-and-then-group+commas+separating\
    \ the-letters-in-alphabetical-order-or-the-same-into-one-string-in-a-list.+letters.\
    \ \"\"\""
  attempt_id: 13
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id017
  node_to: *id018
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning the negative numbers into\
    \ commas separating the letters. \n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning the negative numbers into\
    \ commas separating the letters. \n    \"\"\"\n    "
  completion_from: "res = []\n    for i in lst:\n        if i > 0:\n            res.append(chr(i\
    \ + 64))\n        elif i < 0:\n            res.append(\",\")\n    return res\n"
  completion_to: "lst = [i for i in lst if i != 0]\n    lst = [i if i > 0 else -i\
    \ for i in lst]\n    lst = [chr(i + 64) for i in lst]\n    lst = [i if i != '@'\
    \ else ',' for i in lst]\n    return ''.join(lst)\n"
  diff: ''
  attempt_id: 14
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id018
  node_to: *id008
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning the negative numbers into\
    \ commas separating the letters. \n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A.\n    \"\"\"\n    "
  completion_from: "lst = [i for i in lst if i != 0]\n    lst = [i if i > 0 else -i\
    \ for i in lst]\n    lst = [chr(i + 64) for i in lst]\n    lst = [i if i != '@'\
    \ else ',' for i in lst]\n    return ''.join(lst)\n"
  completion_to: 'return [chr(i+65) for i in lst]

    '
  diff: "--- \n+++ \n@@ -15,14 +15,5 @@\n at 0 as-A,-turning-the-negative-numbers-into-commas-separating-the-letters.+A.\
    \ \"\"\""
  attempt_id: 15
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id008
  node_to: *id019
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A. grouping the output as a single\
    \ string, then use the negative numbers as points of seperation.\n    \"\"\"\n\
    \    "
  completion_from: 'return [chr(i+65) for i in lst]

    '
  completion_to: "lst = [i for i in lst if i != 0]\n    lst = [chr(i + 65) for i in\
    \ lst]\n    lst = \"\".join(lst)\n    lst = lst.split(\"-\")\n    lst = [i for\
    \ i in lst if i != \"\"]\n    return lst\n"
  diff: "--- \n+++ \n@@ -16,4 +16,20 @@\n 0 as A.+grouping+the+output+as+a+single+string,+then+use+the+negative+numbers+as+points+of+seperation.\
    \ \"\"\""
  attempt_id: 16
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id019
  node_to: *id004
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A. grouping the output as a single\
    \ string, then use the negative numbers as points of seperation.\n    \"\"\"\n\
    \    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A. grouping the output as a single\
    \ string, then use the negative numbers as points of seperation.\n    \"\"\"\n\
    \    "
  completion_from: "lst = [i for i in lst if i != 0]\n    lst = [chr(i + 65) for i\
    \ in lst]\n    lst = \"\".join(lst)\n    lst = lst.split(\"-\")\n    lst = [i\
    \ for i in lst if i != \"\"]\n    return lst\n"
  completion_to: "#print(lst)\n    lst = [x+1 for x in lst]\n    #print(lst)\n   \
    \ lst = [x-1 for x in lst]\n    #print(lst)\n    lst = [chr(x+65) for x in lst]\n\
    \    #print(lst)\n    lst = ''.join(lst)\n    #print(lst)"
  diff: ''
  attempt_id: 17
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id004
  node_to: *id020
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A. grouping the output as a single\
    \ string, then use the negative numbers as points of seperation.\n    \"\"\"\n\
    \    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A. grouping the output as a single\
    \ string, then use the negative numbers as commas and points of separation between\
    \ strings.\n    \"\"\"\n    "
  completion_from: "#print(lst)\n    lst = [x+1 for x in lst]\n    #print(lst)\n \
    \   lst = [x-1 for x in lst]\n    #print(lst)\n    lst = [chr(x+65) for x in lst]\n\
    \    #print(lst)\n    lst = ''.join(lst)\n    #print(lst)"
  completion_to: 'return ''''.join([chr(i+65) for i in lst])

    '
  diff: "--- \n+++ \n@@ -29,7 +29,11 @@\n negative numbers as+commas+and points of-seperation.+separation+between+strings.\
    \ \"\"\""
  attempt_id: 18
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id020
  node_to: *id020
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A. grouping the output as a single\
    \ string, then use the negative numbers as commas and points of separation between\
    \ strings.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A. grouping the output as a single\
    \ string, then use the negative numbers as commas and points of separation between\
    \ strings.\n    \"\"\"\n    "
  completion_from: 'return ''''.join([chr(i+65) for i in lst])

    '
  completion_to: 'return ''''.join(chr(ord(''A'') + i) for i in lst)

    '
  diff: ''
  attempt_id: 19
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id020
  node_to: *id021
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A. grouping the output as a single\
    \ string, then use the negative numbers as commas and points of separation between\
    \ strings.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A. grouping the output as a single\
    \ string, then turn the negative numbers as commas and points of separation between\
    \ the strings.\n    \"\"\"\n    "
  completion_from: 'return ''''.join(chr(ord(''A'') + i) for i in lst)

    '
  completion_to: "output = ''\n    for i in lst:\n        if i < 0:\n            output\
    \ += ','\n        elif i == 0:\n            output += 'A'\n        else:\n   \
    \         output += chr(i+64)\n    return output\n"
  diff: "--- \n+++ \n@@ -24,7 +24,7 @@\n single string, then-use+turn the negative\
    \ numbers@@ -35,5 +35,6 @@\n of separation between+the strings. \"\"\""
  attempt_id: 20
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id021
  node_to: *id020
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A. grouping the output as a single\
    \ string, then turn the negative numbers as commas and points of separation between\
    \ the strings.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, 1 as B. grouping the output as\
    \ a single string, then turn the negative numbers as commas and points of separation\
    \ between the strings.\n    \"\"\"\n    "
  completion_from: "output = ''\n    for i in lst:\n        if i < 0:\n          \
    \  output += ','\n        elif i == 0:\n            output += 'A'\n        else:\n\
    \            output += chr(i+64)\n    return output\n"
  completion_to: 'return ''''.join(chr(ord(''A'') + i) for i in lst).replace(''-'',
    '','')


    '
  diff: "--- \n+++ \n@@ -15,7 +15,10 @@\n at 0 as-A.+A,+1+as+B. grouping the output"
  attempt_id: 21
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id020
  node_to: *id010
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, 1 as B. grouping the output as\
    \ a single string, then turn the negative numbers as commas and points of separation\
    \ between the strings.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning negative numbers into\
    \ commas.\n    \"\"\"\n    "
  completion_from: 'return ''''.join(chr(ord(''A'') + i) for i in lst).replace(''-'',
    '','')


    '
  completion_to: 'return ''''.join(map(lambda x: chr(x+65) if x >= 0 else '','', lst))

    '
  diff: "--- \n+++ \n@@ -16,28 +16,9 @@\n 0 as A,-1-as-B.-grouping-the-output-as-a-single-string,-then-turn-the+turning\
    \ negative numbers-as-commas-and-points-of-separation-between-the-strings.+into+commas.\
    \ \"\"\""
  attempt_id: 22
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id010
  node_to: *id010
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning negative numbers into\
    \ commas.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning negative numbers into\
    \ commas.\n    \"\"\"\n    "
  completion_from: 'return ''''.join(map(lambda x: chr(x+65) if x >= 0 else '','',
    lst))

    '
  completion_to: 'return ''''.join([chr(x + 65) if x >= 0 else '','' for x in lst])

    '
  diff: ''
  attempt_id: 23
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id010
  node_to: *id022
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning negative numbers into\
    \ commas.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, using the -1 points to separate\
    \ the string.\n    \"\"\"\n    "
  completion_from: 'return ''''.join([chr(x + 65) if x >= 0 else '','' for x in lst])

    '
  completion_to: "new_lst = []\n    for i in lst:\n        if i == -1:\n         \
    \   new_lst.append('-')\n        else:\n            new_lst.append(chr(i+65))\n\
    \    return new_lst\n"
  diff: "--- \n+++ \n@@ -16,9 +16,12 @@\n 0 as A,-turning-negative-numbers-into-commas.+using+the+-1+points+to+separate+the+string.\
    \ \"\"\""
  attempt_id: 24
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id022
  node_to: *id020
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, using the -1 points to separate\
    \ the string.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, grouping the answer as one string,\
    \ and then using the -1 as points to separate the string.\n    \"\"\"\n    "
  completion_from: "new_lst = []\n    for i in lst:\n        if i == -1:\n       \
    \     new_lst.append('-')\n        else:\n            new_lst.append(chr(i+65))\n\
    \    return new_lst\n"
  completion_to: "lst = [chr(i + 65) for i in lst]\n    lst = ''.join(lst)\n    lst\
    \ = lst.replace('-1', '-1 ')\n    return lst\n"
  diff: "--- \n+++ \n@@ -16,9 +16,18 @@\n 0 as A,+grouping+the+answer+as+one+string,+and+then\
    \ using the -1+as points to separate"
  attempt_id: 25
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id020
  node_to: *id023
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, grouping the answer as one string,\
    \ and then using the -1 as points to separate the string.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    \n\ninput: [1, 1, 1, -1, 25, 25,\
    \ 25, -1, 0, 1, 2]\noutput: ['BBB', 'ZZZ', 'ABC']\n    \"\"\"\n    "
  completion_from: "lst = [chr(i + 65) for i in lst]\n    lst = ''.join(lst)\n   \
    \ lst = lst.replace('-1', '-1 ')\n    return lst\n"
  completion_to: "result = []\n    for i in lst:\n        if i == -1:\n          \
    \  result.append(i)\n    for i in range(len(result)):\n        lst.remove(-1)\n\
    \    for i in range(0, len(lst), 3):\n        result.append(lst[i:i+3])\n    for\
    \ i in range(len(result)):\n        if result[i] =="
  diff: "--- \n+++ \n@@ -1,36 +1,20 @@\n def convert(lst): \"\"\"-change-numbers-to-letters-matching-the-order-of-the-alphabet-starting-at-0-as-A,-grouping-the-answer-as-one-string,-and-then-using-the--1-as-points-to-separate-the-string.+input:+[1,+1,+1,+-1,+25,+25,+25,+-1,+0,+1,+2]+output:+['BBB',+'ZZZ',+'ABC']\
    \ \"\"\""
  attempt_id: 26
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id023
  node_to: *id023
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    \n\ninput: [1, 1, 1, -1, 25, 25,\
    \ 25, -1, 0, 1, 2]\noutput: ['BBB', 'ZZZ', 'ABC']\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    if user inputs [1, 1, 1, -1, 25,\
    \ 25, 25, -1, 0, 1, 2], output should be ['BBB', 'ZZZ', 'ABC'].\n    \"\"\"\n\
    \    "
  completion_from: "result = []\n    for i in lst:\n        if i == -1:\n        \
    \    result.append(i)\n    for i in range(len(result)):\n        lst.remove(-1)\n\
    \    for i in range(0, len(lst), 3):\n        result.append(lst[i:i+3])\n    for\
    \ i in range(len(result)):\n        if result[i] =="
  completion_to: "result = []\n    for i in lst:\n        if i == -1:\n          \
    \  result.append('')\n        elif i == 0:\n            result.append('A')\n \
    \       elif i == 1:\n            result.append('B')\n        elif i == 2:\n \
    \           result.append('C')\n        elif i == 25:\n            result.append('Z')\n\
    \        else:\n            result."
  diff: "--- \n+++ \n@@ -1,7 +1,9 @@\n def convert(lst): \"\"\"-input:+if+user+inputs\
    \ [1, 1, 1,@@ -12,9 +14,11 @@\n -1, 0, 1,-2]-output:+2],+output+should+be ['BBB',\
    \ 'ZZZ',-'ABC']+'ABC']. \"\"\""
  attempt_id: 27
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id023
  node_to: *id024
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    if user inputs [1, 1, 1, -1, 25,\
    \ 25, 25, -1, 0, 1, 2], output should be ['BBB', 'ZZZ', 'ABC'].\n    \"\"\"\n\
    \    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning negative numbers into\
    \ \"\"\n    \"\"\"\n    "
  completion_from: "result = []\n    for i in lst:\n        if i == -1:\n        \
    \    result.append('')\n        elif i == 0:\n            result.append('A')\n\
    \        elif i == 1:\n            result.append('B')\n        elif i == 2:\n\
    \            result.append('C')\n        elif i == 25:\n            result.append('Z')\n\
    \        else:\n            result."
  completion_to: 'return [chr(x + 65) if x >= 0 else "" for x in lst]


    '
  diff: "--- \n+++ \n@@ -1,24 +1,24 @@\n def convert(lst): \"\"\"-if-user-inputs-[1,-1,-1,--1,-25,-25,-25,--1,-0,-1,-2],-output-should-be-['BBB',-'ZZZ',-'ABC'].+change+numbers+to+letters+matching+the+order+of+the+alphabet+starting+at+0+as+A,+turning+negative+numbers+into+\"\
    \" \"\"\""
  attempt_id: 28
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id024
  node_to: *id012
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning negative numbers into\
    \ \"\"\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning negative numbers into\
    \ \"\", grouping the output as one string.\n    \"\"\"\n    "
  completion_from: 'return [chr(x + 65) if x >= 0 else "" for x in lst]


    '
  completion_to: 'return "".join(["" if n < 0 else chr(n + 65) for n in lst])

    '
  diff: "--- \n+++ \n@@ -20,5 +20,11 @@\n negative numbers into-\"\"+\"\",+grouping+the+output+as+one+string.\
    \ \"\"\""
  attempt_id: 29
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id012
  node_to: *id024
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning negative numbers into\
    \ \"\", grouping the output as one string.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning negative numbers into\
    \ \"\", and grouping the output as one string in a list.\n    \"\"\"\n    "
  completion_from: 'return "".join(["" if n < 0 else chr(n + 65) for n in lst])

    '
  completion_to: "output = []\n    for i in lst:\n        if i < 0:\n            output.append(\"\
    \")\n        else:\n            output.append(chr(i + 65))\n    return output\n"
  diff: "--- \n+++ \n@@ -21,10 +21,14 @@\n numbers into \"\",+and grouping the output\
    \ as one-string.+string+in+a+list. \"\"\""
  attempt_id: 30
  total_attempts: 32
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id024
  node_to: *id006
  username: student17
  prompt_from: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, turning negative numbers into\
    \ \"\", and grouping the output as one string in a list.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    change numbers to letters matching\
    \ the order of the alphabet starting at 0 as A, and grouping the output as one\
    \ string in a list, using -1 as places to slice. \n    \"\"\"\n    "
  completion_from: "output = []\n    for i in lst:\n        if i < 0:\n          \
    \  output.append(\"\")\n        else:\n            output.append(chr(i + 65))\n\
    \    return output\n"
  completion_to: 'return [''''.join(chr(i + 65) for i in lst[:lst.index(-1)])] + convert(lst[lst.index(-1)
    + 1:]) if -1 in lst else [''''.join(chr(i + 65) for i in lst)]

    '
  diff: "--- \n+++ \n@@ -16,11 +16,6 @@\n 0 as A,-turning-negative-numbers-into-\"\
    \", and grouping the@@ -30,5 +25,11 @@\n string in a-list.+list,+using+-1+as+places+to+slice.\
    \ \"\"\""
  attempt_id: 31
  total_attempts: 32
  state: success
  _edge_tags: null
- !Edge
  node_from: *id025
  node_to: *id024
  username: student18
  prompt_from: "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each\
    \ alphabet, and create a list of string of alphabetical letters based on their\
    \ assigned numbers in the lst. When there is -1 in the lst, create a new string\
    \ and add it to the list. Return a list of created strings.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each\
    \ alphabet, and create a list. Based on their assigned numbers in the lst, create\
    \ a string of capitalized alphabetical letters and add to the list. When there\
    \ is -1 in the lst, create a separate string and add it to the list. Return a\
    \ list of created strings.\n    \"\"\"\n    "
  completion_from: "res = []\n    temp = []\n    for i in lst:\n        if i == -1:\n\
    \            res.append(''.join(temp))\n            temp = []\n        else:\n\
    \            temp.append(chr(i+97))\n    return res\n"
  completion_to: "result = []\n    for i in range(len(lst)):\n        if lst[i] ==\
    \ -1:\n            result.append('')\n        else:\n            result.append(chr(lst[i]+65))\n\
    \    return result\n"
  diff: "--- \n+++ \n@@ -12,20 +12,27 @@\n and create a-list-of-string-of-alphabetical-letters-based+list.+Based\
    \ on their assigned numbers in the-lst.+lst,+create+a+string+of+capitalized+alphabetical+letters+and+add+to+the+list.\
    \ When there is@@ -35,7 +42,7 @@\n lst, create a-new+separate string and add"
  attempt_id: 1
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id024
  node_to: *id026
  username: student18
  prompt_from: "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each\
    \ alphabet, and create a list. Based on their assigned numbers in the lst, create\
    \ a string of capitalized alphabetical letters and add to the list. When there\
    \ is -1 in the lst, create a separate string and add it to the list. Return a\
    \ list of created strings.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each\
    \ alphabet, and create a list. Based on their assigned numbers in the lst, create\
    \ string of capitalized alphabetical letters and add to the list. When there is\
    \ -1 in the lst, create a separate string from the next index and add it to the\
    \ list. Return a list of created strings.\n    \"\"\"\n    "
  completion_from: "result = []\n    for i in range(len(lst)):\n        if lst[i]\
    \ == -1:\n            result.append('')\n        else:\n            result.append(chr(lst[i]+65))\n\
    \    return result\n"
  completion_to: "lst_str = []\n    for i in range(len(lst)):\n        if lst[i] ==\
    \ -1:\n            lst_str.append(chr(lst[i+1]+65))\n        else:\n         \
    \   lst_str.append(chr(lst[i]+65))\n    return lst_str\n"
  diff: "--- \n+++ \n@@ -22,7 +22,6 @@\n the lst, create-a string of capitalized@@\
    \ -44,6 +43,10 @@\n a separate string+from+the+next+index and add it"
  attempt_id: 2
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id026
  node_to: *id027
  username: student18
  prompt_from: "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each\
    \ alphabet, and create a list. Based on their assigned numbers in the lst, create\
    \ string of capitalized alphabetical letters and add to the list. When there is\
    \ -1 in the lst, create a separate string from the next index and add it to the\
    \ list. Return a list of created strings.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Assign a number from 0~25 to each\
    \ alphabet, and create a list. Based on their assigned numbers in the lst, create\
    \ string of capitalized alphabetical letters and add to the list. When there is\
    \ -1 in the lst, create a new string from the next index and add it to the list.\
    \ Return a list of created strings.\n    \"\"\"\n    "
  completion_from: "lst_str = []\n    for i in range(len(lst)):\n        if lst[i]\
    \ == -1:\n            lst_str.append(chr(lst[i+1]+65))\n        else:\n      \
    \      lst_str.append(chr(lst[i]+65))\n    return lst_str\n"
  completion_to: "lst_num = []\n    for i in lst:\n        if i == -1:\n         \
    \   lst_num.append(i)\n        else:\n            lst_num.append(i+65)\n    lst_str\
    \ = []\n    for i in range(len(lst_num)):\n        if lst_num[i] == -1:\n    \
    \        lst_str.append(chr("
  diff: "--- \n+++ \n@@ -41,7 +41,7 @@\n lst, create a-separate+new string from the"
  attempt_id: 3
  total_attempts: 4
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id028
  node_to: *id029
  username: student21
  prompt_from: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will produce a list of strings that correspond to the given\
    \ numbers in the input set, creating a new string only when there is a -1 in the\
    \ input.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will produce a set of strings that correspond to the given\
    \ numbers in the input set, only separating the strings when there is a -1 in\
    \ the input.\n    \"\"\"\n    "
  completion_from: "result = []\n    temp = []\n    for i in lst:\n        if i ==\
    \ -1:\n            result.append(''.join(temp))\n            temp = []\n     \
    \   else:\n            temp.append(chr(i+65))\n    return result\n"
  completion_to: "output = []\n    for i in lst:\n        if i == -1:\n          \
    \  output.append(\" \")\n        else:\n            output.append(chr(i + 65))\n\
    \    return \"\".join(output)\n"
  diff: "--- \n+++ \n@@ -33,7 +33,7 @@\n will produce a-list+set of strings that@@\
    \ -46,11 +46,10 @@\n the input set,-creating-a-new-string only+separating+the+strings\
    \ when there is"
  attempt_id: 1
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id029
  node_to: *id024
  username: student21
  prompt_from: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will produce a set of strings that correspond to the given\
    \ numbers in the input set, only separating the strings when there is a -1 in\
    \ the input.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will produce a list of strings that correspond to the given\
    \ numbers in the input set, creating a new string when there is a -1 in the input.\n\
    \    \"\"\"\n    "
  completion_from: "output = []\n    for i in lst:\n        if i == -1:\n        \
    \    output.append(\" \")\n        else:\n            output.append(chr(i + 65))\n\
    \    return \"\".join(output)\n"
  completion_to: "result = []\n    for i in lst:\n        if i == -1:\n          \
    \  result.append(\"\")\n        else:\n            result.append(chr(i+65))\n\
    \    return result\n"
  diff: "--- \n+++ \n@@ -33,7 +33,7 @@\n will produce a-set+list of strings that@@\
    \ -46,10 +46,10 @@\n the input set,-only-separating-the-strings+creating+a+new+string\
    \ when there is"
  attempt_id: 2
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id024
  node_to: *id028
  username: student21
  prompt_from: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will produce a list of strings that correspond to the given\
    \ numbers in the input set, creating a new string when there is a -1 in the input.\n\
    \    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will produce a list of strings that correspond to the given\
    \ numbers in the input set, creating a new string each time it comes across a\
    \ -1 in the input.\n    \"\"\"\n    "
  completion_from: "result = []\n    for i in lst:\n        if i == -1:\n        \
    \    result.append(\"\")\n        else:\n            result.append(chr(i+65))\n\
    \    return result\n"
  completion_to: "result = []\n    current_string = \"\"\n    for num in lst:\n  \
    \      if num == -1:\n            result.append(current_string)\n            current_string\
    \ = \"\"\n        else:\n            current_string += chr(num + 65)\n    return\
    \ result"
  diff: "--- \n+++ \n@@ -50,9 +50,11 @@\n a new string-when-there-is+each+time+it+comes+across\
    \ a -1 in"
  attempt_id: 3
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id028
  node_to: *id004
  username: student21
  prompt_from: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will produce a list of strings that correspond to the given\
    \ numbers in the input set, creating a new string each time it comes across a\
    \ -1 in the input.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will produce a list of strings that correspond to the given\
    \ numbers in the input set, creating a separate string each time it comes across\
    \ a -1 in the input.\n    \"\"\"\n    "
  completion_from: "result = []\n    current_string = \"\"\n    for num in lst:\n\
    \        if num == -1:\n            result.append(current_string)\n          \
    \  current_string = \"\"\n        else:\n            current_string += chr(num\
    \ + 65)\n    return result"
  completion_to: "# create a list to store the result\n    result = []\n    # create\
    \ a variable to store the current string\n    curr_str = \"\"\n    # loop through\
    \ the input list\n    for num in lst:\n        # if the number is -1\n       \
    \ if num == -1:\n            # append the current string to the result\n     \
    \       result.append(curr_str)\n            # reset the current string\n    \
    \        curr_str"
  diff: "--- \n+++ \n@@ -48,7 +48,7 @@\n set, creating a-new+separate string each\
    \ time"
  attempt_id: 4
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id004
  node_to: *id030
  username: student21
  prompt_from: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will produce a list of strings that correspond to the given\
    \ numbers in the input set, creating a separate string each time it comes across\
    \ a -1 in the input.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will produce a list of strings that correspond to the given\
    \ numbers in the input set, creating a new string at each -1 in the input.\n \
    \   \"\"\"\n    "
  completion_from: "# create a list to store the result\n    result = []\n    # create\
    \ a variable to store the current string\n    curr_str = \"\"\n    # loop through\
    \ the input list\n    for num in lst:\n        # if the number is -1\n       \
    \ if num == -1:\n            # append the current string to the result\n     \
    \       result.append(curr_str)\n            # reset the current string\n    \
    \        curr_str"
  completion_to: "result = []\n    for i in range(len(lst)):\n        if lst[i] ==\
    \ -1:\n            result.append(\"\")\n        else:\n            result[-1]\
    \ += chr(lst[i] + 65)\n    return result\n"
  diff: "--- \n+++ \n@@ -48,14 +48,10 @@\n set, creating a-separate+new string+at\
    \ each-time-it-comes-across-a -1 in the"
  attempt_id: 5
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id030
  node_to: *id028
  username: student21
  prompt_from: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will produce a list of strings that correspond to the given\
    \ numbers in the input set, creating a new string at each -1 in the input.\n \
    \   \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will look at each index of the input list of strings, build\
    \ a string that correspond to the given numbers in the input set, and add that\
    \ string to the output list and start a new one when it comes across -1 in the\
    \ input.\n    \"\"\"\n    "
  completion_from: "result = []\n    for i in range(len(lst)):\n        if lst[i]\
    \ == -1:\n            result.append(\"\")\n        else:\n            result[-1]\
    \ += chr(lst[i] + 65)\n    return result\n"
  completion_to: "output = []\n    temp = ''\n    for i in range(len(lst)):\n    \
    \    if lst[i] == -1:\n            output.append(temp)\n            temp = ''\n\
    \        else:\n            temp += chr(lst[i] + 65)\n    return output\n"
  diff: "--- \n+++ \n@@ -31,11 +31,19 @@\n the code will-produce-a+look+at+each+index+of+the+input\
    \ list of-strings+strings,+build+a+string that correspond to@@ -46,12 +54,23 @@\n\
    \ the input set,-creating+and+add+that+string+to+the+output+list+and+start a new-string-at-each+one+when+it+comes+across\
    \ -1 in the"
  attempt_id: 6
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id028
  node_to: *id006
  username: student21
  prompt_from: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will look at each index of the input list of strings, build\
    \ a string that correspond to the given numbers in the input set, and add that\
    \ string to the output list and start a new one when it comes across -1 in the\
    \ input.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will look at each index of the input list of strings, build\
    \ a string that correspond to the given numbers in the input set, and add that\
    \ string to the output list and start a new one when it comes across -1 in the\
    \ input. we will also add the string when we reach the end of the input list.\n\
    \    \"\"\"\n    "
  completion_from: "output = []\n    temp = ''\n    for i in range(len(lst)):\n  \
    \      if lst[i] == -1:\n            output.append(temp)\n            temp = ''\n\
    \        else:\n            temp += chr(lst[i] + 65)\n    return output\n"
  completion_to: "output = []\n    current_string = \"\"\n    for i in lst:\n    \
    \    if i == -1:\n            output.append(current_string)\n            current_string\
    \ = \"\"\n        else:\n            current_string += chr(i + 65)\n    output.append(current_string)\n\
    \    return output\n\nprint(convert([11, 11, -1, 2, 1, 0, -1, 27,"
  diff: "--- \n+++ \n@@ -75,4 +75,19 @@\n in the input.+we+will+also+add+the+string+when+we+reach+the+end+of+the+input+list.\
    \ \"\"\""
  attempt_id: 7
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id006
  node_to: *id006
  username: student21
  prompt_from: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will look at each index of the input list of strings, build\
    \ a string that correspond to the given numbers in the input set, and add that\
    \ string to the output list and start a new one when it comes across -1 in the\
    \ input. we will also add the string when we reach the end of the input list.\n\
    \    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will look at each index of the input list of strings, build\
    \ a string that correspond to the given numbers in the input set, and add that\
    \ string to the output list and start a new one when it comes across -1 in the\
    \ input. we will also add this string when we reach the end of the input list.\n\
    \    \"\"\"\n    "
  completion_from: "output = []\n    current_string = \"\"\n    for i in lst:\n  \
    \      if i == -1:\n            output.append(current_string)\n            current_string\
    \ = \"\"\n        else:\n            current_string += chr(i + 65)\n    output.append(current_string)\n\
    \    return output\n\nprint(convert([11, 11, -1, 2, 1, 0, -1, 27,"
  completion_to: "output = []\n    current = \"\"\n    for i in lst:\n        if i\
    \ == -1:\n            output.append(current)\n            current = \"\"\n   \
    \     else:\n            current += chr(i + 65)\n    output.append(current)\n\
    \    return output\n\nprint(convert([20, 12, 18, 30, 21, -1, 15, 9, -1, 17, 14,\
    \ -1, 25"
  diff: "--- \n+++ \n@@ -79,7 +79,7 @@\n will also add-the+this string when we"
  attempt_id: 8
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id006
  node_to: *id031
  username: student21
  prompt_from: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will look at each index of the input list of strings, build\
    \ a string that correspond to the given numbers in the input set, and add that\
    \ string to the output list and start a new one when it comes across -1 in the\
    \ input. we will also add this string when we reach the end of the input list.\n\
    \    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    each number in the input set corresponds\
    \ to the order of the alphabet from A to Z, all capital, with 0 being A, 1 being\
    \ B, etc. the code will return a list of Strings parsed from the given numbers,\
    \ with each -1 in the input signifying a separate string. \n    \"\"\"\n    "
  completion_from: "output = []\n    current = \"\"\n    for i in lst:\n        if\
    \ i == -1:\n            output.append(current)\n            current = \"\"\n \
    \       else:\n            current += chr(i + 65)\n    output.append(current)\n\
    \    return output\n\nprint(convert([20, 12, 18, 30, 21, -1, 15, 9, -1, 17, 14,\
    \ -1, 25"
  completion_to: "# create a list of letters\n    letters = [chr(i) for i in range(ord('A'),\
    \ ord('Z')+1)]\n    # create a list of strings\n    strings = []\n    # create\
    \ a string\n    string = ''\n    # iterate through the list\n    for i in lst:\n\
    \        # if the number is -1\n        if i == -1:\n            # add the string\
    \ to the list of"
  diff: "--- \n+++ \n@@ -31,63 +31,24 @@\n the code will-look-at-each-index-of-the-input+return+a\
    \ list of-strings,-build-a-string-that-correspond-to+Strings+parsed+from the given-numbers+numbers,+with+each+-1\
    \ in the input-set,-and-add-that-string-to-the-output-list-and-start+signifying\
    \ a-new-one-when-it-comes-across--1-in-the-input.-we-will-also-add-this-string-when-we-reach-the-end-of-the-input-list.+separate+string.\
    \ \"\"\""
  attempt_id: 9
  total_attempts: 10
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id032
  node_to: *id012
  username: student25
  prompt_from: "def convert(lst):\n    \"\"\"\n    This function converts integers\
    \ to its corresponding letter in the alphabet.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Letters A-Z correspond with numbers\
    \ 0-25. This function creates a string by replacing the given number with its\
    \ corresponding number. Negative numbers start a new string.\n    \"\"\"\n    "
  completion_from: 'return [chr(x + 64) for x in lst]

    '
  completion_to: "new_lst = []\n    for i in lst:\n        if i < 0:\n           \
    \ new_lst.append('')\n        else:\n            new_lst.append(chr(i+65))\n \
    \   return ''.join(new_lst)\n"
  diff: "--- \n+++ \n@@ -1,15 +1,30 @@\n def convert(lst): \"\"\"+Letters+A-Z+correspond+with+numbers+0-25.\
    \ This function-converts-integers-to+creates+a+string+by+replacing+the+given+number+with\
    \ its corresponding-letter-in-the-alphabet.+number.+Negative+numbers+start+a+new+string.\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id012
  node_to: *id029
  username: student25
  prompt_from: "def convert(lst):\n    \"\"\"\n    Letters A-Z correspond with numbers\
    \ 0-25. This function creates a string by replacing the given number with its\
    \ corresponding number. Negative numbers start a new string.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Letters A-Z correspond with numbers\
    \ 0-25. This function creates a string by replacing the given number with its\
    \ corresponding number. Input \"-1\" starts a new string.\n    \"\"\"\n    "
  completion_from: "new_lst = []\n    for i in lst:\n        if i < 0:\n         \
    \   new_lst.append('')\n        else:\n            new_lst.append(chr(i+65))\n\
    \    return ''.join(new_lst)\n"
  completion_to: "new_lst = []\n    for i in lst:\n        if i == -1:\n         \
    \   new_lst.append(\" \")\n        else:\n            new_lst.append(chr(i+65))\n\
    \    return \"\".join(new_lst)\n"
  diff: "--- \n+++ \n@@ -21,9 +21,9 @@\n its corresponding number.-Negative-numbers-start+Input+\"\
    -1\"+starts a new string."
  attempt_id: 2
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id029
  node_to: *id029
  username: student25
  prompt_from: "def convert(lst):\n    \"\"\"\n    Letters A-Z correspond with numbers\
    \ 0-25. This function creates a string by replacing the given number with its\
    \ corresponding number. Input \"-1\" starts a new string.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Letters A-Z correspond with numbers\
    \ 0-25. This function creates a string by replacing the given number with its\
    \ corresponding number. Input \"-1\" starts a new output.\n    \"\"\"\n    "
  completion_from: "new_lst = []\n    for i in lst:\n        if i == -1:\n       \
    \     new_lst.append(\" \")\n        else:\n            new_lst.append(chr(i+65))\n\
    \    return \"\".join(new_lst)\n"
  completion_to: "output = \"\"\n    for i in lst:\n        if i == -1:\n        \
    \    output += \" \"\n        else:\n            output += chr(i + 65)\n    return\
    \ output\n"
  diff: "--- \n+++ \n@@ -26,5 +26,5 @@\n starts a new-string.+output. \"\"\""
  attempt_id: 3
  total_attempts: 4
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id033
  node_to: *id033
  username: student26
  prompt_from: "def convert(lst):\n    \"\"\"\n    The absolute values from 0 to 25\
    \ correspond to the letters of the alphabet. Take the numbers in a given string\
    \ and replace them with the letters of the alphabet.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Create a dictionary where the absolute\
    \ values of numbers from 0-25 equal capital letters of the alphabet. Replace the\
    \ numbers in a given string according to the dictionary\n    \"\"\"\n    "
  completion_from: "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join([alphabet[abs(int(i))]\
    \ for i in lst.split()])\n"
  completion_to: "d = {abs(num): chr(65+num) for num in range(26)}\n    return ''.join([d[int(num)]\
    \ for num in lst.split()])\n"
  diff: "--- \n+++ \n@@ -1,34 +1,32 @@\n def convert(lst): \"\"\"-The+Create+a+dictionary+where+the\
    \ absolute values+of+numbers from-0-to-25-correspond-to-the+0-25+equal+capital\
    \ letters of the alphabet.-Take+Replace the numbers in a given string-and-replace-them-with+according+to\
    \ the-letters-of-the-alphabet.+dictionary \"\"\""
  attempt_id: 1
  total_attempts: 2
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id008
  node_to: *id034
  username: student3
  prompt_from: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into list of letters of corresponding index \nnumbers of alphabetical table\n\
    \n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    create a list with element of alphabet\
    \ last element are comma\n\n    \"\"\"\n    "
  completion_from: 'return [chr(i + 65) for i in lst]


    '
  completion_to: "lst = [i for i in lst]\n    lst.append(',')\n    return lst\n\n"
  diff: "--- \n+++ \n@@ -1,21 +1,15 @@\n def convert(lst): \"\"\"-convert-the+create+a\
    \ list+with+element of-index-number-into-list-of-letters-of-corresponding-index-numbers-of-alphabetical-table+alphabet+last+element+are+comma\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 13
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id034
  node_to: *id035
  username: student3
  prompt_from: "def convert(lst):\n    \"\"\"\n    create a list with element of alphabet\
    \ last element are comma\n\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into string of letters of corresponding index \nnumbers of alphabetical table\n\
    \n    \"\"\"\n    "
  completion_from: "lst = [i for i in lst]\n    lst.append(',')\n    return lst\n\n"
  completion_to: 'return ''''.join(map(lambda x: chr(x + 97), lst))


    '
  diff: "--- \n+++ \n@@ -1,15 +1,21 @@\n def convert(lst): \"\"\"-create-a+convert+the\
    \ list-with-element of-alphabet-last-element-are-comma+index+number+into+string+of+letters+of+corresponding+index+numbers+of+alphabetical+table\
    \ \"\"\""
  attempt_id: 2
  total_attempts: 13
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id035
  node_to: *id036
  username: student3
  prompt_from: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into string of letters of corresponding index \nnumbers of alphabetical table\n\
    \n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    call a list with element of alphabet\
    \ and last element are comma\n\n    \"\"\"\n    "
  completion_from: 'return ''''.join(map(lambda x: chr(x + 97), lst))


    '
  completion_to: "lst = lst[:-1]\n    lst = [ord(i) for i in lst]\n    return lst\n\
    \n"
  diff: "--- \n+++ \n@@ -1,21 +1,16 @@\n def convert(lst): \"\"\"-convert-the+call+a\
    \ list+with+element of-index-number-into-string-of-letters-of-corresponding-index-numbers-of-alphabetical-table+alphabet+and+last+element+are+comma\
    \ \"\"\""
  attempt_id: 3
  total_attempts: 13
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id036
  node_to: *id037
  username: student3
  prompt_from: "def convert(lst):\n    \"\"\"\n    call a list with element of alphabet\
    \ and last element are comma\n\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    call out element of the following\
    \ list [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z, ',']\n    \"\"\"\n\
    \    "
  completion_from: "lst = lst[:-1]\n    lst = [ord(i) for i in lst]\n    return lst\n\
    \n"
  completion_to: 'return lst[0]

    '
  diff: "--- \n+++ \n@@ -2,15 +2,12 @@\n convert(lst): \"\"\" call-a-list-with+out\
    \ element of-alphabet-and-last-element-are-comma+the+following+list+[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,+',']\
    \ \"\"\""
  attempt_id: 4
  total_attempts: 13
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id037
  node_to: *id036
  username: student3
  prompt_from: "def convert(lst):\n    \"\"\"\n    call out element of the following\
    \ list [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z, ',']\n    \"\"\"\n\
    \    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    convert the list into list of alphabet\
    \ with number represent index of alphabet table\n\n    \"\"\"\n    "
  completion_from: 'return lst[0]

    '
  completion_to: 'return [ord(i) - 97 for i in lst]


    '
  diff: "--- \n+++ \n@@ -1,13 +1,18 @@\n def convert(lst): \"\"\"-call-out-element+convert+the+list+into+list\
    \ of-the-following-list-[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,-',']+alphabet+with+number+represent+index+of+alphabet+table\
    \ \"\"\""
  attempt_id: 5
  total_attempts: 13
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id036
  node_to: *id038
  username: student3
  prompt_from: "def convert(lst):\n    \"\"\"\n    convert the list into list of alphabet\
    \ with number represent index of alphabet table\n\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into list of letters of corresponding index \nnumbers\n    \"\"\"\n    "
  completion_from: 'return [ord(i) - 97 for i in lst]


    '
  completion_to: 'return [letters[i] for i in lst]

    '
  diff: "--- \n+++ \n@@ -4,15 +4,15 @@\n convert the list+of+index+number into list\
    \ of-alphabet-with-number-represent+letters+of+corresponding index-of-alphabet-table+numbers\
    \ \"\"\""
  attempt_id: 6
  total_attempts: 13
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id038
  node_to: *id008
  username: student3
  prompt_from: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into list of letters of corresponding index \nnumbers\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into string of capital letters of corresponding index numbers of alphabetical\
    \ table and insert into a list\n    \"\"\"\n    "
  completion_from: 'return [letters[i] for i in lst]

    '
  completion_to: "lst_converted = []\n    for i in lst:\n        lst_converted.append(chr(i+65))\n\
    \    return lst_converted\n"
  diff: "--- \n+++ \n@@ -8,11 +8,20 @@\n index number into-list+string of+capital\
    \ letters of corresponding index numbers+of+alphabetical+table+and+insert+into+a+list\
    \ \"\"\""
  attempt_id: 7
  total_attempts: 13
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id008
  node_to: *id039
  username: student3
  prompt_from: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into string of capital letters of corresponding index numbers of alphabetical\
    \ table and insert into a list\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into string of capital letters of corresponding index numbers of alphabetical\
    \ table and insert into a list (-1 represent comma)\n    \"\"\"\n    "
  completion_from: "lst_converted = []\n    for i in lst:\n        lst_converted.append(chr(i+65))\n\
    \    return lst_converted\n"
  completion_to: "result = []\n    for i in lst:\n        if i == -1:\n          \
    \  result.append(',')\n        else:\n            result.append(chr(i+65))\n \
    \   return result\n"
  diff: "--- \n+++ \n@@ -24,4 +24,7 @@\n into a list+(-1+represent+comma) \"\"\""
  attempt_id: 8
  total_attempts: 13
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id039
  node_to: *id039
  username: student3
  prompt_from: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into string of capital letters of corresponding index numbers of alphabetical\
    \ table and insert into a list (-1 represent comma)\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into capital letters of corresponding index numbers of alphabetical table(-1\
    \ represent comma)\n    \"\"\"\n    "
  completion_from: "result = []\n    for i in lst:\n        if i == -1:\n        \
    \    result.append(',')\n        else:\n            result.append(chr(i+65))\n\
    \    return result\n"
  completion_to: "for i in range(len(lst)):\n        if lst[i] == -1:\n          \
    \  lst[i] = ','\n        else:\n            lst[i] = chr(lst[i]+65)\n    return\
    \ lst\n"
  diff: "--- \n+++ \n@@ -8,8 +8,6 @@\n index number into-string-of capital letters\
    \ of@@ -18,13 +16,7 @@\n numbers of alphabetical-table-and-insert-into-a-list-(-1+table(-1\
    \ represent comma) \"\"\""
  attempt_id: 9
  total_attempts: 13
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id039
  node_to: *id020
  username: student3
  prompt_from: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into capital letters of corresponding index numbers of alphabetical table(-1\
    \ represent comma)\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into string of capital letters of corresponding index numbers of alphabetical\
    \ table\n    \"\"\"\n    "
  completion_from: "for i in range(len(lst)):\n        if lst[i] == -1:\n        \
    \    lst[i] = ','\n        else:\n            lst[i] = chr(lst[i]+65)\n    return\
    \ lst\n"
  completion_to: 'return ''''.join([chr(i + 65) for i in lst])


    '
  diff: "--- \n+++ \n@@ -8,6 +8,8 @@\n index number into+string+of capital letters\
    \ of@@ -16,7 +18,5 @@\n numbers of alphabetical-table(-1-represent-comma)+table\
    \ \"\"\""
  attempt_id: 10
  total_attempts: 13
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id020
  node_to: *id030
  username: student3
  prompt_from: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into string of capital letters of corresponding index numbers of alphabetical\
    \ table\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into string of capital letters of corresponding index numbers of alphabetical\
    \ table and then insert into a list (-1 represent where to split into a new element)\n\
    \    \"\"\"\n    "
  completion_from: 'return ''''.join([chr(i + 65) for i in lst])


    '
  completion_to: "lst_str = []\n    for i in range(len(lst)):\n        if lst[i] ==\
    \ -1:\n            lst_str.append('')\n        else:\n            lst_str[-1]\
    \ += chr(lst[i]+65)\n    return lst_str\n"
  diff: "--- \n+++ \n@@ -19,4 +19,19 @@\n of alphabetical table+and+then+insert+into+a+list+(-1+represent+where+to+split+into+a+new+element)\
    \ \"\"\""
  attempt_id: 11
  total_attempts: 13
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id030
  node_to: *id008
  username: student3
  prompt_from: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into string of capital letters of corresponding index numbers of alphabetical\
    \ table and then insert into a list (-1 represent where to split into a new element)\n\
    \    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    convert the list of index number\
    \ into string of capital letters of corresponding index numbers of alphabetical\
    \ table and then insert into a list \n    \"\"\"\n    "
  completion_from: "lst_str = []\n    for i in range(len(lst)):\n        if lst[i]\
    \ == -1:\n            lst_str.append('')\n        else:\n            lst_str[-1]\
    \ += chr(lst[i]+65)\n    return lst_str\n"
  completion_to: "lst2 = []\n    for i in lst:\n        lst2.append(chr(i+65))\n \
    \   return lst2\n"
  diff: "--- \n+++ \n@@ -25,13 +25,4 @@\n into a list-(-1-represent-where-to-split-into-a-new-element)\
    \ \"\"\""
  attempt_id: 12
  total_attempts: 13
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id040
  node_to: *id040
  username: student30
  prompt_from: "def convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 =\
    \ A, 1 = B, 2 = C, and so on. -1 = a space.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 = A,\
    \ 1 = B, 2 = C, and so on. -1 = a space.\n    \"\"\"\n    "
  completion_from: 'return [chr(x + 65) if x >= 0 else '' '' for x in lst]


    '
  completion_to: 'return [chr(x + 65) if x >= 0 else '' '' for x in lst]


    '
  diff: ''
  attempt_id: 1
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id040
  node_to: *id029
  username: student30
  prompt_from: "def convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 =\
    \ A, 1 = B, 2 = C, and so on. -1 = a space.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 = A,\
    \ 1 = B, 2 = C, and so on. \n\nReturn strings of letters with no spaces. A -1\
    \ in lst indicates the start of a new string.\n    \"\"\"\n    "
  completion_from: 'return [chr(x + 65) if x >= 0 else '' '' for x in lst]


    '
  completion_to: "new_lst = []\n    for i in lst:\n        if i == -1:\n         \
    \   new_lst.append(' ')\n        else:\n            new_lst.append(chr(i + 65))\n\
    \    return ''.join(new_lst)\n"
  diff: "--- \n+++ \n@@ -17,8 +17,22 @@\n and so on.+Return+strings+of+letters+with+no+spaces.+A\
    \ -1-=+in+lst+indicates+the+start+of a-space.+new+string. \"\"\""
  attempt_id: 2
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id029
  node_to: *id041
  username: student30
  prompt_from: "def convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 =\
    \ A, 1 = B, 2 = C, and so on. \n\nReturn strings of letters with no spaces. A\
    \ -1 in lst indicates the start of a new string.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Convert numbers to letters. 0 = A,\
    \ 1 = B, 2 = C, and so on. \n\nReturn strings of letters with no spaces. A -1\
    \ in lst indicates the start of a new string. Separate strings with commas. Enclose\
    \ the new list with brackets.\n    \"\"\"\n    "
  completion_from: "new_lst = []\n    for i in lst:\n        if i == -1:\n       \
    \     new_lst.append(' ')\n        else:\n            new_lst.append(chr(i + 65))\n\
    \    return ''.join(new_lst)\n"
  completion_to: "new_lst = []\n    for i in lst:\n        if i == -1:\n         \
    \   new_lst.append(\"]\")\n            new_lst.append(\"[\")\n        else:\n\
    \            new_lst.append(chr(i+65))\n    return \"\".join(new_lst)\n"
  diff: "--- \n+++ \n@@ -35,4 +35,14 @@\n a new string.+Separate+strings+with+commas.+Enclose+the+new+list+with+brackets.\
    \ \"\"\""
  attempt_id: 3
  total_attempts: 4
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id030
  node_to: *id030
  username: student4
  prompt_from: "def convert(lst):\n    \"\"\"\n    converts a list of numbers into\
    \ a list of letters, letter values are assigned consecutively beginning at the\
    \ index 0, creating a new item in new list when -1 is in the inputted list\n \
    \   \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    converts a list of numbers into a\
    \ list of letters, creating a new item in new list when -1 is in the inputted\
    \ list\n    \"\"\"\n    "
  completion_from: "new_lst = []\n    for i in range(len(lst)):\n        if lst[i]\
    \ == -1:\n            new_lst.append([])\n        else:\n            new_lst[-1].append(chr(lst[i]\
    \ + 97))\n    return new_lst\n"
  completion_to: "new_lst = []\n    for i in lst:\n        if i == -1:\n         \
    \   new_lst.append([])\n        else:\n            new_lst[-1].append(i)\n   \
    \ return new_lst\n\n"
  diff: "--- \n+++ \n@@ -11,16 +11,6 @@\n list of letters,-letter-values-are-assigned-consecutively-beginning-at-the-index-0,\
    \ creating a new"
  attempt_id: 1
  total_attempts: 3
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id030
  node_to: *id042
  username: student4
  prompt_from: "def convert(lst):\n    \"\"\"\n    converts a list of numbers into\
    \ a list of letters, creating a new item in new list when -1 is in the inputted\
    \ list\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    create a new list with stings of\
    \ letters, inputted numbers correspond to the index in the alphabet beginning\
    \ at zero, begins a new item in the new list when '-1' is passed\n    \"\"\"\n\
    \    "
  completion_from: "new_lst = []\n    for i in lst:\n        if i == -1:\n       \
    \     new_lst.append([])\n        else:\n            new_lst[-1].append(i)\n \
    \   return new_lst\n\n"
  completion_to: "new_lst = []\n    sub_lst = []\n    for i in lst:\n        if i\
    \ == -1:\n            new_lst.append(sub_lst)\n            sub_lst = []\n    \
    \    else:\n            sub_lst.append(chr(i + 97))\n    return new_lst\n"
  diff: "--- \n+++ \n@@ -1,28 +1,36 @@\n def convert(lst): \"\"\"-converts+create\
    \ a+new list-of-numbers-into-a-list+with+stings of letters,-creating+inputted+numbers+correspond+to+the+index+in+the+alphabet+beginning+at+zero,+begins\
    \ a new item in+the new list when--1+'-1' is-in-the-inputted-list+passed \"\"\""
  attempt_id: 2
  total_attempts: 3
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id043
  node_to: *id025
  username: student41
  prompt_from: "def convert(lst):\n    \"\"\"\n    Given a list, returns a list with\
    \ the letter corresponding to each number in the inputted list. If there is a\
    \ negative one, the corresponding letters should be printed as a separate item\
    \ in the list. Otherwise, the corresponding letters should be combined as one\
    \ string in the list.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Given a list, returns a list with\
    \ letters from the alphabet that correspond to the index in the inputted list,\
    \ starting from zero. Corresponding letters should be combined as one string to\
    \ insert into the list. A negative one indicates the start of a new item in the\
    \ list.\n    \"\"\"\n    "
  completion_from: "new_lst = []\n    for i in lst:\n        if i == -1:\n       \
    \     new_lst.append(i)\n        else:\n            new_lst.append(chr(i + 96))\n\
    \    return new_lst\n"
  completion_to: "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_lst = []\n  \
    \  temp = \"\"\n    for i in lst:\n        if i == -1:\n            new_lst.append(temp)\n\
    \            temp = \"\"\n        else:\n            temp += alphabet[i]\n   \
    \ return new_lst\n"
  diff: "--- \n+++ \n@@ -8,38 +8,23 @@\n a list with+letters+from the-letter-corresponding+alphabet+that+correspond\
    \ to-each-number+the+index in the inputted-list.-If-there-is-a-negative-one,-the-corresponding-letters-should-be-printed-as-a-separate-item-in-the-list.-Otherwise,-the-corresponding+list,+starting+from+zero.+Corresponding\
    \ letters should be@@ -47,6 +32,21 @@\n as one string+to+insert+into+the+list.+A+negative+one+indicates+the+start+of+a+new+item\
    \ in the list."
  attempt_id: 1
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id025
  node_to: *id028
  username: student41
  prompt_from: "def convert(lst):\n    \"\"\"\n    Given a list, returns a list with\
    \ letters from the alphabet that correspond to the index in the inputted list,\
    \ starting from zero. Corresponding letters should be combined as one string to\
    \ insert into the list. A negative one indicates the start of a new item in the\
    \ list.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Given a list, returns a list with\
    \ capitalized letters from the alphabet that correspond to the index in the inputted\
    \ list, starting from zero. Until a negative one is in the list, letters should\
    \ be combined as one string to insert into the list. A negative one indicates\
    \ the start of a new item in the list.\n    \"\"\"\n    "
  completion_from: "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_lst = []\n\
    \    temp = \"\"\n    for i in lst:\n        if i == -1:\n            new_lst.append(temp)\n\
    \            temp = \"\"\n        else:\n            temp += alphabet[i]\n   \
    \ return new_lst\n"
  completion_to: "result = []\n    temp = \"\"\n    for i in lst:\n        if i ==\
    \ -1:\n            result.append(temp)\n            temp = \"\"\n        else:\n\
    \            temp += chr(i + 65)\n    return result\n"
  diff: "--- \n+++ \n@@ -8,6 +8,7 @@\n a list with+capitalized letters from the@@\
    \ -24,7 +25,14 @@\n starting from zero.-Corresponding+Until+a+negative+one+is+in+the+list,\
    \ letters should be"
  attempt_id: 2
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id028
  node_to: *id028
  username: student41
  prompt_from: "def convert(lst):\n    \"\"\"\n    Given a list, returns a list with\
    \ capitalized letters from the alphabet that correspond to the index in the inputted\
    \ list, starting from zero. Until a negative one is in the list, letters should\
    \ be combined as one string to insert into the list. A negative one indicates\
    \ the start of a new item in the list.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Given a list, returns a list with\
    \ letters from the alphabet that correspond to the index in the inputted list,\
    \ starting from zero. Letters in the returned list should be capitalized. Until\
    \ a negative one is in the list, letters should be combined as one string. When\
    \ a negative one is reached this combination of letters can be inserted into the\
    \ list. A negative one indicates a new item in the list.\n    \"\"\"\n    "
  completion_from: "result = []\n    temp = \"\"\n    for i in lst:\n        if i\
    \ == -1:\n            result.append(temp)\n            temp = \"\"\n        else:\n\
    \            temp += chr(i + 65)\n    return result\n"
  completion_to: "result = []\n    temp = ''\n    for i in lst:\n        if i == -1:\n\
    \            result.append(temp)\n            temp = ''\n        else:\n     \
    \       temp += chr(i + 65)\n    return result\n"
  diff: "--- \n+++ \n@@ -8,7 +8,6 @@\n a list with-capitalized letters from the@@\
    \ -25,6 +24,14 @@\n starting from zero.+Letters+in+the+returned+list+should+be+capitalized.\
    \ Until a negative@@ -39,9 +46,20 @@\n combined as one-string-to-insert+string.+When+a+negative+one+is+reached+this+combination+of+letters+can+be+inserted\
    \ into the list.@@ -49,9 +67,6 @@\n negative one indicates-the-start-of a new\
    \ item"
  attempt_id: 3
  total_attempts: 4
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id030
  node_to: *id029
  username: student51
  prompt_from: "def convert(lst):\n    \"\"\"\n    Each character in the alphabet\
    \ is assigned an index value starting with A =0. Take each item in the list and\
    \ add the corresponding character to a string. If -1, start the next character\
    \ with a new string.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Each character in the alphabet is\
    \ assigned an index value starting with A =0. Take each item in the list and add\
    \ the corresponding character to a string. If -1, start the next character with\
    \ a new string.\n    \"\"\"\n    "
  completion_from: "result = []\n    for i in lst:\n        if i == -1:\n        \
    \    result.append(\"\")\n        else:\n            result[-1] += chr(i + 65)\n\
    \    return result\n\n"
  completion_to: "str = \"\"\n    for i in lst:\n        if i == -1:\n           \
    \ str += \" \"\n        else:\n            str += chr(i+65)\n    return str\n"
  diff: ''
  attempt_id: 1
  total_attempts: 3
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id029
  node_to: *id006
  username: student51
  prompt_from: "def convert(lst):\n    \"\"\"\n    Each character in the alphabet\
    \ is assigned an index value starting with A =0. Take each item in the list and\
    \ add the corresponding character to a string. If -1, start the next character\
    \ with a new string.\n    \"\"\"\n    "
  prompt_to: "def convert(lst):\n    \"\"\"\n    Each character in the alphabet is\
    \ assigned an index value starting with A =0. Take each item in the list and add\
    \ the corresponding character to a string. When -1 appears make a new string and\
    \ add the following characters to it. return a list of strings.\n    \"\"\"\n\
    \    "
  completion_from: "str = \"\"\n    for i in lst:\n        if i == -1:\n         \
    \   str += \" \"\n        else:\n            str += chr(i+65)\n    return str\n"
  completion_to: "result = []\n    temp = \"\"\n    for i in lst:\n        if i ==\
    \ -1:\n            result.append(temp)\n            temp = \"\"\n        else:\n\
    \            temp += chr(i+65)\n    result.append(temp)\n    return result\n"
  diff: "--- \n+++ \n@@ -29,14 +29,23 @@\n to a string.-If--1,-start-the-next-character-with+When+-1+appears+make\
    \ a new-string.+string+and+add+the+following+characters+to+it.+return+a+list+of+strings.\
    \ \"\"\""
  attempt_id: 2
  total_attempts: 3
  state: success
  _edge_tags: null
student_start_node_tags: {}
