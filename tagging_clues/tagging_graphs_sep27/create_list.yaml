!Graph
problem: create_list
nodes:
- &id004 !Node
  id: 0
  stdout:
  - 'None

    '
  - ''
  - 'None

    '
  stderr:
  - ''
  - 'TypeError: ''in <string>'' requires string as left operand, not int'
  - ''
  _node_tags: null
- &id006 !Node
  id: 1
  stdout:
  - 'b

    '
  - 'a

    '
  - 'None

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id002 !Node
  id: 2
  stdout:
  - '[''b'', ''d'', None]

    '
  - '[''a'', None, ''c'']

    '
  - '[None, None, None]

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id001 !Node
  id: 3
  stdout:
  - '[''a'', ''t'', ''c'', ''b'', ''d'']

    '
  - '[1, 5, 3, ''a'', ''b'', ''c'']

    '
  - '[''a'', ''b'', ''c'', ''t'', ''r'', ''e'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id005 !Node
  id: 4
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'AttributeError: ''dict'' object has no attribute ''key''. Did you mean: ''keys''?'
  - 'AttributeError: ''dict'' object has no attribute ''key''. Did you mean: ''keys''?'
  - 'AttributeError: ''dict'' object has no attribute ''key''. Did you mean: ''keys''?'
  _node_tags: null
- &id003 !Node
  id: 5
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'KeyError: ''c'''
  - 'KeyError: 5'
  - 'KeyError: ''a'''
  _node_tags: null
edges:
- !Edge
  node_from: *id001
  node_to: *id002
  username: student20
  prompt_from: "def create_list(dt, lst):\n    \"\"\"\n    Create a list using the\
    \ values of the keys\n    \"\"\"\n    "
  prompt_to: "def create_list(dt, lst):\n    \"\"\"\n    Take the values that can\
    \ be accessed in dt using the keys in the lst, and create a new list with the\
    \ values. If the key in lst does not exist in dt, add None to the list.\n    \"\
    \"\"\n    "
  completion_from: "for key in dt:\n        lst.append(dt[key])\n    return lst\n"
  completion_to: "new_list = []\n    for key in lst:\n        if key in dt:\n    \
    \        new_list.append(dt[key])\n        else:\n            new_list.append(None)\n\
    \    return new_list\n"
  diff: "--- \n+++ \n@@ -2,13 +2,42 @@\n create_list(dt, lst): \"\"\"-Create-a-list+Take+the+values+that+can+be+accessed+in+dt\
    \ using the-values-of+keys+in the-keys+lst,+and+create+a+new+list+with+the+values.+If+the+key+in+lst+does+not+exist+in+dt,+add+None+to+the+list.\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 2
  state: success
  _edge_tags:
    - a4
- !Edge
  node_from: *id003
  node_to: *id003
  username: student36
  prompt_from: "def create_list(dt, lst):\n    \"\"\"\n    Using the objects in dt,\
    \ return their associated keys in dt\n    \"\"\"\n    "
  prompt_to: "def create_list(dt, lst):\n    \"\"\"\n    using dt as a reference,\
    \ return the associated objects of the objects in lst\n    \"\"\"\n    "
  completion_from: 'return [dt[i] for i in lst]

    '
  completion_to: 'return [dt[i] for i in lst]


    '
  diff: "--- \n+++ \n@@ -2,15 +2,18 @@\n create_list(dt, lst): \"\"\"-Using+using+dt+as+a+reference,+return+the+associated+objects+of\
    \ the objects in-dt,-return-their-associated-keys-in-dt+lst \"\"\""
  attempt_id: 1
  total_attempts: 3
  state: neutral
  _edge_tags:
    - 0
- !Edge
  node_from: *id003
  node_to: *id002
  username: student36
  prompt_from: "def create_list(dt, lst):\n    \"\"\"\n    using dt as a reference,\
    \ return the associated objects of the objects in lst\n    \"\"\"\n    "
  prompt_to: "def create_list(dt, lst):\n    \"\"\"\n    using dt as a reference,\
    \ return the associated objects of the objects in lst. If the object does not\
    \ appear in dt return none\n    \"\"\"\n    "
  completion_from: 'return [dt[i] for i in lst]


    '
  completion_to: 'return [dt.get(i, None) for i in lst]

    '
  diff: "--- \n+++ \n@@ -15,5 +15,15 @@\n the objects in-lst+lst.+If+the+object+does+not+appear+in+dt+return+none\
    \ \"\"\""
  attempt_id: 2
  total_attempts: 3
  state: success
  _edge_tags:
    - a4
- !Edge
  node_from: *id003
  node_to: *id002
  username: student42
  prompt_from: "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and\
    \ a list, return a new list where each element in the new list is what the elements\
    \ of the original list map to in the dictionary. \n    \"\"\"\n    "
  prompt_to: "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a\
    \ list, return a new list where each element in the new list is what the elements\
    \ of the original list map to in the dictionary. if an element of the list doesnt\
    \ appear as a key in the dictionary, it should show up in the output list as None\n\
    \    \"\"\"\n    "
  completion_from: "new_list = []\n    for i in lst:\n        new_list.append(dt[i])\n\
    \    return new_list\n"
  completion_to: "new_list = []\n    for i in lst:\n        if i in dt:\n        \
    \    new_list.append(dt[i])\n        else:\n            new_list.append(None)\n\
    \    return new_list\n"
  diff: "--- \n+++ \n@@ -32,4 +32,28 @@\n in the dictionary.+if+an+element+of+the+list+doesnt+appear+as+a+key+in+the+dictionary,+it+should+show+up+in+the+output+list+as+None\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 2
  state: success
  _edge_tags:
    - a4
- !Edge
  node_from: *id004
  node_to: *id002
  username: student43
  prompt_from: "def create_list(dt, lst):\n    \"\"\"\n    Return the value stored\
    \ in the key in dt corresponding to the keys in lst. If you can find it, then\
    \ return the value, if not, then return None.\n\n    \"\"\"\n    "
  prompt_to: "def create_list(dt, lst):\n    \"\"\"\n    Loop through each element\
    \ in lst and return the value stored in it in dt. If you can't find the value,\
    \ return None. \n\n    \"\"\"\n    "
  completion_from: "if lst:\n        if lst[0] in dt:\n            return create_list(dt[lst[0]],\
    \ lst[1:])\n        else:\n            return None\n    else:\n        return\
    \ dt\n"
  completion_to: "new_list = []\n    for i in lst:\n        if i in dt:\n        \
    \    new_list.append(dt[i])\n        else:\n            new_list.append(None)\n\
    \    return new_list\n"
  diff: "--- \n+++ \n@@ -2,33 +2,27 @@\n create_list(dt, lst): \"\"\"-Return+Loop+through+each+element+in+lst+and+return\
    \ the value stored in-the-key+it in-dt-corresponding-to-the-keys-in-lst.+dt. If\
    \ you-can+can't find-it,-then-return the value,-if-not,-then return None. \"\"\
    \""
  attempt_id: 1
  total_attempts: 2
  state: success
  _edge_tags:
    - 0
- !Edge
  node_from: *id005
  node_to: *id006
  username: student54
  prompt_from: "def create_list(dt, lst):\n    \"\"\"\n    Find the key in the list.\
    \ If found, return the value of that key. If not found, return None.\n    \"\"\
    \"\n    "
  prompt_to: "def create_list(dt, lst):\n    \"\"\"\n    Find the keys in the list.\
    \ If found, return the value of that key. If not found, return None.\n    \"\"\
    \"\n    "
  completion_from: "if dt == None:\n        return None\n    if dt.key == lst[0]:\n\
    \        if len(lst) == 1:\n            return dt.value\n        else:\n     \
    \       return create_list(dt.child, lst[1:])\n    else:\n        return create_list(dt.next,\
    \ lst)\n"
  completion_to: "for key in lst:\n        if key in dt:\n            return dt[key]\n\
    \    return None\n"
  diff: "--- \n+++ \n@@ -4,7 +4,7 @@\n \"\"\" Find the-key+keys in the list."
  attempt_id: 1
  total_attempts: 3
  state: neutral
  _edge_tags:
    - 0
- !Edge
  node_from: *id006
  node_to: *id002
  username: student54
  prompt_from: "def create_list(dt, lst):\n    \"\"\"\n    Find the keys in the list.\
    \ If found, return the value of that key. If not found, return None.\n    \"\"\
    \"\n    "
  prompt_to: "def create_list(dt, lst):\n    \"\"\"\n    Find the keys in the list.\
    \ If found, return the value of that key in a new list. If not found, return None\
    \ in the new list.\n    \"\"\"\n    "
  completion_from: "for key in lst:\n        if key in dt:\n            return dt[key]\n\
    \    return None\n"
  completion_to: "new_lst = []\n    for i in lst:\n        if i in dt:\n         \
    \   new_lst.append(dt[i])\n        else:\n            new_lst.append(None)\n \
    \   return new_lst\n"
  diff: "--- \n+++ \n@@ -15,10 +15,18 @@\n value of that-key.+key+in+a+new+list. If\
    \ not found, return-None.+None+in+the+new+list. \"\"\""
  attempt_id: 2
  total_attempts: 3
  state: success
  _edge_tags:
    - a3
- !Edge
  node_from: *id006
  node_to: *id002
  username: student57
  prompt_from: "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and\
    \ a list, if key exists in dictionary, return all values in key value pair in\
    \ a list. if key does not exist, return None\n    \"\"\"\n    "
  prompt_to: "def create_list(dt, lst):\n    \"\"\"\n    given a dictionary and a\
    \ list, if key exists in dictionary, return values as well as None (if key does\
    \ not exist) in a list. \n    \"\"\"\n    "
  completion_from: "if lst[0] in dt:\n        return dt[lst[0]]\n    else:\n     \
    \   return None\n"
  completion_to: "new_lst = []\n    for i in lst:\n        if i in dt:\n         \
    \   new_lst.append(dt[i])\n        else:\n            new_lst.append(None)\n \
    \   return new_lst\n"
  diff: "--- \n+++ \n@@ -14,20 +14,17 @@\n in dictionary, return-all values-in+as+well+as+None+(if\
    \ key-value-pair+does+not+exist) in a list.-if-key-does-not-exist,-return-None\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 2
  state: success
  _edge_tags:
    - 0
student_start_node_tags: 
  student20:
    - 1
    - 5
    - 2
    - 3
  student36:
    - 1
    - 2
    - 3
    - 5
  student42:
    - 1
    - 2
    - 3
    - 5
  student43:
    - 1
    - 2
    - 3
    - 4
    - 5
  student54:
    - 1
    - 2
    - 4
    - 5
  student57:
    - 1
    - 2
    - 3
    - 4
    - 5
