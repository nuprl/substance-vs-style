edges:
- _edge_tags:
  - a6
  attempt_id: 1
  completion_from: "laugh = \"ha\"\n    for i in range(size):\n        laugh = laugh\
    \ + 'a'\n    return laugh\n\nprint(laugh(3))\n"
  completion_to: "if size == 1:\n        return 'ha'\n    else:\n        return 'ha'\
    \ + 'ha' + laugh(size-1)\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -25,4 +25,14 @@\n one more 'a'+and+have+another+'ha'+with+the+original+length+of+'a'\
    \ \"\"\""
  node_from: &id036
    _node_tags: null
    id: 34
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'haaaaa

      '
    - 'haa

      '
    - 'haaaa

      '
  node_to: &id034
    _node_tags: null
    id: 29
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hahahahahahaha

      '
    - 'ha

      '
    - 'hahahahaha

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    a function have initial input as\
    \ 'ha' when  input of size(int) is 1, when size+= 1 from 1, 'ha' will gain one\
    \ more 'a'\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    a function have initial input as 'ha'\
    \ when  input of size(int) is 1, when size+= 1 from 1, 'ha' will gain one more\
    \ 'a' and have another 'ha' with the original length of 'a'\n    \"\"\"\n    "
  state: fail
  total_attempts: 2
  username: student11
- _edge_tags:
  - d1
  - l2
  attempt_id: 1
  completion_from: "for i in range(size):\n        print(\"ha\"*(size-i))\n\nlaugh(3)"
  completion_to: "laugh = \"a\"\n    for i in range(size):\n        print(laugh)\n\
    \        laugh = laugh[:-1]\n    return laugh\n\nlaugh(3)\n"
  diff: "--- \n+++ \n@@ -1,43 +1,32 @@\n def laugh(size): \"\"\"-The-function-will-repeat-the-word-\"\
    ha\"-based+Based on the+inputted+number,+will+return+a+laugh size-inputted.-Each-time-the-word-\"\
    ha\"-is-printed,+where the number of-\"a\"s-in+\"a\"'s+starts+with the-\"ha\"\
    -will-start-with-its initial size, then-decrease+decreases by one for each-repetition.+additional+laugh.\
    \ \"\"\""
  node_from: &id007
    _node_tags: null
    id: 22
    stderr:
    - 'IndentationError: expected an indented block after ''for'' statement on line
      5'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      5'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      5'
    stdout:
    - ''
    - ''
    - ''
  node_to: &id001
    _node_tags: null
    id: 32
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - '

      '
    - '

      '
    - '

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    The function will repeat the word\
    \ \"ha\" based on the size inputted. Each time the word \"ha\" is printed, the\
    \ number of \"a\"s in the \"ha\" will start with its initial size, then decrease\
    \ by one for each repetition.\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    Based on the inputted number, will\
    \ return a laugh size where the number of \"a\"'s starts with the initial size,\
    \ then decreases by one for each additional laugh.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student13
- _edge_tags:
  - m1
  - m2
  - m3
  - a5
  - m6
  attempt_id: 2
  completion_from: "laugh = \"a\"\n    for i in range(size):\n        print(laugh)\n\
    \        laugh = laugh[:-1]\n    return laugh\n\nlaugh(3)\n"
  completion_to: "laugh = \"ha\"\n    for i in range(size):\n        laugh += \"ha\"\
    \n        laugh = laugh[:-1]\n    return laugh\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -11,22 +11,40 @@\n a laugh size+repeating+the+word+\"ha\"\
    +that+number+of+times.+Based+on+the+number+inputted,+the+function+will+produce+the+set+of+characters\
    \ where the number of \"a\"'s-starts-with+following the-initial-size,-then-decreases+\"\
    h\"+will+decrease by one for each-additional-laugh.+\"ha\". \"\"\""
  node_from: *id001
  node_to: &id002
    _node_tags: null
    id: 1
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hahhhh

      '
    - 'hah

      '
    - 'hahhh

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    Based on the inputted number, will\
    \ return a laugh size where the number of \"a\"'s starts with the initial size,\
    \ then decreases by one for each additional laugh.\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    Based on the inputted number, will\
    \ return a laugh size repeating the word \"ha\" that number of times. Based on\
    \ the number inputted, the function will produce the set of characters where the\
    \ number of \"a\"'s following the \"h\" will decrease by one for each \"ha\".\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student13
- _edge_tags:
  - 0
  attempt_id: 3
  completion_from: "laugh = \"ha\"\n    for i in range(size):\n        laugh += \"\
    ha\"\n        laugh = laugh[:-1]\n    return laugh\n\nprint(laugh(3))\n"
  completion_to: "laugh = \"ha\"\n    for i in range(size):\n        laugh += \"ha\"\
    \n        laugh = laugh[:-1]\n    return laugh + \"!\"\n\nprint(laugh(3))"
  diff: "--- \n+++ \n@@ -5,46 +5,41 @@\n on the inputted-number,+size,+the+function\
    \ will return a laugh-size+size, repeating the word \"ha\"-that-number-of-times.-Based-on-the-number-inputted,-the-function-will-produce-the-set-of-characters-where\
    \ the number of-\"a\"'s-following+times+inputted.+The+number+of+\"a\"s+in the-\"\
    h\"+\"ha\" will+start+with+its+initial+size,+then decrease by one for each-\"\
    ha\".+repetition. \"\"\""
  node_from: *id002
  node_to: &id030
    _node_tags: null
    id: 0
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hahhhh!

      '
    - 'hah!

      '
    - 'hahhh!

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    Based on the inputted number, will\
    \ return a laugh size repeating the word \"ha\" that number of times. Based on\
    \ the number inputted, the function will produce the set of characters where the\
    \ number of \"a\"'s following the \"h\" will decrease by one for each \"ha\".\n\
    \    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    Based on the inputted size, the function\
    \ will return a laugh size, repeating the word \"ha\" the number of times inputted.\
    \ The number of \"a\"s in the \"ha\" will start with its initial size, then decrease\
    \ by one for each repetition.\n    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student13
- _edge_tags:
  - a3
  - m5
  - m6
  attempt_id: 1
  completion_from: 'return "ha" * size


    print(laugh(3))

    '
  completion_to: "if size == 1:\n        print(\"ha\")\n    else:\n        print(\"\
    ha\" * size)\n\nlaugh(3)\n"
  diff: "--- \n+++ \n@@ -6,6 +6,20 @@\n prints \"ha\" for-any-value+an+input+of+1.+This+function+prints+an+additional+\"\
    haa\"+for+an+input+greater+than+1 \"\"\""
  node_from: &id011
    _node_tags: null
    id: 4
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hahahaha

      '
    - 'ha

      '
    - 'hahaha

      '
  node_to: &id003
    _node_tags: null
    id: 17
    stderr:
    - 'IndentationError: expected an indented block after ''if'' statement on line
      5'
    - 'IndentationError: expected an indented block after ''if'' statement on line
      5'
    - 'IndentationError: expected an indented block after ''if'' statement on line
      5'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" for\
    \ any value\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" for an\
    \ input of 1. This function prints an additional \"haa\" for an input greater\
    \ than 1 \n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - a3
  - a4
  - a5
  attempt_id: 2
  completion_from: "if size == 1:\n        print(\"ha\")\n    else:\n        print(\"\
    ha\" * size)\n\nlaugh(3)\n"
  completion_to: "for i in range(size):\n        print(\"h\", end=\"\")\n        for\
    \ j in range(i):\n            print(\"a\", end=\"\")\n        print(\" \", end=\"\
    \")\n    print(\"\\n\")\n"
  diff: "--- \n+++ \n@@ -4,22 +4,48 @@\n This function prints-\"ha\"-for an-input+'h'+and+adds+the+corresponding+amount\
    \ of-1.-This-function+a's+as+the+value+provided.+It+then+adds+a+space+to+the+output.+It+subtracts+1+from+the+value+and\
    \ prints-an-additional-\"haa\"-for-an-input-greater-than-1+another+h+with+less+a's+and+repeats+until+the+value+of+the+number+is+0\
    \ \"\"\""
  node_from: *id003
  node_to: &id004
    _node_tags: null
    id: 7
    stderr:
    - 'IndentationError: expected an indented block after ''for'' statement on line
      7'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      7'
    - 'IndentationError: expected an indented block after ''for'' statement on line
      7'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" for\
    \ an input of 1. This function prints an additional \"haa\" for an input greater\
    \ than 1 \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints an 'h' and adds\
    \ the corresponding amount of a's as the value provided. It then adds a space\
    \ to the output. It subtracts 1 from the value and prints another h with less\
    \ a's and repeats until the value of the number is 0\n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - d2
  - d3
  - d4
  - d5
  - d6
  attempt_id: 3
  completion_from: "for i in range(size):\n        print(\"h\", end=\"\")\n      \
    \  for j in range(i):\n            print(\"a\", end=\"\")\n        print(\" \"\
    , end=\"\")\n    print(\"\\n\")\n"
  completion_to: 'print("ha" * size)


    laugh(3)

    '
  diff: "--- \n+++ \n@@ -4,48 +4,6 @@\n This function prints-an-'h'-and-adds-the-corresponding-amount-of-a's-as-the-value-provided.-It-then-adds-a-space-to-the-output.-It-subtracts-1-from-the-value-and-prints-another-h-with-less-a's-and-repeats-until-the-value-of-the-number-is-0+\"\
    ha\"+once \"\"\""
  node_from: *id004
  node_to: &id005
    _node_tags: null
    id: 23
    stderr:
    - 'RecursionError: maximum recursion depth exceeded'
    - 'RecursionError: maximum recursion depth exceeded'
    - 'RecursionError: maximum recursion depth exceeded'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints an 'h' and\
    \ adds the corresponding amount of a's as the value provided. It then adds a space\
    \ to the output. It subtracts 1 from the value and prints another h with less\
    \ a's and repeats until the value of the number is 0\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" once\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - a1
  - a3
  - a5
  - a6
  - a2
  attempt_id: 4
  completion_from: 'print("ha" * size)


    laugh(3)

    '
  completion_to: "if size > 0:\n        print(\"ha\", end=\"\")\n        laugh(size-1)\n\
    \nlaugh(3)\n"
  diff: "--- \n+++ \n@@ -4,6 +4,44 @@\n This function prints-\"ha\"-once+'ha'+for+every+input+greater+than+zero.+If+the+input+is+greater+than+1+it+prints+an+h+with+an+increasing+amount+of+a's+for+every+value+from+1+until+the+input+until+it+reaches+the+value+of+the+input.\
    \ \"\"\""
  node_from: *id005
  node_to: &id006
    _node_tags: null
    id: 35
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'None

      '
    - 'None

      '
    - 'None

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" once\n\
    \    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints 'ha' for every\
    \ input greater than zero. If the input is greater than 1 it prints an h with\
    \ an increasing amount of a's for every value from 1 until the input until it\
    \ reaches the value of the input. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - d2
  - d3
  - d6
  attempt_id: 5
  completion_from: "if size > 0:\n        print(\"ha\", end=\"\")\n        laugh(size-1)\n\
    \nlaugh(3)\n"
  completion_to: "if size > 0:\n        print(\"ha\" * size)\n    else:\n        print(\"\
    \")\n\nlaugh(3)\nlaugh(0)\nlaugh(-1)"
  diff: "--- \n+++ \n@@ -4,44 +4,11 @@\n This function prints-'ha'+ha for every input\
    \ greater than zero.-If-the-input-is-greater-than-1-it-prints-an-h-with-an-increasing-amount-of-a's-for-every-value-from-1-until-the-input-until-it-reaches-the-value-of-the-input.\
    \ \"\"\""
  node_from: *id006
  node_to: *id003
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints 'ha' for every\
    \ input greater than zero. If the input is greater than 1 it prints an h with\
    \ an increasing amount of a's for every value from 1 until the input until it\
    \ reaches the value of the input. \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints ha for every\
    \ input greater than zero.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - 0
  attempt_id: 6
  completion_from: "if size > 0:\n        print(\"ha\" * size)\n    else:\n      \
    \  print(\"\")\n\nlaugh(3)\nlaugh(0)\nlaugh(-1)"
  completion_to: "for i in range(size):\n        print(\"ha\", end=\"\")\n    print(\"\
    !\")\n\nlaugh(3)\n"
  diff: "--- \n+++ \n@@ -4,7 +4,7 @@\n This function prints-ha+\"ha\" for every input"
  node_from: *id003
  node_to: *id007
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints ha for every\
    \ input greater than zero.\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" for every\
    \ input greater than zero.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - 0
  attempt_id: 7
  completion_from: "for i in range(size):\n        print(\"ha\", end=\"\")\n    print(\"\
    !\")\n\nlaugh(3)\n"
  completion_to: "for i in range(size):\n        print(\"ha\", end=\"\")\n    print(\"\
    !\")\n\nlaugh(3)\n"
  diff: "--- \n+++ \n@@ -7,7 +7,7 @@\n \"ha\" for every-input+value greater than zero."
  node_from: *id007
  node_to: *id007
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" for\
    \ every input greater than zero.\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" for every\
    \ value greater than zero.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - 0
  attempt_id: 8
  completion_from: "for i in range(size):\n        print(\"ha\", end=\"\")\n    print(\"\
    !\")\n\nlaugh(3)\n"
  completion_to: 'print(''ha''*size)


    laugh(5)

    '
  diff: "--- \n+++ \n@@ -4,11 +4,7 @@\n This function prints-\"ha\"-for-every-value-greater-than-zero.+a+string+'ha'\
    \ \"\"\""
  node_from: *id007
  node_to: *id005
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" for\
    \ every value greater than zero.\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints a string 'ha'\n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - 0
  attempt_id: 9
  completion_from: 'print(''ha''*size)


    laugh(5)

    '
  completion_to: 'print("ha" * size)


    laugh(3)

    '
  diff: "--- \n+++ \n@@ -4,7 +4,5 @@\n This function prints-a-string-'ha'+ha \"\"\""
  node_from: *id005
  node_to: *id005
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints a string 'ha'\n\
    \    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints ha\n    \"\"\"\
    \n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - d1
  attempt_id: 10
  completion_from: 'print("ha" * size)


    laugh(3)

    '
  completion_to: 'return "ha" + "ha" * size


    print(laugh(3))

    '
  diff: "--- \n+++ \n@@ -4,5 +4,6 @@\n This function prints-ha+a+word \"\"\""
  node_from: *id005
  node_to: &id008
    _node_tags: null
    id: 30
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hahahahaha

      '
    - 'haha

      '
    - 'hahahaha

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints ha\n    \"\"\
    \"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints a word\n    \"\
    \"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - a1
  - a4
  - a6
  attempt_id: 11
  completion_from: 'return "ha" + "ha" * size


    print(laugh(3))

    '
  completion_to: "ha = \"ha\"\n    print(ha * size, end=\" \")\n    return\n\nlaugh(3)\n"
  diff: "--- \n+++ \n@@ -4,6 +4,12 @@\n This function prints-a-word+ha+times+the+input+value+with+spaces+between\
    \ \"\"\""
  node_from: *id008
  node_to: *id006
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints a word\n  \
    \  \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints ha times the\
    \ input value with spaces between\n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - d3
  - d4
  - d6
  attempt_id: 12
  completion_from: "ha = \"ha\"\n    print(ha * size, end=\" \")\n    return\n\nlaugh(3)\n"
  completion_to: 'print("ha" * size)


    laugh(10)

    '
  diff: "--- \n+++ \n@@ -5,11 +5,4 @@\n function prints ha-times-the-input-value-with-spaces-between\
    \ \"\"\""
  node_from: *id006
  node_to: *id005
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints ha times the\
    \ input value with spaces between\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints ha \n    \"\"\
    \"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - d1
  attempt_id: 13
  completion_from: 'print("ha" * size)


    laugh(10)

    '
  completion_to: 'print("ha" * size + "!")


    laugh(3)

    '
  diff: "--- \n+++ \n@@ -4,5 +4,6 @@\n This function prints-ha+a+word \"\"\""
  node_from: *id005
  node_to: *id005
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints ha \n    \"\
    \"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints a word\n    \"\
    \"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - a1
  - a3
  - a6
  attempt_id: 14
  completion_from: 'print("ha" * size + "!")


    laugh(3)

    '
  completion_to: 'print("ha" * size)


    laugh(10)

    '
  diff: "--- \n+++ \n@@ -4,6 +4,9 @@\n This function prints-a-word+\"ha\"+times+the+value+inputted\
    \ \"\"\""
  node_from: *id005
  node_to: *id005
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints a word\n  \
    \  \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" times\
    \ the value inputted \n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - 0
  attempt_id: 15
  completion_from: 'print("ha" * size)


    laugh(10)

    '
  completion_to: 'print("ha" * size)


    laugh(3)

    '
  diff: "--- \n+++ \n@@ -5,7 +5,11 @@\n function prints \"ha\"+the+amount+of times+as\
    \ the value inputted"
  node_from: *id005
  node_to: *id005
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" times\
    \ the value inputted \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" the amount\
    \ of times as the value inputted \n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - a3
  - a5
  - m6
  attempt_id: 16
  completion_from: 'print("ha" * size)


    laugh(3)

    '
  completion_to: "if size > 1:\n        print(\"h\" + \"a\" * size)\n        laugh(size\
    \ - 1)\n    else:\n        print(\"h\" + \"a\" * size)\n\nlaugh(3)"
  diff: "--- \n+++ \n@@ -5,12 +5,24 @@\n function prints \"ha\"+for+any+input.+This+function+prints+an+h+with+increasing+amounts+of+a+if\
    \ the-amount-of-times-as-the-value-inputted+input+is+larger+than+1. \"\"\""
  node_from: *id005
  node_to: &id009
    _node_tags: null
    id: 10
    stderr:
    - 'IndentationError: expected an indented block after ''else'' statement on line
      8'
    - 'IndentationError: expected an indented block after ''else'' statement on line
      8'
    - 'IndentationError: expected an indented block after ''else'' statement on line
      8'
    stdout:
    - ''
    - ''
    - ''
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" the\
    \ amount of times as the value inputted \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" for any\
    \ input. This function prints an h with increasing amounts of a if the input is\
    \ larger than 1. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - a2
  - m3
  - m4
  - m5
  - m6
  attempt_id: 17
  completion_from: "if size > 1:\n        print(\"h\" + \"a\" * size)\n        laugh(size\
    \ - 1)\n    else:\n        print(\"h\" + \"a\" * size)\n\nlaugh(3)"
  completion_to: "if size == 1:\n        print(\"ha\")\n    elif size == 2:\n    \
    \    print(\"ha ha\")\n    elif size == 3:\n        print(\"ha ha ha\")\n    elif\
    \ size == 4:\n        print(\"ha ha ha ha\")\n    elif size == 5:\n        print(\"\
    ha ha ha ha ha\")\n    elif size == 6:\n        print(\"ha ha ha ha ha ha\")\n\
    \    el"
  diff: "--- \n+++ \n@@ -6,23 +6,31 @@\n prints \"ha\" for-any-input.+a+value+of+1.\
    \ This function prints-an-h-with-increasing-amounts+\"haaaa+haaa+haa+ha\"+for+a+value\
    \ of+4.+This+function+prints+\"haaa+haa+ha\"+for a-if-the-input-is-larger-than-1.+value+of+3.\
    \ \"\"\""
  node_from: *id009
  node_to: *id003
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" for\
    \ any input. This function prints an h with increasing amounts of a if the input\
    \ is larger than 1. \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" for a\
    \ value of 1. This function prints \"haaaa haaa haa ha\" for a value of 4. This\
    \ function prints \"haaa haa ha\" for a value of 3. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - l3
  - d2
  - d4
  attempt_id: 18
  completion_from: "if size == 1:\n        print(\"ha\")\n    elif size == 2:\n  \
    \      print(\"ha ha\")\n    elif size == 3:\n        print(\"ha ha ha\")\n  \
    \  elif size == 4:\n        print(\"ha ha ha ha\")\n    elif size == 5:\n    \
    \    print(\"ha ha ha ha ha\")\n    elif size == 6:\n        print(\"ha ha ha\
    \ ha ha ha\")\n    el"
  completion_to: "print(\"ha\" + \"a\"*size)\n    \nlaugh(3)\n"
  diff: "--- \n+++ \n@@ -12,25 +12,25 @@\n 1. This function-prints-\"haaaa-haaa-haa-ha\"\
    -for-a-value+uses+size+to+determine+the+amount of-4.-This-function-prints-\"haaa-haa-ha\"\
    -for-a-value+times+ha+is+printed+and+the+length of-3.+a's+that+appear+after+the+h.\
    \ \"\"\""
  node_from: *id003
  node_to: *id005
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" for\
    \ a value of 1. This function prints \"haaaa haaa haa ha\" for a value of 4. This\
    \ function prints \"haaa haa ha\" for a value of 3. \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" for a\
    \ value of 1. This function uses size to determine the amount of times ha is printed\
    \ and the length of a's that appear after the h. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - d5
  attempt_id: 19
  completion_from: "print(\"ha\" + \"a\"*size)\n    \nlaugh(3)\n"
  completion_to: "ha = \"ha\"\n    a = \"a\"\n    print(ha * size + a * size)\n\n\
    laugh(3)\n"
  diff: "--- \n+++ \n@@ -1,15 +1,6 @@\n def laugh(size): \"\"\"-This-function-prints-\"\
    ha\"-for-a-value-of-1. This function uses@@ -20,7 +11,7 @@\n amount of times-ha+\"\
    ha\" is printed and"
  node_from: *id005
  node_to: *id006
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function prints \"ha\" for\
    \ a value of 1. This function uses size to determine the amount of times ha is\
    \ printed and the length of a's that appear after the h. \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function uses size to determine\
    \ the amount of times \"ha\" is printed and the length of a's that appear after\
    \ the h. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - 0
  attempt_id: 20
  completion_from: "ha = \"ha\"\n    a = \"a\"\n    print(ha * size + a * size)\n\n\
    laugh(3)\n"
  completion_to: "ha = \"ha\"\n    ha_size = \"ha\" * size\n    return ha_size + \"\
    !\"\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -4,7 +4,7 @@\n This function uses-size+laugh to determine\
    \ the"
  node_from: *id006
  node_to: &id010
    _node_tags: null
    id: 16
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hahahaha!

      '
    - 'ha!

      '
    - 'hahaha!

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function uses size to determine\
    \ the amount of times \"ha\" is printed and the length of a's that appear after\
    \ the h. \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function uses laugh to determine\
    \ the amount of times \"ha\" is printed and the length of a's that appear after\
    \ the h. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - 0
  attempt_id: 21
  completion_from: "ha = \"ha\"\n    ha_size = \"ha\" * size\n    return ha_size +\
    \ \"!\"\n\nprint(laugh(3))\n"
  completion_to: "laugh = \"ha\"\n    laugh += \"ha\" * (size - 1)\n    laugh += \"\
    !\"\n    return laugh\n\nprint(laugh(3))"
  diff: ''
  node_from: *id010
  node_to: *id010
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function uses laugh to determine\
    \ the amount of times \"ha\" is printed and the length of a's that appear after\
    \ the h. \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function uses laugh to determine\
    \ the amount of times \"ha\" is printed and the length of a's that appear after\
    \ the h. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - 0
  attempt_id: 22
  completion_from: "laugh = \"ha\"\n    laugh += \"ha\" * (size - 1)\n    laugh +=\
    \ \"!\"\n    return laugh\n\nprint(laugh(3))"
  completion_to: 'return "ha" + "ha" * (size - 1) + "!"


    print(laugh(3))

    '
  diff: "--- \n+++ \n@@ -11,7 +11,7 @@\n amount of times-\"ha\"+ha is printed and"
  node_from: *id010
  node_to: *id010
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function uses laugh to determine\
    \ the amount of times \"ha\" is printed and the length of a's that appear after\
    \ the h. \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function uses laugh to determine\
    \ the amount of times ha is printed and the length of a's that appear after the\
    \ h. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - d3
  attempt_id: 23
  completion_from: 'return "ha" + "ha" * (size - 1) + "!"


    print(laugh(3))

    '
  completion_to: "ha = \"ha\"\n    return ha * size\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -4,6 +4,9 @@\n This function uses+the+size+of laugh to determine@@\
    \ -14,14 +17,4 @@\n ha is printed-and-the-length-of-a's-that-appear-after-the-h.\
    \ \"\"\""
  node_from: *id010
  node_to: *id011
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function uses laugh to determine\
    \ the amount of times ha is printed and the length of a's that appear after the\
    \ h. \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function uses the size of laugh\
    \ to determine the amount of times ha is printed \n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - a1
  - m2
  - m3
  - m6
  attempt_id: 24
  completion_from: "ha = \"ha\"\n    return ha * size\n\nprint(laugh(3))\n"
  completion_to: "for i in range(size):\n        print(\"ha\", end=\"\")\n    print(\"\
    h\")\n"
  diff: "--- \n+++ \n@@ -16,5 +16,35 @@\n times ha is-printed+printed.+This+function+creates+a+loop+in+which+it+prints+an+h+with+a's+the+size+of+laugh+then+subtracts+1+from+the+size+and+prints+an+h+with+less+a's\
    \ \"\"\""
  node_from: *id011
  node_to: *id007
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function uses the size of laugh\
    \ to determine the amount of times ha is printed \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function uses the size of laugh\
    \ to determine the amount of times ha is printed. This function creates a loop\
    \ in which it prints an h with a's the size of laugh then subtracts 1 from the\
    \ size and prints an h with less a's\n    \"\"\"\n    "
  state: neutral
  total_attempts: 26
  username: student2
- _edge_tags:
  - a5
  attempt_id: 25
  completion_from: "for i in range(size):\n        print(\"ha\", end=\"\")\n    print(\"\
    h\")\n"
  completion_to: "for i in range(size):\n        print(\"h\" + \"a\"*i + \"h\")\n\
    \    for i in range(size-1,0,-1):\n        print(\"h\" + \"a\"*i + \"h\")\n"
  diff: "--- \n+++ \n@@ -14,7 +14,8 @@\n amount of times-ha+an+h is printed. This@@\
    \ -30,10 +31,13 @@\n h with a's+after+it the size of-laugh+laugh.+It then subtracts\
    \ 1@@ -46,5 +50,15 @@\n h with less-a's+a's.+It+does+this+until+it+reaches+a+value+of+1\
    \ \"\"\""
  node_from: *id007
  node_to: *id007
  prompt_from: "def laugh(size):\n    \"\"\"\n    This function uses the size of laugh\
    \ to determine the amount of times ha is printed. This function creates a loop\
    \ in which it prints an h with a's the size of laugh then subtracts 1 from the\
    \ size and prints an h with less a's\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    This function uses the size of laugh\
    \ to determine the amount of times an h is printed. This function creates a loop\
    \ in which it prints an h with a's after it the size of laugh. It then subtracts\
    \ 1 from the size and prints an h with less a's. It does this until it reaches\
    \ a value of 1\n    \"\"\"\n    "
  state: fail
  total_attempts: 26
  username: student2
- _edge_tags:
  - 0
  attempt_id: 1
  completion_from: 'return "ha" + "ha" * (size - 1)


    print laugh(3)'
  completion_to: "if size < 1:\n        return 'h'\n    else:\n        return 'h'\
    \ + 'a' * size + 'h'\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -3,19 +3,20 @@\n \"\"\" take in-a-number+an+integer and write\
    \ the-word-'ha'+string+'h'+'a', but-with+add as many-'a's+'a' as the-number+integer+amount\
    \ \"\"\""
  node_from: &id031
    _node_tags: null
    id: 9
    stderr:
    - 'SyntaxError: Missing parentheses in call to ''print''. Did you mean print(...)?'
    - 'SyntaxError: Missing parentheses in call to ''print''. Did you mean print(...)?'
    - 'SyntaxError: Missing parentheses in call to ''print''. Did you mean print(...)?'
    stdout:
    - ''
    - ''
    - ''
  node_to: &id012
    _node_tags: null
    id: 5
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'haaaah

      '
    - 'hah

      '
    - 'haaah

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    take in a number and write the word\
    \ 'ha' but with as many 'a's as the number\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    take in an integer and write the string\
    \ 'h'+'a', but add as many 'a' as the integer amount\n    \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student22
- _edge_tags:
  - 0
  attempt_id: 2
  completion_from: "if size < 1:\n        return 'h'\n    else:\n        return 'h'\
    \ + 'a' * size + 'h'\n\nprint(laugh(3))\n"
  completion_to: 'return ''h'' + ''a'' * size + ''h''

    '
  diff: "--- \n+++ \n@@ -9,14 +9,7 @@\n write the string-'h'+'a',-but-add-as-many-'a'-as-the+'h'+'a'+*\
    \ integer-amount \"\"\""
  node_from: *id012
  node_to: *id012
  prompt_from: "def laugh(size):\n    \"\"\"\n    take in an integer and write the\
    \ string 'h'+'a', but add as many 'a' as the integer amount\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    take in an integer and write the string\
    \ 'h'+'a' * integer\n    \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student22
- _edge_tags:
  - l3
  attempt_id: 3
  completion_from: 'return ''h'' + ''a'' * size + ''h''

    '
  completion_to: 'return "ha" * size


    print(laugh(3))

    '
  diff: "--- \n+++ \n@@ -7,9 +7,11 @@\n integer and write+'ha'+as+many+times+as the-string-'h'+'a'-*\
    \ integer \"\"\""
  node_from: *id012
  node_to: *id011
  prompt_from: "def laugh(size):\n    \"\"\"\n    take in an integer and write the\
    \ string 'h'+'a' * integer\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    take in an integer and write 'ha'\
    \ as many times as the integer\n    \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student22
- _edge_tags:
  - a4
  attempt_id: 4
  completion_from: 'return "ha" * size


    print(laugh(3))

    '
  completion_to: "ha = \"ha\"\n    print(ha * size)\n\nlaugh(3)\n"
  diff: "--- \n+++ \n@@ -7,7 +7,8 @@\n integer and write-'ha'+'ha+' as many times"
  node_from: *id011
  node_to: *id006
  prompt_from: "def laugh(size):\n    \"\"\"\n    take in an integer and write 'ha'\
    \ as many times as the integer\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    take in an integer and write 'ha '\
    \ as many times as the integer\n    \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student22
- _edge_tags:
  - d1
  - d4
  attempt_id: 5
  completion_from: "ha = \"ha\"\n    print(ha * size)\n\nlaugh(3)\n"
  completion_to: 'return "ha" * size + "!"


    print(laugh(3))

    '
  diff: "--- \n+++ \n@@ -6,13 +6,11 @@\n an integer and-write-'ha-'-as+add+that many-times-as-the-integer+'a'+to+a+string\
    \ \"\"\""
  node_from: *id006
  node_to: *id010
  prompt_from: "def laugh(size):\n    \"\"\"\n    take in an integer and write 'ha\
    \ ' as many times as the integer\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    take in an integer and add that many\
    \ 'a' to a string\n    \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student22
- _edge_tags:
  - a1
  - m2
  attempt_id: 6
  completion_from: 'return "ha" * size + "!"


    print(laugh(3))

    '
  completion_to: "if size == 0:\n        return 'h'\n    else:\n        return 'ha'\
    \ + laugh(size - 1)\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -6,11 +6,14 @@\n an integer and-add-that-many-'a'+write+a+decreasing+amount+of+'a's+next\
    \ to-a-string+an+'h' \"\"\""
  node_from: *id010
  node_to: &id020
    _node_tags: null
    id: 12
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hahahahah

      '
    - 'hah

      '
    - 'hahahah

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    take in an integer and add that\
    \ many 'a' to a string\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    take in an integer and write a decreasing\
    \ amount of 'a's next to an 'h'\n    \"\"\"\n    "
  state: fail
  total_attempts: 7
  username: student22
- _edge_tags:
  - 0
  attempt_id: 1
  completion_from: "for i in range(size,0,-1):\n        print(\"h\"+\"a\"*i+\" \"\
    )\n    print(\"h\")\n\nlaugh(3)\n"
  completion_to: "laugh = \"\"\n    for i in range(size):\n        laugh += \"ha\"\
    *(size-i) + \" \"\n    return laugh\n"
  diff: "--- \n+++ \n@@ -12,13 +12,19 @@\n as an input,+creates+an+empty+string+called+laugh,\
    \ and uses a for loop to-print+append an h followed@@ -44,11 +50,14 @@\n etc.\
    \ until it-prints-a+appends+an h followed by one a+all+into+laugh \"\"\""
  node_from: *id007
  node_to: &id013
    _node_tags: null
    id: 13
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - "hahahaha hahaha haha ha \n"
    - "ha \n"
    - "hahaha haha ha \n"
  prompt_from: "def laugh(size):\n    \"\"\"\n    Write a function which takes an\
    \ integer size as an input, and uses a for loop to print an h followed by size\
    \ a's and then a space, and then an h followed by size-1 a's and then a space,\
    \ etc. until it prints a h followed by one a\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    Write a function which takes an integer\
    \ size as an input, creates an empty string called laugh, and uses a for loop\
    \ to append an h followed by size a's and then a space, and then an h followed\
    \ by size-1 a's and then a space, etc. until it appends an h followed by one a\
    \ all into laugh\n    \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student37
- _edge_tags:
  - m3
  - m6
  attempt_id: 2
  completion_from: "laugh = \"\"\n    for i in range(size):\n        laugh += \"ha\"\
    *(size-i) + \" \"\n    return laugh\n"
  completion_to: "laugh = \"\"\n    for i in range(size):\n        laugh += \"h\"\
    \ + \"a\"*i + \" \"\n    return laugh\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -19,45 +19,55 @@\n called laugh, and-uses+then+executes a\
    \ for loop-to-append+with+i+in+range+size+where+i+is+decreased+by+one+after+each+iteration,+and+the+contents+of+the+for+loop+is+that\
    \ an h followed by-size+i+number+of a's and-then a-space,+space+is+appended+to+laugh,\
    \ and then-an-h-followed-by-size-1-a's-and-then-a-space,-etc.-until-it-appends-an-h-followed-by-one-a-all-into\
    \ laugh+is+returned+after+the+loop \"\"\""
  node_from: *id013
  node_to: &id014
    _node_tags: null
    id: 19
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - "h ha haa haaa \n"
    - "h \n"
    - "h ha haa \n"
  prompt_from: "def laugh(size):\n    \"\"\"\n    Write a function which takes an\
    \ integer size as an input, creates an empty string called laugh, and uses a for\
    \ loop to append an h followed by size a's and then a space, and then an h followed\
    \ by size-1 a's and then a space, etc. until it appends an h followed by one a\
    \ all into laugh\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    Write a function which takes an integer\
    \ size as an input, creates an empty string called laugh, and then executes a\
    \ for loop with i in range size where i is decreased by one after each iteration,\
    \ and the contents of the for loop is that an h followed by i number of a's and\
    \ a space is appended to laugh, and then laugh is returned after the loop\n  \
    \  \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student37
- _edge_tags:
  - m5
  attempt_id: 3
  completion_from: "laugh = \"\"\n    for i in range(size):\n        laugh += \"h\"\
    \ + \"a\"*i + \" \"\n    return laugh\n\nprint(laugh(3))\n"
  completion_to: "laugh = \"\"\n    for i in range(size, 0, -1):\n        laugh +=\
    \ \"h\" + \"a\" * i + \" \"\n    return laugh\n"
  diff: "--- \n+++ \n@@ -37,7 +37,12 @@\n one after each-iteration,+iteration+and+i+starts+at+size,\
    \ and the contents"
  node_from: *id014
  node_to: &id015
    _node_tags: null
    id: 2
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - "haaaa haaa haa ha \n"
    - "ha \n"
    - "haaa haa ha \n"
  prompt_from: "def laugh(size):\n    \"\"\"\n    Write a function which takes an\
    \ integer size as an input, creates an empty string called laugh, and then executes\
    \ a for loop with i in range size where i is decreased by one after each iteration,\
    \ and the contents of the for loop is that an h followed by i number of a's and\
    \ a space is appended to laugh, and then laugh is returned after the loop\n  \
    \  \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    Write a function which takes an integer\
    \ size as an input, creates an empty string called laugh, and then executes a\
    \ for loop with i in range size where i is decreased by one after each iteration\
    \ and i starts at size, and the contents of the for loop is that an h followed\
    \ by i number of a's and a space is appended to laugh, and then laugh is returned\
    \ after the loop\n    \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student37
- _edge_tags:
  - a5
  attempt_id: 4
  completion_from: "laugh = \"\"\n    for i in range(size, 0, -1):\n        laugh\
    \ += \"h\" + \"a\" * i + \" \"\n    return laugh\n"
  completion_to: "laugh = ''\n    for i in range(size-2, 0, -1):\n        laugh +=\
    \ 'h' + i*'a' + ' '\n    laugh += 'ha'\n    return laugh\n"
  diff: "--- \n+++ \n@@ -28,7 +28,7 @@\n i in range-size+size-2 where i is@@ -69,10\
    \ +69,13 @@\n laugh, and then+after+the+loop,+append+'ha'+and laugh is returned-after-the-loop\
    \ \"\"\""
  node_from: *id015
  node_to: &id016
    _node_tags: null
    id: 31
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'haa ha ha

      '
    - 'ha

      '
    - 'ha ha

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    Write a function which takes an\
    \ integer size as an input, creates an empty string called laugh, and then executes\
    \ a for loop with i in range size where i is decreased by one after each iteration\
    \ and i starts at size, and the contents of the for loop is that an h followed\
    \ by i number of a's and a space is appended to laugh, and then laugh is returned\
    \ after the loop\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    Write a function which takes an integer\
    \ size as an input, creates an empty string called laugh, and then executes a\
    \ for loop with i in range size-2 where i is decreased by one after each iteration\
    \ and i starts at size, and the contents of the for loop is that an h followed\
    \ by i number of a's and a space is appended to laugh, and then after the loop,\
    \ append 'ha' and laugh is returned\n    \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student37
- _edge_tags:
  - l2
  - m4
  attempt_id: 5
  completion_from: "laugh = ''\n    for i in range(size-2, 0, -1):\n        laugh\
    \ += 'h' + i*'a' + ' '\n    laugh += 'ha'\n    return laugh\n"
  completion_to: "laugh = \"\"\n    for i in range(1, size+1):\n        laugh += \"\
    \ \"*(i-1) + \"h\" + \"i\"*i\n    return laugh\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -19,63 +19,33 @@\n called laugh, and-then-executes+the+uses\
    \ a for loop-with-i-in-range-size-2-where-i-is-decreased-by-one-after-each-iteration-and-i-starts-at-size,-and-the-contents-of-the-for-loop-is-that+to+append\
    \ an h followed by i-number-of a's-and+for+each+0<i<=size,+append a space-is-appended-to-laugh,-and-then-after+before+each+h+except\
    \ the-loop,-append-'ha'-and-laugh-is-returned+first+h+in+the+string \"\"\""
  node_from: *id016
  node_to: &id017
    _node_tags: null
    id: 27
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hi hii  hiii   hiiii

      '
    - 'hi

      '
    - 'hi hii  hiii

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    Write a function which takes an\
    \ integer size as an input, creates an empty string called laugh, and then executes\
    \ a for loop with i in range size-2 where i is decreased by one after each iteration\
    \ and i starts at size, and the contents of the for loop is that an h followed\
    \ by i number of a's and a space is appended to laugh, and then after the loop,\
    \ append 'ha' and laugh is returned\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    Write a function which takes an integer\
    \ size as an input, creates an empty string called laugh, and the uses a for loop\
    \ to append an h followed by i a's for each 0<i<=size, append a space before each\
    \ h except the first h in the string\n    \"\"\"\n    "
  state: neutral
  total_attempts: 7
  username: student37
- _edge_tags:
  - a2
  attempt_id: 6
  completion_from: "laugh = \"\"\n    for i in range(1, size+1):\n        laugh +=\
    \ \" \"*(i-1) + \"h\" + \"i\"*i\n    return laugh\n\nprint(laugh(3))\n"
  completion_to: "laugh = \"\"\n    for i in range(size, 0, -1):\n        laugh +=\
    \ \"h\" + \"a\"*i + \" \"\n    return laugh[:-1]\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -31,10 +31,16 @@\n followed by i+number a's for each-0<i<=size,+0<i<=size+starting+with+i+=+size,\
    \ append a space"
  node_from: *id017
  node_to: &id019
    _node_tags: null
    id: 11
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'haaaa haaa haa ha

      '
    - 'ha

      '
    - 'haaa haa ha

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    Write a function which takes an\
    \ integer size as an input, creates an empty string called laugh, and the uses\
    \ a for loop to append an h followed by i a's for each 0<i<=size, append a space\
    \ before each h except the first h in the string\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    Write a function which takes an integer\
    \ size as an input, creates an empty string called laugh, and the uses a for loop\
    \ to append an h followed by i number a's for each 0<i<=size starting with i =\
    \ size, append a space before each h except the first h in the string\n    \"\"\
    \"\n    "
  state: success
  total_attempts: 7
  username: student37
- _edge_tags:
  - 0
  attempt_id: 1
  completion_from: "ha = \"ha\"\n    ha_string = \"\"\n    for i in range(size):\n\
    \        ha_string += ha * i\n        ha_string += \" \"\n    return ha_string\
    \ + \"!\"\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"\"\n    else:\n        return \"\
    ha\" + \"a\" * (size - 1) + laugh(size - 1)\n\nprint(laugh(4))\n"
  diff: "--- \n+++ \n@@ -17,28 +17,29 @@\n a string with-the-ha+\"ha\" as many times\
    \ as the input-but-also+int.+However+each+respective+\"ha\"+has+as+many+a's+as\
    \ the+current number of-a's-is-based-on-the-number-it-is-currently-working-with+'ha's+left+to+produce.\
    \ \"\"\""
  node_from: &id032
    _node_tags: null
    id: 20
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - ' ha haha hahaha !

      '
    - ' !

      '
    - ' ha haha !

      '
  node_to: &id018
    _node_tags: null
    id: 6
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'haaaahaaahaaha

      '
    - 'ha

      '
    - 'haaahaaha

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    the function laugh will take the\
    \ input of an int and should output a string with the ha as many times as the\
    \ input but also the number of a's is based on the number it is currently working\
    \ with\n\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    the function laugh will take the input\
    \ of an int and should output a string with \"ha\" as many times as the input\
    \ int. However each respective \"ha\" has as many a's as the current number of\
    \ 'ha's left to produce. \n\n\n    \"\"\"\n    "
  state: neutral
  total_attempts: 4
  username: student5
- _edge_tags:
  - a4
  attempt_id: 2
  completion_from: "if size == 0:\n        return \"\"\n    else:\n        return\
    \ \"ha\" + \"a\" * (size - 1) + laugh(size - 1)\n\nprint(laugh(4))\n"
  completion_to: "if size == 0:\n        return \"\"\n    else:\n        return \"\
    ha\" + \"a\" * (size - 1) + \" \" + laugh(size - 1)\n\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -42,4 +42,12 @@\n left to produce.+and+add+a+space+in+between+the+ha's\
    \ \"\"\""
  node_from: *id018
  node_to: *id015
  prompt_from: "def laugh(size):\n    \"\"\"\n    the function laugh will take the\
    \ input of an int and should output a string with \"ha\" as many times as the\
    \ input int. However each respective \"ha\" has as many a's as the current number\
    \ of 'ha's left to produce. \n\n\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    the function laugh will take the input\
    \ of an int and should output a string with \"ha\" as many times as the input\
    \ int. However each respective \"ha\" has as many a's as the current number of\
    \ 'ha's left to produce. and add a space in between the ha's\n\n\n    \"\"\"\n\
    \    "
  state: neutral
  total_attempts: 4
  username: student5
- _edge_tags:
  - m4
  attempt_id: 3
  completion_from: "if size == 0:\n        return \"\"\n    else:\n        return\
    \ \"ha\" + \"a\" * (size - 1) + \" \" + laugh(size - 1)\n\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"\"\n    else:\n        return \"\
    ha\" + \"a\" * (size - 1) + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -38,7 +38,7 @@\n current number of-'ha's+\"ha\"s left to produce.@@\
    \ -50,4 +50,10 @@\n between the ha's+but+not+at+the+very+end. \"\"\""
  node_from: *id015
  node_to: *id015
  prompt_from: "def laugh(size):\n    \"\"\"\n    the function laugh will take the\
    \ input of an int and should output a string with \"ha\" as many times as the\
    \ input int. However each respective \"ha\" has as many a's as the current number\
    \ of 'ha's left to produce. and add a space in between the ha's\n\n\n    \"\"\"\
    \n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    the function laugh will take the input\
    \ of an int and should output a string with \"ha\" as many times as the input\
    \ int. However each respective \"ha\" has as many a's as the current number of\
    \ \"ha\"s left to produce. and add a space in between the ha's but not at the\
    \ very end. \n\n\n    \"\"\"\n    "
  state: fail
  total_attempts: 4
  username: student5
- _edge_tags:
  - d4
  - m5
  attempt_id: 1
  completion_from: "if size == 1:\n        return 'ha'\n    else:\n        return\
    \ 'ha' + 'a' * (size - 1) + ' ' + laugh(size - 1)\n\nprint(laugh(3))"
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    ha\" + laugh(size - 1)\n\nprint(laugh(3))"
  diff: "--- \n+++ \n@@ -15,17 +15,14 @@\n lower amount of-'a'.-Function-also-adds-a-space-between-every-'ha'-except+'a'+until+it+reaches+only+1+'a'+after\
    \ the-last-one+'h' \"\"\""
  node_from: *id019
  node_to: *id020
  prompt_from: "def laugh(size):\n    \"\"\"\n    function adds 'a' to every 'h' based\
    \ on input and will lower amount of 'a'. Function also adds a space between every\
    \ 'ha' except the last one\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    function adds 'a' to every 'h' based\
    \ on input and will lower amount of 'a' until it reaches only 1 'a' after the\
    \ 'h'\n    \"\"\"\n    "
  state: neutral
  total_attempts: 3
  username: student61
- _edge_tags:
  - a4
  - d5
  attempt_id: 2
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"ha\" + laugh(size - 1)\n\nprint(laugh(3))"
  completion_to: "if size > 0:\n        return 'ha' + 'a' * (size - 1) + ' ' + laugh(size\
    \ - 1)\n    else:\n        return ''\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -15,14 +15,13 @@\n lower amount of-'a'-until-it-reaches-only-1-'a'-after-the-'h'+'a'.+Function+also+adds+a+space+between+every+'ha'\
    \ \"\"\""
  node_from: *id020
  node_to: *id015
  prompt_from: "def laugh(size):\n    \"\"\"\n    function adds 'a' to every 'h' based\
    \ on input and will lower amount of 'a' until it reaches only 1 'a' after the\
    \ 'h'\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    function adds 'a' to every 'h' based\
    \ on input and will lower amount of 'a'. Function also adds a space between every\
    \ 'ha'\n    \"\"\"\n    "
  state: fail
  total_attempts: 3
  username: student61
- _edge_tags:
  - m5
  attempt_id: 1
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"h\" + \"a\"*size + \" \" + laugh(size-1)\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    ha\" + laugh(size - 1)\n"
  diff: "--- \n+++ \n@@ -31,5 +31,11 @@\n for each word-after.+after+until+count+of+a+=+1.\
    \ \"\"\""
  node_from: &id024
    _node_tags: null
    id: 15
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'haaaa haaa haa ha h

      '
    - 'ha h

      '
    - 'haaa haa ha h

      '
  node_to: *id020
  prompt_from: "def laugh(size):\n    \"\"\"\n    Produce a string, with each word\
    \ starting with h and then however many a's the input says. Decrease the count\
    \ of a's by one following the h for each word after.\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    Produce a string, with each word starting\
    \ with h and then however many a's the input says. Decrease the count of a's by\
    \ one following the h for each word after until count of a = 1.\n    \"\"\"\n\
    \    "
  state: neutral
  total_attempts: 5
  username: student72
- _edge_tags:
  - m5
  attempt_id: 2
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"ha\" + laugh(size - 1)\n"
  completion_to: "if size == 0:\n        return \"ha\"\n    else:\n        return\
    \ \"ha\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -31,10 +31,9 @@\n for each word-after-until-count-of+after.+Stop+when\
    \ a = 1."
  node_from: *id020
  node_to: &id021
    _node_tags: null
    id: 25
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'haaaaa haaaa haaa haa ha

      '
    - 'haa ha

      '
    - 'haaaa haaa haa ha

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    Produce a string, with each word\
    \ starting with h and then however many a's the input says. Decrease the count\
    \ of a's by one following the h for each word after until count of a = 1.\n  \
    \  \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    Produce a string, with each word starting\
    \ with h and then however many a's the input says. Decrease the count of a's by\
    \ one following the h for each word after. Stop when a = 1.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student72
- _edge_tags:
  - l5
  attempt_id: 3
  completion_from: "if size == 0:\n        return \"ha\"\n    else:\n        return\
    \ \"ha\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    ha\" + laugh(size - 1)\n"
  diff: "--- \n+++ \n@@ -36,5 +36,5 @@\n when a =-1.+2. \"\"\""
  node_from: *id021
  node_to: *id020
  prompt_from: "def laugh(size):\n    \"\"\"\n    Produce a string, with each word\
    \ starting with h and then however many a's the input says. Decrease the count\
    \ of a's by one following the h for each word after. Stop when a = 1.\n    \"\"\
    \"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    Produce a string, with each word starting\
    \ with h and then however many a's the input says. Decrease the count of a's by\
    \ one following the h for each word after. Stop when a = 2.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 5
  username: student72
- _edge_tags:
  - m5
  attempt_id: 4
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"ha\" + laugh(size - 1)\n"
  completion_to: "if size == 0:\n        return \"ha\"\n    else:\n        return\
    \ \"ha\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -33,8 +33,13 @@\n word after. Stop-when-a-=-2.+after+the+last+word+in+the+string+is+ha.\
    \ \"\"\""
  node_from: *id020
  node_to: *id021
  prompt_from: "def laugh(size):\n    \"\"\"\n    Produce a string, with each word\
    \ starting with h and then however many a's the input says. Decrease the count\
    \ of a's by one following the h for each word after. Stop when a = 2.\n    \"\"\
    \"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    Produce a string, with each word starting\
    \ with h and then however many a's the input says. Decrease the count of a's by\
    \ one following the h for each word after. Stop after the last word in the string\
    \ is ha.\n    \"\"\"\n    "
  state: fail
  total_attempts: 5
  username: student72
- _edge_tags:
  - m2
  - m4
  - m5
  - m6
  attempt_id: 1
  completion_from: 'return "ha"*size + " "*(size-1) + "ha"*size


    print(laugh(3))

    '
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    ha\" + laugh(size-1) + \"h\"\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -7,20 +7,9 @@\n the input value,+the+function returns-a-combination-of-n-strings,-where-each-of-the-n-strings-consists-of\
    \ \"h\" followed by@@ -28,16 +17,23 @@\n occurrences of \"a\",-and-there-is+then\
    \ \"-\"-before-each-\"h\"-except+h\"+followed+by+n-1+occurrences+of+\"a\",+until\
    \ the-first-\"h\".+last+two+characters+in+the+string+are+\"ha\". \"\"\""
  node_from: &id033
    _node_tags: null
    id: 24
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hahahaha   hahahaha

      '
    - 'haha

      '
    - 'hahaha  hahaha

      '
  node_to: &id022
    _node_tags: null
    id: 18
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hahahahahhhhh

      '
    - 'hahh

      '
    - 'hahahahhhh

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    If n is the input value, returns\
    \ a combination of n strings, where each of the n strings consists of \"h\" followed\
    \ by n occurrences of \"a\", and there is \" \" before each \"h\" except the first\
    \ \"h\". \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    If n is the input value, the function\
    \ returns \"h\" followed by n occurrences of \"a\", then \" h\" followed by n-1\
    \ occurrences of \"a\", until the last two characters in the string are \"ha\"\
    .\n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - l5
  attempt_id: 2
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"ha\" + laugh(size-1) + \"h\"\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    h\" + \"a\"*size + \"h\" + laugh(size-1)\n\nprint(laugh(3))"
  diff: "--- \n+++ \n@@ -26,7 +26,10 @@\n occurrences of \"a\",-until+and+repeats+this+while\
    \ the last two@@ -35,5 +38,6 @@\n the string are+not \"ha\". \"\"\""
  node_from: *id022
  node_to: &id023
    _node_tags: null
    id: 3
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'haaaahhaaahhaahhahh

      '
    - 'hahh

      '
    - 'haaahhaahhahh

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    If n is the input value, the function\
    \ returns \"h\" followed by n occurrences of \"a\", then \" h\" followed by n-1\
    \ occurrences of \"a\", until the last two characters in the string are \"ha\"\
    .\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    If n is the input value, the function\
    \ returns \"h\" followed by n occurrences of \"a\", then \" h\" followed by n-1\
    \ occurrences of \"a\", and repeats this while the last two characters in the\
    \ string are not \"ha\".\n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - 0
  attempt_id: 3
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"h\" + \"a\"*size + \"h\" + laugh(size-1)\n\nprint(laugh(3))"
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    h\" + \"a\"*size + \" \" + laugh(size-1)\n\nprint(laugh(3))"
  diff: "--- \n+++ \n@@ -11,21 +11,21 @@\n function returns \"h\"-followed-by+plus\
    \ n occurrences of-\"a\",+\"a\"+after, then \" h\"-followed-by+plus n-1 occurrences\
    \ of-\"a\",+\"a\"+after, and repeats this"
  node_from: *id023
  node_to: *id024
  prompt_from: "def laugh(size):\n    \"\"\"\n    If n is the input value, the function\
    \ returns \"h\" followed by n occurrences of \"a\", then \" h\" followed by n-1\
    \ occurrences of \"a\", and repeats this while the last two characters in the\
    \ string are not \"ha\".\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    If n is the input value, the function\
    \ returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences\
    \ of \"a\" after, and repeats this while the last two characters in the string\
    \ are not \"ha\".\n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - 0
  attempt_id: 4
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"h\" + \"a\"*size + \" \" + laugh(size-1)\n\nprint(laugh(3))"
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n"
  diff: ''
  node_from: *id024
  node_to: *id024
  prompt_from: "def laugh(size):\n    \"\"\"\n    If n is the input value, the function\
    \ returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences\
    \ of \"a\" after, and repeats this while the last two characters in the string\
    \ are not \"ha\".\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    If n is the input value, the function\
    \ returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences\
    \ of \"a\" after, and repeats this while the last two characters in the string\
    \ are not \"ha\".\n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - 0
  attempt_id: 5
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"\"\n    elif size == 1:\n      \
    \  return \"ha\"\n    else:\n        return \"ha\" + \"ha\"*(size-1) + \"h\" +\
    \ \"ha\"*(size-1) + \"h\" + laugh(size-1)\n\nprint(laugh(3))\nprint(laugh(0))\n\
    print(laugh(1))\nprint(laugh(2))\nprint"
  diff: "--- \n+++ \n@@ -40,4 +40,11 @@\n are not \"ha\".+Returns+\"\"+if+input+value+is+0.\
    \ \"\"\""
  node_from: *id024
  node_to: &id025
    _node_tags: null
    id: 14
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hahahahahhahahahhahahahhahahhahahhahha

      '
    - 'ha

      '
    - 'hahahahhahahhahahhahha

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    If n is the input value, the function\
    \ returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences\
    \ of \"a\" after, and repeats this while the last two characters in the string\
    \ are not \"ha\".\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    If n is the input value, the function\
    \ returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences\
    \ of \"a\" after, and repeats this while the last two characters in the string\
    \ are not \"ha\". Returns \"\" if input value is 0. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - 0
  attempt_id: 6
  completion_from: "if size == 0:\n        return \"\"\n    elif size == 1:\n    \
    \    return \"ha\"\n    else:\n        return \"ha\" + \"ha\"*(size-1) + \"h\"\
    \ + \"ha\"*(size-1) + \"h\" + laugh(size-1)\n\nprint(laugh(3))\nprint(laugh(0))\n\
    print(laugh(1))\nprint(laugh(2))\nprint"
  completion_to: "if size == 0:\n        return \"ha\"\n    else:\n        return\
    \ \"ha\" + laugh(size-1) + \"ha\"\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -40,11 +40,4 @@\n are not \"ha\".-Returns-\"\"-if-input-value-is-0.\
    \ \"\"\""
  node_from: *id025
  node_to: &id026
    _node_tags: null
    id: 8
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hahahahahahahahaha

      '
    - 'hahaha

      '
    - 'hahahahahahaha

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    If n is the input value, the function\
    \ returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences\
    \ of \"a\" after, and repeats this while the last two characters in the string\
    \ are not \"ha\". Returns \"\" if input value is 0. \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    If n is the input value, the function\
    \ returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences\
    \ of \"a\" after, and repeats this while the last two characters in the string\
    \ are not \"ha\". \n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - d5
  - m6
  attempt_id: 7
  completion_from: "if size == 0:\n        return \"ha\"\n    else:\n        return\
    \ \"ha\" + laugh(size-1) + \"ha\"\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(4))\n"
  diff: "--- \n+++ \n@@ -1,6 +1,12 @@\n def laugh(size): \"\"\"+The+function+repeats+the+following+process:\
    \ If n is@@ -15,8 +21,7 @@\n n occurrences of-\"a\"-after,+\"a\", then \" h\"\
    @@ -24,20 +29,6 @@\n n-1 occurrences of-\"a\"-after,-and-repeats-this-while-the-last-two-characters-in-the-string-are-not-\"\
    ha\".+\"a\",+etc. \"\"\""
  node_from: *id026
  node_to: *id024
  prompt_from: "def laugh(size):\n    \"\"\"\n    If n is the input value, the function\
    \ returns \"h\" plus n occurrences of \"a\" after, then \" h\" plus n-1 occurrences\
    \ of \"a\" after, and repeats this while the last two characters in the string\
    \ are not \"ha\". \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - m5
  attempt_id: 8
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(4))\n"
  completion_to: "if size == 0:\n        return \"ha\"\n    else:\n        return\
    \ \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -1,7 +1,18 @@\n def laugh(size): \"\"\"-The+While+the+last+two+characters+in+the+string+are+not+\"\
    ha\",+the function repeats the"
  node_from: *id024
  node_to: &id027
    _node_tags: null
    id: 28
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'haaaa haaa haa ha ha

      '
    - 'ha ha

      '
    - 'haaa haa ha ha

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc.\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    While the last two characters in the\
    \ string are not \"ha\", the function repeats the following process: If n is the\
    \ input value, the function returns \"h\" plus n occurrences of \"a\", then \"\
    \ h\" plus n-1 occurrences of \"a\", etc. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - m5
  attempt_id: 9
  completion_from: "if size == 0:\n        return \"ha\"\n    else:\n        return\
    \ \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"ha\"\n    else:\n        return\
    \ \"ha\" + \"ha\" * (size - 1) + laugh(size - 1)\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -1,18 +1,7 @@\n def laugh(size): \"\"\"-While-the-last-two-characters-in-the-string-are-not-\"\
    ha\",-the+The function repeats the@@ -42,4 +31,14 @@\n of \"a\", etc.+Until+the+last+two+characters+in+the+string+are+\"\
    ha\" \"\"\""
  node_from: *id027
  node_to: &id028
    _node_tags: null
    id: 21
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hahahahahahahahahahaha

      '
    - 'haha

      '
    - 'hahahahahahaha

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    While the last two characters in\
    \ the string are not \"ha\", the function repeats the following process: If n\
    \ is the input value, the function returns \"h\" plus n occurrences of \"a\",\
    \ then \" h\" plus n-1 occurrences of \"a\", etc. \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Until the last two\
    \ characters in the string are \"ha\" \n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - d5
  attempt_id: 10
  completion_from: "if size == 0:\n        return \"ha\"\n    else:\n        return\
    \ \"ha\" + \"ha\" * (size - 1) + laugh(size - 1)\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -31,14 +31,4 @@\n of \"a\", etc.-Until-the-last-two-characters-in-the-string-are-\"\
    ha\" \"\"\""
  node_from: *id028
  node_to: *id024
  prompt_from: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Until the last two\
    \ characters in the string are \"ha\" \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. \n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - m5
  attempt_id: 11
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"ha\"\n    else:\n        return\
    \ \"ha\" + laugh(size - 1)\n\nprint(laugh(3))"
  diff: "--- \n+++ \n@@ -30,5 +30,16 @@\n occurrences of \"a\",-etc.+etc.,+and+stops+when+\"\
    ha\"+is+the+last+part+of+the+string. \"\"\""
  node_from: *id024
  node_to: *id008
  prompt_from: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. \n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc., and stops when \"\
    ha\" is the last part of the string.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - l5
  attempt_id: 12
  completion_from: "if size == 0:\n        return \"ha\"\n    else:\n        return\
    \ \"ha\" + laugh(size - 1)\n\nprint(laugh(3))"
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    h\" + \"a\"*size + \" \" + laugh(size-1)\n\nprint(laugh(3))"
  diff: "--- \n+++ \n@@ -30,16 +30,11 @@\n occurrences of \"a\",-etc.,-and-stops-when-\"\
    ha\"-is+etc.+Doesn't+add the last-part-of-the-string.+\"+h\" \"\"\""
  node_from: *id008
  node_to: *id024
  prompt_from: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc., and stops when \"\
    ha\" is the last part of the string.\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Doesn't add the last\
    \ \" h\"\n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - 0
  attempt_id: 13
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"h\" + \"a\"*size + \" \" + laugh(size-1)\n\nprint(laugh(3))"
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -31,8 +31,7 @@\n of \"a\", etc.-Doesn't-add+Removes the last\
    \ \""
  node_from: *id024
  node_to: *id024
  prompt_from: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Doesn't add the last\
    \ \" h\"\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Removes the last \"\
    \ h\"\n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - 0
  attempt_id: 14
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"h\" + \"a\" * size + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    ha\" + laugh(size-1) + \"h\"\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -30,10 +30,17 @@\n occurrences of \"a\",-etc.-Removes-the-last+etc.,+but+with\
    \ \" h\"+removed+at+the+end+of+the+final+string. \"\"\""
  node_from: *id024
  node_to: *id022
  prompt_from: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc. Removes the last \"\
    \ h\"\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc., but with \" h\" removed\
    \ at the end of the final string.\n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - d5
  attempt_id: 15
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"ha\" + laugh(size-1) + \"h\"\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    h\" + \"a\"*size + laugh(size-1)\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -22,25 +22,14 @@\n occurrences of \"a\",-then-\"-h\"-plus-n-1+followed+by+decreasing+natural+number+of+n\
    \ occurrences of-\"a\",-etc.,-but-with-\"-h\"-removed-at-the-end-of-the-final-string.+\"\
    a\" \"\"\""
  node_from: *id022
  node_to: &id029
    _node_tags: null
    id: 26
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'haaaahaaahaahah

      '
    - 'hah

      '
    - 'haaahaahah

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", then \" h\" plus n-1 occurrences of \"a\", etc., but with \" h\" removed\
    \ at the end of the final string.\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", followed by decreasing natural number of n occurrences of \"a\" \n\
    \    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - m2
  - a4
  - m5
  - m6
  attempt_id: 16
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"h\" + \"a\"*size + laugh(size-1)\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"h\"\n    else:\n        return \"\
    h\" + \"a\"*size + \"h\" + laugh(size-1)\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -22,14 +22,20 @@\n occurrences of \"a\",-followed-by-decreasing-natural-number+plus+\"\
    +h\"+plus+n-1+occurrences of-n+\"a\",+until+there+are+0 occurrences of \"a\"+left\
    \ \"\"\""
  node_from: *id029
  node_to: *id023
  prompt_from: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", followed by decreasing natural number of n occurrences of \"a\" \n\
    \    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", plus \" h\" plus n-1 occurrences of \"a\", until there are 0 occurrences\
    \ of \"a\" left\n    \"\"\"\n    "
  state: neutral
  total_attempts: 18
  username: student8
- _edge_tags:
  - m2
  - m6
  attempt_id: 17
  completion_from: "if size == 0:\n        return \"h\"\n    else:\n        return\
    \ \"h\" + \"a\"*size + \"h\" + laugh(size-1)\n\nprint(laugh(3))\n"
  completion_to: "if size == 0:\n        return \"ha\"\n    else:\n        return\
    \ \"ha\" + \"ha\" * (size - 1) + \" \" + laugh(size - 1)\n\nprint(laugh(3))\n"
  diff: "--- \n+++ \n@@ -1,12 +1,6 @@\n def laugh(size): \"\"\"-The-function-repeats-the-following-process:\
    \ If n is@@ -15,7 +9,10 @@\n value, the function-returns+creates+a+string+containing\
    \ \"h\" plus n@@ -30,12 +27,18 @@\n occurrences of \"a\",+repeated until-there-are-0-occurrences+\"\
    ha\"+is+the+last+part of-\"a\"-left+the+string.+Then+return+the+string. \"\"\""
  node_from: *id023
  node_to: &id035
    _node_tags: null
    id: 33
    stderr:
    - ''
    - ''
    - ''
    stdout:
    - 'hahahaha hahaha haha ha ha

      '
    - 'ha ha

      '
    - 'hahaha haha ha ha

      '
  prompt_from: "def laugh(size):\n    \"\"\"\n    The function repeats the following\
    \ process: If n is the input value, the function returns \"h\" plus n occurrences\
    \ of \"a\", plus \" h\" plus n-1 occurrences of \"a\", until there are 0 occurrences\
    \ of \"a\" left\n    \"\"\"\n    "
  prompt_to: "def laugh(size):\n    \"\"\"\n    If n is the input value, the function\
    \ creates a string containing \"h\" plus n occurrences of \"a\", plus \" h\" plus\
    \ n-1 occurrences of \"a\", repeated until \"ha\" is the last part of the string.\
    \ Then return the string.\n    \"\"\"\n    "
  state: fail
  total_attempts: 18
  username: student8
nodes:
- *id030
- *id002
- *id015
- *id023
- *id011
- *id012
- *id018
- *id004
- *id026
- *id031
- *id009
- *id019
- *id020
- *id013
- *id025
- *id024
- *id010
- *id003
- *id022
- *id014
- *id032
- *id028
- *id007
- *id005
- *id033
- *id021
- *id029
- *id017
- *id027
- *id034
- *id008
- *id016
- *id001
- *id035
- *id036
- *id006
problem: laugh
student_start_node_tags:
  student11: !!python/object/new:ruamel.yaml.comments.CommentedSeq
    listitems:
    - 3
    state:
      _yaml_format: !!python/object/new:ruamel.yaml.comments.Format
        state: !!python/tuple
        - null
        - _flow_style: false
      _yaml_line_col: !!python/object:ruamel.yaml.comments.LineCol
        col: 2
        data:
          0:
          - 8
          - 4
        line: 8
  student13: !!python/object/new:ruamel.yaml.comments.CommentedSeq
    listitems:
    - 1
    - 3
    - 6
    state:
      _yaml_format: !!python/object/new:ruamel.yaml.comments.Format
        state: !!python/tuple
        - null
        - _flow_style: false
      _yaml_line_col: !!python/object:ruamel.yaml.comments.LineCol
        col: 2
        data:
          0:
          - 17
          - 4
          1:
          - 18
          - 4
          2:
          - 19
          - 4
        line: 17
  student2: !!python/object/new:ruamel.yaml.comments.CommentedSeq
    listitems:
    - 0
    state:
      _yaml_format: !!python/object/new:ruamel.yaml.comments.Format
        state: !!python/tuple
        - null
        - _flow_style: false
      _yaml_line_col: !!python/object:ruamel.yaml.comments.LineCol
        col: 2
        data:
          0:
          - 28
          - 4
        line: 28
  student22: !!python/object/new:ruamel.yaml.comments.CommentedSeq
    listitems:
    - 3
    state:
      _yaml_format: !!python/object/new:ruamel.yaml.comments.Format
        state: !!python/tuple
        - null
        - _flow_style: false
      _yaml_line_col: !!python/object:ruamel.yaml.comments.LineCol
        col: 2
        data:
          0:
          - 37
          - 4
        line: 37
  student37: !!python/object/new:ruamel.yaml.comments.CommentedSeq
    listitems:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    state:
      _yaml_format: !!python/object/new:ruamel.yaml.comments.Format
        state: !!python/tuple
        - null
        - _flow_style: false
      _yaml_line_col: !!python/object:ruamel.yaml.comments.LineCol
        col: 2
        data:
          0:
          - 46
          - 4
          1:
          - 47
          - 4
          2:
          - 48
          - 4
          3:
          - 49
          - 4
          4:
          - 50
          - 4
          5:
          - 51
          - 4
        line: 46
  student5: !!python/object/new:ruamel.yaml.comments.CommentedSeq
    listitems:
    - 6
    - 1
    state:
      _yaml_format: !!python/object/new:ruamel.yaml.comments.Format
        state: !!python/tuple
        - null
        - _flow_style: false
      _yaml_line_col: !!python/object:ruamel.yaml.comments.LineCol
        col: 2
        data:
          0:
          - 61
          - 4
          1:
          - 62
          - 4
        line: 61
  student61: !!python/object/new:ruamel.yaml.comments.CommentedSeq
    listitems:
    - 6
    - 4
    - 1
    - 2
    - 3
    state:
      _yaml_format: !!python/object/new:ruamel.yaml.comments.Format
        state: !!python/tuple
        - null
        - _flow_style: false
      _yaml_line_col: !!python/object:ruamel.yaml.comments.LineCol
        col: 2
        data:
          0:
          - 71
          - 4
          1:
          - 72
          - 4
          2:
          - 73
          - 4
          3:
          - 74
          - 4
          4:
          - 75
          - 4
        line: 71
  student72: !!python/object/new:ruamel.yaml.comments.CommentedSeq
    listitems:
    - 1
    - 2
    - 3
    - 6
    state:
      _yaml_format: !!python/object/new:ruamel.yaml.comments.Format
        state: !!python/tuple
        - null
        - _flow_style: false
      _yaml_line_col: !!python/object:ruamel.yaml.comments.LineCol
        col: 2
        data:
          0:
          - 84
          - 4
          1:
          - 85
          - 4
          2:
          - 86
          - 4
          3:
          - 87
          - 4
        line: 84
  student8: !!python/object/new:ruamel.yaml.comments.CommentedSeq
    listitems:
    - 1
    - 6
    state:
      _yaml_format: !!python/object/new:ruamel.yaml.comments.Format
        state: !!python/tuple
        - null
        - _flow_style: false
      _yaml_line_col: !!python/object:ruamel.yaml.comments.LineCol
        col: 2
        data:
          0:
          - 96
          - 4
          1:
          - 97
          - 4
        line: 96
