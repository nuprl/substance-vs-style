!Graph
problem: mod_end
nodes:
- &id008 !Node
  id: 0
  stdout:
  - '[''jumps'', ''bumps'', ''sss'', ''picks'']

    '
  - '[''dreads'', ''sits'', ''heats'']

    '
  - '[''nears'', ''closs'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id007 !Node
  id: 1
  stdout:
  - '[''jump'', ''bump'', ''sing'', ''pick'']

    '
  - '[''dread'', ''edit'', ''heat'']

    '
  - '[''near'', ''clos'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id003 !Node
  id: 2
  stdout:
  - '[''jumps'', ''bumps'', ''sings'', ''picks'']

    '
  - '[''dreads'', ''edits'', ''heats'']

    '
  - '[''nears'', ''closs'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id010 !Node
  id: 3
  stdout:
  - '[''jumps'', ''bumps'', ''ss'', ''picks'']

    '
  - '[''dreads'', ''its'', ''heats'']

    '
  - '[''nears'', ''closs'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id002 !Node
  id: 4
  stdout:
  - '[''jumping'', ''bumping'', ''singing'', ''picking'']

    '
  - '[''dreaded'', ''edited'', ''heated'']

    '
  - '[''nearer'', ''closer'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id011 !Node
  id: 5
  stdout:
  - '[''jump'', ''bump'', ''sss'', ''pick'']

    '
  - '[''dread'', ''sits'', ''heat'']

    '
  - '[''near'', ''clos'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id006 !Node
  id: 6
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'AttributeError: ''list'' object has no attribute ''endswith'''
  - 'AttributeError: ''list'' object has no attribute ''endswith'''
  - 'AttributeError: ''list'' object has no attribute ''endswith'''
  _node_tags: null
- &id009 !Node
  id: 7
  stdout:
  - '[''jumps'', ''bumps'', ''ss'', ''picks'']

    '
  - '[''dreads'', ''s'', ''heats'']

    '
  - '[''nears'', ''closs'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id004 !Node
  id: 8
  stdout:
  - '[''jumpiing'', ''bumpiing'', ''siingiing'', ''pickiing'']

    '
  - '[''dreaded'', ''edited'', ''heated'']

    '
  - '[''nearer'', ''closer'']

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id001 !Node
  id: 9
  stdout:
  - 'None

    '
  - 'None

    '
  - 'None

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id005 !Node
  id: 10
  stdout:
  - 'ings

    '
  - 'eds

    '
  - 'ers

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
edges:
- !Edge
  node_from: *id001
  node_to: *id002
  username: student20
  prompt_from: "def mod_end(words, ending):\n    \"\"\"\n    Take a list of words\
    \ sharing the same ending, and a string as an input.\nSearch the last letters\
    \ of the word for the string, and replace it with 's'.\n    \"\"\"\n    "
  prompt_to: "def mod_end(words, ending):\n    \"\"\"\n    Take a list of words sharing\
    \ the same ending, and a string as an input.\nSearch the last letters of each\
    \ word in the list for the string, and replace it with 's'.\n    \"\"\"\n    "
  completion_from: "for word in words:\n        if word.endswith(ending):\n      \
    \      word = word[:-len(ending)] + 's'\n            print(word)\n"
  completion_to: "for word in words:\n        if word[-len(ending):] == ending:\n\
    \            word = word[:-len(ending)] + 's'\n    return words\n\n"
  diff: "--- \n+++ \n@@ -22,8 +22,11 @@\n last letters of+each+word+in the-word+list\
    \ for the string,"
  attempt_id: 1
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id002
  username: student20
  prompt_from: "def mod_end(words, ending):\n    \"\"\"\n    Take a list of words\
    \ sharing the same ending, and a string as an input.\nSearch the last letters\
    \ of each word in the list for the string, and replace it with 's'.\n    \"\"\"\
    \n    "
  prompt_to: "def mod_end(words, ending):\n    \"\"\"\n    Take a list of words sharing\
    \ the same ending, and a string as an input.\nTake the last letters of each word\
    \ in the list for the string, and replace it with 's'.\n    \"\"\"\n    "
  completion_from: "for word in words:\n        if word[-len(ending):] == ending:\n\
    \            word = word[:-len(ending)] + 's'\n    return words\n\n"
  completion_to: "for word in words:\n        if word.endswith(ending):\n        \
    \    word = word[:-len(ending)] + 's'\n    return words\n"
  diff: "--- \n+++ \n@@ -17,7 +17,7 @@\n as an input.-Search+Take the last letters"
  attempt_id: 2
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id003
  username: student20
  prompt_from: "def mod_end(words, ending):\n    \"\"\"\n    Take a list of words\
    \ sharing the same ending, and a string as an input.\nTake the last letters of\
    \ each word in the list for the string, and replace it with 's'.\n    \"\"\"\n\
    \    "
  prompt_to: "def mod_end(words, ending):\n    \"\"\"\n    For each word in the list,\
    \ remove the last instance of ending that can be found in the word and add a s\
    \ to the word\n    \"\"\"\n    "
  completion_from: "for word in words:\n        if word.endswith(ending):\n      \
    \      word = word[:-len(ending)] + 's'\n    return words\n"
  completion_to: "for i in range(len(words)):\n        if words[i].endswith(ending):\n\
    \            words[i] = words[i][:-len(ending)] + 's'\n    return words\n"
  diff: "--- \n+++ \n@@ -2,37 +2,30 @@\n mod_end(words, ending): \"\"\"-Take-a-list-of-words-sharing-the-same-ending,-and-a-string-as-an-input.-Take-the-last-letters-of+For\
    \ each word in the-list-for+list,+remove the-string,+last+instance+of+ending+that+can+be+found+in+the+word\
    \ and-replace-it-with-'s'.+add+a+s+to+the+word \"\"\""
  attempt_id: 3
  total_attempts: 4
  state: success
  _edge_tags: null
- !Edge
  node_from: *id004
  node_to: *id005
  username: student36
  prompt_from: "def mod_end(words, ending):\n    \"\"\"\n    With the words in the\
    \ list, replace the part of the word modifying tense with the string contained\
    \ outside the list\n    \"\"\"\n    "
  prompt_to: "def mod_end(words, ending):\n    \"\"\"\n    With the words in the list,\
    \ replace the part of the word in string contained outside the list with 's'\n\
    \    \"\"\"\n    "
  completion_from: "for i in range(len(words)):\n        words[i] = words[i].replace(words[i][-2:],\
    \ ending)\n    return words\n"
  completion_to: "for word in words:\n        ending = ending.replace(word, '')\n\
    \    return ending + 's'\n\n"
  diff: "--- \n+++ \n@@ -14,13 +14,12 @@\n of the word-modifying-tense-with-the+in\
    \ string contained outside the list+with+'s' \"\"\""
  attempt_id: 1
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id005
  node_to: *id002
  username: student36
  prompt_from: "def mod_end(words, ending):\n    \"\"\"\n    With the words in the\
    \ list, replace the part of the word in string contained outside the list with\
    \ 's'\n    \"\"\"\n    "
  prompt_to: "def mod_end(words, ending):\n    \"\"\"\n    With the words in the list,\
    \  the part of the word in string contained outside the list replace with 's'\n\
    \    \"\"\"\n    "
  completion_from: "for word in words:\n        ending = ending.replace(word, '')\n\
    \    return ending + 's'\n\n"
  completion_to: "for word in words:\n        if word.endswith(ending):\n        \
    \    word = word[:-len(ending)] + 's'\n    return words\n"
  diff: "--- \n+++ \n@@ -8,7 +8,6 @@\n in the list,-replace the part of@@ -20,6 +19,7\
    \ @@\n outside the list+replace with 's' \"\"\""
  attempt_id: 2
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id003
  username: student36
  prompt_from: "def mod_end(words, ending):\n    \"\"\"\n    With the words in the\
    \ list,  the part of the word in string contained outside the list replace with\
    \ 's'\n    \"\"\"\n    "
  prompt_to: "def mod_end(words, ending):\n    \"\"\"\n    replace the characters\
    \ contained within the string outside of the list when it appears in the words\
    \ in the list with \"s\"\n    \"\"\"\n    "
  completion_from: "for word in words:\n        if word.endswith(ending):\n      \
    \      word = word[:-len(ending)] + 's'\n    return words\n"
  completion_to: "for word in words:\n        if word.endswith(ending):\n        \
    \    words[words.index(word)] = word[:-len(ending)] + \"s\"\n    return words\n"
  diff: "--- \n+++ \n@@ -2,24 +2,26 @@\n mod_end(words, ending): \"\"\"-With+replace+the+characters+contained+within+the+string+outside+of+the+list+when+it+appears+in\
    \ the words in the-list,-the-part-of-the-word-in-string-contained-outside-the\
    \ list-replace with-'s'+\"s\" \"\"\""
  attempt_id: 3
  total_attempts: 4
  state: success
  _edge_tags: null
- !Edge
  node_from: *id006
  node_to: *id007
  username: student38
  prompt_from: "def mod_end(words, ending):\n    \"\"\"\n    Take out ending from\
    \ words\n    \"\"\"\n    "
  prompt_to: "def mod_end(words, ending):\n    \"\"\"\n    Take out ending from each\
    \ string in words\n    \"\"\"\n    "
  completion_from: "if words.endswith(ending):\n        return words[:-len(ending)]\n\
    \    return words\n"
  completion_to: 'return [w[:-len(ending)] if w.endswith(ending) else w for w in words]


    '
  diff: "--- \n+++ \n@@ -6,5 +6,8 @@\n out ending from+each+string+in words \"\"\""
  attempt_id: 1
  total_attempts: 3
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id007
  node_to: *id003
  username: student38
  prompt_from: "def mod_end(words, ending):\n    \"\"\"\n    Take out ending from\
    \ each string in words\n    \"\"\"\n    "
  prompt_to: "def mod_end(words, ending):\n    \"\"\"\n    Take out ending from each\
    \ string in words and add 's'\n    \"\"\"\n    "
  completion_from: 'return [w[:-len(ending)] if w.endswith(ending) else w for w in
    words]


    '
  completion_to: 'return [word[:-len(ending)] + ''s'' for word in words]

    '
  diff: "--- \n+++ \n@@ -10,4 +10,7 @@\n string in words+and+add+'s' \"\"\""
  attempt_id: 2
  total_attempts: 3
  state: success
  _edge_tags: null
- !Edge
  node_from: *id008
  node_to: *id009
  username: student54
  prompt_from: "def mod_end(words, ending):\n    \"\"\"\n    Find the string stated\
    \ after the list within each string at each index in the list and replace with\
    \ 's'.\n    \"\"\"\n    "
  prompt_to: "def mod_end(words, ending):\n    \"\"\"\n    Find the string stated\
    \ after the list within each string at each index in the list and replace with\
    \ 's'. If the string occurs more than one time at the index, replace it the last\
    \ time.\n    \"\"\"\n    "
  completion_from: "for i in range(len(words)):\n        words[i] = words[i].replace(ending,\
    \ 's')\n    return words\n"
  completion_to: "for i in range(len(words)):\n        words[i] = words[i].split(ending)[0]\
    \ + 's'\n    return words\n"
  diff: "--- \n+++ \n@@ -22,4 +22,20 @@\n replace with 's'.+If+the+string+occurs+more+than+one+time+at+the+index,+replace+it+the+last+time.\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 5
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id009
  node_to: *id010
  username: student54
  prompt_from: "def mod_end(words, ending):\n    \"\"\"\n    Find the string stated\
    \ after the list within each string at each index in the list and replace with\
    \ 's'. If the string occurs more than one time at the index, replace it the last\
    \ time.\n    \"\"\"\n    "
  prompt_to: "def mod_end(words, ending):\n    \"\"\"\n    Find the string stated\
    \ after the list within each string at each index in the list and replace with\
    \ 's'. If the string occurs more than one time at the index, replace it with 's'\
    \ the last time, maintaining the rest of the string.\n    \"\"\"\n    "
  completion_from: "for i in range(len(words)):\n        words[i] = words[i].split(ending)[0]\
    \ + 's'\n    return words\n"
  completion_to: "for i in range(len(words)):\n        words[i] = words[i].split(ending)\n\
    \        words[i][-1] = words[i][-1] + 's'\n        words[i] = ''.join(words[i])\n\
    \    return words\n"
  diff: "--- \n+++ \n@@ -35,7 +35,15 @@\n index, replace it+with+'s' the last-time.+time,+maintaining+the+rest+of+the+string.\
    \ \"\"\""
  attempt_id: 2
  total_attempts: 5
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id010
  node_to: *id011
  username: student54
  prompt_from: "def mod_end(words, ending):\n    \"\"\"\n    Find the string stated\
    \ after the list within each string at each index in the list and replace with\
    \ 's'. If the string occurs more than one time at the index, replace it with 's'\
    \ the last time, maintaining the rest of the string.\n    \"\"\"\n    "
  prompt_to: "def mod_end(words, ending):\n    \"\"\"\n    If the string stated after\
    \ the list occurs more than one time within a string in the list, replace it with\
    \ 's' the last time, maintaining the rest of the string. Find the string stated\
    \ after the list within each string at each index in the list and replace with\
    \ 's'. \n    \"\"\"\n    "
  completion_from: "for i in range(len(words)):\n        words[i] = words[i].split(ending)\n\
    \        words[i][-1] = words[i][-1] + 's'\n        words[i] = ''.join(words[i])\n\
    \    return words\n"
  completion_to: "for i in range(len(words)):\n        if words[i].count(ending) >\
    \ 1:\n            words[i] = words[i].replace(ending, 's')\n        else:\n  \
    \          words[i] = words[i].replace(ending, '')\n    return words\n"
  diff: "--- \n+++ \n@@ -2,6 +2,37 @@\n mod_end(words, ending): \"\"\"+If+the+string+stated+after+the+list+occurs+more+than+one+time+within+a+string+in+the+list,+replace+it+with+'s'+the+last+time,+maintaining+the+rest+of+the+string.\
    \ Find the string@@ -22,28 +53,4 @@\n replace with 's'.-If-the-string-occurs-more-than-one-time-at-the-index,-replace-it-with-'s'-the-last-time,-maintaining-the-rest-of-the-string.\
    \ \"\"\""
  attempt_id: 3
  total_attempts: 5
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id011
  node_to: *id003
  username: student54
  prompt_from: "def mod_end(words, ending):\n    \"\"\"\n    If the string stated\
    \ after the list occurs more than one time within a string in the list, replace\
    \ it with 's' the last time, maintaining the rest of the string. Find the string\
    \ stated after the list within each string at each index in the list and replace\
    \ with 's'. \n    \"\"\"\n    "
  prompt_to: "def mod_end(words, ending):\n    \"\"\"\n    Find the string stated\
    \ after the list within each string at each index in the list and replace with\
    \ 's'. If the string stated after the list occurs more than one time within a\
    \ string in the list, replace it with 's' the last time, maintaining the rest\
    \ of the string. \n    \"\"\"\n    "
  completion_from: "for i in range(len(words)):\n        if words[i].count(ending)\
    \ > 1:\n            words[i] = words[i].replace(ending, 's')\n        else:\n\
    \            words[i] = words[i].replace(ending, '')\n    return words\n"
  completion_to: "for i in range(len(words)):\n        words[i] = words[i].rsplit(ending,\
    \ 1)[0] + 's'\n    return words\n"
  diff: "--- \n+++ \n@@ -2,6 +2,26 @@\n mod_end(words, ending): \"\"\"+Find+the+string+stated+after+the+list+within+each+string+at+each+index+in+the+list+and+replace+with+'s'.\
    \ If the string@@ -33,24 +53,4 @@\n of the string.-Find-the-string-stated-after-the-list-within-each-string-at-each-index-in-the-list-and-replace-with-'s'.\
    \ \"\"\""
  attempt_id: 4
  total_attempts: 5
  state: success
  _edge_tags: null
student_start_node_tags: {}
