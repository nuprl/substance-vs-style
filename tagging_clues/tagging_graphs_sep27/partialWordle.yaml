!Graph
problem: partialWordle
nodes:
- !Node
  id: 0
  stdout:
  - '[0, 0, 4, 6, 3]

    '
  - '[0, 2, 4, 1, 3]

    '
  - '[3, 4, 2, 1, 2]

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- !Node
  id: 1
  stdout:
  - '[]

    '
  - '[]

    '
  - '[]

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id003 !Node
  id: 2
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - NotImplementedErrorError:NotImplementedError
  - NotImplementedErrorError:NotImplementedError
  - NotImplementedErrorError:NotImplementedError
  _node_tags: null
- !Node
  id: 3
  stdout:
  - '0

    '
  - '0

    '
  - '0

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id002 !Node
  id: 4
  stdout:
  - '[0, 0, 2, 3, 3]

    '
  - '[0, 1, 2, 1, 2]

    '
  - '[2, 1, 1, 1, 2]

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id005 !Node
  id: 5
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'IndentationError: expected an indented block after ''for'' statement on line
    5'
  - 'IndentationError: expected an indented block after ''for'' statement on line
    5'
  - 'IndentationError: expected an indented block after ''for'' statement on line
    5'
  _node_tags: null
- &id004 !Node
  id: 6
  stdout:
  - '[0, 0, 4, 6, 3]

    '
  - '[0, 2, 4, 1, 3]

    '
  - '[4, 4, 2, 2, 3]

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id001 !Node
  id: 7
  stdout:
  - '[0, 0, 2, 3, 0]

    '
  - '[0, 1, 2, 0, 1]

    '
  - '[2, 2, 1, 1, 1]

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- !Node
  id: 8
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'IndentationError: expected an indented block after ''if'' statement on line 13'
  - 'IndentationError: expected an indented block after ''if'' statement on line 13'
  - 'IndentationError: expected an indented block after ''if'' statement on line 13'
  _node_tags: null
edges:
- !Edge
  node_from: *id001
  node_to: *id002
  username: student55
  prompt_from: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a\
    \ function that gets a list of strings and the hidden word (a string separated\
    \ by a comma). From the list of strings, compare each letter from the strings\
    \ in the list with the hidden words and return a list with the number of how many\
    \ similar letters both strings share.\n    \"\"\"\n    "
  prompt_to: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function\
    \ that gets a list of strings and the hidden word (a string separated by a comma).\
    \ From the list of strings, compare each letter from the strings in the list with\
    \ the hidden words and return a list with the number of how many similar letters\
    \ both strings share.\n    \"\"\"\n    "
  completion_from: "# your code here\n    return [sum([1 for i in range(len(guessList[j]))\
    \ if guessList[j][i] == hiddenWord[i]]) for j in range(len(guessList))]\n"
  completion_to: "# your code here\n    return [len(set(guessList[i]) & set(hiddenWord))\
    \ for i in range(len(guessList))]\n"
  diff: ''
  attempt_id: 1
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id003
  username: student55
  prompt_from: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a\
    \ function that gets a list of strings and the hidden word (a string separated\
    \ by a comma). From the list of strings, compare each letter from the strings\
    \ in the list with the hidden words and return a list with the number of how many\
    \ similar letters both strings share.\n    \"\"\"\n    "
  prompt_to: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function\
    \ that gets a list of strings and the hidden word (a string separated by a comma).\
    \ From the list of strings, compare each letter from the strings in the list with\
    \ the hidden words. Compute the total points after comparing all letters. The\
    \ total points should be calculated following the rules: If the letter is the\
    \ same from the hidden word but in a different position, receives +1. If the letter\
    \ is the same from the hidden word and in the same position, receives +2. The\
    \ function returns a list of the total points from each word in the list.\n  \
    \  \"\"\"\n    "
  completion_from: "# your code here\n    return [len(set(guessList[i]) & set(hiddenWord))\
    \ for i in range(len(guessList))]\n"
  completion_to: "# YOUR CODE HERE\n    raise NotImplementedError()\n"
  diff: "--- \n+++ \n@@ -37,20 +37,71 @@\n with the hidden-words+words.+Compute+the+total+points+after+comparing+all+letters.+The+total+points+should+be+calculated+following+the+rules:+If+the+letter+is+the+same+from+the+hidden+word+but+in+a+different+position,+receives++1.+If+the+letter+is+the+same+from+the+hidden+word\
    \ and-return+in+the+same+position,+receives++2.+The+function+returns a list-with+of\
    \ the-number-of-how-many-similar-letters-both-strings-share.+total+points+from+each+word+in+the+list.\
    \ \"\"\""
  attempt_id: 2
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id003
  node_to: *id004
  username: student55
  prompt_from: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a\
    \ function that gets a list of strings and the hidden word (a string separated\
    \ by a comma). From the list of strings, compare each letter from the strings\
    \ in the list with the hidden words. Compute the total points after comparing\
    \ all letters. The total points should be calculated following the rules: If the\
    \ letter is the same from the hidden word but in a different position, receives\
    \ +1. If the letter is the same from the hidden word and in the same position,\
    \ receives +2. The function returns a list of the total points from each word\
    \ in the list.\n    \"\"\"\n    "
  prompt_to: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    Write a function\
    \ that gets a list of strings and the hidden word (a string separated by a comma).\
    \ From the list of strings, compare each letter from the strings in the list with\
    \ the hidden words. Compute the total points after comparing all letters. The\
    \ total points should be calculated following the rules: If the letter is the\
    \ same from the hidden word but in a different position, receives +1. If the letter\
    \ is the same from the hidden word and in the same position, receives +2. The\
    \ function returns a list of the total points from each word in the list.\n  \
    \  \"\"\"\n    "
  completion_from: "# YOUR CODE HERE\n    raise NotImplementedError()\n"
  completion_to: "# Your code here\n    points = []\n    for word in guessList:\n\
    \        points.append(0)\n        for i in range(len(word)):\n            if\
    \ word[i] == hiddenWord[i]:\n                points[-1] += 2\n            elif\
    \ word[i] in hiddenWord:\n                points[-1] += 1\n    return points\n"
  diff: ''
  attempt_id: 3
  total_attempts: 4
  state: success
  _edge_tags: null
- !Edge
  node_from: *id005
  node_to: *id005
  username: student9
  prompt_from: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function\
    \ prints how many letters each string in the list shares with the string outside\
    \ the list.\n    \"\"\"\n    "
  prompt_to: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function\
    \ prints how many letters each string in the list has in common with the string\
    \ outside the list.\n    \"\"\"\n    "
  completion_from: "for i in range(len(guessList)):\n        print(guessList[i] +\
    \ \": \" + str(len(set(guessList[i]) & set(hiddenWord))))\n"
  completion_to: "for i in range(len(guessList)):\n        print(guessList[i], \"\
    has\", commonLetters(guessList[i],hiddenWord), \"letters in common with the hidden\
    \ word.\")\n"
  diff: "--- \n+++ \n@@ -12,7 +12,9 @@\n in the list-shares+has+in+common with the\
    \ string"
  attempt_id: 1
  total_attempts: 6
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id005
  node_to: *id005
  username: student9
  prompt_from: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function\
    \ prints how many letters each string in the list has in common with the string\
    \ outside the list.\n    \"\"\"\n    "
  prompt_to: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function\
    \ prints how many characters each string in the list has in common with the string\
    \ outside the list.\n    \"\"\"\n    "
  completion_from: "for i in range(len(guessList)):\n        print(guessList[i], \"\
    has\", commonLetters(guessList[i],hiddenWord), \"letters in common with the hidden\
    \ word.\")\n"
  completion_to: "for i in range(len(guessList)):\n        print(guessList[i], \"\
    has\", commonLetters(guessList[i],hiddenWord), \"letters in common with the hidden\
    \ word.\")\n"
  diff: "--- \n+++ \n@@ -6,7 +6,7 @@\n prints how many-letters+characters each string\
    \ in"
  attempt_id: 2
  total_attempts: 6
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id005
  node_to: *id002
  username: student9
  prompt_from: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function\
    \ prints how many characters each string in the list has in common with the string\
    \ outside the list.\n    \"\"\"\n    "
  prompt_to: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function\
    \ shows how many characters each string within the list has in common with the\
    \ characters in the string outside the list.\n    \"\"\"\n    "
  completion_from: "for i in range(len(guessList)):\n        print(guessList[i], \"\
    has\", commonLetters(guessList[i],hiddenWord), \"letters in common with the hidden\
    \ word.\")\n"
  completion_to: "partialWordle = []\n    for guess in guessList:\n        partialWordle.append(len(set(guess)\
    \ & set(hiddenWord)))\n    return partialWordle\n"
  diff: "--- \n+++ \n@@ -3,13 +3,13 @@\n \"\"\" The function-prints+shows how many\
    \ characters each string-in+within the list has@@ -17,6 +17,9 @@\n common with\
    \ the+characters+in+the string outside the"
  attempt_id: 3
  total_attempts: 6
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id002
  username: student9
  prompt_from: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function\
    \ shows how many characters each string within the list has in common with the\
    \ characters in the string outside the list.\n    \"\"\"\n    "
  prompt_to: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function\
    \ shows how many characters, including \"'\", each string within the list has\
    \ in common with the characters in the string outside the list.\n    \"\"\"\n\
    \    "
  completion_from: "partialWordle = []\n    for guess in guessList:\n        partialWordle.append(len(set(guess)\
    \ & set(hiddenWord)))\n    return partialWordle\n"
  completion_to: "partialWordle = []\n    for i in range(len(guessList)):\n      \
    \  partialWordle.append(len(set(guessList[i])&set(hiddenWord)))\n    return partialWordle\n"
  diff: "--- \n+++ \n@@ -6,7 +6,9 @@\n shows how many-characters+characters,+including+\"\
    '\", each string within"
  attempt_id: 4
  total_attempts: 6
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id002
  username: student9
  prompt_from: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function\
    \ shows how many characters, including \"'\", each string within the list has\
    \ in common with the characters in the string outside the list.\n    \"\"\"\n\
    \    "
  prompt_to: "def partialWordle(guessList,hiddenWord):\n    \"\"\"\n    The function\
    \ shows how many characters, including ''', each string within the list has in\
    \ common with the characters in the string outside the list.\n    \"\"\"\n    "
  completion_from: "partialWordle = []\n    for i in range(len(guessList)):\n    \
    \    partialWordle.append(len(set(guessList[i])&set(hiddenWord)))\n    return\
    \ partialWordle\n"
  completion_to: "partialWordle = []\n    for word in guessList:\n        partialWordle.append(len(set(hiddenWord).intersection(set(word))))\n\
    \    return partialWordle\n"
  diff: "--- \n+++ \n@@ -8,7 +8,7 @@\n many characters, including-\"'\",+''', each\
    \ string within"
  attempt_id: 5
  total_attempts: 6
  state: fail
  _edge_tags: null
student_start_node_tags: {}
