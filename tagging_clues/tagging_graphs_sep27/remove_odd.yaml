!Graph
problem: remove_odd
nodes:
- &id005 !Node
  id: 0
  stdout:
  - 'None

    '
  - 'None

    '
  - 'None

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id007 !Node
  id: 1
  stdout:
  - ''
  - '[1.1, 2.2, 3.3]

    '
  - ''
  stderr:
  - 'IndexError: list index out of range'
  - ''
  - 'IndexError: list index out of range'
  _node_tags: null
- &id001 !Node
  id: 2
  stdout:
  - '[4, 2]

    '
  - '[]

    '
  - '[]

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id006 !Node
  id: 3
  stdout:
  - ''
  - ''
  - ''
  stderr:
  - 'IndexError: list index out of range'
  - 'IndexError: list index out of range'
  - 'IndexError: list index out of range'
  _node_tags: null
- &id002 !Node
  id: 4
  stdout:
  - '[4, 2]

    '
  - '[2.2]

    '
  - '[5]

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id004 !Node
  id: 5
  stdout:
  - '[4.3, 4, 2]

    '
  - '[1.1, 2.2, 3.3]

    '
  - '[5]

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
- &id003 !Node
  id: 6
  stdout:
  - '[4.3, 4, 2]

    '
  - '[1.1, 2.2, 3.3]

    '
  - '[]

    '
  stderr:
  - ''
  - ''
  - ''
  _node_tags: null
edges:
- !Edge
  node_from: *id001
  node_to: *id001
  username: student0
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers.\
    \ returns the list of numbers without odd integer numbers.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers. returns\
    \ the list of numbers with decimals or even numbers.\n    \"\"\"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]


    print(remove_odd([1,2,3,4,5,6,7,8,9,10]))

    '
  completion_to: 'return [num for num in lst if num % 2 == 0]

    '
  diff: "--- \n+++ \n@@ -12,8 +12,9 @@\n list of numbers-without-odd-integer+with+decimals+or+even\
    \ numbers. \"\"\""
  attempt_id: 1
  total_attempts: 6
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student0
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers.\
    \ returns the list of numbers with decimals or even numbers.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers. returns\
    \ the list of numbers with doubles or even numbers.\n    \"\"\"\n    "
  completion_from: 'return [num for num in lst if num % 2 == 0]

    '
  completion_to: 'return [num for num in lst if num % 2 == 0]

    '
  diff: "--- \n+++ \n@@ -13,7 +13,7 @@\n of numbers with-decimals+doubles or even\
    \ numbers."
  attempt_id: 2
  total_attempts: 6
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id002
  username: student0
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers.\
    \ returns the list of numbers with doubles or even numbers.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers. returns\
    \ the list of numbers with only even numbers.\n    \"\"\"\n    "
  completion_from: 'return [num for num in lst if num % 2 == 0]

    '
  completion_to: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))\n"
  diff: "--- \n+++ \n@@ -13,8 +13,7 @@\n of numbers with-doubles-or+only even numbers.\
    \ \"\"\""
  attempt_id: 3
  total_attempts: 6
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id001
  username: student0
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers.\
    \ returns the list of numbers with only even numbers.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers. returns\
    \ the list of numbers without odd numbers.\n    \"\"\"\n    "
  completion_from: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))\n"
  completion_to: 'return [x for x in lst if x % 2 == 0]


    '
  diff: "--- \n+++ \n@@ -12,8 +12,7 @@\n list of numbers-with-only-even+without+odd\
    \ numbers. \"\"\""
  attempt_id: 4
  total_attempts: 6
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id003
  username: student0
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers.\
    \ returns the list of numbers without odd numbers.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    takes in a list of numbers. create\
    \ a ODD list of odd numbers 1 through 10. returns the list of numbers with numbers\
    \ in ODD removed.\n    \"\"\"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]


    '
  completion_to: "odd = [1, 3, 5, 7, 9]\n    for i in odd:\n        if i in lst:\n\
    \            lst.remove(i)\n    return lst\n\nprint(remove_odd([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]))\n"
  diff: "--- \n+++ \n@@ -7,12 +7,24 @@\n list of numbers.+create+a+ODD+list+of+odd+numbers+1+through+10.\
    \ returns the list of numbers-without-odd-numbers.+with+numbers+in+ODD+removed.\
    \ \"\"\""
  attempt_id: 5
  total_attempts: 6
  state: success
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student10
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    Function removes all odd integers\
    \ from list. Function would keep all values if they have decimal points. Returns\
    \ list.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    Function removes all odd integers\
    \ from list, but keeps odd floats. Returns list.\n    \"\"\"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]

    '
  completion_to: 'return [i for i in lst if isinstance(i, int) and i % 2 == 0]


    '
  diff: "--- \n+++ \n@@ -7,17 +7,11 @@\n odd integers from-list.-Function-would-keep-all-values-if-they-have-decimal-points.+list,+but+keeps+odd+floats.\
    \ Returns list. \"\"\""
  attempt_id: 1
  total_attempts: 3
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student10
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    Function removes all odd integers\
    \ from list, but keeps odd floats. Returns list.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    Function removes all odd integers\
    \ from list . Returns list.\n    \"\"\"\n    "
  completion_from: 'return [i for i in lst if isinstance(i, int) and i % 2 == 0]


    '
  completion_to: 'return [x for x in lst if x % 2 == 0]

    '
  diff: "--- \n+++ \n@@ -7,11 +7,8 @@\n odd integers from-list,-but-keeps-odd-floats.+list+.\
    \ Returns list. \"\"\""
  attempt_id: 2
  total_attempts: 3
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student17
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    if given 4.3, 4, 5, 2, 7 output\
    \ 4.3, 4, 2 in a list.\nif given 1.1, 2.2, 3.3 output 1.1, 2.2, 3.3 a list.\n\
    if given 4.3, 4, 5, 2, 7 output a empty list.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    if given 4.3, 4, 5, 2, 7 output\
    \ 4.3, 4, 2 in a list.\nif given 1.1, 2.2, 3.3 output 1.1, 2.2, 3.3 a list.\n\
    if given 3, 5, 7 output a empty list.\n    \"\"\"\n    "
  completion_from: 'return [i for i in lst if i % 2 == 0]


    '
  completion_to: "new_list = []\n    for i in lst:\n        if i % 2 == 0:\n     \
    \       new_list.append(i)\n    return new_list\n\nprint(remove_odd([4.3, 4, 5,\
    \ 2, 7]))\nprint(remove_odd([1.1, 2.2, 3.3]))\nprint(remove_odd([3, 5, 7]))\n\n"
  diff: "--- \n+++ \n@@ -28,10 +28,8 @@\n list. if given-4.3,-4,+3, 5,-2, 7 output\
    \ a"
  attempt_id: 1
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student17
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    if given 4.3, 4, 5, 2, 7 output\
    \ 4.3, 4, 2 in a list.\nif given 1.1, 2.2, 3.3 output 1.1, 2.2, 3.3 a list.\n\
    if given 3, 5, 7 output a empty list.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    if given [4.3, 4, 5, 2, 7] output\
    \ 4.3, 4, 2 in a list.\n\n    \"\"\"\n    "
  completion_from: "new_list = []\n    for i in lst:\n        if i % 2 == 0:\n   \
    \         new_list.append(i)\n    return new_list\n\nprint(remove_odd([4.3, 4,\
    \ 5, 2, 7]))\nprint(remove_odd([1.1, 2.2, 3.3]))\nprint(remove_odd([3, 5, 7]))\n\
    \n"
  completion_to: 'return [i for i in lst if i % 2 == 0]


    '
  diff: "--- \n+++ \n@@ -3,11 +3,11 @@\n \"\"\" if given-4.3,+[4.3, 4, 5, 2,-7+7]\
    \ output 4.3, 4,@@ -15,24 +15,4 @@\n in a list.-if-given-1.1,-2.2,-3.3-output-1.1,-2.2,-3.3-a-list.-if-given-3,-5,-7-output-a-empty-list.\
    \ \"\"\""
  attempt_id: 2
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student17
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    if given [4.3, 4, 5, 2, 7] output\
    \ 4.3, 4, 2 in a list.\n\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    if given 4.3, 4, 5, 2, 7 output\
    \ [4.3, 4, 2]\n\n    \"\"\"\n    "
  completion_from: 'return [i for i in lst if i % 2 == 0]


    '
  completion_to: 'return [x for x in lst if x % 2 == 0]

    '
  diff: "--- \n+++ \n@@ -3,16 +3,13 @@\n \"\"\" if given-[4.3,+4.3, 4, 5, 2,-7]+7\
    \ output-4.3,+[4.3, 4,-2-in-a-list.+2] \"\"\""
  attempt_id: 3
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student17
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    if given 4.3, 4, 5, 2, 7 output\
    \ [4.3, 4, 2]\n\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    if given 4.3, 4, 5, 2, 7 output\
    \ 4.3, 4, 2 in a list.\n\n    \"\"\"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]

    '
  completion_to: 'return [x for x in lst if x % 2 == 0]


    '
  diff: "--- \n+++ \n@@ -9,7 +9,10 @@\n 2, 7 output-[4.3,+4.3, 4,-2]+2+in+a+list.\
    \ \"\"\""
  attempt_id: 4
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student17
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    if given 4.3, 4, 5, 2, 7 output\
    \ 4.3, 4, 2 in a list.\n\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    if given [4.3, 4, 5, 2, 7] output\
    \ [4.3, 4, 2]\nif given [1.1, 2.2, 3.3] output [1.1, 2.2, 3.3]\nif given [3, 5,\
    \ 7] output []\n\n    \"\"\"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]


    '
  completion_to: 'return [x for x in lst if x % 2 == 0]


    '
  diff: "--- \n+++ \n@@ -3,16 +3,29 @@\n \"\"\" if given-4.3,+[4.3, 4, 5, 2,-7+7]\
    \ output-4.3,+[4.3, 4,-2-in-a-list.+2]+if+given+[1.1,+2.2,+3.3]+output+[1.1,+2.2,+3.3]+if+given+[3,+5,+7]+output+[]\
    \ \"\"\""
  attempt_id: 5
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student17
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    if given [4.3, 4, 5, 2, 7] output\
    \ [4.3, 4, 2]\nif given [1.1, 2.2, 3.3] output [1.1, 2.2, 3.3]\nif given [3, 5,\
    \ 7] output []\n\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    if given [4.3, 4, 5, 2, 7] output\
    \ [4.3, 4, 2],\nif given [1.1, 2.2, 3.3] output [1.1, 2.2, 3.3],\nif given [3,\
    \ 5, 7] output [].\n\n    \"\"\"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]


    '
  completion_to: 'return [x for x in lst if x % 2 == 0]


    '
  diff: "--- \n+++ \n@@ -11,7 +11,7 @@\n output [4.3, 4,-2]+2], if given [1.1,@@ -20,12\
    \ +20,12 @@\n output [1.1, 2.2,-3.3]+3.3], if given [3, 5, 7] output-[]+[]. \"\
    \"\""
  attempt_id: 6
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student17
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    if given [4.3, 4, 5, 2, 7] output\
    \ [4.3, 4, 2],\nif given [1.1, 2.2, 3.3] output [1.1, 2.2, 3.3],\nif given [3,\
    \ 5, 7] output [].\n\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    input: 2 output = 4\n\n    \"\"\
    \"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]


    '
  completion_to: 'return [i for i in lst if i % 2 == 0]


    '
  diff: "--- \n+++ \n@@ -1,31 +1,9 @@\n def remove_odd(lst): \"\"\"-if-given-[4.3,-4,-5,-2,-7]+input:+2\
    \ output-[4.3,-4,-2],-if-given-[1.1,-2.2,-3.3]-output-[1.1,-2.2,-3.3],-if-given-[3,-5,-7]-output-[].+=+4\
    \ \"\"\""
  attempt_id: 7
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id002
  username: student17
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    input: 2 output = 4\n\n    \"\
    \"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    abc\n\n    \"\"\"\n    "
  completion_from: 'return [i for i in lst if i % 2 == 0]


    '
  completion_to: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n\n"
  diff: "--- \n+++ \n@@ -1,9 +1,5 @@\n def remove_odd(lst): \"\"\"-input:-2-output-=-4+abc\
    \ \"\"\""
  attempt_id: 8
  total_attempts: 10
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id001
  username: student17
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    abc\n\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    remove the odd numbers in the\
    \ list of numbers\n    \"\"\"\n    "
  completion_from: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n\n"
  completion_to: 'return [x for x in lst if x % 2 == 0]

    '
  diff: "--- \n+++ \n@@ -1,5 +1,13 @@\n def remove_odd(lst): \"\"\"-abc+remove+the+odd+numbers+in+the+list+of+numbers\
    \ \"\"\""
  attempt_id: 9
  total_attempts: 10
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id004
  node_to: *id003
  username: student18
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    Remove numbers that are not\
    \ an even number or a float from the lst. \n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    Remove numbers that are either\
    \ not an even number or a float from the lst. \n    \"\"\"\n    "
  completion_from: "for i in lst:\n        if i % 2 != 0 and type(i) != float:\n \
    \           lst.remove(i)\n    return lst\n"
  completion_to: 'return [i for i in lst if isinstance(i, float) or i % 2 == 0]

    '
  diff: "--- \n+++ \n@@ -5,6 +5,7 @@\n numbers that are+either not an even"
  attempt_id: 1
  total_attempts: 3
  state: success
  _edge_tags: null
- !Edge
  node_from: *id003
  node_to: *id003
  username: student18
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    Remove numbers that are either\
    \ not an even number or a float from the lst. \n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    Create a list. Only add either\
    \ a even number or a decimal to the list from the lst. Then, return the list.\n\
    \    \"\"\"\n    "
  completion_from: 'return [i for i in lst if isinstance(i, float) or i % 2 == 0]

    '
  completion_to: "new_list = []\n    for i in lst:\n        if i % 2 == 0 or type(i)\
    \ == float:\n            new_list.append(i)\n    return new_list\n\nprint(remove_odd([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9,"
  diff: "--- \n+++ \n@@ -1,19 +1,26 @@\n def remove_odd(lst): \"\"\"-Remove-numbers-that-are+Create+a+list.+Only+add\
    \ either-not-an+a even number or a-float+decimal+to+the+list from the lst.+Then,+return+the+list.\
    \ \"\"\""
  attempt_id: 2
  total_attempts: 3
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id004
  username: student21
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    remove only the odd integers\
    \ from given list \n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    if the value in the list is an\
    \ integer, evaluate if it is odd and remove from the list if it is odd.\n    \"\
    \"\"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]

    '
  completion_to: "for i in lst:\n        if isinstance(i, int):\n            if i\
    \ % 2 != 0:\n                lst.remove(i)\n    return lst\n"
  diff: "--- \n+++ \n@@ -1,12 +1,27 @@\n def remove_odd(lst): \"\"\"+if+the+value+in+the+list+is+an+integer,+evaluate+if+it+is+odd+and\
    \ remove-only+from the-odd-integers-from-given list+if+it+is+odd. \"\"\""
  attempt_id: 1
  total_attempts: 6
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id004
  node_to: *id001
  username: student21
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    if the value in the list is\
    \ an integer, evaluate if it is odd and remove from the list if it is odd.\n \
    \   \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    remove odd integers from given\
    \ list \n    \"\"\"\n    "
  completion_from: "for i in lst:\n        if isinstance(i, int):\n            if\
    \ i % 2 != 0:\n                lst.remove(i)\n    return lst\n"
  completion_to: 'return [x for x in lst if x % 2 == 0]

    '
  diff: "--- \n+++ \n@@ -1,27 +1,10 @@\n def remove_odd(lst): \"\"\"-if-the-value-in-the+remove+odd+integers+from+given\
    \ list-is-an-integer,-evaluate-if-it-is-odd-and-remove-from-the-list-if-it-is-odd.\
    \ \"\"\""
  attempt_id: 2
  total_attempts: 6
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id004
  username: student21
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    remove odd integers from given\
    \ list \n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    if the value in the list is an\
    \ integer, evaluate if it is odd and remove from the list if it is odd.\n    \"\
    \"\"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]

    '
  completion_to: "for i in lst:\n        if type(i) == int:\n            if i % 2\
    \ == 1:\n                lst.remove(i)\n    return lst\n\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))\n\
    print(remove_odd([1,2,3,4,5,6,7,8,9,10, \"hello\", \""
  diff: "--- \n+++ \n@@ -1,10 +1,27 @@\n def remove_odd(lst): \"\"\"+if+the+value+in+the+list+is+an+integer,+evaluate+if+it+is+odd+and\
    \ remove-odd-integers from-given+the list+if+it+is+odd. \"\"\""
  attempt_id: 3
  total_attempts: 6
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id004
  node_to: *id004
  username: student21
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    if the value in the list is\
    \ an integer, evaluate if it is odd and remove from the list if it is odd.\n \
    \   \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    if the value in the list is an\
    \ integer, evaluate if it is odd and remove from the list if it is odd.\n    \"\
    \"\"\n    "
  completion_from: "for i in lst:\n        if type(i) == int:\n            if i %\
    \ 2 == 1:\n                lst.remove(i)\n    return lst\n\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))\n\
    print(remove_odd([1,2,3,4,5,6,7,8,9,10, \"hello\", \""
  completion_to: "for i in lst:\n        if type(i) == int:\n            if i % 2\
    \ != 0:\n                lst.remove(i)\n    return lst\n\n"
  diff: ''
  attempt_id: 4
  total_attempts: 6
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id004
  node_to: *id004
  username: student21
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    if the value in the list is\
    \ an integer, evaluate if it is odd and remove from the list if it is odd.\n \
    \   \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    if the value in the list is an\
    \ integer, evaluate if it is odd and remove from the list if it is odd.\n    \"\
    \"\"\n    "
  completion_from: "for i in lst:\n        if type(i) == int:\n            if i %\
    \ 2 != 0:\n                lst.remove(i)\n    return lst\n\n"
  completion_to: "for i in lst:\n        if type(i) == int:\n            if i % 2\
    \ != 0:\n                lst.remove(i)\n    return lst\n\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))\n"
  diff: ''
  attempt_id: 5
  total_attempts: 6
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student25
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    This function removes odd integers\
    \ from the given list.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    This function removes odd integers\
    \ from the given list and returns a new list including all of the original number\
    \ except for the odd integers.\n    \"\"\"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]

    '
  completion_to: "new_list = []\n    for i in lst:\n        if i % 2 == 0:\n     \
    \       new_list.append(i)\n    return new_list\n\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))\n"
  diff: "--- \n+++ \n@@ -9,5 +9,21 @@\n from the given-list.+list+and+returns+a+new+list+including+all+of+the+original+number+except+for+the+odd+integers.\
    \ \"\"\""
  attempt_id: 1
  total_attempts: 5
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student25
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    This function removes odd integers\
    \ from the given list and returns a new list including all of the original number\
    \ except for the odd integers.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    This function removes odd integers\
    \ from the given list and returns a new list including all of the original numbers\
    \ except for the odd integers. Floats are not removed from the list.\n    \"\"\
    \"\n    "
  completion_from: "new_list = []\n    for i in lst:\n        if i % 2 == 0:\n   \
    \         new_list.append(i)\n    return new_list\n\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))\n"
  completion_to: "new_lst = []\n    for i in lst:\n        if i % 2 == 0:\n      \
    \      new_lst.append(i)\n    return new_lst\n"
  diff: "--- \n+++ \n@@ -20,10 +20,17 @@\n of the original-number+numbers except for\
    \ the odd integers.+Floats+are+not+removed+from+the+list. \"\"\""
  attempt_id: 2
  total_attempts: 5
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id002
  username: student25
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    This function removes odd integers\
    \ from the given list and returns a new list including all of the original numbers\
    \ except for the odd integers. Floats are not removed from the list.\n    \"\"\
    \"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    This function removes odd integers\
    \ from the given list and returns a list including all of the original numbers\
    \ except for the odd integers. Floats are not removed from the list.\n    \"\"\
    \"\n    "
  completion_from: "new_lst = []\n    for i in lst:\n        if i % 2 == 0:\n    \
    \        new_lst.append(i)\n    return new_lst\n"
  completion_to: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n"
  diff: "--- \n+++ \n@@ -13,7 +13,6 @@\n and returns a-new list including all"
  attempt_id: 3
  total_attempts: 5
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id002
  username: student25
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    This function removes odd integers\
    \ from the given list and returns a list including all of the original numbers\
    \ except for the odd integers. Floats are not removed from the list.\n    \"\"\
    \"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    This function removes odd integers\
    \ from the input \"lst\" and returns a list including all of the original numbers\
    \ except for the odd integers. All floats in the given list remain in the list.\n\
    \    \"\"\"\n    "
  completion_from: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n"
  completion_to: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10]))\n"
  diff: "--- \n+++ \n@@ -8,8 +8,8 @@\n integers from the-given-list+input+\"lst\"\
    \ and returns a@@ -25,11 +25,14 @@\n the odd integers.-Floats-are-not-removed-from+All+floats+in+the+given+list+remain+in\
    \ the list. \"\"\""
  attempt_id: 4
  total_attempts: 5
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id005
  node_to: *id001
  username: student26
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers in a list\
    \ and print the new list\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers in a list\n\
    \    \"\"\"\n    "
  completion_from: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    print(lst)\n\nremove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
  completion_to: 'return [x for x in lst if x % 2 == 0]

    '
  diff: "--- \n+++ \n@@ -7,9 +7,4 @@\n in a list-and-print-the-new-list \"\"\""
  attempt_id: 1
  total_attempts: 3
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id005
  username: student26
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers in a list\n\
    \    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers in a list ignoring\
    \ decimals and print the list\n    \"\"\"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]

    '
  completion_to: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    print(lst)\n\nremove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
  diff: "--- \n+++ \n@@ -7,4 +7,10 @@\n in a list+ignoring+decimals+and+print+the+list\
    \ \"\"\""
  attempt_id: 2
  total_attempts: 3
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id002
  username: student3
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    remove odd interger number\n\
    \n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    remove element which are even\
    \ or have 1 number behind the comma\n\n    \"\"\"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]


    '
  completion_to: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n\n"
  diff: "--- \n+++ \n@@ -2,7 +2,15 @@\n remove_odd(lst): \"\"\" remove-odd-interger+element+which+are+even+or+have+1\
    \ number+behind+the+comma \"\"\""
  attempt_id: 1
  total_attempts: 5
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id001
  username: student3
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    remove element which are even\
    \ or have 1 number behind the comma\n\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    remove the element which are integer\
    \ and odd\n    \"\"\"\n    "
  completion_from: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n\n"
  completion_to: 'return [x for x in lst if isinstance(x, int) and x % 2 == 0]


    '
  diff: "--- \n+++ \n@@ -2,15 +2,11 @@\n remove_odd(lst): \"\"\" remove+the element\
    \ which are-even-or-have-1-number-behind-the-comma+integer+and+odd \"\"\""
  attempt_id: 2
  total_attempts: 5
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student3
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    remove the element which are\
    \ integer and odd\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    remove the element which are odd\n\
    \    \"\"\"\n    "
  completion_from: 'return [x for x in lst if isinstance(x, int) and x % 2 == 0]


    '
  completion_to: 'return [x for x in lst if x % 2 == 0]


    '
  diff: "--- \n+++ \n@@ -6,7 +6,5 @@\n element which are-integer-and odd \"\"\""
  attempt_id: 3
  total_attempts: 5
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student3
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    remove the element which are\
    \ odd\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    remove int element which are odd\n\
    \    \"\"\"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]


    '
  completion_to: 'return [x for x in lst if x % 2 == 0]


    '
  diff: "--- \n+++ \n@@ -2,7 +2,7 @@\n remove_odd(lst): \"\"\" remove-the+int element\
    \ which are"
  attempt_id: 4
  total_attempts: 5
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id003
  node_to: *id001
  username: student30
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    Removes numbers from lst if\
    \ the number % 1 = 0 and the number % 2 = 1.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    Removes odd integers from lst.\n\
    \    \"\"\"\n    "
  completion_from: "for i in range(len(lst) - 1, -1, -1):\n        if lst[i] % 2 ==\
    \ 1:\n            lst.pop(i)\n    return lst\n\n"
  completion_to: 'return [x for x in lst if x % 2 == 0]


    '
  diff: "--- \n+++ \n@@ -2,21 +2,8 @@\n remove_odd(lst): \"\"\" Removes-numbers+odd+integers\
    \ from-lst-if-the-number-%-1-=-0-and-the-number-%-2-=-1.+lst. \"\"\""
  attempt_id: 1
  total_attempts: 2
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id005
  node_to: *id002
  username: student4
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    deletes odd whole numbers from\
    \ the list\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    deletes odd whole numbers from\
    \ the list, returns the appended list\n    \"\"\"\n    "
  completion_from: "for i in range(len(lst) - 1, -1, -1):\n        if lst[i] % 2 !=\
    \ 0:\n            del lst[i]\n\n"
  completion_to: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n"
  diff: "--- \n+++ \n@@ -7,5 +7,9 @@\n numbers from the+list,+returns+the+appended\
    \ list \"\"\""
  attempt_id: 1
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id002
  username: student4
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    deletes odd whole numbers from\
    \ the list, returns the appended list\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    deletes odd integers from the\
    \ list, returns the appended list\n    \"\"\"\n    "
  completion_from: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n"
  completion_to: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n"
  diff: "--- \n+++ \n@@ -3,8 +3,7 @@\n \"\"\" deletes odd-whole-numbers+integers from\
    \ the list,"
  attempt_id: 2
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id002
  username: student4
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    deletes odd integers from the\
    \ list, returns the appended list\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    deletes integers that are odd\
    \ from the list, returns the appended list\n    \"\"\"\n    "
  completion_from: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n"
  completion_to: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n"
  diff: "--- \n+++ \n@@ -2,8 +2,10 @@\n remove_odd(lst): \"\"\" deletes+integers+that+are\
    \ odd-integers from the list,"
  attempt_id: 3
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id002
  username: student4
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    deletes integers that are odd\
    \ from the list, returns the appended list\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    deletes ints that are odd from\
    \ the list, returns the appended list\n    \"\"\"\n    "
  completion_from: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n"
  completion_to: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n"
  diff: "--- \n+++ \n@@ -2,7 +2,7 @@\n remove_odd(lst): \"\"\" deletes-integers+ints\
    \ that are odd"
  attempt_id: 4
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id002
  username: student4
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    deletes ints that are odd from\
    \ the list, returns the appended list\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    for ints in the given list, deletes\
    \ ints that are odd from the list, returns the appended list\n    \"\"\"\n    "
  completion_from: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n"
  completion_to: "for ints in lst:\n        if ints % 2 != 0:\n            lst.remove(ints)\n\
    \    return lst\n"
  diff: "--- \n+++ \n@@ -1,6 +1,12 @@\n def remove_odd(lst): \"\"\"+for+ints+in+the+given+list,\
    \ deletes ints that"
  attempt_id: 5
  total_attempts: 7
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id004
  username: student4
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    for ints in the given list,\
    \ deletes ints that are odd from the list, returns the appended list\n    \"\"\
    \"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    for values with the int type in\
    \ the given list, deletes ints that are odd from the list, returns the appended\
    \ list\n    \"\"\"\n    "
  completion_from: "for ints in lst:\n        if ints % 2 != 0:\n            lst.remove(ints)\n\
    \    return lst\n"
  completion_to: "for i in lst:\n        if type(i) == int:\n            if i % 2\
    \ != 0:\n                lst.remove(i)\n    return lst\n"
  diff: "--- \n+++ \n@@ -2,7 +2,11 @@\n remove_odd(lst): \"\"\" for-ints+values+with+the+int+type\
    \ in the given"
  attempt_id: 6
  total_attempts: 7
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id006
  node_to: *id007
  username: student41
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    For every whole number in the\
    \ inputted list, if that item is not divisible by two it is removed from the list.\
    \ It returns the list with the remaining values.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    For every number in the inputted\
    \ list, if that item is not a float and is not divisible by two it is removed\
    \ from the list. It returns the list with the remaining values.\n    \"\"\"\n\
    \    "
  completion_from: "for i in range(len(lst)):\n        if lst[i] % 2 != 0:\n     \
    \       lst.remove(lst[i])\n    return lst\n"
  completion_to: "for i in range(len(lst)):\n        if type(lst[i]) != float and\
    \ lst[i] % 2 != 0:\n            lst.pop(i)\n    return lst\n"
  diff: "--- \n+++ \n@@ -3,7 +3,6 @@\n \"\"\" For every-whole number in the@@ -12,6\
    \ +11,11 @@\n if that item+is+not+a+float+and is not divisible"
  attempt_id: 1
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id007
  node_to: *id007
  username: student41
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    For every number in the inputted\
    \ list, if that item is not a float and is not divisible by two it is removed\
    \ from the list. It returns the list with the remaining values.\n    \"\"\"\n\
    \    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    For every item in the inputted\
    \ list, if that item is not a float and is not divisible by two it is removed\
    \ from the list. It returns the list with the remaining values.\n    \"\"\"\n\
    \    "
  completion_from: "for i in range(len(lst)):\n        if type(lst[i]) != float and\
    \ lst[i] % 2 != 0:\n            lst.pop(i)\n    return lst\n"
  completion_to: "for i in range(len(lst)):\n        if type(lst[i]) != float and\
    \ lst[i] % 2 != 0:\n            lst.pop(i)\n    return lst\n"
  diff: "--- \n+++ \n@@ -3,7 +3,7 @@\n \"\"\" For every-number+item in the inputted"
  attempt_id: 2
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id007
  node_to: *id007
  username: student41
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    For every item in the inputted\
    \ list, if that item is not a float and is not divisible by two it is removed\
    \ from the list. It returns the list with the remaining values.\n    \"\"\"\n\
    \    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    For every item in the inputted\
    \ list, if that item is a float it is kept in the list. Otherwise, if that item\
    \ is then not divisible by two, it is removed from the list. It returns the list\
    \ with the remaining values.\n    \"\"\"\n    "
  completion_from: "for i in range(len(lst)):\n        if type(lst[i]) != float and\
    \ lst[i] % 2 != 0:\n            lst.pop(i)\n    return lst\n"
  completion_to: "for i in range(len(lst)):\n        if type(lst[i]) == float:\n \
    \           continue\n        elif lst[i] % 2 != 0:\n            lst.pop(i)\n\
    \    return lst\n"
  diff: "--- \n+++ \n@@ -12,15 +12,24 @@\n that item is-not a float-and+it is+kept+in+the+list.+Otherwise,+if+that+item+is+then\
    \ not divisible by-two+two, it is removed"
  attempt_id: 3
  total_attempts: 4
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id001
  node_to: *id001
  username: student48
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    remove odd numbers from the\
    \ list\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    remove odd whole numbers from\
    \ the list\n    \"\"\"\n    "
  completion_from: 'return [x for x in lst if x % 2 == 0]

    '
  completion_to: 'return [x for x in lst if x % 2 == 0]

    '
  diff: "--- \n+++ \n@@ -3,6 +3,7 @@\n \"\"\" remove odd+whole numbers from the"
  attempt_id: 1
  total_attempts: 2
  state: fail
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id002
  username: student51
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    For each object in the list,\
    \ remove it if it is an odd integer. Return the list.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    For each object in the list, remove\
    \ it if it is an odd integer. Return the list.\n    \"\"\"\n    "
  completion_from: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n"
  completion_to: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n\n"
  diff: ''
  attempt_id: 1
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id002
  username: student51
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    For each object in the list,\
    \ remove it if it is an odd integer. Return the list.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    remove each object in the list\
    \ if it is an odd integer. Return the list.\n    \"\"\"\n    "
  completion_from: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n\n"
  completion_to: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n\n"
  diff: "--- \n+++ \n@@ -1,14 +1,12 @@\n def remove_odd(lst): \"\"\"-For+remove each\
    \ object in the-list,-remove-it+list if it is"
  attempt_id: 2
  total_attempts: 4
  state: neutral
  _edge_tags: null
- !Edge
  node_from: *id002
  node_to: *id004
  username: student51
  prompt_from: "def remove_odd(lst):\n    \"\"\"\n    remove each object in the list\
    \ if it is an odd integer. Return the list.\n    \"\"\"\n    "
  prompt_to: "def remove_odd(lst):\n    \"\"\"\n    For each object in the list, if\
    \ it is and integer then check if it is odd and if it is odd then remove it. Return\
    \ the list.\n    \"\"\"\n    "
  completion_from: "for i in lst:\n        if i % 2 != 0:\n            lst.remove(i)\n\
    \    return lst\n\n"
  completion_to: "for i in lst:\n        if type(i) == int:\n            if i % 2\
    \ != 0:\n                lst.remove(i)\n    return lst\n"
  diff: "--- \n+++ \n@@ -1,18 +1,31 @@\n def remove_odd(lst): \"\"\"-remove+For each\
    \ object in the-list+list, if it is-an+and+integer+then+check+if+it+is odd-integer.+and+if+it+is+odd+then+remove+it.\
    \ Return the list."
  attempt_id: 3
  total_attempts: 4
  state: fail
  _edge_tags: null
student_start_node_tags: {}
